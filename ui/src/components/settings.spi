open rust_operators

inl global_state_log_render () : _ leptos.pre =
    leptos.log $'"settings.global_state_log_render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap

    inl global_state_json = leptos.create_memo fun () =>
        leptos.log $'"settings.global_state_log_render () / global_state_json memo"'

        inl global_state = join global_state
        inl json : resultm.result' rust.std_string rust.std_string =
            !\($'"serde_json::to_string_pretty(&!global_state).map_err(|x| x.to_string())"')
        match json |> resultm.unbox with
        | Ok json => json |> sm'.from_std_string
        | Error error => $'"Error: " + string !error + ""'

    global_state_json |> leptos.memo_get |> leptos.text_block_pre ""

inl render () =
    print_static "<settings.render>"
    leptos.log $'"settings.render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap
    
    inl accounts_signals =
        rust.move fun () =>
            leptos.signal_get_untracked global_state.core_state .data
            |> leptos.signal_get
            |> fun data => data.accounts
            |> am'.from_slice
            |> am'.map_vec leptos.create_signal
    
    inl add_button () =
        inl on_click () =
            inl data =
                leptos.signal_get_untracked global_state.core_state .data
                |> leptos.signal_get_untracked
                |> fun data => !data

            leptos.signal_get_untracked global_state.core_state .data
            |> leptos.signal_set (heap { data with
                accounts =
                    data.accounts
                    |> am'.from_slice
                    |> fun x => x /@ a ;["" |> sm'.to_std_string]
                    |> fun (a x) => x
                    |> am'.to_slice
                    |> fun x => x : _ _ i32
            })
        inl on_click = join on_click

        inl class () =
            if true
            then ##""
            else ##" bg-gray-100"

        !\($'"let on_click = !on_click"')
        leptos.icon_button
            (leptos.add_svg ())
            class
            [
                $'"on:click=move |_| on_click()"'
                $'"aria-label=\\\"Add\\\""'
            ]

    ;[
        leptos.accordion "Accounts" true None fun () =>
            leptos.for
                (accounts_signals |> rust.func0_get |> fun (a x) => x)
                fun account, _ => account |> leptos.signal_get
                fun account, set_account =>
                    leptos.div [
                        $'"class=\\\"[display:flex] [align-items:center]\\\""'
                    ] fun () =>
                        :>(;[
                            leptos.input' None [
                            ] 
                                fun () => account |> leptos.signal_get
                                fun value => set_account |> leptos.signal_set value
                            |> leptos.element_to_view

                            add_button ()
                            |> leptos.element_to_view
                        ])
                    |> leptos.element_to_fragment
            |> leptos.view_to_fragment

            // accounts_signals
            // |> rust.func0_get
            // |> fun accounts =>
            //     accounts
            //     |> am.mapi fun i (account, set_account) =>
            //         leptos.div [
            //             $'"class=\\\"[display:flex] [align-items:center]\\\""'
            //         ] fun () =>
            //             :>(;[
            //                 leptos.input' None [
            //                 ] 
            //                     fun () => account |> leptos.signal_get
            //                     fun value => set_account |> leptos.signal_set value
            //                 |> leptos.element_to_view

            //                 add_button i
            //                 |> leptos.element_to_view
            //             ])
            //         |> leptos.element_to_view
            //     |> fun (a x) => x |> leptos.views_to_fragment
            // |> fun x => :>x
        |> leptos.element_to_view

        leptos.accordion "View" true None fun () =>
            :>(;[
                leptos.grid_pair
                    { padding = None; cols = None; class = $'"items-center"' }
                    fun () => "Dark Mode" |> leptos.text_fragment
                    fun () =>
                        leptos.toggle
                            "dark-mode"
                            fun () =>
                                leptos.signal_get_untracked global_state.core_state .dark_mode
                                |> leptos.signal_get
                            fun _ =>
                                leptos.signal_get_untracked global_state.core_state .dark_mode
                                |> leptos.signal_update not
                            |> leptos.element_to_fragment

                leptos.grid_pair
                    { padding = None; cols = None; class = $'"items-center"' }
                    fun () => "Debug" |> leptos.text_fragment
                    fun () =>
                        leptos.toggle
                            "debug"
                            fun () =>
                                leptos.signal_get_untracked global_state.core_state .debug
                                |> leptos.signal_get
                            fun _ =>
                                leptos.signal_get_untracked global_state.core_state .debug
                                |> leptos.signal_update not
                            |> leptos.element_to_fragment
            ])
        |> leptos.element_to_view

        if leptos.signal_get_untracked global_state.core_state .debug |> leptos.signal_get then
            leptos.accordion "Debug" true None fun () =>
                leptos.grid_pair
                    { padding = None; cols = None; class = "" }
                    fun () => "Global State" |> leptos.text_fragment
                    fun () => global_state_log_render () |> leptos.element_to_fragment
                |> leptos.element_to_fragment
            |> leptos.element_to_view
        else ;[] |> leptos.views_to_view
    ]
    |> leptos.views_to_fragment
