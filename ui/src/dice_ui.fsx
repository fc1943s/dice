#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::HtmlElement")>]
#endif
type web_sys_HtmlElement = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::RwSignal<$0>")>]
#endif
type leptos_prelude_RwSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Error")>]
#endif
type rexie_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Rexie")>]
#endif
type rexie_Rexie = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Resource<$0, $1>")>]
#endif
type leptos_prelude_Resource<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("*/ $0 /*")>]
#endif
type TypeEmit<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("PartialEqWrapper<$0>")>]
#endif
type PartialEqWrapper<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Transaction")>]
#endif
type rexie_Transaction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Store")>]
#endif
type rexie_Store = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("wasm_bindgen::JsValue")>]
#endif
type wasm_bindgen_JsValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_wasm_bindgen::Error")>]
#endif
type serde_wasm_bindgen_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Value")>]
#endif
type serde_json_Value = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("borsh::io::Error")>]
#endif
type borsh_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::Window")>]
#endif
type web_sys_Window = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::Storage")>]
#endif
type web_sys_Storage = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Memo<$0>")>]
#endif
type leptos_prelude_Memo<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::ReadSignal<$0>")>]
#endif
type leptos_prelude_ReadSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::WriteSignal<$0>")>]
#endif
type leptos_prelude_WriteSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Action<$0, $1>")>]
#endif
type leptos_prelude_Action<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::location::Location")>]
#endif
type leptos_router_location_Location = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::location::Url")>]
#endif
type leptos_router_Url = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Root")>] type crate_model_near_nearblocks_Root = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Txn")>] type crate_model_near_nearblocks_Txn = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Block")>] type crate_model_near_nearblocks_Block = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Action")>] type crate_model_near_nearblocks_Action = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::ActionsAgg")>] type crate_model_near_nearblocks_ActionsAgg = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Outcomes")>] type crate_model_near_nearblocks_Outcomes = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::OutcomesAgg")>] type crate_model_near_nearblocks_OutcomesAgg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("futures::future::TryJoinAll<$0>")>]
#endif
type futures_future_TryJoinAll<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::RequestBuilder")>]
#endif
type reqwest_RequestBuilder = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::Error")>]
#endif
type reqwest_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::Response")>]
#endif
type reqwest_Response = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Signal<$0>")>]
#endif
type leptos_prelude_Signal<'T> = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcInput")>] type crate_model_near_rpc_RpcInput = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcResponse")>] type crate_model_near_rpc_RpcResponse = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::TransactionStatus")>] type crate_model_near_rpc_TransactionStatus = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Receipt")>] type crate_model_near_rpc_Receipt = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ReceiptDetail")>] type crate_model_near_rpc_ReceiptDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ActionDetail")>] type crate_model_near_rpc_ActionDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::TransferDetail")>] type crate_model_near_rpc_TransferDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ReceiptsOutcome")>] type crate_model_near_rpc_ReceiptsOutcome = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::OutcomeDetail")>] type crate_model_near_rpc_OutcomeDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Metadata")>] type crate_model_near_rpc_Metadata = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::GasProfile")>] type crate_model_near_rpc_GasProfile = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Proof")>] type crate_model_near_rpc_Proof = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcError")>] type crate_model_near_rpc_RpcError = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ErrorCause")>] type crate_model_near_rpc_ErrorCause = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ErrorCauseInfo")>] type crate_model_near_rpc_ErrorCauseInfo = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::AnyView")>]
#endif
type leptos_prelude_AnyView_ = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Fragment")>]
#endif
type leptos_dom_Fragment = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("impl $0")>]
#endif
type Impl<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::View<$0>")>]
#endif
type leptos_prelude_View<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func0<$0>")>]
#endif
type Func0<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::ev::Event")>]
#endif
type leptos_ev_Event = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("wasm_bindgen::closure::Closure<$0>")>]
#endif
type wasm_bindgen_closure_Closure<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::IntoView")>]
#endif
type leptos_IntoView = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::NestedRoute<_, _, _, _>")>]
#endif
type leptos_router_NestedRoute = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::HtmlElement<$0, _, _>")>]
#endif
type leptos_dom_html_HtmlElement<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Div")>]
#endif
type leptos_html_Div = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::*;
//"
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn($0, $1)")>]
#endif
type ActionFn2<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::NavigateOptions")>]
#endif
type leptos_router_NavigateOptions = class end
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::ElementChild;
//"
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::ClassAttribute;
//"
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Span")>]
#endif
type leptos_html_Span = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Path")>]
#endif
type leptos_svg_Path = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Svg")>]
#endif
type leptos_svg_Svg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Summary")>]
#endif
type leptos_html_Summary = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Pre")>]
#endif
type leptos_html_Pre = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Circle")>]
#endif
type leptos_svg_Circle = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Button")>]
#endif
type leptos_html_Button = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Details")>]
#endif
type leptos_html_Details = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Input")>]
#endif
type leptos_html_Input = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Animate")>]
#endif
type leptos_svg_Animate = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Rect")>]
#endif
type leptos_svg_Rect = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Th")>]
#endif
type leptos_html_Th = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Tr")>]
#endif
type leptos_html_Tr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Td")>]
#endif
type leptos_html_Td = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Thead")>]
#endif
type leptos_html_Thead = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Tbody")>]
#endif
type leptos_html_Tbody = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Table")>]
#endif
type leptos_html_Table = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Label")>]
#endif
type leptos_html_Label = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dt")>]
#endif
type leptos_html_Dt = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dd")>]
#endif
type leptos_html_Dd = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dl")>]
#endif
type leptos_html_Dl = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Main")>]
#endif
type leptos_html_Main = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Option_")>]
#endif
type leptos_html_Option = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Select")>]
#endif
type leptos_html_Select = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::A")>]
#endif
type leptos_html_A = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Nav")>]
#endif
type leptos_html_Nav = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn()")>]
#endif
type FnUnit = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("js_sys::Function")>]
#endif
type js_sys_Function = class end
type [<Struct>] US0 =
    | US0_0 of f0_0 : web_sys_HtmlElement
    | US0_1
and [<Struct>] US1 =
    | US1_0
    | US1_1
and Heap0 = {l0 : Vec<(bool * std_string_String)>; l1 : std_string_String option; l2 : int32; l3 : int32; l4 : US1}
and Heap1 = {l0 : leptos_prelude_RwSignal<bool>; l1 : leptos_prelude_RwSignal<bool>; l2 : leptos_prelude_RwSignal<std_string_String>; l3 : leptos_prelude_RwSignal<Heap0>}
and  Heap2 = {l0 : leptos_prelude_RwSignal<Heap1>; l1 : leptos_prelude_RwSignal<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>>}
and [<Struct>] US2 =
    | US2_0
    | US2_1
and Heap3 = {l0 : bool; l1 : bool; l2 : std_string_String; l3 : Heap0}
and [<Struct>] US3 =
    | US3_0 of f0_0 : Heap3
    | US3_1
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_sync_Arc<rexie_Rexie>
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : Heap3 option
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : wasm_bindgen_JsValue
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : serde_json_Value
    | US7_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : Heap3 option option
    | US8_1 of f1_0 : std_string_String
and [<Struct>] US9 =
    | US9_0 of f0_0 : US3
    | US9_1
and [<Struct>] US10 =
    | US10_0 of f0_0 : web_sys_Storage option
    | US10_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US12 =
    | US12_0 of f0_0 : web_sys_Storage
    | US12_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : US12
    | US11_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US13 =
    | US13_0 of f0_0 : std_string_String option
    | US13_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_string_String
    | US15_1
and [<Struct>] US14 =
    | US14_0 of f0_0 : US15
    | US14_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US16 =
    | US16_0 of f0_0 : US15
    | US16_1
and [<Struct>] US17 =
    | US17_0 of f0_0 : leptos_prelude_RwSignal<bool>
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : bool
    | US18_1
and [<Struct>] US20 =
    | US20_0
and [<Struct>] US19 =
    | US19_0
    | US19_1 of f1_0 : US20
    | US19_2
    | US19_3
    | US19_4
and [<Struct>] US21 =
    | US21_0 of f0_0 : leptos_router_Url
    | US21_1 of f1_0 : std_string_String
and [<Struct>] US22 =
    | US22_0 of f0_0 : US19
    | US22_1
and [<Struct>] US23 =
    | US23_0 of f0_0 : leptos_dom_Fragment
    | US23_1
and [<Struct>] US24 =
    | US24_0
    | US24_1
and Mut0 = {mutable l0 : int32}
and Mut1 = {mutable l0 : int32; mutable l1 : Vec<struct (string * US24 * string * bool * bool)>}
and Mut2 = {mutable l0 : int32; mutable l1 : Vec<string>}
and Heap4 = {l0 : std_string_String}
and [<Struct>] US25 =
    | US25_0 of f0_0 : Vec<Heap4 option>
    | US25_1 of f1_0 : std_string_String
and [<Struct>] US26 =
    | US26_0 of f0_0 : Heap4
    | US26_1
and [<Struct>] US27 =
    | US27_0 of f0_0 : Result<Vec<Heap4 option>, std_string_String>
    | US27_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : Vec<US26>
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US28 =
    | US28_0 of f0_0 : US29
    | US28_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : string
    | US32_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : US32
    | US31_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : US31
    | US30_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : US26
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : string option
    | US34_1 of f1_0 : std_string_String
and [<Struct>] US35 =
    | US35_0 of f0_0 : Vec<unit>
    | US35_1 of f1_0 : std_string_String
and [<Struct>] US37 =
    | US37_0 of f0_0 : (US26 [])
    | US37_1 of f1_0 : std_string_String
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : Result<Vec<string option>, std_string_String>
    | US38_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : Vec<string option>
    | US40_1 of f1_0 : std_string_String
and [<Struct>] US39 =
    | US39_0 of f0_0 : US40
    | US39_1
and [<Struct>] US42 =
    | US42_0 of f0_0 : Vec<US32>
    | US42_1 of f1_0 : std_string_String
and [<Struct>] US41 =
    | US41_0 of f0_0 : US42
    | US41_1
and [<Struct>] US43 =
    | US43_0 of f0_0 : US32
    | US43_1
and Heap5 = {l0 : std_string_String; l1 : std_string_String; l2 : std_string_String; l3 : std_string_String; l4 : std_string_String; l5 : std_string_String; l6 : uint32; l7 : (struct (std_string_String * std_string_String option) []); l8 : float; l9 : bool; l10 : float; l11 : (std_string_String [])}
and [<Struct>] US44 =
    | US44_0 of f0_0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option
    | US44_1 of f1_0 : std_string_String
and [<Struct>] US46 =
    | US46_0 of f0_0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])
    | US46_1
and [<Struct>] US45 =
    | US45_0 of f0_0 : US46
    | US45_1 of f1_0 : std_string_String
and [<Struct>] US48 =
    | US48_0 of f0_0 : (struct (string * unativeint * Heap5) [])
    | US48_1
and [<Struct>] US47 =
    | US47_0 of f0_0 : US48
    | US47_1 of f1_0 : std_string_String
and [<Struct>] US50 =
    | US50_0 of f0_0 : Vec<struct (string * unativeint * Heap5)>
    | US50_1
and [<Struct>] US49 =
    | US49_0 of f0_0 : US50
    | US49_1 of f1_0 : std_string_String
and [<Struct>] US51 =
    | US51_0 of f0_0 : Vec<struct (string * unativeint * Heap5)> option
    | US51_1 of f1_0 : std_string_String
and [<Struct>] US52 =
    | US52_0 of f0_0 : Vec<struct (string * unativeint * Heap5)>
    | US52_1 of f1_0 : std_string_String
and Mut3 = {mutable l0 : int32; mutable l1 : US52}
and [<Struct>] US53 =
    | US53_0 of f0_0 : (struct (string * unativeint * Heap5) [])
    | US53_1 of f1_0 : std_string_String
and [<Struct>] US54 =
    | US54_0 of f0_0 : (struct (string * unativeint * Heap5) []) option
    | US54_1 of f1_0 : std_string_String
and [<Struct>] US56 =
    | US56_0 of f0_0 : (struct (string * US24 * string * bool * bool) [])
    | US56_1
and [<Struct>] US55 =
    | US55_0 of f0_0 : US56
    | US55_1 of f1_0 : std_string_String
and [<Struct>] US57 =
    | US57_0 of f0_0 : (struct (string * US24 * string * bool * bool) []) option
    | US57_1 of f1_0 : std_string_String
and Heap6 = {l0 : int32}
and [<Struct>] US58 =
    | US58_0 of f0_0 : std_string_String * f0_1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * f0_2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * f0_3 : std_string_String option
    | US58_1
and [<Struct>] US59 =
    | US59_0 of f0_0 : US15
    | US59_1 of f1_0 : std_string_String
and [<Struct>] US60 =
    | US60_0 of f0_0 : US58
    | US60_1 of f1_0 : std_string_String
and [<Struct>] US61 =
    | US61_0 of f0_0 : crate_model_near_rpc_RpcResponse
    | US61_1 of f1_0 : std_string_String
and [<Struct>] US62 =
    | US62_0 of f0_0 : std_string_String * f0_1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * f0_2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * f0_3 : std_string_String option
    | US62_1 of f1_0 : std_string_String
and [<Struct>] US63 =
    | US63_0 of f0_0 : US60
    | US63_1
and [<Struct>] US64 =
    | US64_0 of f0_0 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option
    | US64_1 of f1_0 : std_string_String
and [<Struct>] US65 =
    | US65_0 of f0_0 : std_string_String * f0_1 : std_string_String * f0_2 : struct (std_string_String option * std_string_String option) option * f0_3 : int32 * f0_4 : std_string_String * f0_5 : std_string_String
    | US65_1
and [<Struct>] US66 =
    | US66_0 of f0_0 : leptos_prelude_Memo<US32>
    | US66_1
and [<Struct>] US67 =
    | US67_0 of f0_0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>
    | US67_1
and [<Struct>] US68 =
    | US68_0 of f0_0 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>
    | US68_1
and [<Struct>] US69 =
    | US69_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US69_1
and [<Struct>] US70 =
    | US70_0 of f0_0 : string
    | US70_1 of f1_0 : string
and Mut4 = {mutable l0 : int32; mutable l1 : US32}
and [<Struct>] US71 =
    | US71_0 of f0_0 : std_string_String
    | US71_1 of f1_0 : std_string_String
let rec closure1 () (v0 : web_sys_HtmlElement) : US0 =
    US0_0(v0)
and method0 () : (web_sys_HtmlElement -> US0) =
    closure1()
and method1 () : string =
    let v0 : string = ""
    v0
and method2 (v0 : web_sys_HtmlElement) : web_sys_HtmlElement =
    v0
and closure6 () () : US2 =
    US2_1
and closure7 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method7 () : (rexie_Error -> std_string_String) =
    closure7()
and method8 (v0 : Result<rexie_Rexie, std_string_String>) : Result<rexie_Rexie, std_string_String> =
    v0
and closure8 () (v0 : rexie_Rexie) : rexie_Rexie =
    v0
and method9 () : (rexie_Rexie -> rexie_Rexie) =
    closure8()
and method10 (v0 : int64, v1 : string) : string =
    let v2 : int64 = System.Convert.ToInt64 v1.Length
    let v3 : bool = v2 <= v0
    if v3 then
        v1
    else
        let v4 : (int64 -> float) = float
        let v5 : float = v4 v0
        let v8 : float = v5 / 2.0
        let v9 : (float -> float) = ceil
        let v10 : float = v9 v8
        let v11 : (float -> int64) = int64
        let v12 : int64 = v11 v10
        let v15 : (float -> float) = floor
        let v16 : float = v15 v8
        let v17 : (float -> int64) = int64
        let v18 : int64 = v17 v16
        let v21 : int64 = v12 - 1L
        let v22 : string = v1.[int 0L..int v21]
        let v26 : int64 = v2 - v18
        let v27 : int64 = v2 - 1L
        let v28 : string = v1.[int v26..int v27]
        let v32 : string = "..."
        let v33 : (string []) = [|v22; v32; v28|]
        let v34 : string seq = v33 |> Seq.ofArray
        let v37 : (string -> (string seq -> string)) = String.concat
        let v38 : string = ""
        let v39 : (string seq -> string) = v37 v38
        v39 v34
and method11 (v0 : std_sync_Arc<rexie_Rexie>) : std_sync_Arc<rexie_Rexie> =
    v0
and method12 (v0 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>>) : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> =
    v0
and method6 () : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> =
    let v0 : string = "let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //"
    let v1 : (unit -> US2) = closure6()
    Fable.Core.RustInterop.emitRustExpr v1 v0 
    let v2 : string = "x"
    let v3 : US2 = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "true; let __future_init = Box::pin(async move { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "state_core.use_database (2) / database create_local_resource"
    let v7 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "state_core.build_database ()"
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; let __future_init = Box::pin(async { //"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())"
    let v15 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "v15.await"
    let v17 : Result<rexie_Rexie, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : (rexie_Error -> std_string_String) = method7()
    let v19 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "$0.map_err(|x| $1(x))"
    let v21 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v17, v18) v20 
    let _v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "$0.map_err(|x| $1(x))"
    let v23 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v17, v18) v22 
    let _v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "$0.map_err(|x| $1(x))"
    let v25 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v17, v18) v24 
    let _v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : Result<rexie_Rexie, std_string_String> = match v17 with Ok x -> Ok x | Error x -> Error (v18 x)
    let _v19 = v26 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : Result<rexie_Rexie, std_string_String> = match v17 with Ok x -> Ok x | Error x -> Error (v18 x)
    let _v19 = v27 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Result<rexie_Rexie, std_string_String> = match v17 with Ok x -> Ok x | Error x -> Error (v18 x)
    let _v19 = v28 
    #endif
#else
    let v29 : Result<rexie_Rexie, std_string_String> = match v17 with Ok x -> Ok x | Error x -> Error (v18 x)
    let _v19 = v29 
    #endif
    let v30 : Result<rexie_Rexie, std_string_String> = _v19 
    let v33 : Result<rexie_Rexie, std_string_String> = method8(v30)
    let v34 : string = ""
    let v35 : string = "}"
    let v36 : string = v34 + v35 
    let v37 : _ = v33 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = $"true; let v37 = $0"
    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v37 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = $"true; let v37 = $0"
    let v42 : bool = Fable.Core.RustInterop.emitRustExpr v37 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = $"true; let v37 = $0"
    let v44 : bool = Fable.Core.RustInterop.emitRustExpr v37 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : bool = true
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : bool = true
    let _v38 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v47 : bool = true
    let _v38 = v47 
    #endif
#else
    let v48 : bool = true
    let _v38 = v48 
    #endif
    let v49 : bool = _v38 
    let v52 : string = $"true; v37 " + v36 + "); " + v34 + " // rust.fix_closure'"
    let v53 : bool = Fable.Core.RustInterop.emitRustExpr () v52 
    let v54 : string = "__future_init"
    let v55 : _ = Fable.Core.RustInterop.emitRustExpr () v54 
    let v56 : string = "v55"
    let v57 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "v57.await"
    let v59 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v58 
    let v60 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "$0.unwrap()"
    let v62 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v59 v61 
    let _v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "$0.unwrap()"
    let v64 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v59 v63 
    let _v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "$0.unwrap()"
    let v66 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v59 v65 
    let _v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v67 : rexie_Rexie = match v59 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v60 = v67 
    #endif
#if FABLE_COMPILER_PYTHON
    let v68 : rexie_Rexie = match v59 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v60 = v68 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v69 : rexie_Rexie = match v59 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v60 = v69 
    #endif
#else
    let v70 : rexie_Rexie = match v59 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v60 = v70 
    #endif
    let v71 : rexie_Rexie = _v60 
    let v74 : (rexie_Rexie -> rexie_Rexie) = method9()
    let v75 : rexie_Rexie = v74 v71
    let v76 : string = "std::sync::Arc::new(v75)"
    let v77 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = $"%A{v77}"
    let v81 : string = "state_core.use_database (3) / database create_local_resource / result: " + string v78 + ""
    let v82 : int64 = 200L
    let v83 : string = method10(v82, v81)
    let v84 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : std_sync_Arc<rexie_Rexie> = method11(v77)
    let v87 : string = v34 + v35 
    let v88 : _ = v86 
    let v89 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v90 : string = $"true; let v88 = $0"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v88 v90 
    let _v89 = v91 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v92 : string = $"true; let v88 = $0"
    let v93 : bool = Fable.Core.RustInterop.emitRustExpr v88 v92 
    let _v89 = v93 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v94 : string = $"true; let v88 = $0"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr v88 v94 
    let _v89 = v95 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : bool = true
    let _v89 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v97 : bool = true
    let _v89 = v97 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : bool = true
    let _v89 = v98 
    #endif
#else
    let v99 : bool = true
    let _v89 = v99 
    #endif
    let v100 : bool = _v89 
    let v103 : string = $"true; v88 " + v87 + "); " + v34 + " // rust.fix_closure'"
    let v104 : bool = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : string = "__future_init"
    let v106 : _ = Fable.Core.RustInterop.emitRustExpr () v105 
    let v107 : string = "v106"
    let v108 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> = Fable.Core.RustInterop.emitRustExpr () v107 
    let v109 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> = method12(v108)
    let v110 : string = "v109.await"
    let v111 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = v34 + v35 
    let v113 : string = v112 + v35 
    let v114 : string = "{"
    let v115 : string = v34 + v114 
    let v116 : _ = v111 
    let v117 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v118 : string = $"true; let v116 = $0"
    let v119 : bool = Fable.Core.RustInterop.emitRustExpr v116 v118 
    let _v117 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : string = $"true; let v116 = $0"
    let v121 : bool = Fable.Core.RustInterop.emitRustExpr v116 v120 
    let _v117 = v121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v122 : string = $"true; let v116 = $0"
    let v123 : bool = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _v117 = v123 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v124 : bool = true
    let _v117 = v124 
    #endif
#if FABLE_COMPILER_PYTHON
    let v125 : bool = true
    let _v117 = v125 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v126 : bool = true
    let _v117 = v126 
    #endif
#else
    let v127 : bool = true
    let _v117 = v127 
    #endif
    let v128 : bool = _v117 
    let v131 : string = $"true; v116 " + v113 + "); " + v115 + " // rust.fix_closure'"
    let v132 : bool = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = "__create_local_resource"
    let v134 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v133 
    v134
and closure10 () () : unit =
    let v0 : string = "} //"
    Fable.Core.RustInterop.emitRustExpr () v0 
    let v1 : string = "#[derive( //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : string = "  Debug, //"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "  Clone, //"
    Fable.Core.RustInterop.emitRustExpr () v3 
    let v4 : string = ")] //"
    Fable.Core.RustInterop.emitRustExpr () v4 
    let v5 : string = "pub struct PartialEqWrapper<T>(T); /*"
    Fable.Core.RustInterop.emitRustExpr () v5 
    let v6 : string = "*/ impl PartialEq for PartialEqWrapper< /*"
    Fable.Core.RustInterop.emitRustExpr () v6 
    let v7 : TypeEmit<std_sync_Arc<rexie_Rexie>> = null |> unbox<TypeEmit<std_sync_Arc<rexie_Rexie>>>
    let v10 : string = "*/ > { //"
    Fable.Core.RustInterop.emitRustExpr () v10 
    let v11 : string = "fn eq(&self, other: &Self) -> bool { //"
    Fable.Core.RustInterop.emitRustExpr () v11 
    let v12 : string = $"self"
    let v13 : Ref<PartialEqWrapper<std_sync_Arc<rexie_Rexie>>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = $"other"
    let v15 : Ref<PartialEqWrapper<std_sync_Arc<rexie_Rexie>>> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "&$0.0"
    let v17 : Ref<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "&$0.0"
    let v19 : Ref<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v13 v18 
    let v20 : string = "std::sync::Arc::ptr_eq($0, $1)"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr struct (v19, v17) v20 
    let v22 : string = $"v21 //"
    Fable.Core.RustInterop.emitRustExpr () v22 
    let v23 : string = "} } } fn _main() { { { //"
    Fable.Core.RustInterop.emitRustExpr () v23 
    ()
and closure9 (v0 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) () : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option =
    let v1 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v2 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "x"
    let v6 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : (unit -> unit) = closure10()
    let _v7 = true
    let v8 : string = "PartialEqWrapper($0)"
    let v9 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v6 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_optionm_map_"
    let v13 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v12 
    v13
and closure11 () (v0 : std_sync_Arc<rexie_Rexie>) : US4 =
    US4_0(v0)
and method14 () : (std_sync_Arc<rexie_Rexie> -> US4) =
    closure11()
and closure12 () (v0 : string) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and method15 (v0 : std_sync_Arc<rexie_Rexie>) : std_sync_Arc<rexie_Rexie> =
    v0
and closure13 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method16 () : (rexie_Error -> std_string_String) =
    closure13()
and method17 () : string =
    let v0 : string = "store"
    v0
and closure14 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method18 () : (rexie_Error -> std_string_String) =
    closure14()
and method19 () : string =
    let v0 : string = "core-state-heap"
    v0
and closure15 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method20 () : (rexie_Error -> std_string_String) =
    closure15()
and closure16 () (v0 : wasm_bindgen_JsValue) : US6 =
    US6_0(v0)
and method21 () : (wasm_bindgen_JsValue -> US6) =
    closure16()
and method22 (v0 : wasm_bindgen_JsValue) : wasm_bindgen_JsValue =
    v0
and closure17 () (v0 : serde_wasm_bindgen_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method23 () : (serde_wasm_bindgen_Error -> std_string_String) =
    closure17()
and closure18 () (v0 : serde_json_Value) : US7 =
    US7_0(v0)
and method24 () : (serde_json_Value -> US7) =
    closure18()
and method25 (v0 : serde_json_Value) : serde_json_Value =
    v0
and closure19 () (v0 : serde_json_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method26 () : (serde_json_Error -> std_string_String) =
    closure19()
and closure20 () (v0 : borsh_io_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method27 () : (borsh_io_Error -> std_string_String) =
    closure20()
and method28 (v0 : Result<Heap3 option option, std_string_String>) : Result<Heap3 option option, std_string_String> =
    v0
and closure21 () (v0 : Heap3 option option) : US8 =
    US8_0(v0)
and method29 () : (Heap3 option option -> US8) =
    closure21()
and closure22 () (v0 : std_string_String) : US8 =
    US8_1(v0)
and method30 () : (std_string_String -> US8) =
    closure22()
and closure23 () (v0 : Heap3 option) : US5 =
    US5_0(v0)
and method31 () : (Heap3 option -> US5) =
    closure23()
and closure24 () (v0 : Heap3) : US3 =
    US3_0(v0)
and method32 () : (Heap3 -> US3) =
    closure24()
and method33 (v0 : US3) : US3 =
    v0
and method34 (v0 : std_pin_Pin<Box<Dyn<std_future_Future<US3>>>>) : std_pin_Pin<Box<Dyn<std_future_Future<US3>>>> =
    v0
and method13 (v0 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) : leptos_prelude_Resource<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, US3> =
    let v1 : string = "let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //"
    let v2 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = closure9(v0)
    Fable.Core.RustInterop.emitRustExpr v2 v1 
    let v3 : string = "x"
    let v4 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "true; let __future_init = Box::pin(async move { //"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : string = $"%A{v4}"
    let v10 : string = "state_core.use_core_database (2) / core_state_heap create_local_resource / database: " + v7 + ""
    let v11 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v4 v13 
    let v15 : string = "x"
    let v16 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "$0.0"
    let v18 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "true; $0 })"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "_optionm_map_"
    let v22 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : (std_sync_Arc<rexie_Rexie> -> US4) = method14()
    let v24 : US4 option = v22 |> Option.map v23 
    let v35 : US4 = US4_1
    let v36 : US4 = v24 |> Option.defaultValue v35 
    let v345 : US5 =
        match v36 with
        | US4_1 -> (* None *)
            US5_1
        | US4_0(v40) -> (* Some *)
            let v41 : string = "core-state-heap"
            let v42 : string = "state_core.get_data () / id: " + v41 + ""
            let v43 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : string = "true; let __future_init = Box::pin(async { //"
            let v46 : bool = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "store"
            let v48 : (string []) = [|v47|]
            let v49 : string = "$0.to_vec()"
            let v50 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v48 v49 
            let v51 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v52 : (string -> std_string_String) = closure12()
            let v53 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v50, v52) v51 
            let v54 : std_sync_Arc<rexie_Rexie> = method15(v40)
            let v55 : string = "$0.transaction(&v53, rexie::TransactionMode::ReadOnly)"
            let v56 : Result<rexie_Transaction, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v54 v55 
            let v57 : (rexie_Error -> std_string_String) = method16()
            let v58 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v59 : string = "$0.map_err(|x| $1(x))"
            let v60 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v56, v57) v59 
            let _v58 = v60 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v61 : string = "$0.map_err(|x| $1(x))"
            let v62 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v56, v57) v61 
            let _v58 = v62 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v63 : string = "$0.map_err(|x| $1(x))"
            let v64 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v56, v57) v63 
            let _v58 = v64 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v65 : Result<rexie_Transaction, std_string_String> = match v56 with Ok x -> Ok x | Error x -> Error (v57 x)
            let _v58 = v65 
            #endif
#if FABLE_COMPILER_PYTHON
            let v66 : Result<rexie_Transaction, std_string_String> = match v56 with Ok x -> Ok x | Error x -> Error (v57 x)
            let _v58 = v66 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v67 : Result<rexie_Transaction, std_string_String> = match v56 with Ok x -> Ok x | Error x -> Error (v57 x)
            let _v58 = v67 
            #endif
#else
            let v68 : Result<rexie_Transaction, std_string_String> = match v56 with Ok x -> Ok x | Error x -> Error (v57 x)
            let _v58 = v68 
            #endif
            let v69 : Result<rexie_Transaction, std_string_String> = _v58 
            let v72 : string = "$0?"
            let v73 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v69 v72 
            let v74 : string = method17()
            let v75 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v76 : string = "&*$0"
            let v77 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v76 
            let _v75 = v77 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v78 : string = "&*$0"
            let v79 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v78 
            let _v75 = v79 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v80 : string = "&*$0"
            let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v80 
            let _v75 = v81 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v82 : Ref<Str> = v74 |> unbox<Ref<Str>>
            let _v75 = v82 
            #endif
#if FABLE_COMPILER_PYTHON
            let v85 : Ref<Str> = v74 |> unbox<Ref<Str>>
            let _v75 = v85 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Ref<Str> = v74 |> unbox<Ref<Str>>
            let _v75 = v88 
            #endif
#else
            let v91 : Ref<Str> = v74 |> unbox<Ref<Str>>
            let _v75 = v91 
            #endif
            let v94 : Ref<Str> = _v75 
            let v99 : string = "v73.store($0)"
            let v100 : Result<rexie_Store, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v94 v99 
            let v101 : (rexie_Error -> std_string_String) = method18()
            let v102 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v103 : string = "$0.map_err(|x| $1(x))"
            let v104 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v103 
            let _v102 = v104 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v105 : string = "$0.map_err(|x| $1(x))"
            let v106 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v105 
            let _v102 = v106 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v107 : string = "$0.map_err(|x| $1(x))"
            let v108 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v107 
            let _v102 = v108 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v109 : Result<rexie_Store, std_string_String> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
            let _v102 = v109 
            #endif
#if FABLE_COMPILER_PYTHON
            let v110 : Result<rexie_Store, std_string_String> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
            let _v102 = v110 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v111 : Result<rexie_Store, std_string_String> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
            let _v102 = v111 
            #endif
#else
            let v112 : Result<rexie_Store, std_string_String> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
            let _v102 = v112 
            #endif
            let v113 : Result<rexie_Store, std_string_String> = _v102 
            let v116 : string = "$0?"
            let v117 : rexie_Store = Fable.Core.RustInterop.emitRustExpr v113 v116 
            let v118 : string = method19()
            let v119 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v120 : string = "&*$0"
            let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v120 
            let _v119 = v121 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v122 : string = "&*$0"
            let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v122 
            let _v119 = v123 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v124 : string = "&*$0"
            let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
            let _v119 = v125 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v126 : Ref<Str> = v118 |> unbox<Ref<Str>>
            let _v119 = v126 
            #endif
#if FABLE_COMPILER_PYTHON
            let v129 : Ref<Str> = v118 |> unbox<Ref<Str>>
            let _v119 = v129 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Ref<Str> = v118 |> unbox<Ref<Str>>
            let _v119 = v132 
            #endif
#else
            let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
            let _v119 = v135 
            #endif
            let v138 : Ref<Str> = _v119 
            let v143 : string = "wasm_bindgen::JsValue::from_str($0)"
            let v144 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr v138 v143 
            let v145 : string = $"Box::pin(rexie::Store::get(&v117, v144))"
            let v146 : std_pin_Pin<Box<Dyn<std_future_Future<Result<wasm_bindgen_JsValue option, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v145 
            let v147 : string = "v146.await"
            let v148 : Result<wasm_bindgen_JsValue option, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v147 
            let v149 : (rexie_Error -> std_string_String) = method20()
            let v150 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v151 : string = "$0.map_err(|x| $1(x))"
            let v152 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v148, v149) v151 
            let _v150 = v152 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v153 : string = "$0.map_err(|x| $1(x))"
            let v154 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v148, v149) v153 
            let _v150 = v154 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v155 : string = "$0.map_err(|x| $1(x))"
            let v156 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v148, v149) v155 
            let _v150 = v156 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v157 : Result<wasm_bindgen_JsValue option, std_string_String> = match v148 with Ok x -> Ok x | Error x -> Error (v149 x)
            let _v150 = v157 
            #endif
#if FABLE_COMPILER_PYTHON
            let v158 : Result<wasm_bindgen_JsValue option, std_string_String> = match v148 with Ok x -> Ok x | Error x -> Error (v149 x)
            let _v150 = v158 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v159 : Result<wasm_bindgen_JsValue option, std_string_String> = match v148 with Ok x -> Ok x | Error x -> Error (v149 x)
            let _v150 = v159 
            #endif
#else
            let v160 : Result<wasm_bindgen_JsValue option, std_string_String> = match v148 with Ok x -> Ok x | Error x -> Error (v149 x)
            let _v150 = v160 
            #endif
            let v161 : Result<wasm_bindgen_JsValue option, std_string_String> = _v150 
            let v164 : string = "$0?"
            let v165 : wasm_bindgen_JsValue option = Fable.Core.RustInterop.emitRustExpr v161 v164 
            let v166 : (wasm_bindgen_JsValue -> US6) = method21()
            let v167 : US6 option = v165 |> Option.map v166 
            let v178 : US6 = US6_1
            let v179 : US6 = v167 |> Option.defaultValue v178 
            let v279 : US5 =
                match v179 with
                | US6_1 -> (* None *)
                    US5_1
                | US6_0(v183) -> (* Some *)
                    let v184 : wasm_bindgen_JsValue = method22(v183)
                    let v185 : string = "serde_wasm_bindgen::from_value(v184)"
                    let v186 : Result<serde_json_Value option, serde_wasm_bindgen_Error> = Fable.Core.RustInterop.emitRustExpr () v185 
                    let v187 : (serde_wasm_bindgen_Error -> std_string_String) = method23()
                    let v188 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v189 : string = "$0.map_err(|x| $1(x))"
                    let v190 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v186, v187) v189 
                    let _v188 = v190 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v191 : string = "$0.map_err(|x| $1(x))"
                    let v192 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v186, v187) v191 
                    let _v188 = v192 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v193 : string = "$0.map_err(|x| $1(x))"
                    let v194 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v186, v187) v193 
                    let _v188 = v194 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v195 : Result<serde_json_Value option, std_string_String> = match v186 with Ok x -> Ok x | Error x -> Error (v187 x)
                    let _v188 = v195 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v196 : Result<serde_json_Value option, std_string_String> = match v186 with Ok x -> Ok x | Error x -> Error (v187 x)
                    let _v188 = v196 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v197 : Result<serde_json_Value option, std_string_String> = match v186 with Ok x -> Ok x | Error x -> Error (v187 x)
                    let _v188 = v197 
                    #endif
#else
                    let v198 : Result<serde_json_Value option, std_string_String> = match v186 with Ok x -> Ok x | Error x -> Error (v187 x)
                    let _v188 = v198 
                    #endif
                    let v199 : Result<serde_json_Value option, std_string_String> = _v188 
                    let v202 : string = "$0?"
                    let v203 : serde_json_Value option = Fable.Core.RustInterop.emitRustExpr v199 v202 
                    let v204 : (serde_json_Value -> US7) = method24()
                    let v205 : US7 option = v203 |> Option.map v204 
                    let v216 : US7 = US7_1
                    let v217 : US7 = v205 |> Option.defaultValue v216 
                    match v217 with
                    | US7_1 -> (* None *)
                        US5_1
                    | US7_0(v221) -> (* Some *)
                        let v222 : serde_json_Value = method25(v221)
                        let v223 : string = "serde_json::from_value(v222)"
                        let v224 : Result<Vec<uint8>, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v223 
                        let v225 : (serde_json_Error -> std_string_String) = method26()
                        let v226 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v227 : string = "$0.map_err(|x| $1(x))"
                        let v228 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v227 
                        let _v226 = v228 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v229 : string = "$0.map_err(|x| $1(x))"
                        let v230 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v229 
                        let _v226 = v230 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v231 : string = "$0.map_err(|x| $1(x))"
                        let v232 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v231 
                        let _v226 = v232 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v233 : Result<Vec<uint8>, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
                        let _v226 = v233 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v234 : Result<Vec<uint8>, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
                        let _v226 = v234 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v235 : Result<Vec<uint8>, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
                        let _v226 = v235 
                        #endif
#else
                        let v236 : Result<Vec<uint8>, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
                        let _v226 = v236 
                        #endif
                        let v237 : Result<Vec<uint8>, std_string_String> = _v226 
                        let v240 : string = "$0?"
                        let v241 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v237 v240 
                        let v242 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                        let v243 : (uint8 []) = Fable.Core.RustInterop.emitRustExpr v241 v242 
                        let v244 : int32 = v243.Length
                        let v245 : string = "state_core.get_data () / data_len: " + string v244 + ""
                        let v246 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v247 : bool = Fable.Core.RustInterop.emitRustExpr v245 v246 
                        let v248 : string = "$0.to_vec()"
                        let v249 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v243 v248 
                        let v250 : string = "v249.as_slice()"
                        let v251 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v250 
                        let v252 : string = "true; let mut v251 = v251"
                        let v253 : bool = Fable.Core.RustInterop.emitRustExpr () v252 
                        let v254 : string = "borsh::BorshDeserialize::deserialize(&mut v251)"
                        let v255 : Result<Heap3 option, borsh_io_Error> = Fable.Core.RustInterop.emitRustExpr () v254 
                        let v256 : (borsh_io_Error -> std_string_String) = method27()
                        let v257 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v258 : string = "$0.map_err(|x| $1(x))"
                        let v259 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v255, v256) v258 
                        let _v257 = v259 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v260 : string = "$0.map_err(|x| $1(x))"
                        let v261 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v255, v256) v260 
                        let _v257 = v261 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v262 : string = "$0.map_err(|x| $1(x))"
                        let v263 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v255, v256) v262 
                        let _v257 = v263 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v264 : Result<Heap3 option, std_string_String> = match v255 with Ok x -> Ok x | Error x -> Error (v256 x)
                        let _v257 = v264 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v265 : Result<Heap3 option, std_string_String> = match v255 with Ok x -> Ok x | Error x -> Error (v256 x)
                        let _v257 = v265 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v266 : Result<Heap3 option, std_string_String> = match v255 with Ok x -> Ok x | Error x -> Error (v256 x)
                        let _v257 = v266 
                        #endif
#else
                        let v267 : Result<Heap3 option, std_string_String> = match v255 with Ok x -> Ok x | Error x -> Error (v256 x)
                        let _v257 = v267 
                        #endif
                        let v268 : Result<Heap3 option, std_string_String> = _v257 
                        let v271 : string = "$0?"
                        let v272 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v268 v271 
                        US5_0(v272)
            let v286 : Heap3 option option =
                match v279 with
                | US5_1 -> (* None *)
                    let v284 : Heap3 option option = None
                    v284
                | US5_0(v280) -> (* Some *)
                    let v281 : Heap3 option option = Some v280 
                    v281
            let v287 : Result<Heap3 option option, std_string_String> = Ok v286 
            let v288 : Result<Heap3 option option, std_string_String> = method28(v287)
            let v289 : string = ""
            let v290 : string = "}"
            let v291 : string = v289 + v290 
            let v292 : _ = v288 
            let v293 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v294 : string = $"true; let v292 = $0"
            let v295 : bool = Fable.Core.RustInterop.emitRustExpr v292 v294 
            let _v293 = v295 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v296 : string = $"true; let v292 = $0"
            let v297 : bool = Fable.Core.RustInterop.emitRustExpr v292 v296 
            let _v293 = v297 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v298 : string = $"true; let v292 = $0"
            let v299 : bool = Fable.Core.RustInterop.emitRustExpr v292 v298 
            let _v293 = v299 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v300 : bool = true
            let _v293 = v300 
            #endif
#if FABLE_COMPILER_PYTHON
            let v301 : bool = true
            let _v293 = v301 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v302 : bool = true
            let _v293 = v302 
            #endif
#else
            let v303 : bool = true
            let _v293 = v303 
            #endif
            let v304 : bool = _v293 
            let v307 : string = $"true; v292 " + v291 + "); " + v289 + " // rust.fix_closure'"
            let v308 : bool = Fable.Core.RustInterop.emitRustExpr () v307 
            let v309 : string = "__future_init"
            let v310 : _ = Fable.Core.RustInterop.emitRustExpr () v309 
            let v311 : string = "v310"
            let v312 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap3 option option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v311 
            let v313 : string = "v312.await"
            let v314 : Result<Heap3 option option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v313 
            let v315 : (Heap3 option option -> US8) = method29()
            let v316 : (std_string_String -> US8) = method30()
            let v317 : US8 = match v314 with Ok x -> v315 x | Error x -> v316 x
            match v317 with
            | US8_1(v336) -> (* Error *)
                let v337 : string = "state_core.use_core_database (3) / error: " + string v336 + ""
                let v338 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v339 : bool = Fable.Core.RustInterop.emitRustExpr v337 v338 
                US5_1
            | US8_0(v318) -> (* Ok *)
                let v319 : (Heap3 option -> US5) = method31()
                let v320 : US5 option = v318 |> Option.map v319 
                let v331 : US5 = US5_1
                let v332 : US5 = v320 |> Option.defaultValue v331 
                v332
    let v367 : US9 =
        match v345 with
        | US5_1 -> (* None *)
            US9_1
        | US5_0(v346) -> (* Some *)
            let v347 : (Heap3 -> US3) = method32()
            let v348 : US3 option = v346 |> Option.map v347 
            let v359 : US3 = US3_1
            let v360 : US3 = v348 |> Option.defaultValue v359 
            US9_0(v360)
    let v374 : US3 =
        match v367 with
        | US9_0(v368) -> (* Some *)
            match v368 with
            | US3_0(v369) -> (* Some *)
                US3_0(v369)
            | _ ->
                US3_1
        | _ ->
            US3_1
    let v375 : US3 = method33(v374)
    let v376 : string = ""
    let v377 : string = "}"
    let v378 : string = v376 + v377 
    let v379 : _ = v375 
    let v380 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v381 : string = $"true; let v379 = $0"
    let v382 : bool = Fable.Core.RustInterop.emitRustExpr v379 v381 
    let _v380 = v382 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v383 : string = $"true; let v379 = $0"
    let v384 : bool = Fable.Core.RustInterop.emitRustExpr v379 v383 
    let _v380 = v384 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v385 : string = $"true; let v379 = $0"
    let v386 : bool = Fable.Core.RustInterop.emitRustExpr v379 v385 
    let _v380 = v386 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : bool = true
    let _v380 = v387 
    #endif
#if FABLE_COMPILER_PYTHON
    let v388 : bool = true
    let _v380 = v388 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v389 : bool = true
    let _v380 = v389 
    #endif
#else
    let v390 : bool = true
    let _v380 = v390 
    #endif
    let v391 : bool = _v380 
    let v394 : string = $"true; v379 " + v378 + "); " + v376 + " // rust.fix_closure'"
    let v395 : bool = Fable.Core.RustInterop.emitRustExpr () v394 
    let v396 : string = "__future_init"
    let v397 : _ = Fable.Core.RustInterop.emitRustExpr () v396 
    let v398 : string = "v397"
    let v399 : std_pin_Pin<Box<Dyn<std_future_Future<US3>>>> = Fable.Core.RustInterop.emitRustExpr () v398 
    let v400 : std_pin_Pin<Box<Dyn<std_future_Future<US3>>>> = method34(v399)
    let v401 : string = "v400.await"
    let v402 : US3 = Fable.Core.RustInterop.emitRustExpr () v401 
    let v403 : string = v376 + v377 
    let v404 : string = v403 + v377 
    let v405 : string = "{"
    let v406 : string = v376 + v405 
    let v407 : _ = v402 
    let v408 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v409 : string = $"true; let v407 = $0"
    let v410 : bool = Fable.Core.RustInterop.emitRustExpr v407 v409 
    let _v408 = v410 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v411 : string = $"true; let v407 = $0"
    let v412 : bool = Fable.Core.RustInterop.emitRustExpr v407 v411 
    let _v408 = v412 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v413 : string = $"true; let v407 = $0"
    let v414 : bool = Fable.Core.RustInterop.emitRustExpr v407 v413 
    let _v408 = v414 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v415 : bool = true
    let _v408 = v415 
    #endif
#if FABLE_COMPILER_PYTHON
    let v416 : bool = true
    let _v408 = v416 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v417 : bool = true
    let _v408 = v417 
    #endif
#else
    let v418 : bool = true
    let _v408 = v418 
    #endif
    let v419 : bool = _v408 
    let v422 : string = $"true; v407 " + v404 + "); " + v406 + " // rust.fix_closure'"
    let v423 : bool = Fable.Core.RustInterop.emitRustExpr () v422 
    let v424 : string = "__create_local_resource"
    let v425 : leptos_prelude_Resource<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, US3> = Fable.Core.RustInterop.emitRustExpr () v424 
    v425
and method35 () : web_sys_Window =
    let v0 : string = "leptos::prelude::window()"
    let v1 : web_sys_Window = Fable.Core.RustInterop.emitRustExpr () v0 
    v1
and method36 (v0 : web_sys_Window) : Result<web_sys_Storage option, wasm_bindgen_JsValue> =
    let v1 : string = "$0.local_storage()"
    let v2 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure26 () (v0 : web_sys_Storage option) : US10 =
    US10_0(v0)
and method37 () : (web_sys_Storage option -> US10) =
    closure26()
and closure27 () (v0 : wasm_bindgen_JsValue) : US10 =
    US10_1(v0)
and method38 () : (wasm_bindgen_JsValue -> US10) =
    closure27()
and closure28 () (v0 : web_sys_Storage) : US12 =
    US12_0(v0)
and method39 () : (web_sys_Storage -> US12) =
    closure28()
and closure29 () (v0 : US3) : US9 =
    US9_0(v0)
and method40 () : (US3 -> US9) =
    closure29()
and method41 (v0 : web_sys_Storage) : web_sys_Storage =
    v0
and method42 () : string =
    let v0 : string = "core-state-heap"
    v0
and closure30 () (v0 : std_string_String option) : US13 =
    US13_0(v0)
and method43 () : (std_string_String option -> US13) =
    closure30()
and closure31 () (v0 : wasm_bindgen_JsValue) : US13 =
    US13_1(v0)
and method44 () : (wasm_bindgen_JsValue -> US13) =
    closure31()
and method45 (v0 : std_string_String option) : std_string_String option =
    v0
and closure32 () (v0 : std_string_String) : US15 =
    US15_0(v0)
and method46 () : (std_string_String -> US15) =
    closure32()
and method48 (v0 : string) : string =
    v0
and closure34 () (v0 : serde_json_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method49 () : (serde_json_Error -> std_string_String) =
    closure34()
and closure33 () (v0 : std_string_String) : US3 =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = method48(v2)
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : string = "serde_json::from_str(&$0)"
    let v29 : Result<Heap3, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v23 v28 
    let v30 : (serde_json_Error -> std_string_String) = method49()
    let v31 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "$0.map_err(|x| $1(x))"
    let v33 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v32 
    let _v31 = v33 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v34 : string = "$0.map_err(|x| $1(x))"
    let v35 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v34 
    let _v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : string = "$0.map_err(|x| $1(x))"
    let v37 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v36 
    let _v31 = v37 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _v31 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _v31 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _v31 = v40 
    #endif
#else
    let v41 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _v31 = v41 
    #endif
    let v42 : Result<Heap3, std_string_String> = _v31 
    let v45 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v46 : string = "$0.ok()"
    let v47 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v46 
    let _v45 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "$0.ok()"
    let v49 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v48 
    let _v45 = v49 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v50 : string = "$0.ok()"
    let v51 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v50 
    let _v45 = v51 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _v45 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _v45 = v53 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _v45 = v54 
    #endif
#else
    let v55 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _v45 = v55 
    #endif
    let v56 : Heap3 option = _v45 
    let v59 : (Heap3 -> US3) = method32()
    let v60 : US3 option = v56 |> Option.map v59 
    let v71 : US3 = US3_1
    let v72 : US3 = v60 |> Option.defaultValue v71 
    v72
and method47 () : (std_string_String -> US3) =
    closure33()
and closure36 (v0 : Heap3) (v1 : bool) : bool =
    let v2 : string = "state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : bool = v0.l0
    v5
and closure37 (v0 : Heap3) (v1 : bool) : bool =
    let v2 : string = "state_core.use_core_database (8) / effect core_state_heap / debug signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : bool = v0.l1
    v5
and closure38 (v0 : Heap3) (v1 : std_string_String) : std_string_String =
    let v2 : string = "state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : std_string_String = v0.l2
    v5
and closure39 (v0 : Heap3) (v1 : Heap0) : Heap0 =
    let v2 : string = "state_core.use_core_database (10) / effect core_state_heap / data signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : Heap0 = v0.l3
    v5
and closure35 (v0 : Heap2, v1 : Heap3) () : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<bool> = v4.l0
    let v6 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
    let v11 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v12 : (bool -> bool) = closure36(v1)
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v12 v11 
    let v14 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v15 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v16 : Heap1 = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : leptos_prelude_RwSignal<bool> = v16.l1
    let v18 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
    let v23 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v24 : (bool -> bool) = closure37(v1)
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr v24 v23 
    let v26 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v27 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v28 : Heap1 = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : leptos_prelude_RwSignal<std_string_String> = v28.l2
    let v30 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v31 : bool = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : TypeEmit<std_string_String> = null |> unbox<TypeEmit<std_string_String>>
    let v35 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v36 : (std_string_String -> std_string_String) = closure38(v1)
    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v36 v35 
    let v38 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v39 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v40 : Heap1 = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : leptos_prelude_RwSignal<Heap0> = v40.l3
    let v42 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v43 : bool = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : TypeEmit<Heap0> = null |> unbox<TypeEmit<Heap0>>
    let v47 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v48 : (Heap0 -> Heap0) = closure39(v1)
    let v49 : bool = Fable.Core.RustInterop.emitRustExpr v48 v47 
    ()
and closure25 (v0 : Heap2, v1 : leptos_prelude_Resource<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, US3>) () : unit =
    let v2 : string = "state_core.use_core_database (4) / effect core_state_heap / ##1"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : web_sys_Window = method35()
    let v6 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method36(v5)
    let v7 : (web_sys_Storage option -> US10) = method37()
    let v8 : (wasm_bindgen_JsValue -> US10) = method38()
    let v9 : US10 = match v6 with Ok x -> v7 x | Error x -> v8 x
    let v32 : US11 =
        match v9 with
        | US10_1(v29) -> (* Error *)
            US11_1(v29)
        | US10_0(v10) -> (* Ok *)
            let v11 : (web_sys_Storage -> US12) = method39()
            let v12 : US12 option = v10 |> Option.map v11 
            let v23 : US12 = US12_1
            let v24 : US12 = v12 |> Option.defaultValue v23 
            US11_0(v24)
    match v32 with
    | US11_0(v33) -> (* Ok *)
        match v33 with
        | US12_0(v34) -> (* Some *)
            let v35 : string = $"leptos::prelude::RwSignal::get(&$0)"
            let v36 : US3 option = Fable.Core.RustInterop.emitRustExpr v1 v35 
            let v37 : (US3 -> US9) = method40()
            let v38 : US9 option = v36 |> Option.map v37 
            let v49 : US9 = US9_1
            let v50 : US9 = v38 |> Option.defaultValue v49 
            let v54 : string = $"%A{v50}"
            let v57 : string = "state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: " + v54 + ""
            let v58 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v59 : bool = Fable.Core.RustInterop.emitRustExpr v57 v58 
            let v438 : US3 =
                match v50 with
                | US9_0(v60) -> (* Some *)
                    match v60 with
                    | US3_0(v61) -> (* Some *)
                        US3_0(v61)
                    | _ ->
                        let v63 : web_sys_Storage = method41(v34)
                        let v64 : string = method42()
                        let v65 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v66 : string = "&*$0"
                        let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v64 v66 
                        let _v65 = v67 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v68 : string = "&*$0"
                        let v69 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v64 v68 
                        let _v65 = v69 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v70 : string = "&*$0"
                        let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v64 v70 
                        let _v65 = v71 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v72 : Ref<Str> = v64 |> unbox<Ref<Str>>
                        let _v65 = v72 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v75 : Ref<Str> = v64 |> unbox<Ref<Str>>
                        let _v65 = v75 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v78 : Ref<Str> = v64 |> unbox<Ref<Str>>
                        let _v65 = v78 
                        #endif
#else
                        let v81 : Ref<Str> = v64 |> unbox<Ref<Str>>
                        let _v65 = v81 
                        #endif
                        let v84 : Ref<Str> = _v65 
                        let v89 : string = $"web_sys::Storage::get_item(&v63, $0)"
                        let v90 : Result<std_string_String option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v84 v89 
                        let v91 : (std_string_String option -> US13) = method43()
                        let v92 : (wasm_bindgen_JsValue -> US13) = method44()
                        let v93 : US13 = match v90 with Ok x -> v91 x | Error x -> v92 x
                        let v119 : US14 =
                            match v93 with
                            | US13_1(v116) -> (* Error *)
                                US14_1(v116)
                            | US13_0(v94) -> (* Ok *)
                                let v95 : std_string_String option = method45(v94)
                                let v96 : string = "serde_json::from_value(v95.into()).unwrap()"
                                let v97 : std_string_String option = Fable.Core.RustInterop.emitRustExpr () v96 
                                let v98 : (std_string_String -> US15) = method46()
                                let v99 : US15 option = v97 |> Option.map v98 
                                let v110 : US15 = US15_1
                                let v111 : US15 = v99 |> Option.defaultValue v110 
                                US14_0(v111)
                        let v125 : US16 =
                            match v119 with
                            | US14_1(v122) -> (* Error *)
                                US16_1
                            | US14_0(v120) -> (* Ok *)
                                US16_0(v120)
                        let v132 : US15 =
                            match v125 with
                            | US16_0(v126) -> (* Some *)
                                match v126 with
                                | US15_0(v127) -> (* Some *)
                                    US15_0(v127)
                                | _ ->
                                    US15_1
                            | _ ->
                                US15_1
                        let v139 : std_string_String option =
                            match v132 with
                            | US15_1 -> (* None *)
                                let v137 : std_string_String option = None
                                v137
                            | US15_0(v133) -> (* Some *)
                                let v134 : std_string_String option = Some v133 
                                v134
                        let v140 : (std_string_String -> US3) = method47()
                        let v141 : US3 option = v139 |> Option.map v140 
                        let v226 : (US3 -> US9) = method40()
                        let v227 : US9 option = v141 |> Option.map v226 
                        let v238 : US9 = US9_1
                        let v239 : US9 = v227 |> Option.defaultValue v238 
                        match v239 with
                        | US9_0(v243) -> (* Some *)
                            match v243 with
                            | US3_0(v244) -> (* Some *)
                                US3_0(v244)
                            | _ ->
                                US3_1
                        | _ ->
                            US3_1
                | _ ->
                    let v251 : web_sys_Storage = method41(v34)
                    let v252 : string = method42()
                    let v253 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v254 : string = "&*$0"
                    let v255 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v254 
                    let _v253 = v255 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v256 : string = "&*$0"
                    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v256 
                    let _v253 = v257 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v258 : string = "&*$0"
                    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v258 
                    let _v253 = v259 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v260 : Ref<Str> = v252 |> unbox<Ref<Str>>
                    let _v253 = v260 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v263 : Ref<Str> = v252 |> unbox<Ref<Str>>
                    let _v253 = v263 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v266 : Ref<Str> = v252 |> unbox<Ref<Str>>
                    let _v253 = v266 
                    #endif
#else
                    let v269 : Ref<Str> = v252 |> unbox<Ref<Str>>
                    let _v253 = v269 
                    #endif
                    let v272 : Ref<Str> = _v253 
                    let v277 : string = $"web_sys::Storage::get_item(&v251, $0)"
                    let v278 : Result<std_string_String option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v272 v277 
                    let v279 : (std_string_String option -> US13) = method43()
                    let v280 : (wasm_bindgen_JsValue -> US13) = method44()
                    let v281 : US13 = match v278 with Ok x -> v279 x | Error x -> v280 x
                    let v307 : US14 =
                        match v281 with
                        | US13_1(v304) -> (* Error *)
                            US14_1(v304)
                        | US13_0(v282) -> (* Ok *)
                            let v283 : std_string_String option = method45(v282)
                            let v284 : string = "serde_json::from_value(v283.into()).unwrap()"
                            let v285 : std_string_String option = Fable.Core.RustInterop.emitRustExpr () v284 
                            let v286 : (std_string_String -> US15) = method46()
                            let v287 : US15 option = v285 |> Option.map v286 
                            let v298 : US15 = US15_1
                            let v299 : US15 = v287 |> Option.defaultValue v298 
                            US14_0(v299)
                    let v313 : US16 =
                        match v307 with
                        | US14_1(v310) -> (* Error *)
                            US16_1
                        | US14_0(v308) -> (* Ok *)
                            US16_0(v308)
                    let v320 : US15 =
                        match v313 with
                        | US16_0(v314) -> (* Some *)
                            match v314 with
                            | US15_0(v315) -> (* Some *)
                                US15_0(v315)
                            | _ ->
                                US15_1
                        | _ ->
                            US15_1
                    let v327 : std_string_String option =
                        match v320 with
                        | US15_1 -> (* None *)
                            let v325 : std_string_String option = None
                            v325
                        | US15_0(v321) -> (* Some *)
                            let v322 : std_string_String option = Some v321 
                            v322
                    let v328 : (std_string_String -> US3) = method47()
                    let v329 : US3 option = v327 |> Option.map v328 
                    let v414 : (US3 -> US9) = method40()
                    let v415 : US9 option = v329 |> Option.map v414 
                    let v426 : US9 = US9_1
                    let v427 : US9 = v415 |> Option.defaultValue v426 
                    match v427 with
                    | US9_0(v431) -> (* Some *)
                        match v431 with
                        | US3_0(v432) -> (* Some *)
                            US3_0(v432)
                        | _ ->
                            US3_1
                    | _ ->
                        US3_1
            let v439 : string = $"%A{v438}"
            let v442 : string = "state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: " + v439 + ""
            let v443 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v444 : bool = Fable.Core.RustInterop.emitRustExpr v442 v443 
            match v438 with
            | US3_0(v445) -> (* Some *)
                let v446 : string = "true; leptos::batch(move || $0());"
                let v447 : (unit -> unit) = closure35(v0, v445)
                let v448 : bool = Fable.Core.RustInterop.emitRustExpr v447 v446 
                ()
            | _ ->
                ()
        | _ ->
            ()
    | _ ->
        ()
and closure40 (v0 : Heap2) () : std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>> =
    let v1 : string = "state_core.use_core_database (11) / loading create_memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>> = v0.l1
    let v5 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v6 : std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method50 () : string =
    let v0 : string = "core-state-heap"
    v0
and method51 (v0 : Result<unit, rexie_Error>) : Result<unit, rexie_Error> =
    v0
and method52 () : unit =
    ()
and closure41 (v0 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) (v1 : Heap3) : std_pin_Pin<Box<Dyn<std_future_Future<unit>>>> =
    let v2 : string = $"%A{v1}"
    let v5 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v6 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : (std_sync_Arc<rexie_Rexie> -> US4) = method14()
    let v8 : US4 option = v6 |> Option.map v7 
    let v19 : US4 = US4_1
    let v20 : US4 = v8 |> Option.defaultValue v19 
    let v24 : string = "true; let __future_init = Box::pin(async move { //"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    match v20 with
    | US4_1 -> (* None *)
        let v112 : string = "state_core.use_core_database (13) / set_core_state_heap_action / database=None"
        let v113 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v114 : bool = Fable.Core.RustInterop.emitRustExpr v112 v113 
        ()
    | US4_0(v26) -> (* Some *)
        let v27 : string = "state_core.use_core_database (12) / set_core_state_heap_action / value: " + string v2 + ""
        let v28 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v29 : bool = Fable.Core.RustInterop.emitRustExpr v27 v28 
        let v30 : string = $"%A{v1}"
        let v33 : int64 = System.Convert.ToInt64 v30.Length
        let v34 : string = "state_core.set_data () / data_len: " + string v33 + ""
        let v35 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v36 : bool = Fable.Core.RustInterop.emitRustExpr v34 v35 
        let v37 : string = "true; let __future_init = Box::pin(async move { //"
        let v38 : bool = Fable.Core.RustInterop.emitRustExpr () v37 
        let v39 : string = "true; let mut data = Vec::new()"
        let v40 : bool = Fable.Core.RustInterop.emitRustExpr () v39 
        let v41 : string = "true; borsh::BorshSerialize::serialize(&$0, &mut data).unwrap()"
        let v42 : bool = Fable.Core.RustInterop.emitRustExpr v1 v41 
        let v43 : string = "data"
        let v44 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v43 
        let v45 : string = "serde_wasm_bindgen::to_value(&v44).unwrap()"
        let v46 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr () v45 
        let v47 : string = method50()
        let v48 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v49 : string = "&*$0"
        let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v47 v49 
        let _v48 = v50 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v51 : string = "&*$0"
        let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v47 v51 
        let _v48 = v52 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v53 : string = "&*$0"
        let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v47 v53 
        let _v48 = v54 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v55 : Ref<Str> = v47 |> unbox<Ref<Str>>
        let _v48 = v55 
        #endif
#if FABLE_COMPILER_PYTHON
        let v58 : Ref<Str> = v47 |> unbox<Ref<Str>>
        let _v48 = v58 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v61 : Ref<Str> = v47 |> unbox<Ref<Str>>
        let _v48 = v61 
        #endif
#else
        let v64 : Ref<Str> = v47 |> unbox<Ref<Str>>
        let _v48 = v64 
        #endif
        let v67 : Ref<Str> = _v48 
        let v72 : string = "$0.transaction(&[\"store\"], rexie::TransactionMode::ReadWrite)?"
        let v73 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v26 v72 
        let v74 : string = "v73.store(\"store\")?"
        let v75 : rexie_Store = Fable.Core.RustInterop.emitRustExpr () v74 
        let v76 : string = "true; v75.put(&v46, Some(&$0.into())).await?"
        let v77 : bool = Fable.Core.RustInterop.emitRustExpr v67 v76 
        let v78 : string = "true; v73.done().await?"
        let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
        let v80 : Result<unit, rexie_Error> = Ok () 
        let v81 : Result<unit, rexie_Error> = method51(v80)
        let v82 : string = ""
        let v83 : string = "}"
        let v84 : string = v82 + v83 
        let v85 : _ = v81 
        let v86 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v87 : string = $"true; let v85 = $0"
        let v88 : bool = Fable.Core.RustInterop.emitRustExpr v85 v87 
        let _v86 = v88 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v89 : string = $"true; let v85 = $0"
        let v90 : bool = Fable.Core.RustInterop.emitRustExpr v85 v89 
        let _v86 = v90 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v91 : string = $"true; let v85 = $0"
        let v92 : bool = Fable.Core.RustInterop.emitRustExpr v85 v91 
        let _v86 = v92 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v93 : bool = true
        let _v86 = v93 
        #endif
#if FABLE_COMPILER_PYTHON
        let v94 : bool = true
        let _v86 = v94 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v95 : bool = true
        let _v86 = v95 
        #endif
#else
        let v96 : bool = true
        let _v86 = v96 
        #endif
        let v97 : bool = _v86 
        let v100 : string = $"true; v85 " + v84 + "); " + v82 + " // rust.fix_closure'"
        let v101 : bool = Fable.Core.RustInterop.emitRustExpr () v100 
        let v102 : string = "__future_init"
        let v103 : _ = Fable.Core.RustInterop.emitRustExpr () v102 
        let v104 : string = "v103"
        let v105 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v104 
        let v106 : string = "v105.await"
        let v107 : Result<unit, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v106 
        let v108 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v109 : string = "$0.unwrap()"
        Fable.Core.RustInterop.emitRustExpr v107 v109 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "$0.unwrap()"
        Fable.Core.RustInterop.emitRustExpr v107 v110 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v111 : string = "$0.unwrap()"
        Fable.Core.RustInterop.emitRustExpr v107 v111 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        #endif
#if FABLE_COMPILER_PYTHON
        match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        #endif
#else
        match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        #endif
        // run_target_args' is_unit
        ()
    method52()
    let v115 : string = ""
    let v116 : string = "}"
    let v117 : string = v115 + v116 
    let v118 : string = v117 + v116 
    let v119 : string = "{"
    let v120 : string = v115 + v119 
    let v121 : _ = () 
    let v122 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v123 : string = $"true; let v121 = $0"
    let v124 : bool = Fable.Core.RustInterop.emitRustExpr v121 v123 
    let _v122 = v124 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v125 : string = $"true; let v121 = $0"
    let v126 : bool = Fable.Core.RustInterop.emitRustExpr v121 v125 
    let _v122 = v126 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v127 : string = $"true; let v121 = $0"
    let v128 : bool = Fable.Core.RustInterop.emitRustExpr v121 v127 
    let _v122 = v128 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : bool = true
    let _v122 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v130 : bool = true
    let _v122 = v130 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : bool = true
    let _v122 = v131 
    #endif
#else
    let v132 : bool = true
    let _v122 = v132 
    #endif
    let v133 : bool = _v122 
    let v136 : string = $"true; v121 " + v118 + "); " + v120 + " // rust.fix_closure'"
    let v137 : bool = Fable.Core.RustInterop.emitRustExpr () v136 
    let v138 : string = "__future_init"
    let v139 : _ = Fable.Core.RustInterop.emitRustExpr () v138 
    let v140 : string = "v139"
    let v141 : std_pin_Pin<Box<Dyn<std_future_Future<unit>>>> = Fable.Core.RustInterop.emitRustExpr () v140 
    v141
and method53 (v0 : std_string_String) : std_string_String =
    v0
and closure43 () (v0 : leptos_prelude_RwSignal<bool>) : US17 =
    US17_0(v0)
and method54 () : (leptos_prelude_RwSignal<bool> -> US17) =
    closure43()
and closure44 () (v0 : bool) : bool =
    let v1 : string = "state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    true
and method55 (v0 : web_sys_Storage) : web_sys_Storage =
    v0
and method56 () : string =
    let v0 : string = "core-state-heap"
    v0
and method57 (v0 : Heap3) : Heap3 =
    v0
and closure42 (v0 : Heap2, v1 : leptos_prelude_Memo<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>>, v2 : leptos_prelude_WriteSignal<bool>, v3 : leptos_prelude_ReadSignal<bool>, v4 : leptos_prelude_Action<Heap3, unit>) () : unit =
    let v5 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let v7 : string = "state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: " + string v6 + ""
    let v8 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v11 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v12 : Heap1 = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_prelude_RwSignal<bool> = v12.l0
    let v14 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v17 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v18 : Heap1 = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : leptos_prelude_RwSignal<bool> = v18.l1
    let v20 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v23 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v24 : Heap1 = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : leptos_prelude_RwSignal<std_string_String> = v24.l2
    let v26 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v29 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v30 : Heap1 = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_RwSignal<Heap0> = v30.l3
    let v32 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v33 : Heap0 = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : Heap3 = {l0 = v15; l1 = v21; l2 = v27; l3 = v33} : Heap3
    let v35 : string = $"%A{v34}"
    let v38 : string = "state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: " + string v35 + ""
    let v39 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = $"$0()"
    let v42 : std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr v1 v41 
    let v43 : string = "dark_mode_key"
    let v44 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v43 v45 
    let _v44 = v46 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v43 v47 
    let _v44 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "&*$0"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _v44 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : Ref<Str> = v43 |> unbox<Ref<Str>>
    let _v44 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : Ref<Str> = v43 |> unbox<Ref<Str>>
    let _v44 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v57 : Ref<Str> = v43 |> unbox<Ref<Str>>
    let _v44 = v57 
    #endif
#else
    let v60 : Ref<Str> = v43 |> unbox<Ref<Str>>
    let _v44 = v60 
    #endif
    let v63 : Ref<Str> = _v44 
    let v68 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v63 v69 
    let _v68 = v70 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v71 : string = "String::from($0)"
    let v72 : std_string_String = Fable.Core.RustInterop.emitRustExpr v63 v71 
    let _v68 = v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = "String::from($0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v63 v73 
    let _v68 = v74 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v75 : std_string_String = v63 |> unbox<std_string_String>
    let _v68 = v75 
    #endif
#if FABLE_COMPILER_PYTHON
    let v78 : std_string_String = v63 |> unbox<std_string_String>
    let _v68 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v81 : std_string_String = v63 |> unbox<std_string_String>
    let _v68 = v81 
    #endif
#else
    let v84 : std_string_String = v63 |> unbox<std_string_String>
    let _v68 = v84 
    #endif
    let v87 : std_string_String = _v68 
    let v92 : std_string_String = method53(v87)
    let v93 : string = "std::collections::HashMap::get(&$0, &v92).map(|x| x).cloned()"
    let v94 : leptos_prelude_RwSignal<bool> option = Fable.Core.RustInterop.emitRustExpr v42 v93 
    let v95 : (leptos_prelude_RwSignal<bool> -> US17) = method54()
    let v96 : US17 option = v94 |> Option.map v95 
    let v107 : US17 = US17_1
    let v108 : US17 = v96 |> Option.defaultValue v107 
    let v118 : US18 =
        match v108 with
        | US17_1 -> (* None *)
            US18_1
        | US17_0(v112) -> (* Some *)
            let v113 : string = $"leptos::prelude::RwSignal::get(&$0)"
            let v114 : bool = Fable.Core.RustInterop.emitRustExpr v112 v113 
            US18_0(v114)
    let v121 : bool =
        match v118 with
        | US18_1 -> (* None *)
            false
        | US18_0(v119) -> (* Some *)
            v119
    let v122 : string = "state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: " + string v121 + ""
    let v123 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v124 : bool = Fable.Core.RustInterop.emitRustExpr v122 v123 
    let v125 : bool = v121 = false
    if v125 then
        let v126 : bool = v6 = false
        if v126 then
            let v127 : string = $"true; leptos::prelude::WriteSignal::update(&$0, |x: &mut /*"
            let v128 : bool = Fable.Core.RustInterop.emitRustExpr v2 v127 
            let v129 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
            let v132 : string = "*/ | { *x = $0(x.clone()) }); //"
            let v133 : (bool -> bool) = closure44()
            let v134 : bool = Fable.Core.RustInterop.emitRustExpr v133 v132 
            ()
        else
            let v135 : string = "state_core.use_core_database (18) / effect new_core_state_heap / ##4"
            let v136 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v137 : bool = Fable.Core.RustInterop.emitRustExpr v135 v136 
            let v138 : web_sys_Window = method35()
            let v139 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method36(v138)
            let v140 : (web_sys_Storage option -> US10) = method37()
            let v141 : (wasm_bindgen_JsValue -> US10) = method38()
            let v142 : US10 = match v139 with Ok x -> v140 x | Error x -> v141 x
            let v165 : US11 =
                match v142 with
                | US10_1(v162) -> (* Error *)
                    US11_1(v162)
                | US10_0(v143) -> (* Ok *)
                    let v144 : (web_sys_Storage -> US12) = method39()
                    let v145 : US12 option = v143 |> Option.map v144 
                    let v156 : US12 = US12_1
                    let v157 : US12 = v145 |> Option.defaultValue v156 
                    US11_0(v157)
            match v165 with
            | US11_0(v166) -> (* Ok *)
                match v166 with
                | US12_0(v167) -> (* Some *)
                    let v168 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
                    let v169 : bool = Fable.Core.RustInterop.emitRustExpr struct (v4, v34) v168 
                    let v170 : web_sys_Storage = method55(v167)
                    let v171 : string = method56()
                    let v172 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v173 : string = "&*$0"
                    let v174 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v171 v173 
                    let _v172 = v174 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v175 : string = "&*$0"
                    let v176 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v171 v175 
                    let _v172 = v176 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v177 : string = "&*$0"
                    let v178 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v171 v177 
                    let _v172 = v178 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v179 : Ref<Str> = v171 |> unbox<Ref<Str>>
                    let _v172 = v179 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v182 : Ref<Str> = v171 |> unbox<Ref<Str>>
                    let _v172 = v182 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v185 : Ref<Str> = v171 |> unbox<Ref<Str>>
                    let _v172 = v185 
                    #endif
#else
                    let v188 : Ref<Str> = v171 |> unbox<Ref<Str>>
                    let _v172 = v188 
                    #endif
                    let v191 : Ref<Str> = _v172 
                    let v196 : Heap3 = method57(v34)
                    let v197 : string = "serde_json::json!(v196).to_string()"
                    let v198 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v197 
                    let v199 : string = "$0.as_str()"
                    let v200 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v198 v199 
                    let v201 : string = $"web_sys::Storage::set(&v170, $0, v200).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr v191 v201 
                    ()
                | _ ->
                    ()
            | _ ->
                ()
and closure45 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<bool> = v3.l0
    let v5 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method58 (v0 : Heap2) : (unit -> bool) =
    closure45(v0)
and closure46 (v0 : leptos_router_location_Location) () : string =
    let v1 : string = "$0.pathname"
    let v2 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"$0()"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "fable_library_rust::String_::fromString($0)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.search"
    let v8 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : string = $"$0()"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "fable_library_rust::String_::fromString($0)"
    let v12 : string = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : bool = v12 = ""
    let v16 : string =
        if v13 then
            let v14 : string = ""
            v14
        else
            let v15 : string = $"?{v12}"
            v15
    let v17 : string = v6 + v16 
    v17
and method59 (v0 : std_string_String) : std_string_String =
    v0
and closure47 (v0 : leptos_router_location_Location, v1 : std_sync_Arc<Dyn<ActionFn2<Ref<Str>, leptos_router_NavigateOptions>>>, v2 : leptos_prelude_Memo<string>, v3 : Heap2, v4 : leptos_prelude_WriteSignal<bool>, v5 : leptos_prelude_ReadSignal<bool>) () : unit =
    let v6 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.hash"
    let v9 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = $"$0()"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"$0()"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v2 v12 
    let v14 : string = $"{v13}{v11}"
    let v15 : string = "content.render () / effect 1 / new_url_hash: " + v14 + " / loaded: " + string v7 + ""
    let v16 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : bool = v7 = false
    if v18 then
        let v19 : std_string_String = method59(v11)
        let v20 : string = "v19 == \"\""
        let v21 : bool = Fable.Core.RustInterop.emitRustExpr () v20 
        if v21 then
            let v22 : leptos_prelude_RwSignal<Heap1> = v3.l0
            let v23 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
            let v24 : Heap1 = Fable.Core.RustInterop.emitRustExpr v22 v23 
            let v25 : leptos_prelude_RwSignal<std_string_String> = v24.l2
            let v26 : string = $"leptos::prelude::RwSignal::get(&$0)"
            let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v26 
            let v28 : string = "fable_library_rust::String_::fromString($0)"
            let v29 : string = Fable.Core.RustInterop.emitRustExpr v27 v28 
            let v30 : string = "content.render () / effect 1 / url_hash: " + v29 + ""
            let v31 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v32 : bool = Fable.Core.RustInterop.emitRustExpr v30 v31 
            let v33 : string = "#"
            let v34 : bool = v29.Contains v33 
            if v34 then
                let v37 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v38 : string = "&*$0"
                let v39 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v29 v38 
                let _v37 = v39 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v40 : string = "&*$0"
                let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v29 v40 
                let _v37 = v41 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v42 : string = "&*$0"
                let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v29 v42 
                let _v37 = v43 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v44 : Ref<Str> = v29 |> unbox<Ref<Str>>
                let _v37 = v44 
                #endif
#if FABLE_COMPILER_PYTHON
                let v47 : Ref<Str> = v29 |> unbox<Ref<Str>>
                let _v37 = v47 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v50 : Ref<Str> = v29 |> unbox<Ref<Str>>
                let _v37 = v50 
                #endif
#else
                let v53 : Ref<Str> = v29 |> unbox<Ref<Str>>
                let _v37 = v53 
                #endif
                let v56 : Ref<Str> = _v37 
                let v61 : string = "$0($1, Default::default())"
                Fable.Core.RustInterop.emitRustExpr struct (v1, v56) v61 
                ()
        let v62 : string = $"true; leptos::prelude::WriteSignal::set(&$0, $1);"
        let v63 : bool = Fable.Core.RustInterop.emitRustExpr struct (v4, true) v62 
        ()
    else
        let v64 : leptos_prelude_RwSignal<Heap1> = v3.l0
        let v65 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
        let v66 : Heap1 = Fable.Core.RustInterop.emitRustExpr v64 v65 
        let v67 : leptos_prelude_RwSignal<std_string_String> = v66.l2
        let v68 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v69 : string = "&*$0"
        let v70 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14 v69 
        let _v68 = v70 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v71 : string = "&*$0"
        let v72 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14 v71 
        let _v68 = v72 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v73 : string = "&*$0"
        let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14 v73 
        let _v68 = v74 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v75 : Ref<Str> = v14 |> unbox<Ref<Str>>
        let _v68 = v75 
        #endif
#if FABLE_COMPILER_PYTHON
        let v78 : Ref<Str> = v14 |> unbox<Ref<Str>>
        let _v68 = v78 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v81 : Ref<Str> = v14 |> unbox<Ref<Str>>
        let _v68 = v81 
        #endif
#else
        let v84 : Ref<Str> = v14 |> unbox<Ref<Str>>
        let _v68 = v84 
        #endif
        let v87 : Ref<Str> = _v68 
        let v92 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v93 : string = "String::from($0)"
        let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v93 
        let _v92 = v94 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v95 : string = "String::from($0)"
        let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v95 
        let _v92 = v96 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v97 : string = "String::from($0)"
        let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v97 
        let _v92 = v98 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v99 : std_string_String = v87 |> unbox<std_string_String>
        let _v92 = v99 
        #endif
#if FABLE_COMPILER_PYTHON
        let v102 : std_string_String = v87 |> unbox<std_string_String>
        let _v92 = v102 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v105 : std_string_String = v87 |> unbox<std_string_String>
        let _v92 = v105 
        #endif
#else
        let v108 : std_string_String = v87 |> unbox<std_string_String>
        let _v92 = v108 
        #endif
        let v111 : std_string_String = _v92 
        let v116 : string = $"true; leptos::prelude::RwSignal::set(&$0, $1);"
        let v117 : bool = Fable.Core.RustInterop.emitRustExpr struct (v67, v111) v116 
        ()
and method60 (v0 : std_string_String) : std_string_String =
    v0
and closure49 () (v0 : leptos_router_Url) : US21 =
    US21_0(v0)
and method61 () : (leptos_router_Url -> US21) =
    closure49()
and closure50 () (v0 : std_string_String) : US21 =
    US21_1(v0)
and method62 () : (std_string_String -> US21) =
    closure50()
and closure48 (v0 : leptos_router_location_Location, v1 : leptos_prelude_WriteSignal<US19>) () : unit =
    let v2 : string = "$0.hash"
    let v3 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = $"$0()"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : std_string_String = method60(v5)
    let v7 : string = "v6.strip_prefix('#')"
    let v8 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = ""
    let v10 : string = "r#\"" + v9 + "\"#"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "v8.unwrap_or(v11)"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "leptos_router::location::Url::try_from($0)"
    let v15 : Result<leptos_router_Url, std_string_String> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : (leptos_router_Url -> US21) = method61()
    let v17 : (std_string_String -> US21) = method62()
    let v18 : US21 = match v15 with Ok x -> v16 x | Error x -> v17 x
    let v19 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "format!(\"{:#?}\", $0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v20 
    let v22 : string = "fable_library_rust::String_::fromString($0)"
    let v23 : string = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let _v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : string = "format!(\"{:#?}\", $0)"
    let v25 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v24 
    let v26 : string = "fable_library_rust::String_::fromString($0)"
    let v27 : string = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let _v19 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "format!(\"{:#?}\", $0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v28 
    let v30 : string = "fable_library_rust::String_::fromString($0)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let _v19 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : string = $"%A{v18}"
    let _v19 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : string = $"%A{v18}"
    let _v19 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : string = $"%A{v18}"
    let _v19 = v38 
    #endif
#else
    let v41 : string = $"%A{v18}"
    let _v19 = v41 
    #endif
    let v44 : string = _v19 
    let v49 : string = "content.render () / effect 2 / hash_url: " + v44 + ""
    let v50 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v51 : bool = Fable.Core.RustInterop.emitRustExpr v49 v50 
    match v18 with
    | US21_1(v158) -> (* Error *)
        let v159 : string = "content.render () / effect 2 / hash_url error: " + string v158 + ""
        let v160 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v161 : bool = Fable.Core.RustInterop.emitRustExpr v159 v160 
        ()
    | US21_0(v52) -> (* Ok *)
        let v53 : string = "$0.pathname"
        let v54 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v53 
        let v55 : string = "fable_library_rust::String_::fromString($0)"
        let v56 : string = Fable.Core.RustInterop.emitRustExpr v54 v55 
        let v57 : string = "dice"
        let v58 : string = "/" + v57 + ""
        let v59 : bool = v56.StartsWith (v58, false, null)
        let v66 : US22 =
            if v59 then
                let v62 : US20 = US20_0
                let v63 : US19 = US19_1(v62)
                US22_0(v63)
            else
                US22_1
        let v83 : US22 =
            match v66 with
            | US22_1 -> (* None *)
                let v69 : string = "$0.pathname"
                let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v69 
                let v71 : string = "fable_library_rust::String_::fromString($0)"
                let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
                let v73 : string = "lists"
                let v74 : string = "/" + v73 + ""
                let v75 : bool = v72.StartsWith (v74, false, null)
                if v75 then
                    let v78 : US19 = US19_2
                    US22_0(v78)
                else
                    US22_1
            | US22_0(v67) -> (* Some *)
                US22_0(v67)
        let v100 : US22 =
            match v83 with
            | US22_1 -> (* None *)
                let v86 : string = "$0.pathname"
                let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v86 
                let v88 : string = "fable_library_rust::String_::fromString($0)"
                let v89 : string = Fable.Core.RustInterop.emitRustExpr v87 v88 
                let v90 : string = "transactions"
                let v91 : string = "/" + v90 + ""
                let v92 : bool = v89.StartsWith (v91, false, null)
                if v92 then
                    let v95 : US19 = US19_3
                    US22_0(v95)
                else
                    US22_1
            | US22_0(v84) -> (* Some *)
                US22_0(v84)
        let v117 : US22 =
            match v100 with
            | US22_1 -> (* None *)
                let v103 : string = "$0.pathname"
                let v104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v103 
                let v105 : string = "fable_library_rust::String_::fromString($0)"
                let v106 : string = Fable.Core.RustInterop.emitRustExpr v104 v105 
                let v107 : string = "settings"
                let v108 : string = "/" + v107 + ""
                let v109 : bool = v106.StartsWith (v108, false, null)
                if v109 then
                    let v112 : US19 = US19_4
                    US22_0(v112)
                else
                    US22_1
            | US22_0(v101) -> (* Some *)
                US22_0(v101)
        let v122 : US19 =
            match v117 with
            | US22_1 -> (* None *)
                let v119 : US20 = US20_0
                US19_1(v119)
            | US22_0(v118) -> (* Some *)
                v118
        let v123 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v124 : string = "format!(\"{:#?}\", $0)"
        let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v124 
        let v126 : string = "fable_library_rust::String_::fromString($0)"
        let v127 : string = Fable.Core.RustInterop.emitRustExpr v125 v126 
        let _v123 = v127 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v128 : string = "format!(\"{:#?}\", $0)"
        let v129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v128 
        let v130 : string = "fable_library_rust::String_::fromString($0)"
        let v131 : string = Fable.Core.RustInterop.emitRustExpr v129 v130 
        let _v123 = v131 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v132 : string = "format!(\"{:#?}\", $0)"
        let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v132 
        let v134 : string = "fable_library_rust::String_::fromString($0)"
        let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
        let _v123 = v135 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v136 : string = $"%A{v122}"
        let _v123 = v136 
        #endif
#if FABLE_COMPILER_PYTHON
        let v139 : string = $"%A{v122}"
        let _v123 = v139 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v142 : string = $"%A{v122}"
        let _v123 = v142 
        #endif
#else
        let v145 : string = $"%A{v122}"
        let _v123 = v145 
        #endif
        let v148 : string = _v123 
        let v153 : string = "content.render () / effect 2 / new_tab: " + v148 + ""
        let v154 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v155 : bool = Fable.Core.RustInterop.emitRustExpr v153 v154 
        let v156 : string = $"true; leptos::prelude::WriteSignal::set(&$0, $1);"
        let v157 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1, v122) v156 
        ()
and closure52 () (v0 : (bool * std_string_String)) : struct (bool * std_string_String) =
    let (a, b) = v0 
    let v1 : bool = a
    let v2 : std_string_String = b
    struct (v1, v2)
and closure53 () struct (v0 : bool, v1 : std_string_String) : bool =
    v0
and method63 () : (struct (bool * std_string_String) -> bool) =
    closure53()
and method64 (v0 : Vec<struct (bool * std_string_String)>) : Vec<struct (bool * std_string_String)> =
    v0
and closure54 () struct (v0 : bool, v1 : std_string_String) : std_string_String =
    v1
and closure55 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure51 (v0 : Heap2) () : Vec<string> =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : Vec<(bool * std_string_String)> = v6.l0
    let v8 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v9 : ((bool * std_string_String) -> struct (bool * std_string_String)) = closure52()
    let v10 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v7, v9) v8 
    let v11 : (struct (bool * std_string_String) -> bool) = method63()
    let v12 : Vec<struct (bool * std_string_String)> = method64(v10)
    let v13 : string = "v12.into_iter().filter(|x| v11(x.clone().clone())).collect::<Vec<_>>()"
    let v14 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v16 : (struct (bool * std_string_String) -> std_string_String) = closure54()
    let v17 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v14, v16) v15 
    let v18 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v19 : (std_string_String -> string) = closure55()
    let v20 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v17, v19) v18 
    let v21 : string = $"%A{v20}"
    let v24 : string = "use_transactions.render (2) / accounts create_memo / result: " + string v21 + ""
    let v25 : int64 = 200L
    let v26 : string = method10(v25, v24)
    let v27 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr v26 v27 
    v20
and closure57 () (v0 : string) : struct (string * US24 * string * bool * bool) =
    let v1 : string = "https://api3.nearblocks.io/v1/account/" + v0 + ""
    let v2 : US24 = US24_0
    let v3 : string = ""
    struct (v1, v2, v3, false, true)
and closure56 (v0 : leptos_prelude_Memo<Vec<string>>) () : (struct (string * US24 * string * bool * bool) []) =
    let v1 : string = $"$0()"
    let v2 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (string -> struct (string * US24 * string * bool * bool)) = closure57()
    let v5 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v7 : (struct (string * US24 * string * bool * bool) []) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"%A{v7}"
    let v11 : string = "use_transactions.render (3) / accounts_metadata create_memo / result: " + string v8 + ""
    let v12 : int64 = 200L
    let v13 : string = method10(v12, v11)
    let v14 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v13 v14 
    v7
and method65 (v0 : int32, v1 : Mut0) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure60 (v0 : string) (v1 : int32) : struct (string * US24 * string * bool * bool) =
    let v2 : int32 = v1 + 1
    let v3 : string = "https://api3.nearblocks.io/v1/account/" + v0 + "/txns?&order=desc&page=" + string v2 + "&per_page=" + string 25 + ""
    let v4 : US24 = US24_0
    let v5 : string = ""
    struct (v3, v4, v5, false, true)
and closure59 (v0 : Heap0) (v1 : string) : struct (string * Vec<struct (string * US24 * string * bool * bool)>) =
    let v2 : int32 = v0.l3
    let v3 : (int32 []) = Array.zeroCreate<int32> (v2)
    let v4 : Mut0 = {l0 = 0} : Mut0
    while method65(v2, v4) do
        let v6 : int32 = v4.l0
        v3.[int v6] <- v6
        let v7 : int32 = v6 + 1
        v4.l0 <- v7
        ()
    let v8 : string = "$0.to_vec()"
    let v9 : Vec<int32> = Fable.Core.RustInterop.emitRustExpr v3 v8 
    let v10 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v11 : (int32 -> struct (string * US24 * string * bool * bool)) = closure60(v1)
    let v12 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr struct (v9, v11) v10 
    struct (v1, v12)
and closure58 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<string>>) () : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<Heap0> = v4.l3
    let v6 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v7 : Heap0 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"$0()"
    let v9 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v1 v8 
    let v10 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v11 : (string -> struct (string * Vec<struct (string * US24 * string * bool * bool)>)) = closure59(v7)
    let v12 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr struct (v9, v11) v10 
    let v13 : string = $"%A{v12}"
    let v16 : string = "use_transactions.render (4) / accounts_requests create_memo / result: " + string v13 + ""
    let v17 : int64 = 200L
    let v18 : string = method10(v17, v16)
    let v19 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    v12
and closure62 () struct (v0 : string, v1 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<struct (string * US24 * string * bool * bool)> =
    v1
and method66 (v0 : int32, v1 : Mut1) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method67 (v0 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<struct (string * US24 * string * bool * bool)> =
    v0
and method68 (v0 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<struct (string * US24 * string * bool * bool)> =
    v0
and closure61 (v0 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>) () : Vec<struct (string * US24 * string * bool * bool)> =
    let v1 : string = $"$0()"
    let v2 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (struct (string * Vec<struct (string * US24 * string * bool * bool)>) -> Vec<struct (string * US24 * string * bool * bool)>) = closure62()
    let v5 : Vec<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : (struct (string * US24 * string * bool * bool) []) = [||]
    let v7 : string = "$0.to_vec()"
    let v8 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v10 : (Vec<struct (string * US24 * string * bool * bool)> []) = Fable.Core.RustInterop.emitRustExpr v5 v9 
    let v11 : int32 = v10.Length
    let v12 : Mut1 = {l0 = 0; l1 = v8} : Mut1
    while method66(v11, v12) do
        let v14 : int32 = v12.l0
        let v15 : Vec<struct (string * US24 * string * bool * bool)> = v12.l1
        let v16 : Vec<struct (string * US24 * string * bool * bool)> = v10.[int v14]
        let v17 : Vec<struct (string * US24 * string * bool * bool)> = method67(v16)
        let v18 : Vec<struct (string * US24 * string * bool * bool)> = method68(v15)
        let v19 : string = "true; let mut v18 = v18"
        let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
        let v21 : string = "true; v18.extend(v17)"
        let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
        let v23 : string = "v18"
        let v24 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr () v23 
        let v25 : int32 = v14 + 1
        v12.l0 <- v25
        v12.l1 <- v24
        ()
    let v26 : Vec<struct (string * US24 * string * bool * bool)> = v12.l1
    let v27 : string = $"%A{v26}"
    let v30 : string = "use_transactions.render (5) / txns_requests create_memo / result: " + string v27 + ""
    let v31 : int64 = 200L
    let v32 : string = method10(v31, v30)
    let v33 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v34 : bool = Fable.Core.RustInterop.emitRustExpr v32 v33 
    v26
and closure65 (v0 : string) struct (v1 : string, v2 : US24, v3 : string, v4 : bool, v5 : bool) : string =
    v0
and closure64 () struct (v0 : string, v1 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<string> =
    let v2 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v3 : (struct (string * US24 * string * bool * bool) -> string) = closure65(v0)
    let v4 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v1, v3) v2 
    v4
and method69 (v0 : int32, v1 : Mut2) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method70 (v0 : Vec<string>) : Vec<string> =
    v0
and method71 (v0 : Vec<string>) : Vec<string> =
    v0
and closure63 (v0 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>) () : (string []) =
    let v1 : string = $"$0()"
    let v2 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (struct (string * Vec<struct (string * US24 * string * bool * bool)>) -> Vec<string>) = closure64()
    let v5 : Vec<Vec<string>> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : (string []) = [||]
    let v7 : string = "$0.to_vec()"
    let v8 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v10 : (Vec<string> []) = Fable.Core.RustInterop.emitRustExpr v5 v9 
    let v11 : int32 = v10.Length
    let v12 : Mut2 = {l0 = 0; l1 = v8} : Mut2
    while method69(v11, v12) do
        let v14 : int32 = v12.l0
        let v15 : Vec<string> = v12.l1
        let v16 : Vec<string> = v10.[int v14]
        let v17 : Vec<string> = method70(v16)
        let v18 : Vec<string> = method71(v15)
        let v19 : string = "true; let mut v18 = v18"
        let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
        let v21 : string = "true; v18.extend(v17)"
        let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
        let v23 : string = "v18"
        let v24 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v23 
        let v25 : int32 = v14 + 1
        v12.l0 <- v25
        v12.l1 <- v24
        ()
    let v26 : Vec<string> = v12.l1
    let v27 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v28 : (string []) = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = $"%A{v28}"
    let v32 : string = "use_transactions.render (6) / urls_accounts create_memo / result: " + string v29 + ""
    let v33 : int64 = 200L
    let v34 : string = method10(v33, v32)
    let v35 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v36 : bool = Fable.Core.RustInterop.emitRustExpr v34 v35 
    v28
and closure68 () (v0 : crate_model_near_nearblocks_Action) : struct (std_string_String * std_string_String option) =
    let v1 : string = "$0.action"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.method"
    let v4 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    struct (v2, v4)
and method72 (v0 : (struct (std_string_String * std_string_String option) [])) : (struct (std_string_String * std_string_String option) []) =
    v0
and closure69 () (v0 : Vec<std_string_String>) : (std_string_String []) =
    let v1 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v2 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and method73 () : (Vec<std_string_String> -> (std_string_String [])) =
    closure69()
and closure67 () (v0 : crate_model_near_nearblocks_Txn) : struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) =
    let v1 : string = "$0.receipt_id"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.predecessor_account_id"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.receiver_account_id"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "$0.transaction_hash"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : string = "$0.included_in_block_hash"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let v11 : string = "$0.block_timestamp"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let v13 : string = "$0.block"
    let v14 : crate_model_near_nearblocks_Block = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let v15 : string = "$0.block_height"
    let v16 : uint32 = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.actions"
    let v18 : Vec<crate_model_near_nearblocks_Action> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v20 : (crate_model_near_nearblocks_Action -> struct (std_string_String * std_string_String option)) = closure68()
    let v21 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v19 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v23 : (struct (std_string_String * std_string_String option) []) = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : (struct (std_string_String * std_string_String option) []) = method72(v23)
    let v25 : string = "$0.actions_agg"
    let v26 : crate_model_near_nearblocks_ActionsAgg = Fable.Core.RustInterop.emitRustExpr v0 v25 
    let v27 : string = "$0.deposit"
    let v28 : float = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "$0.outcomes"
    let v30 : crate_model_near_nearblocks_Outcomes = Fable.Core.RustInterop.emitRustExpr v0 v29 
    let v31 : string = "$0.status"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "$0.outcomes_agg"
    let v34 : crate_model_near_nearblocks_OutcomesAgg = Fable.Core.RustInterop.emitRustExpr v0 v33 
    let v35 : string = "$0.transaction_fee"
    let v36 : float = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "$0.logs"
    let v38 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v0 v37 
    let v39 : (Vec<std_string_String> -> (std_string_String [])) = method73()
    let v40 : (std_string_String []) option = v38 |> Option.map v39 
    let v52 : (std_string_String []) = [||]
    let v53 : (std_string_String []) = v40 |> Option.defaultValue v52 
    struct (v2, v4, v6, v8, v10, v12, v16, v24, v28, v32, v36, v53)
and method74 (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) =
    v0
and closure66 () (v0 : crate_model_near_nearblocks_Root) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) =
    let v1 : string = "$0.txns"
    let v2 : Vec<crate_model_near_nearblocks_Txn> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (crate_model_near_nearblocks_Txn -> struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) = closure67()
    let v5 : Vec<struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v7 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = method74(v7)
    v8
and closure70 (v0 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) () : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option =
    let v1 : string = "state_core.use_requests (2) / database_memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v5 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : (unit -> unit) = closure10()
    let _v10 = true
    let v11 : string = "PartialEqWrapper($0)"
    let v12 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let v13 : string = "true; $0 })"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "_optionm_map_"
    let v16 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v15 
    v16
and closure71 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) () : struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>) =
    let v2 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v3 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : (unit -> unit) = closure10()
    let _v8 = true
    let v9 : string = "PartialEqWrapper($0)"
    let v10 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v7 v9 
    let v11 : string = "true; $0 })"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "_optionm_map_"
    let v14 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = $"$0()"
    let v16 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    struct (v14, v16)
and method77 (v0 : string) : string =
    v0
and method78 (v0 : Result<Heap4 option, std_string_String>) : Result<Heap4 option, std_string_String> =
    v0
and closure72 (v0 : std_sync_Arc<rexie_Rexie>) struct (v1 : string, v2 : US24, v3 : string, v4 : bool, v5 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>> =
    let v6 : string = "url[" + v1 + "](" + $"%A{v3}" + ")"
    let v7 : string = "state_core.get_data () / id: " + v6 + ""
    let v8 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; let __future_init = Box::pin(async { //"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "store"
    let v13 : (string []) = [|v12|]
    let v14 : string = "$0.to_vec()"
    let v15 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v17 : (string -> std_string_String) = closure12()
    let v18 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v15, v17) v16 
    let v19 : std_sync_Arc<rexie_Rexie> = method15(v0)
    let v20 : string = "$0.transaction(&v18, rexie::TransactionMode::ReadOnly)"
    let v21 : Result<rexie_Transaction, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : (rexie_Error -> std_string_String) = method16()
    let v23 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : string = "$0.map_err(|x| $1(x))"
    let v25 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v21, v22) v24 
    let _v23 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v26 : string = "$0.map_err(|x| $1(x))"
    let v27 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v21, v22) v26 
    let _v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "$0.map_err(|x| $1(x))"
    let v29 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v21, v22) v28 
    let _v23 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : Result<rexie_Transaction, std_string_String> = match v21 with Ok x -> Ok x | Error x -> Error (v22 x)
    let _v23 = v30 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Result<rexie_Transaction, std_string_String> = match v21 with Ok x -> Ok x | Error x -> Error (v22 x)
    let _v23 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v32 : Result<rexie_Transaction, std_string_String> = match v21 with Ok x -> Ok x | Error x -> Error (v22 x)
    let _v23 = v32 
    #endif
#else
    let v33 : Result<rexie_Transaction, std_string_String> = match v21 with Ok x -> Ok x | Error x -> Error (v22 x)
    let _v23 = v33 
    #endif
    let v34 : Result<rexie_Transaction, std_string_String> = _v23 
    let v37 : string = "$0?"
    let v38 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let v39 : string = method17()
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "&*$0"
    let v42 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _v40 = v53 
    #endif
#else
    let v56 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _v40 = v56 
    #endif
    let v59 : Ref<Str> = _v40 
    let v64 : string = "v38.store($0)"
    let v65 : Result<rexie_Store, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : (rexie_Error -> std_string_String) = method18()
    let v67 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "$0.map_err(|x| $1(x))"
    let v69 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v65, v66) v68 
    let _v67 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "$0.map_err(|x| $1(x))"
    let v71 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v65, v66) v70 
    let _v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "$0.map_err(|x| $1(x))"
    let v73 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v65, v66) v72 
    let _v67 = v73 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v74 : Result<rexie_Store, std_string_String> = match v65 with Ok x -> Ok x | Error x -> Error (v66 x)
    let _v67 = v74 
    #endif
#if FABLE_COMPILER_PYTHON
    let v75 : Result<rexie_Store, std_string_String> = match v65 with Ok x -> Ok x | Error x -> Error (v66 x)
    let _v67 = v75 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Result<rexie_Store, std_string_String> = match v65 with Ok x -> Ok x | Error x -> Error (v66 x)
    let _v67 = v76 
    #endif
#else
    let v77 : Result<rexie_Store, std_string_String> = match v65 with Ok x -> Ok x | Error x -> Error (v66 x)
    let _v67 = v77 
    #endif
    let v78 : Result<rexie_Store, std_string_String> = _v67 
    let v81 : string = "$0?"
    let v82 : rexie_Store = Fable.Core.RustInterop.emitRustExpr v78 v81 
    let v83 : string = method77(v6)
    let v84 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v85 : string = "&*$0"
    let v86 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v85 
    let _v84 = v86 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v87 : string = "&*$0"
    let v88 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v87 
    let _v84 = v88 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v89 : string = "&*$0"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _v84 = v90 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v91 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _v84 = v91 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _v84 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _v84 = v97 
    #endif
#else
    let v100 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _v84 = v100 
    #endif
    let v103 : Ref<Str> = _v84 
    let v108 : string = "wasm_bindgen::JsValue::from_str($0)"
    let v109 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr v103 v108 
    let v110 : string = $"Box::pin(rexie::Store::get(&v82, v109))"
    let v111 : std_pin_Pin<Box<Dyn<std_future_Future<Result<wasm_bindgen_JsValue option, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = "v111.await"
    let v113 : Result<wasm_bindgen_JsValue option, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : (rexie_Error -> std_string_String) = method20()
    let v115 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v116 : string = "$0.map_err(|x| $1(x))"
    let v117 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v113, v114) v116 
    let _v115 = v117 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v118 : string = "$0.map_err(|x| $1(x))"
    let v119 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v113, v114) v118 
    let _v115 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v120 : string = "$0.map_err(|x| $1(x))"
    let v121 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v113, v114) v120 
    let _v115 = v121 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v122 : Result<wasm_bindgen_JsValue option, std_string_String> = match v113 with Ok x -> Ok x | Error x -> Error (v114 x)
    let _v115 = v122 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : Result<wasm_bindgen_JsValue option, std_string_String> = match v113 with Ok x -> Ok x | Error x -> Error (v114 x)
    let _v115 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : Result<wasm_bindgen_JsValue option, std_string_String> = match v113 with Ok x -> Ok x | Error x -> Error (v114 x)
    let _v115 = v124 
    #endif
#else
    let v125 : Result<wasm_bindgen_JsValue option, std_string_String> = match v113 with Ok x -> Ok x | Error x -> Error (v114 x)
    let _v115 = v125 
    #endif
    let v126 : Result<wasm_bindgen_JsValue option, std_string_String> = _v115 
    let v129 : string = "$0?"
    let v130 : wasm_bindgen_JsValue option = Fable.Core.RustInterop.emitRustExpr v126 v129 
    let v131 : (wasm_bindgen_JsValue -> US6) = method21()
    let v132 : US6 option = v130 |> Option.map v131 
    let v143 : US6 = US6_1
    let v144 : US6 = v132 |> Option.defaultValue v143 
    let v244 : US26 =
        match v144 with
        | US6_1 -> (* None *)
            US26_1
        | US6_0(v148) -> (* Some *)
            let v149 : wasm_bindgen_JsValue = method22(v148)
            let v150 : string = "serde_wasm_bindgen::from_value(v149)"
            let v151 : Result<serde_json_Value option, serde_wasm_bindgen_Error> = Fable.Core.RustInterop.emitRustExpr () v150 
            let v152 : (serde_wasm_bindgen_Error -> std_string_String) = method23()
            let v153 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v154 : string = "$0.map_err(|x| $1(x))"
            let v155 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v151, v152) v154 
            let _v153 = v155 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v156 : string = "$0.map_err(|x| $1(x))"
            let v157 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v151, v152) v156 
            let _v153 = v157 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v158 : string = "$0.map_err(|x| $1(x))"
            let v159 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v151, v152) v158 
            let _v153 = v159 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v160 : Result<serde_json_Value option, std_string_String> = match v151 with Ok x -> Ok x | Error x -> Error (v152 x)
            let _v153 = v160 
            #endif
#if FABLE_COMPILER_PYTHON
            let v161 : Result<serde_json_Value option, std_string_String> = match v151 with Ok x -> Ok x | Error x -> Error (v152 x)
            let _v153 = v161 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v162 : Result<serde_json_Value option, std_string_String> = match v151 with Ok x -> Ok x | Error x -> Error (v152 x)
            let _v153 = v162 
            #endif
#else
            let v163 : Result<serde_json_Value option, std_string_String> = match v151 with Ok x -> Ok x | Error x -> Error (v152 x)
            let _v153 = v163 
            #endif
            let v164 : Result<serde_json_Value option, std_string_String> = _v153 
            let v167 : string = "$0?"
            let v168 : serde_json_Value option = Fable.Core.RustInterop.emitRustExpr v164 v167 
            let v169 : (serde_json_Value -> US7) = method24()
            let v170 : US7 option = v168 |> Option.map v169 
            let v181 : US7 = US7_1
            let v182 : US7 = v170 |> Option.defaultValue v181 
            match v182 with
            | US7_1 -> (* None *)
                US26_1
            | US7_0(v186) -> (* Some *)
                let v187 : serde_json_Value = method25(v186)
                let v188 : string = "serde_json::from_value(v187)"
                let v189 : Result<Vec<uint8>, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v188 
                let v190 : (serde_json_Error -> std_string_String) = method26()
                let v191 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v192 : string = "$0.map_err(|x| $1(x))"
                let v193 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v189, v190) v192 
                let _v191 = v193 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v194 : string = "$0.map_err(|x| $1(x))"
                let v195 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v189, v190) v194 
                let _v191 = v195 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v196 : string = "$0.map_err(|x| $1(x))"
                let v197 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v189, v190) v196 
                let _v191 = v197 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v198 : Result<Vec<uint8>, std_string_String> = match v189 with Ok x -> Ok x | Error x -> Error (v190 x)
                let _v191 = v198 
                #endif
#if FABLE_COMPILER_PYTHON
                let v199 : Result<Vec<uint8>, std_string_String> = match v189 with Ok x -> Ok x | Error x -> Error (v190 x)
                let _v191 = v199 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v200 : Result<Vec<uint8>, std_string_String> = match v189 with Ok x -> Ok x | Error x -> Error (v190 x)
                let _v191 = v200 
                #endif
#else
                let v201 : Result<Vec<uint8>, std_string_String> = match v189 with Ok x -> Ok x | Error x -> Error (v190 x)
                let _v191 = v201 
                #endif
                let v202 : Result<Vec<uint8>, std_string_String> = _v191 
                let v205 : string = "$0?"
                let v206 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v202 v205 
                let v207 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v208 : (uint8 []) = Fable.Core.RustInterop.emitRustExpr v206 v207 
                let v209 : int32 = v208.Length
                let v210 : string = "state_core.get_data () / data_len: " + string v209 + ""
                let v211 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v212 : bool = Fable.Core.RustInterop.emitRustExpr v210 v211 
                let v213 : string = "$0.to_vec()"
                let v214 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v208 v213 
                let v215 : string = "v214.as_slice()"
                let v216 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v215 
                let v217 : string = "true; let mut v216 = v216"
                let v218 : bool = Fable.Core.RustInterop.emitRustExpr () v217 
                let v219 : string = "borsh::BorshDeserialize::deserialize(&mut v216)"
                let v220 : Result<Heap4, borsh_io_Error> = Fable.Core.RustInterop.emitRustExpr () v219 
                let v221 : (borsh_io_Error -> std_string_String) = method27()
                let v222 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v223 : string = "$0.map_err(|x| $1(x))"
                let v224 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v220, v221) v223 
                let _v222 = v224 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v225 : string = "$0.map_err(|x| $1(x))"
                let v226 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v220, v221) v225 
                let _v222 = v226 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v227 : string = "$0.map_err(|x| $1(x))"
                let v228 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v220, v221) v227 
                let _v222 = v228 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v229 : Result<Heap4, std_string_String> = match v220 with Ok x -> Ok x | Error x -> Error (v221 x)
                let _v222 = v229 
                #endif
#if FABLE_COMPILER_PYTHON
                let v230 : Result<Heap4, std_string_String> = match v220 with Ok x -> Ok x | Error x -> Error (v221 x)
                let _v222 = v230 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v231 : Result<Heap4, std_string_String> = match v220 with Ok x -> Ok x | Error x -> Error (v221 x)
                let _v222 = v231 
                #endif
#else
                let v232 : Result<Heap4, std_string_String> = match v220 with Ok x -> Ok x | Error x -> Error (v221 x)
                let _v222 = v232 
                #endif
                let v233 : Result<Heap4, std_string_String> = _v222 
                let v236 : string = "$0?"
                let v237 : Heap4 = Fable.Core.RustInterop.emitRustExpr v233 v236 
                US26_0(v237)
    let v251 : Heap4 option =
        match v244 with
        | US26_1 -> (* None *)
            let v249 : Heap4 option = None
            v249
        | US26_0(v245) -> (* Some *)
            let v246 : Heap4 option = Some v245 
            v246
    let v252 : Result<Heap4 option, std_string_String> = Ok v251 
    let v253 : Result<Heap4 option, std_string_String> = method78(v252)
    let v254 : string = ""
    let v255 : string = "}"
    let v256 : string = v254 + v255 
    let v257 : _ = v253 
    let v258 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v259 : string = $"true; let v257 = $0"
    let v260 : bool = Fable.Core.RustInterop.emitRustExpr v257 v259 
    let _v258 = v260 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v261 : string = $"true; let v257 = $0"
    let v262 : bool = Fable.Core.RustInterop.emitRustExpr v257 v261 
    let _v258 = v262 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v263 : string = $"true; let v257 = $0"
    let v264 : bool = Fable.Core.RustInterop.emitRustExpr v257 v263 
    let _v258 = v264 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v265 : bool = true
    let _v258 = v265 
    #endif
#if FABLE_COMPILER_PYTHON
    let v266 : bool = true
    let _v258 = v266 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v267 : bool = true
    let _v258 = v267 
    #endif
#else
    let v268 : bool = true
    let _v258 = v268 
    #endif
    let v269 : bool = _v258 
    let v272 : string = $"true; v257 " + v256 + "); " + v254 + " // rust.fix_closure'"
    let v273 : bool = Fable.Core.RustInterop.emitRustExpr () v272 
    let v274 : string = "__future_init"
    let v275 : _ = Fable.Core.RustInterop.emitRustExpr () v274 
    let v276 : string = "v275"
    let v277 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v276 
    v277
and method79 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> =
    v0
and method80 (v0 : Result<Vec<Heap4 option>, std_string_String>) : Result<Vec<Heap4 option>, std_string_String> =
    v0
and method81 (v0 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>>) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>> =
    v0
and method76 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>> =
    let v2 : string = "let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //"
    let v3 : (unit -> struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>)) = closure71(v0, v1)
    Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v4 : string = "x"
    let struct (v5 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, v6 : Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr () v4 
    let v7 : string = "true; let __future_init = Box::pin(async move { //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = $"%A{v5}"
    let v12 : string = $"%A{v6}"
    let v15 : int64 = 400L
    let v16 : string = method10(v15, v12)
    let v17 : string = "state_core.use_requests (3) / state_data_resource create_local_resource / request : " + string v16 + " / database: " + string v9 + ""
    let v18 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr v5 v20 
    let v22 : string = "x"
    let v23 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : string = "$0.0"
    let v25 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "true; $0 })"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : string = "_optionm_map_"
    let v29 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : (std_sync_Arc<rexie_Rexie> -> US4) = method14()
    let v31 : US4 option = v29 |> Option.map v30 
    let v42 : US4 = US4_1
    let v43 : US4 = v31 |> Option.defaultValue v42 
    let v109 : US25 =
        match v43 with
        | US4_0(v47) -> (* Some *)
            let v48 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v49 : (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>) = closure72(v47)
            let v50 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v6, v49) v48 
            let v51 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = method79(v50)
            let v52 : string = "futures::future::try_join_all(v51)"
            let v53 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v52 
            let v54 : string = "v53.await"
            let v55 : Result<Vec<Heap4 option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v54 
            let v56 : string = "$0?"
            let v57 : Vec<Heap4 option> = Fable.Core.RustInterop.emitRustExpr v55 v56 
            US25_0(v57)
        | _ ->
            let v59 : string = "database=None"
            let v60 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v61 : string = "&*$0"
            let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v59 v61 
            let _v60 = v62 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v63 : string = "&*$0"
            let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v59 v63 
            let _v60 = v64 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v65 : string = "&*$0"
            let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v59 v65 
            let _v60 = v66 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v67 : Ref<Str> = v59 |> unbox<Ref<Str>>
            let _v60 = v67 
            #endif
#if FABLE_COMPILER_PYTHON
            let v70 : Ref<Str> = v59 |> unbox<Ref<Str>>
            let _v60 = v70 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v73 : Ref<Str> = v59 |> unbox<Ref<Str>>
            let _v60 = v73 
            #endif
#else
            let v76 : Ref<Str> = v59 |> unbox<Ref<Str>>
            let _v60 = v76 
            #endif
            let v79 : Ref<Str> = _v60 
            let v84 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v85 : string = "String::from($0)"
            let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v85 
            let _v84 = v86 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v87 : string = "String::from($0)"
            let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v87 
            let _v84 = v88 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v89 : string = "String::from($0)"
            let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v89 
            let _v84 = v90 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v91 : std_string_String = v79 |> unbox<std_string_String>
            let _v84 = v91 
            #endif
#if FABLE_COMPILER_PYTHON
            let v94 : std_string_String = v79 |> unbox<std_string_String>
            let _v84 = v94 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v97 : std_string_String = v79 |> unbox<std_string_String>
            let _v84 = v97 
            #endif
#else
            let v100 : std_string_String = v79 |> unbox<std_string_String>
            let _v84 = v100 
            #endif
            let v103 : std_string_String = _v84 
            US25_1(v103)
    let v115 : Result<Vec<Heap4 option>, std_string_String> =
        match v109 with
        | US25_1(v112) -> (* Error *)
            let v113 : Result<Vec<Heap4 option>, std_string_String> = Error v112 
            v113
        | US25_0(v110) -> (* Ok *)
            let v111 : Result<Vec<Heap4 option>, std_string_String> = Ok v110 
            v111
    let v116 : string = $"%A{v115}"
    let v119 : string = "state_core.use_requests (4) / state_data_resource create_local_resource / result: " + string v116 + ""
    let v120 : int64 = 200L
    let v121 : string = method10(v120, v119)
    let v122 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v123 : bool = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : Result<Vec<Heap4 option>, std_string_String> = method80(v115)
    let v125 : string = ""
    let v126 : string = "}"
    let v127 : string = v125 + v126 
    let v128 : _ = v124 
    let v129 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v130 : string = $"true; let v128 = $0"
    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v128 v130 
    let _v129 = v131 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v132 : string = $"true; let v128 = $0"
    let v133 : bool = Fable.Core.RustInterop.emitRustExpr v128 v132 
    let _v129 = v133 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v134 : string = $"true; let v128 = $0"
    let v135 : bool = Fable.Core.RustInterop.emitRustExpr v128 v134 
    let _v129 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : bool = true
    let _v129 = v136 
    #endif
#if FABLE_COMPILER_PYTHON
    let v137 : bool = true
    let _v129 = v137 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v138 : bool = true
    let _v129 = v138 
    #endif
#else
    let v139 : bool = true
    let _v129 = v139 
    #endif
    let v140 : bool = _v129 
    let v143 : string = $"true; v128 " + v127 + "); " + v125 + " // rust.fix_closure'"
    let v144 : bool = Fable.Core.RustInterop.emitRustExpr () v143 
    let v145 : string = "__future_init"
    let v146 : _ = Fable.Core.RustInterop.emitRustExpr () v145 
    let v147 : string = "v146"
    let v148 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>> = method81(v148)
    let v150 : string = "v149.await"
    let v151 : Result<Vec<Heap4 option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v150 
    let v152 : string = v125 + v126 
    let v153 : string = v152 + v126 
    let v154 : string = "{"
    let v155 : string = v125 + v154 
    let v156 : _ = v151 
    let v157 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v158 : string = $"true; let v156 = $0"
    let v159 : bool = Fable.Core.RustInterop.emitRustExpr v156 v158 
    let _v157 = v159 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v160 : string = $"true; let v156 = $0"
    let v161 : bool = Fable.Core.RustInterop.emitRustExpr v156 v160 
    let _v157 = v161 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v162 : string = $"true; let v156 = $0"
    let v163 : bool = Fable.Core.RustInterop.emitRustExpr v156 v162 
    let _v157 = v163 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v164 : bool = true
    let _v157 = v164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : bool = true
    let _v157 = v165 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v166 : bool = true
    let _v157 = v166 
    #endif
#else
    let v167 : bool = true
    let _v157 = v167 
    #endif
    let v168 : bool = _v157 
    let v171 : string = $"true; v156 " + v153 + "); " + v155 + " // rust.fix_closure'"
    let v172 : bool = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : string = "__create_local_resource"
    let v174 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v173 
    v174
and closure73 (v0 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>>) () : Result<Vec<Heap4 option>, std_string_String> option =
    let v1 : string = "state_core.use_requests (5) / state_data_func"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : web_sys_Window = method35()
    let v5 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method36(v4)
    let v6 : (web_sys_Storage option -> US10) = method37()
    let v7 : (wasm_bindgen_JsValue -> US10) = method38()
    let v8 : US10 = match v5 with Ok x -> v6 x | Error x -> v7 x
    let v31 : US11 =
        match v8 with
        | US10_1(v28) -> (* Error *)
            US11_1(v28)
        | US10_0(v9) -> (* Ok *)
            let v10 : (web_sys_Storage -> US12) = method39()
            let v11 : US12 option = v9 |> Option.map v10 
            let v22 : US12 = US12_1
            let v23 : US12 = v11 |> Option.defaultValue v22 
            US11_0(v23)
    let v39 : Result<Vec<Heap4 option>, std_string_String> option =
        match v31 with
        | US11_0(v32) -> (* Ok *)
            match v32 with
            | US12_0(v33) -> (* Some *)
                let v34 : string = $"leptos::prelude::RwSignal::get(&$0)"
                let v35 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v0 v34 
                v35
            | _ ->
                let v36 : Result<Vec<Heap4 option>, std_string_String> option = None
                v36
        | _ ->
            let v38 : Result<Vec<Heap4 option>, std_string_String> option = None
            v38
    let v40 : string = $"%A{v39}"
    let v43 : string = "state_core.use_requests (6) / state_data_func func0 / result: " + string v40 + ""
    let v44 : int64 = 200L
    let v45 : string = method10(v44, v43)
    let v46 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v47 : bool = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v39
and closure74 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option>) () : struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option) =
    let v2 : string = $"$0()"
    let v3 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = $"$0()"
    let v5 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v1 v4 
    struct (v3, v5)
and closure75 () (v0 : Result<Vec<Heap4 option>, std_string_String>) : US27 =
    US27_0(v0)
and method83 () : (Result<Vec<Heap4 option>, std_string_String> -> US27) =
    closure75()
and closure76 () (v0 : Vec<Heap4 option>) : US25 =
    US25_0(v0)
and method84 () : (Vec<Heap4 option> -> US25) =
    closure76()
and closure77 () (v0 : std_string_String) : US25 =
    US25_1(v0)
and method85 () : (std_string_String -> US25) =
    closure77()
and closure78 () (v0 : Heap4) : US26 =
    US26_0(v0)
and method86 () : (Heap4 -> US26) =
    closure78()
and closure81 () (v0 : US26) : US33 =
    US33_0(v0)
and method88 () : (US26 -> US33) =
    closure81()
and method89 (v0 : US24) : US24 =
    v0
and method90 (v0 : string) : string =
    v0
and method91 (v0 : std_string_String) : std_string_String =
    v0
and method92 (v0 : string) : string =
    v0
and method93 (v0 : std_string_String) : std_string_String =
    v0
and method94 (v0 : reqwest_RequestBuilder) : reqwest_RequestBuilder =
    v0
and method95 (v0 : reqwest_RequestBuilder) : reqwest_RequestBuilder =
    v0
and closure82 () (v0 : reqwest_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method96 () : (reqwest_Error -> std_string_String) =
    closure82()
and method97 (v0 : Result<string option, std_string_String>) : Result<string option, std_string_String> =
    v0
and closure80 (v0 : US28, v1 : int32) struct (v2 : string, v3 : US24, v4 : string, v5 : bool, v6 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>> =
    let v7 : string = "true; let __future_init = Box::pin(async move { //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v54 : US30 =
        match v0 with
        | US28_1 -> (* None *)
            US30_1
        | US28_0(v9) -> (* Some *)
            let v50 : US31 =
                match v9 with
                | US29_1(v47) -> (* Error *)
                    US31_1(v47)
                | US29_0(v10) -> (* Ok *)
                    let v11 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v12 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v10 v11 
                    let v13 : US26 option = v12 |> Array.tryItem v1 
                    let v14 : (US26 -> US33) = method88()
                    let v15 : US33 option = v13 |> Option.map v14 
                    let v26 : US33 = US33_1
                    let v27 : US33 = v15 |> Option.defaultValue v26 
                    let v37 : US26 =
                        match v27 with
                        | US33_0(v31) -> (* Some *)
                            match v31 with
                            | US26_0(v32) -> (* Some *)
                                US26_0(v32)
                            | _ ->
                                US26_1
                        | _ ->
                            US26_1
                    let v45 : US32 =
                        match v37 with
                        | US26_1 -> (* None *)
                            US32_1
                        | US26_0(v38) -> (* Some *)
                            let v39 : std_string_String = v38.l0
                            let v40 : string = "fable_library_rust::String_::fromString($0)"
                            let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
                            US32_0(v41)
                    US31_0(v45)
            US30_0(v50)
    let v55 : string = $"%A{struct (v3, v5, v6)}"
    let v58 : int64 = 400L
    let v59 : string = method10(v58, v55)
    let v60 : string = $"%A{v0}"
    let v63 : int64 = 400L
    let v64 : string = method10(v63, v60)
    let v65 : string = $"%A{v54}"
    let v68 : int64 = 400L
    let v69 : string = method10(v68, v65)
    let v94 : bool =
        if v6 then
            true
        else
            match v0 with
            | US28_0(v70) -> (* Some *)
                match v70 with
                | US29_0(v71) -> (* Ok *)
                    let v72 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v73 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v71 v72 
                    let v74 : int32 = v73.Length
                    let v75 : bool = v74 = 0
                    if v75 then
                        false
                    else
                        match v54 with
                        | US30_0(v76) -> (* Some *)
                            match v76 with
                            | US31_0(v77) -> (* Ok *)
                                match v77 with
                                | US32_1 -> (* None *)
                                    true
                                | _ ->
                                    false
                            | _ ->
                                false
                        | _ ->
                            false
                | _ ->
                    match v54 with
                    | US30_0(v82) -> (* Some *)
                        match v82 with
                        | US31_0(v83) -> (* Ok *)
                            match v83 with
                            | US32_1 -> (* None *)
                                true
                            | _ ->
                                false
                        | _ ->
                            false
                    | _ ->
                        false
            | _ ->
                match v54 with
                | US30_0(v88) -> (* Some *)
                    match v88 with
                    | US31_0(v89) -> (* Ok *)
                        match v89 with
                        | US32_1 -> (* None *)
                            true
                        | _ ->
                            false
                    | _ ->
                        false
                | _ ->
                    false
    let v95 : string = "state_core.use_requests (9) / result memo / state_data: " + string v64 + " / state_data': " + string v69 + " / request: " + string v59 + " / should_fetch: " + string v94 + ""
    let v96 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v97 : bool = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : bool = v94 = false
    let v415 : US34 =
        if v98 then
            let v99 : string option = None
            US34_0(v99)
        else
            let v101 : US24 = method89(v3)
            let v207 : reqwest_RequestBuilder =
                match v101 with
                | US24_0 -> (* Get *)
                    let v102 : string = method90(v2)
                    let v103 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v104 : string = "&*$0"
                    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v104 
                    let _v103 = v105 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v106 : string = "&*$0"
                    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v106 
                    let _v103 = v107 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v108 : string = "&*$0"
                    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v108 
                    let _v103 = v109 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v110 : Ref<Str> = v102 |> unbox<Ref<Str>>
                    let _v103 = v110 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v113 : Ref<Str> = v102 |> unbox<Ref<Str>>
                    let _v103 = v113 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v116 : Ref<Str> = v102 |> unbox<Ref<Str>>
                    let _v103 = v116 
                    #endif
#else
                    let v119 : Ref<Str> = v102 |> unbox<Ref<Str>>
                    let _v103 = v119 
                    #endif
                    let v122 : Ref<Str> = _v103 
                    let v127 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v128 : string = "String::from($0)"
                    let v129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v128 
                    let _v127 = v129 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v130 : string = "String::from($0)"
                    let v131 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v130 
                    let _v127 = v131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v132 : string = "String::from($0)"
                    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v132 
                    let _v127 = v133 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v134 : std_string_String = v122 |> unbox<std_string_String>
                    let _v127 = v134 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v137 : std_string_String = v122 |> unbox<std_string_String>
                    let _v127 = v137 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v140 : std_string_String = v122 |> unbox<std_string_String>
                    let _v127 = v140 
                    #endif
#else
                    let v143 : std_string_String = v122 |> unbox<std_string_String>
                    let _v127 = v143 
                    #endif
                    let v146 : std_string_String = _v127 
                    let v151 : std_string_String = method91(v146)
                    let v152 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.get(v151)"
                    let v153 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v152 
                    v153
                | US24_1 -> (* Post *)
                    let v154 : string = method92(v2)
                    let v155 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v156 : string = "&*$0"
                    let v157 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v154 v156 
                    let _v155 = v157 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v158 : string = "&*$0"
                    let v159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v154 v158 
                    let _v155 = v159 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v160 : string = "&*$0"
                    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v154 v160 
                    let _v155 = v161 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v162 : Ref<Str> = v154 |> unbox<Ref<Str>>
                    let _v155 = v162 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v165 : Ref<Str> = v154 |> unbox<Ref<Str>>
                    let _v155 = v165 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v168 : Ref<Str> = v154 |> unbox<Ref<Str>>
                    let _v155 = v168 
                    #endif
#else
                    let v171 : Ref<Str> = v154 |> unbox<Ref<Str>>
                    let _v155 = v171 
                    #endif
                    let v174 : Ref<Str> = _v155 
                    let v179 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v180 : string = "String::from($0)"
                    let v181 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v180 
                    let _v179 = v181 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v182 : string = "String::from($0)"
                    let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v182 
                    let _v179 = v183 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v184 : string = "String::from($0)"
                    let v185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v184 
                    let _v179 = v185 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v186 : std_string_String = v174 |> unbox<std_string_String>
                    let _v179 = v186 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v189 : std_string_String = v174 |> unbox<std_string_String>
                    let _v179 = v189 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v192 : std_string_String = v174 |> unbox<std_string_String>
                    let _v179 = v192 
                    #endif
#else
                    let v195 : std_string_String = v174 |> unbox<std_string_String>
                    let _v179 = v195 
                    #endif
                    let v198 : std_string_String = _v179 
                    let v203 : std_string_String = method93(v198)
                    let v204 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(v203)"
                    let v205 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v204 
                    v205
            let v208 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v209 : string = "&*$0"
            let v210 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v209 
            let _v208 = v210 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v211 : string = "&*$0"
            let v212 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v211 
            let _v208 = v212 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v213 : string = "&*$0"
            let v214 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v213 
            let _v208 = v214 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v215 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v208 = v215 
            #endif
#if FABLE_COMPILER_PYTHON
            let v218 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v208 = v218 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v221 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v208 = v221 
            #endif
#else
            let v224 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v208 = v224 
            #endif
            let v227 : Ref<Str> = _v208 
            let v232 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v233 : string = "String::from($0)"
            let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v233 
            let _v232 = v234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v235 : string = "String::from($0)"
            let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v235 
            let _v232 = v236 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v237 : string = "String::from($0)"
            let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v237 
            let _v232 = v238 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v239 : std_string_String = v227 |> unbox<std_string_String>
            let _v232 = v239 
            #endif
#if FABLE_COMPILER_PYTHON
            let v242 : std_string_String = v227 |> unbox<std_string_String>
            let _v232 = v242 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v245 : std_string_String = v227 |> unbox<std_string_String>
            let _v232 = v245 
            #endif
#else
            let v248 : std_string_String = v227 |> unbox<std_string_String>
            let _v232 = v248 
            #endif
            let v251 : std_string_String = _v232 
            let v256 : string = "reqwest_wasm::RequestBuilder::body(v207, $0)"
            let v257 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr v251 v256 
            let v258 : bool = v5 = false
            let v365 : reqwest_RequestBuilder =
                if v258 then
                    let v259 : string = "v257"
                    let v260 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v259 
                    v260
                else
                    let v261 : string = "reqwest_wasm::header::CONTENT_TYPE.to_string()"
                    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
                    let v263 : string = "fable_library_rust::String_::fromString($0)"
                    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
                    let v265 : reqwest_RequestBuilder = method94(v257)
                    let v266 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v267 : string = "&*$0"
                    let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v264 v267 
                    let _v266 = v268 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v269 : string = "&*$0"
                    let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v264 v269 
                    let _v266 = v270 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v271 : string = "&*$0"
                    let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v264 v271 
                    let _v266 = v272 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v273 : Ref<Str> = v264 |> unbox<Ref<Str>>
                    let _v266 = v273 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v276 : Ref<Str> = v264 |> unbox<Ref<Str>>
                    let _v266 = v276 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v279 : Ref<Str> = v264 |> unbox<Ref<Str>>
                    let _v266 = v279 
                    #endif
#else
                    let v282 : Ref<Str> = v264 |> unbox<Ref<Str>>
                    let _v266 = v282 
                    #endif
                    let v285 : Ref<Str> = _v266 
                    let v290 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v291 : string = "String::from($0)"
                    let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr v285 v291 
                    let _v290 = v292 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v293 : string = "String::from($0)"
                    let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr v285 v293 
                    let _v290 = v294 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v295 : string = "String::from($0)"
                    let v296 : std_string_String = Fable.Core.RustInterop.emitRustExpr v285 v295 
                    let _v290 = v296 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v297 : std_string_String = v285 |> unbox<std_string_String>
                    let _v290 = v297 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v300 : std_string_String = v285 |> unbox<std_string_String>
                    let _v290 = v300 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v303 : std_string_String = v285 |> unbox<std_string_String>
                    let _v290 = v303 
                    #endif
#else
                    let v306 : std_string_String = v285 |> unbox<std_string_String>
                    let _v290 = v306 
                    #endif
                    let v309 : std_string_String = _v290 
                    let v314 : string = "application/json"
                    let v315 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v316 : string = "&*$0"
                    let v317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v314 v316 
                    let _v315 = v317 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v318 : string = "&*$0"
                    let v319 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v314 v318 
                    let _v315 = v319 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v320 : string = "&*$0"
                    let v321 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v314 v320 
                    let _v315 = v321 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v322 : Ref<Str> = v314 |> unbox<Ref<Str>>
                    let _v315 = v322 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v325 : Ref<Str> = v314 |> unbox<Ref<Str>>
                    let _v315 = v325 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v328 : Ref<Str> = v314 |> unbox<Ref<Str>>
                    let _v315 = v328 
                    #endif
#else
                    let v331 : Ref<Str> = v314 |> unbox<Ref<Str>>
                    let _v315 = v331 
                    #endif
                    let v334 : Ref<Str> = _v315 
                    let v339 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v340 : string = "String::from($0)"
                    let v341 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v340 
                    let _v339 = v341 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v342 : string = "String::from($0)"
                    let v343 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v342 
                    let _v339 = v343 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v344 : string = "String::from($0)"
                    let v345 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v344 
                    let _v339 = v345 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v346 : std_string_String = v334 |> unbox<std_string_String>
                    let _v339 = v346 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v349 : std_string_String = v334 |> unbox<std_string_String>
                    let _v339 = v349 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v352 : std_string_String = v334 |> unbox<std_string_String>
                    let _v339 = v352 
                    #endif
#else
                    let v355 : std_string_String = v334 |> unbox<std_string_String>
                    let _v339 = v355 
                    #endif
                    let v358 : std_string_String = _v339 
                    let v363 : string = "reqwest_wasm::RequestBuilder::header(v265, $0, $1)"
                    let v364 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr struct (v309, v358) v363 
                    v364
            let v366 : reqwest_RequestBuilder = method95(v365)
            let v367 : string = "Box::pin(reqwest_wasm::RequestBuilder::send(v366))"
            let v368 : std_pin_Pin<Box<Dyn<std_future_Future<Result<reqwest_Response, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v367 
            let v369 : string = "v368.await"
            let v370 : Result<reqwest_Response, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v369 
            let v371 : (reqwest_Error -> std_string_String) = method96()
            let v372 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v373 : string = "$0.map_err(|x| $1(x))"
            let v374 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v370, v371) v373 
            let _v372 = v374 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v375 : string = "$0.map_err(|x| $1(x))"
            let v376 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v370, v371) v375 
            let _v372 = v376 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v377 : string = "$0.map_err(|x| $1(x))"
            let v378 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v370, v371) v377 
            let _v372 = v378 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v379 : Result<reqwest_Response, std_string_String> = match v370 with Ok x -> Ok x | Error x -> Error (v371 x)
            let _v372 = v379 
            #endif
#if FABLE_COMPILER_PYTHON
            let v380 : Result<reqwest_Response, std_string_String> = match v370 with Ok x -> Ok x | Error x -> Error (v371 x)
            let _v372 = v380 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v381 : Result<reqwest_Response, std_string_String> = match v370 with Ok x -> Ok x | Error x -> Error (v371 x)
            let _v372 = v381 
            #endif
#else
            let v382 : Result<reqwest_Response, std_string_String> = match v370 with Ok x -> Ok x | Error x -> Error (v371 x)
            let _v372 = v382 
            #endif
            let v383 : Result<reqwest_Response, std_string_String> = _v372 
            let v386 : string = "$0?"
            let v387 : reqwest_Response = Fable.Core.RustInterop.emitRustExpr v383 v386 
            let v388 : string = "Box::pin(reqwest_wasm::Response::text(v387))"
            let v389 : std_pin_Pin<Box<Dyn<std_future_Future<Result<std_string_String, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v388 
            let v390 : string = "v389.await"
            let v391 : Result<std_string_String, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v390 
            let v392 : (reqwest_Error -> std_string_String) = method96()
            let v393 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v394 : string = "$0.map_err(|x| $1(x))"
            let v395 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v391, v392) v394 
            let _v393 = v395 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v396 : string = "$0.map_err(|x| $1(x))"
            let v397 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v391, v392) v396 
            let _v393 = v397 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v398 : string = "$0.map_err(|x| $1(x))"
            let v399 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v391, v392) v398 
            let _v393 = v399 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v400 : Result<std_string_String, std_string_String> = match v391 with Ok x -> Ok x | Error x -> Error (v392 x)
            let _v393 = v400 
            #endif
#if FABLE_COMPILER_PYTHON
            let v401 : Result<std_string_String, std_string_String> = match v391 with Ok x -> Ok x | Error x -> Error (v392 x)
            let _v393 = v401 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v402 : Result<std_string_String, std_string_String> = match v391 with Ok x -> Ok x | Error x -> Error (v392 x)
            let _v393 = v402 
            #endif
#else
            let v403 : Result<std_string_String, std_string_String> = match v391 with Ok x -> Ok x | Error x -> Error (v392 x)
            let _v393 = v403 
            #endif
            let v404 : Result<std_string_String, std_string_String> = _v393 
            let v407 : string = "$0?"
            let v408 : std_string_String = Fable.Core.RustInterop.emitRustExpr v404 v407 
            let v409 : string = "fable_library_rust::String_::fromString($0)"
            let v410 : string = Fable.Core.RustInterop.emitRustExpr v408 v409 
            let v411 : string option = Some v410 
            US34_0(v411)
    let v421 : Result<string option, std_string_String> =
        match v415 with
        | US34_1(v418) -> (* Error *)
            let v419 : Result<string option, std_string_String> = Error v418 
            v419
        | US34_0(v416) -> (* Ok *)
            let v417 : Result<string option, std_string_String> = Ok v416 
            v417
    let v422 : Result<string option, std_string_String> = method97(v421)
    let v423 : string = ""
    let v424 : string = "}"
    let v425 : string = v423 + v424 
    let v426 : _ = v422 
    let v427 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v428 : string = $"true; let v426 = $0"
    let v429 : bool = Fable.Core.RustInterop.emitRustExpr v426 v428 
    let _v427 = v429 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v430 : string = $"true; let v426 = $0"
    let v431 : bool = Fable.Core.RustInterop.emitRustExpr v426 v430 
    let _v427 = v431 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v432 : string = $"true; let v426 = $0"
    let v433 : bool = Fable.Core.RustInterop.emitRustExpr v426 v432 
    let _v427 = v433 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v434 : bool = true
    let _v427 = v434 
    #endif
#if FABLE_COMPILER_PYTHON
    let v435 : bool = true
    let _v427 = v435 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v436 : bool = true
    let _v427 = v436 
    #endif
#else
    let v437 : bool = true
    let _v427 = v437 
    #endif
    let v438 : bool = _v427 
    let v441 : string = $"true; v426 " + v425 + "); " + v423 + " // rust.fix_closure'"
    let v442 : bool = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "__future_init"
    let v444 : _ = Fable.Core.RustInterop.emitRustExpr () v443 
    let v445 : string = "v444"
    let v446 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v445 
    v446
and closure79 (v0 : US28) (v1 : int32) : (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>) =
    closure80(v0, v1)
and method87 (v0 : US28) : (int32 -> (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>)) =
    closure79(v0)
and method98 (v0 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<struct (string * US24 * string * bool * bool)> =
    v0
and method99 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> =
    v0
and method100 (v0 : Result<Vec<string option>, std_string_String>) : Result<Vec<string option>, std_string_String> =
    v0
and method101 (v0 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>>) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>> =
    v0
and method82 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option>) : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>> =
    let v2 : string = "let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //"
    let v3 : (unit -> struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option)) = closure74(v0, v1)
    Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v4 : string = "x"
    let struct (v5 : Vec<struct (string * US24 * string * bool * bool)>, v6 : Result<Vec<Heap4 option>, std_string_String> option) = Fable.Core.RustInterop.emitRustExpr () v4 
    let v7 : string = $"%A{v5}"
    let v10 : int64 = 400L
    let v11 : string = method10(v10, v7)
    let v12 : string = "state_core.use_requests (7) / json create_local_resource / requests: " + string v11 + ""
    let v13 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "true; let __future_init = Box::pin(async move { //"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method83()
    let v18 : US27 option = v6 |> Option.map v17 
    let v29 : US27 = US27_1
    let v30 : US27 = v18 |> Option.defaultValue v29 
    let v72 : US28 =
        match v30 with
        | US27_1 -> (* None *)
            US28_1
        | US27_0(v34) -> (* Some *)
            let v35 : (Vec<Heap4 option> -> US25) = method84()
            let v36 : (std_string_String -> US25) = method85()
            let v37 : US25 = match v34 with Ok x -> v35 x | Error x -> v36 x
            let v68 : US29 =
                match v37 with
                | US25_1(v65) -> (* Error *)
                    US29_1(v65)
                | US25_0(v38) -> (* Ok *)
                    let v39 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v38 v39 
                    let v41 : string = "x"
                    let v42 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v41 
                    let v43 : (Heap4 -> US26) = method86()
                    let v44 : US26 option = v42 |> Option.map v43 
                    let v55 : US26 = US26_1
                    let v56 : US26 = v44 |> Option.defaultValue v55 
                    let v60 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v61 : bool = Fable.Core.RustInterop.emitRustExpr v56 v60 
                    let v62 : string = "_vec_map"
                    let v63 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v62 
                    US29_0(v63)
            US28_0(v68)
    let v73 : string = $"%A{v72}"
    let v76 : int64 = 400L
    let v77 : string = method10(v76, v73)
    let v78 : string = "state_core.use_requests (8) / result_memo / state_data: " + string v77 + ""
    let v79 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : (int32 -> (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>)) = method87(v72)
    let v82 : Vec<struct (string * US24 * string * bool * bool)> = method98(v5)
    let v83 : string = "v82.iter().enumerate().map(|(i, x)| v81(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v84 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = method99(v84)
    let v86 : string = "futures::future::try_join_all(v85)"
    let v87 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "v87.await"
    let v89 : Result<Vec<string option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "$0?"
    let v91 : Vec<string option> = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : Result<Vec<string option>, std_string_String> = Ok v91 
    let v93 : Result<Vec<string option>, std_string_String> = method100(v92)
    let v94 : string = ""
    let v95 : string = "}"
    let v96 : string = v94 + v95 
    let v97 : _ = v93 
    let v98 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = $"true; let v97 = $0"
    let v100 : bool = Fable.Core.RustInterop.emitRustExpr v97 v99 
    let _v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = $"true; let v97 = $0"
    let v102 : bool = Fable.Core.RustInterop.emitRustExpr v97 v101 
    let _v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = $"true; let v97 = $0"
    let v104 : bool = Fable.Core.RustInterop.emitRustExpr v97 v103 
    let _v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v105 : bool = true
    let _v98 = v105 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : bool = true
    let _v98 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : bool = true
    let _v98 = v107 
    #endif
#else
    let v108 : bool = true
    let _v98 = v108 
    #endif
    let v109 : bool = _v98 
    let v112 : string = $"true; v97 " + v96 + "); " + v94 + " // rust.fix_closure'"
    let v113 : bool = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : string = "__future_init"
    let v115 : _ = Fable.Core.RustInterop.emitRustExpr () v114 
    let v116 : string = "v115"
    let v117 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v116 
    let v118 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>> = method101(v117)
    let v119 : string = "v118.await"
    let v120 : Result<Vec<string option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : string = v94 + v95 
    let v122 : string = v121 + v95 
    let v123 : string = "{"
    let v124 : string = v94 + v123 
    let v125 : _ = v120 
    let v126 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v127 : string = $"true; let v125 = $0"
    let v128 : bool = Fable.Core.RustInterop.emitRustExpr v125 v127 
    let _v126 = v128 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v129 : string = $"true; let v125 = $0"
    let v130 : bool = Fable.Core.RustInterop.emitRustExpr v125 v129 
    let _v126 = v130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v131 : string = $"true; let v125 = $0"
    let v132 : bool = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _v126 = v132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v133 : bool = true
    let _v126 = v133 
    #endif
#if FABLE_COMPILER_PYTHON
    let v134 : bool = true
    let _v126 = v134 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v135 : bool = true
    let _v126 = v135 
    #endif
#else
    let v136 : bool = true
    let _v126 = v136 
    #endif
    let v137 : bool = _v126 
    let v140 : string = $"true; v125 " + v122 + "); " + v124 + " // rust.fix_closure'"
    let v141 : bool = Fable.Core.RustInterop.emitRustExpr () v140 
    let v142 : string = "__create_local_resource"
    let v143 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v142 
    v143
and method102 (v0 : string) : string =
    v0
and closure85 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method103 () : (rexie_Error -> std_string_String) =
    closure85()
and method104 (v0 : Result<unit, std_string_String>) : Result<unit, std_string_String> =
    v0
and closure84 (v0 : Heap4, v1 : std_sync_Arc<rexie_Rexie>) struct (v2 : string, v3 : US24, v4 : string, v5 : bool, v6 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>> =
    let v7 : string = "true; let __future_init = Box::pin(async move { //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: " + v2 + ""
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "url[" + v2 + "](" + $"%A{v4}" + ")"
    let v13 : string = $"%A{v0}"
    let v16 : int64 = System.Convert.ToInt64 v13.Length
    let v17 : string = "state_core.set_data () / data_len: " + string v16 + ""
    let v18 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "true; let __future_init = Box::pin(async move { //"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "true; let mut data = Vec::new()"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : string = "true; borsh::BorshSerialize::serialize(&$0, &mut data).unwrap()"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr v0 v24 
    let v26 : string = "data"
    let v27 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "serde_wasm_bindgen::to_value(&v27).unwrap()"
    let v29 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = method102(v12)
    let v31 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "&*$0"
    let v33 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v32 
    let _v31 = v33 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v34 : string = "&*$0"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v34 
    let _v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : string = "&*$0"
    let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v36 
    let _v31 = v37 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v41 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v44 
    #endif
#else
    let v47 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v47 
    #endif
    let v50 : Ref<Str> = _v31 
    let v55 : string = "$0.transaction(&[\"store\"], rexie::TransactionMode::ReadWrite)?"
    let v56 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v1 v55 
    let v57 : string = "v56.store(\"store\")?"
    let v58 : rexie_Store = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "true; v58.put(&v29, Some(&$0.into())).await?"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr v50 v59 
    let v61 : string = "true; v56.done().await?"
    let v62 : bool = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : Result<unit, rexie_Error> = Ok () 
    let v64 : Result<unit, rexie_Error> = method51(v63)
    let v65 : string = ""
    let v66 : string = "}"
    let v67 : string = v65 + v66 
    let v68 : _ = v64 
    let v69 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v70 : string = $"true; let v68 = $0"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr v68 v70 
    let _v69 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = $"true; let v68 = $0"
    let v73 : bool = Fable.Core.RustInterop.emitRustExpr v68 v72 
    let _v69 = v73 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : string = $"true; let v68 = $0"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v68 v74 
    let _v69 = v75 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v76 : bool = true
    let _v69 = v76 
    #endif
#if FABLE_COMPILER_PYTHON
    let v77 : bool = true
    let _v69 = v77 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : bool = true
    let _v69 = v78 
    #endif
#else
    let v79 : bool = true
    let _v69 = v79 
    #endif
    let v80 : bool = _v69 
    let v83 : string = $"true; v68 " + v67 + "); " + v65 + " // rust.fix_closure'"
    let v84 : bool = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = "__future_init"
    let v86 : _ = Fable.Core.RustInterop.emitRustExpr () v85 
    let v87 : string = "v86"
    let v88 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v87 
    let v89 : string = "v88.await"
    let v90 : Result<unit, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : (rexie_Error -> std_string_String) = method103()
    let v92 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v93 : string = "$0.map_err(|x| $1(x))"
    let v94 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v93 
    let _v92 = v94 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v95 : string = "$0.map_err(|x| $1(x))"
    let v96 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v95 
    let _v92 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "$0.map_err(|x| $1(x))"
    let v98 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v97 
    let _v92 = v98 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v99 : Result<unit, std_string_String> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
    let _v92 = v99 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : Result<unit, std_string_String> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
    let _v92 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v101 : Result<unit, std_string_String> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
    let _v92 = v101 
    #endif
#else
    let v102 : Result<unit, std_string_String> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
    let _v92 = v102 
    #endif
    let v103 : Result<unit, std_string_String> = _v92 
    let v106 : string = "true; $0?"
    let v107 : bool = Fable.Core.RustInterop.emitRustExpr v103 v106 
    
    let v108 : Result<unit, std_string_String> = Ok () 
    let v109 : Result<unit, std_string_String> = method104(v108)
    let v110 : string = v65 + v66 
    let v111 : _ = v109 
    let v112 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v113 : string = $"true; let v111 = $0"
    let v114 : bool = Fable.Core.RustInterop.emitRustExpr v111 v113 
    let _v112 = v114 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : string = $"true; let v111 = $0"
    let v116 : bool = Fable.Core.RustInterop.emitRustExpr v111 v115 
    let _v112 = v116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v117 : string = $"true; let v111 = $0"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let _v112 = v118 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v119 : bool = true
    let _v112 = v119 
    #endif
#if FABLE_COMPILER_PYTHON
    let v120 : bool = true
    let _v112 = v120 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v121 : bool = true
    let _v112 = v121 
    #endif
#else
    let v122 : bool = true
    let _v112 = v122 
    #endif
    let v123 : bool = _v112 
    let v126 : string = $"true; v111 " + v110 + "); " + v65 + " // rust.fix_closure'"
    let v127 : bool = Fable.Core.RustInterop.emitRustExpr () v126 
    let v128 : string = "__future_init"
    let v129 : _ = Fable.Core.RustInterop.emitRustExpr () v128 
    let v130 : string = "v129"
    let v131 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v130 
    v131
and method105 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> =
    v0
and method106 (v0 : Result<Vec<unit>, std_string_String>) : Result<Vec<unit>, std_string_String> =
    v0
and closure83 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option>) (v2 : Heap4) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>> =
    let v3 : string = $"%A{v2}"
    let v6 : int64 = System.Convert.ToInt64 v3.Length
    let v7 : string = "state_core.use_requests (10) / set_state_data_action / value_len: " + string v6 + ""
    let v8 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; let __future_init = Box::pin(async move { //"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v13 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v15 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "x"
    let v19 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : string = "$0.0"
    let v21 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "true; $0 })"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = "_optionm_map_"
    let v25 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : (std_sync_Arc<rexie_Rexie> -> US4) = method14()
    let v27 : US4 option = v25 |> Option.map v26 
    let v38 : US4 = US4_1
    let v39 : US4 = v27 |> Option.defaultValue v38 
    let v62 : US35 =
        match v39 with
        | US4_0(v43) -> (* Some *)
            let v44 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v45 : (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>) = closure84(v2, v43)
            let v46 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v13, v45) v44 
            let v47 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = method105(v46)
            let v48 : string = "futures::future::try_join_all(v47)"
            let v49 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v48 
            let v50 : string = "v49.await"
            let v51 : Result<Vec<unit>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v50 
            let v52 : string = "$0?"
            let v53 : Vec<unit> = Fable.Core.RustInterop.emitRustExpr v51 v52 
            US35_0(v53)
        | _ ->
            let v55 : string = "state_core.use_requests (12) / set_state_data_action / database,request=None"
            let v56 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v57 : bool = Fable.Core.RustInterop.emitRustExpr v55 v56 
            let v58 : (unit []) = [||]
            let v59 : string = "$0.to_vec()"
            let v60 : Vec<unit> = Fable.Core.RustInterop.emitRustExpr v58 v59 
            US35_0(v60)
    let v68 : Result<Vec<unit>, std_string_String> =
        match v62 with
        | US35_1(v65) -> (* Error *)
            let v66 : Result<Vec<unit>, std_string_String> = Error v65 
            v66
        | US35_0(v63) -> (* Ok *)
            let v64 : Result<Vec<unit>, std_string_String> = Ok v63 
            v64
    let v69 : Result<Vec<unit>, std_string_String> = method106(v68)
    let v70 : string = ""
    let v71 : string = "}"
    let v72 : string = v70 + v71 
    let v73 : _ = v69 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = $"true; let v73 = $0"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr v73 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = $"true; let v73 = $0"
    let v78 : bool = Fable.Core.RustInterop.emitRustExpr v73 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = $"true; let v73 = $0"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v73 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : bool = true
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : bool = true
    let _v74 = v82 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v83 : bool = true
    let _v74 = v83 
    #endif
#else
    let v84 : bool = true
    let _v74 = v84 
    #endif
    let v85 : bool = _v74 
    let v88 : string = $"true; v73 " + v72 + "); " + v70 + " // rust.fix_closure'"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "__future_init"
    let v91 : _ = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "v91"
    let v93 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v92 
    v93
and closure87 () (v0 : Result<Vec<string option>, std_string_String>) : US38 =
    US38_0(v0)
and method107 () : (Result<Vec<string option>, std_string_String> -> US38) =
    closure87()
and closure88 () (v0 : Vec<string option>) : US40 =
    US40_0(v0)
and method108 () : (Vec<string option> -> US40) =
    closure88()
and closure89 () (v0 : std_string_String) : US40 =
    US40_1(v0)
and method109 () : (std_string_String -> US40) =
    closure89()
and closure90 () (v0 : string) : US32 =
    US32_0(v0)
and method110 () : (string -> US32) =
    closure90()
and closure93 () (v0 : US32) : US43 =
    US43_0(v0)
and method112 () : (US32 -> US43) =
    closure93()
and closure94 () (v0 : crate_model_near_nearblocks_Root) : crate_model_near_nearblocks_Root option =
    let v1 : crate_model_near_nearblocks_Root option = Some v0 
    v1
and method113 () : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) =
    closure94()
and method114 (v0 : Result<crate_model_near_nearblocks_Root, std_string_String>) : Result<crate_model_near_nearblocks_Root, std_string_String> =
    v0
and closure92 (v0 : US36, v1 : US42, v2 : int32) struct (v3 : string, v4 : US24, v5 : string, v6 : bool, v7 : bool) : Result<crate_model_near_nearblocks_Root option, std_string_String> =
    let v51 : US30 =
        match v0 with
        | US36_1 -> (* None *)
            US30_1
        | US36_0(v8) -> (* Some *)
            let v47 : US31 =
                match v8 with
                | US37_1(v44) -> (* Error *)
                    US31_1(v44)
                | US37_0(v9) -> (* Ok *)
                    let v10 : US26 option = v9 |> Array.tryItem v2 
                    let v11 : (US26 -> US33) = method88()
                    let v12 : US33 option = v10 |> Option.map v11 
                    let v23 : US33 = US33_1
                    let v24 : US33 = v12 |> Option.defaultValue v23 
                    let v34 : US26 =
                        match v24 with
                        | US33_0(v28) -> (* Some *)
                            match v28 with
                            | US26_0(v29) -> (* Some *)
                                US26_0(v29)
                            | _ ->
                                US26_1
                        | _ ->
                            US26_1
                    let v42 : US32 =
                        match v34 with
                        | US26_1 -> (* None *)
                            US32_1
                        | US26_0(v35) -> (* Some *)
                            let v36 : std_string_String = v35.l0
                            let v37 : string = "fable_library_rust::String_::fromString($0)"
                            let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
                            US32_0(v38)
                    US31_0(v42)
            US30_0(v47)
    let v52 : string = $"%A{struct (v3, v4, v5, v6, v7)}"
    let v55 : int64 = 400L
    let v56 : string = method10(v55, v52)
    let v57 : string = $"%A{v51}"
    let v60 : int64 = 400L
    let v61 : string = method10(v60, v57)
    let v62 : string = "state_core.use_request (15) / result memo / request: " + string v56 + " / state_data: " + string v61 + ""
    let v63 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = $"%A{v1}"
    let v68 : int64 = 400L
    let v69 : string = method10(v68, v65)
    let v70 : string = "state_core.use_request (16) / effect / json: " + string v69 + ""
    let v71 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v104 : US32 =
        match v1 with
        | US42_1(v101) -> (* Error *)
            US32_1
        | US42_0(v73) -> (* Ok *)
            let v74 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v75 : (US32 []) = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : US32 option = v75 |> Array.tryItem v2 
            let v77 : (US32 -> US43) = method112()
            let v78 : US43 option = v76 |> Option.map v77 
            let v89 : US43 = US43_1
            let v90 : US43 = v78 |> Option.defaultValue v89 
            match v90 with
            | US43_0(v94) -> (* Some *)
                match v94 with
                | US32_0(v95) -> (* Some *)
                    US32_0(v95)
                | _ ->
                    US32_1
            | _ ->
                US32_1
    match v104 with
    | US32_0(v105) -> (* Some *)
        let v106 : string = method48(v105)
        let v107 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v108 : string = "&*$0"
        let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v108 
        let _v107 = v109 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "&*$0"
        let v111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v110 
        let _v107 = v111 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v112 : string = "&*$0"
        let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v112 
        let _v107 = v113 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v120 
        #endif
#else
        let v123 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v123 
        #endif
        let v126 : Ref<Str> = _v107 
        let v131 : string = "serde_json::from_str(&$0)"
        let v132 : Result<crate_model_near_nearblocks_Root, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v126 v131 
        let v133 : (serde_json_Error -> std_string_String) = method49()
        let v134 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "$0.map_err(|x| $1(x))"
        let v136 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v135 
        let _v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "$0.map_err(|x| $1(x))"
        let v138 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v137 
        let _v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "$0.map_err(|x| $1(x))"
        let v140 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v139 
        let _v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v143 
        #endif
#else
        let v144 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v144 
        #endif
        let v145 : Result<crate_model_near_nearblocks_Root, std_string_String> = _v134 
        let v148 : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) = method113()
        let v149 : Result<crate_model_near_nearblocks_Root, std_string_String> = method114(v145)
        let v150 : string = "v149.map(|x| v148(x))"
        let v151 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v150 
        v151
    | _ ->
        match v51 with
        | US30_0(v152) -> (* Some *)
            match v152 with
            | US31_0(v153) -> (* Ok *)
                match v153 with
                | US32_0(v154) -> (* Some *)
                    let v155 : string = method48(v154)
                    let v156 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
                    let _v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
                    let _v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
                    let _v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v163 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v166 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v169 
                    #endif
#else
                    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v172 
                    #endif
                    let v175 : Ref<Str> = _v156 
                    let v180 : string = "serde_json::from_str(&$0)"
                    let v181 : Result<crate_model_near_nearblocks_Root, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v175 v180 
                    let v182 : (serde_json_Error -> std_string_String) = method49()
                    let v183 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "$0.map_err(|x| $1(x))"
                    let v185 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v184 
                    let _v183 = v185 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v186 : string = "$0.map_err(|x| $1(x))"
                    let v187 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v186 
                    let _v183 = v187 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v188 : string = "$0.map_err(|x| $1(x))"
                    let v189 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v188 
                    let _v183 = v189 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v191 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v191 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v192 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v192 
                    #endif
#else
                    let v193 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v193 
                    #endif
                    let v194 : Result<crate_model_near_nearblocks_Root, std_string_String> = _v183 
                    let v197 : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) = method113()
                    let v198 : Result<crate_model_near_nearblocks_Root, std_string_String> = method114(v194)
                    let v199 : string = "v198.map(|x| v197(x))"
                    let v200 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v199 
                    v200
                | _ ->
                    let v201 : string = $"%A{struct (v104, v51)}"
                    let v204 : string = "state_core.use_request (17) / json Error / value: " + string v201 + ""
                    let v205 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                    let v206 : bool = Fable.Core.RustInterop.emitRustExpr v204 v205 
                    let v207 : crate_model_near_nearblocks_Root option = None
                    let v208 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v207 
                    v208
            | _ ->
                let v210 : string = $"%A{struct (v104, v51)}"
                let v213 : string = "state_core.use_request (17) / json Error / value: " + string v210 + ""
                let v214 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v215 : bool = Fable.Core.RustInterop.emitRustExpr v213 v214 
                let v216 : crate_model_near_nearblocks_Root option = None
                let v217 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v216 
                v217
        | _ ->
            let v219 : string = $"%A{struct (v104, v51)}"
            let v222 : string = "state_core.use_request (17) / json Error / value: " + string v219 + ""
            let v223 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v224 : bool = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : crate_model_near_nearblocks_Root option = None
            let v226 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v225 
            v226
and closure91 (v0 : US36, v1 : US42) (v2 : int32) : (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>) =
    closure92(v0, v1, v2)
and method111 (v0 : US36, v1 : US42) : (int32 -> (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>)) =
    closure91(v0, v1)
and closure86 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option>, v2 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>>, v3 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>>) () : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) =
    let v4 : string = $"$0()"
    let v5 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = $"%A{v5}"
    let v9 : string = "state_core.use_requests (13) / result memo / requests: " + string v6 + ""
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"$0()"
    let v13 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method83()
    let v15 : US27 option = v13 |> Option.map v14 
    let v26 : US27 = US27_1
    let v27 : US27 = v15 |> Option.defaultValue v26 
    let v71 : US36 =
        match v27 with
        | US27_1 -> (* None *)
            US36_1
        | US27_0(v31) -> (* Some *)
            let v32 : (Vec<Heap4 option> -> US25) = method84()
            let v33 : (std_string_String -> US25) = method85()
            let v34 : US25 = match v31 with Ok x -> v32 x | Error x -> v33 x
            let v67 : US37 =
                match v34 with
                | US25_1(v64) -> (* Error *)
                    US37_1(v64)
                | US25_0(v35) -> (* Ok *)
                    let v36 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
                    let v38 : string = "x"
                    let v39 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v38 
                    let v40 : (Heap4 -> US26) = method86()
                    let v41 : US26 option = v39 |> Option.map v40 
                    let v52 : US26 = US26_1
                    let v53 : US26 = v41 |> Option.defaultValue v52 
                    let v57 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v58 : bool = Fable.Core.RustInterop.emitRustExpr v53 v57 
                    let v59 : string = "_vec_map"
                    let v60 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v59 
                    let v61 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v62 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v60 v61 
                    US37_0(v62)
            US36_0(v67)
    let v72 : string = $"%A{v71}"
    let v75 : int64 = 400L
    let v76 : string = method10(v75, v72)
    let v77 : string = "state_core.use_request (14) / result_memo / state_data: " + string v76 + ""
    let v78 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v81 : Result<Vec<string option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v80 
    let v82 : (Result<Vec<string option>, std_string_String> -> US38) = method107()
    let v83 : US38 option = v81 |> Option.map v82 
    let v94 : US38 = US38_1
    let v95 : US38 = v83 |> Option.defaultValue v94 
    let v106 : US39 =
        match v95 with
        | US38_1 -> (* None *)
            US39_1
        | US38_0(v99) -> (* Some *)
            let v100 : (Vec<string option> -> US40) = method108()
            let v101 : (std_string_String -> US40) = method109()
            let v102 : US40 = match v99 with Ok x -> v100 x | Error x -> v101 x
            US39_0(v102)
    let v142 : US41 =
        match v106 with
        | US39_1 -> (* None *)
            US41_1
        | US39_0(v107) -> (* Some *)
            let v138 : US42 =
                match v107 with
                | US40_1(v135) -> (* Error *)
                    US42_1(v135)
                | US40_0(v108) -> (* Ok *)
                    let v109 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v110 : bool = Fable.Core.RustInterop.emitRustExpr v108 v109 
                    let v111 : string = "x"
                    let v112 : string option = Fable.Core.RustInterop.emitRustExpr () v111 
                    let v113 : (string -> US32) = method110()
                    let v114 : US32 option = v112 |> Option.map v113 
                    let v125 : US32 = US32_1
                    let v126 : US32 = v114 |> Option.defaultValue v125 
                    let v130 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v126 v130 
                    let v132 : string = "_vec_map"
                    let v133 : Vec<US32> = Fable.Core.RustInterop.emitRustExpr () v132 
                    US42_0(v133)
            US41_0(v138)
    let v143 : (US32 []) = [||]
    let v144 : string = "$0.to_vec()"
    let v145 : Vec<US32> = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v149 : US42 =
        match v142 with
        | US41_1 -> (* None *)
            US42_0(v145)
        | US41_0(v146) -> (* Some *)
            v146
    match v149 with
    | US42_1(v211) -> (* Error *)
        ()
    | US42_0(v150) -> (* Ok *)
        let v151 : string = "true; $0.into_iter().for_each(|x| { //"
        let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
        let v153 : string = "x"
        let v154 : US32 = Fable.Core.RustInterop.emitRustExpr () v153 
        match v154 with
        | US32_0(v155) -> (* Some *)
            let v156 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v157 : string = "&*$0"
            let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
            let _v156 = v158 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v159 : string = "&*$0"
            let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
            let _v156 = v160 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v161 : string = "&*$0"
            let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
            let _v156 = v162 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v163 
            #endif
#if FABLE_COMPILER_PYTHON
            let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v166 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v169 
            #endif
#else
            let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v172 
            #endif
            let v175 : Ref<Str> = _v156 
            let v180 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v181 : string = "String::from($0)"
            let v182 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v181 
            let _v180 = v182 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v183 : string = "String::from($0)"
            let v184 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v183 
            let _v180 = v184 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v185 : string = "String::from($0)"
            let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v185 
            let _v180 = v186 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v187 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v187 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v193 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v193 
            #endif
#else
            let v196 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v196 
            #endif
            let v199 : std_string_String = _v180 
            let v204 : Heap4 = {l0 = v199} : Heap4
            let v205 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
            let v206 : bool = Fable.Core.RustInterop.emitRustExpr struct (v3, v204) v205 
            ()
        | _ ->
            ()
        let v207 : string = $"true"
        let v208 : bool = Fable.Core.RustInterop.emitRustExpr () v207 
        let v209 : string = "true; }}); { //"
        let v210 : bool = Fable.Core.RustInterop.emitRustExpr () v209 
        ()
    let v212 : (int32 -> (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>)) = method111(v71, v149)
    let v213 : Vec<struct (string * US24 * string * bool * bool)> = method98(v5)
    let v214 : string = "v213.iter().enumerate().map(|(i, x)| v212(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v215 : Vec<Result<crate_model_near_nearblocks_Root option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v214 
    let v216 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v217 : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v215 v216 
    let v218 : string = $"%A{v217}"
    let v221 : string = "state_core.use_requests (18) / result_func func0 / result: " + string v218 + ""
    let v222 : int64 = 200L
    let v223 : string = method10(v222, v221)
    let v224 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v225 : bool = Fable.Core.RustInterop.emitRustExpr v223 v224 
    v217
and method116 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) =
    v0
and closure97 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) (v1 : crate_model_near_nearblocks_Root option) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option =
    let v2 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = method116(v0)
    let v3 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option = v1 |> Option.map v2 
    v3
and method115 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : (crate_model_near_nearblocks_Root option -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) =
    closure97(v0)
and method117 (v0 : Result<crate_model_near_nearblocks_Root option, std_string_String>) : Result<crate_model_near_nearblocks_Root option, std_string_String> =
    v0
and closure96 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) (v1 : Result<crate_model_near_nearblocks_Root option, std_string_String>) : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> =
    let v2 : (crate_model_near_nearblocks_Root option -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) = method115(v0)
    let v3 : Result<crate_model_near_nearblocks_Root option, std_string_String> = method117(v1)
    let v4 : string = "v3.map(|x| v2(x))"
    let v5 : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4 
    v5
and closure95 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])), v1 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>, v2 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>>, v3 : leptos_prelude_Memo<(Result<crate_model_near_nearblocks_Root option, std_string_String> [])>) () : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> =
    let v4 : string = $"leptos::attr::loading(&$0)"
    let v5 : leptos_prelude_Signal<bool> = Fable.Core.RustInterop.emitRustExpr v1 v4 
    let v6 : string = $"leptos::prelude::Signal::get(&$0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"leptos::attr::loading(&$0)"
    let v9 : leptos_prelude_Signal<bool> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = $"leptos::prelude::Signal::get(&$0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v13 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (std_sync_Arc<rexie_Rexie> -> US4) = method14()
    let v15 : US4 option = v13 |> Option.map v14 
    let v26 : US4 = US4_1
    let v27 : US4 = v15 |> Option.defaultValue v26 
    let v31 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v32 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v31 
    let v33 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method83()
    let v34 : US27 option = v32 |> Option.map v33 
    let v45 : US27 = US27_1
    let v46 : US27 = v34 |> Option.defaultValue v45 
    let v90 : US36 =
        match v46 with
        | US27_1 -> (* None *)
            US36_1
        | US27_0(v50) -> (* Some *)
            let v51 : (Vec<Heap4 option> -> US25) = method84()
            let v52 : (std_string_String -> US25) = method85()
            let v53 : US25 = match v50 with Ok x -> v51 x | Error x -> v52 x
            let v86 : US37 =
                match v53 with
                | US25_1(v83) -> (* Error *)
                    US37_1(v83)
                | US25_0(v54) -> (* Ok *)
                    let v55 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
                    let v57 : string = "x"
                    let v58 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v57 
                    let v59 : (Heap4 -> US26) = method86()
                    let v60 : US26 option = v58 |> Option.map v59 
                    let v71 : US26 = US26_1
                    let v72 : US26 = v60 |> Option.defaultValue v71 
                    let v76 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v72 v76 
                    let v78 : string = "_vec_map"
                    let v79 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v78 
                    let v80 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v81 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v79 v80 
                    US37_0(v81)
            US36_0(v86)
    let v91 : string = $"%A{v27}"
    let v94 : int64 = 400L
    let v95 : string = method10(v94, v91)
    let v96 : string = $"%A{v90}"
    let v99 : int64 = 400L
    let v100 : string = method10(v99, v96)
    let v101 : string = "state_core.use_request (19) / result move / database: " + string v95 + " / database_loading: " + string v7 + " / state_data: " + string v100 + " / state_data_loading: " + string v11 + ""
    let v102 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = $"$0()"
    let v105 : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v3 v104 
    let v106 : string = "$0.to_vec()"
    let v107 : Vec<Result<crate_model_near_nearblocks_Root option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v109 : (Result<crate_model_near_nearblocks_Root option, std_string_String> -> Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>) = closure96(v0)
    let v110 : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v107, v109) v108 
    let v111 : string = $"%A{v110}"
    let v114 : string = "state_core.use_requests (20) / result func0 / result: " + string v111 + ""
    let v115 : int64 = 200L
    let v116 : string = method10(v115, v114)
    let v117 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v116 v117 
    v110
and method75 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> =
    let v2 : string = "state_core.use_requests (1)"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "state_core.use_database (1)"
    let v6 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> = method6()
    let v9 : string = "$0"
    let v10 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = closure70(v8)
    let v11 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "leptos::prelude::Memo::new(move |_| { v11(()) })"
    let v13 : leptos_prelude_Memo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>> = method76(v0, v8)
    let v15 : string = "$0"
    let v16 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = closure73(v14)
    let v17 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = Fable.Core.RustInterop.emitRustExpr v16 v15 
    let v18 : string = "leptos::prelude::Memo::new(move |_| { v17(()) })"
    let v19 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>> = method82(v0, v19)
    let v21 : string = "Box::pin($0)"
    let v22 : (Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>) = closure83(v0, v13)
    let v23 : std_pin_Pin<Box<(Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>)>> = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone())))"
    let v25 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "$0"
    let v27 : (unit -> (Result<crate_model_near_nearblocks_Root option, std_string_String> [])) = closure86(v0, v19, v20, v25)
    let v28 : (unit -> (Result<crate_model_near_nearblocks_Root option, std_string_String> [])) = Fable.Core.RustInterop.emitRustExpr v27 v26 
    let v29 : string = "leptos::prelude::Memo::new(move |_| { v28(()) })"
    let v30 : leptos_prelude_Memo<(Result<crate_model_near_nearblocks_Root option, std_string_String> [])> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "$0"
    let v32 : (unit -> Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>) = closure95(v1, v8, v14, v30)
    let v33 : (unit -> Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>) = Fable.Core.RustInterop.emitRustExpr v32 v31 
    let v34 : string = "leptos::prelude::Memo::new(move |_| { v33(()) })"
    let v35 : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v34 
    v35
and closure100 () (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) : US44 =
    US44_0(v0)
and method118 () : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option -> US44) =
    closure100()
and closure101 () (v0 : std_string_String) : US44 =
    US44_1(v0)
and method119 () : (std_string_String -> US44) =
    closure101()
and closure99 () (v0 : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>) : US44 =
    let v1 : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option -> US44) = method118()
    let v2 : (std_string_String -> US44) = method119()
    let v3 : US44 = match v0 with Ok x -> v1 x | Error x -> v2 x
    v3
and closure103 () (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) : US46 =
    US46_0(v0)
and method120 () : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) -> US46) =
    closure103()
and closure102 () (v0 : US44) : US45 =
    match v0 with
    | US44_1(v20) -> (* Error *)
        US45_1(v20)
    | US44_0(v1) -> (* Ok *)
        let v2 : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) -> US46) = method120()
        let v3 : US46 option = v1 |> Option.map v2 
        let v14 : US46 = US46_1
        let v15 : US46 = v3 |> Option.defaultValue v14 
        US45_0(v15)
and closure104 () (v0 : US45) : bool =
    match v0 with
    | US45_0(v1) -> (* Ok *)
        match v1 with
        | US46_1 -> (* None *)
            true
        | _ ->
            false
    | _ ->
        false
and method121 () : (US45 -> bool) =
    closure104()
and method122 (v0 : Vec<US45>) : Vec<US45> =
    v0
and closure107 () (v0 : (unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])))) : struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) =
    let (a, b) = v0 
    let v1 : unativeint = a
    let struct (v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : uint32, v9 : (struct (std_string_String * std_string_String option) []), v10 : float, v11 : bool, v12 : float, v13 : (std_string_String [])) = b
    struct (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
and closure108 (v0 : int32, v1 : string) struct (v2 : unativeint, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : std_string_String, v9 : uint32, v10 : (struct (std_string_String * std_string_String option) []), v11 : float, v12 : bool, v13 : float, v14 : (std_string_String [])) : struct (string * unativeint * Heap5) =
    let v15 : unativeint = v0 |> unativeint 
    let v18 : Heap5 = {l0 = v3; l1 = v4; l2 = v5; l3 = v6; l4 = v7; l5 = v8; l6 = v9; l7 = v10; l8 = v11; l9 = v12; l10 = v13; l11 = v14} : Heap5
    struct (v1, v15, v18)
and closure106 (v0 : (string []), v1 : int32) (v2 : US45) : US49 =
    let v3 : string = v0.[int v1]
    match v2 with
    | US45_1(v29) -> (* Error *)
        US49_1(v29)
    | US45_0(v4) -> (* Ok *)
        let v27 : US50 =
            match v4 with
            | US46_1 -> (* None *)
                US50_1
            | US46_0(v5) -> (* Some *)
                let v6 : string = "$0.to_vec()"
                let v7 : Vec<struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr v5 v6 
                let v8 : string = "v7.into_iter()"
                let v9 : _ = Fable.Core.RustInterop.emitRustExpr () v8 
                let v10 : string = "v9.enumerate().map(std::sync::Arc::new)"
                let v11 : _ = Fable.Core.RustInterop.emitRustExpr () v10 
                let v12 : string = "$0.collect::<Vec<_>>()"
                let v13 : Vec<(unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])))> = Fable.Core.RustInterop.emitRustExpr v11 v12 
                let v14 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v15 : ((unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) -> struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) = closure107()
                let v16 : Vec<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr struct (v13, v15) v14 
                let v17 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v18 : (struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = Fable.Core.RustInterop.emitRustExpr v16 v17 
                let v19 : string = "$0.to_vec()"
                let v20 : Vec<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr v18 v19 
                let v21 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v22 : (struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) -> struct (string * unativeint * Heap5)) = closure108(v1, v3)
                let v23 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr struct (v20, v22) v21 
                US50_0(v23)
        US49_0(v27)
and closure105 (v0 : (string [])) (v1 : int32) : (US45 -> US49) =
    closure106(v0, v1)
and method123 (v0 : (string [])) : (int32 -> (US45 -> US49)) =
    closure105(v0)
and method124 (v0 : Vec<US45>) : Vec<US45> =
    v0
and closure109 () (v0 : US49) : US51 =
    match v0 with
    | US49_1(v10) -> (* Error *)
        US51_1(v10)
    | US49_0(v1) -> (* Ok *)
        let v8 : Vec<struct (string * unativeint * Heap5)> option =
            match v1 with
            | US50_1 -> (* None *)
                let v6 : Vec<struct (string * unativeint * Heap5)> option = None
                v6
            | US50_0(v2) -> (* Some *)
                let v3 : Vec<struct (string * unativeint * Heap5)> option = Some v2 
                v3
        US51_0(v8)
and closure110 () (v0 : US51) : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> =
    match v0 with
    | US51_1(v3) -> (* Error *)
        let v4 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = Error v3 
        v4
    | US51_0(v1) -> (* Ok *)
        let v2 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = Ok v1 
        v2
and method125 (v0 : int32, v1 : Mut3) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure111 () (v0 : Vec<struct (string * unativeint * Heap5)> option) : US51 =
    US51_0(v0)
and method126 () : (Vec<struct (string * unativeint * Heap5)> option -> US51) =
    closure111()
and closure112 () (v0 : std_string_String) : US51 =
    US51_1(v0)
and method127 () : (std_string_String -> US51) =
    closure112()
and closure113 () (v0 : Vec<struct (string * unativeint * Heap5)>) : US50 =
    US50_0(v0)
and method128 () : (Vec<struct (string * unativeint * Heap5)> -> US50) =
    closure113()
and method129 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and method130 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and method131 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and closure114 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : std_string_String =
    let v3 : std_string_String = v2.l5
    v3
and method132 () : (struct (string * unativeint * Heap5) -> std_string_String) =
    closure114()
and method133 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and closure98 (v0 : leptos_prelude_Memo<(string [])>, v1 : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>>) () : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> =
    let v2 : string = $"$0()"
    let v3 : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v5 : (Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> -> US44) = closure99()
    let v6 : Vec<US44> = Fable.Core.RustInterop.emitRustExpr struct (v3, v5) v4 
    let v7 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v8 : (US44 -> US45) = closure102()
    let v9 : Vec<US45> = Fable.Core.RustInterop.emitRustExpr struct (v6, v8) v7 
    let v10 : string = $"%A{v9}"
    let v13 : int64 = 400L
    let v14 : string = method10(v13, v10)
    let v15 : string = "transactions.render (8) / txns move / root: " + string v14 + ""
    let v16 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : (US45 -> bool) = method121()
    let v19 : Vec<US45> = method122(v9)
    let v20 : string = "v19.into_iter().filter(|x| v18(x.clone().clone())).collect::<Vec<_>>()"
    let v21 : Vec<US45> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v23 : (US45 []) = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : int32 = v23.Length
    let v25 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v26 : (US45 []) = Fable.Core.RustInterop.emitRustExpr v9 v25 
    let v27 : int32 = v26.Length
    let v28 : bool = v24 = v27
    let v140 : US47 =
        if v28 then
            let v29 : US48 = US48_1
            US47_0(v29)
        else
            let v31 : string = $"$0()"
            let v32 : (string []) = Fable.Core.RustInterop.emitRustExpr v0 v31 
            let v33 : (int32 -> (US45 -> US49)) = method123(v32)
            let v34 : Vec<US45> = method124(v9)
            let v35 : string = "v34.iter().enumerate().map(|(i, x)| v33(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
            let v36 : Vec<US49> = Fable.Core.RustInterop.emitRustExpr () v35 
            let v37 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v38 : (US49 -> US51) = closure109()
            let v39 : Vec<US51> = Fable.Core.RustInterop.emitRustExpr struct (v36, v38) v37 
            let v40 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v41 : (US51 -> Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>) = closure110()
            let v42 : Vec<Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v39, v41) v40 
            let v43 : (struct (string * unativeint * Heap5) []) = [||]
            let v44 : string = "$0.to_vec()"
            let v45 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v43 v44 
            let v46 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v47 : (Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v42 v46 
            let v48 : int32 = v47.Length
            let v49 : US52 = US52_0(v45)
            let v50 : Mut3 = {l0 = 0; l1 = v49} : Mut3
            while method125(v48, v50) do
                let v52 : int32 = v50.l0
                let v53 : US52 = v50.l1
                let v54 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = v47.[int v52]
                let v55 : (Vec<struct (string * unativeint * Heap5)> option -> US51) = method126()
                let v56 : (std_string_String -> US51) = method127()
                let v57 : US51 = match v54 with Ok x -> v55 x | Error x -> v56 x
                let v80 : US49 =
                    match v57 with
                    | US51_1(v77) -> (* Error *)
                        US49_1(v77)
                    | US51_0(v58) -> (* Ok *)
                        let v59 : (Vec<struct (string * unativeint * Heap5)> -> US50) = method128()
                        let v60 : US50 option = v58 |> Option.map v59 
                        let v71 : US50 = US50_1
                        let v72 : US50 = v60 |> Option.defaultValue v71 
                        US49_0(v72)
                let v101 : US52 =
                    match v53 with
                    | US52_0(v81) -> (* Ok *)
                        match v80 with
                        | US49_1(v94) -> (* Error *)
                            US52_1(v94)
                        | US49_0(v82) -> (* Ok *)
                            match v82 with
                            | US50_0(v83) -> (* Some *)
                                let v84 : Vec<struct (string * unativeint * Heap5)> = method129(v83)
                                let v85 : Vec<struct (string * unativeint * Heap5)> = method130(v81)
                                let v86 : string = "true; let mut v85 = v85"
                                let v87 : bool = Fable.Core.RustInterop.emitRustExpr () v86 
                                let v88 : string = "true; v85.extend(v84)"
                                let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
                                let v90 : string = "v85"
                                let v91 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v90 
                                US52_0(v91)
                            | _ ->
                                v53
                    | _ ->
                        match v80 with
                        | US49_1(v98) -> (* Error *)
                            US52_1(v98)
                        | _ ->
                            v53
                let v102 : int32 = v52 + 1
                v50.l0 <- v102
                v50.l1 <- v101
                ()
            let v103 : US52 = v50.l1
            let v117 : US52 =
                match v103 with
                | US52_1(v114) -> (* Error *)
                    US52_1(v114)
                | US52_0(v104) -> (* Ok *)
                    let v105 : Vec<struct (string * unativeint * Heap5)> = method131(v104)
                    let v106 : (struct (string * unativeint * Heap5) -> std_string_String) = method132()
                    let v107 : string = "true; let mut v105 = v105"
                    let v108 : bool = Fable.Core.RustInterop.emitRustExpr () v107 
                    let v109 : string = "true; v105.sort_by_key(|x| v106(x.clone()))"
                    let v110 : bool = Fable.Core.RustInterop.emitRustExpr () v109 
                    let v111 : string = "v105"
                    let v112 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v111 
                    US52_0(v112)
            let v132 : US53 =
                match v117 with
                | US52_1(v129) -> (* Error *)
                    US53_1(v129)
                | US52_0(v118) -> (* Ok *)
                    let v119 : Vec<struct (string * unativeint * Heap5)> = method133(v118)
                    let v120 : string = "true; let mut v119 = v119"
                    let v121 : bool = Fable.Core.RustInterop.emitRustExpr () v120 
                    let v122 : string = "true; v119.reverse()"
                    let v123 : bool = Fable.Core.RustInterop.emitRustExpr () v122 
                    let v124 : string = "v119"
                    let v125 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v124 
                    let v126 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v127 : (struct (string * unativeint * Heap5) []) = Fable.Core.RustInterop.emitRustExpr v125 v126 
                    US53_0(v127)
            match v132 with
            | US53_1(v136) -> (* Error *)
                US47_1(v136)
            | US53_0(v133) -> (* Ok *)
                let v134 : US48 = US48_0(v133)
                US47_0(v134)
    let v153 : US54 =
        match v140 with
        | US47_1(v150) -> (* Error *)
            US54_1(v150)
        | US47_0(v141) -> (* Ok *)
            let v148 : (struct (string * unativeint * Heap5) []) option =
                match v141 with
                | US48_1 -> (* None *)
                    let v146 : (struct (string * unativeint * Heap5) []) option = None
                    v146
                | US48_0(v142) -> (* Some *)
                    let v143 : (struct (string * unativeint * Heap5) []) option = Some v142 
                    v143
            US54_0(v148)
    let v159 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> =
        match v153 with
        | US54_1(v156) -> (* Error *)
            let v157 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Error v156 
            v157
        | US54_0(v154) -> (* Ok *)
            let v155 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Ok v154 
            v155
    let v160 : string = $"%A{v159}"
    let v163 : string = "use_transactions.render (9) / txns create_memo / result: " + string v160 + " / loading: " + string v28 + ""
    let v164 : int64 = 200L
    let v165 : string = method10(v164, v163)
    let v166 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v167 : bool = Fable.Core.RustInterop.emitRustExpr v165 v166 
    v159
and closure116 () (v0 : (struct (string * unativeint * Heap5) []) option) : US54 =
    US54_0(v0)
and method134 () : ((struct (string * unativeint * Heap5) []) option -> US54) =
    closure116()
and closure117 () (v0 : std_string_String) : US54 =
    US54_1(v0)
and method135 () : (std_string_String -> US54) =
    closure117()
and closure118 () (v0 : (struct (string * unativeint * Heap5) [])) : US48 =
    US48_0(v0)
and method136 () : ((struct (string * unativeint * Heap5) []) -> US48) =
    closure118()
and closure120 () (v0 : serde_json_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method137 () : (serde_json_Error -> std_string_String) =
    closure120()
and method138 () : (std_string_String -> string) =
    closure55()
and method139 (v0 : Result<std_string_String, std_string_String>) : Result<std_string_String, std_string_String> =
    v0
and closure121 () (v0 : string) : struct (string * US24 * string * bool * bool) =
    let v1 : string = "https://rpc.mainnet.near.org"
    let v2 : US24 = US24_1
    struct (v1, v2, v0, true, false)
and method140 () : (string -> struct (string * US24 * string * bool * bool)) =
    closure121()
and method141 (v0 : Result<string, std_string_String>) : Result<string, std_string_String> =
    v0
and closure119 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : Result<struct (string * US24 * string * bool * bool), std_string_String> =
    let v3 : string = "2.0"
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "dontcare"
    let v53 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v54 : string = "&*$0"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v52 v54 
    let _v53 = v55 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v52 v56 
    let _v53 = v57 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v52 v58 
    let _v53 = v59 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v60 : Ref<Str> = v52 |> unbox<Ref<Str>>
    let _v53 = v60 
    #endif
#if FABLE_COMPILER_PYTHON
    let v63 : Ref<Str> = v52 |> unbox<Ref<Str>>
    let _v53 = v63 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v52 |> unbox<Ref<Str>>
    let _v53 = v66 
    #endif
#else
    let v69 : Ref<Str> = v52 |> unbox<Ref<Str>>
    let _v53 = v69 
    #endif
    let v72 : Ref<Str> = _v53 
    let v77 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v78 : string = "String::from($0)"
    let v79 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v78 
    let _v77 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "String::from($0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v80 
    let _v77 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "String::from($0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v82 
    let _v77 = v83 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_string_String = v72 |> unbox<std_string_String>
    let _v77 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v87 : std_string_String = v72 |> unbox<std_string_String>
    let _v77 = v87 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v90 : std_string_String = v72 |> unbox<std_string_String>
    let _v77 = v90 
    #endif
#else
    let v93 : std_string_String = v72 |> unbox<std_string_String>
    let _v77 = v93 
    #endif
    let v96 : std_string_String = _v77 
    let v101 : string = "EXPERIMENTAL_tx_status"
    let v102 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v101 v103 
    let _v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v101 v105 
    let _v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v101 v107 
    let _v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v101 |> unbox<Ref<Str>>
    let _v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v112 : Ref<Str> = v101 |> unbox<Ref<Str>>
    let _v102 = v112 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v115 : Ref<Str> = v101 |> unbox<Ref<Str>>
    let _v102 = v115 
    #endif
#else
    let v118 : Ref<Str> = v101 |> unbox<Ref<Str>>
    let _v102 = v118 
    #endif
    let v121 : Ref<Str> = _v102 
    let v126 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v127 : string = "String::from($0)"
    let v128 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v127 
    let _v126 = v128 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v129 : string = "String::from($0)"
    let v130 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v129 
    let _v126 = v130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v131 
    let _v126 = v132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v133 : std_string_String = v121 |> unbox<std_string_String>
    let _v126 = v133 
    #endif
#if FABLE_COMPILER_PYTHON
    let v136 : std_string_String = v121 |> unbox<std_string_String>
    let _v126 = v136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v139 : std_string_String = v121 |> unbox<std_string_String>
    let _v126 = v139 
    #endif
#else
    let v142 : std_string_String = v121 |> unbox<std_string_String>
    let _v126 = v142 
    #endif
    let v145 : std_string_String = _v126 
    let v150 : std_string_String = v2.l3
    let v151 : string = "bowen"
    let v152 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v153 : string = "&*$0"
    let v154 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v153 
    let _v152 = v154 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v155 : string = "&*$0"
    let v156 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v155 
    let _v152 = v156 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v157 : string = "&*$0"
    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v157 
    let _v152 = v158 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : Ref<Str> = v151 |> unbox<Ref<Str>>
    let _v152 = v159 
    #endif
#if FABLE_COMPILER_PYTHON
    let v162 : Ref<Str> = v151 |> unbox<Ref<Str>>
    let _v152 = v162 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v165 : Ref<Str> = v151 |> unbox<Ref<Str>>
    let _v152 = v165 
    #endif
#else
    let v168 : Ref<Str> = v151 |> unbox<Ref<Str>>
    let _v152 = v168 
    #endif
    let v171 : Ref<Str> = _v152 
    let v176 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v177 : string = "String::from($0)"
    let v178 : std_string_String = Fable.Core.RustInterop.emitRustExpr v171 v177 
    let _v176 = v178 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v179 : string = "String::from($0)"
    let v180 : std_string_String = Fable.Core.RustInterop.emitRustExpr v171 v179 
    let _v176 = v180 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v181 : string = "String::from($0)"
    let v182 : std_string_String = Fable.Core.RustInterop.emitRustExpr v171 v181 
    let _v176 = v182 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v183 : std_string_String = v171 |> unbox<std_string_String>
    let _v176 = v183 
    #endif
#if FABLE_COMPILER_PYTHON
    let v186 : std_string_String = v171 |> unbox<std_string_String>
    let _v176 = v186 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v189 : std_string_String = v171 |> unbox<std_string_String>
    let _v176 = v189 
    #endif
#else
    let v192 : std_string_String = v171 |> unbox<std_string_String>
    let _v176 = v192 
    #endif
    let v195 : std_string_String = _v176 
    let v200 : (std_string_String []) = [|v150; v195|]
    let v201 : string = "$0.to_vec()"
    let v202 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v200 v201 
    let v203 : string = "crate::model::near::rpc::RpcInput { jsonrpc: $0, id: $1, method: $2, params: v202 }"
    let v204 : crate_model_near_rpc_RpcInput = Fable.Core.RustInterop.emitRustExpr struct (v47, v96, v145) v203 
    let v205 : string = "serde_json::to_string(&v204)"
    let v206 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v205 
    let v207 : (serde_json_Error -> std_string_String) = method137()
    let v208 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v209 : string = "$0.map_err(|x| $1(x))"
    let v210 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v206, v207) v209 
    let _v208 = v210 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v211 : string = "$0.map_err(|x| $1(x))"
    let v212 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v206, v207) v211 
    let _v208 = v212 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v213 : string = "$0.map_err(|x| $1(x))"
    let v214 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v206, v207) v213 
    let _v208 = v214 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v215 : Result<std_string_String, std_string_String> = match v206 with Ok x -> Ok x | Error x -> Error (v207 x)
    let _v208 = v215 
    #endif
#if FABLE_COMPILER_PYTHON
    let v216 : Result<std_string_String, std_string_String> = match v206 with Ok x -> Ok x | Error x -> Error (v207 x)
    let _v208 = v216 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v217 : Result<std_string_String, std_string_String> = match v206 with Ok x -> Ok x | Error x -> Error (v207 x)
    let _v208 = v217 
    #endif
#else
    let v218 : Result<std_string_String, std_string_String> = match v206 with Ok x -> Ok x | Error x -> Error (v207 x)
    let _v208 = v218 
    #endif
    let v219 : Result<std_string_String, std_string_String> = _v208 
    let v222 : (std_string_String -> string) = method138()
    let v223 : Result<std_string_String, std_string_String> = method139(v219)
    let v224 : string = "v223.map(|x| v222(x))"
    let v225 : Result<string, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v224 
    let v226 : (string -> struct (string * US24 * string * bool * bool)) = method140()
    let v227 : Result<string, std_string_String> = method141(v225)
    let v228 : string = "v227.map(|x| v226(x))"
    let v229 : Result<struct (string * US24 * string * bool * bool), std_string_String> = Fable.Core.RustInterop.emitRustExpr () v228 
    v229
and closure115 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> =
    let v1 : string = $"$0()"
    let v2 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : ((struct (string * unativeint * Heap5) []) option -> US54) = method134()
    let v4 : (std_string_String -> US54) = method135()
    let v5 : US54 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v28 : US47 =
        match v5 with
        | US54_1(v25) -> (* Error *)
            US47_1(v25)
        | US54_0(v6) -> (* Ok *)
            let v7 : ((struct (string * unativeint * Heap5) []) -> US48) = method136()
            let v8 : US48 option = v6 |> Option.map v7 
            let v19 : US48 = US48_1
            let v20 : US48 = v8 |> Option.defaultValue v19 
            US47_0(v20)
    let v50 : US55 =
        match v28 with
        | US47_1(v47) -> (* Error *)
            US55_1(v47)
        | US47_0(v29) -> (* Ok *)
            match v29 with
            | US48_0(v30) -> (* Some *)
                let v31 : string = "$0.to_vec()"
                let v32 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v30 v31 
                let v33 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v34 : (struct (string * unativeint * Heap5) -> Result<struct (string * US24 * string * bool * bool), std_string_String>) = closure119()
                let v35 : Vec<Result<struct (string * US24 * string * bool * bool), std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v32, v34) v33 
                let v36 : string = "v35.into_iter().collect()"
                let v37 : Result<Vec<struct (string * US24 * string * bool * bool)>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v36 
                let v38 : string = "$0?"
                let v39 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v37 v38 
                let v40 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v41 : (struct (string * US24 * string * bool * bool) []) = Fable.Core.RustInterop.emitRustExpr v39 v40 
                let v42 : US56 = US56_0(v41)
                US55_0(v42)
            | _ ->
                let v44 : US56 = US56_1
                US55_0(v44)
    let v63 : US57 =
        match v50 with
        | US55_1(v60) -> (* Error *)
            US57_1(v60)
        | US55_0(v51) -> (* Ok *)
            let v58 : (struct (string * US24 * string * bool * bool) []) option =
                match v51 with
                | US56_1 -> (* None *)
                    let v56 : (struct (string * US24 * string * bool * bool) []) option = None
                    v56
                | US56_0(v52) -> (* Some *)
                    let v53 : (struct (string * US24 * string * bool * bool) []) option = Some v52 
                    v53
            US57_0(v58)
    let v69 : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> =
        match v63 with
        | US57_1(v66) -> (* Error *)
            let v67 : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> = Error v66 
            v67
        | US57_0(v64) -> (* Ok *)
            let v65 : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> = Ok v64 
            v65
    let v70 : string = $"%A{v69}"
    let v73 : string = "use_transactions.render (10) / rpc_requests create_memo / result: " + string v70 + ""
    let v74 : int64 = 200L
    let v75 : string = method10(v74, v73)
    let v76 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    v69
and closure123 () (v0 : (struct (string * US24 * string * bool * bool) []) option) : US57 =
    US57_0(v0)
and method142 () : ((struct (string * US24 * string * bool * bool) []) option -> US57) =
    closure123()
and closure124 () (v0 : std_string_String) : US57 =
    US57_1(v0)
and method143 () : (std_string_String -> US57) =
    closure124()
and closure125 () (v0 : (struct (string * US24 * string * bool * bool) [])) : US56 =
    US56_0(v0)
and method144 () : ((struct (string * US24 * string * bool * bool) []) -> US56) =
    closure125()
and closure122 (v0 : leptos_prelude_Memo<Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>>) () : Vec<struct (string * US24 * string * bool * bool)> =
    let v1 : string = $"$0()"
    let v2 : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : ((struct (string * US24 * string * bool * bool) []) option -> US57) = method142()
    let v4 : (std_string_String -> US57) = method143()
    let v5 : US57 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v28 : US55 =
        match v5 with
        | US57_1(v25) -> (* Error *)
            US55_1(v25)
        | US57_0(v6) -> (* Ok *)
            let v7 : ((struct (string * US24 * string * bool * bool) []) -> US56) = method144()
            let v8 : US56 option = v6 |> Option.map v7 
            let v19 : US56 = US56_1
            let v20 : US56 = v8 |> Option.defaultValue v19 
            US55_0(v20)
    let v34 : (struct (string * US24 * string * bool * bool) []) =
        match v28 with
        | US55_0(v29) -> (* Ok *)
            match v29 with
            | US56_0(v30) -> (* Some *)
                v30
            | _ ->
                [||]
        | _ ->
            [||]
    let v35 : string = "$0.to_vec()"
    let v36 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = $"%A{v36}"
    let v40 : string = "use_transactions.render (11) / rpc_requests' create_memo / result: " + string v37 + ""
    let v41 : int64 = 200L
    let v42 : string = method10(v41, v40)
    let v43 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v36
and closure130 () (v0 : crate_model_near_rpc_TransferDetail) : struct (std_string_String * std_string_String option * float option * std_string_String option) =
    let v1 : string = "$0.deposit"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.args"
    let v4 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.gas"
    let v6 : float option = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "$0.method_name"
    let v8 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v7 
    struct (v2, v4, v6, v8)
and closure129 () (v0 : std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>) : std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> =
    let v1 : string = "$0.into_iter().map(|(k, v)| (k, $1(v))).collect()"
    let v2 : (crate_model_near_rpc_TransferDetail -> struct (std_string_String * std_string_String option * float option * std_string_String option)) = closure130()
    let v3 : std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr struct (v0, v2) v1 
    v3
and closure128 () (v0 : crate_model_near_rpc_Receipt) : struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) =
    let v1 : string = "$0.predecessor_id"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.receipt"
    let v4 : crate_model_near_rpc_ReceiptDetail = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.action"
    let v6 : crate_model_near_rpc_ActionDetail = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.actions"
    let v8 : Vec<std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v10 : (std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail> -> std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>) = closure129()
    let v11 : Vec<std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>> = Fable.Core.RustInterop.emitRustExpr struct (v8, v10) v9 
    let v12 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v13 : (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.gas_price"
    let v15 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v14 
    let v16 : string = "$0.input_data_ids"
    let v17 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v16 
    let v18 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v19 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "$0.output_data_receivers"
    let v21 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v20 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v23 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = "$0.signer_id"
    let v25 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v24 
    let v26 : string = "$0.signer_public_key"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v26 
    let v28 : string = "$0.receipt_id"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v28 
    let v30 : string = "$0.receiver_id"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v30 
    struct (v2, v13, v15, v19, v23, v25, v27, v29, v31)
and closure132 () (v0 : crate_model_near_rpc_GasProfile) : struct (std_string_String * std_string_String * std_string_String) =
    let v1 : string = "$0.cost"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.cost_category"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.gas_used"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v5 
    struct (v2, v4, v6)
and closure134 () (v0 : crate_model_near_rpc_Proof) : struct (std_string_String * std_string_String) =
    let v1 : string = "$0.direction"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.hash"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v3 
    struct (v2, v4)
and closure133 () (v0 : Vec<crate_model_near_rpc_Proof>) : (struct (std_string_String * std_string_String) []) =
    let v1 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v2 : (crate_model_near_rpc_Proof -> struct (std_string_String * std_string_String)) = closure134()
    let v3 : Vec<struct (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v0, v2) v1 
    let v4 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v5 : (struct (std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method146 () : (Vec<crate_model_near_rpc_Proof> -> (struct (std_string_String * std_string_String) [])) =
    closure133()
and closure131 () (v0 : crate_model_near_rpc_ReceiptsOutcome) : struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) =
    let v1 : string = "$0.block_hash"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.id"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.outcome"
    let v6 : crate_model_near_rpc_OutcomeDetail = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "$0.executor_id"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "$0.gas_burnt"
    let v10 : uint64 = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let v11 : string = "$0.logs"
    let v12 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let v13 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v14 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "$0.metadata"
    let v16 : crate_model_near_rpc_Metadata = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let v17 : string = "$0.gas_profile"
    let v18 : Vec<crate_model_near_rpc_GasProfile> = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v20 : (crate_model_near_rpc_GasProfile -> struct (std_string_String * std_string_String * std_string_String)) = closure132()
    let v21 : Vec<struct (std_string_String * std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v19 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v23 : (struct (std_string_String * std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = "$0.version"
    let v25 : uint8 = Fable.Core.RustInterop.emitRustExpr v16 v24 
    let v26 : string = "$0.receipt_ids"
    let v27 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v26 
    let v28 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v29 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v30 : string = "$0.status"
    let v31 : std_collections_HashMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v30 
    let v32 : string = "$0.tokens_burnt"
    let v33 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v6 v32 
    let v34 : string = "$0.proof"
    let v35 : Vec<crate_model_near_rpc_Proof> option = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : (Vec<crate_model_near_rpc_Proof> -> (struct (std_string_String * std_string_String) [])) = method146()
    let v37 : (struct (std_string_String * std_string_String) []) option = v35 |> Option.map v36 
    let v52 : (struct (std_string_String * std_string_String) []) = [||]
    let v53 : (struct (std_string_String * std_string_String) []) = v37 |> Option.defaultValue v52 
    struct (v2, v4, v8, v10, v14, v23, v25, v29, v31, v33, v53)
and closure127 () (v0 : crate_model_near_rpc_TransactionStatus) : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) =
    let v1 : string = "$0.receipts"
    let v2 : Vec<crate_model_near_rpc_Receipt> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (crate_model_near_rpc_Receipt -> struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)) = closure128()
    let v5 : Vec<struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v7 : (struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.receipts_outcome"
    let v9 : Vec<crate_model_near_rpc_ReceiptsOutcome> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v11 : (crate_model_near_rpc_ReceiptsOutcome -> struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))) = closure131()
    let v12 : Vec<struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))> = Fable.Core.RustInterop.emitRustExpr struct (v9, v11) v10 
    let v13 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v14 : (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []) = Fable.Core.RustInterop.emitRustExpr v12 v13 
    struct (v7, v14)
and method145 () : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) =
    closure127()
and closure136 () (v0 : crate_model_near_rpc_ErrorCauseInfo) : struct (std_string_String option * std_string_String option) =
    let v1 : string = "$0.error_message"
    let v2 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.requested_transaction_hash"
    let v4 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    struct (v2, v4)
and method148 () : (crate_model_near_rpc_ErrorCauseInfo -> struct (std_string_String option * std_string_String option)) =
    closure136()
and closure135 () (v0 : crate_model_near_rpc_RpcError) : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) =
    let v1 : string = "$0.name"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.cause"
    let v4 : crate_model_near_rpc_ErrorCause = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.name"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.info"
    let v8 : crate_model_near_rpc_ErrorCauseInfo option = Fable.Core.RustInterop.emitRustExpr v4 v7 
    let v9 : (crate_model_near_rpc_ErrorCauseInfo -> struct (std_string_String option * std_string_String option)) = method148()
    let v10 : struct (std_string_String option * std_string_String option) option = v8 |> Option.map v9 
    let v24 : string = "$0.code"
    let v25 : int32 = Fable.Core.RustInterop.emitRustExpr v0 v24 
    let v26 : string = "$0.message"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v26 
    let v28 : string = "$0.data"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v28 
    struct (v2, v6, v10, v25, v27, v29)
and method147 () : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) =
    closure135()
and closure126 () (v0 : crate_model_near_rpc_RpcResponse) : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) =
    let v1 : string = "$0.jsonrpc"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.result"
    let v4 : crate_model_near_rpc_TransactionStatus option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) = method145()
    let v6 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option = v4 |> Option.map v5 
    let v30 : string = "$0.error"
    let v31 : crate_model_near_rpc_RpcError option = Fable.Core.RustInterop.emitRustExpr v0 v30 
    let v32 : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) = method147()
    let v33 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option = v31 |> Option.map v32 
    let v72 : string = "$0.id"
    let v73 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v72 
    struct (v2, v6, v33, v73)
and closure140 () (v0 : crate_model_near_rpc_RpcResponse) : crate_model_near_rpc_RpcResponse option =
    let v1 : crate_model_near_rpc_RpcResponse option = Some v0 
    v1
and method151 () : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) =
    closure140()
and method152 (v0 : Result<crate_model_near_rpc_RpcResponse, std_string_String>) : Result<crate_model_near_rpc_RpcResponse, std_string_String> =
    v0
and closure139 (v0 : US36, v1 : US42, v2 : int32) struct (v3 : string, v4 : US24, v5 : string, v6 : bool, v7 : bool) : Result<crate_model_near_rpc_RpcResponse option, std_string_String> =
    let v51 : US30 =
        match v0 with
        | US36_1 -> (* None *)
            US30_1
        | US36_0(v8) -> (* Some *)
            let v47 : US31 =
                match v8 with
                | US37_1(v44) -> (* Error *)
                    US31_1(v44)
                | US37_0(v9) -> (* Ok *)
                    let v10 : US26 option = v9 |> Array.tryItem v2 
                    let v11 : (US26 -> US33) = method88()
                    let v12 : US33 option = v10 |> Option.map v11 
                    let v23 : US33 = US33_1
                    let v24 : US33 = v12 |> Option.defaultValue v23 
                    let v34 : US26 =
                        match v24 with
                        | US33_0(v28) -> (* Some *)
                            match v28 with
                            | US26_0(v29) -> (* Some *)
                                US26_0(v29)
                            | _ ->
                                US26_1
                        | _ ->
                            US26_1
                    let v42 : US32 =
                        match v34 with
                        | US26_1 -> (* None *)
                            US32_1
                        | US26_0(v35) -> (* Some *)
                            let v36 : std_string_String = v35.l0
                            let v37 : string = "fable_library_rust::String_::fromString($0)"
                            let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
                            US32_0(v38)
                    US31_0(v42)
            US30_0(v47)
    let v52 : string = $"%A{struct (v3, v4, v5, v6, v7)}"
    let v55 : int64 = 400L
    let v56 : string = method10(v55, v52)
    let v57 : string = $"%A{v51}"
    let v60 : int64 = 400L
    let v61 : string = method10(v60, v57)
    let v62 : string = "state_core.use_request (15) / result memo / request: " + string v56 + " / state_data: " + string v61 + ""
    let v63 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = $"%A{v1}"
    let v68 : int64 = 400L
    let v69 : string = method10(v68, v65)
    let v70 : string = "state_core.use_request (16) / effect / json: " + string v69 + ""
    let v71 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v104 : US32 =
        match v1 with
        | US42_1(v101) -> (* Error *)
            US32_1
        | US42_0(v73) -> (* Ok *)
            let v74 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v75 : (US32 []) = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : US32 option = v75 |> Array.tryItem v2 
            let v77 : (US32 -> US43) = method112()
            let v78 : US43 option = v76 |> Option.map v77 
            let v89 : US43 = US43_1
            let v90 : US43 = v78 |> Option.defaultValue v89 
            match v90 with
            | US43_0(v94) -> (* Some *)
                match v94 with
                | US32_0(v95) -> (* Some *)
                    US32_0(v95)
                | _ ->
                    US32_1
            | _ ->
                US32_1
    match v104 with
    | US32_0(v105) -> (* Some *)
        let v106 : string = method48(v105)
        let v107 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v108 : string = "&*$0"
        let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v108 
        let _v107 = v109 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "&*$0"
        let v111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v110 
        let _v107 = v111 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v112 : string = "&*$0"
        let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v112 
        let _v107 = v113 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v120 
        #endif
#else
        let v123 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v123 
        #endif
        let v126 : Ref<Str> = _v107 
        let v131 : string = "serde_json::from_str(&$0)"
        let v132 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v126 v131 
        let v133 : (serde_json_Error -> std_string_String) = method49()
        let v134 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "$0.map_err(|x| $1(x))"
        let v136 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v135 
        let _v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "$0.map_err(|x| $1(x))"
        let v138 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v137 
        let _v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "$0.map_err(|x| $1(x))"
        let v140 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v139 
        let _v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v143 
        #endif
#else
        let v144 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v144 
        #endif
        let v145 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _v134 
        let v148 : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) = method151()
        let v149 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = method152(v145)
        let v150 : string = "v149.map(|x| v148(x))"
        let v151 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v150 
        v151
    | _ ->
        match v51 with
        | US30_0(v152) -> (* Some *)
            match v152 with
            | US31_0(v153) -> (* Ok *)
                match v153 with
                | US32_0(v154) -> (* Some *)
                    let v155 : string = method48(v154)
                    let v156 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
                    let _v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
                    let _v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
                    let _v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v163 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v166 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v169 
                    #endif
#else
                    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v172 
                    #endif
                    let v175 : Ref<Str> = _v156 
                    let v180 : string = "serde_json::from_str(&$0)"
                    let v181 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v175 v180 
                    let v182 : (serde_json_Error -> std_string_String) = method49()
                    let v183 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "$0.map_err(|x| $1(x))"
                    let v185 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v184 
                    let _v183 = v185 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v186 : string = "$0.map_err(|x| $1(x))"
                    let v187 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v186 
                    let _v183 = v187 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v188 : string = "$0.map_err(|x| $1(x))"
                    let v189 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v188 
                    let _v183 = v189 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v191 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v191 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v192 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v192 
                    #endif
#else
                    let v193 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v193 
                    #endif
                    let v194 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _v183 
                    let v197 : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) = method151()
                    let v198 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = method152(v194)
                    let v199 : string = "v198.map(|x| v197(x))"
                    let v200 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v199 
                    v200
                | _ ->
                    let v201 : string = $"%A{struct (v104, v51)}"
                    let v204 : string = "state_core.use_request (17) / json Error / value: " + string v201 + ""
                    let v205 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                    let v206 : bool = Fable.Core.RustInterop.emitRustExpr v204 v205 
                    let v207 : crate_model_near_rpc_RpcResponse option = None
                    let v208 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v207 
                    v208
            | _ ->
                let v210 : string = $"%A{struct (v104, v51)}"
                let v213 : string = "state_core.use_request (17) / json Error / value: " + string v210 + ""
                let v214 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v215 : bool = Fable.Core.RustInterop.emitRustExpr v213 v214 
                let v216 : crate_model_near_rpc_RpcResponse option = None
                let v217 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v216 
                v217
        | _ ->
            let v219 : string = $"%A{struct (v104, v51)}"
            let v222 : string = "state_core.use_request (17) / json Error / value: " + string v219 + ""
            let v223 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v224 : bool = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : crate_model_near_rpc_RpcResponse option = None
            let v226 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v225 
            v226
and closure138 (v0 : US36, v1 : US42) (v2 : int32) : (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>) =
    closure139(v0, v1, v2)
and method150 (v0 : US36, v1 : US42) : (int32 -> (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>)) =
    closure138(v0, v1)
and closure137 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option>, v2 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>>, v3 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>>) () : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) =
    let v4 : string = $"$0()"
    let v5 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = $"%A{v5}"
    let v9 : string = "state_core.use_requests (13) / result memo / requests: " + string v6 + ""
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"$0()"
    let v13 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method83()
    let v15 : US27 option = v13 |> Option.map v14 
    let v26 : US27 = US27_1
    let v27 : US27 = v15 |> Option.defaultValue v26 
    let v71 : US36 =
        match v27 with
        | US27_1 -> (* None *)
            US36_1
        | US27_0(v31) -> (* Some *)
            let v32 : (Vec<Heap4 option> -> US25) = method84()
            let v33 : (std_string_String -> US25) = method85()
            let v34 : US25 = match v31 with Ok x -> v32 x | Error x -> v33 x
            let v67 : US37 =
                match v34 with
                | US25_1(v64) -> (* Error *)
                    US37_1(v64)
                | US25_0(v35) -> (* Ok *)
                    let v36 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
                    let v38 : string = "x"
                    let v39 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v38 
                    let v40 : (Heap4 -> US26) = method86()
                    let v41 : US26 option = v39 |> Option.map v40 
                    let v52 : US26 = US26_1
                    let v53 : US26 = v41 |> Option.defaultValue v52 
                    let v57 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v58 : bool = Fable.Core.RustInterop.emitRustExpr v53 v57 
                    let v59 : string = "_vec_map"
                    let v60 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v59 
                    let v61 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v62 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v60 v61 
                    US37_0(v62)
            US36_0(v67)
    let v72 : string = $"%A{v71}"
    let v75 : int64 = 400L
    let v76 : string = method10(v75, v72)
    let v77 : string = "state_core.use_request (14) / result_memo / state_data: " + string v76 + ""
    let v78 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v81 : Result<Vec<string option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v80 
    let v82 : (Result<Vec<string option>, std_string_String> -> US38) = method107()
    let v83 : US38 option = v81 |> Option.map v82 
    let v94 : US38 = US38_1
    let v95 : US38 = v83 |> Option.defaultValue v94 
    let v106 : US39 =
        match v95 with
        | US38_1 -> (* None *)
            US39_1
        | US38_0(v99) -> (* Some *)
            let v100 : (Vec<string option> -> US40) = method108()
            let v101 : (std_string_String -> US40) = method109()
            let v102 : US40 = match v99 with Ok x -> v100 x | Error x -> v101 x
            US39_0(v102)
    let v142 : US41 =
        match v106 with
        | US39_1 -> (* None *)
            US41_1
        | US39_0(v107) -> (* Some *)
            let v138 : US42 =
                match v107 with
                | US40_1(v135) -> (* Error *)
                    US42_1(v135)
                | US40_0(v108) -> (* Ok *)
                    let v109 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v110 : bool = Fable.Core.RustInterop.emitRustExpr v108 v109 
                    let v111 : string = "x"
                    let v112 : string option = Fable.Core.RustInterop.emitRustExpr () v111 
                    let v113 : (string -> US32) = method110()
                    let v114 : US32 option = v112 |> Option.map v113 
                    let v125 : US32 = US32_1
                    let v126 : US32 = v114 |> Option.defaultValue v125 
                    let v130 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v126 v130 
                    let v132 : string = "_vec_map"
                    let v133 : Vec<US32> = Fable.Core.RustInterop.emitRustExpr () v132 
                    US42_0(v133)
            US41_0(v138)
    let v143 : (US32 []) = [||]
    let v144 : string = "$0.to_vec()"
    let v145 : Vec<US32> = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v149 : US42 =
        match v142 with
        | US41_1 -> (* None *)
            US42_0(v145)
        | US41_0(v146) -> (* Some *)
            v146
    match v149 with
    | US42_1(v211) -> (* Error *)
        ()
    | US42_0(v150) -> (* Ok *)
        let v151 : string = "true; $0.into_iter().for_each(|x| { //"
        let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
        let v153 : string = "x"
        let v154 : US32 = Fable.Core.RustInterop.emitRustExpr () v153 
        match v154 with
        | US32_0(v155) -> (* Some *)
            let v156 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v157 : string = "&*$0"
            let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
            let _v156 = v158 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v159 : string = "&*$0"
            let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
            let _v156 = v160 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v161 : string = "&*$0"
            let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
            let _v156 = v162 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v163 
            #endif
#if FABLE_COMPILER_PYTHON
            let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v166 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v169 
            #endif
#else
            let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v172 
            #endif
            let v175 : Ref<Str> = _v156 
            let v180 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v181 : string = "String::from($0)"
            let v182 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v181 
            let _v180 = v182 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v183 : string = "String::from($0)"
            let v184 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v183 
            let _v180 = v184 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v185 : string = "String::from($0)"
            let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v185 
            let _v180 = v186 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v187 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v187 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v193 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v193 
            #endif
#else
            let v196 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v196 
            #endif
            let v199 : std_string_String = _v180 
            let v204 : Heap4 = {l0 = v199} : Heap4
            let v205 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
            let v206 : bool = Fable.Core.RustInterop.emitRustExpr struct (v3, v204) v205 
            ()
        | _ ->
            ()
        let v207 : string = $"true"
        let v208 : bool = Fable.Core.RustInterop.emitRustExpr () v207 
        let v209 : string = "true; }}); { //"
        let v210 : bool = Fable.Core.RustInterop.emitRustExpr () v209 
        ()
    let v212 : (int32 -> (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>)) = method150(v71, v149)
    let v213 : Vec<struct (string * US24 * string * bool * bool)> = method98(v5)
    let v214 : string = "v213.iter().enumerate().map(|(i, x)| v212(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v215 : Vec<Result<crate_model_near_rpc_RpcResponse option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v214 
    let v216 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v217 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v215 v216 
    let v218 : string = $"%A{v217}"
    let v221 : string = "state_core.use_requests (18) / result_func func0 / result: " + string v218 + ""
    let v222 : int64 = 200L
    let v223 : string = method10(v222, v221)
    let v224 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v225 : bool = Fable.Core.RustInterop.emitRustExpr v223 v224 
    v217
and method154 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) =
    v0
and closure143 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) (v1 : crate_model_near_rpc_RpcResponse option) : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option =
    let v2 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = method154(v0)
    let v3 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = v1 |> Option.map v2 
    v3
and method153 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : (crate_model_near_rpc_RpcResponse option -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) =
    closure143(v0)
and method155 (v0 : Result<crate_model_near_rpc_RpcResponse option, std_string_String>) : Result<crate_model_near_rpc_RpcResponse option, std_string_String> =
    v0
and closure142 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) (v1 : Result<crate_model_near_rpc_RpcResponse option, std_string_String>) : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
    let v2 : (crate_model_near_rpc_RpcResponse option -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) = method153(v0)
    let v3 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = method155(v1)
    let v4 : string = "v3.map(|x| v2(x))"
    let v5 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4 
    v5
and closure141 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)), v1 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>, v2 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>>, v3 : leptos_prelude_Memo<(Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])>) () : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> =
    let v4 : string = $"leptos::attr::loading(&$0)"
    let v5 : leptos_prelude_Signal<bool> = Fable.Core.RustInterop.emitRustExpr v1 v4 
    let v6 : string = $"leptos::prelude::Signal::get(&$0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"leptos::attr::loading(&$0)"
    let v9 : leptos_prelude_Signal<bool> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = $"leptos::prelude::Signal::get(&$0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v13 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (std_sync_Arc<rexie_Rexie> -> US4) = method14()
    let v15 : US4 option = v13 |> Option.map v14 
    let v26 : US4 = US4_1
    let v27 : US4 = v15 |> Option.defaultValue v26 
    let v31 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v32 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v31 
    let v33 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method83()
    let v34 : US27 option = v32 |> Option.map v33 
    let v45 : US27 = US27_1
    let v46 : US27 = v34 |> Option.defaultValue v45 
    let v90 : US36 =
        match v46 with
        | US27_1 -> (* None *)
            US36_1
        | US27_0(v50) -> (* Some *)
            let v51 : (Vec<Heap4 option> -> US25) = method84()
            let v52 : (std_string_String -> US25) = method85()
            let v53 : US25 = match v50 with Ok x -> v51 x | Error x -> v52 x
            let v86 : US37 =
                match v53 with
                | US25_1(v83) -> (* Error *)
                    US37_1(v83)
                | US25_0(v54) -> (* Ok *)
                    let v55 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
                    let v57 : string = "x"
                    let v58 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v57 
                    let v59 : (Heap4 -> US26) = method86()
                    let v60 : US26 option = v58 |> Option.map v59 
                    let v71 : US26 = US26_1
                    let v72 : US26 = v60 |> Option.defaultValue v71 
                    let v76 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v72 v76 
                    let v78 : string = "_vec_map"
                    let v79 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v78 
                    let v80 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v81 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v79 v80 
                    US37_0(v81)
            US36_0(v86)
    let v91 : string = $"%A{v27}"
    let v94 : int64 = 400L
    let v95 : string = method10(v94, v91)
    let v96 : string = $"%A{v90}"
    let v99 : int64 = 400L
    let v100 : string = method10(v99, v96)
    let v101 : string = "state_core.use_request (19) / result move / database: " + string v95 + " / database_loading: " + string v7 + " / state_data: " + string v100 + " / state_data_loading: " + string v11 + ""
    let v102 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = $"$0()"
    let v105 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v3 v104 
    let v106 : string = "$0.to_vec()"
    let v107 : Vec<Result<crate_model_near_rpc_RpcResponse option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v109 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> -> Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) = closure142(v0)
    let v110 : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v107, v109) v108 
    let v111 : string = $"%A{v110}"
    let v114 : string = "state_core.use_requests (20) / result func0 / result: " + string v111 + ""
    let v115 : int64 = 200L
    let v116 : string = method10(v115, v114)
    let v117 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v116 v117 
    v110
and method149 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> =
    let v2 : string = "state_core.use_requests (1)"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "state_core.use_database (1)"
    let v6 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> = method6()
    let v9 : string = "$0"
    let v10 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = closure70(v8)
    let v11 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "leptos::prelude::Memo::new(move |_| { v11(()) })"
    let v13 : leptos_prelude_Memo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>> = method76(v0, v8)
    let v15 : string = "$0"
    let v16 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = closure73(v14)
    let v17 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = Fable.Core.RustInterop.emitRustExpr v16 v15 
    let v18 : string = "leptos::prelude::Memo::new(move |_| { v17(()) })"
    let v19 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>> = method82(v0, v19)
    let v21 : string = "Box::pin($0)"
    let v22 : (Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>) = closure83(v0, v13)
    let v23 : std_pin_Pin<Box<(Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>)>> = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone())))"
    let v25 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "$0"
    let v27 : (unit -> (Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])) = closure137(v0, v19, v20, v25)
    let v28 : (unit -> (Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])) = Fable.Core.RustInterop.emitRustExpr v27 v26 
    let v29 : string = "leptos::prelude::Memo::new(move |_| { v28(()) })"
    let v30 : leptos_prelude_Memo<(Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "$0"
    let v32 : (unit -> Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) = closure141(v1, v8, v14, v30)
    let v33 : (unit -> Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) = Fable.Core.RustInterop.emitRustExpr v32 v31 
    let v34 : string = "leptos::prelude::Memo::new(move |_| { v33(()) })"
    let v35 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v34 
    v35
and method156 () : string =
    let v0 : string = "https://rpc.mainnet.near.org"
    v0
and closure145 () (v0 : US15) : US59 =
    US59_0(v0)
and method157 () : (US15 -> US59) =
    closure145()
and closure146 () (v0 : std_string_String) : US59 =
    US59_1(v0)
and method158 () : (std_string_String -> US59) =
    closure146()
and closure147 () (v0 : crate_model_near_rpc_RpcResponse) : US61 =
    US61_0(v0)
and method159 () : (crate_model_near_rpc_RpcResponse -> US61) =
    closure147()
and closure148 () (v0 : std_string_String) : US61 =
    US61_1(v0)
and method160 () : (std_string_String -> US61) =
    closure148()
and method161 (v0 : Result<US58, std_string_String>) : Result<US58, std_string_String> =
    v0
and closure144 () (v0 : Heap6) : std_pin_Pin<Box<Dyn<std_future_Future<Result<US58, std_string_String>>>>> =
    let v1 : string = $"%A{v0}"
    let v4 : string = "dice_view.render (2) / set_max_action / value: " + string v1 + ""
    let v5 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "true; let __future_init = Box::pin(async move { //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "2.0"
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v35 
    let _v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "String::from($0)"
    let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v37 
    let _v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v39 
    let _v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v47 
    #endif
#else
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v50 
    #endif
    let v53 : std_string_String = _v34 
    let v58 : string = "dontcare"
    let v59 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v58 v60 
    let _v59 = v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v58 v62 
    let _v59 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v58 v64 
    let _v59 = v65 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v66 : Ref<Str> = v58 |> unbox<Ref<Str>>
    let _v59 = v66 
    #endif
#if FABLE_COMPILER_PYTHON
    let v69 : Ref<Str> = v58 |> unbox<Ref<Str>>
    let _v59 = v69 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v58 |> unbox<Ref<Str>>
    let _v59 = v72 
    #endif
#else
    let v75 : Ref<Str> = v58 |> unbox<Ref<Str>>
    let _v59 = v75 
    #endif
    let v78 : Ref<Str> = _v59 
    let v83 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "String::from($0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v84 
    let _v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "String::from($0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v86 
    let _v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "String::from($0)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v88 
    let _v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_string_String = v78 |> unbox<std_string_String>
    let _v83 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : std_string_String = v78 |> unbox<std_string_String>
    let _v83 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v96 : std_string_String = v78 |> unbox<std_string_String>
    let _v83 = v96 
    #endif
#else
    let v99 : std_string_String = v78 |> unbox<std_string_String>
    let _v83 = v99 
    #endif
    let v102 : std_string_String = _v83 
    let v107 : string = "EXPERIMENTAL_tx_status"
    let v108 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v109 : string = "&*$0"
    let v110 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v107 v109 
    let _v108 = v110 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : string = "&*$0"
    let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v107 v111 
    let _v108 = v112 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v113 : string = "&*$0"
    let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v107 v113 
    let _v108 = v114 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v115 : Ref<Str> = v107 |> unbox<Ref<Str>>
    let _v108 = v115 
    #endif
#if FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v107 |> unbox<Ref<Str>>
    let _v108 = v118 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v121 : Ref<Str> = v107 |> unbox<Ref<Str>>
    let _v108 = v121 
    #endif
#else
    let v124 : Ref<Str> = v107 |> unbox<Ref<Str>>
    let _v108 = v124 
    #endif
    let v127 : Ref<Str> = _v108 
    let v132 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v127 v133 
    let _v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v127 v135 
    let _v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "String::from($0)"
    let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v127 v137 
    let _v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : std_string_String = v127 |> unbox<std_string_String>
    let _v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v127 |> unbox<std_string_String>
    let _v132 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : std_string_String = v127 |> unbox<std_string_String>
    let _v132 = v145 
    #endif
#else
    let v148 : std_string_String = v127 |> unbox<std_string_String>
    let _v132 = v148 
    #endif
    let v151 : std_string_String = _v132 
    let v156 : string = "9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS"
    let v157 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v158 : string = "&*$0"
    let v159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v156 v158 
    let _v157 = v159 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v160 : string = "&*$0"
    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v156 v160 
    let _v157 = v161 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v162 : string = "&*$0"
    let v163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v156 v162 
    let _v157 = v163 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v164 : Ref<Str> = v156 |> unbox<Ref<Str>>
    let _v157 = v164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : Ref<Str> = v156 |> unbox<Ref<Str>>
    let _v157 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v170 : Ref<Str> = v156 |> unbox<Ref<Str>>
    let _v157 = v170 
    #endif
#else
    let v173 : Ref<Str> = v156 |> unbox<Ref<Str>>
    let _v157 = v173 
    #endif
    let v176 : Ref<Str> = _v157 
    let v181 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v182 : string = "String::from($0)"
    let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v176 v182 
    let _v181 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "String::from($0)"
    let v185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v176 v184 
    let _v181 = v185 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v186 : string = "String::from($0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v176 v186 
    let _v181 = v187 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v188 : std_string_String = v176 |> unbox<std_string_String>
    let _v181 = v188 
    #endif
#if FABLE_COMPILER_PYTHON
    let v191 : std_string_String = v176 |> unbox<std_string_String>
    let _v181 = v191 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : std_string_String = v176 |> unbox<std_string_String>
    let _v181 = v194 
    #endif
#else
    let v197 : std_string_String = v176 |> unbox<std_string_String>
    let _v181 = v197 
    #endif
    let v200 : std_string_String = _v181 
    let v205 : string = "bowen"
    let v206 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v207 : string = "&*$0"
    let v208 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v207 
    let _v206 = v208 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v209 : string = "&*$0"
    let v210 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v209 
    let _v206 = v210 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v211 : string = "&*$0"
    let v212 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v211 
    let _v206 = v212 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v213 : Ref<Str> = v205 |> unbox<Ref<Str>>
    let _v206 = v213 
    #endif
#if FABLE_COMPILER_PYTHON
    let v216 : Ref<Str> = v205 |> unbox<Ref<Str>>
    let _v206 = v216 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v219 : Ref<Str> = v205 |> unbox<Ref<Str>>
    let _v206 = v219 
    #endif
#else
    let v222 : Ref<Str> = v205 |> unbox<Ref<Str>>
    let _v206 = v222 
    #endif
    let v225 : Ref<Str> = _v206 
    let v230 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : string = "String::from($0)"
    let v232 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v231 
    let _v230 = v232 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v233 : string = "String::from($0)"
    let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v233 
    let _v230 = v234 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v235 : string = "String::from($0)"
    let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v235 
    let _v230 = v236 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : std_string_String = v225 |> unbox<std_string_String>
    let _v230 = v237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v240 : std_string_String = v225 |> unbox<std_string_String>
    let _v230 = v240 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v243 : std_string_String = v225 |> unbox<std_string_String>
    let _v230 = v243 
    #endif
#else
    let v246 : std_string_String = v225 |> unbox<std_string_String>
    let _v230 = v246 
    #endif
    let v249 : std_string_String = _v230 
    let v254 : (std_string_String []) = [|v200; v249|]
    let v255 : string = "$0.to_vec()"
    let v256 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v254 v255 
    let v257 : string = "crate::model::near::rpc::RpcInput { jsonrpc: $0, id: $1, method: $2, params: v256 }"
    let v258 : crate_model_near_rpc_RpcInput = Fable.Core.RustInterop.emitRustExpr struct (v53, v102, v151) v257 
    let v259 : string = method156()
    let v260 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v261 : string = "&*$0"
    let v262 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v259 v261 
    let _v260 = v262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v263 : string = "&*$0"
    let v264 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v259 v263 
    let _v260 = v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v265 : string = "&*$0"
    let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v259 v265 
    let _v260 = v266 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v267 : Ref<Str> = v259 |> unbox<Ref<Str>>
    let _v260 = v267 
    #endif
#if FABLE_COMPILER_PYTHON
    let v270 : Ref<Str> = v259 |> unbox<Ref<Str>>
    let _v260 = v270 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v273 : Ref<Str> = v259 |> unbox<Ref<Str>>
    let _v260 = v273 
    #endif
#else
    let v276 : Ref<Str> = v259 |> unbox<Ref<Str>>
    let _v260 = v276 
    #endif
    let v279 : Ref<Str> = _v260 
    let v284 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v285 : string = "String::from($0)"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr v279 v285 
    let _v284 = v286 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v287 : string = "String::from($0)"
    let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr v279 v287 
    let _v284 = v288 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v289 : string = "String::from($0)"
    let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr v279 v289 
    let _v284 = v290 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v291 : std_string_String = v279 |> unbox<std_string_String>
    let _v284 = v291 
    #endif
#if FABLE_COMPILER_PYTHON
    let v294 : std_string_String = v279 |> unbox<std_string_String>
    let _v284 = v294 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v297 : std_string_String = v279 |> unbox<std_string_String>
    let _v284 = v297 
    #endif
#else
    let v300 : std_string_String = v279 |> unbox<std_string_String>
    let _v284 = v300 
    #endif
    let v303 : std_string_String = _v284 
    let v308 : std_string_String = method93(v303)
    let v309 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(v308)"
    let v310 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v309 
    let v311 : string = "reqwest_wasm::RequestBuilder::json(v310, &v258)"
    let v312 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v311 
    let v313 : reqwest_RequestBuilder = method95(v312)
    let v314 : string = "Box::pin(reqwest_wasm::RequestBuilder::send(v313))"
    let v315 : std_pin_Pin<Box<Dyn<std_future_Future<Result<reqwest_Response, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v314 
    let v316 : string = "v315.await"
    let v317 : Result<reqwest_Response, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v316 
    let v318 : (reqwest_Error -> std_string_String) = method96()
    let v319 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v320 : string = "$0.map_err(|x| $1(x))"
    let v321 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v317, v318) v320 
    let _v319 = v321 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v322 : string = "$0.map_err(|x| $1(x))"
    let v323 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v317, v318) v322 
    let _v319 = v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v324 : string = "$0.map_err(|x| $1(x))"
    let v325 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v317, v318) v324 
    let _v319 = v325 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v326 : Result<reqwest_Response, std_string_String> = match v317 with Ok x -> Ok x | Error x -> Error (v318 x)
    let _v319 = v326 
    #endif
#if FABLE_COMPILER_PYTHON
    let v327 : Result<reqwest_Response, std_string_String> = match v317 with Ok x -> Ok x | Error x -> Error (v318 x)
    let _v319 = v327 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v328 : Result<reqwest_Response, std_string_String> = match v317 with Ok x -> Ok x | Error x -> Error (v318 x)
    let _v319 = v328 
    #endif
#else
    let v329 : Result<reqwest_Response, std_string_String> = match v317 with Ok x -> Ok x | Error x -> Error (v318 x)
    let _v319 = v329 
    #endif
    let v330 : Result<reqwest_Response, std_string_String> = _v319 
    let v333 : string = "$0?"
    let v334 : reqwest_Response = Fable.Core.RustInterop.emitRustExpr v330 v333 
    let v335 : string = "Box::pin(reqwest_wasm::Response::text(v334))"
    let v336 : std_pin_Pin<Box<Dyn<std_future_Future<Result<std_string_String, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v335 
    let v337 : string = "v336.await"
    let v338 : Result<std_string_String, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v337 
    let v339 : (reqwest_Error -> std_string_String) = method96()
    let v340 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v341 : string = "$0.map_err(|x| $1(x))"
    let v342 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v338, v339) v341 
    let _v340 = v342 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v343 : string = "$0.map_err(|x| $1(x))"
    let v344 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v338, v339) v343 
    let _v340 = v344 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v345 : string = "$0.map_err(|x| $1(x))"
    let v346 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v338, v339) v345 
    let _v340 = v346 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v347 : Result<std_string_String, std_string_String> = match v338 with Ok x -> Ok x | Error x -> Error (v339 x)
    let _v340 = v347 
    #endif
#if FABLE_COMPILER_PYTHON
    let v348 : Result<std_string_String, std_string_String> = match v338 with Ok x -> Ok x | Error x -> Error (v339 x)
    let _v340 = v348 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v349 : Result<std_string_String, std_string_String> = match v338 with Ok x -> Ok x | Error x -> Error (v339 x)
    let _v340 = v349 
    #endif
#else
    let v350 : Result<std_string_String, std_string_String> = match v338 with Ok x -> Ok x | Error x -> Error (v339 x)
    let _v340 = v350 
    #endif
    let v351 : Result<std_string_String, std_string_String> = _v340 
    let v354 : string = "$0?"
    let v355 : std_string_String = Fable.Core.RustInterop.emitRustExpr v351 v354 
    let v356 : US15 = US15_0(v355)
    let v357 : Result<US15, std_string_String> = Ok v356 
    let v358 : string = $"%A{v357}"
    let v361 : string = "dice_view.render (x) / roll_action create_action / result1 / result: " + string v358 + ""
    let v362 : int64 = 200L
    let v363 : string = method10(v362, v361)
    let v364 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v365 : bool = Fable.Core.RustInterop.emitRustExpr v363 v364 
    let v366 : (US15 -> US59) = method157()
    let v367 : (std_string_String -> US59) = method158()
    let v368 : US59 = match v357 with Ok x -> v366 x | Error x -> v367 x
    let v512 : US60 =
        match v368 with
        | US59_0(v369) -> (* Ok *)
            match v369 with
            | US15_0(v370) -> (* Some *)
                let v371 : string = "fable_library_rust::String_::fromString($0)"
                let v372 : string = Fable.Core.RustInterop.emitRustExpr v370 v371 
                let v373 : string = method48(v372)
                let v374 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v375 : string = "&*$0"
                let v376 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v373 v375 
                let _v374 = v376 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v377 : string = "&*$0"
                let v378 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v373 v377 
                let _v374 = v378 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v379 : string = "&*$0"
                let v380 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v373 v379 
                let _v374 = v380 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v381 : Ref<Str> = v373 |> unbox<Ref<Str>>
                let _v374 = v381 
                #endif
#if FABLE_COMPILER_PYTHON
                let v384 : Ref<Str> = v373 |> unbox<Ref<Str>>
                let _v374 = v384 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v387 : Ref<Str> = v373 |> unbox<Ref<Str>>
                let _v374 = v387 
                #endif
#else
                let v390 : Ref<Str> = v373 |> unbox<Ref<Str>>
                let _v374 = v390 
                #endif
                let v393 : Ref<Str> = _v374 
                let v398 : string = "serde_json::from_str(&$0)"
                let v399 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v393 v398 
                let v400 : (serde_json_Error -> std_string_String) = method49()
                let v401 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v402 : string = "$0.map_err(|x| $1(x))"
                let v403 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v399, v400) v402 
                let _v401 = v403 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v404 : string = "$0.map_err(|x| $1(x))"
                let v405 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v399, v400) v404 
                let _v401 = v405 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v406 : string = "$0.map_err(|x| $1(x))"
                let v407 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v399, v400) v406 
                let _v401 = v407 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v408 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v399 with Ok x -> Ok x | Error x -> Error (v400 x)
                let _v401 = v408 
                #endif
#if FABLE_COMPILER_PYTHON
                let v409 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v399 with Ok x -> Ok x | Error x -> Error (v400 x)
                let _v401 = v409 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v410 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v399 with Ok x -> Ok x | Error x -> Error (v400 x)
                let _v401 = v410 
                #endif
#else
                let v411 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v399 with Ok x -> Ok x | Error x -> Error (v400 x)
                let _v401 = v411 
                #endif
                let v412 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _v401 
                let v415 : (crate_model_near_rpc_RpcResponse -> US61) = method159()
                let v416 : (std_string_String -> US61) = method160()
                let v417 : US61 = match v412 with Ok x -> v415 x | Error x -> v416 x
                let v496 : US62 =
                    match v417 with
                    | US61_1(v493) -> (* Error *)
                        US62_1(v493)
                    | US61_0(v418) -> (* Ok *)
                        let v419 : string = "$0.jsonrpc"
                        let v420 : std_string_String = Fable.Core.RustInterop.emitRustExpr v418 v419 
                        let v421 : string = "$0.result"
                        let v422 : crate_model_near_rpc_TransactionStatus option = Fable.Core.RustInterop.emitRustExpr v418 v421 
                        let v423 : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) = method145()
                        let v424 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option = v422 |> Option.map v423 
                        let v448 : string = "$0.error"
                        let v449 : crate_model_near_rpc_RpcError option = Fable.Core.RustInterop.emitRustExpr v418 v448 
                        let v450 : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) = method147()
                        let v451 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option = v449 |> Option.map v450 
                        let v490 : string = "$0.id"
                        let v491 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v418 v490 
                        US62_0(v420, v424, v451, v491)
                match v496 with
                | US62_1(v503) -> (* Error *)
                    US60_1(v503)
                | US62_0(v497, v498, v499, v500) -> (* Ok *)
                    let v501 : US58 = US58_0(v497, v498, v499, v500)
                    US60_0(v501)
            | _ ->
                let v507 : US58 = US58_1
                US60_0(v507)
        | _ ->
            let v510 : US58 = US58_1
            US60_0(v510)
    let v518 : Result<US58, std_string_String> =
        match v512 with
        | US60_1(v515) -> (* Error *)
            let v516 : Result<US58, std_string_String> = Error v515 
            v516
        | US60_0(v513) -> (* Ok *)
            let v514 : Result<US58, std_string_String> = Ok v513 
            v514
    let v519 : string = $"%A{v518}"
    let v522 : string = "dice_view.render (x) / roll_action create_action / result2 / result: " + string v519 + ""
    let v523 : int64 = 200L
    let v524 : string = method10(v523, v522)
    let v525 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v526 : bool = Fable.Core.RustInterop.emitRustExpr v524 v525 
    let v527 : Result<US58, std_string_String> = method161(v518)
    let v528 : string = ""
    let v529 : string = "}"
    let v530 : string = v528 + v529 
    let v531 : _ = v527 
    let v532 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v533 : string = $"true; let v531 = $0"
    let v534 : bool = Fable.Core.RustInterop.emitRustExpr v531 v533 
    let _v532 = v534 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v535 : string = $"true; let v531 = $0"
    let v536 : bool = Fable.Core.RustInterop.emitRustExpr v531 v535 
    let _v532 = v536 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v537 : string = $"true; let v531 = $0"
    let v538 : bool = Fable.Core.RustInterop.emitRustExpr v531 v537 
    let _v532 = v538 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v539 : bool = true
    let _v532 = v539 
    #endif
#if FABLE_COMPILER_PYTHON
    let v540 : bool = true
    let _v532 = v540 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v541 : bool = true
    let _v532 = v541 
    #endif
#else
    let v542 : bool = true
    let _v532 = v542 
    #endif
    let v543 : bool = _v532 
    let v546 : string = $"true; v531 " + v530 + "); " + v528 + " // rust.fix_closure'"
    let v547 : bool = Fable.Core.RustInterop.emitRustExpr () v546 
    let v548 : string = "__future_init"
    let v549 : _ = Fable.Core.RustInterop.emitRustExpr () v548 
    let v550 : string = "v549"
    let v551 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US58, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v550 
    v551
and closure151 () (v0 : US58) : US60 =
    US60_0(v0)
and method163 () : (US58 -> US60) =
    closure151()
and closure152 () (v0 : std_string_String) : US60 =
    US60_1(v0)
and method164 () : (std_string_String -> US60) =
    closure152()
and closure150 () (v0 : Result<US58, std_string_String>) : US60 =
    let v1 : (US58 -> US60) = method163()
    let v2 : (std_string_String -> US60) = method164()
    let v3 : US60 = match v0 with Ok x -> v1 x | Error x -> v2 x
    v3
and method162 () : (Result<US58, std_string_String> -> US60) =
    closure150()
and closure153 () (v0 : US60) : US63 =
    US63_0(v0)
and method165 () : (US60 -> US63) =
    closure153()
and closure149 (v0 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>) () : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
    let v1 : string = "leptos::prelude::Action::value(&$0)"
    let v2 : leptos_prelude_RwSignal<Result<US58, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v4 : Result<US58, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (Result<US58, std_string_String> -> US60) = method162()
    let v6 : US60 option = v4 |> Option.map v5 
    let v19 : (US60 -> US63) = method165()
    let v20 : US63 option = v6 |> Option.map v19 
    let v31 : US63 = US63_1
    let v32 : US63 = v20 |> Option.defaultValue v31 
    let v53 : US60 =
        match v32 with
        | US63_0(v36) -> (* Some *)
            match v36 with
            | US60_1(v37) -> (* Error *)
                US60_1(v37)
            | US60_0(v39) -> (* Ok *)
                match v39 with
                | US58_0(v40, v41, v42, v43) -> (* Some *)
                    let v44 : US58 = US58_0(v40, v41, v42, v43)
                    US60_0(v44)
                | _ ->
                    let v46 : US58 = US58_1
                    US60_0(v46)
        | _ ->
            let v51 : US58 = US58_1
            US60_0(v51)
    let v69 : US64 =
        match v53 with
        | US60_1(v66) -> (* Error *)
            US64_1(v66)
        | US60_0(v54) -> (* Ok *)
            let v64 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option =
                match v54 with
                | US58_1 -> (* None *)
                    let v62 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = None
                    v62
                | US58_0(v55, v56, v57, v58) -> (* Some *)
                    let v59 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = Some struct (v55, v56, v57, v58) 
                    v59
            US64_0(v64)
    let v75 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
        match v69 with
        | US64_1(v72) -> (* Error *)
            let v73 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Error v72 
            v73
        | US64_0(v70) -> (* Ok *)
            let v71 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Ok v70 
            v71
    let v76 : string = $"%A{v75}"
    let v79 : string = "dice_view.render (x) / roll create_memo / result: " + string v76 + ""
    let v80 : int64 = 200L
    let v81 : string = method10(v80, v79)
    let v82 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr v81 v82 
    v75
and closure155 () (v0 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) : US64 =
    US64_0(v0)
and method166 () : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US64) =
    closure155()
and closure156 () (v0 : std_string_String) : US64 =
    US64_1(v0)
and method167 () : (std_string_String -> US64) =
    closure156()
and closure157 () struct (v0 : std_string_String, v1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option, v2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option, v3 : std_string_String option) : US58 =
    US58_0(v0, v1, v2, v3)
and method168 () : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US58) =
    closure157()
and closure158 () struct (v0 : std_string_String, v1 : std_string_String, v2 : struct (std_string_String option * std_string_String option) option, v3 : int32, v4 : std_string_String, v5 : std_string_String) : US65 =
    US65_0(v0, v1, v2, v3, v4, v5)
and method169 () : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US65) =
    closure158()
and closure154 (v0 : leptos_prelude_Memo<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) () : string option =
    let v1 : string = $"$0()"
    let v2 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US64) = method166()
    let v4 : (std_string_String -> US64) = method167()
    let v5 : US64 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v31 : US60 =
        match v5 with
        | US64_1(v28) -> (* Error *)
            US60_1(v28)
        | US64_0(v6) -> (* Ok *)
            let v7 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US58) = method168()
            let v8 : US58 option = v6 |> Option.map v7 
            let v22 : US58 = US58_1
            let v23 : US58 = v8 |> Option.defaultValue v22 
            US60_0(v23)
    let v72 : US32 =
        match v31 with
        | US60_0(v32) -> (* Ok *)
            match v32 with
            | US58_0(v33, v34, v35, v36) -> (* Some *)
                let v37 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US65) = method169()
                let v38 : US65 option = v35 |> Option.map v37 
                let v54 : US65 = US65_1
                let v55 : US65 = v38 |> Option.defaultValue v54 
                match v55 with
                | US65_0(v59, v60, v61, v62, v63, v64) -> (* Some *)
                    let v65 : string = string v59 + ": " + string v63 + " - " + string v64 + " (" + string v60 + ")"
                    US32_0(v65)
                | _ ->
                    US32_1
            | _ ->
                US32_1
        | _ ->
            US32_1
    let v79 : string option =
        match v72 with
        | US32_1 -> (* None *)
            let v77 : string option = None
            v77
        | US32_0(v73) -> (* Some *)
            let v74 : string option = Some v73 
            v74
    let v80 : string = $"%A{v79}"
    let v83 : string = "dice_view.render (x) / error_message create_memo / result: " + string v80 + ""
    let v84 : int64 = 200L
    let v85 : string = method10(v84, v83)
    let v86 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v87 : bool = Fable.Core.RustInterop.emitRustExpr v85 v86 
    v79
and closure159 (v0 : Heap2) () : US32 =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : std_string_String option = v6.l1
    let v8 : (std_string_String -> US15) = method46()
    let v9 : US15 option = v7 |> Option.map v8 
    let v20 : US15 = US15_1
    let v21 : US15 = v9 |> Option.defaultValue v20 
    match v21 with
    | US15_1 -> (* None *)
        US32_1
    | US15_0(v25) -> (* Some *)
        let v26 : string = "fable_library_rust::String_::fromString($0)"
        let v27 : string = Fable.Core.RustInterop.emitRustExpr v25 v26 
        US32_0(v27)
and closure162 (v0 : int32) (v1 : std_string_String) : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) =
    let v2 : string = $"leptos::prelude::signal($0)"
    let struct (v3 : leptos_prelude_ReadSignal<std_string_String>, v4 : leptos_prelude_WriteSignal<std_string_String>) = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v5 : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) = v0, struct (v3, v4) 
    v5
and closure161 () (v0 : int32) : (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))) =
    closure162(v0)
and method170 () : (int32 -> (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)))) =
    closure161()
and method171 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and closure160 (v0 : Heap2) () : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : Vec<(bool * std_string_String)> = v6.l0
    let v8 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v9 : ((bool * std_string_String) -> struct (bool * std_string_String)) = closure52()
    let v10 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v7, v9) v8 
    let v11 : (struct (bool * std_string_String) -> bool) = method63()
    let v12 : Vec<struct (bool * std_string_String)> = method64(v10)
    let v13 : string = "v12.into_iter().filter(|x| v11(x.clone().clone())).collect::<Vec<_>>()"
    let v14 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v16 : (struct (bool * std_string_String) -> std_string_String) = closure54()
    let v17 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v14, v16) v15 
    let v18 : (int32 -> (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)))) = method170()
    let v19 : Vec<std_string_String> = method171(v17)
    let v20 : string = "v19.iter().enumerate().map(|(i, x)| v18(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v21 : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> = Fable.Core.RustInterop.emitRustExpr () v20 
    v21
and closure164 () (v0 : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))) : struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>) =
    let (a, b) = v0 
    let v1 : int32 = a
    let struct (v2 : leptos_prelude_ReadSignal<std_string_String>, v3 : leptos_prelude_WriteSignal<std_string_String>) = b
    struct (v1, v2, v3)
and closure165 () struct (v0 : int32, v1 : leptos_prelude_ReadSignal<std_string_String>, v2 : leptos_prelude_WriteSignal<std_string_String>) : struct (int32 * leptos_prelude_ReadSignal<std_string_String>) =
    struct (v0, v1)
and closure163 (v0 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>>) () : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> =
    let v1 : string = $"$0()"
    let v2 : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : ((int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) -> struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) = closure164()
    let v5 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v7 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>) -> struct (int32 * leptos_prelude_ReadSignal<std_string_String>)) = closure165()
    let v8 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    v8
and method172 () : Vec<leptos_prelude_AnyView_> =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure166 () () : string =
    let v0 : string = ""
    v0
and closure167 () () : bool =
    true
and method174 (v0 : leptos_prelude_AnyView_) : leptos_prelude_AnyView_ =
    v0
and method173 (v0 : leptos_prelude_AnyView_) : Vec<leptos_prelude_AnyView_> =
    let v1 : leptos_prelude_AnyView_ = method174(v0)
    let v2 : string = "v1"
    let v3 : string = ""
    let v4 : string = v2 + v3 
    let v5 : string = v4 + v3 
    let v6 : string = "vec![" + v5 + "]"
    let v7 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6 
    v7
and closure168 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure169 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure170 () () : string =
    let v0 : string = "Roll"
    v0
and method175 () : (unit -> string) =
    closure170()
and closure171 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and method176 (v0 : leptos_prelude_AnyView_, v1 : leptos_prelude_AnyView_) : Vec<leptos_prelude_AnyView_> =
    let v2 : leptos_prelude_AnyView_ = method174(v1)
    let v3 : string = "v2"
    let v4 : string = ""
    let v5 : string = v3 + v4 
    let v6 : string = v5 + v4 
    let v7 : leptos_prelude_AnyView_ = method174(v0)
    let v8 : string = "v7"
    let v9 : string = ", "
    let v10 : string = v8 + v9 
    let v11 : string = v10 + v6 
    let v12 : string = "vec![" + v11 + "]"
    let v13 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v12 
    v13
and closure173 () () : string =
    let v0 : string = "[align-self:flex-start]"
    v0
and closure174 () () : bool =
    false
and closure175 () () : string =
    let v0 : string = "py-[4px]"
    v0
and closure176 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v3 : string = ""
    let v4 : string = "r#\"" + v3 + "\"#"
    let v5 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v4 
    v5
and closure178 () (v0 : leptos_prelude_Memo<US32>) : US66 =
    US66_0(v0)
and method178 () : (leptos_prelude_Memo<US32> -> US66) =
    closure178()
and closure177 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : string =
    let v3 : (leptos_prelude_Memo<US32> -> US66) = method178()
    let v4 : US66 option = v1 |> Option.map v3 
    let v15 : US66 = US66_1
    let v16 : US66 = v4 |> Option.defaultValue v15 
    let v26 : US43 =
        match v16 with
        | US66_1 -> (* None *)
            US43_1
        | US66_0(v20) -> (* Some *)
            let v21 : string = $"$0()"
            let v22 : US32 = Fable.Core.RustInterop.emitRustExpr v20 v21 
            US43_0(v22)
    let v33 : US32 =
        match v26 with
        | US43_0(v27) -> (* Some *)
            match v27 with
            | US32_0(v28) -> (* Some *)
                US32_0(v28)
            | _ ->
                US32_1
        | _ ->
            US32_1
    match v33 with
    | US32_1 -> (* None *)
        let v35 : string = "Select..."
        v35
    | US32_0(v34) -> (* Some *)
        v34
and method177 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) : (unit -> string) =
    closure177(v0, v1, v2)
and closure180 () (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) : US67 =
    US67_0(v0)
and method179 () : (leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US67) =
    closure180()
and method180 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> =
    v0
and closure181 () struct (v0 : int32, v1 : leptos_prelude_ReadSignal<std_string_String>) : int32 =
    v0
and method181 () : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> int32) =
    closure181()
and method183 (v0 : std_string_String) : std_string_String =
    v0
and closure183 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2, v3 : int32, v4 : std_string_String) () : unit =
    let v5 : string = "fable_library_rust::String_::fromString($0)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : leptos_prelude_RwSignal<Heap1> = v2.l0
    let v8 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v9 : Heap1 = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : leptos_prelude_RwSignal<Heap0> = v9.l3
    let v11 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v12 : Heap0 = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : Vec<(bool * std_string_String)> = v12.l0
    let v14 : std_string_String option = v12.l1
    let v15 : int32 = v12.l2
    let v16 : int32 = v12.l3
    let v17 : US1 = v12.l4
    let v18 : leptos_prelude_RwSignal<Heap1> = v2.l0
    let v19 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v20 : Heap1 = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_RwSignal<Heap0> = v20.l3
    let v22 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v23 
    let _v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v25 
    let _v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "&*$0"
    let v28 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let _v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v22 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v22 = v35 
    #endif
#else
    let v38 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v22 = v38 
    #endif
    let v41 : Ref<Str> = _v22 
    let v46 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v41 v47 
    let _v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v41 v49 
    let _v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v41 v51 
    let _v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v53 : std_string_String = v41 |> unbox<std_string_String>
    let _v46 = v53 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v41 |> unbox<std_string_String>
    let _v46 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v41 |> unbox<std_string_String>
    let _v46 = v59 
    #endif
#else
    let v62 : std_string_String = v41 |> unbox<std_string_String>
    let _v46 = v62 
    #endif
    let v65 : std_string_String = _v46 
    let v70 : std_string_String option = Some v65 
    let v73 : Heap0 = {l0 = v13; l1 = v70; l2 = v15; l3 = v16; l4 = v17} : Heap0
    let v74 : string = $"true; leptos::prelude::RwSignal::set(&$0, $1);"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr struct (v21, v73) v74 
    ()
and closure184 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure182 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) struct (v3 : int32, v4 : leptos_prelude_ReadSignal<std_string_String>) : leptos_dom_Fragment =
    let v5 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : std_string_String = method183(v6)
    let v8 : (unit -> unit) = closure183(v0, v1, v2, v3, v6)
    let v9 : string = "let v8 = $0"
    Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v10 : string = "class=\"flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\""
    let v11 : string = "on:click=move |_| v8()"
    let v12 : string = "aria-label=v7"
    let v13 : string = ""
    let v14 : string = " " + v10 + v13 + ""
    let v15 : string = " " + v11 + v14 + ""
    let v16 : string = " " + v12 + v15 + ""
    let v17 : string = "fable_library_rust::String_::fromString($0)"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr v6 v17 
    let v19 : (leptos_prelude_Memo<US32> -> US66) = method178()
    let v20 : US66 option = v1 |> Option.map v19 
    let v31 : US66 = US66_1
    let v32 : US66 = v20 |> Option.defaultValue v31 
    let v42 : US43 =
        match v32 with
        | US66_1 -> (* None *)
            US43_1
        | US66_0(v36) -> (* Some *)
            let v37 : string = $"$0()"
            let v38 : US32 = Fable.Core.RustInterop.emitRustExpr v36 v37 
            US43_0(v38)
    let v49 : US32 =
        match v42 with
        | US43_0(v43) -> (* Some *)
            match v43 with
            | US32_0(v44) -> (* Some *)
                US32_0(v44)
            | _ ->
                US32_1
        | _ ->
            US32_1
    let v126 : leptos_prelude_AnyView_ =
        match v49 with
        | US32_0(v50) -> (* Some *)
            let v51 : bool = v18 = v50
            if v51 then
                let v52 : string = "$0"
                let v53 : (unit -> string) = closure184()
                let v54 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v53 v52 
                let v55 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                let v56 : string = "fill=\"none\""
                let v57 : string = "viewBox=\"0 0 24 24\""
                let v58 : string = "stroke-width=\"1.5\""
                let v59 : string = "stroke=\"currentColor\""
                let v60 : string = "class=move || \" \".to_owned() + &v54(())"
                let v61 : string = " " + v55 + v13 + ""
                let v62 : string = " " + v56 + v61 + ""
                let v63 : string = " " + v57 + v62 + ""
                let v64 : string = " " + v58 + v63 + ""
                let v65 : string = " " + v59 + v64 + ""
                let v66 : string = " " + v60 + v65 + ""
                let v67 : string = "cx=\"12\""
                let v68 : string = "cy=\"12\""
                let v69 : string = "r=\"9\""
                let v70 : string = "stroke-linecap=\"round\""
                let v71 : string = "stroke-linejoin=\"round\""
                let v72 : string = " " + v67 + v13 + ""
                let v73 : string = " " + v68 + v72 + ""
                let v74 : string = " " + v69 + v73 + ""
                let v75 : string = " " + v70 + v74 + ""
                let v76 : string = " " + v71 + v75 + ""
                let v77 : Vec<leptos_prelude_AnyView_> = method172()
                let v78 : string = "leptos::prelude::Fragment::new($0)"
                let v79 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v77 v78 
                let v80 : string = "leptos::prelude::AnyView::from($0)"
                let v81 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v79 v80 
                let v82 : string = "circle"
                let v83 : string = "<" + v82 + " " + v76 + ">move || { v81 }</" + v82 + ">"
                let v84 : string = "leptos::prelude::view! { " + v83 + " }"
                let v85 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v84 
                let v86 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v85 |> unbox
                let v87 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v88 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v86 v87 
                let v89 : string = "stroke-linecap=\"round\""
                let v90 : string = "stroke-linejoin=\"round\""
                let v91 : string = "d=\"M9 12l2 2l4 -4\""
                let v92 : string = " " + v89 + v13 + ""
                let v93 : string = " " + v90 + v92 + ""
                let v94 : string = " " + v91 + v93 + ""
                let v95 : Vec<leptos_prelude_AnyView_> = method172()
                let v96 : string = "leptos::prelude::Fragment::new($0)"
                let v97 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v95 v96 
                let v98 : string = "leptos::prelude::AnyView::from($0)"
                let v99 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v97 v98 
                let v100 : string = "path"
                let v101 : string = "<" + v100 + " " + v94 + ">move || { v99 }</" + v100 + ">"
                let v102 : string = "leptos::prelude::view! { " + v101 + " }"
                let v103 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v102 
                let v104 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v103 |> unbox
                let v105 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v106 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v104 v105 
                let v107 : Vec<leptos_prelude_AnyView_> = method176(v88, v106)
                let v108 : string = "leptos::prelude::Fragment::new($0)"
                let v109 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v107 v108 
                let v110 : string = "leptos::prelude::AnyView::from($0)"
                let v111 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v109 v110 
                let v112 : string = "svg"
                let v113 : string = "<" + v112 + " " + v66 + ">move || { v111 }</" + v112 + ">"
                let v114 : string = "leptos::prelude::view! { " + v113 + " }"
                let v115 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v114 
                let v116 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v115 |> unbox
                let v117 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v118 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v116 v117 
                v118
            else
                let v119 : Vec<leptos_prelude_AnyView_> = method172()
                let v120 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v121 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v119 v120 
                v121
        | _ ->
            let v123 : Vec<leptos_prelude_AnyView_> = method172()
            let v124 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v125 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v123 v124 
            v125
    let v127 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v128 : string = "&*$0"
    let v129 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18 v128 
    let _v127 = v129 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v130 : string = "&*$0"
    let v131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18 v130 
    let _v127 = v131 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v132 : string = "&*$0"
    let v133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v18 v132 
    let _v127 = v133 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v134 : Ref<Str> = v18 |> unbox<Ref<Str>>
    let _v127 = v134 
    #endif
#if FABLE_COMPILER_PYTHON
    let v137 : Ref<Str> = v18 |> unbox<Ref<Str>>
    let _v127 = v137 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v140 : Ref<Str> = v18 |> unbox<Ref<Str>>
    let _v127 = v140 
    #endif
#else
    let v143 : Ref<Str> = v18 |> unbox<Ref<Str>>
    let _v127 = v143 
    #endif
    let v146 : Ref<Str> = _v127 
    let v151 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v152 : string = "String::from($0)"
    let v153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v146 v152 
    let _v151 = v153 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v154 : string = "String::from($0)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v146 v154 
    let _v151 = v155 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v156 : string = "String::from($0)"
    let v157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v146 v156 
    let _v151 = v157 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v158 : std_string_String = v146 |> unbox<std_string_String>
    let _v151 = v158 
    #endif
#if FABLE_COMPILER_PYTHON
    let v161 : std_string_String = v146 |> unbox<std_string_String>
    let _v151 = v161 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v164 : std_string_String = v146 |> unbox<std_string_String>
    let _v151 = v164 
    #endif
#else
    let v167 : std_string_String = v146 |> unbox<std_string_String>
    let _v151 = v167 
    #endif
    let v170 : std_string_String = _v151 
    let v175 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v176 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v170 v175 
    let v177 : Vec<leptos_prelude_AnyView_> = method176(v126, v176)
    let v178 : string = "leptos::prelude::Fragment::new($0)"
    let v179 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v177 v178 
    let v180 : string = "leptos::prelude::AnyView::from($0)"
    let v181 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v179 v180 
    let v182 : string = "button"
    let v183 : string = "<" + v182 + " " + v16 + ">move || { v181 }</" + v182 + ">"
    let v184 : string = "leptos::prelude::view! { " + v183 + " }"
    let v185 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v184 
    let v186 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v185 |> unbox
    let v187 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v188 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v186 v187 
    let v189 : Vec<leptos_prelude_AnyView_> = method173(v188)
    let v190 : string = "leptos::prelude::Fragment::new($0)"
    let v191 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v189 v190 
    v191
and method182 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> leptos_dom_Fragment) =
    closure182(v0, v1, v2)
and closure179 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : leptos_dom_Fragment =
    let v3 : string = "class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\""
    let v4 : string = ""
    let v5 : string = " " + v3 + v4 + ""
    let v6 : (leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US67) = method179()
    let v7 : US67 option = v0 |> Option.map v6 
    let v18 : US67 = US67_1
    let v19 : US67 = v7 |> Option.defaultValue v18 
    let v29 : US68 =
        match v19 with
        | US67_1 -> (* None *)
            US68_1
        | US67_0(v23) -> (* Some *)
            let v24 : string = $"$0()"
            let v25 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr v23 v24 
            US68_0(v25)
    let v30 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) []) = [||]
    let v31 : string = "$0.to_vec()"
    let v32 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v35 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> =
        match v29 with
        | US68_1 -> (* None *)
            v32
        | US68_0(v33) -> (* Some *)
            v33
    let v36 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v37 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) []) = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : uint64 = System.Convert.ToUInt64 v37.Length
    let v39 : bool = v38 = 0UL
    let v221 : leptos_dom_Fragment =
        if v39 then
            let v40 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v41 : string = " " + v40 + v4 + ""
            let v42 : string = "class=\"[height:17px]\""
            let v43 : string = " " + v42 + v4 + ""
            let v44 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v45 : string = "fill=\"none\""
            let v46 : string = "height=\"100%\""
            let v47 : string = "viewBox=\"0 0 24 24\""
            let v48 : string = "stroke-width=\"1.5\""
            let v49 : string = "stroke=\"currentColor\""
            let v50 : string = "class=\"text-red-700\""
            let v51 : string = " " + v44 + v4 + ""
            let v52 : string = " " + v45 + v51 + ""
            let v53 : string = " " + v46 + v52 + ""
            let v54 : string = " " + v47 + v53 + ""
            let v55 : string = " " + v48 + v54 + ""
            let v56 : string = " " + v49 + v55 + ""
            let v57 : string = " " + v50 + v56 + ""
            let v58 : string = "stroke-linecap=\"round\""
            let v59 : string = "stroke-linejoin=\"round\""
            let v60 : string = "d=\"M6 18L18 6M6 6l12 12\""
            let v61 : string = " " + v58 + v4 + ""
            let v62 : string = " " + v59 + v61 + ""
            let v63 : string = " " + v60 + v62 + ""
            let v64 : Vec<leptos_prelude_AnyView_> = method172()
            let v65 : string = "leptos::prelude::Fragment::new($0)"
            let v66 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v64 v65 
            let v67 : string = "leptos::prelude::AnyView::from($0)"
            let v68 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v66 v67 
            let v69 : string = "path"
            let v70 : string = "<" + v69 + " " + v63 + ">move || { v68 }</" + v69 + ">"
            let v71 : string = "leptos::prelude::view! { " + v70 + " }"
            let v72 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v71 
            let v73 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v72 |> unbox
            let v74 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v75 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : Vec<leptos_prelude_AnyView_> = method173(v75)
            let v77 : string = "leptos::prelude::Fragment::new($0)"
            let v78 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v76 v77 
            let v79 : string = "leptos::prelude::AnyView::from($0)"
            let v80 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v78 v79 
            let v81 : string = "svg"
            let v82 : string = "<" + v81 + " " + v57 + ">move || { v80 }</" + v81 + ">"
            let v83 : string = "leptos::prelude::view! { " + v82 + " }"
            let v84 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v83 
            let v85 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v84 |> unbox
            let v86 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v87 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v85 v86 
            let v88 : Vec<leptos_prelude_AnyView_> = method173(v87)
            let v89 : string = "leptos::prelude::Fragment::new($0)"
            let v90 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v88 v89 
            let v91 : string = "leptos::prelude::AnyView::from($0)"
            let v92 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : string = "span"
            let v94 : string = "<" + v93 + " " + v43 + ">move || { v92 }</" + v93 + ">"
            let v95 : string = "leptos::prelude::view! { " + v94 + " }"
            let v96 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v95 
            let v97 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v96 |> unbox
            let v98 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v99 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v97 v98 
            let v100 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
            let v101 : string = " " + v100 + v4 + ""
            let v102 : string = "No data"
            let v103 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v104 : string = "&*$0"
            let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v104 
            let _v103 = v105 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v106 : string = "&*$0"
            let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v106 
            let _v103 = v107 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v108 : string = "&*$0"
            let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v108 
            let _v103 = v109 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v110 : Ref<Str> = v102 |> unbox<Ref<Str>>
            let _v103 = v110 
            #endif
#if FABLE_COMPILER_PYTHON
            let v113 : Ref<Str> = v102 |> unbox<Ref<Str>>
            let _v103 = v113 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v116 : Ref<Str> = v102 |> unbox<Ref<Str>>
            let _v103 = v116 
            #endif
#else
            let v119 : Ref<Str> = v102 |> unbox<Ref<Str>>
            let _v103 = v119 
            #endif
            let v122 : Ref<Str> = _v103 
            let v127 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v128 : string = "String::from($0)"
            let v129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v128 
            let _v127 = v129 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v130 : string = "String::from($0)"
            let v131 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v130 
            let _v127 = v131 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v132 : string = "String::from($0)"
            let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v132 
            let _v127 = v133 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v134 : std_string_String = v122 |> unbox<std_string_String>
            let _v127 = v134 
            #endif
#if FABLE_COMPILER_PYTHON
            let v137 : std_string_String = v122 |> unbox<std_string_String>
            let _v127 = v137 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v140 : std_string_String = v122 |> unbox<std_string_String>
            let _v127 = v140 
            #endif
#else
            let v143 : std_string_String = v122 |> unbox<std_string_String>
            let _v127 = v143 
            #endif
            let v146 : std_string_String = _v127 
            let v151 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v152 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v146 v151 
            let v153 : Vec<leptos_prelude_AnyView_> = method173(v152)
            let v154 : string = "leptos::prelude::Fragment::new($0)"
            let v155 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v153 v154 
            let v156 : string = "leptos::prelude::AnyView::from($0)"
            let v157 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v155 v156 
            let v158 : string = "pre"
            let v159 : string = "<" + v158 + " " + v101 + ">move || { v157 }</" + v158 + ">"
            let v160 : string = "leptos::prelude::view! { " + v159 + " }"
            let v161 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v160 
            let v162 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v161 |> unbox
            let v163 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v164 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v162 v163 
            let v165 : Vec<leptos_prelude_AnyView_> = method176(v99, v164)
            let v166 : string = "leptos::prelude::Fragment::new($0)"
            let v167 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v165 v166 
            let v168 : string = "leptos::prelude::AnyView::from($0)"
            let v169 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v167 v168 
            let v170 : string = "div"
            let v171 : string = "<" + v170 + " " + v41 + ">move || { v169 }</" + v170 + ">"
            let v172 : string = "leptos::prelude::view! { " + v171 + " }"
            let v173 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v172 
            let v174 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v173 |> unbox
            let v175 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v176 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v174 v175 
            let v177 : Vec<leptos_prelude_AnyView_> = method173(v176)
            let v178 : string = "leptos::prelude::Fragment::new($0)"
            let v179 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v177 v178 
            v179
        else
            let v180 : (leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US67) = method179()
            let v181 : US67 option = v0 |> Option.map v180 
            let v192 : US67 = US67_1
            let v193 : US67 = v181 |> Option.defaultValue v192 
            match v193 with
            | US67_1 -> (* None *)
                let v216 : Vec<leptos_prelude_AnyView_> = method172()
                let v217 : string = "leptos::prelude::Fragment::new($0)"
                let v218 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v216 v217 
                v218
            | US67_0(v197) -> (* Some *)
                let v198 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> = method180(v197)
                let v199 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> int32) = method181()
                let v200 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> leptos_dom_Fragment) = method182(v0, v1, v2)
                let v201 : string = "each=v198"
                let v202 : string = "key=move |x| v199(x.to_owned())"
                let v203 : string = "let:x"
                let v204 : string = "children=move |x| v200(x)"
                let v205 : string = " " + v201 + v4 + ""
                let v206 : string = " " + v202 + v205 + ""
                let v207 : string = " " + v203 + v206 + ""
                let v208 : string = " " + v204 + v207 + ""
                let v209 : string = "leptos::prelude::For"
                let v210 : string = "<" + v209 + " " + v208 + " />"
                let v211 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { " + v210 + " })"
                let v212 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v211 
                let v213 : Vec<leptos_prelude_AnyView_> = method173(v212)
                let v214 : string = "leptos::prelude::Fragment::new($0)"
                let v215 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v213 v214 
                v215
    let v222 : string = "leptos::prelude::AnyView::from($0)"
    let v223 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v221 v222 
    let v224 : string = "div"
    let v225 : string = "<" + v224 + " " + v5 + ">move || { v223 }</" + v224 + ">"
    let v226 : string = "leptos::prelude::view! { " + v225 + " }"
    let v227 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v226 
    let v228 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v227 |> unbox
    let v229 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v230 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v228 v229 
    let v231 : Vec<leptos_prelude_AnyView_> = method173(v230)
    let v232 : string = "leptos::prelude::Fragment::new($0)"
    let v233 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v231 v232 
    v233
and method184 (v0 : Func0<leptos_dom_Fragment>) : Func0<leptos_dom_Fragment> =
    v0
and closure185 () () : string =
    let v0 : string = ""
    v0
and closure186 (v0 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>) () : bool =
    let v1 : string = "leptos::prelude::Action::pending(&$0)"
    let v2 : leptos_prelude_Memo<bool> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"$0()"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    v4
and method185 (v0 : Func0<bool>) : Func0<bool> =
    v0
and closure187 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>) () : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<Heap0> = v4.l3
    let v6 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v7 : Heap0 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : int32 = v7.l2
    let v9 : Heap6 = {l0 = v8} : Heap6
    let v10 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v10 
    ()
and closure188 () () : string =
    let v0 : string = "[width:15px] [height:14px]"
    v0
and method186 (v0 : leptos_prelude_AnyView_, v1 : leptos_prelude_AnyView_, v2 : leptos_prelude_AnyView_) : Vec<leptos_prelude_AnyView_> =
    let v3 : leptos_prelude_AnyView_ = method174(v2)
    let v4 : string = "v3"
    let v5 : string = ""
    let v6 : string = v4 + v5 
    let v7 : string = v6 + v5 
    let v8 : leptos_prelude_AnyView_ = method174(v1)
    let v9 : string = "v8"
    let v10 : string = ", "
    let v11 : string = v9 + v10 
    let v12 : string = v11 + v7 
    let v13 : leptos_prelude_AnyView_ = method174(v0)
    let v14 : string = "v13"
    let v15 : string = v14 + v10 
    let v16 : string = v15 + v12 
    let v17 : string = "vec![" + v16 + "]"
    let v18 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v17 
    v18
and closure172 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>, v2 : leptos_prelude_Memo<string option>, v3 : leptos_prelude_Memo<US32>, v4 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) () : leptos_dom_Fragment =
    let v5 : string = "class=\"flex flex-col p-[10px] gap-[11px]\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : string = "class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\""
    let v9 : string = " " + v8 + v6 + ""
    let v10 : string = "Account"
    let v11 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10 v12 
    let _v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10 v14 
    let _v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10 v16 
    let _v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v10 |> unbox<Ref<Str>>
    let _v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : Ref<Str> = v10 |> unbox<Ref<Str>>
    let _v11 = v21 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v10 |> unbox<Ref<Str>>
    let _v11 = v24 
    #endif
#else
    let v27 : Ref<Str> = v10 |> unbox<Ref<Str>>
    let _v11 = v27 
    #endif
    let v30 : Ref<Str> = _v11 
    let v35 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v36 : string = "String::from($0)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v36 
    let _v35 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "String::from($0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v38 
    let _v35 = v39 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v40 
    let _v35 = v41 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : std_string_String = v30 |> unbox<std_string_String>
    let _v35 = v42 
    #endif
#if FABLE_COMPILER_PYTHON
    let v45 : std_string_String = v30 |> unbox<std_string_String>
    let _v35 = v45 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v30 |> unbox<std_string_String>
    let _v35 = v48 
    #endif
#else
    let v51 : std_string_String = v30 |> unbox<std_string_String>
    let _v35 = v51 
    #endif
    let v54 : std_string_String = _v35 
    let v59 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v60 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v54 v59 
    let v61 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option = None
    let v62 : leptos_prelude_Memo<US32> option = None
    let v63 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option = Some v4 
    let v66 : leptos_prelude_Memo<US32> option = Some v3 
    let v69 : Vec<leptos_prelude_AnyView_> = method172()
    let v70 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v71 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let v72 : string = "class=\"flex flex-col [position:relative]\""
    let v73 : string = " " + v72 + v6 + ""
    let v74 : string = "$0"
    let v75 : (unit -> string) = closure173()
    let v76 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v75 v74 
    let v77 : string = "$0"
    let v78 : (unit -> bool) = closure174()
    let v79 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v78 v77 
    let v80 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v81 : string = " " + v80 + v6 + ""
    let v82 : Vec<leptos_prelude_AnyView_> = method173(v71)
    let v83 : string = "leptos::prelude::Fragment::new($0)"
    let v84 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "leptos::prelude::AnyView::from($0)"
    let v86 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : string = "div"
    let v88 : string = "<" + v87 + " " + v81 + ">move || { v86 }</" + v87 + ">"
    let v89 : string = "leptos::prelude::view! { " + v88 + " }"
    let v90 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v90 |> unbox
    let v92 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v93 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v76(())"
    let v95 : string = "open=move || v79(())"
    let v96 : string = " " + v94 + v6 + ""
    let v97 : string = " " + v95 + v96 + ""
    let v98 : string = "$0"
    let v99 : (unit -> string) = closure175()
    let v100 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v99 v98 
    let v101 : string = "$0"
    let v102 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure176(v63, v66, v0)
    let v103 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v102 v101 
    let v104 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v103(()) + \" \" + &v100(())"
    let v105 : string = " " + v104 + v6 + ""
    let v106 : string = "class=\"flex items-center gap-2\""
    let v107 : string = " " + v106 + v6 + ""
    let v108 : (unit -> string) = method177(v63, v66, v0)
    let v109 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v110 : string = " " + v109 + v6 + ""
    let v111 : string = v108 ()
    let v112 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v113 : string = "&*$0"
    let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v111 v113 
    let _v112 = v114 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : string = "&*$0"
    let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v111 v115 
    let _v112 = v116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v117 : string = "&*$0"
    let v118 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let _v112 = v118 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v119 : Ref<Str> = v111 |> unbox<Ref<Str>>
    let _v112 = v119 
    #endif
#if FABLE_COMPILER_PYTHON
    let v122 : Ref<Str> = v111 |> unbox<Ref<Str>>
    let _v112 = v122 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v125 : Ref<Str> = v111 |> unbox<Ref<Str>>
    let _v112 = v125 
    #endif
#else
    let v128 : Ref<Str> = v111 |> unbox<Ref<Str>>
    let _v112 = v128 
    #endif
    let v131 : Ref<Str> = _v112 
    let v136 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v137 : string = "String::from($0)"
    let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v131 v137 
    let _v136 = v138 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v139 : string = "String::from($0)"
    let v140 : std_string_String = Fable.Core.RustInterop.emitRustExpr v131 v139 
    let _v136 = v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : string = "String::from($0)"
    let v142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v131 v141 
    let _v136 = v142 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : std_string_String = v131 |> unbox<std_string_String>
    let _v136 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : std_string_String = v131 |> unbox<std_string_String>
    let _v136 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v149 : std_string_String = v131 |> unbox<std_string_String>
    let _v136 = v149 
    #endif
#else
    let v152 : std_string_String = v131 |> unbox<std_string_String>
    let _v136 = v152 
    #endif
    let v155 : std_string_String = _v136 
    let v160 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v161 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v155 v160 
    let v162 : Vec<leptos_prelude_AnyView_> = method173(v161)
    let v163 : string = "leptos::prelude::Fragment::new($0)"
    let v164 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v162 v163 
    let v165 : string = "leptos::prelude::AnyView::from($0)"
    let v166 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v164 v165 
    let v167 : string = "span"
    let v168 : string = "<" + v167 + " " + v110 + ">move || { v166 }</" + v167 + ">"
    let v169 : string = "leptos::prelude::view! { " + v168 + " }"
    let v170 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v169 
    let v171 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v170 |> unbox
    let v172 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v173 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v171 v172 
    let v174 : Vec<leptos_prelude_AnyView_> = method173(v173)
    let v175 : string = "leptos::prelude::Fragment::new($0)"
    let v176 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v174 v175 
    let v177 : string = "leptos::prelude::AnyView::from($0)"
    let v178 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v176 v177 
    let v179 : string = "<" + v87 + " " + v107 + ">move || { v178 }</" + v87 + ">"
    let v180 : string = "leptos::prelude::view! { " + v179 + " }"
    let v181 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v180 
    let v182 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v181 |> unbox
    let v183 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v184 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v182 v183 
    let v185 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v186 : string = " " + v185 + v6 + ""
    let v187 : string = "$0"
    let v188 : (unit -> string) = closure171()
    let v189 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v188 v187 
    let v190 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v191 : string = "viewBox=\"0 0 20 20\""
    let v192 : string = "fill=\"currentColor\""
    let v193 : string = "class=move || \" \".to_owned() + &v189(())"
    let v194 : string = " " + v190 + v6 + ""
    let v195 : string = " " + v191 + v194 + ""
    let v196 : string = " " + v192 + v195 + ""
    let v197 : string = " " + v193 + v196 + ""
    let v198 : string = "fill-rule=\"evenodd\""
    let v199 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
    let v200 : string = "clip-rule=\"evenodd\""
    let v201 : string = " " + v198 + v6 + ""
    let v202 : string = " " + v199 + v201 + ""
    let v203 : string = " " + v200 + v202 + ""
    let v204 : Vec<leptos_prelude_AnyView_> = method172()
    let v205 : string = "leptos::prelude::Fragment::new($0)"
    let v206 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v204 v205 
    let v207 : string = "leptos::prelude::AnyView::from($0)"
    let v208 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v206 v207 
    let v209 : string = "path"
    let v210 : string = "<" + v209 + " " + v203 + ">move || { v208 }</" + v209 + ">"
    let v211 : string = "leptos::prelude::view! { " + v210 + " }"
    let v212 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v211 
    let v213 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v212 |> unbox
    let v214 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v215 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v213 v214 
    let v216 : Vec<leptos_prelude_AnyView_> = method173(v215)
    let v217 : string = "leptos::prelude::Fragment::new($0)"
    let v218 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v216 v217 
    let v219 : string = "leptos::prelude::AnyView::from($0)"
    let v220 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v218 v219 
    let v221 : string = "svg"
    let v222 : string = "<" + v221 + " " + v197 + ">move || { v220 }</" + v221 + ">"
    let v223 : string = "leptos::prelude::view! { " + v222 + " }"
    let v224 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v223 
    let v225 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v224 |> unbox
    let v226 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v227 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v225 v226 
    let v228 : Vec<leptos_prelude_AnyView_> = method173(v227)
    let v229 : string = "leptos::prelude::Fragment::new($0)"
    let v230 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v228 v229 
    let v231 : string = "leptos::prelude::AnyView::from($0)"
    let v232 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v230 v231 
    let v233 : string = "<" + v167 + " " + v186 + ">move || { v232 }</" + v167 + ">"
    let v234 : string = "leptos::prelude::view! { " + v233 + " }"
    let v235 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v235 |> unbox
    let v237 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v238 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v236 v237 
    let v239 : Vec<leptos_prelude_AnyView_> = method176(v184, v238)
    let v240 : string = "leptos::prelude::Fragment::new($0)"
    let v241 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v239 v240 
    let v242 : string = "leptos::prelude::AnyView::from($0)"
    let v243 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v241 v242 
    let v244 : string = "summary"
    let v245 : string = "<" + v244 + " " + v105 + ">move || { v243 }</" + v244 + ">"
    let v246 : string = "leptos::prelude::view! { " + v245 + " }"
    let v247 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v246 
    let v248 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v247 |> unbox
    let v249 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v250 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v248 v249 
    let v251 : string = "class=\"flex flex-1 flex-col\""
    let v252 : string = " " + v251 + v6 + ""
    let v253 : string = "Func0::new(move || $0())"
    let v254 : (unit -> leptos_dom_Fragment) = closure179(v63, v66, v0)
    let v255 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v254 v253 
    let v256 : Func0<leptos_dom_Fragment> = method184(v255)
    let v257 : string = "(move || v256())()"
    let v258 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v257 
    let v259 : string = "leptos::prelude::AnyView::from($0)"
    let v260 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v258 v259 
    let v261 : string = "<" + v87 + " " + v252 + ">move || { v260 }</" + v87 + ">"
    let v262 : string = "leptos::prelude::view! { " + v261 + " }"
    let v263 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v262 
    let v264 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v263 |> unbox
    let v265 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v266 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v264 v265 
    let v267 : Vec<leptos_prelude_AnyView_> = method176(v250, v266)
    let v268 : string = "leptos::prelude::Fragment::new($0)"
    let v269 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v267 v268 
    let v270 : string = "leptos::prelude::AnyView::from($0)"
    let v271 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v269 v270 
    let v272 : string = "details"
    let v273 : string = "<" + v272 + " " + v97 + ">move || { v271 }</" + v272 + ">"
    let v274 : string = "leptos::prelude::view! { " + v273 + " }"
    let v275 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v274 
    let v276 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v275 |> unbox
    let v277 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v278 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v276 v277 
    let v279 : Vec<leptos_prelude_AnyView_> = method176(v93, v278)
    let v280 : string = "leptos::prelude::Fragment::new($0)"
    let v281 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v279 v280 
    let v282 : string = "leptos::prelude::AnyView::from($0)"
    let v283 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v281 v282 
    let v284 : string = "<" + v87 + " " + v73 + ">move || { v283 }</" + v87 + ">"
    let v285 : string = "leptos::prelude::view! { " + v284 + " }"
    let v286 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v286 |> unbox
    let v288 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v289 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v287 v288 
    let v290 : Vec<leptos_prelude_AnyView_> = method176(v60, v289)
    let v291 : string = "leptos::prelude::Fragment::new($0)"
    let v292 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v290 v291 
    let v293 : string = "leptos::prelude::AnyView::from($0)"
    let v294 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v292 v293 
    let v295 : string = "<" + v87 + " " + v9 + ">move || { v294 }</" + v87 + ">"
    let v296 : string = "leptos::prelude::view! { " + v295 + " }"
    let v297 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v296 
    let v298 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v297 |> unbox
    let v299 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v300 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v298 v299 
    let v301 : string = "class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\""
    let v302 : string = " " + v301 + v6 + ""
    let v303 : string = "Max"
    let v304 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v305 : string = "&*$0"
    let v306 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v303 v305 
    let _v304 = v306 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v307 : string = "&*$0"
    let v308 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v303 v307 
    let _v304 = v308 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v309 : string = "&*$0"
    let v310 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v303 v309 
    let _v304 = v310 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v311 : Ref<Str> = v303 |> unbox<Ref<Str>>
    let _v304 = v311 
    #endif
#if FABLE_COMPILER_PYTHON
    let v314 : Ref<Str> = v303 |> unbox<Ref<Str>>
    let _v304 = v314 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v317 : Ref<Str> = v303 |> unbox<Ref<Str>>
    let _v304 = v317 
    #endif
#else
    let v320 : Ref<Str> = v303 |> unbox<Ref<Str>>
    let _v304 = v320 
    #endif
    let v323 : Ref<Str> = _v304 
    let v328 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v329 : string = "String::from($0)"
    let v330 : std_string_String = Fable.Core.RustInterop.emitRustExpr v323 v329 
    let _v328 = v330 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v331 : string = "String::from($0)"
    let v332 : std_string_String = Fable.Core.RustInterop.emitRustExpr v323 v331 
    let _v328 = v332 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v333 : string = "String::from($0)"
    let v334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v323 v333 
    let _v328 = v334 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v335 : std_string_String = v323 |> unbox<std_string_String>
    let _v328 = v335 
    #endif
#if FABLE_COMPILER_PYTHON
    let v338 : std_string_String = v323 |> unbox<std_string_String>
    let _v328 = v338 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v341 : std_string_String = v323 |> unbox<std_string_String>
    let _v328 = v341 
    #endif
#else
    let v344 : std_string_String = v323 |> unbox<std_string_String>
    let _v328 = v344 
    #endif
    let v347 : std_string_String = _v328 
    let v352 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v353 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v347 v352 
    let v354 : string = $"true; let getter = Func0::from(move || {{ //"
    let v355 : bool = Fable.Core.RustInterop.emitRustExpr () v354 
    let v356 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v357 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v358 : Heap1 = Fable.Core.RustInterop.emitRustExpr v356 v357 
    let v359 : leptos_prelude_RwSignal<Heap0> = v358.l3
    let v360 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v361 : Heap0 = Fable.Core.RustInterop.emitRustExpr v359 v360 
    let v362 : int32 = v361.l2
    let v363 : string = $"true; $0 /*"
    let v364 : bool = Fable.Core.RustInterop.emitRustExpr v362 v363 
    let v365 : string = $"*/ }}); //"
    let v366 : bool = Fable.Core.RustInterop.emitRustExpr () v365 
    let v367 : string = $"getter"
    let v368 : Func0<int32> = Fable.Core.RustInterop.emitRustExpr () v367 
    let v369 : string = $"true; let setter = Func1::from(move |value| {{ //"
    let v370 : bool = Fable.Core.RustInterop.emitRustExpr () v369 
    let v371 : string = $"value"
    let v372 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v371 
    let v373 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v374 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v375 : Heap1 = Fable.Core.RustInterop.emitRustExpr v373 v374 
    let v376 : leptos_prelude_RwSignal<Heap0> = v375.l3
    let v377 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v378 : Heap0 = Fable.Core.RustInterop.emitRustExpr v376 v377 
    let v379 : Vec<(bool * std_string_String)> = v378.l0
    let v380 : std_string_String option = v378.l1
    let v381 : int32 = v378.l2
    let v382 : int32 = v378.l3
    let v383 : US1 = v378.l4
    let v384 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v385 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v386 : Heap1 = Fable.Core.RustInterop.emitRustExpr v384 v385 
    let v387 : leptos_prelude_RwSignal<Heap0> = v386.l3
    let v388 : (std_string_String -> string) = _.ToString()
    let v389 : string = v388 v372
    let v392 : bool = "" = v389
    let v400 : int32 =
        if v392 then
            1
        else
            let v393 : int32 = v389 |> int32 
            v393
    let v401 : Heap0 = {l0 = v379; l1 = v380; l2 = v400; l3 = v382; l4 = v383} : Heap0
    let v402 : string = $"true; leptos::prelude::RwSignal::set(&$0, $1);"
    let v403 : bool = Fable.Core.RustInterop.emitRustExpr struct (v387, v401) v402 
    let v404 : string = $"true; $0 /*"
    let v405 : bool = Fable.Core.RustInterop.emitRustExpr () v404 
    let v406 : string = $"*/ }}); //"
    let v407 : bool = Fable.Core.RustInterop.emitRustExpr () v406 
    let v408 : string = $"setter"
    let v409 : Func0<std_string_String, unit> = Fable.Core.RustInterop.emitRustExpr () v408 
    let v410 : string = "$0"
    let v411 : (unit -> string) = closure185()
    let v412 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v411 v410 
    let v413 : string = "class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v412(())"
    let v414 : string = "prop:value=move || v368()"
    let v415 : string = "on:keyup=move |event: web_sys::KeyboardEvent| v409(leptos::prelude::event_target_value(&event))"
    let v416 : string = " " + v413 + v6 + ""
    let v417 : string = " " + v414 + v416 + ""
    let v418 : string = " " + v415 + v417 + ""
    let v419 : string = "input"
    let v420 : string = "<" + v419 + " " + v418 + " />"
    let v421 : string = "leptos::prelude::view! { " + v420 + " }"
    let v422 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v421 
    let v423 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v422 |> unbox
    let v424 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v425 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v423 v424 
    let v426 : Vec<leptos_prelude_AnyView_> = method176(v353, v425)
    let v427 : string = "leptos::prelude::Fragment::new($0)"
    let v428 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v426 v427 
    let v429 : string = "leptos::prelude::AnyView::from($0)"
    let v430 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v428 v429 
    let v431 : string = "<" + v87 + " " + v302 + ">move || { v430 }</" + v87 + ">"
    let v432 : string = "leptos::prelude::view! { " + v431 + " }"
    let v433 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v432 
    let v434 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v433 |> unbox
    let v435 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v436 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v434 v435 
    let v437 : string = "class=\"flex\""
    let v438 : string = " " + v437 + v6 + ""
    let v439 : string = "Func0::new(move || $0())"
    let v440 : (unit -> bool) = closure186(v1)
    let v441 : Func0<bool> = Fable.Core.RustInterop.emitRustExpr v440 v439 
    let v442 : Func0<bool> = method185(v441)
    let v443 : (unit -> unit) = closure187(v0, v1)
    let v444 : string = "let v443 = $0"
    Fable.Core.RustInterop.emitRustExpr v443 v444 
    let v445 : string = "class=\"flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\""
    let v446 : string = "prop:disabled=move || v442()"
    let v447 : string = "on:click=move |_| v443()"
    let v448 : string = " " + v445 + v6 + ""
    let v449 : string = " " + v446 + v448 + ""
    let v450 : string = " " + v447 + v449 + ""
    let v451 : string = "Roll"
    let v452 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v453 : string = "&*$0"
    let v454 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v451 v453 
    let _v452 = v454 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v455 : string = "&*$0"
    let v456 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v451 v455 
    let _v452 = v456 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v457 : string = "&*$0"
    let v458 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v451 v457 
    let _v452 = v458 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v459 : Ref<Str> = v451 |> unbox<Ref<Str>>
    let _v452 = v459 
    #endif
#if FABLE_COMPILER_PYTHON
    let v462 : Ref<Str> = v451 |> unbox<Ref<Str>>
    let _v452 = v462 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v465 : Ref<Str> = v451 |> unbox<Ref<Str>>
    let _v452 = v465 
    #endif
#else
    let v468 : Ref<Str> = v451 |> unbox<Ref<Str>>
    let _v452 = v468 
    #endif
    let v471 : Ref<Str> = _v452 
    let v476 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v477 : string = "String::from($0)"
    let v478 : std_string_String = Fable.Core.RustInterop.emitRustExpr v471 v477 
    let _v476 = v478 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v479 : string = "String::from($0)"
    let v480 : std_string_String = Fable.Core.RustInterop.emitRustExpr v471 v479 
    let _v476 = v480 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v481 : string = "String::from($0)"
    let v482 : std_string_String = Fable.Core.RustInterop.emitRustExpr v471 v481 
    let _v476 = v482 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v483 : std_string_String = v471 |> unbox<std_string_String>
    let _v476 = v483 
    #endif
#if FABLE_COMPILER_PYTHON
    let v486 : std_string_String = v471 |> unbox<std_string_String>
    let _v476 = v486 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v489 : std_string_String = v471 |> unbox<std_string_String>
    let _v476 = v489 
    #endif
#else
    let v492 : std_string_String = v471 |> unbox<std_string_String>
    let _v476 = v492 
    #endif
    let v495 : std_string_String = _v476 
    let v500 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v501 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v495 v500 
    let v502 : string = "$0()"
    let v503 : bool = Fable.Core.RustInterop.emitRustExpr v441 v502 
    let v817 : leptos_prelude_AnyView_ =
        if v503 then
            let v504 : string = "$0"
            let v505 : (unit -> string) = closure188()
            let v506 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v505 v504 
            let v507 : string = "version=\"1.1\""
            let v508 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v509 : string = "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
            let v510 : string = "x=\"0px\""
            let v511 : string = "y=\"0px\""
            let v512 : string = "viewBox=\"0 0 24 30\""
            let v513 : string = "style=\"enable-background:new 0 0 50 50;\""
            let v514 : string = "xml:space=\"preserve\""
            let v515 : string = "class=move || \" \".to_owned() + &v506(())"
            let v516 : string = " " + v507 + v6 + ""
            let v517 : string = " " + v508 + v516 + ""
            let v518 : string = " " + v509 + v517 + ""
            let v519 : string = " " + v510 + v518 + ""
            let v520 : string = " " + v511 + v519 + ""
            let v521 : string = " " + v512 + v520 + ""
            let v522 : string = " " + v513 + v521 + ""
            let v523 : string = " " + v514 + v522 + ""
            let v524 : string = " " + v515 + v523 + ""
            let v525 : string = "x=\"0\""
            let v526 : string = "y=\"10\""
            let v527 : string = "width=\"4\""
            let v528 : string = "height=\"10\""
            let v529 : string = "fill=\"#333\""
            let v530 : string = "opacity=\"0.2\""
            let v531 : string = " " + v525 + v6 + ""
            let v532 : string = " " + v526 + v531 + ""
            let v533 : string = " " + v527 + v532 + ""
            let v534 : string = " " + v528 + v533 + ""
            let v535 : string = " " + v529 + v534 + ""
            let v536 : string = " " + v530 + v535 + ""
            let v537 : string = "attributeName=\"opacity\""
            let v538 : string = "attributeType=\"XML\""
            let v539 : string = "values=\"0.2; 1; .2\""
            let v540 : string = "begin=\"0s\""
            let v541 : string = "dur=\"0.6s\""
            let v542 : string = "repeatCount=\"indefinite\""
            let v543 : string = " " + v537 + v6 + ""
            let v544 : string = " " + v538 + v543 + ""
            let v545 : string = " " + v539 + v544 + ""
            let v546 : string = " " + v540 + v545 + ""
            let v547 : string = " " + v541 + v546 + ""
            let v548 : string = " " + v542 + v547 + ""
            let v549 : Vec<leptos_prelude_AnyView_> = method172()
            let v550 : string = "leptos::prelude::Fragment::new($0)"
            let v551 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v549 v550 
            let v552 : string = "leptos::prelude::AnyView::from($0)"
            let v553 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v551 v552 
            let v554 : string = "animate"
            let v555 : string = "<" + v554 + " " + v548 + ">move || { v553 }</" + v554 + ">"
            let v556 : string = "leptos::prelude::view! { " + v555 + " }"
            let v557 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v556 
            let v558 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v557 |> unbox
            let v559 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v560 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v558 v559 
            let v561 : string = "attributeName=\"height\""
            let v562 : string = "attributeType=\"XML\""
            let v563 : string = "values=\"10; 20; 10\""
            let v564 : string = "begin=\"0s\""
            let v565 : string = "dur=\"0.6s\""
            let v566 : string = "repeatCount=\"indefinite\""
            let v567 : string = " " + v561 + v6 + ""
            let v568 : string = " " + v562 + v567 + ""
            let v569 : string = " " + v563 + v568 + ""
            let v570 : string = " " + v564 + v569 + ""
            let v571 : string = " " + v565 + v570 + ""
            let v572 : string = " " + v566 + v571 + ""
            let v573 : Vec<leptos_prelude_AnyView_> = method172()
            let v574 : string = "leptos::prelude::Fragment::new($0)"
            let v575 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v573 v574 
            let v576 : string = "leptos::prelude::AnyView::from($0)"
            let v577 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v575 v576 
            let v578 : string = "<" + v554 + " " + v572 + ">move || { v577 }</" + v554 + ">"
            let v579 : string = "leptos::prelude::view! { " + v578 + " }"
            let v580 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v579 
            let v581 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v580 |> unbox
            let v582 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v583 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v581 v582 
            let v584 : string = "attributeName=\"y\""
            let v585 : string = "attributeType=\"XML\""
            let v586 : string = "values=\"10; 5; 10\""
            let v587 : string = "begin=\"0s\""
            let v588 : string = "dur=\"0.6s\""
            let v589 : string = "repeatCount=\"indefinite\""
            let v590 : string = " " + v584 + v6 + ""
            let v591 : string = " " + v585 + v590 + ""
            let v592 : string = " " + v586 + v591 + ""
            let v593 : string = " " + v587 + v592 + ""
            let v594 : string = " " + v588 + v593 + ""
            let v595 : string = " " + v589 + v594 + ""
            let v596 : Vec<leptos_prelude_AnyView_> = method172()
            let v597 : string = "leptos::prelude::Fragment::new($0)"
            let v598 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v596 v597 
            let v599 : string = "leptos::prelude::AnyView::from($0)"
            let v600 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v598 v599 
            let v601 : string = "<" + v554 + " " + v595 + ">move || { v600 }</" + v554 + ">"
            let v602 : string = "leptos::prelude::view! { " + v601 + " }"
            let v603 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v602 
            let v604 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v603 |> unbox
            let v605 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v606 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v604 v605 
            let v607 : Vec<leptos_prelude_AnyView_> = method186(v560, v583, v606)
            let v608 : string = "leptos::prelude::Fragment::new($0)"
            let v609 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v607 v608 
            let v610 : string = "leptos::prelude::AnyView::from($0)"
            let v611 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v609 v610 
            let v612 : string = "rect"
            let v613 : string = "<" + v612 + " " + v536 + ">move || { v611 }</" + v612 + ">"
            let v614 : string = "leptos::prelude::view! { " + v613 + " }"
            let v615 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v614 
            let v616 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v615 |> unbox
            let v617 : string = "x=\"8\""
            let v618 : string = "y=\"10\""
            let v619 : string = "width=\"4\""
            let v620 : string = "height=\"10\""
            let v621 : string = "fill=\"#333\""
            let v622 : string = "opacity=\"0.2\""
            let v623 : string = " " + v617 + v6 + ""
            let v624 : string = " " + v618 + v623 + ""
            let v625 : string = " " + v619 + v624 + ""
            let v626 : string = " " + v620 + v625 + ""
            let v627 : string = " " + v621 + v626 + ""
            let v628 : string = " " + v622 + v627 + ""
            let v629 : string = "attributeName=\"opacity\""
            let v630 : string = "attributeType=\"XML\""
            let v631 : string = "values=\"0.2; 1; .2\""
            let v632 : string = "begin=\"0.15s\""
            let v633 : string = "dur=\"0.6s\""
            let v634 : string = "repeatCount=\"indefinite\""
            let v635 : string = " " + v629 + v6 + ""
            let v636 : string = " " + v630 + v635 + ""
            let v637 : string = " " + v631 + v636 + ""
            let v638 : string = " " + v632 + v637 + ""
            let v639 : string = " " + v633 + v638 + ""
            let v640 : string = " " + v634 + v639 + ""
            let v641 : Vec<leptos_prelude_AnyView_> = method172()
            let v642 : string = "leptos::prelude::Fragment::new($0)"
            let v643 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v641 v642 
            let v644 : string = "leptos::prelude::AnyView::from($0)"
            let v645 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v643 v644 
            let v646 : string = "<" + v554 + " " + v640 + ">move || { v645 }</" + v554 + ">"
            let v647 : string = "leptos::prelude::view! { " + v646 + " }"
            let v648 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v647 
            let v649 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v648 |> unbox
            let v650 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v651 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v649 v650 
            let v652 : string = "attributeName=\"opacity\""
            let v653 : string = "attributeType=\"XML\""
            let v654 : string = "values=\"10; 20; 10\""
            let v655 : string = "begin=\"0.15s\""
            let v656 : string = "dur=\"0.6s\""
            let v657 : string = "repeatCount=\"indefinite\""
            let v658 : string = " " + v652 + v6 + ""
            let v659 : string = " " + v653 + v658 + ""
            let v660 : string = " " + v654 + v659 + ""
            let v661 : string = " " + v655 + v660 + ""
            let v662 : string = " " + v656 + v661 + ""
            let v663 : string = " " + v657 + v662 + ""
            let v664 : Vec<leptos_prelude_AnyView_> = method172()
            let v665 : string = "leptos::prelude::Fragment::new($0)"
            let v666 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v664 v665 
            let v667 : string = "leptos::prelude::AnyView::from($0)"
            let v668 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v666 v667 
            let v669 : string = "<" + v554 + " " + v663 + ">move || { v668 }</" + v554 + ">"
            let v670 : string = "leptos::prelude::view! { " + v669 + " }"
            let v671 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v670 
            let v672 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v671 |> unbox
            let v673 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v674 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v672 v673 
            let v675 : string = "attributeName=\"y\""
            let v676 : string = "attributeType=\"XML\""
            let v677 : string = "values=\"10; 5; 10\""
            let v678 : string = "begin=\"0.15s\""
            let v679 : string = "dur=\"0.6s\""
            let v680 : string = "repeatCount=\"indefinite\""
            let v681 : string = " " + v675 + v6 + ""
            let v682 : string = " " + v676 + v681 + ""
            let v683 : string = " " + v677 + v682 + ""
            let v684 : string = " " + v678 + v683 + ""
            let v685 : string = " " + v679 + v684 + ""
            let v686 : string = " " + v680 + v685 + ""
            let v687 : Vec<leptos_prelude_AnyView_> = method172()
            let v688 : string = "leptos::prelude::Fragment::new($0)"
            let v689 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v687 v688 
            let v690 : string = "leptos::prelude::AnyView::from($0)"
            let v691 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v689 v690 
            let v692 : string = "<" + v554 + " " + v686 + ">move || { v691 }</" + v554 + ">"
            let v693 : string = "leptos::prelude::view! { " + v692 + " }"
            let v694 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v693 
            let v695 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v694 |> unbox
            let v696 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v697 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v695 v696 
            let v698 : Vec<leptos_prelude_AnyView_> = method186(v651, v674, v697)
            let v699 : string = "leptos::prelude::Fragment::new($0)"
            let v700 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v698 v699 
            let v701 : string = "leptos::prelude::AnyView::from($0)"
            let v702 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v700 v701 
            let v703 : string = "<" + v612 + " " + v628 + ">move || { v702 }</" + v612 + ">"
            let v704 : string = "leptos::prelude::view! { " + v703 + " }"
            let v705 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v704 
            let v706 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v705 |> unbox
            let v707 : string = "x=\"16\""
            let v708 : string = "y=\"10\""
            let v709 : string = "width=\"4\""
            let v710 : string = "height=\"10\""
            let v711 : string = "fill=\"#333\""
            let v712 : string = "opacity=\"0.2\""
            let v713 : string = " " + v707 + v6 + ""
            let v714 : string = " " + v708 + v713 + ""
            let v715 : string = " " + v709 + v714 + ""
            let v716 : string = " " + v710 + v715 + ""
            let v717 : string = " " + v711 + v716 + ""
            let v718 : string = " " + v712 + v717 + ""
            let v719 : string = "attributeName=\"opacity\""
            let v720 : string = "attributeType=\"XML\""
            let v721 : string = "values=\"0.2; 1; .2\""
            let v722 : string = "begin=\"0.3s\""
            let v723 : string = "dur=\"0.6s\""
            let v724 : string = "repeatCount=\"indefinite\""
            let v725 : string = " " + v719 + v6 + ""
            let v726 : string = " " + v720 + v725 + ""
            let v727 : string = " " + v721 + v726 + ""
            let v728 : string = " " + v722 + v727 + ""
            let v729 : string = " " + v723 + v728 + ""
            let v730 : string = " " + v724 + v729 + ""
            let v731 : Vec<leptos_prelude_AnyView_> = method172()
            let v732 : string = "leptos::prelude::Fragment::new($0)"
            let v733 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v731 v732 
            let v734 : string = "leptos::prelude::AnyView::from($0)"
            let v735 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v733 v734 
            let v736 : string = "<" + v554 + " " + v730 + ">move || { v735 }</" + v554 + ">"
            let v737 : string = "leptos::prelude::view! { " + v736 + " }"
            let v738 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v737 
            let v739 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v738 |> unbox
            let v740 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v741 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v739 v740 
            let v742 : string = "attributeName=\"height\""
            let v743 : string = "attributeType=\"XML\""
            let v744 : string = "values=\"10; 20; 10\""
            let v745 : string = "begin=\"0.3s\""
            let v746 : string = "dur=\"0.6s\""
            let v747 : string = "repeatCount=\"indefinite\""
            let v748 : string = " " + v742 + v6 + ""
            let v749 : string = " " + v743 + v748 + ""
            let v750 : string = " " + v744 + v749 + ""
            let v751 : string = " " + v745 + v750 + ""
            let v752 : string = " " + v746 + v751 + ""
            let v753 : string = " " + v747 + v752 + ""
            let v754 : Vec<leptos_prelude_AnyView_> = method172()
            let v755 : string = "leptos::prelude::Fragment::new($0)"
            let v756 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v754 v755 
            let v757 : string = "leptos::prelude::AnyView::from($0)"
            let v758 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v756 v757 
            let v759 : string = "<" + v554 + " " + v753 + ">move || { v758 }</" + v554 + ">"
            let v760 : string = "leptos::prelude::view! { " + v759 + " }"
            let v761 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v760 
            let v762 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v761 |> unbox
            let v763 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v764 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v762 v763 
            let v765 : string = "attributeName=\"y\""
            let v766 : string = "attributeType=\"XML\""
            let v767 : string = "values=\"10; 5; 10\""
            let v768 : string = "begin=\"0.3s\""
            let v769 : string = "dur=\"0.6s\""
            let v770 : string = "repeatCount=\"indefinite\""
            let v771 : string = " " + v765 + v6 + ""
            let v772 : string = " " + v766 + v771 + ""
            let v773 : string = " " + v767 + v772 + ""
            let v774 : string = " " + v768 + v773 + ""
            let v775 : string = " " + v769 + v774 + ""
            let v776 : string = " " + v770 + v775 + ""
            let v777 : Vec<leptos_prelude_AnyView_> = method172()
            let v778 : string = "leptos::prelude::Fragment::new($0)"
            let v779 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v777 v778 
            let v780 : string = "leptos::prelude::AnyView::from($0)"
            let v781 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v779 v780 
            let v782 : string = "<" + v554 + " " + v776 + ">move || { v781 }</" + v554 + ">"
            let v783 : string = "leptos::prelude::view! { " + v782 + " }"
            let v784 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v783 
            let v785 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v784 |> unbox
            let v786 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v787 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v785 v786 
            let v788 : Vec<leptos_prelude_AnyView_> = method186(v741, v764, v787)
            let v789 : string = "leptos::prelude::Fragment::new($0)"
            let v790 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v788 v789 
            let v791 : string = "leptos::prelude::AnyView::from($0)"
            let v792 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v790 v791 
            let v793 : string = "<" + v612 + " " + v718 + ">move || { v792 }</" + v612 + ">"
            let v794 : string = "leptos::prelude::view! { " + v793 + " }"
            let v795 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v794 
            let v796 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v795 |> unbox
            let v797 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v798 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v796 v797 
            let v799 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v800 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v706 v799 
            let v801 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v802 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v616 v801 
            let v803 : Vec<leptos_prelude_AnyView_> = method186(v802, v800, v798)
            let v804 : string = "leptos::prelude::Fragment::new($0)"
            let v805 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v803 v804 
            let v806 : string = "leptos::prelude::AnyView::from($0)"
            let v807 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v805 v806 
            let v808 : string = "<" + v221 + " " + v524 + ">move || { v807 }</" + v221 + ">"
            let v809 : string = "leptos::prelude::view! { " + v808 + " }"
            let v810 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v809 
            let v811 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v810 |> unbox
            let v812 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v813 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v811 v812 
            v813
        else
            let v814 : Vec<leptos_prelude_AnyView_> = method172()
            let v815 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v816 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v814 v815 
            v816
    let v818 : Vec<leptos_prelude_AnyView_> = method176(v501, v817)
    let v819 : string = "leptos::prelude::Fragment::new($0)"
    let v820 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v818 v819 
    let v821 : string = "leptos::prelude::AnyView::from($0)"
    let v822 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v820 v821 
    let v823 : string = "button"
    let v824 : string = "<" + v823 + " " + v450 + ">move || { v822 }</" + v823 + ">"
    let v825 : string = "leptos::prelude::view! { " + v824 + " }"
    let v826 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v825 
    let v827 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v826 |> unbox
    let v828 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v829 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v827 v828 
    let v830 : string = $"$0()"
    let v831 : string option = Fable.Core.RustInterop.emitRustExpr v2 v830 
    let v832 : (string -> US32) = method110()
    let v833 : US32 option = v831 |> Option.map v832 
    let v844 : US32 = US32_1
    let v845 : US32 = v833 |> Option.defaultValue v844 
    let v985 : leptos_prelude_AnyView_ =
        match v845 with
        | US32_0(v849) -> (* Some *)
            let v850 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v851 : string = " " + v850 + v6 + ""
            let v852 : string = "class=\"[height:17px]\""
            let v853 : string = " " + v852 + v6 + ""
            let v854 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v855 : string = "fill=\"none\""
            let v856 : string = "height=\"100%\""
            let v857 : string = "viewBox=\"0 0 24 24\""
            let v858 : string = "stroke-width=\"1.5\""
            let v859 : string = "stroke=\"currentColor\""
            let v860 : string = "class=\"text-red-700\""
            let v861 : string = " " + v854 + v6 + ""
            let v862 : string = " " + v855 + v861 + ""
            let v863 : string = " " + v856 + v862 + ""
            let v864 : string = " " + v857 + v863 + ""
            let v865 : string = " " + v858 + v864 + ""
            let v866 : string = " " + v859 + v865 + ""
            let v867 : string = " " + v860 + v866 + ""
            let v868 : string = "stroke-linecap=\"round\""
            let v869 : string = "stroke-linejoin=\"round\""
            let v870 : string = "d=\"M6 18L18 6M6 6l12 12\""
            let v871 : string = " " + v868 + v6 + ""
            let v872 : string = " " + v869 + v871 + ""
            let v873 : string = " " + v870 + v872 + ""
            let v874 : Vec<leptos_prelude_AnyView_> = method172()
            let v875 : string = "leptos::prelude::Fragment::new($0)"
            let v876 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v874 v875 
            let v877 : string = "leptos::prelude::AnyView::from($0)"
            let v878 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v876 v877 
            let v879 : string = "<" + v209 + " " + v873 + ">move || { v878 }</" + v209 + ">"
            let v880 : string = "leptos::prelude::view! { " + v879 + " }"
            let v881 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v880 
            let v882 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v881 |> unbox
            let v883 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v884 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v882 v883 
            let v885 : Vec<leptos_prelude_AnyView_> = method173(v884)
            let v886 : string = "leptos::prelude::Fragment::new($0)"
            let v887 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v885 v886 
            let v888 : string = "leptos::prelude::AnyView::from($0)"
            let v889 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v887 v888 
            let v890 : string = "<" + v221 + " " + v867 + ">move || { v889 }</" + v221 + ">"
            let v891 : string = "leptos::prelude::view! { " + v890 + " }"
            let v892 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v892 |> unbox
            let v894 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v895 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v893 v894 
            let v896 : Vec<leptos_prelude_AnyView_> = method173(v895)
            let v897 : string = "leptos::prelude::Fragment::new($0)"
            let v898 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v896 v897 
            let v899 : string = "leptos::prelude::AnyView::from($0)"
            let v900 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v898 v899 
            let v901 : string = "<" + v167 + " " + v853 + ">move || { v900 }</" + v167 + ">"
            let v902 : string = "leptos::prelude::view! { " + v901 + " }"
            let v903 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v902 
            let v904 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v903 |> unbox
            let v905 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v906 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v904 v905 
            let v907 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
            let v908 : string = " " + v907 + v6 + ""
            let v909 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v910 : string = "&*$0"
            let v911 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v849 v910 
            let _v909 = v911 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v912 : string = "&*$0"
            let v913 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v849 v912 
            let _v909 = v913 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v914 : string = "&*$0"
            let v915 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v849 v914 
            let _v909 = v915 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v916 : Ref<Str> = v849 |> unbox<Ref<Str>>
            let _v909 = v916 
            #endif
#if FABLE_COMPILER_PYTHON
            let v919 : Ref<Str> = v849 |> unbox<Ref<Str>>
            let _v909 = v919 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v922 : Ref<Str> = v849 |> unbox<Ref<Str>>
            let _v909 = v922 
            #endif
#else
            let v925 : Ref<Str> = v849 |> unbox<Ref<Str>>
            let _v909 = v925 
            #endif
            let v928 : Ref<Str> = _v909 
            let v933 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v934 : string = "String::from($0)"
            let v935 : std_string_String = Fable.Core.RustInterop.emitRustExpr v928 v934 
            let _v933 = v935 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v936 : string = "String::from($0)"
            let v937 : std_string_String = Fable.Core.RustInterop.emitRustExpr v928 v936 
            let _v933 = v937 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v938 : string = "String::from($0)"
            let v939 : std_string_String = Fable.Core.RustInterop.emitRustExpr v928 v938 
            let _v933 = v939 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v940 : std_string_String = v928 |> unbox<std_string_String>
            let _v933 = v940 
            #endif
#if FABLE_COMPILER_PYTHON
            let v943 : std_string_String = v928 |> unbox<std_string_String>
            let _v933 = v943 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v946 : std_string_String = v928 |> unbox<std_string_String>
            let _v933 = v946 
            #endif
#else
            let v949 : std_string_String = v928 |> unbox<std_string_String>
            let _v933 = v949 
            #endif
            let v952 : std_string_String = _v933 
            let v957 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v958 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v952 v957 
            let v959 : Vec<leptos_prelude_AnyView_> = method173(v958)
            let v960 : string = "leptos::prelude::Fragment::new($0)"
            let v961 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v959 v960 
            let v962 : string = "leptos::prelude::AnyView::from($0)"
            let v963 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v961 v962 
            let v964 : string = "pre"
            let v965 : string = "<" + v964 + " " + v908 + ">move || { v963 }</" + v964 + ">"
            let v966 : string = "leptos::prelude::view! { " + v965 + " }"
            let v967 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v966 
            let v968 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v967 |> unbox
            let v969 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v970 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v968 v969 
            let v971 : Vec<leptos_prelude_AnyView_> = method176(v906, v970)
            let v972 : string = "leptos::prelude::Fragment::new($0)"
            let v973 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v971 v972 
            let v974 : string = "leptos::prelude::AnyView::from($0)"
            let v975 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v973 v974 
            let v976 : string = "<" + v87 + " " + v851 + ">move || { v975 }</" + v87 + ">"
            let v977 : string = "leptos::prelude::view! { " + v976 + " }"
            let v978 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v977 
            let v979 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v978 |> unbox
            let v980 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v981 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v979 v980 
            v981
        | _ ->
            let v982 : Vec<leptos_prelude_AnyView_> = method172()
            let v983 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v984 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v982 v983 
            v984
    let v986 : Vec<leptos_prelude_AnyView_> = method176(v829, v985)
    let v987 : string = "leptos::prelude::Fragment::new($0)"
    let v988 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v986 v987 
    let v989 : string = "leptos::prelude::AnyView::from($0)"
    let v990 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v988 v989 
    let v991 : string = "<" + v87 + " " + v438 + ">move || { v990 }</" + v87 + ">"
    let v992 : string = "leptos::prelude::view! { " + v991 + " }"
    let v993 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v992 
    let v994 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v993 |> unbox
    let v995 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v996 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v994 v995 
    let v997 : Vec<leptos_prelude_AnyView_> = method186(v300, v436, v996)
    let v998 : string = "leptos::prelude::Fragment::new($0)"
    let v999 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v997 v998 
    let v1000 : string = "leptos::prelude::AnyView::from($0)"
    let v1001 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v999 v1000 
    let v1002 : string = "<" + v87 + " " + v7 + ">move || { v1001 }</" + v87 + ">"
    let v1003 : string = "leptos::prelude::view! { " + v1002 + " }"
    let v1004 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1003 
    let v1005 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1004 |> unbox
    let v1006 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v1007 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1005 v1006 
    let v1008 : Vec<leptos_prelude_AnyView_> = method173(v1007)
    let v1009 : string = "leptos::prelude::Fragment::new($0)"
    let v1010 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1008 v1009 
    v1010
and closure189 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure190 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure191 () () : string =
    let v0 : string = "History"
    v0
and method187 () : (unit -> string) =
    closure191()
and closure194 () struct (v0 : std_string_String, v1 : std_string_String option) : struct (string * US32) =
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : (std_string_String -> US15) = method46()
    let v5 : US15 option = v1 |> Option.map v4 
    let v16 : US15 = US15_1
    let v17 : US15 = v5 |> Option.defaultValue v16 
    let v27 : US32 =
        match v17 with
        | US15_1 -> (* None *)
            US32_1
        | US15_0(v21) -> (* Some *)
            let v22 : string = "fable_library_rust::String_::fromString($0)"
            let v23 : string = Fable.Core.RustInterop.emitRustExpr v21 v22 
            US32_0(v23)
    struct (v3, v27)
and closure195 () struct (v0 : string, v1 : US32) : bool =
    let v2 : bool = "FUNCTION_CALL" = v0
    if v2 then
        match v1 with
        | US32_0(v3) -> (* Some *)
            let v4 : bool = "generate_random_number" = v3
            v4
        | _ ->
            false
    else
        false
and method189 () : (struct (string * US32) -> bool) =
    closure195()
and method190 (v0 : Vec<struct (string * US32)>) : Vec<struct (string * US32)> =
    v0
and closure193 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : bool =
    let v3 : (struct (std_string_String * std_string_String option) []) = v2.l7
    let v4 : string = "$0.to_vec()"
    let v5 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v7 : (struct (std_string_String * std_string_String option) -> struct (string * US32)) = closure194()
    let v8 : Vec<struct (string * US32)> = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    let v9 : (struct (string * US32) -> bool) = method189()
    let v10 : Vec<struct (string * US32)> = method190(v8)
    let v11 : string = "v10.into_iter().filter(|x| v9(x.clone().clone())).collect::<Vec<_>>()"
    let v12 : Vec<struct (string * US32)> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v14 : (struct (string * US32) []) = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : int32 = v14.Length
    let v16 : bool = v15 > 0
    let v17 : std_string_String = v2.l2
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : bool = v0 = v19
    let v21 : bool = v16 && v20
    v21
and method188 () : (struct (string * unativeint * Heap5) -> bool) =
    closure193()
and method191 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and method192 (v0 : leptos_prelude_AnyView_, v1 : leptos_prelude_AnyView_, v2 : leptos_prelude_AnyView_, v3 : leptos_prelude_AnyView_, v4 : leptos_prelude_AnyView_, v5 : leptos_prelude_AnyView_) : Vec<leptos_prelude_AnyView_> =
    let v6 : leptos_prelude_AnyView_ = method174(v5)
    let v7 : string = "v6"
    let v8 : string = ""
    let v9 : string = v7 + v8 
    let v10 : string = v9 + v8 
    let v11 : leptos_prelude_AnyView_ = method174(v4)
    let v12 : string = "v11"
    let v13 : string = ", "
    let v14 : string = v12 + v13 
    let v15 : string = v14 + v10 
    let v16 : leptos_prelude_AnyView_ = method174(v3)
    let v17 : string = "v16"
    let v18 : string = v17 + v13 
    let v19 : string = v18 + v15 
    let v20 : leptos_prelude_AnyView_ = method174(v2)
    let v21 : string = "v20"
    let v22 : string = v21 + v13 
    let v23 : string = v22 + v19 
    let v24 : leptos_prelude_AnyView_ = method174(v1)
    let v25 : string = "v24"
    let v26 : string = v25 + v13 
    let v27 : string = v26 + v23 
    let v28 : leptos_prelude_AnyView_ = method174(v0)
    let v29 : string = "v28"
    let v30 : string = v29 + v13 
    let v31 : string = v30 + v27 
    let v32 : string = "vec![" + v31 + "]"
    let v33 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v32 
    v33
and method193 (v0 : int64) : int64 =
    v0
and closure196 () (v0 : chrono_DateTime<chrono_Utc>) : US69 =
    US69_0(v0)
and method194 () : (chrono_DateTime<chrono_Utc> -> US69) =
    closure196()
and method195 (v0 : int32, v1 : Mut4) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure197 () () : string =
    let v0 : string = "[width:24px] [height:30px]"
    v0
and closure192 (v0 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>>, v1 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>, v2 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>) () : leptos_dom_Fragment =
    let v3 : string = $"$0()"
    let v4 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v6 : (struct (string * Vec<struct (string * US24 * string * bool * bool)>) []) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : uint64 = System.Convert.ToUInt64 v6.Length
    let v8 : bool = v7 = 0UL
    let v1868 : leptos_prelude_AnyView_ =
        if v8 then
            let v9 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v10 : string = ""
            let v11 : string = " " + v9 + v10 + ""
            let v12 : string = "class=\"[height:17px]\""
            let v13 : string = " " + v12 + v10 + ""
            let v14 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v15 : string = "fill=\"none\""
            let v16 : string = "height=\"100%\""
            let v17 : string = "viewBox=\"0 0 24 24\""
            let v18 : string = "stroke-width=\"1.5\""
            let v19 : string = "stroke=\"currentColor\""
            let v20 : string = "class=\"text-red-700\""
            let v21 : string = " " + v14 + v10 + ""
            let v22 : string = " " + v15 + v21 + ""
            let v23 : string = " " + v16 + v22 + ""
            let v24 : string = " " + v17 + v23 + ""
            let v25 : string = " " + v18 + v24 + ""
            let v26 : string = " " + v19 + v25 + ""
            let v27 : string = " " + v20 + v26 + ""
            let v28 : string = "stroke-linecap=\"round\""
            let v29 : string = "stroke-linejoin=\"round\""
            let v30 : string = "d=\"M6 18L18 6M6 6l12 12\""
            let v31 : string = " " + v28 + v10 + ""
            let v32 : string = " " + v29 + v31 + ""
            let v33 : string = " " + v30 + v32 + ""
            let v34 : Vec<leptos_prelude_AnyView_> = method172()
            let v35 : string = "leptos::prelude::Fragment::new($0)"
            let v36 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v34 v35 
            let v37 : string = "leptos::prelude::AnyView::from($0)"
            let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
            let v39 : string = "path"
            let v40 : string = "<" + v39 + " " + v33 + ">move || { v38 }</" + v39 + ">"
            let v41 : string = "leptos::prelude::view! { " + v40 + " }"
            let v42 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v41 
            let v43 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v42 |> unbox
            let v44 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v45 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v43 v44 
            let v46 : Vec<leptos_prelude_AnyView_> = method173(v45)
            let v47 : string = "leptos::prelude::Fragment::new($0)"
            let v48 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v46 v47 
            let v49 : string = "leptos::prelude::AnyView::from($0)"
            let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v48 v49 
            let v51 : string = "svg"
            let v52 : string = "<" + v51 + " " + v27 + ">move || { v50 }</" + v51 + ">"
            let v53 : string = "leptos::prelude::view! { " + v52 + " }"
            let v54 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v53 
            let v55 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v54 |> unbox
            let v56 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v57 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v56 
            let v58 : Vec<leptos_prelude_AnyView_> = method173(v57)
            let v59 : string = "leptos::prelude::Fragment::new($0)"
            let v60 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : string = "leptos::prelude::AnyView::from($0)"
            let v62 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v60 v61 
            let v63 : string = "span"
            let v64 : string = "<" + v63 + " " + v13 + ">move || { v62 }</" + v63 + ">"
            let v65 : string = "leptos::prelude::view! { " + v64 + " }"
            let v66 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v65 
            let v67 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v66 |> unbox
            let v68 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v69 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v67 v68 
            let v70 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
            let v71 : string = " " + v70 + v10 + ""
            let v72 : string = "No account selected"
            let v73 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v74 : string = "&*$0"
            let v75 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v72 v74 
            let _v73 = v75 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v76 : string = "&*$0"
            let v77 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v72 v76 
            let _v73 = v77 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v78 : string = "&*$0"
            let v79 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v72 v78 
            let _v73 = v79 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v80 : Ref<Str> = v72 |> unbox<Ref<Str>>
            let _v73 = v80 
            #endif
#if FABLE_COMPILER_PYTHON
            let v83 : Ref<Str> = v72 |> unbox<Ref<Str>>
            let _v73 = v83 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v86 : Ref<Str> = v72 |> unbox<Ref<Str>>
            let _v73 = v86 
            #endif
#else
            let v89 : Ref<Str> = v72 |> unbox<Ref<Str>>
            let _v73 = v89 
            #endif
            let v92 : Ref<Str> = _v73 
            let v97 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v98 : string = "String::from($0)"
            let v99 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v98 
            let _v97 = v99 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v100 : string = "String::from($0)"
            let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v100 
            let _v97 = v101 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v102 : string = "String::from($0)"
            let v103 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v102 
            let _v97 = v103 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v104 : std_string_String = v92 |> unbox<std_string_String>
            let _v97 = v104 
            #endif
#if FABLE_COMPILER_PYTHON
            let v107 : std_string_String = v92 |> unbox<std_string_String>
            let _v97 = v107 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v110 : std_string_String = v92 |> unbox<std_string_String>
            let _v97 = v110 
            #endif
#else
            let v113 : std_string_String = v92 |> unbox<std_string_String>
            let _v97 = v113 
            #endif
            let v116 : std_string_String = _v97 
            let v121 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v122 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v116 v121 
            let v123 : Vec<leptos_prelude_AnyView_> = method173(v122)
            let v124 : string = "leptos::prelude::Fragment::new($0)"
            let v125 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v123 v124 
            let v126 : string = "leptos::prelude::AnyView::from($0)"
            let v127 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v125 v126 
            let v128 : string = "pre"
            let v129 : string = "<" + v128 + " " + v71 + ">move || { v127 }</" + v128 + ">"
            let v130 : string = "leptos::prelude::view! { " + v129 + " }"
            let v131 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v130 
            let v132 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v131 |> unbox
            let v133 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v134 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v132 v133 
            let v135 : Vec<leptos_prelude_AnyView_> = method176(v69, v134)
            let v136 : string = "leptos::prelude::Fragment::new($0)"
            let v137 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v135 v136 
            let v138 : string = "leptos::prelude::AnyView::from($0)"
            let v139 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v137 v138 
            let v140 : string = "div"
            let v141 : string = "<" + v140 + " " + v11 + ">move || { v139 }</" + v140 + ">"
            let v142 : string = "leptos::prelude::view! { " + v141 + " }"
            let v143 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v142 
            let v144 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v143 |> unbox
            let v145 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v146 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v144 v145 
            v146
        else
            let v147 : string = $"$0()"
            let v148 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v1 v147 
            let v149 : ((struct (string * unativeint * Heap5) []) option -> US54) = method134()
            let v150 : (std_string_String -> US54) = method135()
            let v151 : US54 = match v148 with Ok x -> v149 x | Error x -> v150 x
            let v174 : US47 =
                match v151 with
                | US54_1(v171) -> (* Error *)
                    US47_1(v171)
                | US54_0(v152) -> (* Ok *)
                    let v153 : ((struct (string * unativeint * Heap5) []) -> US48) = method136()
                    let v154 : US48 option = v152 |> Option.map v153 
                    let v165 : US48 = US48_1
                    let v166 : US48 = v154 |> Option.defaultValue v165 
                    US47_0(v166)
            match v174 with
            | US47_1(v1726) -> (* Error *)
                let v1727 : string = "fable_library_rust::String_::fromString($0)"
                let v1728 : string = Fable.Core.RustInterop.emitRustExpr v1726 v1727 
                let v1729 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
                let v1730 : string = ""
                let v1731 : string = " " + v1729 + v1730 + ""
                let v1732 : string = "class=\"[height:17px]\""
                let v1733 : string = " " + v1732 + v1730 + ""
                let v1734 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                let v1735 : string = "fill=\"none\""
                let v1736 : string = "height=\"100%\""
                let v1737 : string = "viewBox=\"0 0 24 24\""
                let v1738 : string = "stroke-width=\"1.5\""
                let v1739 : string = "stroke=\"currentColor\""
                let v1740 : string = "class=\"text-red-700\""
                let v1741 : string = " " + v1734 + v1730 + ""
                let v1742 : string = " " + v1735 + v1741 + ""
                let v1743 : string = " " + v1736 + v1742 + ""
                let v1744 : string = " " + v1737 + v1743 + ""
                let v1745 : string = " " + v1738 + v1744 + ""
                let v1746 : string = " " + v1739 + v1745 + ""
                let v1747 : string = " " + v1740 + v1746 + ""
                let v1748 : string = "stroke-linecap=\"round\""
                let v1749 : string = "stroke-linejoin=\"round\""
                let v1750 : string = "d=\"M6 18L18 6M6 6l12 12\""
                let v1751 : string = " " + v1748 + v1730 + ""
                let v1752 : string = " " + v1749 + v1751 + ""
                let v1753 : string = " " + v1750 + v1752 + ""
                let v1754 : Vec<leptos_prelude_AnyView_> = method172()
                let v1755 : string = "leptos::prelude::Fragment::new($0)"
                let v1756 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1754 v1755 
                let v1757 : string = "leptos::prelude::AnyView::from($0)"
                let v1758 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1756 v1757 
                let v1759 : string = "path"
                let v1760 : string = "<" + v1759 + " " + v1753 + ">move || { v1758 }</" + v1759 + ">"
                let v1761 : string = "leptos::prelude::view! { " + v1760 + " }"
                let v1762 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1761 
                let v1763 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v1762 |> unbox
                let v1764 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v1765 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1763 v1764 
                let v1766 : Vec<leptos_prelude_AnyView_> = method173(v1765)
                let v1767 : string = "leptos::prelude::Fragment::new($0)"
                let v1768 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1766 v1767 
                let v1769 : string = "leptos::prelude::AnyView::from($0)"
                let v1770 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1768 v1769 
                let v1771 : string = "svg"
                let v1772 : string = "<" + v1771 + " " + v1747 + ">move || { v1770 }</" + v1771 + ">"
                let v1773 : string = "leptos::prelude::view! { " + v1772 + " }"
                let v1774 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1773 
                let v1775 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1774 |> unbox
                let v1776 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v1777 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1775 v1776 
                let v1778 : Vec<leptos_prelude_AnyView_> = method173(v1777)
                let v1779 : string = "leptos::prelude::Fragment::new($0)"
                let v1780 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1778 v1779 
                let v1781 : string = "leptos::prelude::AnyView::from($0)"
                let v1782 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1780 v1781 
                let v1783 : string = "span"
                let v1784 : string = "<" + v1783 + " " + v1733 + ">move || { v1782 }</" + v1783 + ">"
                let v1785 : string = "leptos::prelude::view! { " + v1784 + " }"
                let v1786 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1785 
                let v1787 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1786 |> unbox
                let v1788 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v1789 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1787 v1788 
                let v1790 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
                let v1791 : string = " " + v1790 + v1730 + ""
                let v1792 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1793 : string = "&*$0"
                let v1794 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1728 v1793 
                let _v1792 = v1794 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1795 : string = "&*$0"
                let v1796 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1728 v1795 
                let _v1792 = v1796 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1797 : string = "&*$0"
                let v1798 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1728 v1797 
                let _v1792 = v1798 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1799 : Ref<Str> = v1728 |> unbox<Ref<Str>>
                let _v1792 = v1799 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1802 : Ref<Str> = v1728 |> unbox<Ref<Str>>
                let _v1792 = v1802 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1805 : Ref<Str> = v1728 |> unbox<Ref<Str>>
                let _v1792 = v1805 
                #endif
#else
                let v1808 : Ref<Str> = v1728 |> unbox<Ref<Str>>
                let _v1792 = v1808 
                #endif
                let v1811 : Ref<Str> = _v1792 
                let v1816 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1817 : string = "String::from($0)"
                let v1818 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1811 v1817 
                let _v1816 = v1818 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1819 : string = "String::from($0)"
                let v1820 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1811 v1819 
                let _v1816 = v1820 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1821 : string = "String::from($0)"
                let v1822 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1811 v1821 
                let _v1816 = v1822 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1823 : std_string_String = v1811 |> unbox<std_string_String>
                let _v1816 = v1823 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1826 : std_string_String = v1811 |> unbox<std_string_String>
                let _v1816 = v1826 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1829 : std_string_String = v1811 |> unbox<std_string_String>
                let _v1816 = v1829 
                #endif
#else
                let v1832 : std_string_String = v1811 |> unbox<std_string_String>
                let _v1816 = v1832 
                #endif
                let v1835 : std_string_String = _v1816 
                let v1840 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                let v1841 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1835 v1840 
                let v1842 : Vec<leptos_prelude_AnyView_> = method173(v1841)
                let v1843 : string = "leptos::prelude::Fragment::new($0)"
                let v1844 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1842 v1843 
                let v1845 : string = "leptos::prelude::AnyView::from($0)"
                let v1846 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1844 v1845 
                let v1847 : string = "pre"
                let v1848 : string = "<" + v1847 + " " + v1791 + ">move || { v1846 }</" + v1847 + ">"
                let v1849 : string = "leptos::prelude::view! { " + v1848 + " }"
                let v1850 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1849 
                let v1851 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v1850 |> unbox
                let v1852 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v1853 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1851 v1852 
                let v1854 : Vec<leptos_prelude_AnyView_> = method176(v1789, v1853)
                let v1855 : string = "leptos::prelude::Fragment::new($0)"
                let v1856 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1854 v1855 
                let v1857 : string = "leptos::prelude::AnyView::from($0)"
                let v1858 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1856 v1857 
                let v1859 : string = "div"
                let v1860 : string = "<" + v1859 + " " + v1731 + ">move || { v1858 }</" + v1859 + ">"
                let v1861 : string = "leptos::prelude::view! { " + v1860 + " }"
                let v1862 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1861 
                let v1863 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1862 |> unbox
                let v1864 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v1865 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1863 v1864 
                v1865
            | US47_0(v175) -> (* Ok *)
                match v175 with
                | US48_0(v176) -> (* Some *)
                    let v177 : string = "$0.to_vec()"
                    let v178 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v176 v177 
                    let v179 : (struct (string * unativeint * Heap5) -> bool) = method188()
                    let v180 : Vec<struct (string * unativeint * Heap5)> = method191(v178)
                    let v181 : string = "v180.into_iter().filter(|x| v179(x.clone().clone())).collect::<Vec<_>>()"
                    let v182 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v181 
                    let v183 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v184 : string = ""
                    let v185 : string = " " + v183 + v184 + ""
                    let v186 : string = "Block Timestamp"
                    let v187 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v188 : string = "&*$0"
                    let v189 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v186 v188 
                    let _v187 = v189 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v190 : string = "&*$0"
                    let v191 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v186 v190 
                    let _v187 = v191 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v192 : string = "&*$0"
                    let v193 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v186 v192 
                    let _v187 = v193 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v194 : Ref<Str> = v186 |> unbox<Ref<Str>>
                    let _v187 = v194 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v197 : Ref<Str> = v186 |> unbox<Ref<Str>>
                    let _v187 = v197 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v200 : Ref<Str> = v186 |> unbox<Ref<Str>>
                    let _v187 = v200 
                    #endif
#else
                    let v203 : Ref<Str> = v186 |> unbox<Ref<Str>>
                    let _v187 = v203 
                    #endif
                    let v206 : Ref<Str> = _v187 
                    let v211 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v212 : string = "String::from($0)"
                    let v213 : std_string_String = Fable.Core.RustInterop.emitRustExpr v206 v212 
                    let _v211 = v213 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v214 : string = "String::from($0)"
                    let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr v206 v214 
                    let _v211 = v215 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v216 : string = "String::from($0)"
                    let v217 : std_string_String = Fable.Core.RustInterop.emitRustExpr v206 v216 
                    let _v211 = v217 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v218 : std_string_String = v206 |> unbox<std_string_String>
                    let _v211 = v218 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v221 : std_string_String = v206 |> unbox<std_string_String>
                    let _v211 = v221 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v224 : std_string_String = v206 |> unbox<std_string_String>
                    let _v211 = v224 
                    #endif
#else
                    let v227 : std_string_String = v206 |> unbox<std_string_String>
                    let _v211 = v227 
                    #endif
                    let v230 : std_string_String = _v211 
                    let v235 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v236 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v230 v235 
                    let v237 : Vec<leptos_prelude_AnyView_> = method173(v236)
                    let v238 : string = "leptos::prelude::Fragment::new($0)"
                    let v239 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v237 v238 
                    let v240 : string = "leptos::prelude::AnyView::from($0)"
                    let v241 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v239 v240 
                    let v242 : string = "th"
                    let v243 : string = "<" + v242 + " " + v185 + ">move || { v241 }</" + v242 + ">"
                    let v244 : string = "leptos::prelude::view! { " + v243 + " }"
                    let v245 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v244 
                    let v246 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v245 |> unbox
                    let v247 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v248 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v246 v247 
                    let v249 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v250 : string = " " + v249 + v184 + ""
                    let v251 : string = "Predecessor"
                    let v252 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v253 : string = "&*$0"
                    let v254 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v251 v253 
                    let _v252 = v254 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v255 : string = "&*$0"
                    let v256 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v251 v255 
                    let _v252 = v256 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v257 : string = "&*$0"
                    let v258 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v251 v257 
                    let _v252 = v258 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v259 : Ref<Str> = v251 |> unbox<Ref<Str>>
                    let _v252 = v259 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v262 : Ref<Str> = v251 |> unbox<Ref<Str>>
                    let _v252 = v262 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v265 : Ref<Str> = v251 |> unbox<Ref<Str>>
                    let _v252 = v265 
                    #endif
#else
                    let v268 : Ref<Str> = v251 |> unbox<Ref<Str>>
                    let _v252 = v268 
                    #endif
                    let v271 : Ref<Str> = _v252 
                    let v276 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v277 : string = "String::from($0)"
                    let v278 : std_string_String = Fable.Core.RustInterop.emitRustExpr v271 v277 
                    let _v276 = v278 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v279 : string = "String::from($0)"
                    let v280 : std_string_String = Fable.Core.RustInterop.emitRustExpr v271 v279 
                    let _v276 = v280 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v281 : string = "String::from($0)"
                    let v282 : std_string_String = Fable.Core.RustInterop.emitRustExpr v271 v281 
                    let _v276 = v282 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v283 : std_string_String = v271 |> unbox<std_string_String>
                    let _v276 = v283 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v286 : std_string_String = v271 |> unbox<std_string_String>
                    let _v276 = v286 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v289 : std_string_String = v271 |> unbox<std_string_String>
                    let _v276 = v289 
                    #endif
#else
                    let v292 : std_string_String = v271 |> unbox<std_string_String>
                    let _v276 = v292 
                    #endif
                    let v295 : std_string_String = _v276 
                    let v300 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v301 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v295 v300 
                    let v302 : Vec<leptos_prelude_AnyView_> = method173(v301)
                    let v303 : string = "leptos::prelude::Fragment::new($0)"
                    let v304 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v302 v303 
                    let v305 : string = "leptos::prelude::AnyView::from($0)"
                    let v306 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v304 v305 
                    let v307 : string = "<" + v242 + " " + v250 + ">move || { v306 }</" + v242 + ">"
                    let v308 : string = "leptos::prelude::view! { " + v307 + " }"
                    let v309 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v308 
                    let v310 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v309 |> unbox
                    let v311 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v312 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v310 v311 
                    let v313 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v314 : string = " " + v313 + v184 + ""
                    let v315 : string = "Receiver"
                    let v316 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v317 : string = "&*$0"
                    let v318 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v315 v317 
                    let _v316 = v318 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v319 : string = "&*$0"
                    let v320 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v315 v319 
                    let _v316 = v320 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v321 : string = "&*$0"
                    let v322 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v315 v321 
                    let _v316 = v322 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v323 : Ref<Str> = v315 |> unbox<Ref<Str>>
                    let _v316 = v323 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v326 : Ref<Str> = v315 |> unbox<Ref<Str>>
                    let _v316 = v326 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v329 : Ref<Str> = v315 |> unbox<Ref<Str>>
                    let _v316 = v329 
                    #endif
#else
                    let v332 : Ref<Str> = v315 |> unbox<Ref<Str>>
                    let _v316 = v332 
                    #endif
                    let v335 : Ref<Str> = _v316 
                    let v340 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v341 : string = "String::from($0)"
                    let v342 : std_string_String = Fable.Core.RustInterop.emitRustExpr v335 v341 
                    let _v340 = v342 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v343 : string = "String::from($0)"
                    let v344 : std_string_String = Fable.Core.RustInterop.emitRustExpr v335 v343 
                    let _v340 = v344 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v345 : string = "String::from($0)"
                    let v346 : std_string_String = Fable.Core.RustInterop.emitRustExpr v335 v345 
                    let _v340 = v346 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v347 : std_string_String = v335 |> unbox<std_string_String>
                    let _v340 = v347 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v350 : std_string_String = v335 |> unbox<std_string_String>
                    let _v340 = v350 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v353 : std_string_String = v335 |> unbox<std_string_String>
                    let _v340 = v353 
                    #endif
#else
                    let v356 : std_string_String = v335 |> unbox<std_string_String>
                    let _v340 = v356 
                    #endif
                    let v359 : std_string_String = _v340 
                    let v364 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v365 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v359 v364 
                    let v366 : Vec<leptos_prelude_AnyView_> = method173(v365)
                    let v367 : string = "leptos::prelude::Fragment::new($0)"
                    let v368 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v366 v367 
                    let v369 : string = "leptos::prelude::AnyView::from($0)"
                    let v370 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v368 v369 
                    let v371 : string = "<" + v242 + " " + v314 + ">move || { v370 }</" + v242 + ">"
                    let v372 : string = "leptos::prelude::view! { " + v371 + " }"
                    let v373 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v372 
                    let v374 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v373 |> unbox
                    let v375 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v376 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v374 v375 
                    let v377 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v378 : string = " " + v377 + v184 + ""
                    let v379 : string = "Fee"
                    let v380 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v381 : string = "&*$0"
                    let v382 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v379 v381 
                    let _v380 = v382 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v383 : string = "&*$0"
                    let v384 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v379 v383 
                    let _v380 = v384 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v385 : string = "&*$0"
                    let v386 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v379 v385 
                    let _v380 = v386 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v387 : Ref<Str> = v379 |> unbox<Ref<Str>>
                    let _v380 = v387 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v390 : Ref<Str> = v379 |> unbox<Ref<Str>>
                    let _v380 = v390 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v393 : Ref<Str> = v379 |> unbox<Ref<Str>>
                    let _v380 = v393 
                    #endif
#else
                    let v396 : Ref<Str> = v379 |> unbox<Ref<Str>>
                    let _v380 = v396 
                    #endif
                    let v399 : Ref<Str> = _v380 
                    let v404 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v405 : string = "String::from($0)"
                    let v406 : std_string_String = Fable.Core.RustInterop.emitRustExpr v399 v405 
                    let _v404 = v406 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v407 : string = "String::from($0)"
                    let v408 : std_string_String = Fable.Core.RustInterop.emitRustExpr v399 v407 
                    let _v404 = v408 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v409 : string = "String::from($0)"
                    let v410 : std_string_String = Fable.Core.RustInterop.emitRustExpr v399 v409 
                    let _v404 = v410 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v411 : std_string_String = v399 |> unbox<std_string_String>
                    let _v404 = v411 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v414 : std_string_String = v399 |> unbox<std_string_String>
                    let _v404 = v414 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v417 : std_string_String = v399 |> unbox<std_string_String>
                    let _v404 = v417 
                    #endif
#else
                    let v420 : std_string_String = v399 |> unbox<std_string_String>
                    let _v404 = v420 
                    #endif
                    let v423 : std_string_String = _v404 
                    let v428 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v429 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v423 v428 
                    let v430 : Vec<leptos_prelude_AnyView_> = method173(v429)
                    let v431 : string = "leptos::prelude::Fragment::new($0)"
                    let v432 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v430 v431 
                    let v433 : string = "leptos::prelude::AnyView::from($0)"
                    let v434 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v432 v433 
                    let v435 : string = "<" + v242 + " " + v378 + ">move || { v434 }</" + v242 + ">"
                    let v436 : string = "leptos::prelude::view! { " + v435 + " }"
                    let v437 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v436 
                    let v438 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v437 |> unbox
                    let v439 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v440 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v438 v439 
                    let v441 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v442 : string = " " + v441 + v184 + ""
                    let v443 : string = "Result"
                    let v444 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v445 : string = "&*$0"
                    let v446 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v443 v445 
                    let _v444 = v446 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v447 : string = "&*$0"
                    let v448 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v443 v447 
                    let _v444 = v448 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v449 : string = "&*$0"
                    let v450 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v443 v449 
                    let _v444 = v450 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v451 : Ref<Str> = v443 |> unbox<Ref<Str>>
                    let _v444 = v451 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v454 : Ref<Str> = v443 |> unbox<Ref<Str>>
                    let _v444 = v454 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v457 : Ref<Str> = v443 |> unbox<Ref<Str>>
                    let _v444 = v457 
                    #endif
#else
                    let v460 : Ref<Str> = v443 |> unbox<Ref<Str>>
                    let _v444 = v460 
                    #endif
                    let v463 : Ref<Str> = _v444 
                    let v468 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v469 : string = "String::from($0)"
                    let v470 : std_string_String = Fable.Core.RustInterop.emitRustExpr v463 v469 
                    let _v468 = v470 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v471 : string = "String::from($0)"
                    let v472 : std_string_String = Fable.Core.RustInterop.emitRustExpr v463 v471 
                    let _v468 = v472 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v473 : string = "String::from($0)"
                    let v474 : std_string_String = Fable.Core.RustInterop.emitRustExpr v463 v473 
                    let _v468 = v474 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v475 : std_string_String = v463 |> unbox<std_string_String>
                    let _v468 = v475 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v478 : std_string_String = v463 |> unbox<std_string_String>
                    let _v468 = v478 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v481 : std_string_String = v463 |> unbox<std_string_String>
                    let _v468 = v481 
                    #endif
#else
                    let v484 : std_string_String = v463 |> unbox<std_string_String>
                    let _v468 = v484 
                    #endif
                    let v487 : std_string_String = _v468 
                    let v492 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v493 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v487 v492 
                    let v494 : Vec<leptos_prelude_AnyView_> = method173(v493)
                    let v495 : string = "leptos::prelude::Fragment::new($0)"
                    let v496 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v494 v495 
                    let v497 : string = "leptos::prelude::AnyView::from($0)"
                    let v498 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v496 v497 
                    let v499 : string = "<" + v242 + " " + v442 + ">move || { v498 }</" + v242 + ">"
                    let v500 : string = "leptos::prelude::view! { " + v499 + " }"
                    let v501 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v500 
                    let v502 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v501 |> unbox
                    let v503 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v504 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v502 v503 
                    let v505 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v506 : string = " " + v505 + v184 + ""
                    let v507 : string = "Status"
                    let v508 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v509 : string = "&*$0"
                    let v510 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v507 v509 
                    let _v508 = v510 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v511 : string = "&*$0"
                    let v512 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v507 v511 
                    let _v508 = v512 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v513 : string = "&*$0"
                    let v514 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v507 v513 
                    let _v508 = v514 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v515 : Ref<Str> = v507 |> unbox<Ref<Str>>
                    let _v508 = v515 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v518 : Ref<Str> = v507 |> unbox<Ref<Str>>
                    let _v508 = v518 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v521 : Ref<Str> = v507 |> unbox<Ref<Str>>
                    let _v508 = v521 
                    #endif
#else
                    let v524 : Ref<Str> = v507 |> unbox<Ref<Str>>
                    let _v508 = v524 
                    #endif
                    let v527 : Ref<Str> = _v508 
                    let v532 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v533 : string = "String::from($0)"
                    let v534 : std_string_String = Fable.Core.RustInterop.emitRustExpr v527 v533 
                    let _v532 = v534 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v535 : string = "String::from($0)"
                    let v536 : std_string_String = Fable.Core.RustInterop.emitRustExpr v527 v535 
                    let _v532 = v536 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v537 : string = "String::from($0)"
                    let v538 : std_string_String = Fable.Core.RustInterop.emitRustExpr v527 v537 
                    let _v532 = v538 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v539 : std_string_String = v527 |> unbox<std_string_String>
                    let _v532 = v539 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v542 : std_string_String = v527 |> unbox<std_string_String>
                    let _v532 = v542 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v545 : std_string_String = v527 |> unbox<std_string_String>
                    let _v532 = v545 
                    #endif
#else
                    let v548 : std_string_String = v527 |> unbox<std_string_String>
                    let _v532 = v548 
                    #endif
                    let v551 : std_string_String = _v532 
                    let v556 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v557 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v551 v556 
                    let v558 : Vec<leptos_prelude_AnyView_> = method173(v557)
                    let v559 : string = "leptos::prelude::Fragment::new($0)"
                    let v560 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v558 v559 
                    let v561 : string = "leptos::prelude::AnyView::from($0)"
                    let v562 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v560 v561 
                    let v563 : string = "<" + v242 + " " + v506 + ">move || { v562 }</" + v242 + ">"
                    let v564 : string = "leptos::prelude::view! { " + v563 + " }"
                    let v565 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v564 
                    let v566 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v565 |> unbox
                    let v567 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v568 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v566 v567 
                    let v569 : Vec<leptos_prelude_AnyView_> = method192(v248, v312, v376, v440, v504, v568)
                    let v570 : string = "leptos::prelude::Fragment::new($0)"
                    let v571 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v569 v570 
                    let v572 : string = "leptos::prelude::AnyView::from($0)"
                    let v573 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v571 v572 
                    let v574 : string = "tr"
                    let v575 : string = "<" + v574 + " " + v184 + ">move || { v573 }</" + v574 + ">"
                    let v576 : string = "leptos::prelude::view! { " + v575 + " }"
                    let v577 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v576 
                    let v578 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v577 |> unbox
                    let v579 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v580 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v578 v579 
                    let v581 : Vec<leptos_prelude_AnyView_> = method173(v580)
                    let v582 : string = "leptos::prelude::Fragment::new($0)"
                    let v583 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v581 v582 
                    let v584 : string = $"$0()"
                    let v585 : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v0 v584 
                    let v586 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v587 : bool = Fable.Core.RustInterop.emitRustExpr v182 v586 
                    let v588 : string = "x"
                    let struct (v589 : string, v590 : unativeint, v591 : Heap5) = Fable.Core.RustInterop.emitRustExpr () v588 
                    let v592 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v593 : (Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v585 v592 
                    let v594 : int32 = v590 |> int32 
                    let v601 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = v593.[int v594]
                    let v604 : string = "class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\""
                    let v605 : string = " " + v604 + v184 + ""
                    let v606 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v607 : string = " " + v606 + v184 + ""
                    let v608 : std_string_String = v591.l5
                    let v609 : string = "fable_library_rust::String_::fromString($0)"
                    let v610 : string = Fable.Core.RustInterop.emitRustExpr v608 v609 
                    let v611 : (string -> int64) = int64
                    let v612 : int64 = v611 v610
                    let v615 : int64 = method193(v612)
                    let v616 : int64 = v615 / 1000L
                    let v617 : string = "chrono::DateTime::from_timestamp_micros($0)"
                    let v618 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v616 v617 
                    let v619 : (chrono_DateTime<chrono_Utc> -> US69) = method194()
                    let v620 : US69 option = v618 |> Option.map v619 
                    let v631 : US69 = US69_1
                    let v632 : US69 = v620 |> Option.defaultValue v631 
                    let v651 : US32 =
                        match v632 with
                        | US69_1 -> (* None *)
                            US32_1
                        | US69_0(v636) -> (* Some *)
                            let v637 : string = "$0.naive_utc()"
                            let v638 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v636 v637 
                            let v639 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
                            let v640 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v638 v639 
                            let v641 : string = "%Y-%m-%d %H:%M:%S"
                            let v642 : string = "r#\"" + v641 + "\"#"
                            let v643 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v642 
                            let v644 : string = "$0.format($1).to_string()"
                            let v645 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v640, v643) v644 
                            let v646 : string = "fable_library_rust::String_::fromString($0)"
                            let v647 : string = Fable.Core.RustInterop.emitRustExpr v645 v646 
                            US32_0(v647)
                    let v657 : US70 =
                        match v651 with
                        | US32_1 -> (* None *)
                            let v654 : string = "resultm.from_option / Option does not have a value."
                            US70_1(v654)
                        | US32_0(v652) -> (* Some *)
                            US70_0(v652)
                    let v662 : string =
                        match v657 with
                        | US70_1(v659) -> (* Error *)
                            let v660 : string = "sm'.to_string result / Error: " + v659 + ""
                            v660
                        | US70_0(v658) -> (* Ok *)
                            v658
                    let v663 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v664 : string = "&*$0"
                    let v665 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v662 v664 
                    let _v663 = v665 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v666 : string = "&*$0"
                    let v667 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v662 v666 
                    let _v663 = v667 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v668 : string = "&*$0"
                    let v669 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v662 v668 
                    let _v663 = v669 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v670 : Ref<Str> = v662 |> unbox<Ref<Str>>
                    let _v663 = v670 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v673 : Ref<Str> = v662 |> unbox<Ref<Str>>
                    let _v663 = v673 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v676 : Ref<Str> = v662 |> unbox<Ref<Str>>
                    let _v663 = v676 
                    #endif
#else
                    let v679 : Ref<Str> = v662 |> unbox<Ref<Str>>
                    let _v663 = v679 
                    #endif
                    let v682 : Ref<Str> = _v663 
                    let v687 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v688 : string = "String::from($0)"
                    let v689 : std_string_String = Fable.Core.RustInterop.emitRustExpr v682 v688 
                    let _v687 = v689 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v690 : string = "String::from($0)"
                    let v691 : std_string_String = Fable.Core.RustInterop.emitRustExpr v682 v690 
                    let _v687 = v691 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v692 : string = "String::from($0)"
                    let v693 : std_string_String = Fable.Core.RustInterop.emitRustExpr v682 v692 
                    let _v687 = v693 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v694 : std_string_String = v682 |> unbox<std_string_String>
                    let _v687 = v694 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v697 : std_string_String = v682 |> unbox<std_string_String>
                    let _v687 = v697 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v700 : std_string_String = v682 |> unbox<std_string_String>
                    let _v687 = v700 
                    #endif
#else
                    let v703 : std_string_String = v682 |> unbox<std_string_String>
                    let _v687 = v703 
                    #endif
                    let v706 : std_string_String = _v687 
                    let v711 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v712 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v706 v711 
                    let v713 : Vec<leptos_prelude_AnyView_> = method173(v712)
                    let v714 : string = "leptos::prelude::Fragment::new($0)"
                    let v715 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v713 v714 
                    let v716 : string = "leptos::prelude::AnyView::from($0)"
                    let v717 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v715 v716 
                    let v718 : string = "td"
                    let v719 : string = "<" + v718 + " " + v607 + ">move || { v717 }</" + v718 + ">"
                    let v720 : string = "leptos::prelude::view! { " + v719 + " }"
                    let v721 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v720 
                    let v722 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v721 |> unbox
                    let v723 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v724 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v722 v723 
                    let v725 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v726 : string = " " + v725 + v184 + ""
                    let v727 : std_string_String = v591.l1
                    let v728 : string = "fable_library_rust::String_::fromString($0)"
                    let v729 : string = Fable.Core.RustInterop.emitRustExpr v727 v728 
                    let v730 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v731 : string = "&*$0"
                    let v732 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v729 v731 
                    let _v730 = v732 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v733 : string = "&*$0"
                    let v734 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v729 v733 
                    let _v730 = v734 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v735 : string = "&*$0"
                    let v736 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v729 v735 
                    let _v730 = v736 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v737 : Ref<Str> = v729 |> unbox<Ref<Str>>
                    let _v730 = v737 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v740 : Ref<Str> = v729 |> unbox<Ref<Str>>
                    let _v730 = v740 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v743 : Ref<Str> = v729 |> unbox<Ref<Str>>
                    let _v730 = v743 
                    #endif
#else
                    let v746 : Ref<Str> = v729 |> unbox<Ref<Str>>
                    let _v730 = v746 
                    #endif
                    let v749 : Ref<Str> = _v730 
                    let v754 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v755 : string = "String::from($0)"
                    let v756 : std_string_String = Fable.Core.RustInterop.emitRustExpr v749 v755 
                    let _v754 = v756 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v757 : string = "String::from($0)"
                    let v758 : std_string_String = Fable.Core.RustInterop.emitRustExpr v749 v757 
                    let _v754 = v758 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v759 : string = "String::from($0)"
                    let v760 : std_string_String = Fable.Core.RustInterop.emitRustExpr v749 v759 
                    let _v754 = v760 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v761 : std_string_String = v749 |> unbox<std_string_String>
                    let _v754 = v761 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v764 : std_string_String = v749 |> unbox<std_string_String>
                    let _v754 = v764 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v767 : std_string_String = v749 |> unbox<std_string_String>
                    let _v754 = v767 
                    #endif
#else
                    let v770 : std_string_String = v749 |> unbox<std_string_String>
                    let _v754 = v770 
                    #endif
                    let v773 : std_string_String = _v754 
                    let v778 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v779 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v773 v778 
                    let v780 : Vec<leptos_prelude_AnyView_> = method173(v779)
                    let v781 : string = "leptos::prelude::Fragment::new($0)"
                    let v782 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v780 v781 
                    let v783 : string = "leptos::prelude::AnyView::from($0)"
                    let v784 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v782 v783 
                    let v785 : string = "<" + v718 + " " + v726 + ">move || { v784 }</" + v718 + ">"
                    let v786 : string = "leptos::prelude::view! { " + v785 + " }"
                    let v787 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v786 
                    let v788 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v787 |> unbox
                    let v789 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v790 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v788 v789 
                    let v791 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v792 : string = " " + v791 + v184 + ""
                    let v793 : std_string_String = v591.l2
                    let v794 : string = "fable_library_rust::String_::fromString($0)"
                    let v795 : string = Fable.Core.RustInterop.emitRustExpr v793 v794 
                    let v796 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v797 : string = "&*$0"
                    let v798 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v795 v797 
                    let _v796 = v798 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v799 : string = "&*$0"
                    let v800 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v795 v799 
                    let _v796 = v800 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v801 : string = "&*$0"
                    let v802 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v795 v801 
                    let _v796 = v802 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v803 : Ref<Str> = v795 |> unbox<Ref<Str>>
                    let _v796 = v803 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v806 : Ref<Str> = v795 |> unbox<Ref<Str>>
                    let _v796 = v806 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v809 : Ref<Str> = v795 |> unbox<Ref<Str>>
                    let _v796 = v809 
                    #endif
#else
                    let v812 : Ref<Str> = v795 |> unbox<Ref<Str>>
                    let _v796 = v812 
                    #endif
                    let v815 : Ref<Str> = _v796 
                    let v820 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v821 : string = "String::from($0)"
                    let v822 : std_string_String = Fable.Core.RustInterop.emitRustExpr v815 v821 
                    let _v820 = v822 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v823 : string = "String::from($0)"
                    let v824 : std_string_String = Fable.Core.RustInterop.emitRustExpr v815 v823 
                    let _v820 = v824 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v825 : string = "String::from($0)"
                    let v826 : std_string_String = Fable.Core.RustInterop.emitRustExpr v815 v825 
                    let _v820 = v826 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v827 : std_string_String = v815 |> unbox<std_string_String>
                    let _v820 = v827 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v830 : std_string_String = v815 |> unbox<std_string_String>
                    let _v820 = v830 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v833 : std_string_String = v815 |> unbox<std_string_String>
                    let _v820 = v833 
                    #endif
#else
                    let v836 : std_string_String = v815 |> unbox<std_string_String>
                    let _v820 = v836 
                    #endif
                    let v839 : std_string_String = _v820 
                    let v844 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v845 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v839 v844 
                    let v846 : Vec<leptos_prelude_AnyView_> = method173(v845)
                    let v847 : string = "leptos::prelude::Fragment::new($0)"
                    let v848 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v846 v847 
                    let v849 : string = "leptos::prelude::AnyView::from($0)"
                    let v850 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v848 v849 
                    let v851 : string = "<" + v718 + " " + v792 + ">move || { v850 }</" + v718 + ">"
                    let v852 : string = "leptos::prelude::view! { " + v851 + " }"
                    let v853 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v852 
                    let v854 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v853 |> unbox
                    let v855 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v856 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v854 v855 
                    let v857 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v858 : string = " " + v857 + v184 + ""
                    let v859 : float = v591.l10
                    let v860 : (float -> string) = _.ToString()
                    let v861 : string = v860 v859
                    let v864 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v865 : string = "&*$0"
                    let v866 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v861 v865 
                    let _v864 = v866 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v867 : string = "&*$0"
                    let v868 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v861 v867 
                    let _v864 = v868 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v869 : string = "&*$0"
                    let v870 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v861 v869 
                    let _v864 = v870 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v871 : Ref<Str> = v861 |> unbox<Ref<Str>>
                    let _v864 = v871 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v874 : Ref<Str> = v861 |> unbox<Ref<Str>>
                    let _v864 = v874 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v877 : Ref<Str> = v861 |> unbox<Ref<Str>>
                    let _v864 = v877 
                    #endif
#else
                    let v880 : Ref<Str> = v861 |> unbox<Ref<Str>>
                    let _v864 = v880 
                    #endif
                    let v883 : Ref<Str> = _v864 
                    let v888 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v889 : string = "String::from($0)"
                    let v890 : std_string_String = Fable.Core.RustInterop.emitRustExpr v883 v889 
                    let _v888 = v890 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v891 : string = "String::from($0)"
                    let v892 : std_string_String = Fable.Core.RustInterop.emitRustExpr v883 v891 
                    let _v888 = v892 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v893 : string = "String::from($0)"
                    let v894 : std_string_String = Fable.Core.RustInterop.emitRustExpr v883 v893 
                    let _v888 = v894 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v895 : std_string_String = v883 |> unbox<std_string_String>
                    let _v888 = v895 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v898 : std_string_String = v883 |> unbox<std_string_String>
                    let _v888 = v898 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v901 : std_string_String = v883 |> unbox<std_string_String>
                    let _v888 = v901 
                    #endif
#else
                    let v904 : std_string_String = v883 |> unbox<std_string_String>
                    let _v888 = v904 
                    #endif
                    let v907 : std_string_String = _v888 
                    let v912 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v913 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v907 v912 
                    let v914 : Vec<leptos_prelude_AnyView_> = method173(v913)
                    let v915 : string = "leptos::prelude::Fragment::new($0)"
                    let v916 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v914 v915 
                    let v917 : string = "leptos::prelude::AnyView::from($0)"
                    let v918 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v916 v917 
                    let v919 : string = "<" + v718 + " " + v858 + ">move || { v918 }</" + v718 + ">"
                    let v920 : string = "leptos::prelude::view! { " + v919 + " }"
                    let v921 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v920 
                    let v922 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v921 |> unbox
                    let v923 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v924 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v922 v923 
                    let v925 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v926 : string = " " + v925 + v184 + ""
                    let v927 : (std_string_String []) = v591.l11
                    let v928 : uint64 = System.Convert.ToUInt64 v927.Length
                    let v929 : bool = v928 = 0UL
                    let v1066 : leptos_dom_Fragment =
                        if v929 then
                            let v930 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v931 : string = "&*$0"
                            let v932 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v184 v931 
                            let _v930 = v932 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v933 : string = "&*$0"
                            let v934 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v184 v933 
                            let _v930 = v934 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v935 : string = "&*$0"
                            let v936 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v184 v935 
                            let _v930 = v936 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v937 : Ref<Str> = v184 |> unbox<Ref<Str>>
                            let _v930 = v937 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v940 : Ref<Str> = v184 |> unbox<Ref<Str>>
                            let _v930 = v940 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v943 : Ref<Str> = v184 |> unbox<Ref<Str>>
                            let _v930 = v943 
                            #endif
#else
                            let v946 : Ref<Str> = v184 |> unbox<Ref<Str>>
                            let _v930 = v946 
                            #endif
                            let v949 : Ref<Str> = _v930 
                            let v954 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v955 : string = "String::from($0)"
                            let v956 : std_string_String = Fable.Core.RustInterop.emitRustExpr v949 v955 
                            let _v954 = v956 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v957 : string = "String::from($0)"
                            let v958 : std_string_String = Fable.Core.RustInterop.emitRustExpr v949 v957 
                            let _v954 = v958 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v959 : string = "String::from($0)"
                            let v960 : std_string_String = Fable.Core.RustInterop.emitRustExpr v949 v959 
                            let _v954 = v960 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v961 : std_string_String = v949 |> unbox<std_string_String>
                            let _v954 = v961 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v964 : std_string_String = v949 |> unbox<std_string_String>
                            let _v954 = v964 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v967 : std_string_String = v949 |> unbox<std_string_String>
                            let _v954 = v967 
                            #endif
#else
                            let v970 : std_string_String = v949 |> unbox<std_string_String>
                            let _v954 = v970 
                            #endif
                            let v973 : std_string_String = _v954 
                            let v978 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                            let v979 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v973 v978 
                            let v980 : Vec<leptos_prelude_AnyView_> = method173(v979)
                            let v981 : string = "leptos::prelude::Fragment::new($0)"
                            let v982 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v980 v981 
                            v982
                        else
                            let v983 : (std_string_String []) = v591.l11
                            let v984 : int32 = v983.Length
                            let v985 : US32 = US32_1
                            let v986 : Mut4 = {l0 = 0; l1 = v985} : Mut4
                            while method195(v984, v986) do
                                let v988 : int32 = v986.l0
                                let v989 : int32 =  -v988
                                let v990 : int32 = v989 + v984
                                let v991 : int32 = v990 - 1
                                let v992 : US32 = v986.l1
                                let v993 : std_string_String = v983.[int v991]
                                let v994 : string = "fable_library_rust::String_::fromString($0)"
                                let v995 : string = Fable.Core.RustInterop.emitRustExpr v993 v994 
                                let v996 : string = " / result: "
                                let v997 : (string []) = v995.Split v996 
                                let v1006 : US32 =
                                    match v992 with
                                    | US32_1 -> (* None *)
                                        let v1000 : uint64 = System.Convert.ToUInt64 v997.Length
                                        let v1001 : bool = v1000 = 2UL
                                        if v1001 then
                                            let v1002 : string = v997.[int 0]
                                            let v1003 : string = v997.[int 1]
                                            US32_0(v1003)
                                        else
                                            v992
                                    | _ ->
                                        v992
                                let v1007 : int32 = v988 + 1
                                v986.l0 <- v1007
                                v986.l1 <- v1006
                                ()
                            let v1008 : US32 = v986.l1
                            let v1012 : string =
                                match v1008 with
                                | US32_1 -> (* None *)
                                    let v1010 : string = "?"
                                    v1010
                                | US32_0(v1009) -> (* Some *)
                                    v1009
                            let v1013 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1014 : string = "&*$0"
                            let v1015 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1012 v1014 
                            let _v1013 = v1015 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1016 : string = "&*$0"
                            let v1017 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1012 v1016 
                            let _v1013 = v1017 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1018 : string = "&*$0"
                            let v1019 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1012 v1018 
                            let _v1013 = v1019 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1020 : Ref<Str> = v1012 |> unbox<Ref<Str>>
                            let _v1013 = v1020 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v1023 : Ref<Str> = v1012 |> unbox<Ref<Str>>
                            let _v1013 = v1023 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v1026 : Ref<Str> = v1012 |> unbox<Ref<Str>>
                            let _v1013 = v1026 
                            #endif
#else
                            let v1029 : Ref<Str> = v1012 |> unbox<Ref<Str>>
                            let _v1013 = v1029 
                            #endif
                            let v1032 : Ref<Str> = _v1013 
                            let v1037 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1038 : string = "String::from($0)"
                            let v1039 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1032 v1038 
                            let _v1037 = v1039 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1040 : string = "String::from($0)"
                            let v1041 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1032 v1040 
                            let _v1037 = v1041 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1042 : string = "String::from($0)"
                            let v1043 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1032 v1042 
                            let _v1037 = v1043 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1044 : std_string_String = v1032 |> unbox<std_string_String>
                            let _v1037 = v1044 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v1047 : std_string_String = v1032 |> unbox<std_string_String>
                            let _v1037 = v1047 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v1050 : std_string_String = v1032 |> unbox<std_string_String>
                            let _v1037 = v1050 
                            #endif
#else
                            let v1053 : std_string_String = v1032 |> unbox<std_string_String>
                            let _v1037 = v1053 
                            #endif
                            let v1056 : std_string_String = _v1037 
                            let v1061 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                            let v1062 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1056 v1061 
                            let v1063 : Vec<leptos_prelude_AnyView_> = method173(v1062)
                            let v1064 : string = "leptos::prelude::Fragment::new($0)"
                            let v1065 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1063 v1064 
                            v1065
                    let v1067 : string = "leptos::prelude::AnyView::from($0)"
                    let v1068 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1066 v1067 
                    let v1069 : string = "<" + v718 + " " + v926 + ">move || { v1068 }</" + v718 + ">"
                    let v1070 : string = "leptos::prelude::view! { " + v1069 + " }"
                    let v1071 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1070 
                    let v1072 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1071 |> unbox
                    let v1073 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1074 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1072 v1073 
                    let v1075 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v1076 : string = " " + v1075 + v184 + ""
                    let v1077 : bool = v591.l9
                    let v1080 : string =
                        if v1077 then
                            let v1078 : string = "Ok"
                            v1078
                        else
                            let v1079 : string = "Outcome Error"
                            v1079
                    let v1081 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US64) = method166()
                    let v1082 : (std_string_String -> US64) = method167()
                    let v1083 : US64 = match v601 with Ok x -> v1081 x | Error x -> v1082 x
                    let v1109 : US60 =
                        match v1083 with
                        | US64_1(v1106) -> (* Error *)
                            US60_1(v1106)
                        | US64_0(v1084) -> (* Ok *)
                            let v1085 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US58) = method168()
                            let v1086 : US58 option = v1084 |> Option.map v1085 
                            let v1100 : US58 = US58_1
                            let v1101 : US58 = v1086 |> Option.defaultValue v1100 
                            US60_0(v1101)
                    let v1205 : US70 =
                        match v1109 with
                        | US60_1(v1200) -> (* Error *)
                            let v1201 : string = "fable_library_rust::String_::fromString($0)"
                            let v1202 : string = Fable.Core.RustInterop.emitRustExpr v1200 v1201 
                            US70_1(v1202)
                        | US60_0(v1110) -> (* Ok *)
                            match v1110 with
                            | US58_0(v1111, v1112, v1113, v1114) -> (* Some *)
                                let v1115 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US65) = method169()
                                let v1116 : US65 option = v1113 |> Option.map v1115 
                                let v1132 : US65 = US65_1
                                let v1133 : US65 = v1116 |> Option.defaultValue v1132 
                                match v1133 with
                                | US65_1 -> (* None *)
                                    let v1184 : string = $"%A{struct (v1111, v1112, v1113, v1114)}"
                                    let v1187 : int64 = 400L
                                    let v1188 : string = method10(v1187, v1184)
                                    US70_0(v1188)
                                | US65_0(v1137, v1138, v1139, v1140, v1141, v1142) -> (* Some *)
                                    let v1143 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US65) = method169()
                                    let v1144 : US65 option = v1113 |> Option.map v1143 
                                    let v1160 : US65 = US65_1
                                    let v1161 : US65 = v1144 |> Option.defaultValue v1160 
                                    let v1174 : US32 =
                                        match v1161 with
                                        | US65_0(v1165, v1166, v1167, v1168, v1169, v1170) -> (* Some *)
                                            let v1171 : string = string v1165 + ": " + string v1169 + " - " + string v1170 + " (" + string v1166 + ")"
                                            US32_0(v1171)
                                        | _ ->
                                            US32_1
                                    let v1182 : string =
                                        match v1174 with
                                        | US32_1 -> (* None *)
                                            let v1176 : string = $"%A{()}"
                                            let v1179 : int64 = 400L
                                            method10(v1179, v1176)
                                        | US32_0(v1175) -> (* Some *)
                                            v1175
                                    US70_1(v1182)
                            | _ ->
                                let v1192 : string = $"%A{v1109}"
                                let v1195 : int64 = 400L
                                let v1196 : string = method10(v1195, v1192)
                                let v1197 : string = $"RPC Response: {v1196}"
                                US70_1(v1197)
                    let v1216 : string =
                        match v1205 with
                        | US70_1(v1213) -> (* Error *)
                            let v1214 : string = $"Error: {v1213}"
                            v1214
                        | US70_0(v1206) -> (* Ok *)
                            let v1207 : string = $"%A{v1206}"
                            let v1210 : int64 = 400L
                            let v1211 : string = method10(v1210, v1207)
                            let v1212 : string = $"RPC Response: {v1211}"
                            v1212
                    let v1217 : string = $"{v1080} / {v1216}"
                    let v1218 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1219 : string = "&*$0"
                    let v1220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1217 v1219 
                    let _v1218 = v1220 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1221 : string = "&*$0"
                    let v1222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1217 v1221 
                    let _v1218 = v1222 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1223 : string = "&*$0"
                    let v1224 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1217 v1223 
                    let _v1218 = v1224 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1225 : Ref<Str> = v1217 |> unbox<Ref<Str>>
                    let _v1218 = v1225 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1228 : Ref<Str> = v1217 |> unbox<Ref<Str>>
                    let _v1218 = v1228 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1231 : Ref<Str> = v1217 |> unbox<Ref<Str>>
                    let _v1218 = v1231 
                    #endif
#else
                    let v1234 : Ref<Str> = v1217 |> unbox<Ref<Str>>
                    let _v1218 = v1234 
                    #endif
                    let v1237 : Ref<Str> = _v1218 
                    let v1242 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1243 : string = "String::from($0)"
                    let v1244 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1237 v1243 
                    let _v1242 = v1244 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1245 : string = "String::from($0)"
                    let v1246 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1237 v1245 
                    let _v1242 = v1246 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1247 : string = "String::from($0)"
                    let v1248 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1237 v1247 
                    let _v1242 = v1248 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1249 : std_string_String = v1237 |> unbox<std_string_String>
                    let _v1242 = v1249 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1252 : std_string_String = v1237 |> unbox<std_string_String>
                    let _v1242 = v1252 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1255 : std_string_String = v1237 |> unbox<std_string_String>
                    let _v1242 = v1255 
                    #endif
#else
                    let v1258 : std_string_String = v1237 |> unbox<std_string_String>
                    let _v1242 = v1258 
                    #endif
                    let v1261 : std_string_String = _v1242 
                    let v1266 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v1267 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1261 v1266 
                    let v1268 : Vec<leptos_prelude_AnyView_> = method173(v1267)
                    let v1269 : string = "leptos::prelude::Fragment::new($0)"
                    let v1270 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1268 v1269 
                    let v1271 : string = "leptos::prelude::AnyView::from($0)"
                    let v1272 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1270 v1271 
                    let v1273 : string = "<" + v718 + " " + v1076 + ">move || { v1272 }</" + v718 + ">"
                    let v1274 : string = "leptos::prelude::view! { " + v1273 + " }"
                    let v1275 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1274 
                    let v1276 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1275 |> unbox
                    let v1277 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1278 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1276 v1277 
                    let v1279 : Vec<leptos_prelude_AnyView_> = method192(v724, v790, v856, v924, v1074, v1278)
                    let v1280 : string = "leptos::prelude::Fragment::new($0)"
                    let v1281 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1279 v1280 
                    let v1282 : string = "leptos::prelude::AnyView::from($0)"
                    let v1283 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1281 v1282 
                    let v1284 : string = "<" + v574 + " " + v605 + ">move || { v1283 }</" + v574 + ">"
                    let v1285 : string = "leptos::prelude::view! { " + v1284 + " }"
                    let v1286 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1285 
                    let v1287 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v1286 |> unbox
                    let v1288 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1289 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1287 v1288 
                    let v1290 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v1291 : bool = Fable.Core.RustInterop.emitRustExpr v1289 v1290 
                    let v1292 : string = "_vec_map"
                    let v1293 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1292 
                    let v1294 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1295 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1293 v1294 
                    let v1296 : Vec<leptos_prelude_AnyView_> = method173(v1295)
                    let v1297 : string = "leptos::prelude::Fragment::new($0)"
                    let v1298 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1296 v1297 
                    let v1299 : string = "class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\""
                    let v1300 : string = " " + v1299 + v184 + ""
                    let v1301 : string = "class=\"ltr:text-left rtl:text-right\""
                    let v1302 : string = " " + v1301 + v184 + ""
                    let v1303 : string = "leptos::prelude::AnyView::from($0)"
                    let v1304 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v583 v1303 
                    let v1305 : string = "thead"
                    let v1306 : string = "<" + v1305 + " " + v1302 + ">move || { v1304 }</" + v1305 + ">"
                    let v1307 : string = "leptos::prelude::view! { " + v1306 + " }"
                    let v1308 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1307 
                    let v1309 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Thead>> = v1308 |> unbox
                    let v1310 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1311 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1309 v1310 
                    let v1312 : string = "class=\"divide-y divide-gray-200 dark:divide-gray-700\""
                    let v1313 : string = " " + v1312 + v184 + ""
                    let v1314 : string = "leptos::prelude::AnyView::from($0)"
                    let v1315 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1298 v1314 
                    let v1316 : string = "tbody"
                    let v1317 : string = "<" + v1316 + " " + v1313 + ">move || { v1315 }</" + v1316 + ">"
                    let v1318 : string = "leptos::prelude::view! { " + v1317 + " }"
                    let v1319 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1318 
                    let v1320 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tbody>> = v1319 |> unbox
                    let v1321 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1322 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1320 v1321 
                    let v1323 : Vec<leptos_prelude_AnyView_> = method176(v1311, v1322)
                    let v1324 : string = "leptos::prelude::Fragment::new($0)"
                    let v1325 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1323 v1324 
                    let v1326 : string = "leptos::prelude::AnyView::from($0)"
                    let v1327 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1325 v1326 
                    let v1328 : string = "table"
                    let v1329 : string = "<" + v1328 + " " + v1300 + ">move || { v1327 }</" + v1328 + ">"
                    let v1330 : string = "leptos::prelude::view! { " + v1329 + " }"
                    let v1331 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1330 
                    let v1332 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Table>> = v1331 |> unbox
                    let v1333 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1334 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1332 v1333 
                    v1334
                | _ ->
                    let v1335 : string = "class=\"grid place-content-center py-[10vh]\""
                    let v1336 : string = ""
                    let v1337 : string = " " + v1335 + v1336 + ""
                    let v1338 : string = "class=\"flex flex-1 [gap:4px] items-center\""
                    let v1339 : string = " " + v1338 + v1336 + ""
                    let v1340 : string = "$0"
                    let v1341 : (unit -> string) = closure197()
                    let v1342 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1341 v1340 
                    let v1343 : string = "version=\"1.1\""
                    let v1344 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                    let v1345 : string = "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
                    let v1346 : string = "x=\"0px\""
                    let v1347 : string = "y=\"0px\""
                    let v1348 : string = "viewBox=\"0 0 24 30\""
                    let v1349 : string = "style=\"enable-background:new 0 0 50 50;\""
                    let v1350 : string = "xml:space=\"preserve\""
                    let v1351 : string = "class=move || \" \".to_owned() + &v1342(())"
                    let v1352 : string = " " + v1343 + v1336 + ""
                    let v1353 : string = " " + v1344 + v1352 + ""
                    let v1354 : string = " " + v1345 + v1353 + ""
                    let v1355 : string = " " + v1346 + v1354 + ""
                    let v1356 : string = " " + v1347 + v1355 + ""
                    let v1357 : string = " " + v1348 + v1356 + ""
                    let v1358 : string = " " + v1349 + v1357 + ""
                    let v1359 : string = " " + v1350 + v1358 + ""
                    let v1360 : string = " " + v1351 + v1359 + ""
                    let v1361 : string = "x=\"0\""
                    let v1362 : string = "y=\"10\""
                    let v1363 : string = "width=\"4\""
                    let v1364 : string = "height=\"10\""
                    let v1365 : string = "fill=\"#333\""
                    let v1366 : string = "opacity=\"0.2\""
                    let v1367 : string = " " + v1361 + v1336 + ""
                    let v1368 : string = " " + v1362 + v1367 + ""
                    let v1369 : string = " " + v1363 + v1368 + ""
                    let v1370 : string = " " + v1364 + v1369 + ""
                    let v1371 : string = " " + v1365 + v1370 + ""
                    let v1372 : string = " " + v1366 + v1371 + ""
                    let v1373 : string = "attributeName=\"opacity\""
                    let v1374 : string = "attributeType=\"XML\""
                    let v1375 : string = "values=\"0.2; 1; .2\""
                    let v1376 : string = "begin=\"0s\""
                    let v1377 : string = "dur=\"0.6s\""
                    let v1378 : string = "repeatCount=\"indefinite\""
                    let v1379 : string = " " + v1373 + v1336 + ""
                    let v1380 : string = " " + v1374 + v1379 + ""
                    let v1381 : string = " " + v1375 + v1380 + ""
                    let v1382 : string = " " + v1376 + v1381 + ""
                    let v1383 : string = " " + v1377 + v1382 + ""
                    let v1384 : string = " " + v1378 + v1383 + ""
                    let v1385 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1386 : string = "leptos::prelude::Fragment::new($0)"
                    let v1387 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1385 v1386 
                    let v1388 : string = "leptos::prelude::AnyView::from($0)"
                    let v1389 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1387 v1388 
                    let v1390 : string = "animate"
                    let v1391 : string = "<" + v1390 + " " + v1384 + ">move || { v1389 }</" + v1390 + ">"
                    let v1392 : string = "leptos::prelude::view! { " + v1391 + " }"
                    let v1393 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1392 
                    let v1394 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1393 |> unbox
                    let v1395 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1396 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1394 v1395 
                    let v1397 : string = "attributeName=\"height\""
                    let v1398 : string = "attributeType=\"XML\""
                    let v1399 : string = "values=\"10; 20; 10\""
                    let v1400 : string = "begin=\"0s\""
                    let v1401 : string = "dur=\"0.6s\""
                    let v1402 : string = "repeatCount=\"indefinite\""
                    let v1403 : string = " " + v1397 + v1336 + ""
                    let v1404 : string = " " + v1398 + v1403 + ""
                    let v1405 : string = " " + v1399 + v1404 + ""
                    let v1406 : string = " " + v1400 + v1405 + ""
                    let v1407 : string = " " + v1401 + v1406 + ""
                    let v1408 : string = " " + v1402 + v1407 + ""
                    let v1409 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1410 : string = "leptos::prelude::Fragment::new($0)"
                    let v1411 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1409 v1410 
                    let v1412 : string = "leptos::prelude::AnyView::from($0)"
                    let v1413 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1411 v1412 
                    let v1414 : string = "<" + v1390 + " " + v1408 + ">move || { v1413 }</" + v1390 + ">"
                    let v1415 : string = "leptos::prelude::view! { " + v1414 + " }"
                    let v1416 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1415 
                    let v1417 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1416 |> unbox
                    let v1418 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1419 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1417 v1418 
                    let v1420 : string = "attributeName=\"y\""
                    let v1421 : string = "attributeType=\"XML\""
                    let v1422 : string = "values=\"10; 5; 10\""
                    let v1423 : string = "begin=\"0s\""
                    let v1424 : string = "dur=\"0.6s\""
                    let v1425 : string = "repeatCount=\"indefinite\""
                    let v1426 : string = " " + v1420 + v1336 + ""
                    let v1427 : string = " " + v1421 + v1426 + ""
                    let v1428 : string = " " + v1422 + v1427 + ""
                    let v1429 : string = " " + v1423 + v1428 + ""
                    let v1430 : string = " " + v1424 + v1429 + ""
                    let v1431 : string = " " + v1425 + v1430 + ""
                    let v1432 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1433 : string = "leptos::prelude::Fragment::new($0)"
                    let v1434 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1432 v1433 
                    let v1435 : string = "leptos::prelude::AnyView::from($0)"
                    let v1436 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1434 v1435 
                    let v1437 : string = "<" + v1390 + " " + v1431 + ">move || { v1436 }</" + v1390 + ">"
                    let v1438 : string = "leptos::prelude::view! { " + v1437 + " }"
                    let v1439 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1438 
                    let v1440 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1439 |> unbox
                    let v1441 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1442 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1440 v1441 
                    let v1443 : Vec<leptos_prelude_AnyView_> = method186(v1396, v1419, v1442)
                    let v1444 : string = "leptos::prelude::Fragment::new($0)"
                    let v1445 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1443 v1444 
                    let v1446 : string = "leptos::prelude::AnyView::from($0)"
                    let v1447 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1445 v1446 
                    let v1448 : string = "rect"
                    let v1449 : string = "<" + v1448 + " " + v1372 + ">move || { v1447 }</" + v1448 + ">"
                    let v1450 : string = "leptos::prelude::view! { " + v1449 + " }"
                    let v1451 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1450 
                    let v1452 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v1451 |> unbox
                    let v1453 : string = "x=\"8\""
                    let v1454 : string = "y=\"10\""
                    let v1455 : string = "width=\"4\""
                    let v1456 : string = "height=\"10\""
                    let v1457 : string = "fill=\"#333\""
                    let v1458 : string = "opacity=\"0.2\""
                    let v1459 : string = " " + v1453 + v1336 + ""
                    let v1460 : string = " " + v1454 + v1459 + ""
                    let v1461 : string = " " + v1455 + v1460 + ""
                    let v1462 : string = " " + v1456 + v1461 + ""
                    let v1463 : string = " " + v1457 + v1462 + ""
                    let v1464 : string = " " + v1458 + v1463 + ""
                    let v1465 : string = "attributeName=\"opacity\""
                    let v1466 : string = "attributeType=\"XML\""
                    let v1467 : string = "values=\"0.2; 1; .2\""
                    let v1468 : string = "begin=\"0.15s\""
                    let v1469 : string = "dur=\"0.6s\""
                    let v1470 : string = "repeatCount=\"indefinite\""
                    let v1471 : string = " " + v1465 + v1336 + ""
                    let v1472 : string = " " + v1466 + v1471 + ""
                    let v1473 : string = " " + v1467 + v1472 + ""
                    let v1474 : string = " " + v1468 + v1473 + ""
                    let v1475 : string = " " + v1469 + v1474 + ""
                    let v1476 : string = " " + v1470 + v1475 + ""
                    let v1477 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1478 : string = "leptos::prelude::Fragment::new($0)"
                    let v1479 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1477 v1478 
                    let v1480 : string = "leptos::prelude::AnyView::from($0)"
                    let v1481 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1479 v1480 
                    let v1482 : string = "<" + v1390 + " " + v1476 + ">move || { v1481 }</" + v1390 + ">"
                    let v1483 : string = "leptos::prelude::view! { " + v1482 + " }"
                    let v1484 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1483 
                    let v1485 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1484 |> unbox
                    let v1486 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1487 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1485 v1486 
                    let v1488 : string = "attributeName=\"opacity\""
                    let v1489 : string = "attributeType=\"XML\""
                    let v1490 : string = "values=\"10; 20; 10\""
                    let v1491 : string = "begin=\"0.15s\""
                    let v1492 : string = "dur=\"0.6s\""
                    let v1493 : string = "repeatCount=\"indefinite\""
                    let v1494 : string = " " + v1488 + v1336 + ""
                    let v1495 : string = " " + v1489 + v1494 + ""
                    let v1496 : string = " " + v1490 + v1495 + ""
                    let v1497 : string = " " + v1491 + v1496 + ""
                    let v1498 : string = " " + v1492 + v1497 + ""
                    let v1499 : string = " " + v1493 + v1498 + ""
                    let v1500 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1501 : string = "leptos::prelude::Fragment::new($0)"
                    let v1502 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1500 v1501 
                    let v1503 : string = "leptos::prelude::AnyView::from($0)"
                    let v1504 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1502 v1503 
                    let v1505 : string = "<" + v1390 + " " + v1499 + ">move || { v1504 }</" + v1390 + ">"
                    let v1506 : string = "leptos::prelude::view! { " + v1505 + " }"
                    let v1507 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1506 
                    let v1508 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1507 |> unbox
                    let v1509 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1510 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1508 v1509 
                    let v1511 : string = "attributeName=\"y\""
                    let v1512 : string = "attributeType=\"XML\""
                    let v1513 : string = "values=\"10; 5; 10\""
                    let v1514 : string = "begin=\"0.15s\""
                    let v1515 : string = "dur=\"0.6s\""
                    let v1516 : string = "repeatCount=\"indefinite\""
                    let v1517 : string = " " + v1511 + v1336 + ""
                    let v1518 : string = " " + v1512 + v1517 + ""
                    let v1519 : string = " " + v1513 + v1518 + ""
                    let v1520 : string = " " + v1514 + v1519 + ""
                    let v1521 : string = " " + v1515 + v1520 + ""
                    let v1522 : string = " " + v1516 + v1521 + ""
                    let v1523 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1524 : string = "leptos::prelude::Fragment::new($0)"
                    let v1525 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1523 v1524 
                    let v1526 : string = "leptos::prelude::AnyView::from($0)"
                    let v1527 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1525 v1526 
                    let v1528 : string = "<" + v1390 + " " + v1522 + ">move || { v1527 }</" + v1390 + ">"
                    let v1529 : string = "leptos::prelude::view! { " + v1528 + " }"
                    let v1530 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1529 
                    let v1531 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1530 |> unbox
                    let v1532 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1533 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1531 v1532 
                    let v1534 : Vec<leptos_prelude_AnyView_> = method186(v1487, v1510, v1533)
                    let v1535 : string = "leptos::prelude::Fragment::new($0)"
                    let v1536 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1534 v1535 
                    let v1537 : string = "leptos::prelude::AnyView::from($0)"
                    let v1538 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1536 v1537 
                    let v1539 : string = "<" + v1448 + " " + v1464 + ">move || { v1538 }</" + v1448 + ">"
                    let v1540 : string = "leptos::prelude::view! { " + v1539 + " }"
                    let v1541 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1540 
                    let v1542 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v1541 |> unbox
                    let v1543 : string = "x=\"16\""
                    let v1544 : string = "y=\"10\""
                    let v1545 : string = "width=\"4\""
                    let v1546 : string = "height=\"10\""
                    let v1547 : string = "fill=\"#333\""
                    let v1548 : string = "opacity=\"0.2\""
                    let v1549 : string = " " + v1543 + v1336 + ""
                    let v1550 : string = " " + v1544 + v1549 + ""
                    let v1551 : string = " " + v1545 + v1550 + ""
                    let v1552 : string = " " + v1546 + v1551 + ""
                    let v1553 : string = " " + v1547 + v1552 + ""
                    let v1554 : string = " " + v1548 + v1553 + ""
                    let v1555 : string = "attributeName=\"opacity\""
                    let v1556 : string = "attributeType=\"XML\""
                    let v1557 : string = "values=\"0.2; 1; .2\""
                    let v1558 : string = "begin=\"0.3s\""
                    let v1559 : string = "dur=\"0.6s\""
                    let v1560 : string = "repeatCount=\"indefinite\""
                    let v1561 : string = " " + v1555 + v1336 + ""
                    let v1562 : string = " " + v1556 + v1561 + ""
                    let v1563 : string = " " + v1557 + v1562 + ""
                    let v1564 : string = " " + v1558 + v1563 + ""
                    let v1565 : string = " " + v1559 + v1564 + ""
                    let v1566 : string = " " + v1560 + v1565 + ""
                    let v1567 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1568 : string = "leptos::prelude::Fragment::new($0)"
                    let v1569 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1567 v1568 
                    let v1570 : string = "leptos::prelude::AnyView::from($0)"
                    let v1571 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1569 v1570 
                    let v1572 : string = "<" + v1390 + " " + v1566 + ">move || { v1571 }</" + v1390 + ">"
                    let v1573 : string = "leptos::prelude::view! { " + v1572 + " }"
                    let v1574 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1573 
                    let v1575 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1574 |> unbox
                    let v1576 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1577 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1575 v1576 
                    let v1578 : string = "attributeName=\"height\""
                    let v1579 : string = "attributeType=\"XML\""
                    let v1580 : string = "values=\"10; 20; 10\""
                    let v1581 : string = "begin=\"0.3s\""
                    let v1582 : string = "dur=\"0.6s\""
                    let v1583 : string = "repeatCount=\"indefinite\""
                    let v1584 : string = " " + v1578 + v1336 + ""
                    let v1585 : string = " " + v1579 + v1584 + ""
                    let v1586 : string = " " + v1580 + v1585 + ""
                    let v1587 : string = " " + v1581 + v1586 + ""
                    let v1588 : string = " " + v1582 + v1587 + ""
                    let v1589 : string = " " + v1583 + v1588 + ""
                    let v1590 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1591 : string = "leptos::prelude::Fragment::new($0)"
                    let v1592 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1590 v1591 
                    let v1593 : string = "leptos::prelude::AnyView::from($0)"
                    let v1594 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1592 v1593 
                    let v1595 : string = "<" + v1390 + " " + v1589 + ">move || { v1594 }</" + v1390 + ">"
                    let v1596 : string = "leptos::prelude::view! { " + v1595 + " }"
                    let v1597 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1596 
                    let v1598 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1597 |> unbox
                    let v1599 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1600 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1598 v1599 
                    let v1601 : string = "attributeName=\"y\""
                    let v1602 : string = "attributeType=\"XML\""
                    let v1603 : string = "values=\"10; 5; 10\""
                    let v1604 : string = "begin=\"0.3s\""
                    let v1605 : string = "dur=\"0.6s\""
                    let v1606 : string = "repeatCount=\"indefinite\""
                    let v1607 : string = " " + v1601 + v1336 + ""
                    let v1608 : string = " " + v1602 + v1607 + ""
                    let v1609 : string = " " + v1603 + v1608 + ""
                    let v1610 : string = " " + v1604 + v1609 + ""
                    let v1611 : string = " " + v1605 + v1610 + ""
                    let v1612 : string = " " + v1606 + v1611 + ""
                    let v1613 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1614 : string = "leptos::prelude::Fragment::new($0)"
                    let v1615 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1613 v1614 
                    let v1616 : string = "leptos::prelude::AnyView::from($0)"
                    let v1617 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1615 v1616 
                    let v1618 : string = "<" + v1390 + " " + v1612 + ">move || { v1617 }</" + v1390 + ">"
                    let v1619 : string = "leptos::prelude::view! { " + v1618 + " }"
                    let v1620 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1619 
                    let v1621 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1620 |> unbox
                    let v1622 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1623 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1621 v1622 
                    let v1624 : Vec<leptos_prelude_AnyView_> = method186(v1577, v1600, v1623)
                    let v1625 : string = "leptos::prelude::Fragment::new($0)"
                    let v1626 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1624 v1625 
                    let v1627 : string = "leptos::prelude::AnyView::from($0)"
                    let v1628 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1626 v1627 
                    let v1629 : string = "<" + v1448 + " " + v1554 + ">move || { v1628 }</" + v1448 + ">"
                    let v1630 : string = "leptos::prelude::view! { " + v1629 + " }"
                    let v1631 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1630 
                    let v1632 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v1631 |> unbox
                    let v1633 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1634 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1632 v1633 
                    let v1635 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1636 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1542 v1635 
                    let v1637 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1638 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1452 v1637 
                    let v1639 : Vec<leptos_prelude_AnyView_> = method186(v1638, v1636, v1634)
                    let v1640 : string = "leptos::prelude::Fragment::new($0)"
                    let v1641 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1639 v1640 
                    let v1642 : string = "leptos::prelude::AnyView::from($0)"
                    let v1643 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1641 v1642 
                    let v1644 : string = "svg"
                    let v1645 : string = "<" + v1644 + " " + v1360 + ">move || { v1643 }</" + v1644 + ">"
                    let v1646 : string = "leptos::prelude::view! { " + v1645 + " }"
                    let v1647 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1646 
                    let v1648 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1647 |> unbox
                    let v1649 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1650 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1648 v1649 
                    let v1651 : string = "Loading..."
                    let v1652 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1653 : string = "&*$0"
                    let v1654 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1651 v1653 
                    let _v1652 = v1654 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1655 : string = "&*$0"
                    let v1656 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1651 v1655 
                    let _v1652 = v1656 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1657 : string = "&*$0"
                    let v1658 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1651 v1657 
                    let _v1652 = v1658 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1659 : Ref<Str> = v1651 |> unbox<Ref<Str>>
                    let _v1652 = v1659 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1662 : Ref<Str> = v1651 |> unbox<Ref<Str>>
                    let _v1652 = v1662 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1665 : Ref<Str> = v1651 |> unbox<Ref<Str>>
                    let _v1652 = v1665 
                    #endif
#else
                    let v1668 : Ref<Str> = v1651 |> unbox<Ref<Str>>
                    let _v1652 = v1668 
                    #endif
                    let v1671 : Ref<Str> = _v1652 
                    let v1676 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1677 : string = "String::from($0)"
                    let v1678 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1671 v1677 
                    let _v1676 = v1678 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1679 : string = "String::from($0)"
                    let v1680 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1671 v1679 
                    let _v1676 = v1680 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1681 : string = "String::from($0)"
                    let v1682 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1671 v1681 
                    let _v1676 = v1682 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1683 : std_string_String = v1671 |> unbox<std_string_String>
                    let _v1676 = v1683 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1686 : std_string_String = v1671 |> unbox<std_string_String>
                    let _v1676 = v1686 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1689 : std_string_String = v1671 |> unbox<std_string_String>
                    let _v1676 = v1689 
                    #endif
#else
                    let v1692 : std_string_String = v1671 |> unbox<std_string_String>
                    let _v1676 = v1692 
                    #endif
                    let v1695 : std_string_String = _v1676 
                    let v1700 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v1701 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1695 v1700 
                    let v1702 : Vec<leptos_prelude_AnyView_> = method176(v1650, v1701)
                    let v1703 : string = "leptos::prelude::Fragment::new($0)"
                    let v1704 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1702 v1703 
                    let v1705 : string = "leptos::prelude::AnyView::from($0)"
                    let v1706 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1704 v1705 
                    let v1707 : string = "div"
                    let v1708 : string = "<" + v1707 + " " + v1339 + ">move || { v1706 }</" + v1707 + ">"
                    let v1709 : string = "leptos::prelude::view! { " + v1708 + " }"
                    let v1710 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1709 
                    let v1711 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1710 |> unbox
                    let v1712 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1713 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1711 v1712 
                    let v1714 : Vec<leptos_prelude_AnyView_> = method173(v1713)
                    let v1715 : string = "leptos::prelude::Fragment::new($0)"
                    let v1716 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1714 v1715 
                    let v1717 : string = "leptos::prelude::AnyView::from($0)"
                    let v1718 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1716 v1717 
                    let v1719 : string = "<" + v1707 + " " + v1337 + ">move || { v1718 }</" + v1707 + ">"
                    let v1720 : string = "leptos::prelude::view! { " + v1719 + " }"
                    let v1721 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1720 
                    let v1722 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1721 |> unbox
                    let v1723 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1724 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1722 v1723 
                    v1724
    let v1869 : Vec<leptos_prelude_AnyView_> = method173(v1868)
    let v1870 : string = "leptos::prelude::Fragment::new($0)"
    let v1871 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1869 v1870 
    v1871
and closure200 (v0 : int32) (v1 : (bool * std_string_String)) : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) =
    let v2 : string = $"leptos::prelude::signal($0)"
    let struct (v3 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v4 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v5 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = v0, struct (v3, v4) 
    v5
and closure199 () (v0 : int32) : ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) =
    closure200(v0)
and method196 () : (int32 -> ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)))) =
    closure199()
and method197 (v0 : Vec<(bool * std_string_String)>) : Vec<(bool * std_string_String)> =
    v0
and closure198 (v0 : Heap2) () : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : Vec<(bool * std_string_String)> = v6.l0
    let v8 : (int32 -> ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)))) = method196()
    let v9 : Vec<(bool * std_string_String)> = method197(v7)
    let v10 : string = "v9.iter().enumerate().map(|(i, x)| v8(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v11 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v10 
    v11
and closure202 () (v0 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>) =
    let (a, b) = v0 
    let v1 : int32 = a
    let struct (v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v3 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    struct (v1, v2, v3)
and closure203 (v0 : int32) struct (v1 : int32, v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v3 : leptos_prelude_WriteSignal<(bool * std_string_String)>) : struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) =
    struct (v0, v1, v2)
and closure201 (v0 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v1 : leptos_prelude_ReadSignal<int32>) () : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> =
    let v2 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v3 : int32 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"$0()"
    let v5 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v7 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = closure202()
    let v8 : Vec<struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    let v9 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v10 : (struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>) -> struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)) = closure203(v3)
    let v11 : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr struct (v8, v10) v9 
    v11
and closure204 (v0 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>) () : int32 =
    let v1 : string = $"$0()"
    let v2 : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v4 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) []) = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : int32 = v4.Length
    v5
and method198 (v0 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) =
    v0
and method199 (v0 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    v0
and closure208 () (v0 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : (bool * std_string_String) =
    let (a, b) = v0 
    let v1 : int32 = a
    let struct (v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v3 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    let v10 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v11 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v2 v10 
    v11
and closure207 (v0 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>) (v1 : Heap0) : Heap0 =
    let v2 : Vec<(bool * std_string_String)> = v1.l0
    let v3 : std_string_String option = v1.l1
    let v4 : int32 = v1.l2
    let v5 : int32 = v1.l3
    let v6 : US1 = v1.l4
    let v7 : string = $"$0()"
    let v8 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v10 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) []) = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : int32 = v10.Length
    let v12 : string = ""
    let v13 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v14 
    let _v13 = v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v16 
    let _v13 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v18 : string = "&*$0"
    let v19 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v18 
    let _v13 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _v13 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _v13 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _v13 = v26 
    #endif
#else
    let v29 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _v13 = v29 
    #endif
    let v32 : Ref<Str> = _v13 
    let v37 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : string = "String::from($0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v38 
    let _v37 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v40 
    let _v37 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "String::from($0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v42 
    let _v37 = v43 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : std_string_String = v32 |> unbox<std_string_String>
    let _v37 = v44 
    #endif
#if FABLE_COMPILER_PYTHON
    let v47 : std_string_String = v32 |> unbox<std_string_String>
    let _v37 = v47 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v32 |> unbox<std_string_String>
    let _v37 = v50 
    #endif
#else
    let v53 : std_string_String = v32 |> unbox<std_string_String>
    let _v37 = v53 
    #endif
    let v56 : std_string_String = _v37 
    let v61 : (bool * std_string_String) = false, v56 
    let v62 : string = $"leptos::prelude::signal($0)"
    let struct (v63 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v64 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v65 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = v11, struct (v63, v64) 
    let v66 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = method198(v65)
    let v67 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = method199(v8)
    let v68 : string = "true; let mut v67 = v67"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "true; v67.push(v66)"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "v67"
    let v73 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v75 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> (bool * std_string_String)) = closure208()
    let v76 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v73, v75) v74 
    {l0 = v76; l1 = v3; l2 = v4; l3 = v5; l4 = v6} : Heap0
and closure209 () (v0 : int32) : int32 =
    let v1 : int32 = 1 + v0
    v1
and closure206 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v2 : leptos_prelude_WriteSignal<int32>) () : unit =
    let v3 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v4 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_RwSignal<Heap0> = v5.l3
    let v7 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : TypeEmit<Heap0> = null |> unbox<TypeEmit<Heap0>>
    let v12 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v13 : (Heap0 -> Heap0) = closure207(v1)
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v13 v12 
    let v15 : string = $"true; leptos::prelude::WriteSignal::update(&$0, |x: &mut /*"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr v2 v15 
    let v17 : TypeEmit<int32> = null |> unbox<TypeEmit<int32>>
    let v20 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v21 : (int32 -> int32) = closure209()
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr v21 v20 
    ()
and closure205 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v2 : leptos_prelude_WriteSignal<int32>) () : unit =
    let v3 : string = "true; leptos::batch(move || $0());"
    let v4 : (unit -> unit) = closure206(v0, v1, v2)
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v4 v3 
    ()
and closure210 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure211 () () : std_string_String =
    let v0 : string = " bg-gray-300 hover:bg-gray-200"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure212 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure213 (v0 : leptos_prelude_AnyView_) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = "[margin-right:40px]"
    let v2 : string = "r#\"" + v1 + "\"#"
    let v3 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v2 
    v3
and closure214 () () : string =
    let v0 : string = "Accounts"
    v0
and method200 (v0 : leptos_prelude_AnyView_) : (unit -> string) =
    closure214()
and method201 (v0 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>) : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>> =
    v0
and closure216 () struct (v0 : int32, v1 : int32, v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : struct (int32 * int32) =
    struct (v0, v1)
and method202 () : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> struct (int32 * int32)) =
    closure216()
and method204 (v0 : int32) : int32 =
    v0
and closure218 (v0 : int32) () : std_string_String =
    let v1 : string = "account-" + string v0 + ""
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    v45
and method206 (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure221 (v0 : int32, v1 : int32) (v2 : (bool * std_string_String)) : (bool * std_string_String) =
    let v3 : bool = v1 = v0
    let v4 : bool = method206(v3)
    if v4 then
        v2
    else
        let (a, b) = v2 
        let v5 : bool = a
        let v6 : std_string_String = b
        let v11 : bool = v5 = false
        let v12 : (bool * std_string_String) = v11, v6 
        v12
and closure220 (v0 : int32) (v1 : int32) : ((bool * std_string_String) -> (bool * std_string_String)) =
    closure221(v0, v1)
and method205 (v0 : int32) : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) =
    closure220(v0)
and closure219 (v0 : Heap2, v1 : int32) (v2 : leptos_ev_Event) : unit =
    let v3 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v4 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_RwSignal<Heap0> = v5.l3
    let v7 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v8 : Heap0 = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : Vec<(bool * std_string_String)> = v8.l0
    let v10 : std_string_String option = v8.l1
    let v11 : int32 = v8.l2
    let v12 : int32 = v8.l3
    let v13 : US1 = v8.l4
    let v14 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v15 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v16 : Heap1 = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : leptos_prelude_RwSignal<Heap0> = v16.l3
    let v18 : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) = method205(v1)
    let v19 : Vec<(bool * std_string_String)> = method197(v9)
    let v20 : string = "v19.iter().enumerate().map(|(i, x)| v18(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v21 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : Heap0 = {l0 = v21; l1 = v10; l2 = v11; l3 = v12; l4 = v13} : Heap0
    let v23 : string = $"true; leptos::prelude::RwSignal::set(&$0, $1);"
    let v24 : bool = Fable.Core.RustInterop.emitRustExpr struct (v17, v22) v23 
    ()
and closure222 (v0 : leptos_prelude_ReadSignal<(bool * std_string_String)>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let (a, b) = v2 
    let v3 : bool = a
    let v4 : std_string_String = b
    v3
and method207 (v0 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : (unit -> bool) =
    closure222(v0)
and method208 (v0 : int32) : (unit -> std_string_String) =
    closure218(v0)
and method210 (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure224 (v0 : int32, v1 : std_string_String, v2 : int32) (v3 : (bool * std_string_String)) : (bool * std_string_String) =
    let v4 : bool = v2 = v0
    let v5 : bool = method210(v4)
    if v5 then
        v3
    else
        let (a, b) = v3 
        let v6 : bool = a
        let v7 : std_string_String = b
        let v12 : (bool * std_string_String) = v6, v1 
        v12
and closure223 (v0 : int32, v1 : std_string_String) (v2 : int32) : ((bool * std_string_String) -> (bool * std_string_String)) =
    closure224(v0, v1, v2)
and method209 (v0 : int32, v1 : std_string_String) : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) =
    closure223(v0, v1)
and closure225 () () : string =
    let v0 : string = "flex-1"
    v0
and method211 (v0 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    v0
and closure230 () (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and method213 () : (bool -> bool) =
    closure230()
and closure229 (v0 : int32) (v1 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : bool =
    let (a, b) = v1 
    let v2 : int32 = a
    let struct (v3 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v4 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    let v11 : bool = v2 = v0
    let v12 : (bool -> bool) = method213()
    v12 v11
and method212 (v0 : int32) : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> bool) =
    closure229(v0)
and closure228 (v0 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v1 : int32) (v2 : Heap0) : Heap0 =
    let v3 : Vec<(bool * std_string_String)> = v2.l0
    let v4 : std_string_String option = v2.l1
    let v5 : int32 = v2.l2
    let v6 : int32 = v2.l3
    let v7 : US1 = v2.l4
    let v8 : string = $"$0()"
    let v9 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = method211(v9)
    let v11 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> bool) = method212(v1)
    let v12 : string = "true; let mut v10 = v10"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "true; v10.retain(|x| v11(x.clone()))"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "v10"
    let v17 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v19 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> (bool * std_string_String)) = closure208()
    let v20 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v17, v19) v18 
    {l0 = v20; l1 = v4; l2 = v5; l3 = v6; l4 = v7} : Heap0
and closure227 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v2 : leptos_prelude_WriteSignal<int32>, v3 : int32) () : unit =
    let v4 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v5 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v6 : Heap1 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : leptos_prelude_RwSignal<Heap0> = v6.l3
    let v8 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : TypeEmit<Heap0> = null |> unbox<TypeEmit<Heap0>>
    let v13 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v14 : (Heap0 -> Heap0) = closure228(v1, v3)
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v14 v13 
    let v16 : string = $"true; leptos::prelude::WriteSignal::update(&$0, |x: &mut /*"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr v2 v16 
    let v18 : TypeEmit<int32> = null |> unbox<TypeEmit<int32>>
    let v21 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v22 : (int32 -> int32) = closure209()
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr v22 v21 
    ()
and closure226 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v2 : leptos_prelude_WriteSignal<int32>, v3 : int32) () : unit =
    let v4 : string = "true; leptos::batch(move || $0());"
    let v5 : (unit -> unit) = closure227(v0, v1, v2, v3)
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v5 v4 
    ()
and closure231 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure232 () () : std_string_String =
    let v0 : string = " pr-[7px] pl-[5px]"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure217 (v0 : Heap2, v1 : leptos_prelude_Memo<int32>, v2 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v3 : leptos_prelude_WriteSignal<int32>) struct (v4 : int32, v5 : int32, v6 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : leptos_dom_Fragment =
    let v7 : string = "class=\"flex gap-[8px] [align-items:center]\""
    let v8 : string = ""
    let v9 : string = " " + v7 + v8 + ""
    let v10 : int32 = method204(v5)
    let v11 : (unit -> std_string_String) = closure218(v10)
    let v12 : string = "let v11 = $0"
    Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v13 : string = "for=move || v11()"
    let v14 : string = "class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\""
    let v15 : string = " " + v13 + v8 + ""
    let v16 : string = " " + v14 + v15 + ""
    let v17 : (leptos_ev_Event -> unit) = closure219(v0, v10)
    let v18 : string = "let v17 = $0"
    Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v19 : (unit -> bool) = method207(v6)
    let v20 : (unit -> std_string_String) = method208(v10)
    let v21 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v22 : string = "type=\"checkbox\""
    let v23 : string = "id=move || v20()"
    let v24 : string = "on:change=move |event| v17(event)"
    let v25 : string = "prop:checked=move || v19()"
    let v26 : string = " " + v21 + v8 + ""
    let v27 : string = " " + v22 + v26 + ""
    let v28 : string = " " + v23 + v27 + ""
    let v29 : string = " " + v24 + v28 + ""
    let v30 : string = " " + v25 + v29 + ""
    let v31 : string = "input"
    let v32 : string = "<" + v31 + " " + v30 + " />"
    let v33 : string = "leptos::prelude::view! { " + v32 + " }"
    let v34 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v34 |> unbox
    let v36 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v39 : string = " " + v38 + v8 + ""
    let v40 : string = "data-unchecked-icon"
    let v41 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v42 : string = "class=\"h-4 w-4\""
    let v43 : string = "viewBox=\"0 0 20 20\""
    let v44 : string = "fill=\"currentColor\""
    let v45 : string = " " + v40 + v8 + ""
    let v46 : string = " " + v41 + v45 + ""
    let v47 : string = " " + v42 + v46 + ""
    let v48 : string = " " + v43 + v47 + ""
    let v49 : string = " " + v44 + v48 + ""
    let v50 : string = "fill-rule=\"evenodd\""
    let v51 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v52 : string = "clip-rule=\"evenodd\""
    let v53 : string = " " + v50 + v8 + ""
    let v54 : string = " " + v51 + v53 + ""
    let v55 : string = " " + v52 + v54 + ""
    let v56 : Vec<leptos_prelude_AnyView_> = method172()
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : string = "leptos::prelude::AnyView::from($0)"
    let v60 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "path"
    let v62 : string = "<" + v61 + " " + v55 + ">move || { v60 }</" + v61 + ">"
    let v63 : string = "leptos::prelude::view! { " + v62 + " }"
    let v64 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v63 
    let v65 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v64 |> unbox
    let v66 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v67 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v65 v66 
    let v68 : Vec<leptos_prelude_AnyView_> = method173(v67)
    let v69 : string = "leptos::prelude::Fragment::new($0)"
    let v70 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "leptos::prelude::AnyView::from($0)"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : string = "svg"
    let v74 : string = "<" + v73 + " " + v49 + ">move || { v72 }</" + v73 + ">"
    let v75 : string = "leptos::prelude::view! { " + v74 + " }"
    let v76 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v75 
    let v77 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v76 |> unbox
    let v78 : string = "data-checked-icon"
    let v79 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v80 : string = "class=\"hidden h-4 w-4\""
    let v81 : string = "viewBox=\"0 0 20 20\""
    let v82 : string = "fill=\"currentColor\""
    let v83 : string = " " + v78 + v8 + ""
    let v84 : string = " " + v79 + v83 + ""
    let v85 : string = " " + v80 + v84 + ""
    let v86 : string = " " + v81 + v85 + ""
    let v87 : string = " " + v82 + v86 + ""
    let v88 : string = "fill-rule=\"evenodd\""
    let v89 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v90 : string = "clip-rule=\"evenodd\""
    let v91 : string = " " + v88 + v8 + ""
    let v92 : string = " " + v89 + v91 + ""
    let v93 : string = " " + v90 + v92 + ""
    let v94 : Vec<leptos_prelude_AnyView_> = method172()
    let v95 : string = "leptos::prelude::Fragment::new($0)"
    let v96 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v94 v95 
    let v97 : string = "leptos::prelude::AnyView::from($0)"
    let v98 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = "<" + v61 + " " + v93 + ">move || { v98 }</" + v61 + ">"
    let v100 : string = "leptos::prelude::view! { " + v99 + " }"
    let v101 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v101 |> unbox
    let v103 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v104 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : Vec<leptos_prelude_AnyView_> = method173(v104)
    let v106 : string = "leptos::prelude::Fragment::new($0)"
    let v107 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "leptos::prelude::AnyView::from($0)"
    let v109 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v107 v108 
    let v110 : string = "<" + v73 + " " + v87 + ">move || { v109 }</" + v73 + ">"
    let v111 : string = "leptos::prelude::view! { " + v110 + " }"
    let v112 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v111 
    let v113 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v112 |> unbox
    let v114 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v115 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v113 v114 
    let v116 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v117 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v116 
    let v118 : Vec<leptos_prelude_AnyView_> = method176(v117, v115)
    let v119 : string = "leptos::prelude::Fragment::new($0)"
    let v120 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v118 v119 
    let v121 : string = "leptos::prelude::AnyView::from($0)"
    let v122 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v120 v121 
    let v123 : string = "span"
    let v124 : string = "<" + v123 + " " + v39 + ">move || { v122 }</" + v123 + ">"
    let v125 : string = "leptos::prelude::view! { " + v124 + " }"
    let v126 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v125 
    let v127 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v126 |> unbox
    let v128 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v129 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let v130 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v131 : string = " " + v130 + v8 + ""
    let v132 : Vec<leptos_prelude_AnyView_> = method172()
    let v133 : string = "leptos::prelude::Fragment::new($0)"
    let v134 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v132 v133 
    let v135 : string = "leptos::prelude::AnyView::from($0)"
    let v136 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let v137 : string = "<" + v123 + " " + v131 + ">move || { v136 }</" + v123 + ">"
    let v138 : string = "leptos::prelude::view! { " + v137 + " }"
    let v139 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v138 
    let v140 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v139 |> unbox
    let v141 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v142 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v140 v141 
    let v143 : Vec<leptos_prelude_AnyView_> = method186(v37, v129, v142)
    let v144 : string = "leptos::prelude::Fragment::new($0)"
    let v145 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v146 : string = "leptos::prelude::AnyView::from($0)"
    let v147 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v145 v146 
    let v148 : string = "label"
    let v149 : string = "<" + v148 + " " + v16 + ">move || { v147 }</" + v148 + ">"
    let v150 : string = "leptos::prelude::view! { " + v149 + " }"
    let v151 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v150 
    let v152 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v151 |> unbox
    let v153 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v154 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v152 v153 
    let v155 : string = $"true; let getter = Func0::from(move || {{ //"
    let v156 : bool = Fable.Core.RustInterop.emitRustExpr () v155 
    let v157 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v158 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v6 v157 
    let (a, b) = v158 
    let v159 : bool = a
    let v160 : std_string_String = b
    let v165 : string = $"true; $0 /*"
    let v166 : bool = Fable.Core.RustInterop.emitRustExpr v160 v165 
    let v167 : string = $"*/ }}); //"
    let v168 : bool = Fable.Core.RustInterop.emitRustExpr () v167 
    let v169 : string = $"getter"
    let v170 : Func0<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v169 
    let v171 : string = $"true; let setter = Func1::from(move |value| {{ //"
    let v172 : bool = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : string = $"value"
    let v174 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v173 
    let v175 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v176 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v177 : Heap1 = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : leptos_prelude_RwSignal<Heap0> = v177.l3
    let v179 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v180 : Heap0 = Fable.Core.RustInterop.emitRustExpr v178 v179 
    let v181 : Vec<(bool * std_string_String)> = v180.l0
    let v182 : std_string_String option = v180.l1
    let v183 : int32 = v180.l2
    let v184 : int32 = v180.l3
    let v185 : US1 = v180.l4
    let v186 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v187 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v188 : Heap1 = Fable.Core.RustInterop.emitRustExpr v186 v187 
    let v189 : leptos_prelude_RwSignal<Heap0> = v188.l3
    let v190 : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) = method209(v10, v174)
    let v191 : Vec<(bool * std_string_String)> = method197(v181)
    let v192 : string = "v191.iter().enumerate().map(|(i, x)| v190(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v193 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v192 
    let v194 : Heap0 = {l0 = v193; l1 = v182; l2 = v183; l3 = v184; l4 = v185} : Heap0
    let v195 : string = $"true; leptos::prelude::RwSignal::set(&$0, $1);"
    let v196 : bool = Fable.Core.RustInterop.emitRustExpr struct (v189, v194) v195 
    let v197 : string = $"true; $0 /*"
    let v198 : bool = Fable.Core.RustInterop.emitRustExpr () v197 
    let v199 : string = $"*/ }}); //"
    let v200 : bool = Fable.Core.RustInterop.emitRustExpr () v199 
    let v201 : string = $"setter"
    let v202 : Func0<std_string_String, unit> = Fable.Core.RustInterop.emitRustExpr () v201 
    let v203 : string = "$0"
    let v204 : (unit -> string) = closure225()
    let v205 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v204 v203 
    let v206 : string = "class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v205(())"
    let v207 : string = "prop:value=move || v170()"
    let v208 : string = "on:keyup=move |event: web_sys::KeyboardEvent| v202(leptos::prelude::event_target_value(&event))"
    let v209 : string = " " + v206 + v8 + ""
    let v210 : string = " " + v207 + v209 + ""
    let v211 : string = " " + v208 + v210 + ""
    let v212 : string = "<" + v31 + " " + v211 + " />"
    let v213 : string = "leptos::prelude::view! { " + v212 + " }"
    let v214 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v213 
    let v215 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v214 |> unbox
    let v216 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v217 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v215 v216 
    let v218 : string = $"$0()"
    let v219 : int32 = Fable.Core.RustInterop.emitRustExpr v1 v218 
    let v220 : bool = v219 = 1
    let v290 : leptos_prelude_AnyView_ =
        if v220 then
            let v221 : Vec<leptos_prelude_AnyView_> = method172()
            let v222 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v223 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v221 v222 
            v223
        else
            let v224 : (unit -> unit) = closure226(v0, v2, v3, v10)
            let v225 : string = "let v224 = $0"
            Fable.Core.RustInterop.emitRustExpr v224 v225 
            let v226 : string = "$0"
            let v227 : (unit -> string) = closure231()
            let v228 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v227 v226 
            let v229 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v230 : string = "fill=\"none\""
            let v231 : string = "viewBox=\"0 0 24 24\""
            let v232 : string = "stroke-width=\"1.5\""
            let v233 : string = "stroke=\"currentColor\""
            let v234 : string = "class=move || \" \".to_owned() + &v228(())"
            let v235 : string = " " + v229 + v8 + ""
            let v236 : string = " " + v230 + v235 + ""
            let v237 : string = " " + v231 + v236 + ""
            let v238 : string = " " + v232 + v237 + ""
            let v239 : string = " " + v233 + v238 + ""
            let v240 : string = " " + v234 + v239 + ""
            let v241 : string = "stroke-linecap=\"round\""
            let v242 : string = "stroke-linejoin=\"round\""
            let v243 : string = "d=\"M6 6l12 12m0-12L6 18\""
            let v244 : string = " " + v241 + v8 + ""
            let v245 : string = " " + v242 + v244 + ""
            let v246 : string = " " + v243 + v245 + ""
            let v247 : Vec<leptos_prelude_AnyView_> = method172()
            let v248 : string = "leptos::prelude::Fragment::new($0)"
            let v249 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v247 v248 
            let v250 : string = "leptos::prelude::AnyView::from($0)"
            let v251 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : string = "<" + v61 + " " + v246 + ">move || { v251 }</" + v61 + ">"
            let v253 : string = "leptos::prelude::view! { " + v252 + " }"
            let v254 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v253 
            let v255 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v254 |> unbox
            let v256 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v257 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v255 v256 
            let v258 : Vec<leptos_prelude_AnyView_> = method173(v257)
            let v259 : string = "leptos::prelude::Fragment::new($0)"
            let v260 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v258 v259 
            let v261 : string = "leptos::prelude::AnyView::from($0)"
            let v262 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "<" + v73 + " " + v240 + ">move || { v262 }</" + v73 + ">"
            let v264 : string = "leptos::prelude::view! { " + v263 + " }"
            let v265 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v265 |> unbox
            let v267 : string = "on:click=move |_| v224()"
            let v268 : string = "aria-label=\"Delete\""
            let v269 : string = "$0"
            let v270 : (unit -> std_string_String) = closure232()
            let v271 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v270 v269 
            let v272 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v271(())"
            let v273 : string = " " + v272 + v8 + ""
            let v274 : string = " " + v267 + v273 + ""
            let v275 : string = " " + v268 + v274 + ""
            let v276 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v277 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v266 v276 
            let v278 : Vec<leptos_prelude_AnyView_> = method173(v277)
            let v279 : string = "leptos::prelude::Fragment::new($0)"
            let v280 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v278 v279 
            let v281 : string = "leptos::prelude::AnyView::from($0)"
            let v282 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v280 v281 
            let v283 : string = "button"
            let v284 : string = "<" + v283 + " " + v275 + ">move || { v282 }</" + v283 + ">"
            let v285 : string = "leptos::prelude::view! { " + v284 + " }"
            let v286 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v285 
            let v287 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v286 |> unbox
            let v288 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v289 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v287 v288 
            v289
    let v291 : Vec<leptos_prelude_AnyView_> = method186(v154, v217, v290)
    let v292 : string = "leptos::prelude::Fragment::new($0)"
    let v293 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v291 v292 
    let v294 : string = "leptos::prelude::AnyView::from($0)"
    let v295 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v293 v294 
    let v296 : string = "div"
    let v297 : string = "<" + v296 + " " + v9 + ">move || { v295 }</" + v296 + ">"
    let v298 : string = "leptos::prelude::view! { " + v297 + " }"
    let v299 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v298 
    let v300 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v299 |> unbox
    let v301 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v302 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v300 v301 
    let v303 : Vec<leptos_prelude_AnyView_> = method173(v302)
    let v304 : string = "leptos::prelude::Fragment::new($0)"
    let v305 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v303 v304 
    v305
and method203 (v0 : Heap2, v1 : leptos_prelude_Memo<int32>, v2 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v3 : leptos_prelude_WriteSignal<int32>) : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> leptos_dom_Fragment) =
    closure217(v0, v1, v2, v3)
and closure215 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>, v2 : leptos_prelude_Memo<int32>, v3 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v4 : leptos_prelude_WriteSignal<int32>) () : leptos_dom_Fragment =
    let v5 : string = "class=\"flex flex-1 flex-col p-[8px] gap-[8px]\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>> = method201(v1)
    let v9 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> struct (int32 * int32)) = method202()
    let v10 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> leptos_dom_Fragment) = method203(v0, v2, v3, v4)
    let v11 : string = "each=v8"
    let v12 : string = "key=move |x| v9(x.to_owned())"
    let v13 : string = "let:x"
    let v14 : string = "children=move |x| v10(x)"
    let v15 : string = " " + v11 + v6 + ""
    let v16 : string = " " + v12 + v15 + ""
    let v17 : string = " " + v13 + v16 + ""
    let v18 : string = " " + v14 + v17 + ""
    let v19 : string = "leptos::prelude::For"
    let v20 : string = "<" + v19 + " " + v18 + " />"
    let v21 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { " + v20 + " })"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : Vec<leptos_prelude_AnyView_> = method173(v22)
    let v24 : string = "leptos::prelude::Fragment::new($0)"
    let v25 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "leptos::prelude::AnyView::from($0)"
    let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : string = "div"
    let v29 : string = "<" + v28 + " " + v7 + ">move || { v27 }</" + v28 + ">"
    let v30 : string = "leptos::prelude::view! { " + v29 + " }"
    let v31 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v31 |> unbox
    let v33 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : Vec<leptos_prelude_AnyView_> = method173(v34)
    let v36 : string = "leptos::prelude::Fragment::new($0)"
    let v37 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and closure233 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure234 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure235 () () : string =
    let v0 : string = "View"
    v0
and method214 () : (unit -> string) =
    closure235()
and closure237 () () : leptos_dom_Fragment =
    let v0 : string = "Dark Mode"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method215 () : (unit -> leptos_dom_Fragment) =
    closure237()
and closure239 () () : std_string_String =
    let v0 : string = "dark-mode"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure241 () (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure240 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<bool> = v4.l0
    let v6 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
    let v11 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v12 : (bool -> bool) = closure241()
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v12 v11 
    ()
and closure242 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<bool> = v3.l0
    let v5 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method217 (v0 : Heap2) : (unit -> bool) =
    closure242(v0)
and method218 () : (unit -> std_string_String) =
    closure239()
and closure238 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : (unit -> std_string_String) = closure239()
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : string = "for=move || v1()"
    let v4 : string = "class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\""
    let v5 : string = ""
    let v6 : string = " " + v3 + v5 + ""
    let v7 : string = " " + v4 + v6 + ""
    let v8 : (leptos_ev_Event -> unit) = closure240(v0)
    let v9 : string = "let v8 = $0"
    Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v10 : (unit -> bool) = method217(v0)
    let v11 : (unit -> std_string_String) = method218()
    let v12 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v13 : string = "type=\"checkbox\""
    let v14 : string = "id=move || v11()"
    let v15 : string = "on:change=move |event| v8(event)"
    let v16 : string = "prop:checked=move || v10()"
    let v17 : string = " " + v12 + v5 + ""
    let v18 : string = " " + v13 + v17 + ""
    let v19 : string = " " + v14 + v18 + ""
    let v20 : string = " " + v15 + v19 + ""
    let v21 : string = " " + v16 + v20 + ""
    let v22 : string = "input"
    let v23 : string = "<" + v22 + " " + v21 + " />"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v30 : string = " " + v29 + v5 + ""
    let v31 : string = "data-unchecked-icon"
    let v32 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v33 : string = "class=\"h-4 w-4\""
    let v34 : string = "viewBox=\"0 0 20 20\""
    let v35 : string = "fill=\"currentColor\""
    let v36 : string = " " + v31 + v5 + ""
    let v37 : string = " " + v32 + v36 + ""
    let v38 : string = " " + v33 + v37 + ""
    let v39 : string = " " + v34 + v38 + ""
    let v40 : string = " " + v35 + v39 + ""
    let v41 : string = "fill-rule=\"evenodd\""
    let v42 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v43 : string = "clip-rule=\"evenodd\""
    let v44 : string = " " + v41 + v5 + ""
    let v45 : string = " " + v42 + v44 + ""
    let v46 : string = " " + v43 + v45 + ""
    let v47 : Vec<leptos_prelude_AnyView_> = method172()
    let v48 : string = "leptos::prelude::Fragment::new($0)"
    let v49 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let v50 : string = "leptos::prelude::AnyView::from($0)"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let v52 : string = "path"
    let v53 : string = "<" + v52 + " " + v46 + ">move || { v51 }</" + v52 + ">"
    let v54 : string = "leptos::prelude::view! { " + v53 + " }"
    let v55 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v54 
    let v56 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v55 |> unbox
    let v57 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v58 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : Vec<leptos_prelude_AnyView_> = method173(v58)
    let v60 : string = "leptos::prelude::Fragment::new($0)"
    let v61 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from($0)"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : string = "svg"
    let v65 : string = "<" + v64 + " " + v40 + ">move || { v63 }</" + v64 + ">"
    let v66 : string = "leptos::prelude::view! { " + v65 + " }"
    let v67 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v67 |> unbox
    let v69 : string = "data-checked-icon"
    let v70 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v71 : string = "class=\"hidden h-4 w-4\""
    let v72 : string = "viewBox=\"0 0 20 20\""
    let v73 : string = "fill=\"currentColor\""
    let v74 : string = " " + v69 + v5 + ""
    let v75 : string = " " + v70 + v74 + ""
    let v76 : string = " " + v71 + v75 + ""
    let v77 : string = " " + v72 + v76 + ""
    let v78 : string = " " + v73 + v77 + ""
    let v79 : string = "fill-rule=\"evenodd\""
    let v80 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v81 : string = "clip-rule=\"evenodd\""
    let v82 : string = " " + v79 + v5 + ""
    let v83 : string = " " + v80 + v82 + ""
    let v84 : string = " " + v81 + v83 + ""
    let v85 : Vec<leptos_prelude_AnyView_> = method172()
    let v86 : string = "leptos::prelude::Fragment::new($0)"
    let v87 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "leptos::prelude::AnyView::from($0)"
    let v89 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "<" + v52 + " " + v84 + ">move || { v89 }</" + v52 + ">"
    let v91 : string = "leptos::prelude::view! { " + v90 + " }"
    let v92 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v92 |> unbox
    let v94 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v95 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : Vec<leptos_prelude_AnyView_> = method173(v95)
    let v97 : string = "leptos::prelude::Fragment::new($0)"
    let v98 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = "leptos::prelude::AnyView::from($0)"
    let v100 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v98 v99 
    let v101 : string = "<" + v64 + " " + v78 + ">move || { v100 }</" + v64 + ">"
    let v102 : string = "leptos::prelude::view! { " + v101 + " }"
    let v103 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v103 |> unbox
    let v105 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v106 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v104 v105 
    let v107 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v68 v107 
    let v109 : Vec<leptos_prelude_AnyView_> = method176(v108, v106)
    let v110 : string = "leptos::prelude::Fragment::new($0)"
    let v111 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "leptos::prelude::AnyView::from($0)"
    let v113 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "span"
    let v115 : string = "<" + v114 + " " + v30 + ">move || { v113 }</" + v114 + ">"
    let v116 : string = "leptos::prelude::view! { " + v115 + " }"
    let v117 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v116 
    let v118 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v117 |> unbox
    let v119 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v120 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v118 v119 
    let v121 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v122 : string = " " + v121 + v5 + ""
    let v123 : Vec<leptos_prelude_AnyView_> = method172()
    let v124 : string = "leptos::prelude::Fragment::new($0)"
    let v125 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v123 v124 
    let v126 : string = "leptos::prelude::AnyView::from($0)"
    let v127 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let v128 : string = "<" + v114 + " " + v122 + ">move || { v127 }</" + v114 + ">"
    let v129 : string = "leptos::prelude::view! { " + v128 + " }"
    let v130 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v129 
    let v131 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v130 |> unbox
    let v132 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v133 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v131 v132 
    let v134 : Vec<leptos_prelude_AnyView_> = method186(v28, v120, v133)
    let v135 : string = "leptos::prelude::Fragment::new($0)"
    let v136 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let v137 : string = "leptos::prelude::AnyView::from($0)"
    let v138 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "label"
    let v140 : string = "<" + v139 + " " + v7 + ">move || { v138 }</" + v139 + ">"
    let v141 : string = "leptos::prelude::view! { " + v140 + " }"
    let v142 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v141 
    let v143 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v142 |> unbox
    let v144 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v145 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v146 : Vec<leptos_prelude_AnyView_> = method173(v145)
    let v147 : string = "leptos::prelude::Fragment::new($0)"
    let v148 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v146 v147 
    v148
and method216 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure238(v0)
and closure243 () () : string =
    let v0 : string = "items-center p-0"
    v0
and closure244 () () : string =
    let v0 : string = "pt-[9px] pr-[10px] pb-[11px] pl-[10px]"
    v0
and closure245 () () : string =
    let v0 : string = "sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]"
    v0
and closure246 () () : string =
    let v0 : string = "[overflow:auto]"
    v0
and closure247 () () : leptos_dom_Fragment =
    let v0 : string = "Debug"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method219 () : (unit -> leptos_dom_Fragment) =
    closure247()
and closure249 () () : std_string_String =
    let v0 : string = "debug"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure250 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<bool> = v4.l1
    let v6 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
    let v11 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v12 : (bool -> bool) = closure241()
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v12 v11 
    ()
and closure251 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<bool> = v3.l1
    let v5 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method221 (v0 : Heap2) : (unit -> bool) =
    closure251(v0)
and method222 () : (unit -> std_string_String) =
    closure249()
and closure248 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : (unit -> std_string_String) = closure249()
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : string = "for=move || v1()"
    let v4 : string = "class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\""
    let v5 : string = ""
    let v6 : string = " " + v3 + v5 + ""
    let v7 : string = " " + v4 + v6 + ""
    let v8 : (leptos_ev_Event -> unit) = closure250(v0)
    let v9 : string = "let v8 = $0"
    Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v10 : (unit -> bool) = method221(v0)
    let v11 : (unit -> std_string_String) = method222()
    let v12 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v13 : string = "type=\"checkbox\""
    let v14 : string = "id=move || v11()"
    let v15 : string = "on:change=move |event| v8(event)"
    let v16 : string = "prop:checked=move || v10()"
    let v17 : string = " " + v12 + v5 + ""
    let v18 : string = " " + v13 + v17 + ""
    let v19 : string = " " + v14 + v18 + ""
    let v20 : string = " " + v15 + v19 + ""
    let v21 : string = " " + v16 + v20 + ""
    let v22 : string = "input"
    let v23 : string = "<" + v22 + " " + v21 + " />"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v30 : string = " " + v29 + v5 + ""
    let v31 : string = "data-unchecked-icon"
    let v32 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v33 : string = "class=\"h-4 w-4\""
    let v34 : string = "viewBox=\"0 0 20 20\""
    let v35 : string = "fill=\"currentColor\""
    let v36 : string = " " + v31 + v5 + ""
    let v37 : string = " " + v32 + v36 + ""
    let v38 : string = " " + v33 + v37 + ""
    let v39 : string = " " + v34 + v38 + ""
    let v40 : string = " " + v35 + v39 + ""
    let v41 : string = "fill-rule=\"evenodd\""
    let v42 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v43 : string = "clip-rule=\"evenodd\""
    let v44 : string = " " + v41 + v5 + ""
    let v45 : string = " " + v42 + v44 + ""
    let v46 : string = " " + v43 + v45 + ""
    let v47 : Vec<leptos_prelude_AnyView_> = method172()
    let v48 : string = "leptos::prelude::Fragment::new($0)"
    let v49 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let v50 : string = "leptos::prelude::AnyView::from($0)"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let v52 : string = "path"
    let v53 : string = "<" + v52 + " " + v46 + ">move || { v51 }</" + v52 + ">"
    let v54 : string = "leptos::prelude::view! { " + v53 + " }"
    let v55 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v54 
    let v56 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v55 |> unbox
    let v57 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v58 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : Vec<leptos_prelude_AnyView_> = method173(v58)
    let v60 : string = "leptos::prelude::Fragment::new($0)"
    let v61 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from($0)"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : string = "svg"
    let v65 : string = "<" + v64 + " " + v40 + ">move || { v63 }</" + v64 + ">"
    let v66 : string = "leptos::prelude::view! { " + v65 + " }"
    let v67 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v67 |> unbox
    let v69 : string = "data-checked-icon"
    let v70 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v71 : string = "class=\"hidden h-4 w-4\""
    let v72 : string = "viewBox=\"0 0 20 20\""
    let v73 : string = "fill=\"currentColor\""
    let v74 : string = " " + v69 + v5 + ""
    let v75 : string = " " + v70 + v74 + ""
    let v76 : string = " " + v71 + v75 + ""
    let v77 : string = " " + v72 + v76 + ""
    let v78 : string = " " + v73 + v77 + ""
    let v79 : string = "fill-rule=\"evenodd\""
    let v80 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v81 : string = "clip-rule=\"evenodd\""
    let v82 : string = " " + v79 + v5 + ""
    let v83 : string = " " + v80 + v82 + ""
    let v84 : string = " " + v81 + v83 + ""
    let v85 : Vec<leptos_prelude_AnyView_> = method172()
    let v86 : string = "leptos::prelude::Fragment::new($0)"
    let v87 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "leptos::prelude::AnyView::from($0)"
    let v89 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "<" + v52 + " " + v84 + ">move || { v89 }</" + v52 + ">"
    let v91 : string = "leptos::prelude::view! { " + v90 + " }"
    let v92 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v92 |> unbox
    let v94 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v95 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : Vec<leptos_prelude_AnyView_> = method173(v95)
    let v97 : string = "leptos::prelude::Fragment::new($0)"
    let v98 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = "leptos::prelude::AnyView::from($0)"
    let v100 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v98 v99 
    let v101 : string = "<" + v64 + " " + v78 + ">move || { v100 }</" + v64 + ">"
    let v102 : string = "leptos::prelude::view! { " + v101 + " }"
    let v103 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v103 |> unbox
    let v105 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v106 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v104 v105 
    let v107 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v68 v107 
    let v109 : Vec<leptos_prelude_AnyView_> = method176(v108, v106)
    let v110 : string = "leptos::prelude::Fragment::new($0)"
    let v111 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "leptos::prelude::AnyView::from($0)"
    let v113 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "span"
    let v115 : string = "<" + v114 + " " + v30 + ">move || { v113 }</" + v114 + ">"
    let v116 : string = "leptos::prelude::view! { " + v115 + " }"
    let v117 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v116 
    let v118 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v117 |> unbox
    let v119 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v120 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v118 v119 
    let v121 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v122 : string = " " + v121 + v5 + ""
    let v123 : Vec<leptos_prelude_AnyView_> = method172()
    let v124 : string = "leptos::prelude::Fragment::new($0)"
    let v125 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v123 v124 
    let v126 : string = "leptos::prelude::AnyView::from($0)"
    let v127 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let v128 : string = "<" + v114 + " " + v122 + ">move || { v127 }</" + v114 + ">"
    let v129 : string = "leptos::prelude::view! { " + v128 + " }"
    let v130 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v129 
    let v131 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v130 |> unbox
    let v132 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v133 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v131 v132 
    let v134 : Vec<leptos_prelude_AnyView_> = method186(v28, v120, v133)
    let v135 : string = "leptos::prelude::Fragment::new($0)"
    let v136 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let v137 : string = "leptos::prelude::AnyView::from($0)"
    let v138 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "label"
    let v140 : string = "<" + v139 + " " + v7 + ">move || { v138 }</" + v139 + ">"
    let v141 : string = "leptos::prelude::view! { " + v140 + " }"
    let v142 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v141 
    let v143 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v142 |> unbox
    let v144 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v145 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v146 : Vec<leptos_prelude_AnyView_> = method173(v145)
    let v147 : string = "leptos::prelude::Fragment::new($0)"
    let v148 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v146 v147 
    v148
and method220 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure248(v0)
and closure252 () () : string =
    let v0 : string = "items-center p-0"
    v0
and closure236 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : string = "class=\"flex flex-1 flex-col p-[11px] gap-[11px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_dom_Fragment) = method215()
    let v5 : (unit -> leptos_dom_Fragment) = method216(v0)
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure243()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure244()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "$0"
    let v13 : (unit -> string) = closure245()
    let v14 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v13 v12 
    let v15 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())"
    let v16 : string = " " + v15 + v2 + ""
    let v17 : string = "$0"
    let v18 : (unit -> string) = closure246()
    let v19 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v18 v17 
    let v20 : string = "class=\"[font-size:12px] text-gray-400\""
    let v21 : string = " " + v20 + v2 + ""
    let v22 : leptos_dom_Fragment = v4 ()
    let v23 : string = "leptos::prelude::AnyView::from($0)"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "dt"
    let v26 : string = "<" + v25 + " " + v21 + ">move || { v24 }</" + v25 + ">"
    let v27 : string = "leptos::prelude::view! { " + v26 + " }"
    let v28 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v28 |> unbox
    let v30 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v31 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())"
    let v33 : string = " " + v32 + v2 + ""
    let v34 : leptos_dom_Fragment = v5 ()
    let v35 : string = "leptos::prelude::AnyView::from($0)"
    let v36 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "dd"
    let v38 : string = "<" + v37 + " " + v33 + ">move || { v36 }</" + v37 + ">"
    let v39 : string = "leptos::prelude::view! { " + v38 + " }"
    let v40 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v40 |> unbox
    let v42 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v43 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : Vec<leptos_prelude_AnyView_> = method176(v31, v43)
    let v45 : string = "leptos::prelude::Fragment::new($0)"
    let v46 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "leptos::prelude::AnyView::from($0)"
    let v48 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "dl"
    let v50 : string = "<" + v49 + " " + v16 + ">move || { v48 }</" + v49 + ">"
    let v51 : string = "leptos::prelude::view! { " + v50 + " }"
    let v52 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v52 |> unbox
    let v54 : (unit -> leptos_dom_Fragment) = method219()
    let v55 : (unit -> leptos_dom_Fragment) = method220(v0)
    let v56 : string = "$0"
    let v57 : (unit -> string) = closure252()
    let v58 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v57 v56 
    let v59 : string = "$0"
    let v60 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v59 
    let v61 : string = "$0"
    let v62 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v13 v61 
    let v63 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v62(()) + \" \" + &v60(()) + \" \" + &v58(())"
    let v64 : string = " " + v63 + v2 + ""
    let v65 : string = "$0"
    let v66 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v18 v65 
    let v67 : string = "class=\"[font-size:12px] text-gray-400\""
    let v68 : string = " " + v67 + v2 + ""
    let v69 : leptos_dom_Fragment = v54 ()
    let v70 : string = "leptos::prelude::AnyView::from($0)"
    let v71 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let v72 : string = "<" + v25 + " " + v68 + ">move || { v71 }</" + v25 + ">"
    let v73 : string = "leptos::prelude::view! { " + v72 + " }"
    let v74 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v73 
    let v75 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v74 |> unbox
    let v76 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v77 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v66(())"
    let v79 : string = " " + v78 + v2 + ""
    let v80 : leptos_dom_Fragment = v55 ()
    let v81 : string = "leptos::prelude::AnyView::from($0)"
    let v82 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : string = "<" + v37 + " " + v79 + ">move || { v82 }</" + v37 + ">"
    let v84 : string = "leptos::prelude::view! { " + v83 + " }"
    let v85 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v85 |> unbox
    let v87 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v88 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : Vec<leptos_prelude_AnyView_> = method176(v77, v88)
    let v90 : string = "leptos::prelude::Fragment::new($0)"
    let v91 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "leptos::prelude::AnyView::from($0)"
    let v93 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "<" + v49 + " " + v64 + ">move || { v93 }</" + v49 + ">"
    let v95 : string = "leptos::prelude::view! { " + v94 + " }"
    let v96 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v96 |> unbox
    let v98 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v99 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v101 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v53 v100 
    let v102 : Vec<leptos_prelude_AnyView_> = method176(v101, v99)
    let v103 : string = "leptos::prelude::Fragment::new($0)"
    let v104 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : string = "leptos::prelude::AnyView::from($0)"
    let v106 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v104 v105 
    let v107 : string = "div"
    let v108 : string = "<" + v107 + " " + v3 + ">move || { v106 }</" + v107 + ">"
    let v109 : string = "leptos::prelude::view! { " + v108 + " }"
    let v110 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v110 |> unbox
    let v112 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v113 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : Vec<leptos_prelude_AnyView_> = method173(v113)
    let v115 : string = "leptos::prelude::Fragment::new($0)"
    let v116 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v114 v115 
    v116
and closure253 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure254 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure255 () () : string =
    let v0 : string = "Debug"
    v0
and method223 () : (unit -> string) =
    closure255()
and closure257 () () : leptos_dom_Fragment =
    let v0 : string = "Global State"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method224 () : (unit -> leptos_dom_Fragment) =
    closure257()
and method226 (v0 : Heap2) : Heap2 =
    v0
and closure260 () (v0 : std_string_String) : US71 =
    US71_0(v0)
and method227 () : (std_string_String -> US71) =
    closure260()
and closure261 () (v0 : std_string_String) : US71 =
    US71_1(v0)
and method228 () : (std_string_String -> US71) =
    closure261()
and closure259 (v0 : Heap2) () : string =
    let v1 : string = "settings_view.global_state_log_render () / global_state_json memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : Heap2 = method226(v0)
    let v5 : string = "serde_json::to_string_pretty(&v4).map_err(|x| x.to_string())"
    let v6 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : (std_string_String -> US71) = method227()
    let v8 : (std_string_String -> US71) = method228()
    let v9 : US71 = match v6 with Ok x -> v7 x | Error x -> v8 x
    match v9 with
    | US71_1(v13) -> (* Error *)
        let v14 : string = "Error: " + string v13 + ""
        v14
    | US71_0(v10) -> (* Ok *)
        let v11 : string = "fable_library_rust::String_::fromString($0)"
        let v12 : string = Fable.Core.RustInterop.emitRustExpr v10 v11 
        v12
and closure262 () () : string =
    let v0 : string = ""
    v0
and closure258 () () : leptos_dom_Fragment =
    let v0 : string = "settings_view.global_state_log_render ()"
    let v1 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v4 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "$0.unwrap()"
    let v6 : Heap2 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0"
    let v8 : (unit -> string) = closure259(v6)
    let v9 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v8 v7 
    let v10 : string = "leptos::prelude::Memo::new(move |_| { v9(()) })"
    let v11 : leptos_prelude_Memo<string> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = $"$0()"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0"
    let v15 : (unit -> string) = closure262()
    let v16 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v15 v14 
    let v17 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v16(())"
    let v18 : string = ""
    let v19 : string = " " + v17 + v18 + ""
    let v20 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v20 = v22 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v23 
    let _v20 = v24 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v25 
    let _v20 = v26 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v20 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v20 = v30 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v33 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v20 = v33 
    #endif
#else
    let v36 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v20 = v36 
    #endif
    let v39 : Ref<Str> = _v20 
    let v44 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v39 v45 
    let _v44 = v46 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v39 v47 
    let _v44 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v39 v49 
    let _v44 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : std_string_String = v39 |> unbox<std_string_String>
    let _v44 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : std_string_String = v39 |> unbox<std_string_String>
    let _v44 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v57 : std_string_String = v39 |> unbox<std_string_String>
    let _v44 = v57 
    #endif
#else
    let v60 : std_string_String = v39 |> unbox<std_string_String>
    let _v44 = v60 
    #endif
    let v63 : std_string_String = _v44 
    let v68 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v69 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v63 v68 
    let v70 : Vec<leptos_prelude_AnyView_> = method173(v69)
    let v71 : string = "leptos::prelude::Fragment::new($0)"
    let v72 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : string = "leptos::prelude::AnyView::from($0)"
    let v74 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v72 v73 
    let v75 : string = "pre"
    let v76 : string = "<" + v75 + " " + v19 + ">move || { v74 }</" + v75 + ">"
    let v77 : string = "leptos::prelude::view! { " + v76 + " }"
    let v78 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v77 
    let v79 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v78 |> unbox
    let v80 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v81 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : Vec<leptos_prelude_AnyView_> = method173(v81)
    let v83 : string = "leptos::prelude::Fragment::new($0)"
    let v84 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v82 v83 
    v84
and method225 () : (unit -> leptos_dom_Fragment) =
    closure258()
and closure263 () () : string =
    let v0 : string = ""
    v0
and closure256 () () : leptos_dom_Fragment =
    let v0 : (unit -> leptos_dom_Fragment) = method224()
    let v1 : (unit -> leptos_dom_Fragment) = method225()
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure263()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> string) = closure244()
    let v7 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "$0"
    let v9 : (unit -> string) = closure245()
    let v10 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v9 v8 
    let v11 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())"
    let v12 : string = ""
    let v13 : string = " " + v11 + v12 + ""
    let v14 : string = "$0"
    let v15 : (unit -> string) = closure246()
    let v16 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v15 v14 
    let v17 : string = "class=\"[font-size:12px] text-gray-400\""
    let v18 : string = " " + v17 + v12 + ""
    let v19 : leptos_dom_Fragment = v0 ()
    let v20 : string = "leptos::prelude::AnyView::from($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "dt"
    let v23 : string = "<" + v22 + " " + v18 + ">move || { v21 }</" + v22 + ">"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())"
    let v30 : string = " " + v29 + v12 + ""
    let v31 : leptos_dom_Fragment = v1 ()
    let v32 : string = "leptos::prelude::AnyView::from($0)"
    let v33 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "dd"
    let v35 : string = "<" + v34 + " " + v30 + ">move || { v33 }</" + v34 + ">"
    let v36 : string = "leptos::prelude::view! { " + v35 + " }"
    let v37 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v37 |> unbox
    let v39 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v40 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : Vec<leptos_prelude_AnyView_> = method176(v28, v40)
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "leptos::prelude::AnyView::from($0)"
    let v45 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "dl"
    let v47 : string = "<" + v46 + " " + v13 + ">move || { v45 }</" + v46 + ">"
    let v48 : string = "leptos::prelude::view! { " + v47 + " }"
    let v49 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v49 |> unbox
    let v51 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v52 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let v53 : Vec<leptos_prelude_AnyView_> = method173(v52)
    let v54 : string = "leptos::prelude::Fragment::new($0)"
    let v55 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v53 v54 
    v55
and closure264 (v0 : leptos_prelude_WriteSignal<bool>) () : unit =
    let v1 : string = $"true; leptos::prelude::WriteSignal::update(&$0, |x: &mut /*"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
    let v6 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v7 : (bool -> bool) = closure241()
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr v7 v6 
    ()
and closure265 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and method229 (v0 : Ref<Lifetime<StaticLifetime, Str>>) : Ref<Lifetime<StaticLifetime, Str>> =
    v0
and closure266 (v0 : leptos_prelude_ReadSignal<bool>) () : std_string_String =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v9 : Ref<Lifetime<StaticLifetime, Str>> =
        if v2 then
            let v3 : string = ""
            let v4 : string = "r#\"" + v3 + "\"#"
            let v5 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v4 
            v5
        else
            let v6 : string = "bg-gray-300 hover:bg-gray-200"
            let v7 : string = "r#\"" + v6 + "\"#"
            let v8 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v7 
            v8
    let v10 : Ref<Lifetime<StaticLifetime, Str>> = method229(v9)
    let v11 : string = "v10.to_owned() + \" hover:bg-gray-200\""
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11 
    v12
and closure267 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure268 (v0 : leptos_prelude_AnyView_) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = "[margin-right:40px]"
    let v2 : string = "r#\"" + v1 + "\"#"
    let v3 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v2 
    v3
and closure269 () () : string =
    let v0 : string = "Transactions"
    v0
and method230 (v0 : leptos_prelude_AnyView_) : (unit -> string) =
    closure269()
and closure271 () () : leptos_dom_Fragment =
    let v0 : string = "Settings"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and closure272 () () : leptos_dom_Fragment =
    let v0 : string = "Table View"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method231 () : (unit -> leptos_dom_Fragment) =
    closure272()
and closure274 () () : std_string_String =
    let v0 : string = "table-view"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure276 () (v0 : Heap0) : Heap0 =
    let v1 : Vec<(bool * std_string_String)> = v0.l0
    let v2 : std_string_String option = v0.l1
    let v3 : int32 = v0.l2
    let v4 : int32 = v0.l3
    let v5 : US1 = v0.l4
    let v6 : bool =
        match v5 with
        | US1_1 -> (* Table *)
            true
        | _ ->
            false
    let v9 : US1 =
        if v6 then
            US1_0
        else
            US1_1
    {l0 = v1; l1 = v2; l2 = v3; l3 = v4; l4 = v9} : Heap0
and closure275 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<Heap0> = v4.l3
    let v6 : string = $"true; leptos::prelude::RwSignal::update(&$0, |x: &mut /*"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : TypeEmit<Heap0> = null |> unbox<TypeEmit<Heap0>>
    let v11 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v12 : (Heap0 -> Heap0) = closure276()
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v12 v11 
    ()
and closure277 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::RwSignal::get(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : US1 = v6.l4
    match v7 with
    | US1_1 -> (* Table *)
        true
    | _ ->
        false
and method233 (v0 : Heap2) : (unit -> bool) =
    closure277(v0)
and method234 () : (unit -> std_string_String) =
    closure274()
and closure273 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : (unit -> std_string_String) = closure274()
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : string = "for=move || v1()"
    let v4 : string = "class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\""
    let v5 : string = ""
    let v6 : string = " " + v3 + v5 + ""
    let v7 : string = " " + v4 + v6 + ""
    let v8 : (leptos_ev_Event -> unit) = closure275(v0)
    let v9 : string = "let v8 = $0"
    Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v10 : (unit -> bool) = method233(v0)
    let v11 : (unit -> std_string_String) = method234()
    let v12 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v13 : string = "type=\"checkbox\""
    let v14 : string = "id=move || v11()"
    let v15 : string = "on:change=move |event| v8(event)"
    let v16 : string = "prop:checked=move || v10()"
    let v17 : string = " " + v12 + v5 + ""
    let v18 : string = " " + v13 + v17 + ""
    let v19 : string = " " + v14 + v18 + ""
    let v20 : string = " " + v15 + v19 + ""
    let v21 : string = " " + v16 + v20 + ""
    let v22 : string = "input"
    let v23 : string = "<" + v22 + " " + v21 + " />"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v30 : string = " " + v29 + v5 + ""
    let v31 : string = "data-unchecked-icon"
    let v32 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v33 : string = "class=\"h-4 w-4\""
    let v34 : string = "viewBox=\"0 0 20 20\""
    let v35 : string = "fill=\"currentColor\""
    let v36 : string = " " + v31 + v5 + ""
    let v37 : string = " " + v32 + v36 + ""
    let v38 : string = " " + v33 + v37 + ""
    let v39 : string = " " + v34 + v38 + ""
    let v40 : string = " " + v35 + v39 + ""
    let v41 : string = "fill-rule=\"evenodd\""
    let v42 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v43 : string = "clip-rule=\"evenodd\""
    let v44 : string = " " + v41 + v5 + ""
    let v45 : string = " " + v42 + v44 + ""
    let v46 : string = " " + v43 + v45 + ""
    let v47 : Vec<leptos_prelude_AnyView_> = method172()
    let v48 : string = "leptos::prelude::Fragment::new($0)"
    let v49 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let v50 : string = "leptos::prelude::AnyView::from($0)"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let v52 : string = "path"
    let v53 : string = "<" + v52 + " " + v46 + ">move || { v51 }</" + v52 + ">"
    let v54 : string = "leptos::prelude::view! { " + v53 + " }"
    let v55 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v54 
    let v56 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v55 |> unbox
    let v57 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v58 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : Vec<leptos_prelude_AnyView_> = method173(v58)
    let v60 : string = "leptos::prelude::Fragment::new($0)"
    let v61 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from($0)"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : string = "svg"
    let v65 : string = "<" + v64 + " " + v40 + ">move || { v63 }</" + v64 + ">"
    let v66 : string = "leptos::prelude::view! { " + v65 + " }"
    let v67 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v67 |> unbox
    let v69 : string = "data-checked-icon"
    let v70 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v71 : string = "class=\"hidden h-4 w-4\""
    let v72 : string = "viewBox=\"0 0 20 20\""
    let v73 : string = "fill=\"currentColor\""
    let v74 : string = " " + v69 + v5 + ""
    let v75 : string = " " + v70 + v74 + ""
    let v76 : string = " " + v71 + v75 + ""
    let v77 : string = " " + v72 + v76 + ""
    let v78 : string = " " + v73 + v77 + ""
    let v79 : string = "fill-rule=\"evenodd\""
    let v80 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v81 : string = "clip-rule=\"evenodd\""
    let v82 : string = " " + v79 + v5 + ""
    let v83 : string = " " + v80 + v82 + ""
    let v84 : string = " " + v81 + v83 + ""
    let v85 : Vec<leptos_prelude_AnyView_> = method172()
    let v86 : string = "leptos::prelude::Fragment::new($0)"
    let v87 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "leptos::prelude::AnyView::from($0)"
    let v89 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "<" + v52 + " " + v84 + ">move || { v89 }</" + v52 + ">"
    let v91 : string = "leptos::prelude::view! { " + v90 + " }"
    let v92 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v92 |> unbox
    let v94 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v95 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : Vec<leptos_prelude_AnyView_> = method173(v95)
    let v97 : string = "leptos::prelude::Fragment::new($0)"
    let v98 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = "leptos::prelude::AnyView::from($0)"
    let v100 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v98 v99 
    let v101 : string = "<" + v64 + " " + v78 + ">move || { v100 }</" + v64 + ">"
    let v102 : string = "leptos::prelude::view! { " + v101 + " }"
    let v103 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v102 
    let v104 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v103 |> unbox
    let v105 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v106 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v104 v105 
    let v107 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v68 v107 
    let v109 : Vec<leptos_prelude_AnyView_> = method176(v108, v106)
    let v110 : string = "leptos::prelude::Fragment::new($0)"
    let v111 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "leptos::prelude::AnyView::from($0)"
    let v113 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "span"
    let v115 : string = "<" + v114 + " " + v30 + ">move || { v113 }</" + v114 + ">"
    let v116 : string = "leptos::prelude::view! { " + v115 + " }"
    let v117 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v116 
    let v118 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v117 |> unbox
    let v119 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v120 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v118 v119 
    let v121 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v122 : string = " " + v121 + v5 + ""
    let v123 : Vec<leptos_prelude_AnyView_> = method172()
    let v124 : string = "leptos::prelude::Fragment::new($0)"
    let v125 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v123 v124 
    let v126 : string = "leptos::prelude::AnyView::from($0)"
    let v127 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let v128 : string = "<" + v114 + " " + v122 + ">move || { v127 }</" + v114 + ">"
    let v129 : string = "leptos::prelude::view! { " + v128 + " }"
    let v130 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v129 
    let v131 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v130 |> unbox
    let v132 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v133 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v131 v132 
    let v134 : Vec<leptos_prelude_AnyView_> = method186(v28, v120, v133)
    let v135 : string = "leptos::prelude::Fragment::new($0)"
    let v136 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let v137 : string = "leptos::prelude::AnyView::from($0)"
    let v138 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "label"
    let v140 : string = "<" + v139 + " " + v7 + ">move || { v138 }</" + v139 + ">"
    let v141 : string = "leptos::prelude::view! { " + v140 + " }"
    let v142 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v141 
    let v143 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v142 |> unbox
    let v144 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v145 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v146 : Vec<leptos_prelude_AnyView_> = method173(v145)
    let v147 : string = "leptos::prelude::Fragment::new($0)"
    let v148 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v146 v147 
    v148
and method232 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure273(v0)
and closure278 () () : string =
    let v0 : string = "items-center"
    v0
and closure279 (v0 : int64) () : leptos_dom_Fragment =
    let v1 : string = "Transaction " + string (v0 + 1L) + ""
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v50 
    let v52 : Vec<leptos_prelude_AnyView_> = method173(v51)
    let v53 : string = "leptos::prelude::Fragment::new($0)"
    let v54 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v52 v53 
    v54
and closure280 () () : leptos_dom_Fragment =
    let v0 : string = "Account"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method235 () : (unit -> leptos_dom_Fragment) =
    closure280()
and closure281 (v0 : string) () : leptos_dom_Fragment =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method236 (v0 : string) : (unit -> leptos_dom_Fragment) =
    closure281(v0)
and closure282 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure283 () () : string =
    let v0 : string = ""
    v0
and closure284 () () : leptos_dom_Fragment =
    let v0 : string = "Block Timestamp"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method237 () : (unit -> leptos_dom_Fragment) =
    closure284()
and closure285 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v5 v12 
    let v14 : (string -> int64) = int64
    let v15 : int64 = v14 v13
    let v18 : int64 = method193(v15)
    let v19 : int64 = v18 / 1000L
    let v20 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v21 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : (chrono_DateTime<chrono_Utc> -> US69) = method194()
    let v23 : US69 option = v21 |> Option.map v22 
    let v34 : US69 = US69_1
    let v35 : US69 = v23 |> Option.defaultValue v34 
    let v54 : US32 =
        match v35 with
        | US69_1 -> (* None *)
            US32_1
        | US69_0(v39) -> (* Some *)
            let v40 : string = "$0.naive_utc()"
            let v41 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v39 v40 
            let v42 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v43 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = "%Y-%m-%d %H:%M:%S"
            let v45 : string = "r#\"" + v44 + "\"#"
            let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "$0.format($1).to_string()"
            let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v43, v46) v47 
            let v49 : string = "fable_library_rust::String_::fromString($0)"
            let v50 : string = Fable.Core.RustInterop.emitRustExpr v48 v49 
            US32_0(v50)
    let v60 : US70 =
        match v54 with
        | US32_1 -> (* None *)
            let v57 : string = "resultm.from_option / Option does not have a value."
            US70_1(v57)
        | US32_0(v55) -> (* Some *)
            US70_0(v55)
    let v65 : string =
        match v60 with
        | US70_1(v62) -> (* Error *)
            let v63 : string = "sm'.to_string result / Error: " + v62 + ""
            v63
        | US70_0(v61) -> (* Ok *)
            v61
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "&*$0"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v67 
    let _v66 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "&*$0"
    let v70 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v69 
    let _v66 = v70 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v71 : string = "&*$0"
    let v72 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _v66 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _v66 = v76 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _v66 = v79 
    #endif
#else
    let v82 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _v66 = v82 
    #endif
    let v85 : Ref<Str> = _v66 
    let v90 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _v90 = v92 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v93 
    let _v90 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v95 
    let _v90 = v96 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v97 : std_string_String = v85 |> unbox<std_string_String>
    let _v90 = v97 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v85 |> unbox<std_string_String>
    let _v90 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : std_string_String = v85 |> unbox<std_string_String>
    let _v90 = v103 
    #endif
#else
    let v106 : std_string_String = v85 |> unbox<std_string_String>
    let _v90 = v106 
    #endif
    let v109 : std_string_String = _v90 
    let v114 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v115 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v109 v114 
    let v116 : Vec<leptos_prelude_AnyView_> = method173(v115)
    let v117 : string = "leptos::prelude::Fragment::new($0)"
    let v118 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v116 v117 
    v118
and method238 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure285(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure286 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure287 () () : string =
    let v0 : string = ""
    v0
and closure288 () () : leptos_dom_Fragment =
    let v0 : string = "Predecessor"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method239 () : (unit -> leptos_dom_Fragment) =
    closure288()
and closure289 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : Vec<leptos_prelude_AnyView_> = method173(v63)
    let v65 : string = "leptos::prelude::Fragment::new($0)"
    let v66 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method240 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure289(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure290 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure291 () () : string =
    let v0 : string = ""
    v0
and closure292 () () : leptos_dom_Fragment =
    let v0 : string = "Receiver"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method241 () : (unit -> leptos_dom_Fragment) =
    closure292()
and closure293 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v2 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : Vec<leptos_prelude_AnyView_> = method173(v63)
    let v65 : string = "leptos::prelude::Fragment::new($0)"
    let v66 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method242 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure293(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure294 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure295 () () : string =
    let v0 : string = ""
    v0
and closure296 () () : leptos_dom_Fragment =
    let v0 : string = "Actions"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method243 () : (unit -> leptos_dom_Fragment) =
    closure296()
and closure298 (v0 : std_string_String) () : leptos_dom_Fragment =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool = "FUNCTION_CALL" = v2
    let v11 : string =
        if v3 then
            let v4 : string = "Function Call:"
            v4
        else
            let v5 : bool = "DEPLOY_CONTRACT" = v2
            if v5 then
                let v6 : string = "Contract Deploy:"
                v6
            else
                let v7 : bool = "TRANSFER" = v2
                if v7 then
                    let v8 : string = "Transfer:"
                    v8
                else
                    v2
    let v12 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v13 
    let _v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v15 
    let _v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v17 
    let _v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _v12 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v25 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _v12 = v25 
    #endif
#else
    let v28 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _v12 = v28 
    #endif
    let v31 : Ref<Str> = _v12 
    let v36 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "String::from($0)"
    let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v37 
    let _v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v39 
    let _v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v41 
    let _v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : std_string_String = v31 |> unbox<std_string_String>
    let _v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : std_string_String = v31 |> unbox<std_string_String>
    let _v36 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : std_string_String = v31 |> unbox<std_string_String>
    let _v36 = v49 
    #endif
#else
    let v52 : std_string_String = v31 |> unbox<std_string_String>
    let _v36 = v52 
    #endif
    let v55 : std_string_String = _v36 
    let v60 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v61 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v60 
    let v62 : Vec<leptos_prelude_AnyView_> = method173(v61)
    let v63 : string = "leptos::prelude::Fragment::new($0)"
    let v64 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v62 v63 
    v64
and method245 (v0 : std_string_String) : (unit -> leptos_dom_Fragment) =
    closure298(v0)
and closure300 () () : leptos_dom_Fragment =
    let v0 : string = "Method"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method247 () : (unit -> leptos_dom_Fragment) =
    closure300()
and closure301 (v0 : std_string_String option) () : leptos_dom_Fragment =
    let v1 : (std_string_String -> US15) = method46()
    let v2 : US15 option = v0 |> Option.map v1 
    let v13 : US15 = US15_1
    let v14 : US15 = v2 |> Option.defaultValue v13 
    match v14 with
    | US15_1 -> (* None *)
        let v74 : string = "None"
        let v75 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v76 : string = "&*$0"
        let v77 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v76 
        let _v75 = v77 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v78 : string = "&*$0"
        let v79 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v78 
        let _v75 = v79 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v80 : string = "&*$0"
        let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v80 
        let _v75 = v81 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v82 : Ref<Str> = v74 |> unbox<Ref<Str>>
        let _v75 = v82 
        #endif
#if FABLE_COMPILER_PYTHON
        let v85 : Ref<Str> = v74 |> unbox<Ref<Str>>
        let _v75 = v85 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v88 : Ref<Str> = v74 |> unbox<Ref<Str>>
        let _v75 = v88 
        #endif
#else
        let v91 : Ref<Str> = v74 |> unbox<Ref<Str>>
        let _v75 = v91 
        #endif
        let v94 : Ref<Str> = _v75 
        let v99 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v100 : string = "String::from($0)"
        let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v100 
        let _v99 = v101 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v102 : string = "String::from($0)"
        let v103 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v102 
        let _v99 = v103 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v104 : string = "String::from($0)"
        let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v104 
        let _v99 = v105 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v106 : std_string_String = v94 |> unbox<std_string_String>
        let _v99 = v106 
        #endif
#if FABLE_COMPILER_PYTHON
        let v109 : std_string_String = v94 |> unbox<std_string_String>
        let _v99 = v109 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v112 : std_string_String = v94 |> unbox<std_string_String>
        let _v99 = v112 
        #endif
#else
        let v115 : std_string_String = v94 |> unbox<std_string_String>
        let _v99 = v115 
        #endif
        let v118 : std_string_String = _v99 
        let v123 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
        let v124 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v118 v123 
        let v125 : Vec<leptos_prelude_AnyView_> = method173(v124)
        let v126 : string = "leptos::prelude::Fragment::new($0)"
        let v127 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v125 v126 
        v127
    | US15_0(v18) -> (* Some *)
        let v19 : string = "fable_library_rust::String_::fromString($0)"
        let v20 : string = Fable.Core.RustInterop.emitRustExpr v18 v19 
        let v21 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v22 : string = "&*$0"
        let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v22 
        let _v21 = v23 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v24 : string = "&*$0"
        let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v24 
        let _v21 = v25 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v26 : string = "&*$0"
        let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v26 
        let _v21 = v27 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v28 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _v21 = v28 
        #endif
#if FABLE_COMPILER_PYTHON
        let v31 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _v21 = v31 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v34 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _v21 = v34 
        #endif
#else
        let v37 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _v21 = v37 
        #endif
        let v40 : Ref<Str> = _v21 
        let v45 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v46 : string = "String::from($0)"
        let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v46 
        let _v45 = v47 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v48 : string = "String::from($0)"
        let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v48 
        let _v45 = v49 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v50 : string = "String::from($0)"
        let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v50 
        let _v45 = v51 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_string_String = v40 |> unbox<std_string_String>
        let _v45 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_string_String = v40 |> unbox<std_string_String>
        let _v45 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v58 : std_string_String = v40 |> unbox<std_string_String>
        let _v45 = v58 
        #endif
#else
        let v61 : std_string_String = v40 |> unbox<std_string_String>
        let _v45 = v61 
        #endif
        let v64 : std_string_String = _v45 
        let v69 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
        let v70 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v69 
        let v71 : Vec<leptos_prelude_AnyView_> = method173(v70)
        let v72 : string = "leptos::prelude::Fragment::new($0)"
        let v73 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v71 v72 
        v73
and method248 (v0 : std_string_String option) : (unit -> leptos_dom_Fragment) =
    closure301(v0)
and closure302 () () : string =
    let v0 : string = ""
    v0
and closure303 () () : string =
    let v0 : string = ""
    v0
and closure304 () () : string =
    let v0 : string = ""
    v0
and closure299 (v0 : std_string_String option) () : leptos_dom_Fragment =
    let v1 : string = "class=\"flex flex-1 flex-col\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_dom_Fragment) = method247()
    let v5 : (unit -> leptos_dom_Fragment) = method248(v0)
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure302()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure303()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "$0"
    let v13 : (unit -> string) = closure245()
    let v14 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v13 v12 
    let v15 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())"
    let v16 : string = " " + v15 + v2 + ""
    let v17 : string = "$0"
    let v18 : (unit -> string) = closure304()
    let v19 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v18 v17 
    let v20 : string = "class=\"[font-size:12px] text-gray-400\""
    let v21 : string = " " + v20 + v2 + ""
    let v22 : leptos_dom_Fragment = v4 ()
    let v23 : string = "leptos::prelude::AnyView::from($0)"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "dt"
    let v26 : string = "<" + v25 + " " + v21 + ">move || { v24 }</" + v25 + ">"
    let v27 : string = "leptos::prelude::view! { " + v26 + " }"
    let v28 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v28 |> unbox
    let v30 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v31 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())"
    let v33 : string = " " + v32 + v2 + ""
    let v34 : leptos_dom_Fragment = v5 ()
    let v35 : string = "leptos::prelude::AnyView::from($0)"
    let v36 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "dd"
    let v38 : string = "<" + v37 + " " + v33 + ">move || { v36 }</" + v37 + ">"
    let v39 : string = "leptos::prelude::view! { " + v38 + " }"
    let v40 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v40 |> unbox
    let v42 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v43 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : Vec<leptos_prelude_AnyView_> = method176(v31, v43)
    let v45 : string = "leptos::prelude::Fragment::new($0)"
    let v46 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "leptos::prelude::AnyView::from($0)"
    let v48 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "dl"
    let v50 : string = "<" + v49 + " " + v16 + ">move || { v48 }</" + v49 + ">"
    let v51 : string = "leptos::prelude::view! { " + v50 + " }"
    let v52 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v52 |> unbox
    let v54 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : Vec<leptos_prelude_AnyView_> = method173(v55)
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : string = "leptos::prelude::AnyView::from($0)"
    let v60 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "div"
    let v62 : string = "<" + v61 + " " + v3 + ">move || { v60 }</" + v61 + ">"
    let v63 : string = "leptos::prelude::view! { " + v62 + " }"
    let v64 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v63 
    let v65 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v64 |> unbox
    let v66 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v67 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v65 v66 
    let v68 : Vec<leptos_prelude_AnyView_> = method173(v67)
    let v69 : string = "leptos::prelude::Fragment::new($0)"
    let v70 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v68 v69 
    v70
and method246 (v0 : std_string_String option) : (unit -> leptos_dom_Fragment) =
    closure299(v0)
and closure305 () () : string =
    let v0 : string = ""
    v0
and closure306 () () : string =
    let v0 : string = "items-center"
    v0
and closure307 () () : string =
    let v0 : string = ""
    v0
and closure308 () () : string =
    let v0 : string = ""
    v0
and closure297 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "$0.to_vec()"
    let v13 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v7 v12 
    let v14 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "x"
    let struct (v17 : std_string_String, v18 : std_string_String option) = Fable.Core.RustInterop.emitRustExpr () v16 
    let v19 : (unit -> leptos_dom_Fragment) = method245(v17)
    let v20 : (unit -> leptos_dom_Fragment) = method246(v18)
    let v21 : string = "$0"
    let v22 : (unit -> string) = closure305()
    let v23 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "$0"
    let v25 : (unit -> string) = closure306()
    let v26 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v25 v24 
    let v27 : string = "$0"
    let v28 : (unit -> string) = closure307()
    let v29 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v28 v27 
    let v30 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())"
    let v31 : string = ""
    let v32 : string = " " + v30 + v31 + ""
    let v33 : string = "$0"
    let v34 : (unit -> string) = closure308()
    let v35 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v34 v33 
    let v36 : string = "class=\"[font-size:12px] text-gray-400\""
    let v37 : string = " " + v36 + v31 + ""
    let v38 : leptos_dom_Fragment = v19 ()
    let v39 : string = "leptos::prelude::AnyView::from($0)"
    let v40 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "dt"
    let v42 : string = "<" + v41 + " " + v37 + ">move || { v40 }</" + v41 + ">"
    let v43 : string = "leptos::prelude::view! { " + v42 + " }"
    let v44 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v44 |> unbox
    let v46 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let v48 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())"
    let v49 : string = " " + v48 + v31 + ""
    let v50 : leptos_dom_Fragment = v20 ()
    let v51 : string = "leptos::prelude::AnyView::from($0)"
    let v52 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let v53 : string = "dd"
    let v54 : string = "<" + v53 + " " + v49 + ">move || { v52 }</" + v53 + ">"
    let v55 : string = "leptos::prelude::view! { " + v54 + " }"
    let v56 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v56 |> unbox
    let v58 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v59 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : Vec<leptos_prelude_AnyView_> = method176(v47, v59)
    let v61 : string = "leptos::prelude::Fragment::new($0)"
    let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "leptos::prelude::AnyView::from($0)"
    let v64 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "dl"
    let v66 : string = "<" + v65 + " " + v32 + ">move || { v64 }</" + v65 + ">"
    let v67 : string = "leptos::prelude::view! { " + v66 + " }"
    let v68 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v68 |> unbox
    let v70 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v71 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let v72 : string = "true; $0 }).collect::<Vec<_>>()"
    let v73 : bool = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "_vec_map"
    let v75 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v77 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : Vec<leptos_prelude_AnyView_> = method173(v77)
    let v79 : string = "leptos::prelude::Fragment::new($0)"
    let v80 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v78 v79 
    v80
and method244 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure297(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure309 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure310 () () : string =
    let v0 : string = "sm:pr-[10px]"
    v0
and closure311 () () : string =
    let v0 : string = "[flex-direction:column]"
    v0
and closure312 () () : leptos_dom_Fragment =
    let v0 : string = "Deposit"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method249 () : (unit -> leptos_dom_Fragment) =
    closure312()
and closure313 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (float -> string) = _.ToString()
    let v13 : string = v12 v8
    let v16 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v32 
    #endif
    let v35 : Ref<Str> = _v16 
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v56 
    #endif
    let v59 : std_string_String = _v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : Vec<leptos_prelude_AnyView_> = method173(v65)
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method250 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure313(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure314 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure315 () () : string =
    let v0 : string = ""
    v0
and closure316 () () : leptos_dom_Fragment =
    let v0 : string = "Outcome Status"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method251 () : (unit -> leptos_dom_Fragment) =
    closure316()
and closure317 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (bool -> string) = _.ToString()
    let v13 : string = v12 v9
    let v16 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v32 
    #endif
    let v35 : Ref<Str> = _v16 
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v56 
    #endif
    let v59 : std_string_String = _v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : Vec<leptos_prelude_AnyView_> = method173(v65)
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method252 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure317(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure318 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure319 () () : string =
    let v0 : string = ""
    v0
and closure320 () () : leptos_dom_Fragment =
    let v0 : string = "Fee"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method253 () : (unit -> leptos_dom_Fragment) =
    closure320()
and closure321 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (float -> string) = _.ToString()
    let v13 : string = v12 v10
    let v16 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v32 
    #endif
    let v35 : Ref<Str> = _v16 
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v56 
    #endif
    let v59 : std_string_String = _v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : Vec<leptos_prelude_AnyView_> = method173(v65)
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method254 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure321(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure322 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure323 () () : string =
    let v0 : string = ""
    v0
and closure324 () () : leptos_dom_Fragment =
    let v0 : string = "Block Height"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method255 () : (unit -> leptos_dom_Fragment) =
    closure324()
and closure325 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (uint32 -> string) = _.ToString()
    let v13 : string = v12 v6
    let v16 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v32 
    #endif
    let v35 : Ref<Str> = _v16 
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v56 
    #endif
    let v59 : std_string_String = _v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : Vec<leptos_prelude_AnyView_> = method173(v65)
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method256 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure325(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure326 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure327 () () : string =
    let v0 : string = ""
    v0
and closure328 () () : leptos_dom_Fragment =
    let v0 : string = "Hash"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method257 () : (unit -> leptos_dom_Fragment) =
    closure328()
and closure329 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v3 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : Vec<leptos_prelude_AnyView_> = method173(v63)
    let v65 : string = "leptos::prelude::Fragment::new($0)"
    let v66 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method258 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure329(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure330 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure331 () () : string =
    let v0 : string = ""
    v0
and closure332 () () : leptos_dom_Fragment =
    let v0 : string = "Block Hash"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method259 () : (unit -> leptos_dom_Fragment) =
    closure332()
and closure333 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v4 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : Vec<leptos_prelude_AnyView_> = method173(v63)
    let v65 : string = "leptos::prelude::Fragment::new($0)"
    let v66 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method260 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure333(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure334 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure335 () () : string =
    let v0 : string = ""
    v0
and closure336 () () : leptos_dom_Fragment =
    let v0 : string = "Receipt ID"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method261 () : (unit -> leptos_dom_Fragment) =
    closure336()
and closure337 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : Vec<leptos_prelude_AnyView_> = method173(v63)
    let v65 : string = "leptos::prelude::Fragment::new($0)"
    let v66 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method262 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure337(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure338 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure339 () () : string =
    let v0 : string = ""
    v0
and closure340 () () : leptos_dom_Fragment =
    let v0 : string = "Logs"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method263 () : (unit -> leptos_dom_Fragment) =
    closure340()
and method265 () : string =
    let v0 : string = "\n"
    v0
and closure342 () () : string =
    let v0 : string = "[max-height:20vh]"
    v0
and closure341 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "$0.to_vec()"
    let v13 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v15 : (std_string_String -> string) = closure55()
    let v16 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v13, v15) v14 
    let v17 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v18 : (string []) = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string seq = v18 |> Seq.ofArray
    let v22 : string = method265()
    let v23 : (string -> (string seq -> string)) = String.concat
    let v24 : (string seq -> string) = v23 v22
    let v25 : string = v24 v19
    let v29 : string = "\\n"
    let v30 : string = "\n"
    let v31 : string = v25.Replace (v29, v30)
    let v32 : string = "$0"
    let v33 : (unit -> string) = closure342()
    let v34 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v33 v32 
    let v35 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v34(())"
    let v36 : string = ""
    let v37 : string = " " + v35 + v36 + ""
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "&*$0"
    let v40 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v31 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "&*$0"
    let v42 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v31 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v31 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : Ref<Str> = v31 |> unbox<Ref<Str>>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : Ref<Str> = v31 |> unbox<Ref<Str>>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : Ref<Str> = v31 |> unbox<Ref<Str>>
    let _v38 = v51 
    #endif
#else
    let v54 : Ref<Str> = v31 |> unbox<Ref<Str>>
    let _v38 = v54 
    #endif
    let v57 : Ref<Str> = _v38 
    let v62 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v63 : string = "String::from($0)"
    let v64 : std_string_String = Fable.Core.RustInterop.emitRustExpr v57 v63 
    let _v62 = v64 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v65 : string = "String::from($0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v57 v65 
    let _v62 = v66 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v67 : string = "String::from($0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v57 v67 
    let _v62 = v68 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v69 : std_string_String = v57 |> unbox<std_string_String>
    let _v62 = v69 
    #endif
#if FABLE_COMPILER_PYTHON
    let v72 : std_string_String = v57 |> unbox<std_string_String>
    let _v62 = v72 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v75 : std_string_String = v57 |> unbox<std_string_String>
    let _v62 = v75 
    #endif
#else
    let v78 : std_string_String = v57 |> unbox<std_string_String>
    let _v62 = v78 
    #endif
    let v81 : std_string_String = _v62 
    let v86 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v87 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v81 v86 
    let v88 : Vec<leptos_prelude_AnyView_> = method173(v87)
    let v89 : string = "leptos::prelude::Fragment::new($0)"
    let v90 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : string = "leptos::prelude::AnyView::from($0)"
    let v92 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let v93 : string = "pre"
    let v94 : string = "<" + v93 + " " + v37 + ">move || { v92 }</" + v93 + ">"
    let v95 : string = "leptos::prelude::view! { " + v94 + " }"
    let v96 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v96 |> unbox
    let v98 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v99 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let v100 : Vec<leptos_prelude_AnyView_> = method173(v99)
    let v101 : string = "leptos::prelude::Fragment::new($0)"
    let v102 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v100 v101 
    v102
and method264 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure341(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure343 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure344 () () : string =
    let v0 : string = ""
    v0
and method266 (v0 : leptos_prelude_AnyView_, v1 : leptos_prelude_AnyView_, v2 : leptos_prelude_AnyView_, v3 : leptos_prelude_AnyView_, v4 : leptos_prelude_AnyView_, v5 : leptos_prelude_AnyView_, v6 : leptos_prelude_AnyView_, v7 : leptos_prelude_AnyView_, v8 : leptos_prelude_AnyView_, v9 : leptos_prelude_AnyView_, v10 : leptos_prelude_AnyView_, v11 : leptos_prelude_AnyView_, v12 : leptos_prelude_AnyView_) : Vec<leptos_prelude_AnyView_> =
    let v13 : leptos_prelude_AnyView_ = method174(v12)
    let v14 : string = "v13"
    let v15 : string = ""
    let v16 : string = v14 + v15 
    let v17 : string = v16 + v15 
    let v18 : leptos_prelude_AnyView_ = method174(v11)
    let v19 : string = "v18"
    let v20 : string = ", "
    let v21 : string = v19 + v20 
    let v22 : string = v21 + v17 
    let v23 : leptos_prelude_AnyView_ = method174(v10)
    let v24 : string = "v23"
    let v25 : string = v24 + v20 
    let v26 : string = v25 + v22 
    let v27 : leptos_prelude_AnyView_ = method174(v9)
    let v28 : string = "v27"
    let v29 : string = v28 + v20 
    let v30 : string = v29 + v26 
    let v31 : leptos_prelude_AnyView_ = method174(v8)
    let v32 : string = "v31"
    let v33 : string = v32 + v20 
    let v34 : string = v33 + v30 
    let v35 : leptos_prelude_AnyView_ = method174(v7)
    let v36 : string = "v35"
    let v37 : string = v36 + v20 
    let v38 : string = v37 + v34 
    let v39 : leptos_prelude_AnyView_ = method174(v6)
    let v40 : string = "v39"
    let v41 : string = v40 + v20 
    let v42 : string = v41 + v38 
    let v43 : leptos_prelude_AnyView_ = method174(v5)
    let v44 : string = "v43"
    let v45 : string = v44 + v20 
    let v46 : string = v45 + v42 
    let v47 : leptos_prelude_AnyView_ = method174(v4)
    let v48 : string = "v47"
    let v49 : string = v48 + v20 
    let v50 : string = v49 + v46 
    let v51 : leptos_prelude_AnyView_ = method174(v3)
    let v52 : string = "v51"
    let v53 : string = v52 + v20 
    let v54 : string = v53 + v50 
    let v55 : leptos_prelude_AnyView_ = method174(v2)
    let v56 : string = "v55"
    let v57 : string = v56 + v20 
    let v58 : string = v57 + v54 
    let v59 : leptos_prelude_AnyView_ = method174(v1)
    let v60 : string = "v59"
    let v61 : string = v60 + v20 
    let v62 : string = v61 + v58 
    let v63 : leptos_prelude_AnyView_ = method174(v0)
    let v64 : string = "v63"
    let v65 : string = v64 + v20 
    let v66 : string = v65 + v62 
    let v67 : string = "vec![" + v66 + "]"
    let v68 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v67 
    v68
and closure345 () () : string =
    let v0 : string = "[max-height:20vh] [width:100vw] [max-width:100vw]"
    v0
and method268 (v0 : (std_string_String []), v1 : int32) : bool =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 < v2
    if v3 then
        let v4 : std_string_String = v0.[int v1]
        let v5 : string = "fable_library_rust::String_::fromString($0)"
        let v6 : string = Fable.Core.RustInterop.emitRustExpr v4 v5 
        let v7 : int32 = v6.Length
        let v8 : bool = v7 > 0
        if v8 then
            true
        else
            let v9 : int32 = v1 + 1
            method268(v0, v9)
    else
        false
and method267 (v0 : (struct (string * unativeint * Heap5) []), v1 : int32) : bool =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 < v2
    if v3 then
        let struct (v4 : string, v5 : unativeint, v6 : Heap5) = v0.[int v1]
        let v7 : (std_string_String []) = v6.l11
        let v8 : int32 = 0
        let v9 : bool = method268(v7, v8)
        if v9 then
            true
        else
            let v10 : int32 = v1 + 1
            method267(v0, v10)
    else
        false
and closure270 (v0 : Heap2, v1 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>, v2 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>, v3 : leptos_prelude_ReadSignal<bool>) () : leptos_dom_Fragment =
    let v4 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v119 : leptos_prelude_AnyView_ =
        if v5 then
            let v6 : string = "class=\"px-[12px] py-[10px]\""
            let v7 : string = ""
            let v8 : string = " " + v6 + v7 + ""
            let v9 : string = "class=\"flex items-center pb-[6px]\""
            let v10 : string = " " + v9 + v7 + ""
            let v11 : string = "class=\"pr-[15px] [font-size:13px]\""
            let v12 : string = " " + v11 + v7 + ""
            let v13 : string = "Func0::new(move || $0())"
            let v14 : (unit -> leptos_dom_Fragment) = closure271()
            let v15 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v14 v13 
            let v16 : Func0<leptos_dom_Fragment> = method184(v15)
            let v17 : string = "(move || v16())()"
            let v18 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v17 
            let v19 : string = "leptos::prelude::AnyView::from($0)"
            let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
            let v21 : string = "span"
            let v22 : string = "<" + v21 + " " + v12 + ">move || { v20 }</" + v21 + ">"
            let v23 : string = "leptos::prelude::view! { " + v22 + " }"
            let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
            let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v24 |> unbox
            let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
            let v28 : string = "class=\"h-px flex-1 bg-gray-300\""
            let v29 : string = " " + v28 + v7 + ""
            let v30 : Vec<leptos_prelude_AnyView_> = method172()
            let v31 : string = "leptos::prelude::Fragment::new($0)"
            let v32 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v30 v31 
            let v33 : string = "leptos::prelude::AnyView::from($0)"
            let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
            let v35 : string = "<" + v21 + " " + v29 + ">move || { v34 }</" + v21 + ">"
            let v36 : string = "leptos::prelude::view! { " + v35 + " }"
            let v37 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v36 
            let v38 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v37 |> unbox
            let v39 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v40 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let v41 : Vec<leptos_prelude_AnyView_> = method176(v27, v40)
            let v42 : string = "leptos::prelude::Fragment::new($0)"
            let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = "leptos::prelude::AnyView::from($0)"
            let v45 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v43 v44 
            let v46 : string = "<" + v21 + " " + v10 + ">move || { v45 }</" + v21 + ">"
            let v47 : string = "leptos::prelude::view! { " + v46 + " }"
            let v48 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v47 
            let v49 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v48 |> unbox
            let v50 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v50 
            let v52 : (unit -> leptos_dom_Fragment) = method231()
            let v53 : (unit -> leptos_dom_Fragment) = method232(v0)
            let v54 : string = "$0"
            let v55 : (unit -> string) = closure278()
            let v56 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v55 v54 
            let v57 : string = "$0"
            let v58 : (unit -> string) = closure244()
            let v59 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v58 v57 
            let v60 : string = "$0"
            let v61 : (unit -> string) = closure245()
            let v62 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v61 v60 
            let v63 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v62(()) + \" \" + &v59(()) + \" \" + &v56(())"
            let v64 : string = " " + v63 + v7 + ""
            let v65 : string = "$0"
            let v66 : (unit -> string) = closure246()
            let v67 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v66 v65 
            let v68 : string = "class=\"[font-size:12px] text-gray-400\""
            let v69 : string = " " + v68 + v7 + ""
            let v70 : leptos_dom_Fragment = v52 ()
            let v71 : string = "leptos::prelude::AnyView::from($0)"
            let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
            let v73 : string = "dt"
            let v74 : string = "<" + v73 + " " + v69 + ">move || { v72 }</" + v73 + ">"
            let v75 : string = "leptos::prelude::view! { " + v74 + " }"
            let v76 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v75 
            let v77 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v76 |> unbox
            let v78 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v79 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v78 
            let v80 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v67(())"
            let v81 : string = " " + v80 + v7 + ""
            let v82 : leptos_dom_Fragment = v53 ()
            let v83 : string = "leptos::prelude::AnyView::from($0)"
            let v84 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v82 v83 
            let v85 : string = "dd"
            let v86 : string = "<" + v85 + " " + v81 + ">move || { v84 }</" + v85 + ">"
            let v87 : string = "leptos::prelude::view! { " + v86 + " }"
            let v88 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v87 
            let v89 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v88 |> unbox
            let v90 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v91 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v89 v90 
            let v92 : Vec<leptos_prelude_AnyView_> = method176(v79, v91)
            let v93 : string = "leptos::prelude::Fragment::new($0)"
            let v94 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v92 v93 
            let v95 : string = "leptos::prelude::AnyView::from($0)"
            let v96 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v94 v95 
            let v97 : string = "dl"
            let v98 : string = "<" + v97 + " " + v64 + ">move || { v96 }</" + v97 + ">"
            let v99 : string = "leptos::prelude::view! { " + v98 + " }"
            let v100 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v99 
            let v101 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v100 |> unbox
            let v102 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v103 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v101 v102 
            let v104 : Vec<leptos_prelude_AnyView_> = method176(v51, v103)
            let v105 : string = "leptos::prelude::Fragment::new($0)"
            let v106 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v104 v105 
            let v107 : string = "leptos::prelude::AnyView::from($0)"
            let v108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v106 v107 
            let v109 : string = "div"
            let v110 : string = "<" + v109 + " " + v8 + ">move || { v108 }</" + v109 + ">"
            let v111 : string = "leptos::prelude::view! { " + v110 + " }"
            let v112 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v111 
            let v113 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v112 |> unbox
            let v114 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v115 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v113 v114 
            v115
        else
            let v116 : Vec<leptos_prelude_AnyView_> = method172()
            let v117 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v118 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v116 v117 
            v118
    let v120 : string = $"$0()"
    let v121 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v2 v120 
    let v122 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v123 : (struct (string * Vec<struct (string * US24 * string * bool * bool)>) []) = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : uint64 = System.Convert.ToUInt64 v123.Length
    let v125 : bool = v124 = 0UL
    let v3534 : leptos_prelude_AnyView_ =
        if v125 then
            let v126 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v127 : string = ""
            let v128 : string = " " + v126 + v127 + ""
            let v129 : string = "class=\"[height:17px]\""
            let v130 : string = " " + v129 + v127 + ""
            let v131 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v132 : string = "fill=\"none\""
            let v133 : string = "height=\"100%\""
            let v134 : string = "viewBox=\"0 0 24 24\""
            let v135 : string = "stroke-width=\"1.5\""
            let v136 : string = "stroke=\"currentColor\""
            let v137 : string = "class=\"text-red-700\""
            let v138 : string = " " + v131 + v127 + ""
            let v139 : string = " " + v132 + v138 + ""
            let v140 : string = " " + v133 + v139 + ""
            let v141 : string = " " + v134 + v140 + ""
            let v142 : string = " " + v135 + v141 + ""
            let v143 : string = " " + v136 + v142 + ""
            let v144 : string = " " + v137 + v143 + ""
            let v145 : string = "stroke-linecap=\"round\""
            let v146 : string = "stroke-linejoin=\"round\""
            let v147 : string = "d=\"M6 18L18 6M6 6l12 12\""
            let v148 : string = " " + v145 + v127 + ""
            let v149 : string = " " + v146 + v148 + ""
            let v150 : string = " " + v147 + v149 + ""
            let v151 : Vec<leptos_prelude_AnyView_> = method172()
            let v152 : string = "leptos::prelude::Fragment::new($0)"
            let v153 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v151 v152 
            let v154 : string = "leptos::prelude::AnyView::from($0)"
            let v155 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v153 v154 
            let v156 : string = "path"
            let v157 : string = "<" + v156 + " " + v150 + ">move || { v155 }</" + v156 + ">"
            let v158 : string = "leptos::prelude::view! { " + v157 + " }"
            let v159 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v158 
            let v160 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v159 |> unbox
            let v161 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v162 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v160 v161 
            let v163 : Vec<leptos_prelude_AnyView_> = method173(v162)
            let v164 : string = "leptos::prelude::Fragment::new($0)"
            let v165 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v163 v164 
            let v166 : string = "leptos::prelude::AnyView::from($0)"
            let v167 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v165 v166 
            let v168 : string = "svg"
            let v169 : string = "<" + v168 + " " + v144 + ">move || { v167 }</" + v168 + ">"
            let v170 : string = "leptos::prelude::view! { " + v169 + " }"
            let v171 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v170 
            let v172 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v171 |> unbox
            let v173 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v174 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v172 v173 
            let v175 : Vec<leptos_prelude_AnyView_> = method173(v174)
            let v176 : string = "leptos::prelude::Fragment::new($0)"
            let v177 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v175 v176 
            let v178 : string = "leptos::prelude::AnyView::from($0)"
            let v179 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v177 v178 
            let v180 : string = "span"
            let v181 : string = "<" + v180 + " " + v130 + ">move || { v179 }</" + v180 + ">"
            let v182 : string = "leptos::prelude::view! { " + v181 + " }"
            let v183 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v182 
            let v184 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v183 |> unbox
            let v185 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v186 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v184 v185 
            let v187 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
            let v188 : string = " " + v187 + v127 + ""
            let v189 : string = "No account selected"
            let v190 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v191 : string = "&*$0"
            let v192 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v189 v191 
            let _v190 = v192 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v193 : string = "&*$0"
            let v194 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v189 v193 
            let _v190 = v194 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v195 : string = "&*$0"
            let v196 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v189 v195 
            let _v190 = v196 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v197 : Ref<Str> = v189 |> unbox<Ref<Str>>
            let _v190 = v197 
            #endif
#if FABLE_COMPILER_PYTHON
            let v200 : Ref<Str> = v189 |> unbox<Ref<Str>>
            let _v190 = v200 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v203 : Ref<Str> = v189 |> unbox<Ref<Str>>
            let _v190 = v203 
            #endif
#else
            let v206 : Ref<Str> = v189 |> unbox<Ref<Str>>
            let _v190 = v206 
            #endif
            let v209 : Ref<Str> = _v190 
            let v214 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v215 : string = "String::from($0)"
            let v216 : std_string_String = Fable.Core.RustInterop.emitRustExpr v209 v215 
            let _v214 = v216 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v217 : string = "String::from($0)"
            let v218 : std_string_String = Fable.Core.RustInterop.emitRustExpr v209 v217 
            let _v214 = v218 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v219 : string = "String::from($0)"
            let v220 : std_string_String = Fable.Core.RustInterop.emitRustExpr v209 v219 
            let _v214 = v220 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v221 : std_string_String = v209 |> unbox<std_string_String>
            let _v214 = v221 
            #endif
#if FABLE_COMPILER_PYTHON
            let v224 : std_string_String = v209 |> unbox<std_string_String>
            let _v214 = v224 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v227 : std_string_String = v209 |> unbox<std_string_String>
            let _v214 = v227 
            #endif
#else
            let v230 : std_string_String = v209 |> unbox<std_string_String>
            let _v214 = v230 
            #endif
            let v233 : std_string_String = _v214 
            let v238 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v239 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v233 v238 
            let v240 : Vec<leptos_prelude_AnyView_> = method173(v239)
            let v241 : string = "leptos::prelude::Fragment::new($0)"
            let v242 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v240 v241 
            let v243 : string = "leptos::prelude::AnyView::from($0)"
            let v244 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v242 v243 
            let v245 : string = "pre"
            let v246 : string = "<" + v245 + " " + v188 + ">move || { v244 }</" + v245 + ">"
            let v247 : string = "leptos::prelude::view! { " + v246 + " }"
            let v248 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v247 
            let v249 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v248 |> unbox
            let v250 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v251 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v249 v250 
            let v252 : Vec<leptos_prelude_AnyView_> = method176(v186, v251)
            let v253 : string = "leptos::prelude::Fragment::new($0)"
            let v254 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v252 v253 
            let v255 : string = "leptos::prelude::AnyView::from($0)"
            let v256 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v254 v255 
            let v257 : string = "div"
            let v258 : string = "<" + v257 + " " + v128 + ">move || { v256 }</" + v257 + ">"
            let v259 : string = "leptos::prelude::view! { " + v258 + " }"
            let v260 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v259 
            let v261 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v260 |> unbox
            let v262 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v263 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v261 v262 
            v263
        else
            let v264 : string = $"$0()"
            let v265 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v1 v264 
            let v266 : ((struct (string * unativeint * Heap5) []) option -> US54) = method134()
            let v267 : (std_string_String -> US54) = method135()
            let v268 : US54 = match v265 with Ok x -> v266 x | Error x -> v267 x
            let v291 : US47 =
                match v268 with
                | US54_1(v288) -> (* Error *)
                    US47_1(v288)
                | US54_0(v269) -> (* Ok *)
                    let v270 : ((struct (string * unativeint * Heap5) []) -> US48) = method136()
                    let v271 : US48 option = v269 |> Option.map v270 
                    let v282 : US48 = US48_1
                    let v283 : US48 = v271 |> Option.defaultValue v282 
                    US47_0(v283)
            match v291 with
            | US47_1(v3392) -> (* Error *)
                let v3393 : string = "fable_library_rust::String_::fromString($0)"
                let v3394 : string = Fable.Core.RustInterop.emitRustExpr v3392 v3393 
                let v3395 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
                let v3396 : string = ""
                let v3397 : string = " " + v3395 + v3396 + ""
                let v3398 : string = "class=\"[height:17px]\""
                let v3399 : string = " " + v3398 + v3396 + ""
                let v3400 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                let v3401 : string = "fill=\"none\""
                let v3402 : string = "height=\"100%\""
                let v3403 : string = "viewBox=\"0 0 24 24\""
                let v3404 : string = "stroke-width=\"1.5\""
                let v3405 : string = "stroke=\"currentColor\""
                let v3406 : string = "class=\"text-red-700\""
                let v3407 : string = " " + v3400 + v3396 + ""
                let v3408 : string = " " + v3401 + v3407 + ""
                let v3409 : string = " " + v3402 + v3408 + ""
                let v3410 : string = " " + v3403 + v3409 + ""
                let v3411 : string = " " + v3404 + v3410 + ""
                let v3412 : string = " " + v3405 + v3411 + ""
                let v3413 : string = " " + v3406 + v3412 + ""
                let v3414 : string = "stroke-linecap=\"round\""
                let v3415 : string = "stroke-linejoin=\"round\""
                let v3416 : string = "d=\"M6 18L18 6M6 6l12 12\""
                let v3417 : string = " " + v3414 + v3396 + ""
                let v3418 : string = " " + v3415 + v3417 + ""
                let v3419 : string = " " + v3416 + v3418 + ""
                let v3420 : Vec<leptos_prelude_AnyView_> = method172()
                let v3421 : string = "leptos::prelude::Fragment::new($0)"
                let v3422 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3420 v3421 
                let v3423 : string = "leptos::prelude::AnyView::from($0)"
                let v3424 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3422 v3423 
                let v3425 : string = "path"
                let v3426 : string = "<" + v3425 + " " + v3419 + ">move || { v3424 }</" + v3425 + ">"
                let v3427 : string = "leptos::prelude::view! { " + v3426 + " }"
                let v3428 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3427 
                let v3429 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v3428 |> unbox
                let v3430 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v3431 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3429 v3430 
                let v3432 : Vec<leptos_prelude_AnyView_> = method173(v3431)
                let v3433 : string = "leptos::prelude::Fragment::new($0)"
                let v3434 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3432 v3433 
                let v3435 : string = "leptos::prelude::AnyView::from($0)"
                let v3436 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3434 v3435 
                let v3437 : string = "svg"
                let v3438 : string = "<" + v3437 + " " + v3413 + ">move || { v3436 }</" + v3437 + ">"
                let v3439 : string = "leptos::prelude::view! { " + v3438 + " }"
                let v3440 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3439 
                let v3441 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3440 |> unbox
                let v3442 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v3443 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3441 v3442 
                let v3444 : Vec<leptos_prelude_AnyView_> = method173(v3443)
                let v3445 : string = "leptos::prelude::Fragment::new($0)"
                let v3446 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3444 v3445 
                let v3447 : string = "leptos::prelude::AnyView::from($0)"
                let v3448 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3446 v3447 
                let v3449 : string = "span"
                let v3450 : string = "<" + v3449 + " " + v3399 + ">move || { v3448 }</" + v3449 + ">"
                let v3451 : string = "leptos::prelude::view! { " + v3450 + " }"
                let v3452 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3451 
                let v3453 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v3452 |> unbox
                let v3454 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v3455 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3453 v3454 
                let v3456 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
                let v3457 : string = " " + v3456 + v3396 + ""
                let v3458 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3459 : string = "&*$0"
                let v3460 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3394 v3459 
                let _v3458 = v3460 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3461 : string = "&*$0"
                let v3462 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3394 v3461 
                let _v3458 = v3462 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3463 : string = "&*$0"
                let v3464 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3394 v3463 
                let _v3458 = v3464 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3465 : Ref<Str> = v3394 |> unbox<Ref<Str>>
                let _v3458 = v3465 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3468 : Ref<Str> = v3394 |> unbox<Ref<Str>>
                let _v3458 = v3468 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3471 : Ref<Str> = v3394 |> unbox<Ref<Str>>
                let _v3458 = v3471 
                #endif
#else
                let v3474 : Ref<Str> = v3394 |> unbox<Ref<Str>>
                let _v3458 = v3474 
                #endif
                let v3477 : Ref<Str> = _v3458 
                let v3482 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3483 : string = "String::from($0)"
                let v3484 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3477 v3483 
                let _v3482 = v3484 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3485 : string = "String::from($0)"
                let v3486 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3477 v3485 
                let _v3482 = v3486 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3487 : string = "String::from($0)"
                let v3488 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3477 v3487 
                let _v3482 = v3488 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3489 : std_string_String = v3477 |> unbox<std_string_String>
                let _v3482 = v3489 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3492 : std_string_String = v3477 |> unbox<std_string_String>
                let _v3482 = v3492 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3495 : std_string_String = v3477 |> unbox<std_string_String>
                let _v3482 = v3495 
                #endif
#else
                let v3498 : std_string_String = v3477 |> unbox<std_string_String>
                let _v3482 = v3498 
                #endif
                let v3501 : std_string_String = _v3482 
                let v3506 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                let v3507 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3501 v3506 
                let v3508 : Vec<leptos_prelude_AnyView_> = method173(v3507)
                let v3509 : string = "leptos::prelude::Fragment::new($0)"
                let v3510 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3508 v3509 
                let v3511 : string = "leptos::prelude::AnyView::from($0)"
                let v3512 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3510 v3511 
                let v3513 : string = "pre"
                let v3514 : string = "<" + v3513 + " " + v3457 + ">move || { v3512 }</" + v3513 + ">"
                let v3515 : string = "leptos::prelude::view! { " + v3514 + " }"
                let v3516 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3515 
                let v3517 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v3516 |> unbox
                let v3518 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v3519 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3517 v3518 
                let v3520 : Vec<leptos_prelude_AnyView_> = method176(v3455, v3519)
                let v3521 : string = "leptos::prelude::Fragment::new($0)"
                let v3522 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3520 v3521 
                let v3523 : string = "leptos::prelude::AnyView::from($0)"
                let v3524 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3522 v3523 
                let v3525 : string = "div"
                let v3526 : string = "<" + v3525 + " " + v3397 + ">move || { v3524 }</" + v3525 + ">"
                let v3527 : string = "leptos::prelude::view! { " + v3526 + " }"
                let v3528 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3527 
                let v3529 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3528 |> unbox
                let v3530 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v3531 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3529 v3530 
                v3531
            | US47_0(v292) -> (* Ok *)
                match v292 with
                | US48_0(v293) -> (* Some *)
                    let v294 : leptos_prelude_RwSignal<Heap1> = v0.l0
                    let v295 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
                    let v296 : Heap1 = Fable.Core.RustInterop.emitRustExpr v294 v295 
                    let v297 : leptos_prelude_RwSignal<Heap0> = v296.l3
                    let v298 : string = $"leptos::prelude::RwSignal::get(&$0)"
                    let v299 : Heap0 = Fable.Core.RustInterop.emitRustExpr v297 v298 
                    let v300 : US1 = v299.l4
                    let v301 : bool =
                        match v300 with
                        | US1_0 -> (* Details *)
                            true
                        | _ ->
                            false
                    if v301 then
                        let v302 : string = "class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\""
                        let v303 : string = ""
                        let v304 : string = " " + v302 + v303 + ""
                        let v305 : string = "$0.to_vec()"
                        let v306 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v293 v305 
                        let v307 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                        let v308 : bool = Fable.Core.RustInterop.emitRustExpr v306 v307 
                        let v309 : string = "x"
                        let struct (v310 : string, v311 : unativeint, v312 : Heap5) = Fable.Core.RustInterop.emitRustExpr () v309 
                        let v313 : std_string_String = v312.l0
                        let v314 : std_string_String = v312.l1
                        let v315 : std_string_String = v312.l2
                        let v316 : std_string_String = v312.l3
                        let v317 : std_string_String = v312.l4
                        let v318 : std_string_String = v312.l5
                        let v319 : uint32 = v312.l6
                        let v320 : (struct (std_string_String * std_string_String option) []) = v312.l7
                        let v321 : float = v312.l8
                        let v322 : bool = v312.l9
                        let v323 : float = v312.l10
                        let v324 : (std_string_String []) = v312.l11
                        let v325 : (unativeint -> int64) = int64
                        let v326 : int64 = v325 v311
                        let v329 : string = "transaction.render (1)"
                        let v330 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v331 : bool = Fable.Core.RustInterop.emitRustExpr v329 v330 
                        let v332 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
                        let v333 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v332 
                        let v334 : string = "$0.unwrap()"
                        let v335 : Heap2 = Fable.Core.RustInterop.emitRustExpr v333 v334 
                        let v336 : string = "class=\"flex flex-1 flex-col overflow-x-auto\""
                        let v337 : string = " " + v336 + v303 + ""
                        let v338 : string = "class=\"flex items-center pb-[6px]\""
                        let v339 : string = " " + v338 + v303 + ""
                        let v340 : string = "class=\"pr-[15px] [font-size:13px]\""
                        let v341 : string = " " + v340 + v303 + ""
                        let v342 : string = "Func0::new(move || $0())"
                        let v343 : (unit -> leptos_dom_Fragment) = closure279(v326)
                        let v344 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v343 v342 
                        let v345 : Func0<leptos_dom_Fragment> = method184(v344)
                        let v346 : string = "(move || v345())()"
                        let v347 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v346 
                        let v348 : string = "leptos::prelude::AnyView::from($0)"
                        let v349 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v347 v348 
                        let v350 : string = "span"
                        let v351 : string = "<" + v350 + " " + v341 + ">move || { v349 }</" + v350 + ">"
                        let v352 : string = "leptos::prelude::view! { " + v351 + " }"
                        let v353 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v352 
                        let v354 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v353 |> unbox
                        let v355 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v356 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v354 v355 
                        let v357 : string = "class=\"h-px flex-1 bg-gray-300\""
                        let v358 : string = " " + v357 + v303 + ""
                        let v359 : Vec<leptos_prelude_AnyView_> = method172()
                        let v360 : string = "leptos::prelude::Fragment::new($0)"
                        let v361 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v359 v360 
                        let v362 : string = "leptos::prelude::AnyView::from($0)"
                        let v363 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v361 v362 
                        let v364 : string = "<" + v350 + " " + v358 + ">move || { v363 }</" + v350 + ">"
                        let v365 : string = "leptos::prelude::view! { " + v364 + " }"
                        let v366 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v365 
                        let v367 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v366 |> unbox
                        let v368 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v369 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v367 v368 
                        let v370 : Vec<leptos_prelude_AnyView_> = method176(v356, v369)
                        let v371 : string = "leptos::prelude::Fragment::new($0)"
                        let v372 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v370 v371 
                        let v373 : string = "leptos::prelude::AnyView::from($0)"
                        let v374 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v372 v373 
                        let v375 : string = "<" + v350 + " " + v339 + ">move || { v374 }</" + v350 + ">"
                        let v376 : string = "leptos::prelude::view! { " + v375 + " }"
                        let v377 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v376 
                        let v378 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v377 |> unbox
                        let v379 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v380 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v378 v379 
                        let v381 : string = "class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\""
                        let v382 : string = " " + v381 + v303 + ""
                        let v383 : (unit -> leptos_dom_Fragment) = method235()
                        let v384 : (unit -> leptos_dom_Fragment) = method236(v310)
                        let v385 : string = "$0"
                        let v386 : (unit -> string) = closure282()
                        let v387 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v386 v385 
                        let v388 : string = "$0"
                        let v389 : (unit -> string) = closure283()
                        let v390 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v389 v388 
                        let v391 : string = "$0"
                        let v392 : (unit -> string) = closure245()
                        let v393 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v391 
                        let v394 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v393(()) + \" \" + &v390(()) + \" \" + &v387(())"
                        let v395 : string = " " + v394 + v303 + ""
                        let v396 : string = "$0"
                        let v397 : (unit -> string) = closure246()
                        let v398 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v396 
                        let v399 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v400 : string = " " + v399 + v303 + ""
                        let v401 : leptos_dom_Fragment = v383 ()
                        let v402 : string = "leptos::prelude::AnyView::from($0)"
                        let v403 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v401 v402 
                        let v404 : string = "dt"
                        let v405 : string = "<" + v404 + " " + v400 + ">move || { v403 }</" + v404 + ">"
                        let v406 : string = "leptos::prelude::view! { " + v405 + " }"
                        let v407 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v406 
                        let v408 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v407 |> unbox
                        let v409 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v410 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v408 v409 
                        let v411 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v398(())"
                        let v412 : string = " " + v411 + v303 + ""
                        let v413 : leptos_dom_Fragment = v384 ()
                        let v414 : string = "leptos::prelude::AnyView::from($0)"
                        let v415 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v413 v414 
                        let v416 : string = "dd"
                        let v417 : string = "<" + v416 + " " + v412 + ">move || { v415 }</" + v416 + ">"
                        let v418 : string = "leptos::prelude::view! { " + v417 + " }"
                        let v419 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v418 
                        let v420 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v419 |> unbox
                        let v421 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v422 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v420 v421 
                        let v423 : Vec<leptos_prelude_AnyView_> = method176(v410, v422)
                        let v424 : string = "leptos::prelude::Fragment::new($0)"
                        let v425 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v423 v424 
                        let v426 : string = "leptos::prelude::AnyView::from($0)"
                        let v427 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v425 v426 
                        let v428 : string = "dl"
                        let v429 : string = "<" + v428 + " " + v395 + ">move || { v427 }</" + v428 + ">"
                        let v430 : string = "leptos::prelude::view! { " + v429 + " }"
                        let v431 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v430 
                        let v432 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v431 |> unbox
                        let v433 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v434 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v432 v433 
                        let v435 : (unit -> leptos_dom_Fragment) = method237()
                        let v436 : (unit -> leptos_dom_Fragment) = method238(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v437 : string = "$0"
                        let v438 : (unit -> string) = closure286()
                        let v439 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v438 v437 
                        let v440 : string = "$0"
                        let v441 : (unit -> string) = closure287()
                        let v442 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v441 v440 
                        let v443 : string = "$0"
                        let v444 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v443 
                        let v445 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v444(()) + \" \" + &v442(()) + \" \" + &v439(())"
                        let v446 : string = " " + v445 + v303 + ""
                        let v447 : string = "$0"
                        let v448 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v447 
                        let v449 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v450 : string = " " + v449 + v303 + ""
                        let v451 : leptos_dom_Fragment = v435 ()
                        let v452 : string = "leptos::prelude::AnyView::from($0)"
                        let v453 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v451 v452 
                        let v454 : string = "<" + v404 + " " + v450 + ">move || { v453 }</" + v404 + ">"
                        let v455 : string = "leptos::prelude::view! { " + v454 + " }"
                        let v456 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v455 
                        let v457 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v456 |> unbox
                        let v458 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v459 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v457 v458 
                        let v460 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v448(())"
                        let v461 : string = " " + v460 + v303 + ""
                        let v462 : leptos_dom_Fragment = v436 ()
                        let v463 : string = "leptos::prelude::AnyView::from($0)"
                        let v464 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v462 v463 
                        let v465 : string = "<" + v416 + " " + v461 + ">move || { v464 }</" + v416 + ">"
                        let v466 : string = "leptos::prelude::view! { " + v465 + " }"
                        let v467 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v466 
                        let v468 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v467 |> unbox
                        let v469 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v470 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v468 v469 
                        let v471 : Vec<leptos_prelude_AnyView_> = method176(v459, v470)
                        let v472 : string = "leptos::prelude::Fragment::new($0)"
                        let v473 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v471 v472 
                        let v474 : string = "leptos::prelude::AnyView::from($0)"
                        let v475 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v473 v474 
                        let v476 : string = "<" + v428 + " " + v446 + ">move || { v475 }</" + v428 + ">"
                        let v477 : string = "leptos::prelude::view! { " + v476 + " }"
                        let v478 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v477 
                        let v479 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v478 |> unbox
                        let v480 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v481 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v479 v480 
                        let v482 : (unit -> leptos_dom_Fragment) = method239()
                        let v483 : (unit -> leptos_dom_Fragment) = method240(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v484 : string = "$0"
                        let v485 : (unit -> string) = closure290()
                        let v486 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v485 v484 
                        let v487 : string = "$0"
                        let v488 : (unit -> string) = closure291()
                        let v489 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v488 v487 
                        let v490 : string = "$0"
                        let v491 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v490 
                        let v492 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v491(()) + \" \" + &v489(()) + \" \" + &v486(())"
                        let v493 : string = " " + v492 + v303 + ""
                        let v494 : string = "$0"
                        let v495 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v494 
                        let v496 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v497 : string = " " + v496 + v303 + ""
                        let v498 : leptos_dom_Fragment = v482 ()
                        let v499 : string = "leptos::prelude::AnyView::from($0)"
                        let v500 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v498 v499 
                        let v501 : string = "<" + v404 + " " + v497 + ">move || { v500 }</" + v404 + ">"
                        let v502 : string = "leptos::prelude::view! { " + v501 + " }"
                        let v503 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v502 
                        let v504 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v503 |> unbox
                        let v505 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v506 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v504 v505 
                        let v507 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v495(())"
                        let v508 : string = " " + v507 + v303 + ""
                        let v509 : leptos_dom_Fragment = v483 ()
                        let v510 : string = "leptos::prelude::AnyView::from($0)"
                        let v511 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v509 v510 
                        let v512 : string = "<" + v416 + " " + v508 + ">move || { v511 }</" + v416 + ">"
                        let v513 : string = "leptos::prelude::view! { " + v512 + " }"
                        let v514 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v513 
                        let v515 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v514 |> unbox
                        let v516 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v517 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v515 v516 
                        let v518 : Vec<leptos_prelude_AnyView_> = method176(v506, v517)
                        let v519 : string = "leptos::prelude::Fragment::new($0)"
                        let v520 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v518 v519 
                        let v521 : string = "leptos::prelude::AnyView::from($0)"
                        let v522 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v520 v521 
                        let v523 : string = "<" + v428 + " " + v493 + ">move || { v522 }</" + v428 + ">"
                        let v524 : string = "leptos::prelude::view! { " + v523 + " }"
                        let v525 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v524 
                        let v526 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v525 |> unbox
                        let v527 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v528 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v526 v527 
                        let v529 : (unit -> leptos_dom_Fragment) = method241()
                        let v530 : (unit -> leptos_dom_Fragment) = method242(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v531 : string = "$0"
                        let v532 : (unit -> string) = closure294()
                        let v533 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v532 v531 
                        let v534 : string = "$0"
                        let v535 : (unit -> string) = closure295()
                        let v536 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v535 v534 
                        let v537 : string = "$0"
                        let v538 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v537 
                        let v539 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v538(()) + \" \" + &v536(()) + \" \" + &v533(())"
                        let v540 : string = " " + v539 + v303 + ""
                        let v541 : string = "$0"
                        let v542 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v541 
                        let v543 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v544 : string = " " + v543 + v303 + ""
                        let v545 : leptos_dom_Fragment = v529 ()
                        let v546 : string = "leptos::prelude::AnyView::from($0)"
                        let v547 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v545 v546 
                        let v548 : string = "<" + v404 + " " + v544 + ">move || { v547 }</" + v404 + ">"
                        let v549 : string = "leptos::prelude::view! { " + v548 + " }"
                        let v550 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v549 
                        let v551 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v550 |> unbox
                        let v552 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v553 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v551 v552 
                        let v554 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v542(())"
                        let v555 : string = " " + v554 + v303 + ""
                        let v556 : leptos_dom_Fragment = v530 ()
                        let v557 : string = "leptos::prelude::AnyView::from($0)"
                        let v558 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v556 v557 
                        let v559 : string = "<" + v416 + " " + v555 + ">move || { v558 }</" + v416 + ">"
                        let v560 : string = "leptos::prelude::view! { " + v559 + " }"
                        let v561 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v560 
                        let v562 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v561 |> unbox
                        let v563 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v564 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v562 v563 
                        let v565 : Vec<leptos_prelude_AnyView_> = method176(v553, v564)
                        let v566 : string = "leptos::prelude::Fragment::new($0)"
                        let v567 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v565 v566 
                        let v568 : string = "leptos::prelude::AnyView::from($0)"
                        let v569 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v567 v568 
                        let v570 : string = "<" + v428 + " " + v540 + ">move || { v569 }</" + v428 + ">"
                        let v571 : string = "leptos::prelude::view! { " + v570 + " }"
                        let v572 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v571 
                        let v573 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v572 |> unbox
                        let v574 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v575 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v573 v574 
                        let v576 : (unit -> leptos_dom_Fragment) = method243()
                        let v577 : (unit -> leptos_dom_Fragment) = method244(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v578 : string = "$0"
                        let v579 : (unit -> string) = closure309()
                        let v580 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v579 v578 
                        let v581 : string = "$0"
                        let v582 : (unit -> string) = closure310()
                        let v583 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v582 v581 
                        let v584 : string = "$0"
                        let v585 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v584 
                        let v586 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v585(()) + \" \" + &v583(()) + \" \" + &v580(())"
                        let v587 : string = " " + v586 + v303 + ""
                        let v588 : string = "$0"
                        let v589 : (unit -> string) = closure311()
                        let v590 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v589 v588 
                        let v591 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v592 : string = " " + v591 + v303 + ""
                        let v593 : leptos_dom_Fragment = v576 ()
                        let v594 : string = "leptos::prelude::AnyView::from($0)"
                        let v595 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v593 v594 
                        let v596 : string = "<" + v404 + " " + v592 + ">move || { v595 }</" + v404 + ">"
                        let v597 : string = "leptos::prelude::view! { " + v596 + " }"
                        let v598 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v597 
                        let v599 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v598 |> unbox
                        let v600 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v601 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v599 v600 
                        let v602 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v590(())"
                        let v603 : string = " " + v602 + v303 + ""
                        let v604 : leptos_dom_Fragment = v577 ()
                        let v605 : string = "leptos::prelude::AnyView::from($0)"
                        let v606 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v604 v605 
                        let v607 : string = "<" + v416 + " " + v603 + ">move || { v606 }</" + v416 + ">"
                        let v608 : string = "leptos::prelude::view! { " + v607 + " }"
                        let v609 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v608 
                        let v610 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v609 |> unbox
                        let v611 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v612 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v610 v611 
                        let v613 : Vec<leptos_prelude_AnyView_> = method176(v601, v612)
                        let v614 : string = "leptos::prelude::Fragment::new($0)"
                        let v615 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v613 v614 
                        let v616 : string = "leptos::prelude::AnyView::from($0)"
                        let v617 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v615 v616 
                        let v618 : string = "<" + v428 + " " + v587 + ">move || { v617 }</" + v428 + ">"
                        let v619 : string = "leptos::prelude::view! { " + v618 + " }"
                        let v620 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v619 
                        let v621 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v620 |> unbox
                        let v622 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v623 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v621 v622 
                        let v624 : (unit -> leptos_dom_Fragment) = method249()
                        let v625 : (unit -> leptos_dom_Fragment) = method250(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v626 : string = "$0"
                        let v627 : (unit -> string) = closure314()
                        let v628 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v627 v626 
                        let v629 : string = "$0"
                        let v630 : (unit -> string) = closure315()
                        let v631 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v630 v629 
                        let v632 : string = "$0"
                        let v633 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v632 
                        let v634 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v633(()) + \" \" + &v631(()) + \" \" + &v628(())"
                        let v635 : string = " " + v634 + v303 + ""
                        let v636 : string = "$0"
                        let v637 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v636 
                        let v638 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v639 : string = " " + v638 + v303 + ""
                        let v640 : leptos_dom_Fragment = v624 ()
                        let v641 : string = "leptos::prelude::AnyView::from($0)"
                        let v642 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v640 v641 
                        let v643 : string = "<" + v404 + " " + v639 + ">move || { v642 }</" + v404 + ">"
                        let v644 : string = "leptos::prelude::view! { " + v643 + " }"
                        let v645 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v644 
                        let v646 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v645 |> unbox
                        let v647 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v648 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v646 v647 
                        let v649 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v637(())"
                        let v650 : string = " " + v649 + v303 + ""
                        let v651 : leptos_dom_Fragment = v625 ()
                        let v652 : string = "leptos::prelude::AnyView::from($0)"
                        let v653 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v651 v652 
                        let v654 : string = "<" + v416 + " " + v650 + ">move || { v653 }</" + v416 + ">"
                        let v655 : string = "leptos::prelude::view! { " + v654 + " }"
                        let v656 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v655 
                        let v657 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v656 |> unbox
                        let v658 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v659 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v657 v658 
                        let v660 : Vec<leptos_prelude_AnyView_> = method176(v648, v659)
                        let v661 : string = "leptos::prelude::Fragment::new($0)"
                        let v662 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v660 v661 
                        let v663 : string = "leptos::prelude::AnyView::from($0)"
                        let v664 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v662 v663 
                        let v665 : string = "<" + v428 + " " + v635 + ">move || { v664 }</" + v428 + ">"
                        let v666 : string = "leptos::prelude::view! { " + v665 + " }"
                        let v667 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v666 
                        let v668 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v667 |> unbox
                        let v669 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v670 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v668 v669 
                        let v671 : (unit -> leptos_dom_Fragment) = method251()
                        let v672 : (unit -> leptos_dom_Fragment) = method252(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v673 : string = "$0"
                        let v674 : (unit -> string) = closure318()
                        let v675 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v674 v673 
                        let v676 : string = "$0"
                        let v677 : (unit -> string) = closure319()
                        let v678 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v677 v676 
                        let v679 : string = "$0"
                        let v680 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v679 
                        let v681 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v680(()) + \" \" + &v678(()) + \" \" + &v675(())"
                        let v682 : string = " " + v681 + v303 + ""
                        let v683 : string = "$0"
                        let v684 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v683 
                        let v685 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v686 : string = " " + v685 + v303 + ""
                        let v687 : leptos_dom_Fragment = v671 ()
                        let v688 : string = "leptos::prelude::AnyView::from($0)"
                        let v689 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v687 v688 
                        let v690 : string = "<" + v404 + " " + v686 + ">move || { v689 }</" + v404 + ">"
                        let v691 : string = "leptos::prelude::view! { " + v690 + " }"
                        let v692 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v691 
                        let v693 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v692 |> unbox
                        let v694 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v695 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v693 v694 
                        let v696 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v684(())"
                        let v697 : string = " " + v696 + v303 + ""
                        let v698 : leptos_dom_Fragment = v672 ()
                        let v699 : string = "leptos::prelude::AnyView::from($0)"
                        let v700 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v698 v699 
                        let v701 : string = "<" + v416 + " " + v697 + ">move || { v700 }</" + v416 + ">"
                        let v702 : string = "leptos::prelude::view! { " + v701 + " }"
                        let v703 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v702 
                        let v704 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v703 |> unbox
                        let v705 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v706 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v704 v705 
                        let v707 : Vec<leptos_prelude_AnyView_> = method176(v695, v706)
                        let v708 : string = "leptos::prelude::Fragment::new($0)"
                        let v709 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v707 v708 
                        let v710 : string = "leptos::prelude::AnyView::from($0)"
                        let v711 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v709 v710 
                        let v712 : string = "<" + v428 + " " + v682 + ">move || { v711 }</" + v428 + ">"
                        let v713 : string = "leptos::prelude::view! { " + v712 + " }"
                        let v714 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v713 
                        let v715 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v714 |> unbox
                        let v716 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v717 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v715 v716 
                        let v718 : (unit -> leptos_dom_Fragment) = method253()
                        let v719 : (unit -> leptos_dom_Fragment) = method254(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v720 : string = "$0"
                        let v721 : (unit -> string) = closure322()
                        let v722 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v721 v720 
                        let v723 : string = "$0"
                        let v724 : (unit -> string) = closure323()
                        let v725 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v724 v723 
                        let v726 : string = "$0"
                        let v727 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v726 
                        let v728 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v727(()) + \" \" + &v725(()) + \" \" + &v722(())"
                        let v729 : string = " " + v728 + v303 + ""
                        let v730 : string = "$0"
                        let v731 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v730 
                        let v732 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v733 : string = " " + v732 + v303 + ""
                        let v734 : leptos_dom_Fragment = v718 ()
                        let v735 : string = "leptos::prelude::AnyView::from($0)"
                        let v736 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v734 v735 
                        let v737 : string = "<" + v404 + " " + v733 + ">move || { v736 }</" + v404 + ">"
                        let v738 : string = "leptos::prelude::view! { " + v737 + " }"
                        let v739 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v738 
                        let v740 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v739 |> unbox
                        let v741 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v742 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v740 v741 
                        let v743 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v731(())"
                        let v744 : string = " " + v743 + v303 + ""
                        let v745 : leptos_dom_Fragment = v719 ()
                        let v746 : string = "leptos::prelude::AnyView::from($0)"
                        let v747 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v745 v746 
                        let v748 : string = "<" + v416 + " " + v744 + ">move || { v747 }</" + v416 + ">"
                        let v749 : string = "leptos::prelude::view! { " + v748 + " }"
                        let v750 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v749 
                        let v751 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v750 |> unbox
                        let v752 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v753 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v751 v752 
                        let v754 : Vec<leptos_prelude_AnyView_> = method176(v742, v753)
                        let v755 : string = "leptos::prelude::Fragment::new($0)"
                        let v756 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v754 v755 
                        let v757 : string = "leptos::prelude::AnyView::from($0)"
                        let v758 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v756 v757 
                        let v759 : string = "<" + v428 + " " + v729 + ">move || { v758 }</" + v428 + ">"
                        let v760 : string = "leptos::prelude::view! { " + v759 + " }"
                        let v761 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v760 
                        let v762 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v761 |> unbox
                        let v763 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v764 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v762 v763 
                        let v765 : (unit -> leptos_dom_Fragment) = method255()
                        let v766 : (unit -> leptos_dom_Fragment) = method256(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v767 : string = "$0"
                        let v768 : (unit -> string) = closure326()
                        let v769 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v768 v767 
                        let v770 : string = "$0"
                        let v771 : (unit -> string) = closure327()
                        let v772 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v771 v770 
                        let v773 : string = "$0"
                        let v774 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v773 
                        let v775 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v774(()) + \" \" + &v772(()) + \" \" + &v769(())"
                        let v776 : string = " " + v775 + v303 + ""
                        let v777 : string = "$0"
                        let v778 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v777 
                        let v779 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v780 : string = " " + v779 + v303 + ""
                        let v781 : leptos_dom_Fragment = v765 ()
                        let v782 : string = "leptos::prelude::AnyView::from($0)"
                        let v783 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v781 v782 
                        let v784 : string = "<" + v404 + " " + v780 + ">move || { v783 }</" + v404 + ">"
                        let v785 : string = "leptos::prelude::view! { " + v784 + " }"
                        let v786 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v785 
                        let v787 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v786 |> unbox
                        let v788 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v789 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v787 v788 
                        let v790 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v778(())"
                        let v791 : string = " " + v790 + v303 + ""
                        let v792 : leptos_dom_Fragment = v766 ()
                        let v793 : string = "leptos::prelude::AnyView::from($0)"
                        let v794 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v792 v793 
                        let v795 : string = "<" + v416 + " " + v791 + ">move || { v794 }</" + v416 + ">"
                        let v796 : string = "leptos::prelude::view! { " + v795 + " }"
                        let v797 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v796 
                        let v798 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v797 |> unbox
                        let v799 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v800 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v798 v799 
                        let v801 : Vec<leptos_prelude_AnyView_> = method176(v789, v800)
                        let v802 : string = "leptos::prelude::Fragment::new($0)"
                        let v803 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v801 v802 
                        let v804 : string = "leptos::prelude::AnyView::from($0)"
                        let v805 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v803 v804 
                        let v806 : string = "<" + v428 + " " + v776 + ">move || { v805 }</" + v428 + ">"
                        let v807 : string = "leptos::prelude::view! { " + v806 + " }"
                        let v808 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v807 
                        let v809 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v808 |> unbox
                        let v810 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v811 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v809 v810 
                        let v812 : (unit -> leptos_dom_Fragment) = method257()
                        let v813 : (unit -> leptos_dom_Fragment) = method258(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v814 : string = "$0"
                        let v815 : (unit -> string) = closure330()
                        let v816 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v815 v814 
                        let v817 : string = "$0"
                        let v818 : (unit -> string) = closure331()
                        let v819 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v818 v817 
                        let v820 : string = "$0"
                        let v821 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v820 
                        let v822 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v821(()) + \" \" + &v819(()) + \" \" + &v816(())"
                        let v823 : string = " " + v822 + v303 + ""
                        let v824 : string = "$0"
                        let v825 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v824 
                        let v826 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v827 : string = " " + v826 + v303 + ""
                        let v828 : leptos_dom_Fragment = v812 ()
                        let v829 : string = "leptos::prelude::AnyView::from($0)"
                        let v830 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v828 v829 
                        let v831 : string = "<" + v404 + " " + v827 + ">move || { v830 }</" + v404 + ">"
                        let v832 : string = "leptos::prelude::view! { " + v831 + " }"
                        let v833 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v832 
                        let v834 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v833 |> unbox
                        let v835 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v836 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v834 v835 
                        let v837 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v825(())"
                        let v838 : string = " " + v837 + v303 + ""
                        let v839 : leptos_dom_Fragment = v813 ()
                        let v840 : string = "leptos::prelude::AnyView::from($0)"
                        let v841 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v839 v840 
                        let v842 : string = "<" + v416 + " " + v838 + ">move || { v841 }</" + v416 + ">"
                        let v843 : string = "leptos::prelude::view! { " + v842 + " }"
                        let v844 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v843 
                        let v845 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v844 |> unbox
                        let v846 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v847 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v845 v846 
                        let v848 : Vec<leptos_prelude_AnyView_> = method176(v836, v847)
                        let v849 : string = "leptos::prelude::Fragment::new($0)"
                        let v850 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v848 v849 
                        let v851 : string = "leptos::prelude::AnyView::from($0)"
                        let v852 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v850 v851 
                        let v853 : string = "<" + v428 + " " + v823 + ">move || { v852 }</" + v428 + ">"
                        let v854 : string = "leptos::prelude::view! { " + v853 + " }"
                        let v855 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v854 
                        let v856 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v855 |> unbox
                        let v857 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v858 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v856 v857 
                        let v859 : (unit -> leptos_dom_Fragment) = method259()
                        let v860 : (unit -> leptos_dom_Fragment) = method260(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v861 : string = "$0"
                        let v862 : (unit -> string) = closure334()
                        let v863 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v862 v861 
                        let v864 : string = "$0"
                        let v865 : (unit -> string) = closure335()
                        let v866 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v865 v864 
                        let v867 : string = "$0"
                        let v868 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v867 
                        let v869 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v868(()) + \" \" + &v866(()) + \" \" + &v863(())"
                        let v870 : string = " " + v869 + v303 + ""
                        let v871 : string = "$0"
                        let v872 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v871 
                        let v873 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v874 : string = " " + v873 + v303 + ""
                        let v875 : leptos_dom_Fragment = v859 ()
                        let v876 : string = "leptos::prelude::AnyView::from($0)"
                        let v877 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v875 v876 
                        let v878 : string = "<" + v404 + " " + v874 + ">move || { v877 }</" + v404 + ">"
                        let v879 : string = "leptos::prelude::view! { " + v878 + " }"
                        let v880 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v879 
                        let v881 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v880 |> unbox
                        let v882 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v883 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v881 v882 
                        let v884 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v872(())"
                        let v885 : string = " " + v884 + v303 + ""
                        let v886 : leptos_dom_Fragment = v860 ()
                        let v887 : string = "leptos::prelude::AnyView::from($0)"
                        let v888 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v886 v887 
                        let v889 : string = "<" + v416 + " " + v885 + ">move || { v888 }</" + v416 + ">"
                        let v890 : string = "leptos::prelude::view! { " + v889 + " }"
                        let v891 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v890 
                        let v892 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v891 |> unbox
                        let v893 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v894 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v892 v893 
                        let v895 : Vec<leptos_prelude_AnyView_> = method176(v883, v894)
                        let v896 : string = "leptos::prelude::Fragment::new($0)"
                        let v897 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v895 v896 
                        let v898 : string = "leptos::prelude::AnyView::from($0)"
                        let v899 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v897 v898 
                        let v900 : string = "<" + v428 + " " + v870 + ">move || { v899 }</" + v428 + ">"
                        let v901 : string = "leptos::prelude::view! { " + v900 + " }"
                        let v902 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v901 
                        let v903 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v902 |> unbox
                        let v904 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v905 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v903 v904 
                        let v906 : (unit -> leptos_dom_Fragment) = method261()
                        let v907 : (unit -> leptos_dom_Fragment) = method262(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                        let v908 : string = "$0"
                        let v909 : (unit -> string) = closure338()
                        let v910 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v909 v908 
                        let v911 : string = "$0"
                        let v912 : (unit -> string) = closure339()
                        let v913 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v912 v911 
                        let v914 : string = "$0"
                        let v915 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v914 
                        let v916 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v915(()) + \" \" + &v913(()) + \" \" + &v910(())"
                        let v917 : string = " " + v916 + v303 + ""
                        let v918 : string = "$0"
                        let v919 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v918 
                        let v920 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v921 : string = " " + v920 + v303 + ""
                        let v922 : leptos_dom_Fragment = v906 ()
                        let v923 : string = "leptos::prelude::AnyView::from($0)"
                        let v924 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v922 v923 
                        let v925 : string = "<" + v404 + " " + v921 + ">move || { v924 }</" + v404 + ">"
                        let v926 : string = "leptos::prelude::view! { " + v925 + " }"
                        let v927 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v926 
                        let v928 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v927 |> unbox
                        let v929 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v930 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v928 v929 
                        let v931 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v919(())"
                        let v932 : string = " " + v931 + v303 + ""
                        let v933 : leptos_dom_Fragment = v907 ()
                        let v934 : string = "leptos::prelude::AnyView::from($0)"
                        let v935 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v933 v934 
                        let v936 : string = "<" + v416 + " " + v932 + ">move || { v935 }</" + v416 + ">"
                        let v937 : string = "leptos::prelude::view! { " + v936 + " }"
                        let v938 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v937 
                        let v939 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v938 |> unbox
                        let v940 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v941 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v939 v940 
                        let v942 : Vec<leptos_prelude_AnyView_> = method176(v930, v941)
                        let v943 : string = "leptos::prelude::Fragment::new($0)"
                        let v944 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v942 v943 
                        let v945 : string = "leptos::prelude::AnyView::from($0)"
                        let v946 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v944 v945 
                        let v947 : string = "<" + v428 + " " + v917 + ">move || { v946 }</" + v428 + ">"
                        let v948 : string = "leptos::prelude::view! { " + v947 + " }"
                        let v949 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v948 
                        let v950 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v949 |> unbox
                        let v951 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v952 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v950 v951 
                        let v953 : uint64 = System.Convert.ToUInt64 v324.Length
                        let v954 : bool = v953 = 0UL
                        let v1005 : leptos_prelude_AnyView_ =
                            if v954 then
                                let v955 : Vec<leptos_prelude_AnyView_> = method172()
                                let v956 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v957 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v955 v956 
                                v957
                            else
                                let v958 : (unit -> leptos_dom_Fragment) = method263()
                                let v959 : (unit -> leptos_dom_Fragment) = method264(v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324)
                                let v960 : string = "$0"
                                let v961 : (unit -> string) = closure343()
                                let v962 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v961 v960 
                                let v963 : string = "$0"
                                let v964 : (unit -> string) = closure344()
                                let v965 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v964 v963 
                                let v966 : string = "$0"
                                let v967 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v392 v966 
                                let v968 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v967(()) + \" \" + &v965(()) + \" \" + &v962(())"
                                let v969 : string = " " + v968 + v303 + ""
                                let v970 : string = "$0"
                                let v971 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v397 v970 
                                let v972 : string = "class=\"[font-size:12px] text-gray-400\""
                                let v973 : string = " " + v972 + v303 + ""
                                let v974 : leptos_dom_Fragment = v958 ()
                                let v975 : string = "leptos::prelude::AnyView::from($0)"
                                let v976 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v974 v975 
                                let v977 : string = "<" + v404 + " " + v973 + ">move || { v976 }</" + v404 + ">"
                                let v978 : string = "leptos::prelude::view! { " + v977 + " }"
                                let v979 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v978 
                                let v980 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v979 |> unbox
                                let v981 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v982 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v980 v981 
                                let v983 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v971(())"
                                let v984 : string = " " + v983 + v303 + ""
                                let v985 : leptos_dom_Fragment = v959 ()
                                let v986 : string = "leptos::prelude::AnyView::from($0)"
                                let v987 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v985 v986 
                                let v988 : string = "<" + v416 + " " + v984 + ">move || { v987 }</" + v416 + ">"
                                let v989 : string = "leptos::prelude::view! { " + v988 + " }"
                                let v990 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v989 
                                let v991 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v990 |> unbox
                                let v992 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v993 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v991 v992 
                                let v994 : Vec<leptos_prelude_AnyView_> = method176(v982, v993)
                                let v995 : string = "leptos::prelude::Fragment::new($0)"
                                let v996 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v994 v995 
                                let v997 : string = "leptos::prelude::AnyView::from($0)"
                                let v998 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v996 v997 
                                let v999 : string = "<" + v428 + " " + v969 + ">move || { v998 }</" + v428 + ">"
                                let v1000 : string = "leptos::prelude::view! { " + v999 + " }"
                                let v1001 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1000 
                                let v1002 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v1001 |> unbox
                                let v1003 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v1004 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1002 v1003 
                                v1004
                        let v1006 : Vec<leptos_prelude_AnyView_> = method266(v434, v481, v528, v575, v623, v670, v717, v764, v811, v858, v905, v952, v1005)
                        let v1007 : string = "leptos::prelude::Fragment::new($0)"
                        let v1008 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1006 v1007 
                        let v1009 : string = "leptos::prelude::AnyView::from($0)"
                        let v1010 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1008 v1009 
                        let v1011 : string = "div"
                        let v1012 : string = "<" + v1011 + " " + v382 + ">move || { v1010 }</" + v1011 + ">"
                        let v1013 : string = "leptos::prelude::view! { " + v1012 + " }"
                        let v1014 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1013 
                        let v1015 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1014 |> unbox
                        let v1016 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1017 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1015 v1016 
                        let v1018 : Vec<leptos_prelude_AnyView_> = method176(v380, v1017)
                        let v1019 : string = "leptos::prelude::Fragment::new($0)"
                        let v1020 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1018 v1019 
                        let v1021 : string = "leptos::prelude::AnyView::from($0)"
                        let v1022 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1020 v1021 
                        let v1023 : string = "<" + v1011 + " " + v337 + ">move || { v1022 }</" + v1011 + ">"
                        let v1024 : string = "leptos::prelude::view! { " + v1023 + " }"
                        let v1025 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1024 
                        let v1026 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1025 |> unbox
                        let v1027 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1028 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1026 v1027 
                        let v1029 : string = "true; $0 }).collect::<Vec<_>>()"
                        let v1030 : bool = Fable.Core.RustInterop.emitRustExpr v1028 v1029 
                        let v1031 : string = "_vec_map"
                        let v1032 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1031 
                        let v1033 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1034 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1032 v1033 
                        let v1035 : Vec<leptos_prelude_AnyView_> = method173(v1034)
                        let v1036 : string = "leptos::prelude::Fragment::new($0)"
                        let v1037 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1035 v1036 
                        let v1038 : string = "leptos::prelude::AnyView::from($0)"
                        let v1039 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1037 v1038 
                        let v1040 : string = "<" + v1011 + " " + v304 + ">move || { v1039 }</" + v1011 + ">"
                        let v1041 : string = "leptos::prelude::view! { " + v1040 + " }"
                        let v1042 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1041 
                        let v1043 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1042 |> unbox
                        let v1044 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1045 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1043 v1044 
                        v1045
                    else
                        let v1046 : string = "$0.to_vec()"
                        let v1047 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v293 v1046 
                        let v1048 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                        let v1049 : bool = Fable.Core.RustInterop.emitRustExpr v1047 v1048 
                        let v1050 : string = "x"
                        let struct (v1051 : string, v1052 : unativeint, v1053 : Heap5) = Fable.Core.RustInterop.emitRustExpr () v1050 
                        let v1054 : string = "transaction.tr_render (1)"
                        let v1055 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v1056 : bool = Fable.Core.RustInterop.emitRustExpr v1054 v1055 
                        let v1057 : string = "class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\""
                        let v1058 : string = ""
                        let v1059 : string = " " + v1057 + v1058 + ""
                        let v1060 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1061 : string = " " + v1060 + v1058 + ""
                        let v1062 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1063 : string = "&*$0"
                        let v1064 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1063 
                        let _v1062 = v1064 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1065 : string = "&*$0"
                        let v1066 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1065 
                        let _v1062 = v1066 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1067 : string = "&*$0"
                        let v1068 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1051 v1067 
                        let _v1062 = v1068 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1069 : Ref<Str> = v1051 |> unbox<Ref<Str>>
                        let _v1062 = v1069 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1072 : Ref<Str> = v1051 |> unbox<Ref<Str>>
                        let _v1062 = v1072 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1075 : Ref<Str> = v1051 |> unbox<Ref<Str>>
                        let _v1062 = v1075 
                        #endif
#else
                        let v1078 : Ref<Str> = v1051 |> unbox<Ref<Str>>
                        let _v1062 = v1078 
                        #endif
                        let v1081 : Ref<Str> = _v1062 
                        let v1086 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1087 : string = "String::from($0)"
                        let v1088 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1081 v1087 
                        let _v1086 = v1088 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1089 : string = "String::from($0)"
                        let v1090 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1081 v1089 
                        let _v1086 = v1090 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1091 : string = "String::from($0)"
                        let v1092 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1081 v1091 
                        let _v1086 = v1092 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1093 : std_string_String = v1081 |> unbox<std_string_String>
                        let _v1086 = v1093 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1096 : std_string_String = v1081 |> unbox<std_string_String>
                        let _v1086 = v1096 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1099 : std_string_String = v1081 |> unbox<std_string_String>
                        let _v1086 = v1099 
                        #endif
#else
                        let v1102 : std_string_String = v1081 |> unbox<std_string_String>
                        let _v1086 = v1102 
                        #endif
                        let v1105 : std_string_String = _v1086 
                        let v1110 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1111 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1105 v1110 
                        let v1112 : Vec<leptos_prelude_AnyView_> = method173(v1111)
                        let v1113 : string = "leptos::prelude::Fragment::new($0)"
                        let v1114 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1112 v1113 
                        let v1115 : string = "leptos::prelude::AnyView::from($0)"
                        let v1116 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1114 v1115 
                        let v1117 : string = "td"
                        let v1118 : string = "<" + v1117 + " " + v1061 + ">move || { v1116 }</" + v1117 + ">"
                        let v1119 : string = "leptos::prelude::view! { " + v1118 + " }"
                        let v1120 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1119 
                        let v1121 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1120 |> unbox
                        let v1122 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1123 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1121 v1122 
                        let v1124 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1125 : string = " " + v1124 + v1058 + ""
                        let v1126 : std_string_String = v1053.l5
                        let v1127 : string = "fable_library_rust::String_::fromString($0)"
                        let v1128 : string = Fable.Core.RustInterop.emitRustExpr v1126 v1127 
                        let v1129 : (string -> int64) = int64
                        let v1130 : int64 = v1129 v1128
                        let v1133 : int64 = method193(v1130)
                        let v1134 : int64 = v1133 / 1000L
                        let v1135 : string = "chrono::DateTime::from_timestamp_micros($0)"
                        let v1136 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1134 v1135 
                        let v1137 : (chrono_DateTime<chrono_Utc> -> US69) = method194()
                        let v1138 : US69 option = v1136 |> Option.map v1137 
                        let v1149 : US69 = US69_1
                        let v1150 : US69 = v1138 |> Option.defaultValue v1149 
                        let v1169 : US32 =
                            match v1150 with
                            | US69_1 -> (* None *)
                                US32_1
                            | US69_0(v1154) -> (* Some *)
                                let v1155 : string = "$0.naive_utc()"
                                let v1156 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1154 v1155 
                                let v1157 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
                                let v1158 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1156 v1157 
                                let v1159 : string = "%Y-%m-%d %H:%M:%S"
                                let v1160 : string = "r#\"" + v1159 + "\"#"
                                let v1161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1160 
                                let v1162 : string = "$0.format($1).to_string()"
                                let v1163 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1158, v1161) v1162 
                                let v1164 : string = "fable_library_rust::String_::fromString($0)"
                                let v1165 : string = Fable.Core.RustInterop.emitRustExpr v1163 v1164 
                                US32_0(v1165)
                        let v1175 : US70 =
                            match v1169 with
                            | US32_1 -> (* None *)
                                let v1172 : string = "resultm.from_option / Option does not have a value."
                                US70_1(v1172)
                            | US32_0(v1170) -> (* Some *)
                                US70_0(v1170)
                        let v1180 : string =
                            match v1175 with
                            | US70_1(v1177) -> (* Error *)
                                let v1178 : string = "sm'.to_string result / Error: " + v1177 + ""
                                v1178
                            | US70_0(v1176) -> (* Ok *)
                                v1176
                        let v1181 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1182 : string = "&*$0"
                        let v1183 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1180 v1182 
                        let _v1181 = v1183 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1184 : string = "&*$0"
                        let v1185 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1180 v1184 
                        let _v1181 = v1185 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1186 : string = "&*$0"
                        let v1187 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1180 v1186 
                        let _v1181 = v1187 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1188 : Ref<Str> = v1180 |> unbox<Ref<Str>>
                        let _v1181 = v1188 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1191 : Ref<Str> = v1180 |> unbox<Ref<Str>>
                        let _v1181 = v1191 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1194 : Ref<Str> = v1180 |> unbox<Ref<Str>>
                        let _v1181 = v1194 
                        #endif
#else
                        let v1197 : Ref<Str> = v1180 |> unbox<Ref<Str>>
                        let _v1181 = v1197 
                        #endif
                        let v1200 : Ref<Str> = _v1181 
                        let v1205 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1206 : string = "String::from($0)"
                        let v1207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1200 v1206 
                        let _v1205 = v1207 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1208 : string = "String::from($0)"
                        let v1209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1200 v1208 
                        let _v1205 = v1209 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1210 : string = "String::from($0)"
                        let v1211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1200 v1210 
                        let _v1205 = v1211 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1212 : std_string_String = v1200 |> unbox<std_string_String>
                        let _v1205 = v1212 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1215 : std_string_String = v1200 |> unbox<std_string_String>
                        let _v1205 = v1215 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1218 : std_string_String = v1200 |> unbox<std_string_String>
                        let _v1205 = v1218 
                        #endif
#else
                        let v1221 : std_string_String = v1200 |> unbox<std_string_String>
                        let _v1205 = v1221 
                        #endif
                        let v1224 : std_string_String = _v1205 
                        let v1229 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1230 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1224 v1229 
                        let v1231 : Vec<leptos_prelude_AnyView_> = method173(v1230)
                        let v1232 : string = "leptos::prelude::Fragment::new($0)"
                        let v1233 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1231 v1232 
                        let v1234 : string = "leptos::prelude::AnyView::from($0)"
                        let v1235 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1233 v1234 
                        let v1236 : string = "<" + v1117 + " " + v1125 + ">move || { v1235 }</" + v1117 + ">"
                        let v1237 : string = "leptos::prelude::view! { " + v1236 + " }"
                        let v1238 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1237 
                        let v1239 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1238 |> unbox
                        let v1240 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1241 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1239 v1240 
                        let v1242 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1243 : string = " " + v1242 + v1058 + ""
                        let v1244 : std_string_String = v1053.l1
                        let v1245 : string = "fable_library_rust::String_::fromString($0)"
                        let v1246 : string = Fable.Core.RustInterop.emitRustExpr v1244 v1245 
                        let v1247 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1248 : string = "&*$0"
                        let v1249 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1246 v1248 
                        let _v1247 = v1249 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1250 : string = "&*$0"
                        let v1251 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1246 v1250 
                        let _v1247 = v1251 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1252 : string = "&*$0"
                        let v1253 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1246 v1252 
                        let _v1247 = v1253 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1254 : Ref<Str> = v1246 |> unbox<Ref<Str>>
                        let _v1247 = v1254 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1257 : Ref<Str> = v1246 |> unbox<Ref<Str>>
                        let _v1247 = v1257 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1260 : Ref<Str> = v1246 |> unbox<Ref<Str>>
                        let _v1247 = v1260 
                        #endif
#else
                        let v1263 : Ref<Str> = v1246 |> unbox<Ref<Str>>
                        let _v1247 = v1263 
                        #endif
                        let v1266 : Ref<Str> = _v1247 
                        let v1271 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1272 : string = "String::from($0)"
                        let v1273 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1266 v1272 
                        let _v1271 = v1273 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1274 : string = "String::from($0)"
                        let v1275 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1266 v1274 
                        let _v1271 = v1275 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1276 : string = "String::from($0)"
                        let v1277 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1266 v1276 
                        let _v1271 = v1277 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1278 : std_string_String = v1266 |> unbox<std_string_String>
                        let _v1271 = v1278 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1281 : std_string_String = v1266 |> unbox<std_string_String>
                        let _v1271 = v1281 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1284 : std_string_String = v1266 |> unbox<std_string_String>
                        let _v1271 = v1284 
                        #endif
#else
                        let v1287 : std_string_String = v1266 |> unbox<std_string_String>
                        let _v1271 = v1287 
                        #endif
                        let v1290 : std_string_String = _v1271 
                        let v1295 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1296 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1290 v1295 
                        let v1297 : Vec<leptos_prelude_AnyView_> = method173(v1296)
                        let v1298 : string = "leptos::prelude::Fragment::new($0)"
                        let v1299 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1297 v1298 
                        let v1300 : string = "leptos::prelude::AnyView::from($0)"
                        let v1301 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1299 v1300 
                        let v1302 : string = "<" + v1117 + " " + v1243 + ">move || { v1301 }</" + v1117 + ">"
                        let v1303 : string = "leptos::prelude::view! { " + v1302 + " }"
                        let v1304 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1303 
                        let v1305 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1304 |> unbox
                        let v1306 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1307 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1305 v1306 
                        let v1308 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1309 : string = " " + v1308 + v1058 + ""
                        let v1310 : std_string_String = v1053.l2
                        let v1311 : string = "fable_library_rust::String_::fromString($0)"
                        let v1312 : string = Fable.Core.RustInterop.emitRustExpr v1310 v1311 
                        let v1313 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1314 : string = "&*$0"
                        let v1315 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1312 v1314 
                        let _v1313 = v1315 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1316 : string = "&*$0"
                        let v1317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1312 v1316 
                        let _v1313 = v1317 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1318 : string = "&*$0"
                        let v1319 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1312 v1318 
                        let _v1313 = v1319 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1320 : Ref<Str> = v1312 |> unbox<Ref<Str>>
                        let _v1313 = v1320 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1323 : Ref<Str> = v1312 |> unbox<Ref<Str>>
                        let _v1313 = v1323 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1326 : Ref<Str> = v1312 |> unbox<Ref<Str>>
                        let _v1313 = v1326 
                        #endif
#else
                        let v1329 : Ref<Str> = v1312 |> unbox<Ref<Str>>
                        let _v1313 = v1329 
                        #endif
                        let v1332 : Ref<Str> = _v1313 
                        let v1337 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1338 : string = "String::from($0)"
                        let v1339 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1332 v1338 
                        let _v1337 = v1339 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1340 : string = "String::from($0)"
                        let v1341 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1332 v1340 
                        let _v1337 = v1341 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1342 : string = "String::from($0)"
                        let v1343 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1332 v1342 
                        let _v1337 = v1343 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1344 : std_string_String = v1332 |> unbox<std_string_String>
                        let _v1337 = v1344 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1347 : std_string_String = v1332 |> unbox<std_string_String>
                        let _v1337 = v1347 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1350 : std_string_String = v1332 |> unbox<std_string_String>
                        let _v1337 = v1350 
                        #endif
#else
                        let v1353 : std_string_String = v1332 |> unbox<std_string_String>
                        let _v1337 = v1353 
                        #endif
                        let v1356 : std_string_String = _v1337 
                        let v1361 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1362 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1356 v1361 
                        let v1363 : Vec<leptos_prelude_AnyView_> = method173(v1362)
                        let v1364 : string = "leptos::prelude::Fragment::new($0)"
                        let v1365 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1363 v1364 
                        let v1366 : string = "leptos::prelude::AnyView::from($0)"
                        let v1367 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1365 v1366 
                        let v1368 : string = "<" + v1117 + " " + v1309 + ">move || { v1367 }</" + v1117 + ">"
                        let v1369 : string = "leptos::prelude::view! { " + v1368 + " }"
                        let v1370 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1369 
                        let v1371 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1370 |> unbox
                        let v1372 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1373 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1371 v1372 
                        let v1374 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1375 : string = " " + v1374 + v1058 + ""
                        let v1376 : (struct (std_string_String * std_string_String option) []) = v1053.l7
                        let v1377 : string = "$0.to_vec()"
                        let v1378 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v1376 v1377 
                        let v1379 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                        let v1380 : bool = Fable.Core.RustInterop.emitRustExpr v1378 v1379 
                        let v1381 : string = "x"
                        let struct (v1382 : std_string_String, v1383 : std_string_String option) = Fable.Core.RustInterop.emitRustExpr () v1381 
                        let v1384 : (unit -> leptos_dom_Fragment) = method245(v1382)
                        let v1385 : (unit -> leptos_dom_Fragment) = method246(v1383)
                        let v1386 : string = "$0"
                        let v1387 : (unit -> string) = closure305()
                        let v1388 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1387 v1386 
                        let v1389 : string = "$0"
                        let v1390 : (unit -> string) = closure306()
                        let v1391 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1390 v1389 
                        let v1392 : string = "$0"
                        let v1393 : (unit -> string) = closure307()
                        let v1394 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1393 v1392 
                        let v1395 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1394(()) + \" \" + &v1391(()) + \" \" + &v1388(())"
                        let v1396 : string = " " + v1395 + v1058 + ""
                        let v1397 : string = "$0"
                        let v1398 : (unit -> string) = closure308()
                        let v1399 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1398 v1397 
                        let v1400 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v1401 : string = " " + v1400 + v1058 + ""
                        let v1402 : leptos_dom_Fragment = v1384 ()
                        let v1403 : string = "leptos::prelude::AnyView::from($0)"
                        let v1404 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1402 v1403 
                        let v1405 : string = "dt"
                        let v1406 : string = "<" + v1405 + " " + v1401 + ">move || { v1404 }</" + v1405 + ">"
                        let v1407 : string = "leptos::prelude::view! { " + v1406 + " }"
                        let v1408 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1407 
                        let v1409 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v1408 |> unbox
                        let v1410 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1411 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1409 v1410 
                        let v1412 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1399(())"
                        let v1413 : string = " " + v1412 + v1058 + ""
                        let v1414 : leptos_dom_Fragment = v1385 ()
                        let v1415 : string = "leptos::prelude::AnyView::from($0)"
                        let v1416 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1414 v1415 
                        let v1417 : string = "dd"
                        let v1418 : string = "<" + v1417 + " " + v1413 + ">move || { v1416 }</" + v1417 + ">"
                        let v1419 : string = "leptos::prelude::view! { " + v1418 + " }"
                        let v1420 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1419 
                        let v1421 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v1420 |> unbox
                        let v1422 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1423 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1421 v1422 
                        let v1424 : Vec<leptos_prelude_AnyView_> = method176(v1411, v1423)
                        let v1425 : string = "leptos::prelude::Fragment::new($0)"
                        let v1426 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1424 v1425 
                        let v1427 : string = "leptos::prelude::AnyView::from($0)"
                        let v1428 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1426 v1427 
                        let v1429 : string = "dl"
                        let v1430 : string = "<" + v1429 + " " + v1396 + ">move || { v1428 }</" + v1429 + ">"
                        let v1431 : string = "leptos::prelude::view! { " + v1430 + " }"
                        let v1432 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1431 
                        let v1433 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v1432 |> unbox
                        let v1434 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1435 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1433 v1434 
                        let v1436 : string = "true; $0 }).collect::<Vec<_>>()"
                        let v1437 : bool = Fable.Core.RustInterop.emitRustExpr v1435 v1436 
                        let v1438 : string = "_vec_map"
                        let v1439 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1438 
                        let v1440 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1441 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1439 v1440 
                        let v1442 : Vec<leptos_prelude_AnyView_> = method173(v1441)
                        let v1443 : string = "leptos::prelude::Fragment::new($0)"
                        let v1444 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1442 v1443 
                        let v1445 : string = "leptos::prelude::AnyView::from($0)"
                        let v1446 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1444 v1445 
                        let v1447 : string = "<" + v1117 + " " + v1375 + ">move || { v1446 }</" + v1117 + ">"
                        let v1448 : string = "leptos::prelude::view! { " + v1447 + " }"
                        let v1449 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1448 
                        let v1450 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1449 |> unbox
                        let v1451 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1452 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1450 v1451 
                        let v1453 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1454 : string = " " + v1453 + v1058 + ""
                        let v1455 : float = v1053.l8
                        let v1456 : (float -> string) = _.ToString()
                        let v1457 : string = v1456 v1455
                        let v1460 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1461 : string = "&*$0"
                        let v1462 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1457 v1461 
                        let _v1460 = v1462 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1463 : string = "&*$0"
                        let v1464 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1457 v1463 
                        let _v1460 = v1464 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1465 : string = "&*$0"
                        let v1466 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1457 v1465 
                        let _v1460 = v1466 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1467 : Ref<Str> = v1457 |> unbox<Ref<Str>>
                        let _v1460 = v1467 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1470 : Ref<Str> = v1457 |> unbox<Ref<Str>>
                        let _v1460 = v1470 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1473 : Ref<Str> = v1457 |> unbox<Ref<Str>>
                        let _v1460 = v1473 
                        #endif
#else
                        let v1476 : Ref<Str> = v1457 |> unbox<Ref<Str>>
                        let _v1460 = v1476 
                        #endif
                        let v1479 : Ref<Str> = _v1460 
                        let v1484 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1485 : string = "String::from($0)"
                        let v1486 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1479 v1485 
                        let _v1484 = v1486 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1487 : string = "String::from($0)"
                        let v1488 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1479 v1487 
                        let _v1484 = v1488 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1489 : string = "String::from($0)"
                        let v1490 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1479 v1489 
                        let _v1484 = v1490 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1491 : std_string_String = v1479 |> unbox<std_string_String>
                        let _v1484 = v1491 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1494 : std_string_String = v1479 |> unbox<std_string_String>
                        let _v1484 = v1494 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1497 : std_string_String = v1479 |> unbox<std_string_String>
                        let _v1484 = v1497 
                        #endif
#else
                        let v1500 : std_string_String = v1479 |> unbox<std_string_String>
                        let _v1484 = v1500 
                        #endif
                        let v1503 : std_string_String = _v1484 
                        let v1508 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1509 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1503 v1508 
                        let v1510 : Vec<leptos_prelude_AnyView_> = method173(v1509)
                        let v1511 : string = "leptos::prelude::Fragment::new($0)"
                        let v1512 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1510 v1511 
                        let v1513 : string = "leptos::prelude::AnyView::from($0)"
                        let v1514 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1512 v1513 
                        let v1515 : string = "<" + v1117 + " " + v1454 + ">move || { v1514 }</" + v1117 + ">"
                        let v1516 : string = "leptos::prelude::view! { " + v1515 + " }"
                        let v1517 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1516 
                        let v1518 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1517 |> unbox
                        let v1519 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1520 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1518 v1519 
                        let v1521 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1522 : string = " " + v1521 + v1058 + ""
                        let v1523 : float = v1053.l10
                        let v1524 : (float -> string) = _.ToString()
                        let v1525 : string = v1524 v1523
                        let v1528 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1529 : string = "&*$0"
                        let v1530 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1529 
                        let _v1528 = v1530 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1531 : string = "&*$0"
                        let v1532 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1531 
                        let _v1528 = v1532 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1533 : string = "&*$0"
                        let v1534 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1533 
                        let _v1528 = v1534 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1535 : Ref<Str> = v1525 |> unbox<Ref<Str>>
                        let _v1528 = v1535 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1538 : Ref<Str> = v1525 |> unbox<Ref<Str>>
                        let _v1528 = v1538 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1541 : Ref<Str> = v1525 |> unbox<Ref<Str>>
                        let _v1528 = v1541 
                        #endif
#else
                        let v1544 : Ref<Str> = v1525 |> unbox<Ref<Str>>
                        let _v1528 = v1544 
                        #endif
                        let v1547 : Ref<Str> = _v1528 
                        let v1552 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1553 : string = "String::from($0)"
                        let v1554 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1547 v1553 
                        let _v1552 = v1554 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1555 : string = "String::from($0)"
                        let v1556 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1547 v1555 
                        let _v1552 = v1556 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1557 : string = "String::from($0)"
                        let v1558 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1547 v1557 
                        let _v1552 = v1558 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1559 : std_string_String = v1547 |> unbox<std_string_String>
                        let _v1552 = v1559 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1562 : std_string_String = v1547 |> unbox<std_string_String>
                        let _v1552 = v1562 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1565 : std_string_String = v1547 |> unbox<std_string_String>
                        let _v1552 = v1565 
                        #endif
#else
                        let v1568 : std_string_String = v1547 |> unbox<std_string_String>
                        let _v1552 = v1568 
                        #endif
                        let v1571 : std_string_String = _v1552 
                        let v1576 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1577 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1571 v1576 
                        let v1578 : Vec<leptos_prelude_AnyView_> = method173(v1577)
                        let v1579 : string = "leptos::prelude::Fragment::new($0)"
                        let v1580 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1578 v1579 
                        let v1581 : string = "leptos::prelude::AnyView::from($0)"
                        let v1582 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1580 v1581 
                        let v1583 : string = "<" + v1117 + " " + v1522 + ">move || { v1582 }</" + v1117 + ">"
                        let v1584 : string = "leptos::prelude::view! { " + v1583 + " }"
                        let v1585 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1584 
                        let v1586 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1585 |> unbox
                        let v1587 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1588 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1586 v1587 
                        let v1589 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1590 : string = " " + v1589 + v1058 + ""
                        let v1591 : uint32 = v1053.l6
                        let v1592 : (uint32 -> string) = _.ToString()
                        let v1593 : string = v1592 v1591
                        let v1596 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1597 : string = "&*$0"
                        let v1598 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1593 v1597 
                        let _v1596 = v1598 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1599 : string = "&*$0"
                        let v1600 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1593 v1599 
                        let _v1596 = v1600 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1601 : string = "&*$0"
                        let v1602 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1593 v1601 
                        let _v1596 = v1602 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1603 : Ref<Str> = v1593 |> unbox<Ref<Str>>
                        let _v1596 = v1603 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1606 : Ref<Str> = v1593 |> unbox<Ref<Str>>
                        let _v1596 = v1606 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1609 : Ref<Str> = v1593 |> unbox<Ref<Str>>
                        let _v1596 = v1609 
                        #endif
#else
                        let v1612 : Ref<Str> = v1593 |> unbox<Ref<Str>>
                        let _v1596 = v1612 
                        #endif
                        let v1615 : Ref<Str> = _v1596 
                        let v1620 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1621 : string = "String::from($0)"
                        let v1622 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1615 v1621 
                        let _v1620 = v1622 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1623 : string = "String::from($0)"
                        let v1624 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1615 v1623 
                        let _v1620 = v1624 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1625 : string = "String::from($0)"
                        let v1626 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1615 v1625 
                        let _v1620 = v1626 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1627 : std_string_String = v1615 |> unbox<std_string_String>
                        let _v1620 = v1627 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1630 : std_string_String = v1615 |> unbox<std_string_String>
                        let _v1620 = v1630 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1633 : std_string_String = v1615 |> unbox<std_string_String>
                        let _v1620 = v1633 
                        #endif
#else
                        let v1636 : std_string_String = v1615 |> unbox<std_string_String>
                        let _v1620 = v1636 
                        #endif
                        let v1639 : std_string_String = _v1620 
                        let v1644 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1645 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1639 v1644 
                        let v1646 : Vec<leptos_prelude_AnyView_> = method173(v1645)
                        let v1647 : string = "leptos::prelude::Fragment::new($0)"
                        let v1648 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1646 v1647 
                        let v1649 : string = "leptos::prelude::AnyView::from($0)"
                        let v1650 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1648 v1649 
                        let v1651 : string = "<" + v1117 + " " + v1590 + ">move || { v1650 }</" + v1117 + ">"
                        let v1652 : string = "leptos::prelude::view! { " + v1651 + " }"
                        let v1653 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1652 
                        let v1654 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1653 |> unbox
                        let v1655 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1656 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1654 v1655 
                        let v1657 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\""
                        let v1658 : string = " " + v1657 + v1058 + ""
                        let v1659 : (std_string_String []) = v1053.l11
                        let v1660 : uint64 = System.Convert.ToUInt64 v1659.Length
                        let v1661 : bool = v1660 = 0UL
                        let v1806 : leptos_dom_Fragment =
                            if v1661 then
                                let v1662 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1663 : string = "&*$0"
                                let v1664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1058 v1663 
                                let _v1662 = v1664 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1665 : string = "&*$0"
                                let v1666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1058 v1665 
                                let _v1662 = v1666 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1667 : string = "&*$0"
                                let v1668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1058 v1667 
                                let _v1662 = v1668 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1669 : Ref<Str> = v1058 |> unbox<Ref<Str>>
                                let _v1662 = v1669 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1672 : Ref<Str> = v1058 |> unbox<Ref<Str>>
                                let _v1662 = v1672 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1675 : Ref<Str> = v1058 |> unbox<Ref<Str>>
                                let _v1662 = v1675 
                                #endif
#else
                                let v1678 : Ref<Str> = v1058 |> unbox<Ref<Str>>
                                let _v1662 = v1678 
                                #endif
                                let v1681 : Ref<Str> = _v1662 
                                let v1686 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1687 : string = "String::from($0)"
                                let v1688 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1681 v1687 
                                let _v1686 = v1688 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1689 : string = "String::from($0)"
                                let v1690 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1681 v1689 
                                let _v1686 = v1690 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1691 : string = "String::from($0)"
                                let v1692 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1681 v1691 
                                let _v1686 = v1692 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1693 : std_string_String = v1681 |> unbox<std_string_String>
                                let _v1686 = v1693 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1696 : std_string_String = v1681 |> unbox<std_string_String>
                                let _v1686 = v1696 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1699 : std_string_String = v1681 |> unbox<std_string_String>
                                let _v1686 = v1699 
                                #endif
#else
                                let v1702 : std_string_String = v1681 |> unbox<std_string_String>
                                let _v1686 = v1702 
                                #endif
                                let v1705 : std_string_String = _v1686 
                                let v1710 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                                let v1711 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1705 v1710 
                                let v1712 : Vec<leptos_prelude_AnyView_> = method173(v1711)
                                let v1713 : string = "leptos::prelude::Fragment::new($0)"
                                let v1714 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1712 v1713 
                                v1714
                            else
                                let v1715 : (std_string_String []) = v1053.l11
                                let v1716 : string = "$0.to_vec()"
                                let v1717 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1715 v1716 
                                let v1718 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                                let v1719 : (std_string_String -> string) = closure55()
                                let v1720 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v1717, v1719) v1718 
                                let v1721 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                let v1722 : (string []) = Fable.Core.RustInterop.emitRustExpr v1720 v1721 
                                let v1723 : string seq = v1722 |> Seq.ofArray
                                let v1726 : string = method265()
                                let v1727 : (string -> (string seq -> string)) = String.concat
                                let v1728 : (string seq -> string) = v1727 v1726
                                let v1729 : string = v1728 v1723
                                let v1733 : string = "\\n"
                                let v1734 : string = "\n"
                                let v1735 : string = v1729.Replace (v1733, v1734)
                                let v1736 : string = "$0"
                                let v1737 : (unit -> string) = closure345()
                                let v1738 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1737 v1736 
                                let v1739 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v1738(())"
                                let v1740 : string = " " + v1739 + v1058 + ""
                                let v1741 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1742 : string = "&*$0"
                                let v1743 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1735 v1742 
                                let _v1741 = v1743 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1744 : string = "&*$0"
                                let v1745 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1735 v1744 
                                let _v1741 = v1745 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1746 : string = "&*$0"
                                let v1747 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1735 v1746 
                                let _v1741 = v1747 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1748 : Ref<Str> = v1735 |> unbox<Ref<Str>>
                                let _v1741 = v1748 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1751 : Ref<Str> = v1735 |> unbox<Ref<Str>>
                                let _v1741 = v1751 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1754 : Ref<Str> = v1735 |> unbox<Ref<Str>>
                                let _v1741 = v1754 
                                #endif
#else
                                let v1757 : Ref<Str> = v1735 |> unbox<Ref<Str>>
                                let _v1741 = v1757 
                                #endif
                                let v1760 : Ref<Str> = _v1741 
                                let v1765 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1766 : string = "String::from($0)"
                                let v1767 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1760 v1766 
                                let _v1765 = v1767 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1768 : string = "String::from($0)"
                                let v1769 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1760 v1768 
                                let _v1765 = v1769 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1770 : string = "String::from($0)"
                                let v1771 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1760 v1770 
                                let _v1765 = v1771 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1772 : std_string_String = v1760 |> unbox<std_string_String>
                                let _v1765 = v1772 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1775 : std_string_String = v1760 |> unbox<std_string_String>
                                let _v1765 = v1775 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1778 : std_string_String = v1760 |> unbox<std_string_String>
                                let _v1765 = v1778 
                                #endif
#else
                                let v1781 : std_string_String = v1760 |> unbox<std_string_String>
                                let _v1765 = v1781 
                                #endif
                                let v1784 : std_string_String = _v1765 
                                let v1789 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                                let v1790 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1784 v1789 
                                let v1791 : Vec<leptos_prelude_AnyView_> = method173(v1790)
                                let v1792 : string = "leptos::prelude::Fragment::new($0)"
                                let v1793 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1791 v1792 
                                let v1794 : string = "leptos::prelude::AnyView::from($0)"
                                let v1795 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1793 v1794 
                                let v1796 : string = "pre"
                                let v1797 : string = "<" + v1796 + " " + v1740 + ">move || { v1795 }</" + v1796 + ">"
                                let v1798 : string = "leptos::prelude::view! { " + v1797 + " }"
                                let v1799 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1798 
                                let v1800 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v1799 |> unbox
                                let v1801 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v1802 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1800 v1801 
                                let v1803 : Vec<leptos_prelude_AnyView_> = method173(v1802)
                                let v1804 : string = "leptos::prelude::Fragment::new($0)"
                                let v1805 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1803 v1804 
                                v1805
                        let v1807 : string = "leptos::prelude::AnyView::from($0)"
                        let v1808 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1806 v1807 
                        let v1809 : string = "<" + v1117 + " " + v1658 + ">move || { v1808 }</" + v1117 + ">"
                        let v1810 : string = "leptos::prelude::view! { " + v1809 + " }"
                        let v1811 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1810 
                        let v1812 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1811 |> unbox
                        let v1813 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1814 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1812 v1813 
                        let v1815 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1816 : string = " " + v1815 + v1058 + ""
                        let v1817 : bool = v1053.l9
                        let v1818 : (bool -> string) = _.ToString()
                        let v1819 : string = v1818 v1817
                        let v1822 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1823 : string = "&*$0"
                        let v1824 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1819 v1823 
                        let _v1822 = v1824 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1825 : string = "&*$0"
                        let v1826 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1819 v1825 
                        let _v1822 = v1826 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1827 : string = "&*$0"
                        let v1828 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1819 v1827 
                        let _v1822 = v1828 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1829 : Ref<Str> = v1819 |> unbox<Ref<Str>>
                        let _v1822 = v1829 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1832 : Ref<Str> = v1819 |> unbox<Ref<Str>>
                        let _v1822 = v1832 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1835 : Ref<Str> = v1819 |> unbox<Ref<Str>>
                        let _v1822 = v1835 
                        #endif
#else
                        let v1838 : Ref<Str> = v1819 |> unbox<Ref<Str>>
                        let _v1822 = v1838 
                        #endif
                        let v1841 : Ref<Str> = _v1822 
                        let v1846 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1847 : string = "String::from($0)"
                        let v1848 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1841 v1847 
                        let _v1846 = v1848 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1849 : string = "String::from($0)"
                        let v1850 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1841 v1849 
                        let _v1846 = v1850 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1851 : string = "String::from($0)"
                        let v1852 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1841 v1851 
                        let _v1846 = v1852 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1853 : std_string_String = v1841 |> unbox<std_string_String>
                        let _v1846 = v1853 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1856 : std_string_String = v1841 |> unbox<std_string_String>
                        let _v1846 = v1856 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1859 : std_string_String = v1841 |> unbox<std_string_String>
                        let _v1846 = v1859 
                        #endif
#else
                        let v1862 : std_string_String = v1841 |> unbox<std_string_String>
                        let _v1846 = v1862 
                        #endif
                        let v1865 : std_string_String = _v1846 
                        let v1870 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1871 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1865 v1870 
                        let v1872 : Vec<leptos_prelude_AnyView_> = method173(v1871)
                        let v1873 : string = "leptos::prelude::Fragment::new($0)"
                        let v1874 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1872 v1873 
                        let v1875 : string = "leptos::prelude::AnyView::from($0)"
                        let v1876 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1874 v1875 
                        let v1877 : string = "<" + v1117 + " " + v1816 + ">move || { v1876 }</" + v1117 + ">"
                        let v1878 : string = "leptos::prelude::view! { " + v1877 + " }"
                        let v1879 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1878 
                        let v1880 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1879 |> unbox
                        let v1881 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1882 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1880 v1881 
                        let v1883 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1884 : string = " " + v1883 + v1058 + ""
                        let v1885 : std_string_String = v1053.l3
                        let v1886 : string = "fable_library_rust::String_::fromString($0)"
                        let v1887 : string = Fable.Core.RustInterop.emitRustExpr v1885 v1886 
                        let v1888 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1889 : string = "&*$0"
                        let v1890 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1887 v1889 
                        let _v1888 = v1890 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1891 : string = "&*$0"
                        let v1892 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1887 v1891 
                        let _v1888 = v1892 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1893 : string = "&*$0"
                        let v1894 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1887 v1893 
                        let _v1888 = v1894 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1895 : Ref<Str> = v1887 |> unbox<Ref<Str>>
                        let _v1888 = v1895 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1898 : Ref<Str> = v1887 |> unbox<Ref<Str>>
                        let _v1888 = v1898 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1901 : Ref<Str> = v1887 |> unbox<Ref<Str>>
                        let _v1888 = v1901 
                        #endif
#else
                        let v1904 : Ref<Str> = v1887 |> unbox<Ref<Str>>
                        let _v1888 = v1904 
                        #endif
                        let v1907 : Ref<Str> = _v1888 
                        let v1912 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1913 : string = "String::from($0)"
                        let v1914 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1907 v1913 
                        let _v1912 = v1914 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1915 : string = "String::from($0)"
                        let v1916 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1907 v1915 
                        let _v1912 = v1916 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1917 : string = "String::from($0)"
                        let v1918 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1907 v1917 
                        let _v1912 = v1918 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1919 : std_string_String = v1907 |> unbox<std_string_String>
                        let _v1912 = v1919 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1922 : std_string_String = v1907 |> unbox<std_string_String>
                        let _v1912 = v1922 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1925 : std_string_String = v1907 |> unbox<std_string_String>
                        let _v1912 = v1925 
                        #endif
#else
                        let v1928 : std_string_String = v1907 |> unbox<std_string_String>
                        let _v1912 = v1928 
                        #endif
                        let v1931 : std_string_String = _v1912 
                        let v1936 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1937 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1931 v1936 
                        let v1938 : Vec<leptos_prelude_AnyView_> = method173(v1937)
                        let v1939 : string = "leptos::prelude::Fragment::new($0)"
                        let v1940 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1938 v1939 
                        let v1941 : string = "leptos::prelude::AnyView::from($0)"
                        let v1942 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1940 v1941 
                        let v1943 : string = "<" + v1117 + " " + v1884 + ">move || { v1942 }</" + v1117 + ">"
                        let v1944 : string = "leptos::prelude::view! { " + v1943 + " }"
                        let v1945 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1944 
                        let v1946 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1945 |> unbox
                        let v1947 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1948 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1946 v1947 
                        let v1949 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1950 : string = " " + v1949 + v1058 + ""
                        let v1951 : std_string_String = v1053.l4
                        let v1952 : string = "fable_library_rust::String_::fromString($0)"
                        let v1953 : string = Fable.Core.RustInterop.emitRustExpr v1951 v1952 
                        let v1954 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1955 : string = "&*$0"
                        let v1956 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1953 v1955 
                        let _v1954 = v1956 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1957 : string = "&*$0"
                        let v1958 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1953 v1957 
                        let _v1954 = v1958 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1959 : string = "&*$0"
                        let v1960 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1953 v1959 
                        let _v1954 = v1960 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1961 : Ref<Str> = v1953 |> unbox<Ref<Str>>
                        let _v1954 = v1961 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1964 : Ref<Str> = v1953 |> unbox<Ref<Str>>
                        let _v1954 = v1964 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1967 : Ref<Str> = v1953 |> unbox<Ref<Str>>
                        let _v1954 = v1967 
                        #endif
#else
                        let v1970 : Ref<Str> = v1953 |> unbox<Ref<Str>>
                        let _v1954 = v1970 
                        #endif
                        let v1973 : Ref<Str> = _v1954 
                        let v1978 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1979 : string = "String::from($0)"
                        let v1980 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1973 v1979 
                        let _v1978 = v1980 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1981 : string = "String::from($0)"
                        let v1982 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1973 v1981 
                        let _v1978 = v1982 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1983 : string = "String::from($0)"
                        let v1984 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1973 v1983 
                        let _v1978 = v1984 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1985 : std_string_String = v1973 |> unbox<std_string_String>
                        let _v1978 = v1985 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1988 : std_string_String = v1973 |> unbox<std_string_String>
                        let _v1978 = v1988 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1991 : std_string_String = v1973 |> unbox<std_string_String>
                        let _v1978 = v1991 
                        #endif
#else
                        let v1994 : std_string_String = v1973 |> unbox<std_string_String>
                        let _v1978 = v1994 
                        #endif
                        let v1997 : std_string_String = _v1978 
                        let v2002 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2003 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1997 v2002 
                        let v2004 : Vec<leptos_prelude_AnyView_> = method173(v2003)
                        let v2005 : string = "leptos::prelude::Fragment::new($0)"
                        let v2006 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2004 v2005 
                        let v2007 : string = "leptos::prelude::AnyView::from($0)"
                        let v2008 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2006 v2007 
                        let v2009 : string = "<" + v1117 + " " + v1950 + ">move || { v2008 }</" + v1117 + ">"
                        let v2010 : string = "leptos::prelude::view! { " + v2009 + " }"
                        let v2011 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2010 
                        let v2012 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v2011 |> unbox
                        let v2013 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2014 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2012 v2013 
                        let v2015 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v2016 : string = " " + v2015 + v1058 + ""
                        let v2017 : std_string_String = v1053.l0
                        let v2018 : string = "fable_library_rust::String_::fromString($0)"
                        let v2019 : string = Fable.Core.RustInterop.emitRustExpr v2017 v2018 
                        let v2020 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2021 : string = "&*$0"
                        let v2022 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2019 v2021 
                        let _v2020 = v2022 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2023 : string = "&*$0"
                        let v2024 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2019 v2023 
                        let _v2020 = v2024 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2025 : string = "&*$0"
                        let v2026 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2019 v2025 
                        let _v2020 = v2026 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2027 : Ref<Str> = v2019 |> unbox<Ref<Str>>
                        let _v2020 = v2027 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2030 : Ref<Str> = v2019 |> unbox<Ref<Str>>
                        let _v2020 = v2030 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2033 : Ref<Str> = v2019 |> unbox<Ref<Str>>
                        let _v2020 = v2033 
                        #endif
#else
                        let v2036 : Ref<Str> = v2019 |> unbox<Ref<Str>>
                        let _v2020 = v2036 
                        #endif
                        let v2039 : Ref<Str> = _v2020 
                        let v2044 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2045 : string = "String::from($0)"
                        let v2046 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2039 v2045 
                        let _v2044 = v2046 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2047 : string = "String::from($0)"
                        let v2048 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2039 v2047 
                        let _v2044 = v2048 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2049 : string = "String::from($0)"
                        let v2050 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2039 v2049 
                        let _v2044 = v2050 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2051 : std_string_String = v2039 |> unbox<std_string_String>
                        let _v2044 = v2051 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2054 : std_string_String = v2039 |> unbox<std_string_String>
                        let _v2044 = v2054 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2057 : std_string_String = v2039 |> unbox<std_string_String>
                        let _v2044 = v2057 
                        #endif
#else
                        let v2060 : std_string_String = v2039 |> unbox<std_string_String>
                        let _v2044 = v2060 
                        #endif
                        let v2063 : std_string_String = _v2044 
                        let v2068 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2069 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2063 v2068 
                        let v2070 : Vec<leptos_prelude_AnyView_> = method173(v2069)
                        let v2071 : string = "leptos::prelude::Fragment::new($0)"
                        let v2072 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2070 v2071 
                        let v2073 : string = "leptos::prelude::AnyView::from($0)"
                        let v2074 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2072 v2073 
                        let v2075 : string = "<" + v1117 + " " + v2016 + ">move || { v2074 }</" + v1117 + ">"
                        let v2076 : string = "leptos::prelude::view! { " + v2075 + " }"
                        let v2077 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2076 
                        let v2078 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v2077 |> unbox
                        let v2079 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2080 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2078 v2079 
                        let v2081 : Vec<leptos_prelude_AnyView_> = method266(v1123, v1241, v1307, v1373, v1452, v1520, v1588, v1656, v1814, v1882, v1948, v2014, v2080)
                        let v2082 : string = "leptos::prelude::Fragment::new($0)"
                        let v2083 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2081 v2082 
                        let v2084 : string = "leptos::prelude::AnyView::from($0)"
                        let v2085 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2083 v2084 
                        let v2086 : string = "tr"
                        let v2087 : string = "<" + v2086 + " " + v1059 + ">move || { v2085 }</" + v2086 + ">"
                        let v2088 : string = "leptos::prelude::view! { " + v2087 + " }"
                        let v2089 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2088 
                        let v2090 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v2089 |> unbox
                        let v2091 : string = "true; $0 }).collect::<Vec<_>>()"
                        let v2092 : bool = Fable.Core.RustInterop.emitRustExpr v2090 v2091 
                        let v2093 : string = "_vec_map"
                        let v2094 : Vec<leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>>> = Fable.Core.RustInterop.emitRustExpr () v2093 
                        let v2095 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                        let v2096 : bool = Fable.Core.RustInterop.emitRustExpr v2094 v2095 
                        let v2097 : string = "x"
                        let v2098 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = Fable.Core.RustInterop.emitRustExpr () v2097 
                        let v2099 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2100 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2098 v2099 
                        let v2101 : string = "true; $0 }).collect::<Vec<_>>()"
                        let v2102 : bool = Fable.Core.RustInterop.emitRustExpr v2100 v2101 
                        let v2103 : string = "_vec_map"
                        let v2104 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2103 
                        let v2105 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2106 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2104 v2105 
                        let v2107 : Vec<leptos_prelude_AnyView_> = method173(v2106)
                        let v2108 : string = "leptos::prelude::Fragment::new($0)"
                        let v2109 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2107 v2108 
                        let v2110 : string = "transaction.tr_head_render (1)"
                        let v2111 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v2112 : bool = Fable.Core.RustInterop.emitRustExpr v2110 v2111 
                        let v2113 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2114 : string = " " + v2113 + v1058 + ""
                        let v2115 : string = "Account"
                        let v2116 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2117 : string = "&*$0"
                        let v2118 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2115 v2117 
                        let _v2116 = v2118 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2119 : string = "&*$0"
                        let v2120 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2115 v2119 
                        let _v2116 = v2120 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2121 : string = "&*$0"
                        let v2122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2115 v2121 
                        let _v2116 = v2122 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2123 : Ref<Str> = v2115 |> unbox<Ref<Str>>
                        let _v2116 = v2123 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2126 : Ref<Str> = v2115 |> unbox<Ref<Str>>
                        let _v2116 = v2126 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2129 : Ref<Str> = v2115 |> unbox<Ref<Str>>
                        let _v2116 = v2129 
                        #endif
#else
                        let v2132 : Ref<Str> = v2115 |> unbox<Ref<Str>>
                        let _v2116 = v2132 
                        #endif
                        let v2135 : Ref<Str> = _v2116 
                        let v2140 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2141 : string = "String::from($0)"
                        let v2142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2135 v2141 
                        let _v2140 = v2142 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2143 : string = "String::from($0)"
                        let v2144 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2135 v2143 
                        let _v2140 = v2144 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2145 : string = "String::from($0)"
                        let v2146 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2135 v2145 
                        let _v2140 = v2146 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2147 : std_string_String = v2135 |> unbox<std_string_String>
                        let _v2140 = v2147 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2150 : std_string_String = v2135 |> unbox<std_string_String>
                        let _v2140 = v2150 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2153 : std_string_String = v2135 |> unbox<std_string_String>
                        let _v2140 = v2153 
                        #endif
#else
                        let v2156 : std_string_String = v2135 |> unbox<std_string_String>
                        let _v2140 = v2156 
                        #endif
                        let v2159 : std_string_String = _v2140 
                        let v2164 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2165 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2159 v2164 
                        let v2166 : Vec<leptos_prelude_AnyView_> = method173(v2165)
                        let v2167 : string = "leptos::prelude::Fragment::new($0)"
                        let v2168 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2166 v2167 
                        let v2169 : string = "leptos::prelude::AnyView::from($0)"
                        let v2170 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2168 v2169 
                        let v2171 : string = "th"
                        let v2172 : string = "<" + v2171 + " " + v2114 + ">move || { v2170 }</" + v2171 + ">"
                        let v2173 : string = "leptos::prelude::view! { " + v2172 + " }"
                        let v2174 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2173 
                        let v2175 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2174 |> unbox
                        let v2176 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2177 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2175 v2176 
                        let v2178 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2179 : string = " " + v2178 + v1058 + ""
                        let v2180 : string = "Block Timestamp"
                        let v2181 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2182 : string = "&*$0"
                        let v2183 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2180 v2182 
                        let _v2181 = v2183 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2184 : string = "&*$0"
                        let v2185 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2180 v2184 
                        let _v2181 = v2185 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2186 : string = "&*$0"
                        let v2187 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2180 v2186 
                        let _v2181 = v2187 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2188 : Ref<Str> = v2180 |> unbox<Ref<Str>>
                        let _v2181 = v2188 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2191 : Ref<Str> = v2180 |> unbox<Ref<Str>>
                        let _v2181 = v2191 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2194 : Ref<Str> = v2180 |> unbox<Ref<Str>>
                        let _v2181 = v2194 
                        #endif
#else
                        let v2197 : Ref<Str> = v2180 |> unbox<Ref<Str>>
                        let _v2181 = v2197 
                        #endif
                        let v2200 : Ref<Str> = _v2181 
                        let v2205 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2206 : string = "String::from($0)"
                        let v2207 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2200 v2206 
                        let _v2205 = v2207 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2208 : string = "String::from($0)"
                        let v2209 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2200 v2208 
                        let _v2205 = v2209 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2210 : string = "String::from($0)"
                        let v2211 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2200 v2210 
                        let _v2205 = v2211 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2212 : std_string_String = v2200 |> unbox<std_string_String>
                        let _v2205 = v2212 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2215 : std_string_String = v2200 |> unbox<std_string_String>
                        let _v2205 = v2215 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2218 : std_string_String = v2200 |> unbox<std_string_String>
                        let _v2205 = v2218 
                        #endif
#else
                        let v2221 : std_string_String = v2200 |> unbox<std_string_String>
                        let _v2205 = v2221 
                        #endif
                        let v2224 : std_string_String = _v2205 
                        let v2229 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2230 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2224 v2229 
                        let v2231 : Vec<leptos_prelude_AnyView_> = method173(v2230)
                        let v2232 : string = "leptos::prelude::Fragment::new($0)"
                        let v2233 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2231 v2232 
                        let v2234 : string = "leptos::prelude::AnyView::from($0)"
                        let v2235 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2233 v2234 
                        let v2236 : string = "<" + v2171 + " " + v2179 + ">move || { v2235 }</" + v2171 + ">"
                        let v2237 : string = "leptos::prelude::view! { " + v2236 + " }"
                        let v2238 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2237 
                        let v2239 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2238 |> unbox
                        let v2240 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2241 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2239 v2240 
                        let v2242 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2243 : string = " " + v2242 + v1058 + ""
                        let v2244 : string = "Predecessor"
                        let v2245 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2246 : string = "&*$0"
                        let v2247 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2244 v2246 
                        let _v2245 = v2247 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2248 : string = "&*$0"
                        let v2249 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2244 v2248 
                        let _v2245 = v2249 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2250 : string = "&*$0"
                        let v2251 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2244 v2250 
                        let _v2245 = v2251 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2252 : Ref<Str> = v2244 |> unbox<Ref<Str>>
                        let _v2245 = v2252 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2255 : Ref<Str> = v2244 |> unbox<Ref<Str>>
                        let _v2245 = v2255 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2258 : Ref<Str> = v2244 |> unbox<Ref<Str>>
                        let _v2245 = v2258 
                        #endif
#else
                        let v2261 : Ref<Str> = v2244 |> unbox<Ref<Str>>
                        let _v2245 = v2261 
                        #endif
                        let v2264 : Ref<Str> = _v2245 
                        let v2269 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2270 : string = "String::from($0)"
                        let v2271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2264 v2270 
                        let _v2269 = v2271 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2272 : string = "String::from($0)"
                        let v2273 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2264 v2272 
                        let _v2269 = v2273 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2274 : string = "String::from($0)"
                        let v2275 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2264 v2274 
                        let _v2269 = v2275 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2276 : std_string_String = v2264 |> unbox<std_string_String>
                        let _v2269 = v2276 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2279 : std_string_String = v2264 |> unbox<std_string_String>
                        let _v2269 = v2279 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2282 : std_string_String = v2264 |> unbox<std_string_String>
                        let _v2269 = v2282 
                        #endif
#else
                        let v2285 : std_string_String = v2264 |> unbox<std_string_String>
                        let _v2269 = v2285 
                        #endif
                        let v2288 : std_string_String = _v2269 
                        let v2293 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2294 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2288 v2293 
                        let v2295 : Vec<leptos_prelude_AnyView_> = method173(v2294)
                        let v2296 : string = "leptos::prelude::Fragment::new($0)"
                        let v2297 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2295 v2296 
                        let v2298 : string = "leptos::prelude::AnyView::from($0)"
                        let v2299 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2297 v2298 
                        let v2300 : string = "<" + v2171 + " " + v2243 + ">move || { v2299 }</" + v2171 + ">"
                        let v2301 : string = "leptos::prelude::view! { " + v2300 + " }"
                        let v2302 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2301 
                        let v2303 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2302 |> unbox
                        let v2304 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2305 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2303 v2304 
                        let v2306 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2307 : string = " " + v2306 + v1058 + ""
                        let v2308 : string = "Receiver"
                        let v2309 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2310 : string = "&*$0"
                        let v2311 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2308 v2310 
                        let _v2309 = v2311 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2312 : string = "&*$0"
                        let v2313 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2308 v2312 
                        let _v2309 = v2313 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2314 : string = "&*$0"
                        let v2315 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2308 v2314 
                        let _v2309 = v2315 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2316 : Ref<Str> = v2308 |> unbox<Ref<Str>>
                        let _v2309 = v2316 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2319 : Ref<Str> = v2308 |> unbox<Ref<Str>>
                        let _v2309 = v2319 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2322 : Ref<Str> = v2308 |> unbox<Ref<Str>>
                        let _v2309 = v2322 
                        #endif
#else
                        let v2325 : Ref<Str> = v2308 |> unbox<Ref<Str>>
                        let _v2309 = v2325 
                        #endif
                        let v2328 : Ref<Str> = _v2309 
                        let v2333 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2334 : string = "String::from($0)"
                        let v2335 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2328 v2334 
                        let _v2333 = v2335 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2336 : string = "String::from($0)"
                        let v2337 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2328 v2336 
                        let _v2333 = v2337 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2338 : string = "String::from($0)"
                        let v2339 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2328 v2338 
                        let _v2333 = v2339 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2340 : std_string_String = v2328 |> unbox<std_string_String>
                        let _v2333 = v2340 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2343 : std_string_String = v2328 |> unbox<std_string_String>
                        let _v2333 = v2343 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2346 : std_string_String = v2328 |> unbox<std_string_String>
                        let _v2333 = v2346 
                        #endif
#else
                        let v2349 : std_string_String = v2328 |> unbox<std_string_String>
                        let _v2333 = v2349 
                        #endif
                        let v2352 : std_string_String = _v2333 
                        let v2357 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2358 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2352 v2357 
                        let v2359 : Vec<leptos_prelude_AnyView_> = method173(v2358)
                        let v2360 : string = "leptos::prelude::Fragment::new($0)"
                        let v2361 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2359 v2360 
                        let v2362 : string = "leptos::prelude::AnyView::from($0)"
                        let v2363 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2361 v2362 
                        let v2364 : string = "<" + v2171 + " " + v2307 + ">move || { v2363 }</" + v2171 + ">"
                        let v2365 : string = "leptos::prelude::view! { " + v2364 + " }"
                        let v2366 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2365 
                        let v2367 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2366 |> unbox
                        let v2368 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2369 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2367 v2368 
                        let v2370 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2371 : string = " " + v2370 + v1058 + ""
                        let v2372 : string = "Action"
                        let v2373 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2374 : string = "&*$0"
                        let v2375 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2372 v2374 
                        let _v2373 = v2375 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2376 : string = "&*$0"
                        let v2377 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2372 v2376 
                        let _v2373 = v2377 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2378 : string = "&*$0"
                        let v2379 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2372 v2378 
                        let _v2373 = v2379 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2380 : Ref<Str> = v2372 |> unbox<Ref<Str>>
                        let _v2373 = v2380 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2383 : Ref<Str> = v2372 |> unbox<Ref<Str>>
                        let _v2373 = v2383 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2386 : Ref<Str> = v2372 |> unbox<Ref<Str>>
                        let _v2373 = v2386 
                        #endif
#else
                        let v2389 : Ref<Str> = v2372 |> unbox<Ref<Str>>
                        let _v2373 = v2389 
                        #endif
                        let v2392 : Ref<Str> = _v2373 
                        let v2397 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2398 : string = "String::from($0)"
                        let v2399 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2392 v2398 
                        let _v2397 = v2399 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2400 : string = "String::from($0)"
                        let v2401 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2392 v2400 
                        let _v2397 = v2401 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2402 : string = "String::from($0)"
                        let v2403 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2392 v2402 
                        let _v2397 = v2403 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2404 : std_string_String = v2392 |> unbox<std_string_String>
                        let _v2397 = v2404 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2407 : std_string_String = v2392 |> unbox<std_string_String>
                        let _v2397 = v2407 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2410 : std_string_String = v2392 |> unbox<std_string_String>
                        let _v2397 = v2410 
                        #endif
#else
                        let v2413 : std_string_String = v2392 |> unbox<std_string_String>
                        let _v2397 = v2413 
                        #endif
                        let v2416 : std_string_String = _v2397 
                        let v2421 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2422 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2416 v2421 
                        let v2423 : Vec<leptos_prelude_AnyView_> = method173(v2422)
                        let v2424 : string = "leptos::prelude::Fragment::new($0)"
                        let v2425 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2423 v2424 
                        let v2426 : string = "leptos::prelude::AnyView::from($0)"
                        let v2427 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2425 v2426 
                        let v2428 : string = "<" + v2171 + " " + v2371 + ">move || { v2427 }</" + v2171 + ">"
                        let v2429 : string = "leptos::prelude::view! { " + v2428 + " }"
                        let v2430 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2429 
                        let v2431 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2430 |> unbox
                        let v2432 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2433 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2431 v2432 
                        let v2434 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2435 : string = " " + v2434 + v1058 + ""
                        let v2436 : string = "Deposit"
                        let v2437 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2438 : string = "&*$0"
                        let v2439 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2436 v2438 
                        let _v2437 = v2439 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2440 : string = "&*$0"
                        let v2441 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2436 v2440 
                        let _v2437 = v2441 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2442 : string = "&*$0"
                        let v2443 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2436 v2442 
                        let _v2437 = v2443 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2444 : Ref<Str> = v2436 |> unbox<Ref<Str>>
                        let _v2437 = v2444 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2447 : Ref<Str> = v2436 |> unbox<Ref<Str>>
                        let _v2437 = v2447 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2450 : Ref<Str> = v2436 |> unbox<Ref<Str>>
                        let _v2437 = v2450 
                        #endif
#else
                        let v2453 : Ref<Str> = v2436 |> unbox<Ref<Str>>
                        let _v2437 = v2453 
                        #endif
                        let v2456 : Ref<Str> = _v2437 
                        let v2461 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2462 : string = "String::from($0)"
                        let v2463 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2456 v2462 
                        let _v2461 = v2463 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2464 : string = "String::from($0)"
                        let v2465 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2456 v2464 
                        let _v2461 = v2465 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2466 : string = "String::from($0)"
                        let v2467 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2456 v2466 
                        let _v2461 = v2467 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2468 : std_string_String = v2456 |> unbox<std_string_String>
                        let _v2461 = v2468 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2471 : std_string_String = v2456 |> unbox<std_string_String>
                        let _v2461 = v2471 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2474 : std_string_String = v2456 |> unbox<std_string_String>
                        let _v2461 = v2474 
                        #endif
#else
                        let v2477 : std_string_String = v2456 |> unbox<std_string_String>
                        let _v2461 = v2477 
                        #endif
                        let v2480 : std_string_String = _v2461 
                        let v2485 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2486 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2480 v2485 
                        let v2487 : Vec<leptos_prelude_AnyView_> = method173(v2486)
                        let v2488 : string = "leptos::prelude::Fragment::new($0)"
                        let v2489 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2487 v2488 
                        let v2490 : string = "leptos::prelude::AnyView::from($0)"
                        let v2491 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2489 v2490 
                        let v2492 : string = "<" + v2171 + " " + v2435 + ">move || { v2491 }</" + v2171 + ">"
                        let v2493 : string = "leptos::prelude::view! { " + v2492 + " }"
                        let v2494 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2493 
                        let v2495 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2494 |> unbox
                        let v2496 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2497 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2495 v2496 
                        let v2498 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2499 : string = " " + v2498 + v1058 + ""
                        let v2500 : string = "Fee"
                        let v2501 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2502 : string = "&*$0"
                        let v2503 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2500 v2502 
                        let _v2501 = v2503 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2504 : string = "&*$0"
                        let v2505 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2500 v2504 
                        let _v2501 = v2505 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2506 : string = "&*$0"
                        let v2507 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2500 v2506 
                        let _v2501 = v2507 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2508 : Ref<Str> = v2500 |> unbox<Ref<Str>>
                        let _v2501 = v2508 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2511 : Ref<Str> = v2500 |> unbox<Ref<Str>>
                        let _v2501 = v2511 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2514 : Ref<Str> = v2500 |> unbox<Ref<Str>>
                        let _v2501 = v2514 
                        #endif
#else
                        let v2517 : Ref<Str> = v2500 |> unbox<Ref<Str>>
                        let _v2501 = v2517 
                        #endif
                        let v2520 : Ref<Str> = _v2501 
                        let v2525 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2526 : string = "String::from($0)"
                        let v2527 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2520 v2526 
                        let _v2525 = v2527 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2528 : string = "String::from($0)"
                        let v2529 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2520 v2528 
                        let _v2525 = v2529 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2530 : string = "String::from($0)"
                        let v2531 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2520 v2530 
                        let _v2525 = v2531 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2532 : std_string_String = v2520 |> unbox<std_string_String>
                        let _v2525 = v2532 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2535 : std_string_String = v2520 |> unbox<std_string_String>
                        let _v2525 = v2535 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2538 : std_string_String = v2520 |> unbox<std_string_String>
                        let _v2525 = v2538 
                        #endif
#else
                        let v2541 : std_string_String = v2520 |> unbox<std_string_String>
                        let _v2525 = v2541 
                        #endif
                        let v2544 : std_string_String = _v2525 
                        let v2549 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2550 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2544 v2549 
                        let v2551 : Vec<leptos_prelude_AnyView_> = method173(v2550)
                        let v2552 : string = "leptos::prelude::Fragment::new($0)"
                        let v2553 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2551 v2552 
                        let v2554 : string = "leptos::prelude::AnyView::from($0)"
                        let v2555 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2553 v2554 
                        let v2556 : string = "<" + v2171 + " " + v2499 + ">move || { v2555 }</" + v2171 + ">"
                        let v2557 : string = "leptos::prelude::view! { " + v2556 + " }"
                        let v2558 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2557 
                        let v2559 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2558 |> unbox
                        let v2560 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2561 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2559 v2560 
                        let v2562 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2563 : string = " " + v2562 + v1058 + ""
                        let v2564 : string = "Block Height"
                        let v2565 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2566 : string = "&*$0"
                        let v2567 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2564 v2566 
                        let _v2565 = v2567 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2568 : string = "&*$0"
                        let v2569 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2564 v2568 
                        let _v2565 = v2569 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2570 : string = "&*$0"
                        let v2571 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2564 v2570 
                        let _v2565 = v2571 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2572 : Ref<Str> = v2564 |> unbox<Ref<Str>>
                        let _v2565 = v2572 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2575 : Ref<Str> = v2564 |> unbox<Ref<Str>>
                        let _v2565 = v2575 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2578 : Ref<Str> = v2564 |> unbox<Ref<Str>>
                        let _v2565 = v2578 
                        #endif
#else
                        let v2581 : Ref<Str> = v2564 |> unbox<Ref<Str>>
                        let _v2565 = v2581 
                        #endif
                        let v2584 : Ref<Str> = _v2565 
                        let v2589 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2590 : string = "String::from($0)"
                        let v2591 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2584 v2590 
                        let _v2589 = v2591 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2592 : string = "String::from($0)"
                        let v2593 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2584 v2592 
                        let _v2589 = v2593 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2594 : string = "String::from($0)"
                        let v2595 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2584 v2594 
                        let _v2589 = v2595 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2596 : std_string_String = v2584 |> unbox<std_string_String>
                        let _v2589 = v2596 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2599 : std_string_String = v2584 |> unbox<std_string_String>
                        let _v2589 = v2599 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2602 : std_string_String = v2584 |> unbox<std_string_String>
                        let _v2589 = v2602 
                        #endif
#else
                        let v2605 : std_string_String = v2584 |> unbox<std_string_String>
                        let _v2589 = v2605 
                        #endif
                        let v2608 : std_string_String = _v2589 
                        let v2613 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2614 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2608 v2613 
                        let v2615 : Vec<leptos_prelude_AnyView_> = method173(v2614)
                        let v2616 : string = "leptos::prelude::Fragment::new($0)"
                        let v2617 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2615 v2616 
                        let v2618 : string = "leptos::prelude::AnyView::from($0)"
                        let v2619 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2617 v2618 
                        let v2620 : string = "<" + v2171 + " " + v2563 + ">move || { v2619 }</" + v2171 + ">"
                        let v2621 : string = "leptos::prelude::view! { " + v2620 + " }"
                        let v2622 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2621 
                        let v2623 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2622 |> unbox
                        let v2624 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2625 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2623 v2624 
                        let v2626 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2627 : string = " " + v2626 + v1058 + ""
                        let v2628 : int32 = 0
                        let v2629 : bool = method267(v293, v2628)
                        let v2630 : bool = false = v2629
                        let v2632 : string =
                            if v2630 then
                                v1058
                            else
                                let v2631 : string = "Logs"
                                v2631
                        let v2633 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2634 : string = "&*$0"
                        let v2635 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2632 v2634 
                        let _v2633 = v2635 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2636 : string = "&*$0"
                        let v2637 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2632 v2636 
                        let _v2633 = v2637 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2638 : string = "&*$0"
                        let v2639 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2632 v2638 
                        let _v2633 = v2639 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2640 : Ref<Str> = v2632 |> unbox<Ref<Str>>
                        let _v2633 = v2640 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2643 : Ref<Str> = v2632 |> unbox<Ref<Str>>
                        let _v2633 = v2643 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2646 : Ref<Str> = v2632 |> unbox<Ref<Str>>
                        let _v2633 = v2646 
                        #endif
#else
                        let v2649 : Ref<Str> = v2632 |> unbox<Ref<Str>>
                        let _v2633 = v2649 
                        #endif
                        let v2652 : Ref<Str> = _v2633 
                        let v2657 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2658 : string = "String::from($0)"
                        let v2659 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2652 v2658 
                        let _v2657 = v2659 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2660 : string = "String::from($0)"
                        let v2661 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2652 v2660 
                        let _v2657 = v2661 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2662 : string = "String::from($0)"
                        let v2663 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2652 v2662 
                        let _v2657 = v2663 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2664 : std_string_String = v2652 |> unbox<std_string_String>
                        let _v2657 = v2664 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2667 : std_string_String = v2652 |> unbox<std_string_String>
                        let _v2657 = v2667 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2670 : std_string_String = v2652 |> unbox<std_string_String>
                        let _v2657 = v2670 
                        #endif
#else
                        let v2673 : std_string_String = v2652 |> unbox<std_string_String>
                        let _v2657 = v2673 
                        #endif
                        let v2676 : std_string_String = _v2657 
                        let v2681 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2682 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2676 v2681 
                        let v2683 : Vec<leptos_prelude_AnyView_> = method173(v2682)
                        let v2684 : string = "leptos::prelude::Fragment::new($0)"
                        let v2685 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2683 v2684 
                        let v2686 : string = "leptos::prelude::AnyView::from($0)"
                        let v2687 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2685 v2686 
                        let v2688 : string = "<" + v2171 + " " + v2627 + ">move || { v2687 }</" + v2171 + ">"
                        let v2689 : string = "leptos::prelude::view! { " + v2688 + " }"
                        let v2690 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2689 
                        let v2691 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2690 |> unbox
                        let v2692 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2693 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2691 v2692 
                        let v2694 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2695 : string = " " + v2694 + v1058 + ""
                        let v2696 : string = "Outcome Status"
                        let v2697 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2698 : string = "&*$0"
                        let v2699 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2696 v2698 
                        let _v2697 = v2699 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2700 : string = "&*$0"
                        let v2701 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2696 v2700 
                        let _v2697 = v2701 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2702 : string = "&*$0"
                        let v2703 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2696 v2702 
                        let _v2697 = v2703 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2704 : Ref<Str> = v2696 |> unbox<Ref<Str>>
                        let _v2697 = v2704 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2707 : Ref<Str> = v2696 |> unbox<Ref<Str>>
                        let _v2697 = v2707 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2710 : Ref<Str> = v2696 |> unbox<Ref<Str>>
                        let _v2697 = v2710 
                        #endif
#else
                        let v2713 : Ref<Str> = v2696 |> unbox<Ref<Str>>
                        let _v2697 = v2713 
                        #endif
                        let v2716 : Ref<Str> = _v2697 
                        let v2721 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2722 : string = "String::from($0)"
                        let v2723 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2716 v2722 
                        let _v2721 = v2723 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2724 : string = "String::from($0)"
                        let v2725 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2716 v2724 
                        let _v2721 = v2725 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2726 : string = "String::from($0)"
                        let v2727 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2716 v2726 
                        let _v2721 = v2727 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2728 : std_string_String = v2716 |> unbox<std_string_String>
                        let _v2721 = v2728 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2731 : std_string_String = v2716 |> unbox<std_string_String>
                        let _v2721 = v2731 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2734 : std_string_String = v2716 |> unbox<std_string_String>
                        let _v2721 = v2734 
                        #endif
#else
                        let v2737 : std_string_String = v2716 |> unbox<std_string_String>
                        let _v2721 = v2737 
                        #endif
                        let v2740 : std_string_String = _v2721 
                        let v2745 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2746 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2740 v2745 
                        let v2747 : Vec<leptos_prelude_AnyView_> = method173(v2746)
                        let v2748 : string = "leptos::prelude::Fragment::new($0)"
                        let v2749 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2747 v2748 
                        let v2750 : string = "leptos::prelude::AnyView::from($0)"
                        let v2751 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2749 v2750 
                        let v2752 : string = "<" + v2171 + " " + v2695 + ">move || { v2751 }</" + v2171 + ">"
                        let v2753 : string = "leptos::prelude::view! { " + v2752 + " }"
                        let v2754 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2753 
                        let v2755 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2754 |> unbox
                        let v2756 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2757 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2755 v2756 
                        let v2758 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2759 : string = " " + v2758 + v1058 + ""
                        let v2760 : string = "Hash"
                        let v2761 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2762 : string = "&*$0"
                        let v2763 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2760 v2762 
                        let _v2761 = v2763 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2764 : string = "&*$0"
                        let v2765 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2760 v2764 
                        let _v2761 = v2765 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2766 : string = "&*$0"
                        let v2767 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2760 v2766 
                        let _v2761 = v2767 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2768 : Ref<Str> = v2760 |> unbox<Ref<Str>>
                        let _v2761 = v2768 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2771 : Ref<Str> = v2760 |> unbox<Ref<Str>>
                        let _v2761 = v2771 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2774 : Ref<Str> = v2760 |> unbox<Ref<Str>>
                        let _v2761 = v2774 
                        #endif
#else
                        let v2777 : Ref<Str> = v2760 |> unbox<Ref<Str>>
                        let _v2761 = v2777 
                        #endif
                        let v2780 : Ref<Str> = _v2761 
                        let v2785 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2786 : string = "String::from($0)"
                        let v2787 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2780 v2786 
                        let _v2785 = v2787 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2788 : string = "String::from($0)"
                        let v2789 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2780 v2788 
                        let _v2785 = v2789 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2790 : string = "String::from($0)"
                        let v2791 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2780 v2790 
                        let _v2785 = v2791 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2792 : std_string_String = v2780 |> unbox<std_string_String>
                        let _v2785 = v2792 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2795 : std_string_String = v2780 |> unbox<std_string_String>
                        let _v2785 = v2795 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2798 : std_string_String = v2780 |> unbox<std_string_String>
                        let _v2785 = v2798 
                        #endif
#else
                        let v2801 : std_string_String = v2780 |> unbox<std_string_String>
                        let _v2785 = v2801 
                        #endif
                        let v2804 : std_string_String = _v2785 
                        let v2809 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2810 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2804 v2809 
                        let v2811 : Vec<leptos_prelude_AnyView_> = method173(v2810)
                        let v2812 : string = "leptos::prelude::Fragment::new($0)"
                        let v2813 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2811 v2812 
                        let v2814 : string = "leptos::prelude::AnyView::from($0)"
                        let v2815 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2813 v2814 
                        let v2816 : string = "<" + v2171 + " " + v2759 + ">move || { v2815 }</" + v2171 + ">"
                        let v2817 : string = "leptos::prelude::view! { " + v2816 + " }"
                        let v2818 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2817 
                        let v2819 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2818 |> unbox
                        let v2820 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2821 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2819 v2820 
                        let v2822 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2823 : string = " " + v2822 + v1058 + ""
                        let v2824 : string = "Block Hash"
                        let v2825 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2826 : string = "&*$0"
                        let v2827 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2824 v2826 
                        let _v2825 = v2827 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2828 : string = "&*$0"
                        let v2829 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2824 v2828 
                        let _v2825 = v2829 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2830 : string = "&*$0"
                        let v2831 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2824 v2830 
                        let _v2825 = v2831 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2832 : Ref<Str> = v2824 |> unbox<Ref<Str>>
                        let _v2825 = v2832 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2835 : Ref<Str> = v2824 |> unbox<Ref<Str>>
                        let _v2825 = v2835 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2838 : Ref<Str> = v2824 |> unbox<Ref<Str>>
                        let _v2825 = v2838 
                        #endif
#else
                        let v2841 : Ref<Str> = v2824 |> unbox<Ref<Str>>
                        let _v2825 = v2841 
                        #endif
                        let v2844 : Ref<Str> = _v2825 
                        let v2849 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2850 : string = "String::from($0)"
                        let v2851 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2844 v2850 
                        let _v2849 = v2851 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2852 : string = "String::from($0)"
                        let v2853 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2844 v2852 
                        let _v2849 = v2853 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2854 : string = "String::from($0)"
                        let v2855 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2844 v2854 
                        let _v2849 = v2855 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2856 : std_string_String = v2844 |> unbox<std_string_String>
                        let _v2849 = v2856 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2859 : std_string_String = v2844 |> unbox<std_string_String>
                        let _v2849 = v2859 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2862 : std_string_String = v2844 |> unbox<std_string_String>
                        let _v2849 = v2862 
                        #endif
#else
                        let v2865 : std_string_String = v2844 |> unbox<std_string_String>
                        let _v2849 = v2865 
                        #endif
                        let v2868 : std_string_String = _v2849 
                        let v2873 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2874 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2868 v2873 
                        let v2875 : Vec<leptos_prelude_AnyView_> = method173(v2874)
                        let v2876 : string = "leptos::prelude::Fragment::new($0)"
                        let v2877 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2875 v2876 
                        let v2878 : string = "leptos::prelude::AnyView::from($0)"
                        let v2879 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2877 v2878 
                        let v2880 : string = "<" + v2171 + " " + v2823 + ">move || { v2879 }</" + v2171 + ">"
                        let v2881 : string = "leptos::prelude::view! { " + v2880 + " }"
                        let v2882 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2881 
                        let v2883 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2882 |> unbox
                        let v2884 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2885 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2883 v2884 
                        let v2886 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2887 : string = " " + v2886 + v1058 + ""
                        let v2888 : string = "Receipt ID"
                        let v2889 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2890 : string = "&*$0"
                        let v2891 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2888 v2890 
                        let _v2889 = v2891 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2892 : string = "&*$0"
                        let v2893 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2888 v2892 
                        let _v2889 = v2893 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2894 : string = "&*$0"
                        let v2895 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2888 v2894 
                        let _v2889 = v2895 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2896 : Ref<Str> = v2888 |> unbox<Ref<Str>>
                        let _v2889 = v2896 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2899 : Ref<Str> = v2888 |> unbox<Ref<Str>>
                        let _v2889 = v2899 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2902 : Ref<Str> = v2888 |> unbox<Ref<Str>>
                        let _v2889 = v2902 
                        #endif
#else
                        let v2905 : Ref<Str> = v2888 |> unbox<Ref<Str>>
                        let _v2889 = v2905 
                        #endif
                        let v2908 : Ref<Str> = _v2889 
                        let v2913 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2914 : string = "String::from($0)"
                        let v2915 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2908 v2914 
                        let _v2913 = v2915 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2916 : string = "String::from($0)"
                        let v2917 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2908 v2916 
                        let _v2913 = v2917 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2918 : string = "String::from($0)"
                        let v2919 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2908 v2918 
                        let _v2913 = v2919 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2920 : std_string_String = v2908 |> unbox<std_string_String>
                        let _v2913 = v2920 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2923 : std_string_String = v2908 |> unbox<std_string_String>
                        let _v2913 = v2923 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2926 : std_string_String = v2908 |> unbox<std_string_String>
                        let _v2913 = v2926 
                        #endif
#else
                        let v2929 : std_string_String = v2908 |> unbox<std_string_String>
                        let _v2913 = v2929 
                        #endif
                        let v2932 : std_string_String = _v2913 
                        let v2937 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2938 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2932 v2937 
                        let v2939 : Vec<leptos_prelude_AnyView_> = method173(v2938)
                        let v2940 : string = "leptos::prelude::Fragment::new($0)"
                        let v2941 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2939 v2940 
                        let v2942 : string = "leptos::prelude::AnyView::from($0)"
                        let v2943 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2941 v2942 
                        let v2944 : string = "<" + v2171 + " " + v2887 + ">move || { v2943 }</" + v2171 + ">"
                        let v2945 : string = "leptos::prelude::view! { " + v2944 + " }"
                        let v2946 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2945 
                        let v2947 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2946 |> unbox
                        let v2948 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2949 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2947 v2948 
                        let v2950 : Vec<leptos_prelude_AnyView_> = method266(v2177, v2241, v2305, v2369, v2433, v2497, v2561, v2625, v2693, v2757, v2821, v2885, v2949)
                        let v2951 : string = "leptos::prelude::Fragment::new($0)"
                        let v2952 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2950 v2951 
                        let v2953 : string = "leptos::prelude::AnyView::from($0)"
                        let v2954 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2952 v2953 
                        let v2955 : string = "<" + v2086 + " " + v1058 + ">move || { v2954 }</" + v2086 + ">"
                        let v2956 : string = "leptos::prelude::view! { " + v2955 + " }"
                        let v2957 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2956 
                        let v2958 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v2957 |> unbox
                        let v2959 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2960 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2958 v2959 
                        let v2961 : Vec<leptos_prelude_AnyView_> = method173(v2960)
                        let v2962 : string = "leptos::prelude::Fragment::new($0)"
                        let v2963 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2961 v2962 
                        let v2964 : string = "class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\""
                        let v2965 : string = " " + v2964 + v1058 + ""
                        let v2966 : string = "class=\"ltr:text-left rtl:text-right\""
                        let v2967 : string = " " + v2966 + v1058 + ""
                        let v2968 : string = "leptos::prelude::AnyView::from($0)"
                        let v2969 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2963 v2968 
                        let v2970 : string = "thead"
                        let v2971 : string = "<" + v2970 + " " + v2967 + ">move || { v2969 }</" + v2970 + ">"
                        let v2972 : string = "leptos::prelude::view! { " + v2971 + " }"
                        let v2973 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2972 
                        let v2974 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Thead>> = v2973 |> unbox
                        let v2975 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2976 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2974 v2975 
                        let v2977 : string = "class=\"divide-y divide-gray-200 dark:divide-gray-700\""
                        let v2978 : string = " " + v2977 + v1058 + ""
                        let v2979 : string = "leptos::prelude::AnyView::from($0)"
                        let v2980 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2109 v2979 
                        let v2981 : string = "tbody"
                        let v2982 : string = "<" + v2981 + " " + v2978 + ">move || { v2980 }</" + v2981 + ">"
                        let v2983 : string = "leptos::prelude::view! { " + v2982 + " }"
                        let v2984 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2983 
                        let v2985 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tbody>> = v2984 |> unbox
                        let v2986 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2987 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2985 v2986 
                        let v2988 : Vec<leptos_prelude_AnyView_> = method176(v2976, v2987)
                        let v2989 : string = "leptos::prelude::Fragment::new($0)"
                        let v2990 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2988 v2989 
                        let v2991 : string = "leptos::prelude::AnyView::from($0)"
                        let v2992 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2990 v2991 
                        let v2993 : string = "table"
                        let v2994 : string = "<" + v2993 + " " + v2965 + ">move || { v2992 }</" + v2993 + ">"
                        let v2995 : string = "leptos::prelude::view! { " + v2994 + " }"
                        let v2996 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2995 
                        let v2997 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Table>> = v2996 |> unbox
                        let v2998 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2999 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2997 v2998 
                        v2999
                | _ ->
                    let v3001 : string = "class=\"grid place-content-center py-[10vh]\""
                    let v3002 : string = ""
                    let v3003 : string = " " + v3001 + v3002 + ""
                    let v3004 : string = "class=\"flex flex-1 [gap:4px] items-center\""
                    let v3005 : string = " " + v3004 + v3002 + ""
                    let v3006 : string = "$0"
                    let v3007 : (unit -> string) = closure197()
                    let v3008 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3007 v3006 
                    let v3009 : string = "version=\"1.1\""
                    let v3010 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                    let v3011 : string = "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
                    let v3012 : string = "x=\"0px\""
                    let v3013 : string = "y=\"0px\""
                    let v3014 : string = "viewBox=\"0 0 24 30\""
                    let v3015 : string = "style=\"enable-background:new 0 0 50 50;\""
                    let v3016 : string = "xml:space=\"preserve\""
                    let v3017 : string = "class=move || \" \".to_owned() + &v3008(())"
                    let v3018 : string = " " + v3009 + v3002 + ""
                    let v3019 : string = " " + v3010 + v3018 + ""
                    let v3020 : string = " " + v3011 + v3019 + ""
                    let v3021 : string = " " + v3012 + v3020 + ""
                    let v3022 : string = " " + v3013 + v3021 + ""
                    let v3023 : string = " " + v3014 + v3022 + ""
                    let v3024 : string = " " + v3015 + v3023 + ""
                    let v3025 : string = " " + v3016 + v3024 + ""
                    let v3026 : string = " " + v3017 + v3025 + ""
                    let v3027 : string = "x=\"0\""
                    let v3028 : string = "y=\"10\""
                    let v3029 : string = "width=\"4\""
                    let v3030 : string = "height=\"10\""
                    let v3031 : string = "fill=\"#333\""
                    let v3032 : string = "opacity=\"0.2\""
                    let v3033 : string = " " + v3027 + v3002 + ""
                    let v3034 : string = " " + v3028 + v3033 + ""
                    let v3035 : string = " " + v3029 + v3034 + ""
                    let v3036 : string = " " + v3030 + v3035 + ""
                    let v3037 : string = " " + v3031 + v3036 + ""
                    let v3038 : string = " " + v3032 + v3037 + ""
                    let v3039 : string = "attributeName=\"opacity\""
                    let v3040 : string = "attributeType=\"XML\""
                    let v3041 : string = "values=\"0.2; 1; .2\""
                    let v3042 : string = "begin=\"0s\""
                    let v3043 : string = "dur=\"0.6s\""
                    let v3044 : string = "repeatCount=\"indefinite\""
                    let v3045 : string = " " + v3039 + v3002 + ""
                    let v3046 : string = " " + v3040 + v3045 + ""
                    let v3047 : string = " " + v3041 + v3046 + ""
                    let v3048 : string = " " + v3042 + v3047 + ""
                    let v3049 : string = " " + v3043 + v3048 + ""
                    let v3050 : string = " " + v3044 + v3049 + ""
                    let v3051 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3052 : string = "leptos::prelude::Fragment::new($0)"
                    let v3053 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3051 v3052 
                    let v3054 : string = "leptos::prelude::AnyView::from($0)"
                    let v3055 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3053 v3054 
                    let v3056 : string = "animate"
                    let v3057 : string = "<" + v3056 + " " + v3050 + ">move || { v3055 }</" + v3056 + ">"
                    let v3058 : string = "leptos::prelude::view! { " + v3057 + " }"
                    let v3059 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3058 
                    let v3060 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3059 |> unbox
                    let v3061 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3062 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3060 v3061 
                    let v3063 : string = "attributeName=\"height\""
                    let v3064 : string = "attributeType=\"XML\""
                    let v3065 : string = "values=\"10; 20; 10\""
                    let v3066 : string = "begin=\"0s\""
                    let v3067 : string = "dur=\"0.6s\""
                    let v3068 : string = "repeatCount=\"indefinite\""
                    let v3069 : string = " " + v3063 + v3002 + ""
                    let v3070 : string = " " + v3064 + v3069 + ""
                    let v3071 : string = " " + v3065 + v3070 + ""
                    let v3072 : string = " " + v3066 + v3071 + ""
                    let v3073 : string = " " + v3067 + v3072 + ""
                    let v3074 : string = " " + v3068 + v3073 + ""
                    let v3075 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3076 : string = "leptos::prelude::Fragment::new($0)"
                    let v3077 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3075 v3076 
                    let v3078 : string = "leptos::prelude::AnyView::from($0)"
                    let v3079 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3077 v3078 
                    let v3080 : string = "<" + v3056 + " " + v3074 + ">move || { v3079 }</" + v3056 + ">"
                    let v3081 : string = "leptos::prelude::view! { " + v3080 + " }"
                    let v3082 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3081 
                    let v3083 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3082 |> unbox
                    let v3084 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3085 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3083 v3084 
                    let v3086 : string = "attributeName=\"y\""
                    let v3087 : string = "attributeType=\"XML\""
                    let v3088 : string = "values=\"10; 5; 10\""
                    let v3089 : string = "begin=\"0s\""
                    let v3090 : string = "dur=\"0.6s\""
                    let v3091 : string = "repeatCount=\"indefinite\""
                    let v3092 : string = " " + v3086 + v3002 + ""
                    let v3093 : string = " " + v3087 + v3092 + ""
                    let v3094 : string = " " + v3088 + v3093 + ""
                    let v3095 : string = " " + v3089 + v3094 + ""
                    let v3096 : string = " " + v3090 + v3095 + ""
                    let v3097 : string = " " + v3091 + v3096 + ""
                    let v3098 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3099 : string = "leptos::prelude::Fragment::new($0)"
                    let v3100 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3098 v3099 
                    let v3101 : string = "leptos::prelude::AnyView::from($0)"
                    let v3102 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3100 v3101 
                    let v3103 : string = "<" + v3056 + " " + v3097 + ">move || { v3102 }</" + v3056 + ">"
                    let v3104 : string = "leptos::prelude::view! { " + v3103 + " }"
                    let v3105 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3104 
                    let v3106 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3105 |> unbox
                    let v3107 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3106 v3107 
                    let v3109 : Vec<leptos_prelude_AnyView_> = method186(v3062, v3085, v3108)
                    let v3110 : string = "leptos::prelude::Fragment::new($0)"
                    let v3111 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3109 v3110 
                    let v3112 : string = "leptos::prelude::AnyView::from($0)"
                    let v3113 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3111 v3112 
                    let v3114 : string = "rect"
                    let v3115 : string = "<" + v3114 + " " + v3038 + ">move || { v3113 }</" + v3114 + ">"
                    let v3116 : string = "leptos::prelude::view! { " + v3115 + " }"
                    let v3117 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3116 
                    let v3118 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v3117 |> unbox
                    let v3119 : string = "x=\"8\""
                    let v3120 : string = "y=\"10\""
                    let v3121 : string = "width=\"4\""
                    let v3122 : string = "height=\"10\""
                    let v3123 : string = "fill=\"#333\""
                    let v3124 : string = "opacity=\"0.2\""
                    let v3125 : string = " " + v3119 + v3002 + ""
                    let v3126 : string = " " + v3120 + v3125 + ""
                    let v3127 : string = " " + v3121 + v3126 + ""
                    let v3128 : string = " " + v3122 + v3127 + ""
                    let v3129 : string = " " + v3123 + v3128 + ""
                    let v3130 : string = " " + v3124 + v3129 + ""
                    let v3131 : string = "attributeName=\"opacity\""
                    let v3132 : string = "attributeType=\"XML\""
                    let v3133 : string = "values=\"0.2; 1; .2\""
                    let v3134 : string = "begin=\"0.15s\""
                    let v3135 : string = "dur=\"0.6s\""
                    let v3136 : string = "repeatCount=\"indefinite\""
                    let v3137 : string = " " + v3131 + v3002 + ""
                    let v3138 : string = " " + v3132 + v3137 + ""
                    let v3139 : string = " " + v3133 + v3138 + ""
                    let v3140 : string = " " + v3134 + v3139 + ""
                    let v3141 : string = " " + v3135 + v3140 + ""
                    let v3142 : string = " " + v3136 + v3141 + ""
                    let v3143 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3144 : string = "leptos::prelude::Fragment::new($0)"
                    let v3145 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3143 v3144 
                    let v3146 : string = "leptos::prelude::AnyView::from($0)"
                    let v3147 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3145 v3146 
                    let v3148 : string = "<" + v3056 + " " + v3142 + ">move || { v3147 }</" + v3056 + ">"
                    let v3149 : string = "leptos::prelude::view! { " + v3148 + " }"
                    let v3150 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3149 
                    let v3151 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3150 |> unbox
                    let v3152 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3153 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3151 v3152 
                    let v3154 : string = "attributeName=\"opacity\""
                    let v3155 : string = "attributeType=\"XML\""
                    let v3156 : string = "values=\"10; 20; 10\""
                    let v3157 : string = "begin=\"0.15s\""
                    let v3158 : string = "dur=\"0.6s\""
                    let v3159 : string = "repeatCount=\"indefinite\""
                    let v3160 : string = " " + v3154 + v3002 + ""
                    let v3161 : string = " " + v3155 + v3160 + ""
                    let v3162 : string = " " + v3156 + v3161 + ""
                    let v3163 : string = " " + v3157 + v3162 + ""
                    let v3164 : string = " " + v3158 + v3163 + ""
                    let v3165 : string = " " + v3159 + v3164 + ""
                    let v3166 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3167 : string = "leptos::prelude::Fragment::new($0)"
                    let v3168 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3166 v3167 
                    let v3169 : string = "leptos::prelude::AnyView::from($0)"
                    let v3170 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3168 v3169 
                    let v3171 : string = "<" + v3056 + " " + v3165 + ">move || { v3170 }</" + v3056 + ">"
                    let v3172 : string = "leptos::prelude::view! { " + v3171 + " }"
                    let v3173 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3172 
                    let v3174 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3173 |> unbox
                    let v3175 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3176 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3174 v3175 
                    let v3177 : string = "attributeName=\"y\""
                    let v3178 : string = "attributeType=\"XML\""
                    let v3179 : string = "values=\"10; 5; 10\""
                    let v3180 : string = "begin=\"0.15s\""
                    let v3181 : string = "dur=\"0.6s\""
                    let v3182 : string = "repeatCount=\"indefinite\""
                    let v3183 : string = " " + v3177 + v3002 + ""
                    let v3184 : string = " " + v3178 + v3183 + ""
                    let v3185 : string = " " + v3179 + v3184 + ""
                    let v3186 : string = " " + v3180 + v3185 + ""
                    let v3187 : string = " " + v3181 + v3186 + ""
                    let v3188 : string = " " + v3182 + v3187 + ""
                    let v3189 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3190 : string = "leptos::prelude::Fragment::new($0)"
                    let v3191 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3189 v3190 
                    let v3192 : string = "leptos::prelude::AnyView::from($0)"
                    let v3193 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3191 v3192 
                    let v3194 : string = "<" + v3056 + " " + v3188 + ">move || { v3193 }</" + v3056 + ">"
                    let v3195 : string = "leptos::prelude::view! { " + v3194 + " }"
                    let v3196 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3195 
                    let v3197 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3196 |> unbox
                    let v3198 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3199 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3197 v3198 
                    let v3200 : Vec<leptos_prelude_AnyView_> = method186(v3153, v3176, v3199)
                    let v3201 : string = "leptos::prelude::Fragment::new($0)"
                    let v3202 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3200 v3201 
                    let v3203 : string = "leptos::prelude::AnyView::from($0)"
                    let v3204 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3202 v3203 
                    let v3205 : string = "<" + v3114 + " " + v3130 + ">move || { v3204 }</" + v3114 + ">"
                    let v3206 : string = "leptos::prelude::view! { " + v3205 + " }"
                    let v3207 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3206 
                    let v3208 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v3207 |> unbox
                    let v3209 : string = "x=\"16\""
                    let v3210 : string = "y=\"10\""
                    let v3211 : string = "width=\"4\""
                    let v3212 : string = "height=\"10\""
                    let v3213 : string = "fill=\"#333\""
                    let v3214 : string = "opacity=\"0.2\""
                    let v3215 : string = " " + v3209 + v3002 + ""
                    let v3216 : string = " " + v3210 + v3215 + ""
                    let v3217 : string = " " + v3211 + v3216 + ""
                    let v3218 : string = " " + v3212 + v3217 + ""
                    let v3219 : string = " " + v3213 + v3218 + ""
                    let v3220 : string = " " + v3214 + v3219 + ""
                    let v3221 : string = "attributeName=\"opacity\""
                    let v3222 : string = "attributeType=\"XML\""
                    let v3223 : string = "values=\"0.2; 1; .2\""
                    let v3224 : string = "begin=\"0.3s\""
                    let v3225 : string = "dur=\"0.6s\""
                    let v3226 : string = "repeatCount=\"indefinite\""
                    let v3227 : string = " " + v3221 + v3002 + ""
                    let v3228 : string = " " + v3222 + v3227 + ""
                    let v3229 : string = " " + v3223 + v3228 + ""
                    let v3230 : string = " " + v3224 + v3229 + ""
                    let v3231 : string = " " + v3225 + v3230 + ""
                    let v3232 : string = " " + v3226 + v3231 + ""
                    let v3233 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3234 : string = "leptos::prelude::Fragment::new($0)"
                    let v3235 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3233 v3234 
                    let v3236 : string = "leptos::prelude::AnyView::from($0)"
                    let v3237 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3235 v3236 
                    let v3238 : string = "<" + v3056 + " " + v3232 + ">move || { v3237 }</" + v3056 + ">"
                    let v3239 : string = "leptos::prelude::view! { " + v3238 + " }"
                    let v3240 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3239 
                    let v3241 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3240 |> unbox
                    let v3242 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3243 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3241 v3242 
                    let v3244 : string = "attributeName=\"height\""
                    let v3245 : string = "attributeType=\"XML\""
                    let v3246 : string = "values=\"10; 20; 10\""
                    let v3247 : string = "begin=\"0.3s\""
                    let v3248 : string = "dur=\"0.6s\""
                    let v3249 : string = "repeatCount=\"indefinite\""
                    let v3250 : string = " " + v3244 + v3002 + ""
                    let v3251 : string = " " + v3245 + v3250 + ""
                    let v3252 : string = " " + v3246 + v3251 + ""
                    let v3253 : string = " " + v3247 + v3252 + ""
                    let v3254 : string = " " + v3248 + v3253 + ""
                    let v3255 : string = " " + v3249 + v3254 + ""
                    let v3256 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3257 : string = "leptos::prelude::Fragment::new($0)"
                    let v3258 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3256 v3257 
                    let v3259 : string = "leptos::prelude::AnyView::from($0)"
                    let v3260 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3258 v3259 
                    let v3261 : string = "<" + v3056 + " " + v3255 + ">move || { v3260 }</" + v3056 + ">"
                    let v3262 : string = "leptos::prelude::view! { " + v3261 + " }"
                    let v3263 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3262 
                    let v3264 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3263 |> unbox
                    let v3265 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3266 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3264 v3265 
                    let v3267 : string = "attributeName=\"y\""
                    let v3268 : string = "attributeType=\"XML\""
                    let v3269 : string = "values=\"10; 5; 10\""
                    let v3270 : string = "begin=\"0.3s\""
                    let v3271 : string = "dur=\"0.6s\""
                    let v3272 : string = "repeatCount=\"indefinite\""
                    let v3273 : string = " " + v3267 + v3002 + ""
                    let v3274 : string = " " + v3268 + v3273 + ""
                    let v3275 : string = " " + v3269 + v3274 + ""
                    let v3276 : string = " " + v3270 + v3275 + ""
                    let v3277 : string = " " + v3271 + v3276 + ""
                    let v3278 : string = " " + v3272 + v3277 + ""
                    let v3279 : Vec<leptos_prelude_AnyView_> = method172()
                    let v3280 : string = "leptos::prelude::Fragment::new($0)"
                    let v3281 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3279 v3280 
                    let v3282 : string = "leptos::prelude::AnyView::from($0)"
                    let v3283 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3281 v3282 
                    let v3284 : string = "<" + v3056 + " " + v3278 + ">move || { v3283 }</" + v3056 + ">"
                    let v3285 : string = "leptos::prelude::view! { " + v3284 + " }"
                    let v3286 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3285 
                    let v3287 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3286 |> unbox
                    let v3288 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3289 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3287 v3288 
                    let v3290 : Vec<leptos_prelude_AnyView_> = method186(v3243, v3266, v3289)
                    let v3291 : string = "leptos::prelude::Fragment::new($0)"
                    let v3292 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3290 v3291 
                    let v3293 : string = "leptos::prelude::AnyView::from($0)"
                    let v3294 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3292 v3293 
                    let v3295 : string = "<" + v3114 + " " + v3220 + ">move || { v3294 }</" + v3114 + ">"
                    let v3296 : string = "leptos::prelude::view! { " + v3295 + " }"
                    let v3297 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3296 
                    let v3298 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v3297 |> unbox
                    let v3299 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3300 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3298 v3299 
                    let v3301 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3302 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3208 v3301 
                    let v3303 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3304 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3118 v3303 
                    let v3305 : Vec<leptos_prelude_AnyView_> = method186(v3304, v3302, v3300)
                    let v3306 : string = "leptos::prelude::Fragment::new($0)"
                    let v3307 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3305 v3306 
                    let v3308 : string = "leptos::prelude::AnyView::from($0)"
                    let v3309 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3307 v3308 
                    let v3310 : string = "svg"
                    let v3311 : string = "<" + v3310 + " " + v3026 + ">move || { v3309 }</" + v3310 + ">"
                    let v3312 : string = "leptos::prelude::view! { " + v3311 + " }"
                    let v3313 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3312 
                    let v3314 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3313 |> unbox
                    let v3315 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3316 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3314 v3315 
                    let v3317 : string = "Loading..."
                    let v3318 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3319 : string = "&*$0"
                    let v3320 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3317 v3319 
                    let _v3318 = v3320 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3321 : string = "&*$0"
                    let v3322 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3317 v3321 
                    let _v3318 = v3322 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3323 : string = "&*$0"
                    let v3324 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3317 v3323 
                    let _v3318 = v3324 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3325 : Ref<Str> = v3317 |> unbox<Ref<Str>>
                    let _v3318 = v3325 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3328 : Ref<Str> = v3317 |> unbox<Ref<Str>>
                    let _v3318 = v3328 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3331 : Ref<Str> = v3317 |> unbox<Ref<Str>>
                    let _v3318 = v3331 
                    #endif
#else
                    let v3334 : Ref<Str> = v3317 |> unbox<Ref<Str>>
                    let _v3318 = v3334 
                    #endif
                    let v3337 : Ref<Str> = _v3318 
                    let v3342 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3343 : string = "String::from($0)"
                    let v3344 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3337 v3343 
                    let _v3342 = v3344 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3345 : string = "String::from($0)"
                    let v3346 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3337 v3345 
                    let _v3342 = v3346 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3347 : string = "String::from($0)"
                    let v3348 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3337 v3347 
                    let _v3342 = v3348 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3349 : std_string_String = v3337 |> unbox<std_string_String>
                    let _v3342 = v3349 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3352 : std_string_String = v3337 |> unbox<std_string_String>
                    let _v3342 = v3352 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3355 : std_string_String = v3337 |> unbox<std_string_String>
                    let _v3342 = v3355 
                    #endif
#else
                    let v3358 : std_string_String = v3337 |> unbox<std_string_String>
                    let _v3342 = v3358 
                    #endif
                    let v3361 : std_string_String = _v3342 
                    let v3366 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v3367 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3361 v3366 
                    let v3368 : Vec<leptos_prelude_AnyView_> = method176(v3316, v3367)
                    let v3369 : string = "leptos::prelude::Fragment::new($0)"
                    let v3370 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3368 v3369 
                    let v3371 : string = "leptos::prelude::AnyView::from($0)"
                    let v3372 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3370 v3371 
                    let v3373 : string = "div"
                    let v3374 : string = "<" + v3373 + " " + v3005 + ">move || { v3372 }</" + v3373 + ">"
                    let v3375 : string = "leptos::prelude::view! { " + v3374 + " }"
                    let v3376 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3375 
                    let v3377 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3376 |> unbox
                    let v3378 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3379 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3377 v3378 
                    let v3380 : Vec<leptos_prelude_AnyView_> = method173(v3379)
                    let v3381 : string = "leptos::prelude::Fragment::new($0)"
                    let v3382 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3380 v3381 
                    let v3383 : string = "leptos::prelude::AnyView::from($0)"
                    let v3384 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3382 v3383 
                    let v3385 : string = "<" + v3373 + " " + v3003 + ">move || { v3384 }</" + v3373 + ">"
                    let v3386 : string = "leptos::prelude::view! { " + v3385 + " }"
                    let v3387 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3386 
                    let v3388 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3387 |> unbox
                    let v3389 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3390 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3388 v3389 
                    v3390
    let v3535 : Vec<leptos_prelude_AnyView_> = method176(v119, v3534)
    let v3536 : string = "leptos::prelude::Fragment::new($0)"
    let v3537 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3535 v3536 
    v3537
and closure346 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure347 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure348 () () : string =
    let v0 : string = "Debug"
    v0
and method269 () : (unit -> string) =
    closure348()
and closure350 () () : leptos_dom_Fragment =
    let v0 : string = "Transactions"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : Vec<leptos_prelude_AnyView_> = method173(v50)
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method270 () : (unit -> leptos_dom_Fragment) =
    closure350()
and closure352 () () : string =
    let v0 : string = "[max-height:70vh]"
    v0
and closure351 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : leptos_dom_Fragment =
    let v1 : string = $"$0()"
    let v2 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let v6 : string = "fable_library_rust::String_::fromString($0)"
    let v7 : string = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _v3 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _v3 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : string = $"%A{v2}"
    let _v3 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : string = $"%A{v2}"
    let _v3 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : string = $"%A{v2}"
    let _v3 = v22 
    #endif
#else
    let v25 : string = $"%A{v2}"
    let _v3 = v25 
    #endif
    let v28 : string = _v3 
    let v33 : string = "$0"
    let v34 : (unit -> string) = closure352()
    let v35 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v34 v33 
    let v36 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v35(())"
    let v37 : string = ""
    let v38 : string = " " + v36 + v37 + ""
    let v39 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v40 : string = "&*$0"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v28 v40 
    let _v39 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "&*$0"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v28 v42 
    let _v39 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = "&*$0"
    let v45 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v28 v44 
    let _v39 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : Ref<Str> = v28 |> unbox<Ref<Str>>
    let _v39 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : Ref<Str> = v28 |> unbox<Ref<Str>>
    let _v39 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v28 |> unbox<Ref<Str>>
    let _v39 = v52 
    #endif
#else
    let v55 : Ref<Str> = v28 |> unbox<Ref<Str>>
    let _v39 = v55 
    #endif
    let v58 : Ref<Str> = _v39 
    let v63 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v64 : string = "String::from($0)"
    let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v58 v64 
    let _v63 = v65 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v66 : string = "String::from($0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v58 v66 
    let _v63 = v67 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v68 : string = "String::from($0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v58 v68 
    let _v63 = v69 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v70 : std_string_String = v58 |> unbox<std_string_String>
    let _v63 = v70 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : std_string_String = v58 |> unbox<std_string_String>
    let _v63 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v58 |> unbox<std_string_String>
    let _v63 = v76 
    #endif
#else
    let v79 : std_string_String = v58 |> unbox<std_string_String>
    let _v63 = v79 
    #endif
    let v82 : std_string_String = _v63 
    let v87 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v88 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v82 v87 
    let v89 : Vec<leptos_prelude_AnyView_> = method173(v88)
    let v90 : string = "leptos::prelude::Fragment::new($0)"
    let v91 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "leptos::prelude::AnyView::from($0)"
    let v93 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "pre"
    let v95 : string = "<" + v94 + " " + v38 + ">move || { v93 }</" + v94 + ">"
    let v96 : string = "leptos::prelude::view! { " + v95 + " }"
    let v97 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v96 
    let v98 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v97 |> unbox
    let v99 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v100 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v98 v99 
    let v101 : Vec<leptos_prelude_AnyView_> = method173(v100)
    let v102 : string = "leptos::prelude::Fragment::new($0)"
    let v103 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v101 v102 
    v103
and method271 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) : (unit -> leptos_dom_Fragment) =
    closure351(v0)
and closure349 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : leptos_dom_Fragment =
    let v1 : (unit -> leptos_dom_Fragment) = method270()
    let v2 : (unit -> leptos_dom_Fragment) = method271(v0)
    let v3 : string = "$0"
    let v4 : (unit -> string) = closure263()
    let v5 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4 v3 
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure244()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure245()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())"
    let v13 : string = ""
    let v14 : string = " " + v12 + v13 + ""
    let v15 : string = "$0"
    let v16 : (unit -> string) = closure246()
    let v17 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v16 v15 
    let v18 : string = "class=\"[font-size:12px] text-gray-400\""
    let v19 : string = " " + v18 + v13 + ""
    let v20 : leptos_dom_Fragment = v1 ()
    let v21 : string = "leptos::prelude::AnyView::from($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "dt"
    let v24 : string = "<" + v23 + " " + v19 + ">move || { v22 }</" + v23 + ">"
    let v25 : string = "leptos::prelude::view! { " + v24 + " }"
    let v26 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v26 |> unbox
    let v28 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v29 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v30 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())"
    let v31 : string = " " + v30 + v13 + ""
    let v32 : leptos_dom_Fragment = v2 ()
    let v33 : string = "leptos::prelude::AnyView::from($0)"
    let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "dd"
    let v36 : string = "<" + v35 + " " + v31 + ">move || { v34 }</" + v35 + ">"
    let v37 : string = "leptos::prelude::view! { " + v36 + " }"
    let v38 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v38 |> unbox
    let v40 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v41 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : Vec<leptos_prelude_AnyView_> = method176(v29, v41)
    let v43 : string = "leptos::prelude::Fragment::new($0)"
    let v44 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let v45 : string = "leptos::prelude::AnyView::from($0)"
    let v46 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "dl"
    let v48 : string = "<" + v47 + " " + v14 + ">move || { v46 }</" + v47 + ">"
    let v49 : string = "leptos::prelude::view! { " + v48 + " }"
    let v50 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v50 |> unbox
    let v52 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : Vec<leptos_prelude_AnyView_> = method173(v53)
    let v55 : string = "leptos::prelude::Fragment::new($0)"
    let v56 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v54 v55 
    v56
and closure353 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_4 -> (* Settings *)
        true
    | _ ->
        false
and method272 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> bool) =
    closure353(v0)
and closure354 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_3 -> (* Transactions *)
        true
    | _ ->
        false
and method273 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> bool) =
    closure354(v0)
and closure355 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_2 -> (* Lists *)
        true
    | _ ->
        false
and method274 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> bool) =
    closure355(v0)
and closure356 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_1(v3) -> (* Dice *)
        match v3 with
        | US20_0 -> (* Dice' *)
            true
        | _ ->
            false
    | _ ->
        false
and method275 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> bool) =
    closure356(v0)
and method276 (v0 : leptos_prelude_AnyView_, v1 : leptos_prelude_AnyView_, v2 : leptos_prelude_AnyView_, v3 : leptos_prelude_AnyView_) : Vec<leptos_prelude_AnyView_> =
    let v4 : leptos_prelude_AnyView_ = method174(v3)
    let v5 : string = "v4"
    let v6 : string = ""
    let v7 : string = v5 + v6 
    let v8 : string = v7 + v6 
    let v9 : leptos_prelude_AnyView_ = method174(v2)
    let v10 : string = "v9"
    let v11 : string = ", "
    let v12 : string = v10 + v11 
    let v13 : string = v12 + v8 
    let v14 : leptos_prelude_AnyView_ = method174(v1)
    let v15 : string = "v14"
    let v16 : string = v15 + v11 
    let v17 : string = v16 + v13 
    let v18 : leptos_prelude_AnyView_ = method174(v0)
    let v19 : string = "v18"
    let v20 : string = v19 + v11 
    let v21 : string = v20 + v17 
    let v22 : string = "vec![" + v21 + "]"
    let v23 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v22 
    v23
and closure357 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure358 (v0 : leptos_prelude_Memo<string>) () : std_string_String =
    let v1 : string = $"$0()"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "settings"
    let v4 : string = v2 + "#/" + v3 + ""
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    v48
and closure359 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_4 -> (* Settings *)
        true
    | _ ->
        false
and closure360 (v0 : leptos_prelude_ReadSignal<US19>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US19_4 -> (* Settings *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and closure361 (v0 : leptos_prelude_Memo<string>) () : std_string_String =
    let v1 : string = $"$0()"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "transactions"
    let v4 : string = v2 + "#/" + v3 + ""
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    v48
and closure362 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_3 -> (* Transactions *)
        true
    | _ ->
        false
and closure363 (v0 : leptos_prelude_ReadSignal<US19>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US19_3 -> (* Transactions *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and closure364 (v0 : leptos_prelude_Memo<string>) () : std_string_String =
    let v1 : string = $"$0()"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "lists"
    let v4 : string = v2 + "#/" + v3 + ""
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    v48
and closure365 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_2 -> (* Lists *)
        true
    | _ ->
        false
and closure366 (v0 : leptos_prelude_ReadSignal<US19>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US19_2 -> (* Lists *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and closure367 (v0 : leptos_prelude_Memo<string>) () : std_string_String =
    let v1 : string = $"$0()"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "dice"
    let v4 : string = v2 + "#/" + v3 + ""
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    v48
and closure368 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_1(v3) -> (* Dice *)
        match v3 with
        | US20_0 -> (* Dice' *)
            true
        | _ ->
            false
    | _ ->
        false
and closure369 (v0 : leptos_prelude_ReadSignal<US19>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : bool =
        match v2 with
        | US19_1(v3) -> (* Dice *)
            match v3 with
            | US20_0 -> (* Dice' *)
                true
            | _ ->
                false
        | _ ->
            false
    if v5 then
        let v6 : string = "border-grey-200 text-grey-900"
        let v7 : string = "r#\"" + v6 + "\"#"
        let v8 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v7 
        v8
    else
        let v9 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v10 : string = "r#\"" + v9 + "\"#"
        let v11 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v10 
        v11
and closure5 () (v0 : int32) : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> =
    let v1 : string = "home.render () / router: " + string v0 + ""
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v5 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "$0.unwrap()"
    let v7 : Heap2 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "state_core.use_database (1)"
    let v9 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> = method6()
    let v12 : string = "state_core.use_core_database (1)"
    let v13 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_Resource<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, US3> = method13(v11)
    let v16 : string = "$0"
    let v17 : (unit -> unit) = closure25(v7, v15)
    let v18 : (unit -> unit) = Fable.Core.RustInterop.emitRustExpr v17 v16 
    let v19 : string = "true; leptos::prelude::Effect::new(move |_| { v18(()) })"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0"
    let v22 : (unit -> std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>) = closure40(v7)
    let v23 : (unit -> std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>) = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "leptos::prelude::Memo::new(move |_| { v23(()) })"
    let v25 : leptos_prelude_Memo<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = $"leptos::prelude::signal($0)"
    let struct (v27 : leptos_prelude_ReadSignal<bool>, v28 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v26 
    let v29 : string = "Box::pin($0)"
    let v30 : (Heap3 -> std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>) = closure41(v11)
    let v31 : std_pin_Pin<Box<(Heap3 -> std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>)>> = Fable.Core.RustInterop.emitRustExpr v30 v29 
    let v32 : string = "leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap3>| $0(value.clone())))"
    let v33 : leptos_prelude_Action<Heap3, unit> = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "$0"
    let v35 : (unit -> unit) = closure42(v7, v25, v28, v27, v33)
    let v36 : (unit -> unit) = Fable.Core.RustInterop.emitRustExpr v35 v34 
    let v37 : string = "true; leptos::prelude::Effect::new(move |_| { v36(()) })"
    let v38 : bool = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "class=\"flex flex-1\""
    let v40 : (unit -> bool) = method58(v7)
    let v41 : string = "class:dark"
    let v42 : string = "" + v41 + "={move || v40()}"
    let v43 : string = ""
    let v44 : string = " " + v39 + v43 + ""
    let v45 : string = " " + v42 + v44 + ""
    let v46 : string = "content.render ()"
    let v47 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "leptos_router::hooks::use_location()"
    let v50 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = "std::sync::Arc::new(leptos_router::hooks::use_navigate())"
    let v52 : std_sync_Arc<Dyn<ActionFn2<Ref<Str>, leptos_router_NavigateOptions>>> = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : string = "leptos_router::hooks::use_location()"
    let v54 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v53 
    let v55 : string = "$0"
    let v56 : (unit -> string) = closure46(v54)
    let v57 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v56 v55 
    let v58 : string = "leptos::prelude::Memo::new(move |_| { v57(()) })"
    let v59 : leptos_prelude_Memo<string> = Fable.Core.RustInterop.emitRustExpr () v58 
    let v60 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v61 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v60 
    let v62 : string = "$0.unwrap()"
    let v63 : Heap2 = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : string = $"leptos::prelude::signal($0)"
    let v65 : US19 = US19_0
    let struct (v66 : leptos_prelude_ReadSignal<US19>, v67 : leptos_prelude_WriteSignal<US19>) = Fable.Core.RustInterop.emitRustExpr v65 v64 
    let v68 : string = $"leptos::prelude::signal($0)"
    let struct (v69 : leptos_prelude_ReadSignal<bool>, v70 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v68 
    let v71 : string = "$0"
    let v72 : (unit -> unit) = closure47(v50, v52, v59, v63, v70, v69)
    let v73 : (unit -> unit) = Fable.Core.RustInterop.emitRustExpr v72 v71 
    let v74 : string = "true; leptos::prelude::Effect::new(move |_| { v73(()) })"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "$0"
    let v77 : (unit -> unit) = closure48(v50, v67)
    let v78 : (unit -> unit) = Fable.Core.RustInterop.emitRustExpr v77 v76 
    let v79 : string = "true; leptos::prelude::Effect::new(move |_| { v78(()) })"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : string = "class=\"flex flex-1 max-[100px]:[overflow-x:auto]\""
    let v82 : string = " " + v81 + v43 + ""
    let v83 : string = "class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\""
    let v84 : string = " " + v83 + v43 + ""
    let v85 : string = "class=\"flex flex-1 flex-col [overflow:hidden]\""
    let v86 : string = " " + v85 + v43 + ""
    let v87 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v88 : US19 = Fable.Core.RustInterop.emitRustExpr v66 v87 
    let v2046 : US23 =
        match v88 with
        | US19_1(v89) -> (* Dice *)
            let v90 : string = "dice_view.render (1)"
            let v91 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v92 : bool = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v94 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v93 
            let v95 : string = "$0.unwrap()"
            let v96 : Heap2 = Fable.Core.RustInterop.emitRustExpr v94 v95 
            let v97 : string = "use_transactions.render (1)"
            let v98 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v99 : bool = Fable.Core.RustInterop.emitRustExpr v97 v98 
            let v100 : string = "$0"
            let v101 : (unit -> Vec<string>) = closure51(v96)
            let v102 : (unit -> Vec<string>) = Fable.Core.RustInterop.emitRustExpr v101 v100 
            let v103 : string = "leptos::prelude::Memo::new(move |_| { v102(()) })"
            let v104 : leptos_prelude_Memo<Vec<string>> = Fable.Core.RustInterop.emitRustExpr () v103 
            let v105 : string = "$0"
            let v106 : (unit -> (struct (string * US24 * string * bool * bool) [])) = closure56(v104)
            let v107 : (unit -> (struct (string * US24 * string * bool * bool) [])) = Fable.Core.RustInterop.emitRustExpr v106 v105 
            let v108 : string = "leptos::prelude::Memo::new(move |_| { v107(()) })"
            let v109 : leptos_prelude_Memo<(struct (string * US24 * string * bool * bool) [])> = Fable.Core.RustInterop.emitRustExpr () v108 
            let v110 : string = "$0"
            let v111 : (unit -> Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>) = closure58(v96, v104)
            let v112 : (unit -> Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>) = Fable.Core.RustInterop.emitRustExpr v111 v110 
            let v113 : string = "leptos::prelude::Memo::new(move |_| { v112(()) })"
            let v114 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>> = Fable.Core.RustInterop.emitRustExpr () v113 
            let v115 : string = "$0"
            let v116 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = closure61(v114)
            let v117 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v116 v115 
            let v118 : string = "leptos::prelude::Memo::new(move |_| { v117(()) })"
            let v119 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v118 
            let v120 : string = "$0"
            let v121 : (unit -> (string [])) = closure63(v114)
            let v122 : (unit -> (string [])) = Fable.Core.RustInterop.emitRustExpr v121 v120 
            let v123 : string = "leptos::prelude::Memo::new(move |_| { v122(()) })"
            let v124 : leptos_prelude_Memo<(string [])> = Fable.Core.RustInterop.emitRustExpr () v123 
            let v125 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = closure66()
            let v126 : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = method75(v119, v125)
            let v127 : string = $"%A{v126}"
            let v130 : string = "use_transactions.render (7) / root func0 / result: " + string v127 + ""
            let v131 : int64 = 200L
            let v132 : string = method10(v131, v130)
            let v133 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v134 : bool = Fable.Core.RustInterop.emitRustExpr v132 v133 
            let v135 : string = "$0"
            let v136 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = closure98(v124, v126)
            let v137 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v136 v135 
            let v138 : string = "leptos::prelude::Memo::new(move |_| { v137(()) })"
            let v139 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v138 
            let v140 : string = "$0"
            let v141 : (unit -> Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>) = closure115(v139)
            let v142 : (unit -> Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v141 v140 
            let v143 : string = "leptos::prelude::Memo::new(move |_| { v142(()) })"
            let v144 : leptos_prelude_Memo<Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v143 
            let v145 : string = "$0"
            let v146 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = closure122(v144)
            let v147 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v146 v145 
            let v148 : string = "leptos::prelude::Memo::new(move |_| { v147(()) })"
            let v149 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v148 
            let v150 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = closure126()
            let v151 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = method149(v149, v150)
            let v152 : string = $"%A{v151}"
            let v155 : string = "use_transactions.render (12) / rpc_response func0 / result: " + string v152 + ""
            let v156 : int64 = 200L
            let v157 : string = method10(v156, v155)
            let v158 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v159 : bool = Fable.Core.RustInterop.emitRustExpr v157 v158 
            let v160 : string = "Box::pin($0)"
            let v161 : (Heap6 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<US58, std_string_String>>>>>) = closure144()
            let v162 : std_pin_Pin<Box<(Heap6 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<US58, std_string_String>>>>>)>> = Fable.Core.RustInterop.emitRustExpr v161 v160 
            let v163 : string = "leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap6>| $0(value.clone())))"
            let v164 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v162 v163 
            let v165 : string = "$0"
            let v166 : (unit -> Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) = closure149(v164)
            let v167 : (unit -> Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v166 v165 
            let v168 : string = "leptos::prelude::Memo::new(move |_| { v167(()) })"
            let v169 : leptos_prelude_Memo<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v168 
            let v170 : string = "$0"
            let v171 : (unit -> string option) = closure154(v169)
            let v172 : (unit -> string option) = Fable.Core.RustInterop.emitRustExpr v171 v170 
            let v173 : string = "leptos::prelude::Memo::new(move |_| { v172(()) })"
            let v174 : leptos_prelude_Memo<string option> = Fable.Core.RustInterop.emitRustExpr () v173 
            let v175 : string = "$0"
            let v176 : (unit -> US32) = closure159(v96)
            let v177 : (unit -> US32) = Fable.Core.RustInterop.emitRustExpr v176 v175 
            let v178 : string = "leptos::prelude::Memo::new(move |_| { v177(()) })"
            let v179 : leptos_prelude_Memo<US32> = Fable.Core.RustInterop.emitRustExpr () v178 
            let v180 : string = "$0"
            let v181 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>) = closure160(v96)
            let v182 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>) = Fable.Core.RustInterop.emitRustExpr v181 v180 
            let v183 : string = "leptos::prelude::Memo::new(move |_| { v182(()) })"
            let v184 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>> = Fable.Core.RustInterop.emitRustExpr () v183 
            let v185 : string = "$0"
            let v186 : (unit -> Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>) = closure163(v184)
            let v187 : (unit -> Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>) = Fable.Core.RustInterop.emitRustExpr v186 v185 
            let v188 : string = "leptos::prelude::Memo::new(move |_| { v187(()) })"
            let v189 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> = Fable.Core.RustInterop.emitRustExpr () v188 
            let v190 : Vec<leptos_prelude_AnyView_> = method172()
            let v191 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v192 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v190 v191 
            let v193 : string = "class=\"flex flex-col [position:relative]\""
            let v194 : string = " " + v193 + v43 + ""
            let v195 : string = "$0"
            let v196 : (unit -> string) = closure166()
            let v197 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v196 v195 
            let v198 : string = "$0"
            let v199 : (unit -> bool) = closure167()
            let v200 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v199 v198 
            let v201 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v202 : string = " " + v201 + v43 + ""
            let v203 : Vec<leptos_prelude_AnyView_> = method173(v192)
            let v204 : string = "leptos::prelude::Fragment::new($0)"
            let v205 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v203 v204 
            let v206 : string = "leptos::prelude::AnyView::from($0)"
            let v207 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v205 v206 
            let v208 : string = "div"
            let v209 : string = "<" + v208 + " " + v202 + ">move || { v207 }</" + v208 + ">"
            let v210 : string = "leptos::prelude::view! { " + v209 + " }"
            let v211 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v210 
            let v212 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v211 |> unbox
            let v213 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v214 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v212 v213 
            let v215 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v197(())"
            let v216 : string = "open=move || v200(())"
            let v217 : string = " " + v215 + v43 + ""
            let v218 : string = " " + v216 + v217 + ""
            let v219 : string = "$0"
            let v220 : (unit -> string) = closure168()
            let v221 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v220 v219 
            let v222 : string = "$0"
            let v223 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure169()
            let v224 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v223 v222 
            let v225 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v224(()) + \" \" + &v221(())"
            let v226 : string = " " + v225 + v43 + ""
            let v227 : string = "class=\"flex items-center gap-2\""
            let v228 : string = " " + v227 + v43 + ""
            let v229 : (unit -> string) = method175()
            let v230 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v231 : string = " " + v230 + v43 + ""
            let v232 : string = v229 ()
            let v233 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v234 : string = "&*$0"
            let v235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v232 v234 
            let _v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v236 : string = "&*$0"
            let v237 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v232 v236 
            let _v233 = v237 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v238 : string = "&*$0"
            let v239 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v232 v238 
            let _v233 = v239 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v240 : Ref<Str> = v232 |> unbox<Ref<Str>>
            let _v233 = v240 
            #endif
#if FABLE_COMPILER_PYTHON
            let v243 : Ref<Str> = v232 |> unbox<Ref<Str>>
            let _v233 = v243 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v246 : Ref<Str> = v232 |> unbox<Ref<Str>>
            let _v233 = v246 
            #endif
#else
            let v249 : Ref<Str> = v232 |> unbox<Ref<Str>>
            let _v233 = v249 
            #endif
            let v252 : Ref<Str> = _v233 
            let v257 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v258 : string = "String::from($0)"
            let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v252 v258 
            let _v257 = v259 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v260 : string = "String::from($0)"
            let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v252 v260 
            let _v257 = v261 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v262 : string = "String::from($0)"
            let v263 : std_string_String = Fable.Core.RustInterop.emitRustExpr v252 v262 
            let _v257 = v263 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v264 : std_string_String = v252 |> unbox<std_string_String>
            let _v257 = v264 
            #endif
#if FABLE_COMPILER_PYTHON
            let v267 : std_string_String = v252 |> unbox<std_string_String>
            let _v257 = v267 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v270 : std_string_String = v252 |> unbox<std_string_String>
            let _v257 = v270 
            #endif
#else
            let v273 : std_string_String = v252 |> unbox<std_string_String>
            let _v257 = v273 
            #endif
            let v276 : std_string_String = _v257 
            let v281 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v282 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v276 v281 
            let v283 : Vec<leptos_prelude_AnyView_> = method173(v282)
            let v284 : string = "leptos::prelude::Fragment::new($0)"
            let v285 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v283 v284 
            let v286 : string = "leptos::prelude::AnyView::from($0)"
            let v287 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v285 v286 
            let v288 : string = "span"
            let v289 : string = "<" + v288 + " " + v231 + ">move || { v287 }</" + v288 + ">"
            let v290 : string = "leptos::prelude::view! { " + v289 + " }"
            let v291 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v290 
            let v292 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v291 |> unbox
            let v293 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v294 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v292 v293 
            let v295 : Vec<leptos_prelude_AnyView_> = method173(v294)
            let v296 : string = "leptos::prelude::Fragment::new($0)"
            let v297 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v295 v296 
            let v298 : string = "leptos::prelude::AnyView::from($0)"
            let v299 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v297 v298 
            let v300 : string = "<" + v208 + " " + v228 + ">move || { v299 }</" + v208 + ">"
            let v301 : string = "leptos::prelude::view! { " + v300 + " }"
            let v302 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v301 
            let v303 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v302 |> unbox
            let v304 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v305 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v303 v304 
            let v306 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v307 : string = " " + v306 + v43 + ""
            let v308 : string = "$0"
            let v309 : (unit -> string) = closure171()
            let v310 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v309 v308 
            let v311 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v312 : string = "viewBox=\"0 0 20 20\""
            let v313 : string = "fill=\"currentColor\""
            let v314 : string = "class=move || \" \".to_owned() + &v310(())"
            let v315 : string = " " + v311 + v43 + ""
            let v316 : string = " " + v312 + v315 + ""
            let v317 : string = " " + v313 + v316 + ""
            let v318 : string = " " + v314 + v317 + ""
            let v319 : string = "fill-rule=\"evenodd\""
            let v320 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v321 : string = "clip-rule=\"evenodd\""
            let v322 : string = " " + v319 + v43 + ""
            let v323 : string = " " + v320 + v322 + ""
            let v324 : string = " " + v321 + v323 + ""
            let v325 : Vec<leptos_prelude_AnyView_> = method172()
            let v326 : string = "leptos::prelude::Fragment::new($0)"
            let v327 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v325 v326 
            let v328 : string = "leptos::prelude::AnyView::from($0)"
            let v329 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v327 v328 
            let v330 : string = "path"
            let v331 : string = "<" + v330 + " " + v324 + ">move || { v329 }</" + v330 + ">"
            let v332 : string = "leptos::prelude::view! { " + v331 + " }"
            let v333 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v332 
            let v334 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v333 |> unbox
            let v335 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v336 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v334 v335 
            let v337 : Vec<leptos_prelude_AnyView_> = method173(v336)
            let v338 : string = "leptos::prelude::Fragment::new($0)"
            let v339 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v337 v338 
            let v340 : string = "leptos::prelude::AnyView::from($0)"
            let v341 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v339 v340 
            let v342 : string = "svg"
            let v343 : string = "<" + v342 + " " + v318 + ">move || { v341 }</" + v342 + ">"
            let v344 : string = "leptos::prelude::view! { " + v343 + " }"
            let v345 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v344 
            let v346 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v345 |> unbox
            let v347 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v348 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v346 v347 
            let v349 : Vec<leptos_prelude_AnyView_> = method173(v348)
            let v350 : string = "leptos::prelude::Fragment::new($0)"
            let v351 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v349 v350 
            let v352 : string = "leptos::prelude::AnyView::from($0)"
            let v353 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v351 v352 
            let v354 : string = "<" + v288 + " " + v307 + ">move || { v353 }</" + v288 + ">"
            let v355 : string = "leptos::prelude::view! { " + v354 + " }"
            let v356 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v355 
            let v357 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v356 |> unbox
            let v358 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v359 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v357 v358 
            let v360 : Vec<leptos_prelude_AnyView_> = method176(v305, v359)
            let v361 : string = "leptos::prelude::Fragment::new($0)"
            let v362 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v360 v361 
            let v363 : string = "leptos::prelude::AnyView::from($0)"
            let v364 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v362 v363 
            let v365 : string = "summary"
            let v366 : string = "<" + v365 + " " + v226 + ">move || { v364 }</" + v365 + ">"
            let v367 : string = "leptos::prelude::view! { " + v366 + " }"
            let v368 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v367 
            let v369 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v368 |> unbox
            let v370 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v371 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v369 v370 
            let v372 : string = "class=\"flex flex-1 flex-col\""
            let v373 : string = " " + v372 + v43 + ""
            let v374 : string = "Func0::new(move || $0())"
            let v375 : (unit -> leptos_dom_Fragment) = closure172(v96, v164, v174, v179, v189)
            let v376 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v375 v374 
            let v377 : Func0<leptos_dom_Fragment> = method184(v376)
            let v378 : string = "(move || v377())()"
            let v379 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v378 
            let v380 : string = "leptos::prelude::AnyView::from($0)"
            let v381 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v379 v380 
            let v382 : string = "<" + v208 + " " + v373 + ">move || { v381 }</" + v208 + ">"
            let v383 : string = "leptos::prelude::view! { " + v382 + " }"
            let v384 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v383 
            let v385 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v384 |> unbox
            let v386 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v387 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v385 v386 
            let v388 : Vec<leptos_prelude_AnyView_> = method176(v371, v387)
            let v389 : string = "leptos::prelude::Fragment::new($0)"
            let v390 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v388 v389 
            let v391 : string = "leptos::prelude::AnyView::from($0)"
            let v392 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v390 v391 
            let v393 : string = "details"
            let v394 : string = "<" + v393 + " " + v218 + ">move || { v392 }</" + v393 + ">"
            let v395 : string = "leptos::prelude::view! { " + v394 + " }"
            let v396 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v395 
            let v397 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v396 |> unbox
            let v398 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v399 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v397 v398 
            let v400 : Vec<leptos_prelude_AnyView_> = method176(v214, v399)
            let v401 : string = "leptos::prelude::Fragment::new($0)"
            let v402 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v400 v401 
            let v403 : string = "leptos::prelude::AnyView::from($0)"
            let v404 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v402 v403 
            let v405 : string = "<" + v208 + " " + v194 + ">move || { v404 }</" + v208 + ">"
            let v406 : string = "leptos::prelude::view! { " + v405 + " }"
            let v407 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v406 
            let v408 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v407 |> unbox
            let v409 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v410 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v408 v409 
            let v411 : Vec<leptos_prelude_AnyView_> = method172()
            let v412 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v413 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v411 v412 
            let v414 : string = "class=\"flex flex-col [position:relative]\""
            let v415 : string = " " + v414 + v43 + ""
            let v416 : string = "$0"
            let v417 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v196 v416 
            let v418 : string = "$0"
            let v419 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v199 v418 
            let v420 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v421 : string = " " + v420 + v43 + ""
            let v422 : Vec<leptos_prelude_AnyView_> = method173(v413)
            let v423 : string = "leptos::prelude::Fragment::new($0)"
            let v424 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v422 v423 
            let v425 : string = "leptos::prelude::AnyView::from($0)"
            let v426 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v424 v425 
            let v427 : string = "<" + v208 + " " + v421 + ">move || { v426 }</" + v208 + ">"
            let v428 : string = "leptos::prelude::view! { " + v427 + " }"
            let v429 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v428 
            let v430 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v429 |> unbox
            let v431 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v432 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v430 v431 
            let v433 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v417(())"
            let v434 : string = "open=move || v419(())"
            let v435 : string = " " + v433 + v43 + ""
            let v436 : string = " " + v434 + v435 + ""
            let v437 : string = "$0"
            let v438 : (unit -> string) = closure189()
            let v439 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v438 v437 
            let v440 : string = "$0"
            let v441 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure190()
            let v442 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v441 v440 
            let v443 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v442(()) + \" \" + &v439(())"
            let v444 : string = " " + v443 + v43 + ""
            let v445 : string = "class=\"flex items-center gap-2\""
            let v446 : string = " " + v445 + v43 + ""
            let v447 : (unit -> string) = method187()
            let v448 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v449 : string = " " + v448 + v43 + ""
            let v450 : string = v447 ()
            let v451 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v452 : string = "&*$0"
            let v453 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v450 v452 
            let _v451 = v453 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v454 : string = "&*$0"
            let v455 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v450 v454 
            let _v451 = v455 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v456 : string = "&*$0"
            let v457 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v450 v456 
            let _v451 = v457 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v458 : Ref<Str> = v450 |> unbox<Ref<Str>>
            let _v451 = v458 
            #endif
#if FABLE_COMPILER_PYTHON
            let v461 : Ref<Str> = v450 |> unbox<Ref<Str>>
            let _v451 = v461 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v464 : Ref<Str> = v450 |> unbox<Ref<Str>>
            let _v451 = v464 
            #endif
#else
            let v467 : Ref<Str> = v450 |> unbox<Ref<Str>>
            let _v451 = v467 
            #endif
            let v470 : Ref<Str> = _v451 
            let v475 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v476 : string = "String::from($0)"
            let v477 : std_string_String = Fable.Core.RustInterop.emitRustExpr v470 v476 
            let _v475 = v477 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v478 : string = "String::from($0)"
            let v479 : std_string_String = Fable.Core.RustInterop.emitRustExpr v470 v478 
            let _v475 = v479 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v480 : string = "String::from($0)"
            let v481 : std_string_String = Fable.Core.RustInterop.emitRustExpr v470 v480 
            let _v475 = v481 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v482 : std_string_String = v470 |> unbox<std_string_String>
            let _v475 = v482 
            #endif
#if FABLE_COMPILER_PYTHON
            let v485 : std_string_String = v470 |> unbox<std_string_String>
            let _v475 = v485 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v488 : std_string_String = v470 |> unbox<std_string_String>
            let _v475 = v488 
            #endif
#else
            let v491 : std_string_String = v470 |> unbox<std_string_String>
            let _v475 = v491 
            #endif
            let v494 : std_string_String = _v475 
            let v499 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v500 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v494 v499 
            let v501 : Vec<leptos_prelude_AnyView_> = method173(v500)
            let v502 : string = "leptos::prelude::Fragment::new($0)"
            let v503 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v501 v502 
            let v504 : string = "leptos::prelude::AnyView::from($0)"
            let v505 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v503 v504 
            let v506 : string = "<" + v288 + " " + v449 + ">move || { v505 }</" + v288 + ">"
            let v507 : string = "leptos::prelude::view! { " + v506 + " }"
            let v508 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v507 
            let v509 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v508 |> unbox
            let v510 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v511 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v509 v510 
            let v512 : Vec<leptos_prelude_AnyView_> = method173(v511)
            let v513 : string = "leptos::prelude::Fragment::new($0)"
            let v514 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v512 v513 
            let v515 : string = "leptos::prelude::AnyView::from($0)"
            let v516 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v514 v515 
            let v517 : string = "<" + v208 + " " + v446 + ">move || { v516 }</" + v208 + ">"
            let v518 : string = "leptos::prelude::view! { " + v517 + " }"
            let v519 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v518 
            let v520 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v519 |> unbox
            let v521 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v522 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v520 v521 
            let v523 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v524 : string = " " + v523 + v43 + ""
            let v525 : string = "$0"
            let v526 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v309 v525 
            let v527 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v528 : string = "viewBox=\"0 0 20 20\""
            let v529 : string = "fill=\"currentColor\""
            let v530 : string = "class=move || \" \".to_owned() + &v526(())"
            let v531 : string = " " + v527 + v43 + ""
            let v532 : string = " " + v528 + v531 + ""
            let v533 : string = " " + v529 + v532 + ""
            let v534 : string = " " + v530 + v533 + ""
            let v535 : string = "fill-rule=\"evenodd\""
            let v536 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v537 : string = "clip-rule=\"evenodd\""
            let v538 : string = " " + v535 + v43 + ""
            let v539 : string = " " + v536 + v538 + ""
            let v540 : string = " " + v537 + v539 + ""
            let v541 : Vec<leptos_prelude_AnyView_> = method172()
            let v542 : string = "leptos::prelude::Fragment::new($0)"
            let v543 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v541 v542 
            let v544 : string = "leptos::prelude::AnyView::from($0)"
            let v545 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v543 v544 
            let v546 : string = "<" + v330 + " " + v540 + ">move || { v545 }</" + v330 + ">"
            let v547 : string = "leptos::prelude::view! { " + v546 + " }"
            let v548 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v547 
            let v549 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v548 |> unbox
            let v550 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v551 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v549 v550 
            let v552 : Vec<leptos_prelude_AnyView_> = method173(v551)
            let v553 : string = "leptos::prelude::Fragment::new($0)"
            let v554 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v552 v553 
            let v555 : string = "leptos::prelude::AnyView::from($0)"
            let v556 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v554 v555 
            let v557 : string = "<" + v342 + " " + v534 + ">move || { v556 }</" + v342 + ">"
            let v558 : string = "leptos::prelude::view! { " + v557 + " }"
            let v559 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v558 
            let v560 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v559 |> unbox
            let v561 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v562 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v560 v561 
            let v563 : Vec<leptos_prelude_AnyView_> = method173(v562)
            let v564 : string = "leptos::prelude::Fragment::new($0)"
            let v565 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v563 v564 
            let v566 : string = "leptos::prelude::AnyView::from($0)"
            let v567 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v565 v566 
            let v568 : string = "<" + v288 + " " + v524 + ">move || { v567 }</" + v288 + ">"
            let v569 : string = "leptos::prelude::view! { " + v568 + " }"
            let v570 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v569 
            let v571 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v570 |> unbox
            let v572 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v573 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v571 v572 
            let v574 : Vec<leptos_prelude_AnyView_> = method176(v522, v573)
            let v575 : string = "leptos::prelude::Fragment::new($0)"
            let v576 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v574 v575 
            let v577 : string = "leptos::prelude::AnyView::from($0)"
            let v578 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v576 v577 
            let v579 : string = "<" + v365 + " " + v444 + ">move || { v578 }</" + v365 + ">"
            let v580 : string = "leptos::prelude::view! { " + v579 + " }"
            let v581 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v580 
            let v582 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v581 |> unbox
            let v583 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v584 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v582 v583 
            let v585 : string = "class=\"flex flex-1 flex-col\""
            let v586 : string = " " + v585 + v43 + ""
            let v587 : string = "Func0::new(move || $0())"
            let v588 : (unit -> leptos_dom_Fragment) = closure192(v151, v139, v114)
            let v589 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v588 v587 
            let v590 : Func0<leptos_dom_Fragment> = method184(v589)
            let v591 : string = "(move || v590())()"
            let v592 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v591 
            let v593 : string = "leptos::prelude::AnyView::from($0)"
            let v594 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v592 v593 
            let v595 : string = "<" + v208 + " " + v586 + ">move || { v594 }</" + v208 + ">"
            let v596 : string = "leptos::prelude::view! { " + v595 + " }"
            let v597 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v596 
            let v598 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v597 |> unbox
            let v599 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v600 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v598 v599 
            let v601 : Vec<leptos_prelude_AnyView_> = method176(v584, v600)
            let v602 : string = "leptos::prelude::Fragment::new($0)"
            let v603 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v601 v602 
            let v604 : string = "leptos::prelude::AnyView::from($0)"
            let v605 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v603 v604 
            let v606 : string = "<" + v393 + " " + v436 + ">move || { v605 }</" + v393 + ">"
            let v607 : string = "leptos::prelude::view! { " + v606 + " }"
            let v608 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v607 
            let v609 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v608 |> unbox
            let v610 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v611 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v609 v610 
            let v612 : Vec<leptos_prelude_AnyView_> = method176(v432, v611)
            let v613 : string = "leptos::prelude::Fragment::new($0)"
            let v614 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v612 v613 
            let v615 : string = "leptos::prelude::AnyView::from($0)"
            let v616 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v614 v615 
            let v617 : string = "<" + v208 + " " + v415 + ">move || { v616 }</" + v208 + ">"
            let v618 : string = "leptos::prelude::view! { " + v617 + " }"
            let v619 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v618 
            let v620 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v619 |> unbox
            let v621 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v622 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v620 v621 
            let v623 : Vec<leptos_prelude_AnyView_> = method176(v410, v622)
            let v624 : string = "leptos::prelude::Fragment::new($0)"
            let v625 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v623 v624 
            US23_0(v625)
        | US19_2 -> (* Lists *)
            let v627 : string = "lists_view.render ()"
            let v628 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v629 : bool = Fable.Core.RustInterop.emitRustExpr v627 v628 
            let v630 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v631 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v630 
            let v632 : string = "$0.unwrap()"
            let v633 : Heap2 = Fable.Core.RustInterop.emitRustExpr v631 v632 
            let v634 : string = "???"
            let v635 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v636 : string = "&*$0"
            let v637 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v634 v636 
            let _v635 = v637 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v638 : string = "&*$0"
            let v639 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v634 v638 
            let _v635 = v639 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v640 : string = "&*$0"
            let v641 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v634 v640 
            let _v635 = v641 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v642 : Ref<Str> = v634 |> unbox<Ref<Str>>
            let _v635 = v642 
            #endif
#if FABLE_COMPILER_PYTHON
            let v645 : Ref<Str> = v634 |> unbox<Ref<Str>>
            let _v635 = v645 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v648 : Ref<Str> = v634 |> unbox<Ref<Str>>
            let _v635 = v648 
            #endif
#else
            let v651 : Ref<Str> = v634 |> unbox<Ref<Str>>
            let _v635 = v651 
            #endif
            let v654 : Ref<Str> = _v635 
            let v659 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v660 : string = "String::from($0)"
            let v661 : std_string_String = Fable.Core.RustInterop.emitRustExpr v654 v660 
            let _v659 = v661 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v662 : string = "String::from($0)"
            let v663 : std_string_String = Fable.Core.RustInterop.emitRustExpr v654 v662 
            let _v659 = v663 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v664 : string = "String::from($0)"
            let v665 : std_string_String = Fable.Core.RustInterop.emitRustExpr v654 v664 
            let _v659 = v665 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v666 : std_string_String = v654 |> unbox<std_string_String>
            let _v659 = v666 
            #endif
#if FABLE_COMPILER_PYTHON
            let v669 : std_string_String = v654 |> unbox<std_string_String>
            let _v659 = v669 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v672 : std_string_String = v654 |> unbox<std_string_String>
            let _v659 = v672 
            #endif
#else
            let v675 : std_string_String = v654 |> unbox<std_string_String>
            let _v659 = v675 
            #endif
            let v678 : std_string_String = _v659 
            let v683 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v684 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v678 v683 
            let v685 : Vec<leptos_prelude_AnyView_> = method173(v684)
            let v686 : string = "leptos::prelude::Fragment::new($0)"
            let v687 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v685 v686 
            US23_0(v687)
        | US19_4 -> (* Settings *)
            let v1292 : string = "settings_view.render ()"
            let v1293 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1294 : bool = Fable.Core.RustInterop.emitRustExpr v1292 v1293 
            let v1295 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v1296 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v1295 
            let v1297 : string = "$0.unwrap()"
            let v1298 : Heap2 = Fable.Core.RustInterop.emitRustExpr v1296 v1297 
            let v1299 : string = "$0"
            let v1300 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) = closure198(v1298)
            let v1301 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) = Fable.Core.RustInterop.emitRustExpr v1300 v1299 
            let v1302 : string = "leptos::prelude::Memo::new(move |_| { v1301(()) })"
            let v1303 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>> = Fable.Core.RustInterop.emitRustExpr () v1302 
            let v1304 : string = $"leptos::prelude::signal($0)"
            let struct (v1305 : leptos_prelude_ReadSignal<int32>, v1306 : leptos_prelude_WriteSignal<int32>) = Fable.Core.RustInterop.emitRustExpr 0 v1304 
            let v1307 : string = "$0"
            let v1308 : (unit -> Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>) = closure201(v1303, v1305)
            let v1309 : (unit -> Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>) = Fable.Core.RustInterop.emitRustExpr v1308 v1307 
            let v1310 : string = "leptos::prelude::Memo::new(move |_| { v1309(()) })"
            let v1311 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>> = Fable.Core.RustInterop.emitRustExpr () v1310 
            let v1312 : string = "$0"
            let v1313 : (unit -> int32) = closure204(v1311)
            let v1314 : (unit -> int32) = Fable.Core.RustInterop.emitRustExpr v1313 v1312 
            let v1315 : string = "leptos::prelude::Memo::new(move |_| { v1314(()) })"
            let v1316 : leptos_prelude_Memo<int32> = Fable.Core.RustInterop.emitRustExpr () v1315 
            let v1317 : (unit -> unit) = closure205(v1298, v1303, v1306)
            let v1318 : string = "let v1317 = $0"
            Fable.Core.RustInterop.emitRustExpr v1317 v1318 
            let v1319 : string = "$0"
            let v1320 : (unit -> string) = closure210()
            let v1321 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1320 v1319 
            let v1322 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v1323 : string = "fill=\"none\""
            let v1324 : string = "viewBox=\"0 0 24 24\""
            let v1325 : string = "stroke-width=\"1.5\""
            let v1326 : string = "stroke=\"currentColor\""
            let v1327 : string = "class=move || \" \".to_owned() + &v1321(())"
            let v1328 : string = " " + v1322 + v43 + ""
            let v1329 : string = " " + v1323 + v1328 + ""
            let v1330 : string = " " + v1324 + v1329 + ""
            let v1331 : string = " " + v1325 + v1330 + ""
            let v1332 : string = " " + v1326 + v1331 + ""
            let v1333 : string = " " + v1327 + v1332 + ""
            let v1334 : string = "stroke-linecap=\"round\""
            let v1335 : string = "stroke-linejoin=\"round\""
            let v1336 : string = "d=\"M12 6v12m6-6H6\""
            let v1337 : string = " " + v1334 + v43 + ""
            let v1338 : string = " " + v1335 + v1337 + ""
            let v1339 : string = " " + v1336 + v1338 + ""
            let v1340 : Vec<leptos_prelude_AnyView_> = method172()
            let v1341 : string = "leptos::prelude::Fragment::new($0)"
            let v1342 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1340 v1341 
            let v1343 : string = "leptos::prelude::AnyView::from($0)"
            let v1344 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1342 v1343 
            let v1345 : string = "path"
            let v1346 : string = "<" + v1345 + " " + v1339 + ">move || { v1344 }</" + v1345 + ">"
            let v1347 : string = "leptos::prelude::view! { " + v1346 + " }"
            let v1348 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1347 
            let v1349 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v1348 |> unbox
            let v1350 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1351 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1349 v1350 
            let v1352 : Vec<leptos_prelude_AnyView_> = method173(v1351)
            let v1353 : string = "leptos::prelude::Fragment::new($0)"
            let v1354 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1352 v1353 
            let v1355 : string = "leptos::prelude::AnyView::from($0)"
            let v1356 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1354 v1355 
            let v1357 : string = "svg"
            let v1358 : string = "<" + v1357 + " " + v1333 + ">move || { v1356 }</" + v1357 + ">"
            let v1359 : string = "leptos::prelude::view! { " + v1358 + " }"
            let v1360 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1359 
            let v1361 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1360 |> unbox
            let v1362 : string = "on:click=move |_| v1317()"
            let v1363 : string = "aria-label=\"Add\""
            let v1364 : string = "$0"
            let v1365 : (unit -> std_string_String) = closure211()
            let v1366 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v1365 v1364 
            let v1367 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v1366(())"
            let v1368 : string = " " + v1367 + v43 + ""
            let v1369 : string = " " + v1362 + v1368 + ""
            let v1370 : string = " " + v1363 + v1369 + ""
            let v1371 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1372 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1361 v1371 
            let v1373 : Vec<leptos_prelude_AnyView_> = method173(v1372)
            let v1374 : string = "leptos::prelude::Fragment::new($0)"
            let v1375 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1373 v1374 
            let v1376 : string = "leptos::prelude::AnyView::from($0)"
            let v1377 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1375 v1376 
            let v1378 : string = "button"
            let v1379 : string = "<" + v1378 + " " + v1370 + ">move || { v1377 }</" + v1378 + ">"
            let v1380 : string = "leptos::prelude::view! { " + v1379 + " }"
            let v1381 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1380 
            let v1382 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v1381 |> unbox
            let v1383 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1384 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1382 v1383 
            let v1385 : Vec<leptos_prelude_AnyView_> = method172()
            let v1386 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1387 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1385 v1386 
            let v1388 : string = "class=\"flex flex-col [position:relative]\""
            let v1389 : string = " " + v1388 + v43 + ""
            let v1390 : string = "$0"
            let v1391 : (unit -> string) = closure166()
            let v1392 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1391 v1390 
            let v1393 : string = "$0"
            let v1394 : (unit -> bool) = closure167()
            let v1395 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v1394 v1393 
            let v1396 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v1397 : string = " " + v1396 + v43 + ""
            let v1398 : Vec<leptos_prelude_AnyView_> = method173(v1384)
            let v1399 : string = "leptos::prelude::Fragment::new($0)"
            let v1400 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1398 v1399 
            let v1401 : string = "leptos::prelude::AnyView::from($0)"
            let v1402 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1400 v1401 
            let v1403 : string = "div"
            let v1404 : string = "<" + v1403 + " " + v1397 + ">move || { v1402 }</" + v1403 + ">"
            let v1405 : string = "leptos::prelude::view! { " + v1404 + " }"
            let v1406 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1405 
            let v1407 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1406 |> unbox
            let v1408 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1409 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1407 v1408 
            let v1410 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v1392(())"
            let v1411 : string = "open=move || v1395(())"
            let v1412 : string = " " + v1410 + v43 + ""
            let v1413 : string = " " + v1411 + v1412 + ""
            let v1414 : string = "$0"
            let v1415 : (unit -> string) = closure212()
            let v1416 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1415 v1414 
            let v1417 : string = "$0"
            let v1418 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure213(v1384)
            let v1419 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v1418 v1417 
            let v1420 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v1419(()) + \" \" + &v1416(())"
            let v1421 : string = " " + v1420 + v43 + ""
            let v1422 : string = "class=\"flex items-center gap-2\""
            let v1423 : string = " " + v1422 + v43 + ""
            let v1424 : (unit -> string) = method200(v1384)
            let v1425 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v1426 : string = " " + v1425 + v43 + ""
            let v1427 : string = v1424 ()
            let v1428 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1429 : string = "&*$0"
            let v1430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1427 v1429 
            let _v1428 = v1430 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1431 : string = "&*$0"
            let v1432 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1427 v1431 
            let _v1428 = v1432 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1433 : string = "&*$0"
            let v1434 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1427 v1433 
            let _v1428 = v1434 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1435 : Ref<Str> = v1427 |> unbox<Ref<Str>>
            let _v1428 = v1435 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1438 : Ref<Str> = v1427 |> unbox<Ref<Str>>
            let _v1428 = v1438 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1441 : Ref<Str> = v1427 |> unbox<Ref<Str>>
            let _v1428 = v1441 
            #endif
#else
            let v1444 : Ref<Str> = v1427 |> unbox<Ref<Str>>
            let _v1428 = v1444 
            #endif
            let v1447 : Ref<Str> = _v1428 
            let v1452 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1453 : string = "String::from($0)"
            let v1454 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1453 
            let _v1452 = v1454 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1455 : string = "String::from($0)"
            let v1456 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1455 
            let _v1452 = v1456 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1457 : string = "String::from($0)"
            let v1458 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1447 v1457 
            let _v1452 = v1458 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1459 : std_string_String = v1447 |> unbox<std_string_String>
            let _v1452 = v1459 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1462 : std_string_String = v1447 |> unbox<std_string_String>
            let _v1452 = v1462 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1465 : std_string_String = v1447 |> unbox<std_string_String>
            let _v1452 = v1465 
            #endif
#else
            let v1468 : std_string_String = v1447 |> unbox<std_string_String>
            let _v1452 = v1468 
            #endif
            let v1471 : std_string_String = _v1452 
            let v1476 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v1477 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1471 v1476 
            let v1478 : Vec<leptos_prelude_AnyView_> = method173(v1477)
            let v1479 : string = "leptos::prelude::Fragment::new($0)"
            let v1480 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1478 v1479 
            let v1481 : string = "leptos::prelude::AnyView::from($0)"
            let v1482 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1480 v1481 
            let v1483 : string = "span"
            let v1484 : string = "<" + v1483 + " " + v1426 + ">move || { v1482 }</" + v1483 + ">"
            let v1485 : string = "leptos::prelude::view! { " + v1484 + " }"
            let v1486 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1485 
            let v1487 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1486 |> unbox
            let v1488 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1489 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1487 v1488 
            let v1490 : Vec<leptos_prelude_AnyView_> = method173(v1489)
            let v1491 : string = "leptos::prelude::Fragment::new($0)"
            let v1492 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1490 v1491 
            let v1493 : string = "leptos::prelude::AnyView::from($0)"
            let v1494 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1492 v1493 
            let v1495 : string = "<" + v1403 + " " + v1423 + ">move || { v1494 }</" + v1403 + ">"
            let v1496 : string = "leptos::prelude::view! { " + v1495 + " }"
            let v1497 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1496 
            let v1498 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1497 |> unbox
            let v1499 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1500 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1498 v1499 
            let v1501 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v1502 : string = " " + v1501 + v43 + ""
            let v1503 : string = "$0"
            let v1504 : (unit -> string) = closure171()
            let v1505 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1504 v1503 
            let v1506 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v1507 : string = "viewBox=\"0 0 20 20\""
            let v1508 : string = "fill=\"currentColor\""
            let v1509 : string = "class=move || \" \".to_owned() + &v1505(())"
            let v1510 : string = " " + v1506 + v43 + ""
            let v1511 : string = " " + v1507 + v1510 + ""
            let v1512 : string = " " + v1508 + v1511 + ""
            let v1513 : string = " " + v1509 + v1512 + ""
            let v1514 : string = "fill-rule=\"evenodd\""
            let v1515 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v1516 : string = "clip-rule=\"evenodd\""
            let v1517 : string = " " + v1514 + v43 + ""
            let v1518 : string = " " + v1515 + v1517 + ""
            let v1519 : string = " " + v1516 + v1518 + ""
            let v1520 : Vec<leptos_prelude_AnyView_> = method172()
            let v1521 : string = "leptos::prelude::Fragment::new($0)"
            let v1522 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1520 v1521 
            let v1523 : string = "leptos::prelude::AnyView::from($0)"
            let v1524 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1522 v1523 
            let v1525 : string = "<" + v1345 + " " + v1519 + ">move || { v1524 }</" + v1345 + ">"
            let v1526 : string = "leptos::prelude::view! { " + v1525 + " }"
            let v1527 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1526 
            let v1528 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v1527 |> unbox
            let v1529 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1530 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1528 v1529 
            let v1531 : Vec<leptos_prelude_AnyView_> = method173(v1530)
            let v1532 : string = "leptos::prelude::Fragment::new($0)"
            let v1533 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1531 v1532 
            let v1534 : string = "leptos::prelude::AnyView::from($0)"
            let v1535 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1533 v1534 
            let v1536 : string = "<" + v1357 + " " + v1513 + ">move || { v1535 }</" + v1357 + ">"
            let v1537 : string = "leptos::prelude::view! { " + v1536 + " }"
            let v1538 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1537 
            let v1539 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1538 |> unbox
            let v1540 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1541 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1539 v1540 
            let v1542 : Vec<leptos_prelude_AnyView_> = method173(v1541)
            let v1543 : string = "leptos::prelude::Fragment::new($0)"
            let v1544 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1542 v1543 
            let v1545 : string = "leptos::prelude::AnyView::from($0)"
            let v1546 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1544 v1545 
            let v1547 : string = "<" + v1483 + " " + v1502 + ">move || { v1546 }</" + v1483 + ">"
            let v1548 : string = "leptos::prelude::view! { " + v1547 + " }"
            let v1549 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1548 
            let v1550 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1549 |> unbox
            let v1551 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1552 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1550 v1551 
            let v1553 : Vec<leptos_prelude_AnyView_> = method176(v1500, v1552)
            let v1554 : string = "leptos::prelude::Fragment::new($0)"
            let v1555 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1553 v1554 
            let v1556 : string = "leptos::prelude::AnyView::from($0)"
            let v1557 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1555 v1556 
            let v1558 : string = "summary"
            let v1559 : string = "<" + v1558 + " " + v1421 + ">move || { v1557 }</" + v1558 + ">"
            let v1560 : string = "leptos::prelude::view! { " + v1559 + " }"
            let v1561 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1560 
            let v1562 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v1561 |> unbox
            let v1563 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1564 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1562 v1563 
            let v1565 : string = "class=\"flex flex-1 flex-col\""
            let v1566 : string = " " + v1565 + v43 + ""
            let v1567 : string = "Func0::new(move || $0())"
            let v1568 : (unit -> leptos_dom_Fragment) = closure215(v1298, v1311, v1316, v1303, v1306)
            let v1569 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v1568 v1567 
            let v1570 : Func0<leptos_dom_Fragment> = method184(v1569)
            let v1571 : string = "(move || v1570())()"
            let v1572 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v1571 
            let v1573 : string = "leptos::prelude::AnyView::from($0)"
            let v1574 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1572 v1573 
            let v1575 : string = "<" + v1403 + " " + v1566 + ">move || { v1574 }</" + v1403 + ">"
            let v1576 : string = "leptos::prelude::view! { " + v1575 + " }"
            let v1577 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1576 
            let v1578 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1577 |> unbox
            let v1579 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1580 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1578 v1579 
            let v1581 : Vec<leptos_prelude_AnyView_> = method176(v1564, v1580)
            let v1582 : string = "leptos::prelude::Fragment::new($0)"
            let v1583 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1581 v1582 
            let v1584 : string = "leptos::prelude::AnyView::from($0)"
            let v1585 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1583 v1584 
            let v1586 : string = "details"
            let v1587 : string = "<" + v1586 + " " + v1413 + ">move || { v1585 }</" + v1586 + ">"
            let v1588 : string = "leptos::prelude::view! { " + v1587 + " }"
            let v1589 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1588 
            let v1590 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v1589 |> unbox
            let v1591 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1592 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1590 v1591 
            let v1593 : Vec<leptos_prelude_AnyView_> = method176(v1409, v1592)
            let v1594 : string = "leptos::prelude::Fragment::new($0)"
            let v1595 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1593 v1594 
            let v1596 : string = "leptos::prelude::AnyView::from($0)"
            let v1597 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1595 v1596 
            let v1598 : string = "<" + v1403 + " " + v1389 + ">move || { v1597 }</" + v1403 + ">"
            let v1599 : string = "leptos::prelude::view! { " + v1598 + " }"
            let v1600 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1599 
            let v1601 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1600 |> unbox
            let v1602 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1603 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1601 v1602 
            let v1604 : Vec<leptos_prelude_AnyView_> = method172()
            let v1605 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1606 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1604 v1605 
            let v1607 : string = "class=\"flex flex-col [position:relative]\""
            let v1608 : string = " " + v1607 + v43 + ""
            let v1609 : string = "$0"
            let v1610 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1391 v1609 
            let v1611 : string = "$0"
            let v1612 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v1394 v1611 
            let v1613 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v1614 : string = " " + v1613 + v43 + ""
            let v1615 : Vec<leptos_prelude_AnyView_> = method173(v1606)
            let v1616 : string = "leptos::prelude::Fragment::new($0)"
            let v1617 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1615 v1616 
            let v1618 : string = "leptos::prelude::AnyView::from($0)"
            let v1619 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1617 v1618 
            let v1620 : string = "<" + v1403 + " " + v1614 + ">move || { v1619 }</" + v1403 + ">"
            let v1621 : string = "leptos::prelude::view! { " + v1620 + " }"
            let v1622 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1621 
            let v1623 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1622 |> unbox
            let v1624 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1625 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1623 v1624 
            let v1626 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v1610(())"
            let v1627 : string = "open=move || v1612(())"
            let v1628 : string = " " + v1626 + v43 + ""
            let v1629 : string = " " + v1627 + v1628 + ""
            let v1630 : string = "$0"
            let v1631 : (unit -> string) = closure233()
            let v1632 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1631 v1630 
            let v1633 : string = "$0"
            let v1634 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure234()
            let v1635 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v1634 v1633 
            let v1636 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v1635(()) + \" \" + &v1632(())"
            let v1637 : string = " " + v1636 + v43 + ""
            let v1638 : string = "class=\"flex items-center gap-2\""
            let v1639 : string = " " + v1638 + v43 + ""
            let v1640 : (unit -> string) = method214()
            let v1641 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v1642 : string = " " + v1641 + v43 + ""
            let v1643 : string = v1640 ()
            let v1644 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1645 : string = "&*$0"
            let v1646 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1643 v1645 
            let _v1644 = v1646 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1647 : string = "&*$0"
            let v1648 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1643 v1647 
            let _v1644 = v1648 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1649 : string = "&*$0"
            let v1650 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1643 v1649 
            let _v1644 = v1650 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1651 : Ref<Str> = v1643 |> unbox<Ref<Str>>
            let _v1644 = v1651 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1654 : Ref<Str> = v1643 |> unbox<Ref<Str>>
            let _v1644 = v1654 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1657 : Ref<Str> = v1643 |> unbox<Ref<Str>>
            let _v1644 = v1657 
            #endif
#else
            let v1660 : Ref<Str> = v1643 |> unbox<Ref<Str>>
            let _v1644 = v1660 
            #endif
            let v1663 : Ref<Str> = _v1644 
            let v1668 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1669 : string = "String::from($0)"
            let v1670 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1663 v1669 
            let _v1668 = v1670 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1671 : string = "String::from($0)"
            let v1672 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1663 v1671 
            let _v1668 = v1672 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1673 : string = "String::from($0)"
            let v1674 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1663 v1673 
            let _v1668 = v1674 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1675 : std_string_String = v1663 |> unbox<std_string_String>
            let _v1668 = v1675 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1678 : std_string_String = v1663 |> unbox<std_string_String>
            let _v1668 = v1678 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1681 : std_string_String = v1663 |> unbox<std_string_String>
            let _v1668 = v1681 
            #endif
#else
            let v1684 : std_string_String = v1663 |> unbox<std_string_String>
            let _v1668 = v1684 
            #endif
            let v1687 : std_string_String = _v1668 
            let v1692 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v1693 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1687 v1692 
            let v1694 : Vec<leptos_prelude_AnyView_> = method173(v1693)
            let v1695 : string = "leptos::prelude::Fragment::new($0)"
            let v1696 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1694 v1695 
            let v1697 : string = "leptos::prelude::AnyView::from($0)"
            let v1698 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1696 v1697 
            let v1699 : string = "<" + v1483 + " " + v1642 + ">move || { v1698 }</" + v1483 + ">"
            let v1700 : string = "leptos::prelude::view! { " + v1699 + " }"
            let v1701 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1700 
            let v1702 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1701 |> unbox
            let v1703 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1704 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1702 v1703 
            let v1705 : Vec<leptos_prelude_AnyView_> = method173(v1704)
            let v1706 : string = "leptos::prelude::Fragment::new($0)"
            let v1707 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1705 v1706 
            let v1708 : string = "leptos::prelude::AnyView::from($0)"
            let v1709 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1707 v1708 
            let v1710 : string = "<" + v1403 + " " + v1639 + ">move || { v1709 }</" + v1403 + ">"
            let v1711 : string = "leptos::prelude::view! { " + v1710 + " }"
            let v1712 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1711 
            let v1713 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1712 |> unbox
            let v1714 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1715 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1713 v1714 
            let v1716 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v1717 : string = " " + v1716 + v43 + ""
            let v1718 : string = "$0"
            let v1719 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1504 v1718 
            let v1720 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v1721 : string = "viewBox=\"0 0 20 20\""
            let v1722 : string = "fill=\"currentColor\""
            let v1723 : string = "class=move || \" \".to_owned() + &v1719(())"
            let v1724 : string = " " + v1720 + v43 + ""
            let v1725 : string = " " + v1721 + v1724 + ""
            let v1726 : string = " " + v1722 + v1725 + ""
            let v1727 : string = " " + v1723 + v1726 + ""
            let v1728 : string = "fill-rule=\"evenodd\""
            let v1729 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v1730 : string = "clip-rule=\"evenodd\""
            let v1731 : string = " " + v1728 + v43 + ""
            let v1732 : string = " " + v1729 + v1731 + ""
            let v1733 : string = " " + v1730 + v1732 + ""
            let v1734 : Vec<leptos_prelude_AnyView_> = method172()
            let v1735 : string = "leptos::prelude::Fragment::new($0)"
            let v1736 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1734 v1735 
            let v1737 : string = "leptos::prelude::AnyView::from($0)"
            let v1738 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1736 v1737 
            let v1739 : string = "<" + v1345 + " " + v1733 + ">move || { v1738 }</" + v1345 + ">"
            let v1740 : string = "leptos::prelude::view! { " + v1739 + " }"
            let v1741 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1740 
            let v1742 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v1741 |> unbox
            let v1743 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1744 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1742 v1743 
            let v1745 : Vec<leptos_prelude_AnyView_> = method173(v1744)
            let v1746 : string = "leptos::prelude::Fragment::new($0)"
            let v1747 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1745 v1746 
            let v1748 : string = "leptos::prelude::AnyView::from($0)"
            let v1749 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1747 v1748 
            let v1750 : string = "<" + v1357 + " " + v1727 + ">move || { v1749 }</" + v1357 + ">"
            let v1751 : string = "leptos::prelude::view! { " + v1750 + " }"
            let v1752 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1751 
            let v1753 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1752 |> unbox
            let v1754 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1755 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1753 v1754 
            let v1756 : Vec<leptos_prelude_AnyView_> = method173(v1755)
            let v1757 : string = "leptos::prelude::Fragment::new($0)"
            let v1758 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1756 v1757 
            let v1759 : string = "leptos::prelude::AnyView::from($0)"
            let v1760 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1758 v1759 
            let v1761 : string = "<" + v1483 + " " + v1717 + ">move || { v1760 }</" + v1483 + ">"
            let v1762 : string = "leptos::prelude::view! { " + v1761 + " }"
            let v1763 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1762 
            let v1764 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1763 |> unbox
            let v1765 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1766 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1764 v1765 
            let v1767 : Vec<leptos_prelude_AnyView_> = method176(v1715, v1766)
            let v1768 : string = "leptos::prelude::Fragment::new($0)"
            let v1769 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1767 v1768 
            let v1770 : string = "leptos::prelude::AnyView::from($0)"
            let v1771 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1769 v1770 
            let v1772 : string = "<" + v1558 + " " + v1637 + ">move || { v1771 }</" + v1558 + ">"
            let v1773 : string = "leptos::prelude::view! { " + v1772 + " }"
            let v1774 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1773 
            let v1775 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v1774 |> unbox
            let v1776 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1777 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1775 v1776 
            let v1778 : string = "class=\"flex flex-1 flex-col\""
            let v1779 : string = " " + v1778 + v43 + ""
            let v1780 : string = "Func0::new(move || $0())"
            let v1781 : (unit -> leptos_dom_Fragment) = closure236(v1298)
            let v1782 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v1781 v1780 
            let v1783 : Func0<leptos_dom_Fragment> = method184(v1782)
            let v1784 : string = "(move || v1783())()"
            let v1785 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v1784 
            let v1786 : string = "leptos::prelude::AnyView::from($0)"
            let v1787 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1785 v1786 
            let v1788 : string = "<" + v1403 + " " + v1779 + ">move || { v1787 }</" + v1403 + ">"
            let v1789 : string = "leptos::prelude::view! { " + v1788 + " }"
            let v1790 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1789 
            let v1791 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1790 |> unbox
            let v1792 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1793 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1791 v1792 
            let v1794 : Vec<leptos_prelude_AnyView_> = method176(v1777, v1793)
            let v1795 : string = "leptos::prelude::Fragment::new($0)"
            let v1796 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1794 v1795 
            let v1797 : string = "leptos::prelude::AnyView::from($0)"
            let v1798 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1796 v1797 
            let v1799 : string = "<" + v1586 + " " + v1629 + ">move || { v1798 }</" + v1586 + ">"
            let v1800 : string = "leptos::prelude::view! { " + v1799 + " }"
            let v1801 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1800 
            let v1802 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v1801 |> unbox
            let v1803 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1804 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1802 v1803 
            let v1805 : Vec<leptos_prelude_AnyView_> = method176(v1625, v1804)
            let v1806 : string = "leptos::prelude::Fragment::new($0)"
            let v1807 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1805 v1806 
            let v1808 : string = "leptos::prelude::AnyView::from($0)"
            let v1809 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1807 v1808 
            let v1810 : string = "<" + v1403 + " " + v1608 + ">move || { v1809 }</" + v1403 + ">"
            let v1811 : string = "leptos::prelude::view! { " + v1810 + " }"
            let v1812 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1811 
            let v1813 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1812 |> unbox
            let v1814 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1815 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1813 v1814 
            let v1816 : leptos_prelude_RwSignal<Heap1> = v1298.l0
            let v1817 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
            let v1818 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1816 v1817 
            let v1819 : leptos_prelude_RwSignal<bool> = v1818.l1
            let v1820 : string = $"leptos::prelude::RwSignal::get(&$0)"
            let v1821 : bool = Fable.Core.RustInterop.emitRustExpr v1819 v1820 
            let v2037 : leptos_prelude_AnyView_ =
                if v1821 then
                    let v1822 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1823 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1824 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1822 v1823 
                    let v1825 : string = "class=\"flex flex-col [position:relative]\""
                    let v1826 : string = " " + v1825 + v43 + ""
                    let v1827 : string = "$0"
                    let v1828 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1391 v1827 
                    let v1829 : string = "$0"
                    let v1830 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v1394 v1829 
                    let v1831 : string = "class=\"[position:absolute] [right:0] [top:0]\""
                    let v1832 : string = " " + v1831 + v43 + ""
                    let v1833 : Vec<leptos_prelude_AnyView_> = method173(v1824)
                    let v1834 : string = "leptos::prelude::Fragment::new($0)"
                    let v1835 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1833 v1834 
                    let v1836 : string = "leptos::prelude::AnyView::from($0)"
                    let v1837 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1835 v1836 
                    let v1838 : string = "<" + v1403 + " " + v1832 + ">move || { v1837 }</" + v1403 + ">"
                    let v1839 : string = "leptos::prelude::view! { " + v1838 + " }"
                    let v1840 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1839 
                    let v1841 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1840 |> unbox
                    let v1842 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1843 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1841 v1842 
                    let v1844 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v1828(())"
                    let v1845 : string = "open=move || v1830(())"
                    let v1846 : string = " " + v1844 + v43 + ""
                    let v1847 : string = " " + v1845 + v1846 + ""
                    let v1848 : string = "$0"
                    let v1849 : (unit -> string) = closure253()
                    let v1850 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1849 v1848 
                    let v1851 : string = "$0"
                    let v1852 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure254()
                    let v1853 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v1852 v1851 
                    let v1854 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v1853(()) + \" \" + &v1850(())"
                    let v1855 : string = " " + v1854 + v43 + ""
                    let v1856 : string = "class=\"flex items-center gap-2\""
                    let v1857 : string = " " + v1856 + v43 + ""
                    let v1858 : (unit -> string) = method223()
                    let v1859 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
                    let v1860 : string = " " + v1859 + v43 + ""
                    let v1861 : string = v1858 ()
                    let v1862 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1863 : string = "&*$0"
                    let v1864 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1861 v1863 
                    let _v1862 = v1864 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1865 : string = "&*$0"
                    let v1866 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1861 v1865 
                    let _v1862 = v1866 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1867 : string = "&*$0"
                    let v1868 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1861 v1867 
                    let _v1862 = v1868 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1869 : Ref<Str> = v1861 |> unbox<Ref<Str>>
                    let _v1862 = v1869 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1872 : Ref<Str> = v1861 |> unbox<Ref<Str>>
                    let _v1862 = v1872 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1875 : Ref<Str> = v1861 |> unbox<Ref<Str>>
                    let _v1862 = v1875 
                    #endif
#else
                    let v1878 : Ref<Str> = v1861 |> unbox<Ref<Str>>
                    let _v1862 = v1878 
                    #endif
                    let v1881 : Ref<Str> = _v1862 
                    let v1886 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1887 : string = "String::from($0)"
                    let v1888 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1881 v1887 
                    let _v1886 = v1888 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1889 : string = "String::from($0)"
                    let v1890 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1881 v1889 
                    let _v1886 = v1890 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1891 : string = "String::from($0)"
                    let v1892 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1881 v1891 
                    let _v1886 = v1892 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1893 : std_string_String = v1881 |> unbox<std_string_String>
                    let _v1886 = v1893 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1896 : std_string_String = v1881 |> unbox<std_string_String>
                    let _v1886 = v1896 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1899 : std_string_String = v1881 |> unbox<std_string_String>
                    let _v1886 = v1899 
                    #endif
#else
                    let v1902 : std_string_String = v1881 |> unbox<std_string_String>
                    let _v1886 = v1902 
                    #endif
                    let v1905 : std_string_String = _v1886 
                    let v1910 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v1911 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1905 v1910 
                    let v1912 : Vec<leptos_prelude_AnyView_> = method173(v1911)
                    let v1913 : string = "leptos::prelude::Fragment::new($0)"
                    let v1914 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1912 v1913 
                    let v1915 : string = "leptos::prelude::AnyView::from($0)"
                    let v1916 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1914 v1915 
                    let v1917 : string = "<" + v1483 + " " + v1860 + ">move || { v1916 }</" + v1483 + ">"
                    let v1918 : string = "leptos::prelude::view! { " + v1917 + " }"
                    let v1919 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1918 
                    let v1920 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1919 |> unbox
                    let v1921 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1922 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1920 v1921 
                    let v1923 : Vec<leptos_prelude_AnyView_> = method173(v1922)
                    let v1924 : string = "leptos::prelude::Fragment::new($0)"
                    let v1925 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1923 v1924 
                    let v1926 : string = "leptos::prelude::AnyView::from($0)"
                    let v1927 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1925 v1926 
                    let v1928 : string = "<" + v1403 + " " + v1857 + ">move || { v1927 }</" + v1403 + ">"
                    let v1929 : string = "leptos::prelude::view! { " + v1928 + " }"
                    let v1930 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1929 
                    let v1931 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1930 |> unbox
                    let v1932 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1933 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1931 v1932 
                    let v1934 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
                    let v1935 : string = " " + v1934 + v43 + ""
                    let v1936 : string = "$0"
                    let v1937 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1504 v1936 
                    let v1938 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                    let v1939 : string = "viewBox=\"0 0 20 20\""
                    let v1940 : string = "fill=\"currentColor\""
                    let v1941 : string = "class=move || \" \".to_owned() + &v1937(())"
                    let v1942 : string = " " + v1938 + v43 + ""
                    let v1943 : string = " " + v1939 + v1942 + ""
                    let v1944 : string = " " + v1940 + v1943 + ""
                    let v1945 : string = " " + v1941 + v1944 + ""
                    let v1946 : string = "fill-rule=\"evenodd\""
                    let v1947 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
                    let v1948 : string = "clip-rule=\"evenodd\""
                    let v1949 : string = " " + v1946 + v43 + ""
                    let v1950 : string = " " + v1947 + v1949 + ""
                    let v1951 : string = " " + v1948 + v1950 + ""
                    let v1952 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1953 : string = "leptos::prelude::Fragment::new($0)"
                    let v1954 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1952 v1953 
                    let v1955 : string = "leptos::prelude::AnyView::from($0)"
                    let v1956 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1954 v1955 
                    let v1957 : string = "<" + v1345 + " " + v1951 + ">move || { v1956 }</" + v1345 + ">"
                    let v1958 : string = "leptos::prelude::view! { " + v1957 + " }"
                    let v1959 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1958 
                    let v1960 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v1959 |> unbox
                    let v1961 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1962 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1960 v1961 
                    let v1963 : Vec<leptos_prelude_AnyView_> = method173(v1962)
                    let v1964 : string = "leptos::prelude::Fragment::new($0)"
                    let v1965 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1963 v1964 
                    let v1966 : string = "leptos::prelude::AnyView::from($0)"
                    let v1967 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1965 v1966 
                    let v1968 : string = "<" + v1357 + " " + v1945 + ">move || { v1967 }</" + v1357 + ">"
                    let v1969 : string = "leptos::prelude::view! { " + v1968 + " }"
                    let v1970 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1969 
                    let v1971 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1970 |> unbox
                    let v1972 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1973 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1971 v1972 
                    let v1974 : Vec<leptos_prelude_AnyView_> = method173(v1973)
                    let v1975 : string = "leptos::prelude::Fragment::new($0)"
                    let v1976 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1974 v1975 
                    let v1977 : string = "leptos::prelude::AnyView::from($0)"
                    let v1978 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1976 v1977 
                    let v1979 : string = "<" + v1483 + " " + v1935 + ">move || { v1978 }</" + v1483 + ">"
                    let v1980 : string = "leptos::prelude::view! { " + v1979 + " }"
                    let v1981 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1980 
                    let v1982 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1981 |> unbox
                    let v1983 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1984 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1982 v1983 
                    let v1985 : Vec<leptos_prelude_AnyView_> = method176(v1933, v1984)
                    let v1986 : string = "leptos::prelude::Fragment::new($0)"
                    let v1987 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1985 v1986 
                    let v1988 : string = "leptos::prelude::AnyView::from($0)"
                    let v1989 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1987 v1988 
                    let v1990 : string = "<" + v1558 + " " + v1855 + ">move || { v1989 }</" + v1558 + ">"
                    let v1991 : string = "leptos::prelude::view! { " + v1990 + " }"
                    let v1992 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1991 
                    let v1993 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v1992 |> unbox
                    let v1994 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1995 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1993 v1994 
                    let v1996 : string = "class=\"flex flex-1 flex-col\""
                    let v1997 : string = " " + v1996 + v43 + ""
                    let v1998 : string = "Func0::new(move || $0())"
                    let v1999 : (unit -> leptos_dom_Fragment) = closure256()
                    let v2000 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v1999 v1998 
                    let v2001 : Func0<leptos_dom_Fragment> = method184(v2000)
                    let v2002 : string = "(move || v2001())()"
                    let v2003 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v2002 
                    let v2004 : string = "leptos::prelude::AnyView::from($0)"
                    let v2005 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2003 v2004 
                    let v2006 : string = "<" + v1403 + " " + v1997 + ">move || { v2005 }</" + v1403 + ">"
                    let v2007 : string = "leptos::prelude::view! { " + v2006 + " }"
                    let v2008 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2007 
                    let v2009 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2008 |> unbox
                    let v2010 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v2011 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2009 v2010 
                    let v2012 : Vec<leptos_prelude_AnyView_> = method176(v1995, v2011)
                    let v2013 : string = "leptos::prelude::Fragment::new($0)"
                    let v2014 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2012 v2013 
                    let v2015 : string = "leptos::prelude::AnyView::from($0)"
                    let v2016 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2014 v2015 
                    let v2017 : string = "<" + v1586 + " " + v1847 + ">move || { v2016 }</" + v1586 + ">"
                    let v2018 : string = "leptos::prelude::view! { " + v2017 + " }"
                    let v2019 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2018 
                    let v2020 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v2019 |> unbox
                    let v2021 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v2022 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2020 v2021 
                    let v2023 : Vec<leptos_prelude_AnyView_> = method176(v1843, v2022)
                    let v2024 : string = "leptos::prelude::Fragment::new($0)"
                    let v2025 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2023 v2024 
                    let v2026 : string = "leptos::prelude::AnyView::from($0)"
                    let v2027 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2025 v2026 
                    let v2028 : string = "<" + v1403 + " " + v1826 + ">move || { v2027 }</" + v1403 + ">"
                    let v2029 : string = "leptos::prelude::view! { " + v2028 + " }"
                    let v2030 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2029 
                    let v2031 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2030 |> unbox
                    let v2032 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v2033 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2031 v2032 
                    v2033
                else
                    let v2034 : Vec<leptos_prelude_AnyView_> = method172()
                    let v2035 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v2036 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2034 v2035 
                    v2036
            let v2038 : Vec<leptos_prelude_AnyView_> = method186(v1603, v1815, v2037)
            let v2039 : string = "leptos::prelude::Fragment::new($0)"
            let v2040 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2038 v2039 
            US23_0(v2040)
        | US19_3 -> (* Transactions *)
            let v689 : string = "transactions_view.render (1)"
            let v690 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v691 : bool = Fable.Core.RustInterop.emitRustExpr v689 v690 
            let v692 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v693 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v692 
            let v694 : string = "$0.unwrap()"
            let v695 : Heap2 = Fable.Core.RustInterop.emitRustExpr v693 v694 
            let v696 : string = "use_transactions.render (1)"
            let v697 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v698 : bool = Fable.Core.RustInterop.emitRustExpr v696 v697 
            let v699 : string = "$0"
            let v700 : (unit -> Vec<string>) = closure51(v695)
            let v701 : (unit -> Vec<string>) = Fable.Core.RustInterop.emitRustExpr v700 v699 
            let v702 : string = "leptos::prelude::Memo::new(move |_| { v701(()) })"
            let v703 : leptos_prelude_Memo<Vec<string>> = Fable.Core.RustInterop.emitRustExpr () v702 
            let v704 : string = "$0"
            let v705 : (unit -> (struct (string * US24 * string * bool * bool) [])) = closure56(v703)
            let v706 : (unit -> (struct (string * US24 * string * bool * bool) [])) = Fable.Core.RustInterop.emitRustExpr v705 v704 
            let v707 : string = "leptos::prelude::Memo::new(move |_| { v706(()) })"
            let v708 : leptos_prelude_Memo<(struct (string * US24 * string * bool * bool) [])> = Fable.Core.RustInterop.emitRustExpr () v707 
            let v709 : string = "$0"
            let v710 : (unit -> Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>) = closure58(v695, v703)
            let v711 : (unit -> Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>) = Fable.Core.RustInterop.emitRustExpr v710 v709 
            let v712 : string = "leptos::prelude::Memo::new(move |_| { v711(()) })"
            let v713 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>> = Fable.Core.RustInterop.emitRustExpr () v712 
            let v714 : string = "$0"
            let v715 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = closure61(v713)
            let v716 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v715 v714 
            let v717 : string = "leptos::prelude::Memo::new(move |_| { v716(()) })"
            let v718 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v717 
            let v719 : string = "$0"
            let v720 : (unit -> (string [])) = closure63(v713)
            let v721 : (unit -> (string [])) = Fable.Core.RustInterop.emitRustExpr v720 v719 
            let v722 : string = "leptos::prelude::Memo::new(move |_| { v721(()) })"
            let v723 : leptos_prelude_Memo<(string [])> = Fable.Core.RustInterop.emitRustExpr () v722 
            let v724 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = closure66()
            let v725 : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = method75(v718, v724)
            let v726 : string = $"%A{v725}"
            let v729 : string = "use_transactions.render (7) / root func0 / result: " + string v726 + ""
            let v730 : int64 = 200L
            let v731 : string = method10(v730, v729)
            let v732 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v733 : bool = Fable.Core.RustInterop.emitRustExpr v731 v732 
            let v734 : string = "$0"
            let v735 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = closure98(v723, v725)
            let v736 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v735 v734 
            let v737 : string = "leptos::prelude::Memo::new(move |_| { v736(()) })"
            let v738 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v737 
            let v739 : string = "$0"
            let v740 : (unit -> Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>) = closure115(v738)
            let v741 : (unit -> Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v740 v739 
            let v742 : string = "leptos::prelude::Memo::new(move |_| { v741(()) })"
            let v743 : leptos_prelude_Memo<Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v742 
            let v744 : string = "$0"
            let v745 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = closure122(v743)
            let v746 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v745 v744 
            let v747 : string = "leptos::prelude::Memo::new(move |_| { v746(()) })"
            let v748 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v747 
            let v749 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = closure126()
            let v750 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = method149(v748, v749)
            let v751 : string = $"%A{v750}"
            let v754 : string = "use_transactions.render (12) / rpc_response func0 / result: " + string v751 + ""
            let v755 : int64 = 200L
            let v756 : string = method10(v755, v754)
            let v757 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v758 : bool = Fable.Core.RustInterop.emitRustExpr v756 v757 
            let v759 : string = $"leptos::prelude::signal($0)"
            let struct (v760 : leptos_prelude_ReadSignal<bool>, v761 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v759 
            let v762 : (unit -> unit) = closure264(v761)
            let v763 : string = "let v762 = $0"
            Fable.Core.RustInterop.emitRustExpr v762 v763 
            let v764 : string = "$0"
            let v765 : (unit -> string) = closure265()
            let v766 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v765 v764 
            let v767 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v768 : string = "fill=\"none\""
            let v769 : string = "viewBox=\"0 0 24 24\""
            let v770 : string = "stroke-width=\"1.5\""
            let v771 : string = "stroke=\"currentColor\""
            let v772 : string = "class=move || \" \".to_owned() + &v766(())"
            let v773 : string = " " + v767 + v43 + ""
            let v774 : string = " " + v768 + v773 + ""
            let v775 : string = " " + v769 + v774 + ""
            let v776 : string = " " + v770 + v775 + ""
            let v777 : string = " " + v771 + v776 + ""
            let v778 : string = " " + v772 + v777 + ""
            let v779 : string = "stroke-linecap=\"round\""
            let v780 : string = "stroke-linejoin=\"round\""
            let v781 : string = "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\""
            let v782 : string = " " + v779 + v43 + ""
            let v783 : string = " " + v780 + v782 + ""
            let v784 : string = " " + v781 + v783 + ""
            let v785 : Vec<leptos_prelude_AnyView_> = method172()
            let v786 : string = "leptos::prelude::Fragment::new($0)"
            let v787 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v785 v786 
            let v788 : string = "leptos::prelude::AnyView::from($0)"
            let v789 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v787 v788 
            let v790 : string = "path"
            let v791 : string = "<" + v790 + " " + v784 + ">move || { v789 }</" + v790 + ">"
            let v792 : string = "leptos::prelude::view! { " + v791 + " }"
            let v793 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v792 
            let v794 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v793 |> unbox
            let v795 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v796 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v794 v795 
            let v797 : string = "stroke-linecap=\"round\""
            let v798 : string = "stroke-linejoin=\"round\""
            let v799 : string = "d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\""
            let v800 : string = " " + v797 + v43 + ""
            let v801 : string = " " + v798 + v800 + ""
            let v802 : string = " " + v799 + v801 + ""
            let v803 : Vec<leptos_prelude_AnyView_> = method172()
            let v804 : string = "leptos::prelude::Fragment::new($0)"
            let v805 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v803 v804 
            let v806 : string = "leptos::prelude::AnyView::from($0)"
            let v807 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v805 v806 
            let v808 : string = "<" + v790 + " " + v802 + ">move || { v807 }</" + v790 + ">"
            let v809 : string = "leptos::prelude::view! { " + v808 + " }"
            let v810 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v809 
            let v811 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v810 |> unbox
            let v812 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v813 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v811 v812 
            let v814 : Vec<leptos_prelude_AnyView_> = method176(v796, v813)
            let v815 : string = "leptos::prelude::Fragment::new($0)"
            let v816 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v814 v815 
            let v817 : string = "leptos::prelude::AnyView::from($0)"
            let v818 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v816 v817 
            let v819 : string = "svg"
            let v820 : string = "<" + v819 + " " + v778 + ">move || { v818 }</" + v819 + ">"
            let v821 : string = "leptos::prelude::view! { " + v820 + " }"
            let v822 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v821 
            let v823 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v822 |> unbox
            let v824 : string = "on:click=move |_| v762()"
            let v825 : string = "aria-label=\"Settings\""
            let v826 : string = "$0"
            let v827 : (unit -> std_string_String) = closure266(v760)
            let v828 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v827 v826 
            let v829 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v828(())"
            let v830 : string = " " + v829 + v43 + ""
            let v831 : string = " " + v824 + v830 + ""
            let v832 : string = " " + v825 + v831 + ""
            let v833 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v834 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v823 v833 
            let v835 : Vec<leptos_prelude_AnyView_> = method173(v834)
            let v836 : string = "leptos::prelude::Fragment::new($0)"
            let v837 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v835 v836 
            let v838 : string = "leptos::prelude::AnyView::from($0)"
            let v839 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v837 v838 
            let v840 : string = "button"
            let v841 : string = "<" + v840 + " " + v832 + ">move || { v839 }</" + v840 + ">"
            let v842 : string = "leptos::prelude::view! { " + v841 + " }"
            let v843 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v842 
            let v844 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v843 |> unbox
            let v845 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v846 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v844 v845 
            let v847 : Vec<leptos_prelude_AnyView_> = method172()
            let v848 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v849 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v847 v848 
            let v850 : string = "class=\"flex flex-col [position:relative]\""
            let v851 : string = " " + v850 + v43 + ""
            let v852 : string = "$0"
            let v853 : (unit -> string) = closure166()
            let v854 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v853 v852 
            let v855 : string = "$0"
            let v856 : (unit -> bool) = closure167()
            let v857 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v856 v855 
            let v858 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v859 : string = " " + v858 + v43 + ""
            let v860 : Vec<leptos_prelude_AnyView_> = method173(v846)
            let v861 : string = "leptos::prelude::Fragment::new($0)"
            let v862 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v860 v861 
            let v863 : string = "leptos::prelude::AnyView::from($0)"
            let v864 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v862 v863 
            let v865 : string = "div"
            let v866 : string = "<" + v865 + " " + v859 + ">move || { v864 }</" + v865 + ">"
            let v867 : string = "leptos::prelude::view! { " + v866 + " }"
            let v868 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v867 
            let v869 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v868 |> unbox
            let v870 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v871 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v869 v870 
            let v872 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v854(())"
            let v873 : string = "open=move || v857(())"
            let v874 : string = " " + v872 + v43 + ""
            let v875 : string = " " + v873 + v874 + ""
            let v876 : string = "$0"
            let v877 : (unit -> string) = closure267()
            let v878 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v877 v876 
            let v879 : string = "$0"
            let v880 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure268(v846)
            let v881 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v880 v879 
            let v882 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v881(()) + \" \" + &v878(())"
            let v883 : string = " " + v882 + v43 + ""
            let v884 : string = "class=\"flex items-center gap-2\""
            let v885 : string = " " + v884 + v43 + ""
            let v886 : (unit -> string) = method230(v846)
            let v887 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v888 : string = " " + v887 + v43 + ""
            let v889 : string = v886 ()
            let v890 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v891 : string = "&*$0"
            let v892 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v889 v891 
            let _v890 = v892 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v893 : string = "&*$0"
            let v894 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v889 v893 
            let _v890 = v894 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v895 : string = "&*$0"
            let v896 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v889 v895 
            let _v890 = v896 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v897 : Ref<Str> = v889 |> unbox<Ref<Str>>
            let _v890 = v897 
            #endif
#if FABLE_COMPILER_PYTHON
            let v900 : Ref<Str> = v889 |> unbox<Ref<Str>>
            let _v890 = v900 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v903 : Ref<Str> = v889 |> unbox<Ref<Str>>
            let _v890 = v903 
            #endif
#else
            let v906 : Ref<Str> = v889 |> unbox<Ref<Str>>
            let _v890 = v906 
            #endif
            let v909 : Ref<Str> = _v890 
            let v914 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v915 : string = "String::from($0)"
            let v916 : std_string_String = Fable.Core.RustInterop.emitRustExpr v909 v915 
            let _v914 = v916 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v917 : string = "String::from($0)"
            let v918 : std_string_String = Fable.Core.RustInterop.emitRustExpr v909 v917 
            let _v914 = v918 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v919 : string = "String::from($0)"
            let v920 : std_string_String = Fable.Core.RustInterop.emitRustExpr v909 v919 
            let _v914 = v920 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v921 : std_string_String = v909 |> unbox<std_string_String>
            let _v914 = v921 
            #endif
#if FABLE_COMPILER_PYTHON
            let v924 : std_string_String = v909 |> unbox<std_string_String>
            let _v914 = v924 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v927 : std_string_String = v909 |> unbox<std_string_String>
            let _v914 = v927 
            #endif
#else
            let v930 : std_string_String = v909 |> unbox<std_string_String>
            let _v914 = v930 
            #endif
            let v933 : std_string_String = _v914 
            let v938 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v939 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v933 v938 
            let v940 : Vec<leptos_prelude_AnyView_> = method173(v939)
            let v941 : string = "leptos::prelude::Fragment::new($0)"
            let v942 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v940 v941 
            let v943 : string = "leptos::prelude::AnyView::from($0)"
            let v944 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v942 v943 
            let v945 : string = "span"
            let v946 : string = "<" + v945 + " " + v888 + ">move || { v944 }</" + v945 + ">"
            let v947 : string = "leptos::prelude::view! { " + v946 + " }"
            let v948 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v947 
            let v949 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v948 |> unbox
            let v950 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v951 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v949 v950 
            let v952 : Vec<leptos_prelude_AnyView_> = method173(v951)
            let v953 : string = "leptos::prelude::Fragment::new($0)"
            let v954 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v952 v953 
            let v955 : string = "leptos::prelude::AnyView::from($0)"
            let v956 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v954 v955 
            let v957 : string = "<" + v865 + " " + v885 + ">move || { v956 }</" + v865 + ">"
            let v958 : string = "leptos::prelude::view! { " + v957 + " }"
            let v959 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v958 
            let v960 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v959 |> unbox
            let v961 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v962 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v960 v961 
            let v963 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v964 : string = " " + v963 + v43 + ""
            let v965 : string = "$0"
            let v966 : (unit -> string) = closure171()
            let v967 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v966 v965 
            let v968 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v969 : string = "viewBox=\"0 0 20 20\""
            let v970 : string = "fill=\"currentColor\""
            let v971 : string = "class=move || \" \".to_owned() + &v967(())"
            let v972 : string = " " + v968 + v43 + ""
            let v973 : string = " " + v969 + v972 + ""
            let v974 : string = " " + v970 + v973 + ""
            let v975 : string = " " + v971 + v974 + ""
            let v976 : string = "fill-rule=\"evenodd\""
            let v977 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v978 : string = "clip-rule=\"evenodd\""
            let v979 : string = " " + v976 + v43 + ""
            let v980 : string = " " + v977 + v979 + ""
            let v981 : string = " " + v978 + v980 + ""
            let v982 : Vec<leptos_prelude_AnyView_> = method172()
            let v983 : string = "leptos::prelude::Fragment::new($0)"
            let v984 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v982 v983 
            let v985 : string = "leptos::prelude::AnyView::from($0)"
            let v986 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v984 v985 
            let v987 : string = "<" + v790 + " " + v981 + ">move || { v986 }</" + v790 + ">"
            let v988 : string = "leptos::prelude::view! { " + v987 + " }"
            let v989 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v988 
            let v990 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v989 |> unbox
            let v991 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v992 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v990 v991 
            let v993 : Vec<leptos_prelude_AnyView_> = method173(v992)
            let v994 : string = "leptos::prelude::Fragment::new($0)"
            let v995 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v993 v994 
            let v996 : string = "leptos::prelude::AnyView::from($0)"
            let v997 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v995 v996 
            let v998 : string = "<" + v819 + " " + v975 + ">move || { v997 }</" + v819 + ">"
            let v999 : string = "leptos::prelude::view! { " + v998 + " }"
            let v1000 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v999 
            let v1001 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1000 |> unbox
            let v1002 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1003 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1001 v1002 
            let v1004 : Vec<leptos_prelude_AnyView_> = method173(v1003)
            let v1005 : string = "leptos::prelude::Fragment::new($0)"
            let v1006 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1004 v1005 
            let v1007 : string = "leptos::prelude::AnyView::from($0)"
            let v1008 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1006 v1007 
            let v1009 : string = "<" + v945 + " " + v964 + ">move || { v1008 }</" + v945 + ">"
            let v1010 : string = "leptos::prelude::view! { " + v1009 + " }"
            let v1011 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1010 
            let v1012 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1011 |> unbox
            let v1013 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1014 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1012 v1013 
            let v1015 : Vec<leptos_prelude_AnyView_> = method176(v962, v1014)
            let v1016 : string = "leptos::prelude::Fragment::new($0)"
            let v1017 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1015 v1016 
            let v1018 : string = "leptos::prelude::AnyView::from($0)"
            let v1019 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1017 v1018 
            let v1020 : string = "summary"
            let v1021 : string = "<" + v1020 + " " + v883 + ">move || { v1019 }</" + v1020 + ">"
            let v1022 : string = "leptos::prelude::view! { " + v1021 + " }"
            let v1023 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1022 
            let v1024 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v1023 |> unbox
            let v1025 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1026 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1024 v1025 
            let v1027 : string = "class=\"flex flex-1 flex-col\""
            let v1028 : string = " " + v1027 + v43 + ""
            let v1029 : string = "Func0::new(move || $0())"
            let v1030 : (unit -> leptos_dom_Fragment) = closure270(v695, v738, v713, v760)
            let v1031 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v1030 v1029 
            let v1032 : Func0<leptos_dom_Fragment> = method184(v1031)
            let v1033 : string = "(move || v1032())()"
            let v1034 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v1033 
            let v1035 : string = "leptos::prelude::AnyView::from($0)"
            let v1036 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1034 v1035 
            let v1037 : string = "<" + v865 + " " + v1028 + ">move || { v1036 }</" + v865 + ">"
            let v1038 : string = "leptos::prelude::view! { " + v1037 + " }"
            let v1039 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1038 
            let v1040 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1039 |> unbox
            let v1041 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1042 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1040 v1041 
            let v1043 : Vec<leptos_prelude_AnyView_> = method176(v1026, v1042)
            let v1044 : string = "leptos::prelude::Fragment::new($0)"
            let v1045 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1043 v1044 
            let v1046 : string = "leptos::prelude::AnyView::from($0)"
            let v1047 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1045 v1046 
            let v1048 : string = "details"
            let v1049 : string = "<" + v1048 + " " + v875 + ">move || { v1047 }</" + v1048 + ">"
            let v1050 : string = "leptos::prelude::view! { " + v1049 + " }"
            let v1051 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1050 
            let v1052 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v1051 |> unbox
            let v1053 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1054 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1052 v1053 
            let v1055 : Vec<leptos_prelude_AnyView_> = method176(v871, v1054)
            let v1056 : string = "leptos::prelude::Fragment::new($0)"
            let v1057 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1055 v1056 
            let v1058 : string = "leptos::prelude::AnyView::from($0)"
            let v1059 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1057 v1058 
            let v1060 : string = "<" + v865 + " " + v851 + ">move || { v1059 }</" + v865 + ">"
            let v1061 : string = "leptos::prelude::view! { " + v1060 + " }"
            let v1062 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1061 
            let v1063 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1062 |> unbox
            let v1064 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1065 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1063 v1064 
            let v1066 : leptos_prelude_RwSignal<Heap1> = v695.l0
            let v1067 : string = $"leptos::prelude::RwSignal::get_untracked(&$0)"
            let v1068 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1066 v1067 
            let v1069 : leptos_prelude_RwSignal<bool> = v1068.l1
            let v1070 : string = $"leptos::prelude::RwSignal::get(&$0)"
            let v1071 : bool = Fable.Core.RustInterop.emitRustExpr v1069 v1070 
            let v1287 : leptos_prelude_AnyView_ =
                if v1071 then
                    let v1072 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1073 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1074 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1072 v1073 
                    let v1075 : string = "class=\"flex flex-col [position:relative]\""
                    let v1076 : string = " " + v1075 + v43 + ""
                    let v1077 : string = "$0"
                    let v1078 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v853 v1077 
                    let v1079 : string = "$0"
                    let v1080 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v856 v1079 
                    let v1081 : string = "class=\"[position:absolute] [right:0] [top:0]\""
                    let v1082 : string = " " + v1081 + v43 + ""
                    let v1083 : Vec<leptos_prelude_AnyView_> = method173(v1074)
                    let v1084 : string = "leptos::prelude::Fragment::new($0)"
                    let v1085 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1083 v1084 
                    let v1086 : string = "leptos::prelude::AnyView::from($0)"
                    let v1087 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1085 v1086 
                    let v1088 : string = "<" + v865 + " " + v1082 + ">move || { v1087 }</" + v865 + ">"
                    let v1089 : string = "leptos::prelude::view! { " + v1088 + " }"
                    let v1090 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1089 
                    let v1091 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1090 |> unbox
                    let v1092 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1093 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1091 v1092 
                    let v1094 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v1078(())"
                    let v1095 : string = "open=move || v1080(())"
                    let v1096 : string = " " + v1094 + v43 + ""
                    let v1097 : string = " " + v1095 + v1096 + ""
                    let v1098 : string = "$0"
                    let v1099 : (unit -> string) = closure346()
                    let v1100 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1099 v1098 
                    let v1101 : string = "$0"
                    let v1102 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure347()
                    let v1103 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v1102 v1101 
                    let v1104 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v1103(()) + \" \" + &v1100(())"
                    let v1105 : string = " " + v1104 + v43 + ""
                    let v1106 : string = "class=\"flex items-center gap-2\""
                    let v1107 : string = " " + v1106 + v43 + ""
                    let v1108 : (unit -> string) = method269()
                    let v1109 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
                    let v1110 : string = " " + v1109 + v43 + ""
                    let v1111 : string = v1108 ()
                    let v1112 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1113 : string = "&*$0"
                    let v1114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1111 v1113 
                    let _v1112 = v1114 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1115 : string = "&*$0"
                    let v1116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1111 v1115 
                    let _v1112 = v1116 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1117 : string = "&*$0"
                    let v1118 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1111 v1117 
                    let _v1112 = v1118 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1119 : Ref<Str> = v1111 |> unbox<Ref<Str>>
                    let _v1112 = v1119 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1122 : Ref<Str> = v1111 |> unbox<Ref<Str>>
                    let _v1112 = v1122 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1125 : Ref<Str> = v1111 |> unbox<Ref<Str>>
                    let _v1112 = v1125 
                    #endif
#else
                    let v1128 : Ref<Str> = v1111 |> unbox<Ref<Str>>
                    let _v1112 = v1128 
                    #endif
                    let v1131 : Ref<Str> = _v1112 
                    let v1136 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1137 : string = "String::from($0)"
                    let v1138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1131 v1137 
                    let _v1136 = v1138 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1139 : string = "String::from($0)"
                    let v1140 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1131 v1139 
                    let _v1136 = v1140 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1141 : string = "String::from($0)"
                    let v1142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1131 v1141 
                    let _v1136 = v1142 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1143 : std_string_String = v1131 |> unbox<std_string_String>
                    let _v1136 = v1143 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1146 : std_string_String = v1131 |> unbox<std_string_String>
                    let _v1136 = v1146 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1149 : std_string_String = v1131 |> unbox<std_string_String>
                    let _v1136 = v1149 
                    #endif
#else
                    let v1152 : std_string_String = v1131 |> unbox<std_string_String>
                    let _v1136 = v1152 
                    #endif
                    let v1155 : std_string_String = _v1136 
                    let v1160 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v1161 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1155 v1160 
                    let v1162 : Vec<leptos_prelude_AnyView_> = method173(v1161)
                    let v1163 : string = "leptos::prelude::Fragment::new($0)"
                    let v1164 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1162 v1163 
                    let v1165 : string = "leptos::prelude::AnyView::from($0)"
                    let v1166 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1164 v1165 
                    let v1167 : string = "<" + v945 + " " + v1110 + ">move || { v1166 }</" + v945 + ">"
                    let v1168 : string = "leptos::prelude::view! { " + v1167 + " }"
                    let v1169 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1168 
                    let v1170 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1169 |> unbox
                    let v1171 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1172 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1170 v1171 
                    let v1173 : Vec<leptos_prelude_AnyView_> = method173(v1172)
                    let v1174 : string = "leptos::prelude::Fragment::new($0)"
                    let v1175 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1173 v1174 
                    let v1176 : string = "leptos::prelude::AnyView::from($0)"
                    let v1177 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1175 v1176 
                    let v1178 : string = "<" + v865 + " " + v1107 + ">move || { v1177 }</" + v865 + ">"
                    let v1179 : string = "leptos::prelude::view! { " + v1178 + " }"
                    let v1180 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1179 
                    let v1181 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1180 |> unbox
                    let v1182 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1183 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1181 v1182 
                    let v1184 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
                    let v1185 : string = " " + v1184 + v43 + ""
                    let v1186 : string = "$0"
                    let v1187 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v966 v1186 
                    let v1188 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                    let v1189 : string = "viewBox=\"0 0 20 20\""
                    let v1190 : string = "fill=\"currentColor\""
                    let v1191 : string = "class=move || \" \".to_owned() + &v1187(())"
                    let v1192 : string = " " + v1188 + v43 + ""
                    let v1193 : string = " " + v1189 + v1192 + ""
                    let v1194 : string = " " + v1190 + v1193 + ""
                    let v1195 : string = " " + v1191 + v1194 + ""
                    let v1196 : string = "fill-rule=\"evenodd\""
                    let v1197 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
                    let v1198 : string = "clip-rule=\"evenodd\""
                    let v1199 : string = " " + v1196 + v43 + ""
                    let v1200 : string = " " + v1197 + v1199 + ""
                    let v1201 : string = " " + v1198 + v1200 + ""
                    let v1202 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1203 : string = "leptos::prelude::Fragment::new($0)"
                    let v1204 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1202 v1203 
                    let v1205 : string = "leptos::prelude::AnyView::from($0)"
                    let v1206 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1204 v1205 
                    let v1207 : string = "<" + v790 + " " + v1201 + ">move || { v1206 }</" + v790 + ">"
                    let v1208 : string = "leptos::prelude::view! { " + v1207 + " }"
                    let v1209 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1208 
                    let v1210 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v1209 |> unbox
                    let v1211 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1212 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1210 v1211 
                    let v1213 : Vec<leptos_prelude_AnyView_> = method173(v1212)
                    let v1214 : string = "leptos::prelude::Fragment::new($0)"
                    let v1215 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1213 v1214 
                    let v1216 : string = "leptos::prelude::AnyView::from($0)"
                    let v1217 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1215 v1216 
                    let v1218 : string = "<" + v819 + " " + v1195 + ">move || { v1217 }</" + v819 + ">"
                    let v1219 : string = "leptos::prelude::view! { " + v1218 + " }"
                    let v1220 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1219 
                    let v1221 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1220 |> unbox
                    let v1222 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1223 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1221 v1222 
                    let v1224 : Vec<leptos_prelude_AnyView_> = method173(v1223)
                    let v1225 : string = "leptos::prelude::Fragment::new($0)"
                    let v1226 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1224 v1225 
                    let v1227 : string = "leptos::prelude::AnyView::from($0)"
                    let v1228 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1226 v1227 
                    let v1229 : string = "<" + v945 + " " + v1185 + ">move || { v1228 }</" + v945 + ">"
                    let v1230 : string = "leptos::prelude::view! { " + v1229 + " }"
                    let v1231 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1230 
                    let v1232 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1231 |> unbox
                    let v1233 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1234 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1232 v1233 
                    let v1235 : Vec<leptos_prelude_AnyView_> = method176(v1183, v1234)
                    let v1236 : string = "leptos::prelude::Fragment::new($0)"
                    let v1237 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1235 v1236 
                    let v1238 : string = "leptos::prelude::AnyView::from($0)"
                    let v1239 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1237 v1238 
                    let v1240 : string = "<" + v1020 + " " + v1105 + ">move || { v1239 }</" + v1020 + ">"
                    let v1241 : string = "leptos::prelude::view! { " + v1240 + " }"
                    let v1242 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1241 
                    let v1243 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v1242 |> unbox
                    let v1244 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1245 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1243 v1244 
                    let v1246 : string = "class=\"flex flex-1 flex-col\""
                    let v1247 : string = " " + v1246 + v43 + ""
                    let v1248 : string = "Func0::new(move || $0())"
                    let v1249 : (unit -> leptos_dom_Fragment) = closure349(v738)
                    let v1250 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v1249 v1248 
                    let v1251 : Func0<leptos_dom_Fragment> = method184(v1250)
                    let v1252 : string = "(move || v1251())()"
                    let v1253 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v1252 
                    let v1254 : string = "leptos::prelude::AnyView::from($0)"
                    let v1255 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1253 v1254 
                    let v1256 : string = "<" + v865 + " " + v1247 + ">move || { v1255 }</" + v865 + ">"
                    let v1257 : string = "leptos::prelude::view! { " + v1256 + " }"
                    let v1258 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1257 
                    let v1259 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1258 |> unbox
                    let v1260 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1261 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1259 v1260 
                    let v1262 : Vec<leptos_prelude_AnyView_> = method176(v1245, v1261)
                    let v1263 : string = "leptos::prelude::Fragment::new($0)"
                    let v1264 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1262 v1263 
                    let v1265 : string = "leptos::prelude::AnyView::from($0)"
                    let v1266 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1264 v1265 
                    let v1267 : string = "<" + v1048 + " " + v1097 + ">move || { v1266 }</" + v1048 + ">"
                    let v1268 : string = "leptos::prelude::view! { " + v1267 + " }"
                    let v1269 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1268 
                    let v1270 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v1269 |> unbox
                    let v1271 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1272 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1270 v1271 
                    let v1273 : Vec<leptos_prelude_AnyView_> = method176(v1093, v1272)
                    let v1274 : string = "leptos::prelude::Fragment::new($0)"
                    let v1275 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1273 v1274 
                    let v1276 : string = "leptos::prelude::AnyView::from($0)"
                    let v1277 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1275 v1276 
                    let v1278 : string = "<" + v865 + " " + v1076 + ">move || { v1277 }</" + v865 + ">"
                    let v1279 : string = "leptos::prelude::view! { " + v1278 + " }"
                    let v1280 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1279 
                    let v1281 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1280 |> unbox
                    let v1282 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1283 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1281 v1282 
                    v1283
                else
                    let v1284 : Vec<leptos_prelude_AnyView_> = method172()
                    let v1285 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1286 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1284 v1285 
                    v1286
            let v1288 : Vec<leptos_prelude_AnyView_> = method176(v1065, v1287)
            let v1289 : string = "leptos::prelude::Fragment::new($0)"
            let v1290 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1288 v1289 
            US23_0(v1290)
        | _ ->
            US23_1
    let v2063 : leptos_prelude_AnyView_ =
        match v2046 with
        | US23_1 -> (* None *)
            let v2059 : Vec<leptos_prelude_AnyView_> = method172()
            let v2060 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2061 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2059 v2060 
            v2061
        | US23_0(v2047) -> (* Some *)
            let v2048 : string = "class=\"flex flex-1 flex-col [overflow-y:auto]\""
            let v2049 : string = " " + v2048 + v43 + ""
            let v2050 : string = "leptos::prelude::AnyView::from($0)"
            let v2051 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2047 v2050 
            let v2052 : string = "div"
            let v2053 : string = "<" + v2052 + " " + v2049 + ">move || { v2051 }</" + v2052 + ">"
            let v2054 : string = "leptos::prelude::view! { " + v2053 + " }"
            let v2055 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2054 
            let v2056 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2055 |> unbox
            let v2057 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2058 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2056 v2057 
            v2058
    let v2064 : Vec<leptos_prelude_AnyView_> = method173(v2063)
    let v2065 : string = "leptos::prelude::Fragment::new($0)"
    let v2066 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2064 v2065 
    let v2067 : string = "leptos::prelude::AnyView::from($0)"
    let v2068 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2066 v2067 
    let v2069 : string = "main"
    let v2070 : string = "<" + v2069 + " " + v86 + ">move || { v2068 }</" + v2069 + ">"
    let v2071 : string = "leptos::prelude::view! { " + v2070 + " }"
    let v2072 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2071 
    let v2073 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Main>> = v2072 |> unbox
    let v2074 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2075 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2073 v2074 
    let v2076 : string = "class=\"flex\""
    let v2077 : string = " " + v2076 + v43 + ""
    let v2078 : string = "menu_tabs.render ()"
    let v2079 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v2080 : bool = Fable.Core.RustInterop.emitRustExpr v2078 v2079 
    let v2081 : string = "leptos_router::hooks::use_location()"
    let v2082 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v2081 
    let v2083 : string = "$0"
    let v2084 : (unit -> string) = closure46(v2082)
    let v2085 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2084 v2083 
    let v2086 : string = "leptos::prelude::Memo::new(move |_| { v2085(()) })"
    let v2087 : leptos_prelude_Memo<string> = Fable.Core.RustInterop.emitRustExpr () v2086 
    let v2088 : string = "class=\"hidden\""
    let v2089 : string = " " + v2088 + v43 + ""
    let v2090 : string = "for=\"Tab\""
    let v2091 : string = "class=\"sr-only\""
    let v2092 : string = " " + v2090 + v43 + ""
    let v2093 : string = " " + v2091 + v2092 + ""
    let v2094 : string = "Tab"
    let v2095 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2096 : string = "&*$0"
    let v2097 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2094 v2096 
    let _v2095 = v2097 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2098 : string = "&*$0"
    let v2099 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2094 v2098 
    let _v2095 = v2099 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2100 : string = "&*$0"
    let v2101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2094 v2100 
    let _v2095 = v2101 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2102 : Ref<Str> = v2094 |> unbox<Ref<Str>>
    let _v2095 = v2102 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2105 : Ref<Str> = v2094 |> unbox<Ref<Str>>
    let _v2095 = v2105 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2108 : Ref<Str> = v2094 |> unbox<Ref<Str>>
    let _v2095 = v2108 
    #endif
#else
    let v2111 : Ref<Str> = v2094 |> unbox<Ref<Str>>
    let _v2095 = v2111 
    #endif
    let v2114 : Ref<Str> = _v2095 
    let v2119 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2120 : string = "String::from($0)"
    let v2121 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2114 v2120 
    let _v2119 = v2121 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2122 : string = "String::from($0)"
    let v2123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2114 v2122 
    let _v2119 = v2123 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2124 : string = "String::from($0)"
    let v2125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2114 v2124 
    let _v2119 = v2125 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2126 : std_string_String = v2114 |> unbox<std_string_String>
    let _v2119 = v2126 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2129 : std_string_String = v2114 |> unbox<std_string_String>
    let _v2119 = v2129 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2132 : std_string_String = v2114 |> unbox<std_string_String>
    let _v2119 = v2132 
    #endif
#else
    let v2135 : std_string_String = v2114 |> unbox<std_string_String>
    let _v2119 = v2135 
    #endif
    let v2138 : std_string_String = _v2119 
    let v2143 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v2144 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2138 v2143 
    let v2145 : Vec<leptos_prelude_AnyView_> = method173(v2144)
    let v2146 : string = "leptos::prelude::Fragment::new($0)"
    let v2147 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2145 v2146 
    let v2148 : string = "leptos::prelude::AnyView::from($0)"
    let v2149 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2147 v2148 
    let v2150 : string = "label"
    let v2151 : string = "<" + v2150 + " " + v2093 + ">move || { v2149 }</" + v2150 + ">"
    let v2152 : string = "leptos::prelude::view! { " + v2151 + " }"
    let v2153 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2152 
    let v2154 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v2153 |> unbox
    let v2155 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2156 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2154 v2155 
    let v2157 : string = "id=\"Tab\""
    let v2158 : string = "class=\"w-full rounded-md border-gray-200\""
    let v2159 : string = " " + v2157 + v43 + ""
    let v2160 : string = " " + v2158 + v2159 + ""
    let v2161 : (unit -> bool) = method272(v66)
    let v2162 : string = "selected=v2161()"
    let v2163 : string = " " + v2162 + v43 + ""
    let v2164 : string = "Settings"
    let v2165 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2166 : string = "&*$0"
    let v2167 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2166 
    let _v2165 = v2167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2168 : string = "&*$0"
    let v2169 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2168 
    let _v2165 = v2169 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2170 : string = "&*$0"
    let v2171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2170 
    let _v2165 = v2171 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2172 : Ref<Str> = v2164 |> unbox<Ref<Str>>
    let _v2165 = v2172 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2175 : Ref<Str> = v2164 |> unbox<Ref<Str>>
    let _v2165 = v2175 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2178 : Ref<Str> = v2164 |> unbox<Ref<Str>>
    let _v2165 = v2178 
    #endif
#else
    let v2181 : Ref<Str> = v2164 |> unbox<Ref<Str>>
    let _v2165 = v2181 
    #endif
    let v2184 : Ref<Str> = _v2165 
    let v2189 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2190 : string = "String::from($0)"
    let v2191 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2184 v2190 
    let _v2189 = v2191 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2192 : string = "String::from($0)"
    let v2193 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2184 v2192 
    let _v2189 = v2193 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2194 : string = "String::from($0)"
    let v2195 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2184 v2194 
    let _v2189 = v2195 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2196 : std_string_String = v2184 |> unbox<std_string_String>
    let _v2189 = v2196 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2199 : std_string_String = v2184 |> unbox<std_string_String>
    let _v2189 = v2199 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2202 : std_string_String = v2184 |> unbox<std_string_String>
    let _v2189 = v2202 
    #endif
#else
    let v2205 : std_string_String = v2184 |> unbox<std_string_String>
    let _v2189 = v2205 
    #endif
    let v2208 : std_string_String = _v2189 
    let v2213 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v2214 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2208 v2213 
    let v2215 : Vec<leptos_prelude_AnyView_> = method173(v2214)
    let v2216 : string = "leptos::prelude::Fragment::new($0)"
    let v2217 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2215 v2216 
    let v2218 : string = "leptos::prelude::AnyView::from($0)"
    let v2219 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2217 v2218 
    let v2220 : string = "option"
    let v2221 : string = "<" + v2220 + " " + v2163 + ">move || { v2219 }</" + v2220 + ">"
    let v2222 : string = "leptos::prelude::view! { " + v2221 + " }"
    let v2223 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2222 
    let v2224 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v2223 |> unbox
    let v2225 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2226 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2224 v2225 
    let v2227 : (unit -> bool) = method273(v66)
    let v2228 : string = "selected=v2227()"
    let v2229 : string = " " + v2228 + v43 + ""
    let v2230 : string = "Transactions"
    let v2231 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2232 : string = "&*$0"
    let v2233 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2230 v2232 
    let _v2231 = v2233 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2234 : string = "&*$0"
    let v2235 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2230 v2234 
    let _v2231 = v2235 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2236 : string = "&*$0"
    let v2237 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2230 v2236 
    let _v2231 = v2237 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2238 : Ref<Str> = v2230 |> unbox<Ref<Str>>
    let _v2231 = v2238 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2241 : Ref<Str> = v2230 |> unbox<Ref<Str>>
    let _v2231 = v2241 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2244 : Ref<Str> = v2230 |> unbox<Ref<Str>>
    let _v2231 = v2244 
    #endif
#else
    let v2247 : Ref<Str> = v2230 |> unbox<Ref<Str>>
    let _v2231 = v2247 
    #endif
    let v2250 : Ref<Str> = _v2231 
    let v2255 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2256 : string = "String::from($0)"
    let v2257 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2250 v2256 
    let _v2255 = v2257 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2258 : string = "String::from($0)"
    let v2259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2250 v2258 
    let _v2255 = v2259 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2260 : string = "String::from($0)"
    let v2261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2250 v2260 
    let _v2255 = v2261 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2262 : std_string_String = v2250 |> unbox<std_string_String>
    let _v2255 = v2262 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2265 : std_string_String = v2250 |> unbox<std_string_String>
    let _v2255 = v2265 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2268 : std_string_String = v2250 |> unbox<std_string_String>
    let _v2255 = v2268 
    #endif
#else
    let v2271 : std_string_String = v2250 |> unbox<std_string_String>
    let _v2255 = v2271 
    #endif
    let v2274 : std_string_String = _v2255 
    let v2279 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v2280 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2274 v2279 
    let v2281 : Vec<leptos_prelude_AnyView_> = method173(v2280)
    let v2282 : string = "leptos::prelude::Fragment::new($0)"
    let v2283 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2281 v2282 
    let v2284 : string = "leptos::prelude::AnyView::from($0)"
    let v2285 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2283 v2284 
    let v2286 : string = "<" + v2220 + " " + v2229 + ">move || { v2285 }</" + v2220 + ">"
    let v2287 : string = "leptos::prelude::view! { " + v2286 + " }"
    let v2288 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2287 
    let v2289 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v2288 |> unbox
    let v2290 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2291 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2289 v2290 
    let v2292 : (unit -> bool) = method274(v66)
    let v2293 : string = "selected=v2292()"
    let v2294 : string = " " + v2293 + v43 + ""
    let v2295 : string = "Lists"
    let v2296 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2297 : string = "&*$0"
    let v2298 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2295 v2297 
    let _v2296 = v2298 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2299 : string = "&*$0"
    let v2300 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2295 v2299 
    let _v2296 = v2300 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2301 : string = "&*$0"
    let v2302 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2295 v2301 
    let _v2296 = v2302 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2303 : Ref<Str> = v2295 |> unbox<Ref<Str>>
    let _v2296 = v2303 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2306 : Ref<Str> = v2295 |> unbox<Ref<Str>>
    let _v2296 = v2306 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2309 : Ref<Str> = v2295 |> unbox<Ref<Str>>
    let _v2296 = v2309 
    #endif
#else
    let v2312 : Ref<Str> = v2295 |> unbox<Ref<Str>>
    let _v2296 = v2312 
    #endif
    let v2315 : Ref<Str> = _v2296 
    let v2320 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2321 : string = "String::from($0)"
    let v2322 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2315 v2321 
    let _v2320 = v2322 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2323 : string = "String::from($0)"
    let v2324 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2315 v2323 
    let _v2320 = v2324 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2325 : string = "String::from($0)"
    let v2326 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2315 v2325 
    let _v2320 = v2326 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2327 : std_string_String = v2315 |> unbox<std_string_String>
    let _v2320 = v2327 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2330 : std_string_String = v2315 |> unbox<std_string_String>
    let _v2320 = v2330 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2333 : std_string_String = v2315 |> unbox<std_string_String>
    let _v2320 = v2333 
    #endif
#else
    let v2336 : std_string_String = v2315 |> unbox<std_string_String>
    let _v2320 = v2336 
    #endif
    let v2339 : std_string_String = _v2320 
    let v2344 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v2345 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2339 v2344 
    let v2346 : Vec<leptos_prelude_AnyView_> = method173(v2345)
    let v2347 : string = "leptos::prelude::Fragment::new($0)"
    let v2348 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2346 v2347 
    let v2349 : string = "leptos::prelude::AnyView::from($0)"
    let v2350 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2348 v2349 
    let v2351 : string = "<" + v2220 + " " + v2294 + ">move || { v2350 }</" + v2220 + ">"
    let v2352 : string = "leptos::prelude::view! { " + v2351 + " }"
    let v2353 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2352 
    let v2354 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v2353 |> unbox
    let v2355 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2356 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2354 v2355 
    let v2357 : (unit -> bool) = method275(v66)
    let v2358 : string = "selected=v2357()"
    let v2359 : string = " " + v2358 + v43 + ""
    let v2360 : string = "Dice"
    let v2361 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2362 : string = "&*$0"
    let v2363 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2360 v2362 
    let _v2361 = v2363 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2364 : string = "&*$0"
    let v2365 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2360 v2364 
    let _v2361 = v2365 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2366 : string = "&*$0"
    let v2367 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2360 v2366 
    let _v2361 = v2367 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2368 : Ref<Str> = v2360 |> unbox<Ref<Str>>
    let _v2361 = v2368 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2371 : Ref<Str> = v2360 |> unbox<Ref<Str>>
    let _v2361 = v2371 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2374 : Ref<Str> = v2360 |> unbox<Ref<Str>>
    let _v2361 = v2374 
    #endif
#else
    let v2377 : Ref<Str> = v2360 |> unbox<Ref<Str>>
    let _v2361 = v2377 
    #endif
    let v2380 : Ref<Str> = _v2361 
    let v2385 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2386 : string = "String::from($0)"
    let v2387 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2380 v2386 
    let _v2385 = v2387 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2388 : string = "String::from($0)"
    let v2389 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2380 v2388 
    let _v2385 = v2389 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2390 : string = "String::from($0)"
    let v2391 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2380 v2390 
    let _v2385 = v2391 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2392 : std_string_String = v2380 |> unbox<std_string_String>
    let _v2385 = v2392 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2395 : std_string_String = v2380 |> unbox<std_string_String>
    let _v2385 = v2395 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2398 : std_string_String = v2380 |> unbox<std_string_String>
    let _v2385 = v2398 
    #endif
#else
    let v2401 : std_string_String = v2380 |> unbox<std_string_String>
    let _v2385 = v2401 
    #endif
    let v2404 : std_string_String = _v2385 
    let v2409 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v2410 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2404 v2409 
    let v2411 : Vec<leptos_prelude_AnyView_> = method173(v2410)
    let v2412 : string = "leptos::prelude::Fragment::new($0)"
    let v2413 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2411 v2412 
    let v2414 : string = "leptos::prelude::AnyView::from($0)"
    let v2415 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2413 v2414 
    let v2416 : string = "<" + v2220 + " " + v2359 + ">move || { v2415 }</" + v2220 + ">"
    let v2417 : string = "leptos::prelude::view! { " + v2416 + " }"
    let v2418 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2417 
    let v2419 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v2418 |> unbox
    let v2420 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2421 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2419 v2420 
    let v2422 : Vec<leptos_prelude_AnyView_> = method276(v2421, v2356, v2291, v2226)
    let v2423 : string = "leptos::prelude::Fragment::new($0)"
    let v2424 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2422 v2423 
    let v2425 : string = "leptos::prelude::AnyView::from($0)"
    let v2426 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2424 v2425 
    let v2427 : string = "select"
    let v2428 : string = "<" + v2427 + " " + v2160 + ">move || { v2426 }</" + v2427 + ">"
    let v2429 : string = "leptos::prelude::view! { " + v2428 + " }"
    let v2430 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2429 
    let v2431 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Select>> = v2430 |> unbox
    let v2432 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2433 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2431 v2432 
    let v2434 : Vec<leptos_prelude_AnyView_> = method176(v2156, v2433)
    let v2435 : string = "leptos::prelude::Fragment::new($0)"
    let v2436 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2434 v2435 
    let v2437 : string = "leptos::prelude::AnyView::from($0)"
    let v2438 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2436 v2437 
    let v2439 : string = "div"
    let v2440 : string = "<" + v2439 + " " + v2089 + ">move || { v2438 }</" + v2439 + ">"
    let v2441 : string = "leptos::prelude::view! { " + v2440 + " }"
    let v2442 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2441 
    let v2443 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2442 |> unbox
    let v2444 : string = "class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\""
    let v2445 : string = " " + v2444 + v43 + ""
    let v2446 : string = "class=\"flex flex-1 border-t border-gray-200\""
    let v2447 : string = " " + v2446 + v43 + ""
    let v2448 : string = "class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\""
    let v2449 : string = "aria-label=\"Tabs\""
    let v2450 : string = " " + v2448 + v43 + ""
    let v2451 : string = " " + v2449 + v2450 + ""
    let v2452 : string = "$0"
    let v2453 : (unit -> string) = closure357()
    let v2454 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2453 v2452 
    let v2455 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v2456 : string = "fill=\"none\""
    let v2457 : string = "viewBox=\"0 0 24 24\""
    let v2458 : string = "stroke-width=\"1.5\""
    let v2459 : string = "stroke=\"currentColor\""
    let v2460 : string = "class=move || \" \".to_owned() + &v2454(())"
    let v2461 : string = " " + v2455 + v43 + ""
    let v2462 : string = " " + v2456 + v2461 + ""
    let v2463 : string = " " + v2457 + v2462 + ""
    let v2464 : string = " " + v2458 + v2463 + ""
    let v2465 : string = " " + v2459 + v2464 + ""
    let v2466 : string = " " + v2460 + v2465 + ""
    let v2467 : string = "stroke-linecap=\"round\""
    let v2468 : string = "stroke-linejoin=\"round\""
    let v2469 : string = "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\""
    let v2470 : string = " " + v2467 + v43 + ""
    let v2471 : string = " " + v2468 + v2470 + ""
    let v2472 : string = " " + v2469 + v2471 + ""
    let v2473 : Vec<leptos_prelude_AnyView_> = method172()
    let v2474 : string = "leptos::prelude::Fragment::new($0)"
    let v2475 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2473 v2474 
    let v2476 : string = "leptos::prelude::AnyView::from($0)"
    let v2477 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2475 v2476 
    let v2478 : string = "path"
    let v2479 : string = "<" + v2478 + " " + v2472 + ">move || { v2477 }</" + v2478 + ">"
    let v2480 : string = "leptos::prelude::view! { " + v2479 + " }"
    let v2481 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2480 
    let v2482 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v2481 |> unbox
    let v2483 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2484 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2482 v2483 
    let v2485 : string = "stroke-linecap=\"round\""
    let v2486 : string = "stroke-linejoin=\"round\""
    let v2487 : string = "d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\""
    let v2488 : string = " " + v2485 + v43 + ""
    let v2489 : string = " " + v2486 + v2488 + ""
    let v2490 : string = " " + v2487 + v2489 + ""
    let v2491 : Vec<leptos_prelude_AnyView_> = method172()
    let v2492 : string = "leptos::prelude::Fragment::new($0)"
    let v2493 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2491 v2492 
    let v2494 : string = "leptos::prelude::AnyView::from($0)"
    let v2495 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2493 v2494 
    let v2496 : string = "<" + v2478 + " " + v2490 + ">move || { v2495 }</" + v2478 + ">"
    let v2497 : string = "leptos::prelude::view! { " + v2496 + " }"
    let v2498 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2497 
    let v2499 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v2498 |> unbox
    let v2500 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2501 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2499 v2500 
    let v2502 : Vec<leptos_prelude_AnyView_> = method176(v2484, v2501)
    let v2503 : string = "leptos::prelude::Fragment::new($0)"
    let v2504 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2502 v2503 
    let v2505 : string = "leptos::prelude::AnyView::from($0)"
    let v2506 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2504 v2505 
    let v2507 : string = "svg"
    let v2508 : string = "<" + v2507 + " " + v2466 + ">move || { v2506 }</" + v2507 + ">"
    let v2509 : string = "leptos::prelude::view! { " + v2508 + " }"
    let v2510 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2509 
    let v2511 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v2510 |> unbox
    let v2512 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2513 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2511 v2512 
    let v2514 : Vec<leptos_prelude_AnyView_> = method173(v2513)
    let v2515 : string = "leptos::prelude::Fragment::new($0)"
    let v2516 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2514 v2515 
    let v2517 : (unit -> std_string_String) = closure358(v2087)
    let v2518 : string = "let v2517 = $0"
    Fable.Core.RustInterop.emitRustExpr v2517 v2518 
    let v2519 : string = "$0"
    let v2520 : (unit -> bool) = closure359(v66)
    let v2521 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v2520 v2519 
    let v2522 : string = "$0"
    let v2523 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure360(v66)
    let v2524 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v2523 v2522 
    let v2525 : string = "href=move || v2517()"
    let v2526 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v2524(())"
    let v2527 : string = "aria-current=move || if v2521(()) { \"page\" } else { \"\" }"
    let v2528 : string = " " + v2525 + v43 + ""
    let v2529 : string = " " + v2526 + v2528 + ""
    let v2530 : string = " " + v2527 + v2529 + ""
    let v2531 : string = "leptos::prelude::AnyView::from($0)"
    let v2532 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2516 v2531 
    let v2533 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2534 : string = "&*$0"
    let v2535 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2534 
    let _v2533 = v2535 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2536 : string = "&*$0"
    let v2537 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2536 
    let _v2533 = v2537 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2538 : string = "&*$0"
    let v2539 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2164 v2538 
    let _v2533 = v2539 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2540 : Ref<Str> = v2164 |> unbox<Ref<Str>>
    let _v2533 = v2540 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2543 : Ref<Str> = v2164 |> unbox<Ref<Str>>
    let _v2533 = v2543 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2546 : Ref<Str> = v2164 |> unbox<Ref<Str>>
    let _v2533 = v2546 
    #endif
#else
    let v2549 : Ref<Str> = v2164 |> unbox<Ref<Str>>
    let _v2533 = v2549 
    #endif
    let v2552 : Ref<Str> = _v2533 
    let v2557 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2558 : string = "String::from($0)"
    let v2559 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2552 v2558 
    let _v2557 = v2559 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2560 : string = "String::from($0)"
    let v2561 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2552 v2560 
    let _v2557 = v2561 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2562 : string = "String::from($0)"
    let v2563 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2552 v2562 
    let _v2557 = v2563 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2564 : std_string_String = v2552 |> unbox<std_string_String>
    let _v2557 = v2564 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2567 : std_string_String = v2552 |> unbox<std_string_String>
    let _v2557 = v2567 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2570 : std_string_String = v2552 |> unbox<std_string_String>
    let _v2557 = v2570 
    #endif
#else
    let v2573 : std_string_String = v2552 |> unbox<std_string_String>
    let _v2557 = v2573 
    #endif
    let v2576 : std_string_String = _v2557 
    let v2581 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v2582 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2576 v2581 
    let v2583 : Vec<leptos_prelude_AnyView_> = method176(v2532, v2582)
    let v2584 : string = "leptos::prelude::Fragment::new($0)"
    let v2585 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2583 v2584 
    let v2586 : string = "leptos::prelude::AnyView::from($0)"
    let v2587 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2585 v2586 
    let v2588 : string = "a"
    let v2589 : string = "<" + v2588 + " " + v2530 + ">move || { v2587 }</" + v2588 + ">"
    let v2590 : string = "leptos::prelude::view! { " + v2589 + " }"
    let v2591 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2590 
    let v2592 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v2591 |> unbox
    let v2593 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2594 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2592 v2593 
    let v2595 : string = "$0"
    let v2596 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2453 v2595 
    let v2597 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v2598 : string = "fill=\"none\""
    let v2599 : string = "height=\"100%\""
    let v2600 : string = "viewBox=\"0 0 24 24\""
    let v2601 : string = "stroke-width=\"1.5\""
    let v2602 : string = "stroke=\"currentColor\""
    let v2603 : string = "class=move || \"text-gray-700 \".to_owned() + &v2596(())"
    let v2604 : string = " " + v2597 + v43 + ""
    let v2605 : string = " " + v2598 + v2604 + ""
    let v2606 : string = " " + v2599 + v2605 + ""
    let v2607 : string = " " + v2600 + v2606 + ""
    let v2608 : string = " " + v2601 + v2607 + ""
    let v2609 : string = " " + v2602 + v2608 + ""
    let v2610 : string = " " + v2603 + v2609 + ""
    let v2611 : string = "stroke-linecap=\"round\""
    let v2612 : string = "stroke-linejoin=\"round\""
    let v2613 : string = "d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\""
    let v2614 : string = " " + v2611 + v43 + ""
    let v2615 : string = " " + v2612 + v2614 + ""
    let v2616 : string = " " + v2613 + v2615 + ""
    let v2617 : Vec<leptos_prelude_AnyView_> = method172()
    let v2618 : string = "leptos::prelude::Fragment::new($0)"
    let v2619 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2617 v2618 
    let v2620 : string = "leptos::prelude::AnyView::from($0)"
    let v2621 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2619 v2620 
    let v2622 : string = "<" + v2478 + " " + v2616 + ">move || { v2621 }</" + v2478 + ">"
    let v2623 : string = "leptos::prelude::view! { " + v2622 + " }"
    let v2624 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2623 
    let v2625 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v2624 |> unbox
    let v2626 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2627 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2625 v2626 
    let v2628 : Vec<leptos_prelude_AnyView_> = method173(v2627)
    let v2629 : string = "leptos::prelude::Fragment::new($0)"
    let v2630 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2628 v2629 
    let v2631 : string = "leptos::prelude::AnyView::from($0)"
    let v2632 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2630 v2631 
    let v2633 : string = "<" + v2507 + " " + v2610 + ">move || { v2632 }</" + v2507 + ">"
    let v2634 : string = "leptos::prelude::view! { " + v2633 + " }"
    let v2635 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2634 
    let v2636 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v2635 |> unbox
    let v2637 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2638 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2636 v2637 
    let v2639 : Vec<leptos_prelude_AnyView_> = method173(v2638)
    let v2640 : string = "leptos::prelude::Fragment::new($0)"
    let v2641 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2639 v2640 
    let v2642 : (unit -> std_string_String) = closure361(v2087)
    let v2643 : string = "let v2642 = $0"
    Fable.Core.RustInterop.emitRustExpr v2642 v2643 
    let v2644 : string = "$0"
    let v2645 : (unit -> bool) = closure362(v66)
    let v2646 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v2645 v2644 
    let v2647 : string = "$0"
    let v2648 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure363(v66)
    let v2649 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v2648 v2647 
    let v2650 : string = "href=move || v2642()"
    let v2651 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v2649(())"
    let v2652 : string = "aria-current=move || if v2646(()) { \"page\" } else { \"\" }"
    let v2653 : string = " " + v2650 + v43 + ""
    let v2654 : string = " " + v2651 + v2653 + ""
    let v2655 : string = " " + v2652 + v2654 + ""
    let v2656 : string = "leptos::prelude::AnyView::from($0)"
    let v2657 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2641 v2656 
    let v2658 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2659 : string = "&*$0"
    let v2660 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2230 v2659 
    let _v2658 = v2660 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2661 : string = "&*$0"
    let v2662 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2230 v2661 
    let _v2658 = v2662 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2663 : string = "&*$0"
    let v2664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2230 v2663 
    let _v2658 = v2664 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2665 : Ref<Str> = v2230 |> unbox<Ref<Str>>
    let _v2658 = v2665 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2668 : Ref<Str> = v2230 |> unbox<Ref<Str>>
    let _v2658 = v2668 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2671 : Ref<Str> = v2230 |> unbox<Ref<Str>>
    let _v2658 = v2671 
    #endif
#else
    let v2674 : Ref<Str> = v2230 |> unbox<Ref<Str>>
    let _v2658 = v2674 
    #endif
    let v2677 : Ref<Str> = _v2658 
    let v2682 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2683 : string = "String::from($0)"
    let v2684 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2677 v2683 
    let _v2682 = v2684 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2685 : string = "String::from($0)"
    let v2686 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2677 v2685 
    let _v2682 = v2686 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2687 : string = "String::from($0)"
    let v2688 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2677 v2687 
    let _v2682 = v2688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2689 : std_string_String = v2677 |> unbox<std_string_String>
    let _v2682 = v2689 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2692 : std_string_String = v2677 |> unbox<std_string_String>
    let _v2682 = v2692 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2695 : std_string_String = v2677 |> unbox<std_string_String>
    let _v2682 = v2695 
    #endif
#else
    let v2698 : std_string_String = v2677 |> unbox<std_string_String>
    let _v2682 = v2698 
    #endif
    let v2701 : std_string_String = _v2682 
    let v2706 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v2707 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2701 v2706 
    let v2708 : Vec<leptos_prelude_AnyView_> = method176(v2657, v2707)
    let v2709 : string = "leptos::prelude::Fragment::new($0)"
    let v2710 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2708 v2709 
    let v2711 : string = "leptos::prelude::AnyView::from($0)"
    let v2712 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2710 v2711 
    let v2713 : string = "<" + v2588 + " " + v2655 + ">move || { v2712 }</" + v2588 + ">"
    let v2714 : string = "leptos::prelude::view! { " + v2713 + " }"
    let v2715 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2714 
    let v2716 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v2715 |> unbox
    let v2717 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2718 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2716 v2717 
    let v2719 : string = "$0"
    let v2720 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2453 v2719 
    let v2721 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v2722 : string = "fill=\"none\""
    let v2723 : string = "height=\"100%\""
    let v2724 : string = "viewBox=\"0 0 24 24\""
    let v2725 : string = "stroke-width=\"1.5\""
    let v2726 : string = "stroke=\"currentColor\""
    let v2727 : string = "class=move || \"text-gray-700 \".to_owned() + &v2720(())"
    let v2728 : string = " " + v2721 + v43 + ""
    let v2729 : string = " " + v2722 + v2728 + ""
    let v2730 : string = " " + v2723 + v2729 + ""
    let v2731 : string = " " + v2724 + v2730 + ""
    let v2732 : string = " " + v2725 + v2731 + ""
    let v2733 : string = " " + v2726 + v2732 + ""
    let v2734 : string = " " + v2727 + v2733 + ""
    let v2735 : string = "stroke-linecap=\"round\""
    let v2736 : string = "stroke-linejoin=\"round\""
    let v2737 : string = "d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\""
    let v2738 : string = " " + v2735 + v43 + ""
    let v2739 : string = " " + v2736 + v2738 + ""
    let v2740 : string = " " + v2737 + v2739 + ""
    let v2741 : Vec<leptos_prelude_AnyView_> = method172()
    let v2742 : string = "leptos::prelude::Fragment::new($0)"
    let v2743 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2741 v2742 
    let v2744 : string = "leptos::prelude::AnyView::from($0)"
    let v2745 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2743 v2744 
    let v2746 : string = "<" + v2478 + " " + v2740 + ">move || { v2745 }</" + v2478 + ">"
    let v2747 : string = "leptos::prelude::view! { " + v2746 + " }"
    let v2748 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2747 
    let v2749 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v2748 |> unbox
    let v2750 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2751 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2749 v2750 
    let v2752 : string = "cx=\"3\""
    let v2753 : string = "cy=\"6.75\""
    let v2754 : string = "r=\"1\""
    let v2755 : string = "fill=\"currentColor\""
    let v2756 : string = " " + v2752 + v43 + ""
    let v2757 : string = " " + v2753 + v2756 + ""
    let v2758 : string = " " + v2754 + v2757 + ""
    let v2759 : string = " " + v2755 + v2758 + ""
    let v2760 : Vec<leptos_prelude_AnyView_> = method172()
    let v2761 : string = "leptos::prelude::Fragment::new($0)"
    let v2762 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2760 v2761 
    let v2763 : string = "leptos::prelude::AnyView::from($0)"
    let v2764 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2762 v2763 
    let v2765 : string = "circle"
    let v2766 : string = "<" + v2765 + " " + v2759 + ">move || { v2764 }</" + v2765 + ">"
    let v2767 : string = "leptos::prelude::view! { " + v2766 + " }"
    let v2768 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2767 
    let v2769 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v2768 |> unbox
    let v2770 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2771 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2769 v2770 
    let v2772 : string = "cx=\"3\""
    let v2773 : string = "cy=\"12\""
    let v2774 : string = "r=\"1\""
    let v2775 : string = "fill=\"currentColor\""
    let v2776 : string = " " + v2772 + v43 + ""
    let v2777 : string = " " + v2773 + v2776 + ""
    let v2778 : string = " " + v2774 + v2777 + ""
    let v2779 : string = " " + v2775 + v2778 + ""
    let v2780 : Vec<leptos_prelude_AnyView_> = method172()
    let v2781 : string = "leptos::prelude::Fragment::new($0)"
    let v2782 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2780 v2781 
    let v2783 : string = "leptos::prelude::AnyView::from($0)"
    let v2784 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2782 v2783 
    let v2785 : string = "<" + v2765 + " " + v2779 + ">move || { v2784 }</" + v2765 + ">"
    let v2786 : string = "leptos::prelude::view! { " + v2785 + " }"
    let v2787 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2786 
    let v2788 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v2787 |> unbox
    let v2789 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2790 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2788 v2789 
    let v2791 : string = "cx=\"3\""
    let v2792 : string = "cy=\"17.25\""
    let v2793 : string = "r=\"1\""
    let v2794 : string = "fill=\"currentColor\""
    let v2795 : string = " " + v2791 + v43 + ""
    let v2796 : string = " " + v2792 + v2795 + ""
    let v2797 : string = " " + v2793 + v2796 + ""
    let v2798 : string = " " + v2794 + v2797 + ""
    let v2799 : Vec<leptos_prelude_AnyView_> = method172()
    let v2800 : string = "leptos::prelude::Fragment::new($0)"
    let v2801 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2799 v2800 
    let v2802 : string = "leptos::prelude::AnyView::from($0)"
    let v2803 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2801 v2802 
    let v2804 : string = "<" + v2765 + " " + v2798 + ">move || { v2803 }</" + v2765 + ">"
    let v2805 : string = "leptos::prelude::view! { " + v2804 + " }"
    let v2806 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2805 
    let v2807 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v2806 |> unbox
    let v2808 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2809 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2807 v2808 
    let v2810 : Vec<leptos_prelude_AnyView_> = method276(v2751, v2771, v2790, v2809)
    let v2811 : string = "leptos::prelude::Fragment::new($0)"
    let v2812 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2810 v2811 
    let v2813 : string = "leptos::prelude::AnyView::from($0)"
    let v2814 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2812 v2813 
    let v2815 : string = "<" + v2507 + " " + v2734 + ">move || { v2814 }</" + v2507 + ">"
    let v2816 : string = "leptos::prelude::view! { " + v2815 + " }"
    let v2817 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2816 
    let v2818 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v2817 |> unbox
    let v2819 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2820 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2818 v2819 
    let v2821 : Vec<leptos_prelude_AnyView_> = method173(v2820)
    let v2822 : string = "leptos::prelude::Fragment::new($0)"
    let v2823 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2821 v2822 
    let v2824 : (unit -> std_string_String) = closure364(v2087)
    let v2825 : string = "let v2824 = $0"
    Fable.Core.RustInterop.emitRustExpr v2824 v2825 
    let v2826 : string = "$0"
    let v2827 : (unit -> bool) = closure365(v66)
    let v2828 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v2827 v2826 
    let v2829 : string = "$0"
    let v2830 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure366(v66)
    let v2831 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v2830 v2829 
    let v2832 : string = "href=move || v2824()"
    let v2833 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v2831(())"
    let v2834 : string = "aria-current=move || if v2828(()) { \"page\" } else { \"\" }"
    let v2835 : string = " " + v2832 + v43 + ""
    let v2836 : string = " " + v2833 + v2835 + ""
    let v2837 : string = " " + v2834 + v2836 + ""
    let v2838 : string = "leptos::prelude::AnyView::from($0)"
    let v2839 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2823 v2838 
    let v2840 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2841 : string = "&*$0"
    let v2842 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2295 v2841 
    let _v2840 = v2842 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2843 : string = "&*$0"
    let v2844 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2295 v2843 
    let _v2840 = v2844 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2845 : string = "&*$0"
    let v2846 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2295 v2845 
    let _v2840 = v2846 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2847 : Ref<Str> = v2295 |> unbox<Ref<Str>>
    let _v2840 = v2847 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2850 : Ref<Str> = v2295 |> unbox<Ref<Str>>
    let _v2840 = v2850 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2853 : Ref<Str> = v2295 |> unbox<Ref<Str>>
    let _v2840 = v2853 
    #endif
#else
    let v2856 : Ref<Str> = v2295 |> unbox<Ref<Str>>
    let _v2840 = v2856 
    #endif
    let v2859 : Ref<Str> = _v2840 
    let v2864 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2865 : string = "String::from($0)"
    let v2866 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2859 v2865 
    let _v2864 = v2866 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v2867 : string = "String::from($0)"
    let v2868 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2859 v2867 
    let _v2864 = v2868 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v2869 : string = "String::from($0)"
    let v2870 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2859 v2869 
    let _v2864 = v2870 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v2871 : std_string_String = v2859 |> unbox<std_string_String>
    let _v2864 = v2871 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2874 : std_string_String = v2859 |> unbox<std_string_String>
    let _v2864 = v2874 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2877 : std_string_String = v2859 |> unbox<std_string_String>
    let _v2864 = v2877 
    #endif
#else
    let v2880 : std_string_String = v2859 |> unbox<std_string_String>
    let _v2864 = v2880 
    #endif
    let v2883 : std_string_String = _v2864 
    let v2888 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v2889 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2883 v2888 
    let v2890 : Vec<leptos_prelude_AnyView_> = method176(v2839, v2889)
    let v2891 : string = "leptos::prelude::Fragment::new($0)"
    let v2892 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2890 v2891 
    let v2893 : string = "leptos::prelude::AnyView::from($0)"
    let v2894 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2892 v2893 
    let v2895 : string = "<" + v2588 + " " + v2837 + ">move || { v2894 }</" + v2588 + ">"
    let v2896 : string = "leptos::prelude::view! { " + v2895 + " }"
    let v2897 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2896 
    let v2898 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v2897 |> unbox
    let v2899 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2900 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2898 v2899 
    let v2901 : string = "$0"
    let v2902 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2453 v2901 
    let v2903 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v2904 : string = "fill=\"none\""
    let v2905 : string = "viewBox=\"0 0 24 24\""
    let v2906 : string = "stroke-width=\"1.5\""
    let v2907 : string = "stroke=\"currentColor\""
    let v2908 : string = "class=move || \" \".to_owned() + &v2902(())"
    let v2909 : string = " " + v2903 + v43 + ""
    let v2910 : string = " " + v2904 + v2909 + ""
    let v2911 : string = " " + v2905 + v2910 + ""
    let v2912 : string = " " + v2906 + v2911 + ""
    let v2913 : string = " " + v2907 + v2912 + ""
    let v2914 : string = " " + v2908 + v2913 + ""
    let v2915 : string = "x=\"3\""
    let v2916 : string = "y=\"3\""
    let v2917 : string = "width=\"18\""
    let v2918 : string = "height=\"18\""
    let v2919 : string = "rx=\"2\""
    let v2920 : string = "stroke-linecap=\"round\""
    let v2921 : string = "stroke-linejoin=\"round\""
    let v2922 : string = " " + v2915 + v43 + ""
    let v2923 : string = " " + v2916 + v2922 + ""
    let v2924 : string = " " + v2917 + v2923 + ""
    let v2925 : string = " " + v2918 + v2924 + ""
    let v2926 : string = " " + v2919 + v2925 + ""
    let v2927 : string = " " + v2920 + v2926 + ""
    let v2928 : string = " " + v2921 + v2927 + ""
    let v2929 : Vec<leptos_prelude_AnyView_> = method172()
    let v2930 : string = "leptos::prelude::Fragment::new($0)"
    let v2931 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2929 v2930 
    let v2932 : string = "leptos::prelude::AnyView::from($0)"
    let v2933 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2931 v2932 
    let v2934 : string = "rect"
    let v2935 : string = "<" + v2934 + " " + v2928 + ">move || { v2933 }</" + v2934 + ">"
    let v2936 : string = "leptos::prelude::view! { " + v2935 + " }"
    let v2937 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2936 
    let v2938 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v2937 |> unbox
    let v2939 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2940 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2938 v2939 
    let v2941 : string = "cx=\"7.5\""
    let v2942 : string = "cy=\"7.5\""
    let v2943 : string = "r=\"1.5\""
    let v2944 : string = "fill=\"currentColor\""
    let v2945 : string = " " + v2941 + v43 + ""
    let v2946 : string = " " + v2942 + v2945 + ""
    let v2947 : string = " " + v2943 + v2946 + ""
    let v2948 : string = " " + v2944 + v2947 + ""
    let v2949 : Vec<leptos_prelude_AnyView_> = method172()
    let v2950 : string = "leptos::prelude::Fragment::new($0)"
    let v2951 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2949 v2950 
    let v2952 : string = "leptos::prelude::AnyView::from($0)"
    let v2953 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2951 v2952 
    let v2954 : string = "<" + v2765 + " " + v2948 + ">move || { v2953 }</" + v2765 + ">"
    let v2955 : string = "leptos::prelude::view! { " + v2954 + " }"
    let v2956 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2955 
    let v2957 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v2956 |> unbox
    let v2958 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2959 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2957 v2958 
    let v2960 : string = "cx=\"16.5\""
    let v2961 : string = "cy=\"7.5\""
    let v2962 : string = "r=\"1.5\""
    let v2963 : string = "fill=\"currentColor\""
    let v2964 : string = " " + v2960 + v43 + ""
    let v2965 : string = " " + v2961 + v2964 + ""
    let v2966 : string = " " + v2962 + v2965 + ""
    let v2967 : string = " " + v2963 + v2966 + ""
    let v2968 : Vec<leptos_prelude_AnyView_> = method172()
    let v2969 : string = "leptos::prelude::Fragment::new($0)"
    let v2970 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2968 v2969 
    let v2971 : string = "leptos::prelude::AnyView::from($0)"
    let v2972 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2970 v2971 
    let v2973 : string = "<" + v2765 + " " + v2967 + ">move || { v2972 }</" + v2765 + ">"
    let v2974 : string = "leptos::prelude::view! { " + v2973 + " }"
    let v2975 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2974 
    let v2976 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v2975 |> unbox
    let v2977 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2978 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2976 v2977 
    let v2979 : string = "cx=\"12\""
    let v2980 : string = "cy=\"12\""
    let v2981 : string = "r=\"1.5\""
    let v2982 : string = "fill=\"currentColor\""
    let v2983 : string = " " + v2979 + v43 + ""
    let v2984 : string = " " + v2980 + v2983 + ""
    let v2985 : string = " " + v2981 + v2984 + ""
    let v2986 : string = " " + v2982 + v2985 + ""
    let v2987 : Vec<leptos_prelude_AnyView_> = method172()
    let v2988 : string = "leptos::prelude::Fragment::new($0)"
    let v2989 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2987 v2988 
    let v2990 : string = "leptos::prelude::AnyView::from($0)"
    let v2991 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2989 v2990 
    let v2992 : string = "<" + v2765 + " " + v2986 + ">move || { v2991 }</" + v2765 + ">"
    let v2993 : string = "leptos::prelude::view! { " + v2992 + " }"
    let v2994 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2993 
    let v2995 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v2994 |> unbox
    let v2996 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2997 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2995 v2996 
    let v2998 : string = "cx=\"7.5\""
    let v2999 : string = "cy=\"16.5\""
    let v3000 : string = "r=\"1.5\""
    let v3001 : string = "fill=\"currentColor\""
    let v3002 : string = " " + v2998 + v43 + ""
    let v3003 : string = " " + v2999 + v3002 + ""
    let v3004 : string = " " + v3000 + v3003 + ""
    let v3005 : string = " " + v3001 + v3004 + ""
    let v3006 : Vec<leptos_prelude_AnyView_> = method172()
    let v3007 : string = "leptos::prelude::Fragment::new($0)"
    let v3008 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3006 v3007 
    let v3009 : string = "leptos::prelude::AnyView::from($0)"
    let v3010 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3008 v3009 
    let v3011 : string = "<" + v2765 + " " + v3005 + ">move || { v3010 }</" + v2765 + ">"
    let v3012 : string = "leptos::prelude::view! { " + v3011 + " }"
    let v3013 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3012 
    let v3014 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v3013 |> unbox
    let v3015 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3016 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3014 v3015 
    let v3017 : string = "cx=\"16.5\""
    let v3018 : string = "cy=\"16.5\""
    let v3019 : string = "r=\"1.5\""
    let v3020 : string = "fill=\"currentColor\""
    let v3021 : string = " " + v3017 + v43 + ""
    let v3022 : string = " " + v3018 + v3021 + ""
    let v3023 : string = " " + v3019 + v3022 + ""
    let v3024 : string = " " + v3020 + v3023 + ""
    let v3025 : Vec<leptos_prelude_AnyView_> = method172()
    let v3026 : string = "leptos::prelude::Fragment::new($0)"
    let v3027 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3025 v3026 
    let v3028 : string = "leptos::prelude::AnyView::from($0)"
    let v3029 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3027 v3028 
    let v3030 : string = "<" + v2765 + " " + v3024 + ">move || { v3029 }</" + v2765 + ">"
    let v3031 : string = "leptos::prelude::view! { " + v3030 + " }"
    let v3032 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3031 
    let v3033 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v3032 |> unbox
    let v3034 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3035 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3033 v3034 
    let v3036 : Vec<leptos_prelude_AnyView_> = method192(v2940, v2959, v2978, v2997, v3016, v3035)
    let v3037 : string = "leptos::prelude::Fragment::new($0)"
    let v3038 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3036 v3037 
    let v3039 : string = "leptos::prelude::AnyView::from($0)"
    let v3040 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3038 v3039 
    let v3041 : string = "<" + v2507 + " " + v2914 + ">move || { v3040 }</" + v2507 + ">"
    let v3042 : string = "leptos::prelude::view! { " + v3041 + " }"
    let v3043 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3042 
    let v3044 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3043 |> unbox
    let v3045 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3046 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3044 v3045 
    let v3047 : Vec<leptos_prelude_AnyView_> = method173(v3046)
    let v3048 : string = "leptos::prelude::Fragment::new($0)"
    let v3049 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3047 v3048 
    let v3050 : (unit -> std_string_String) = closure367(v2087)
    let v3051 : string = "let v3050 = $0"
    Fable.Core.RustInterop.emitRustExpr v3050 v3051 
    let v3052 : string = "$0"
    let v3053 : (unit -> bool) = closure368(v66)
    let v3054 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v3053 v3052 
    let v3055 : string = "$0"
    let v3056 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure369(v66)
    let v3057 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v3056 v3055 
    let v3058 : string = "href=move || v3050()"
    let v3059 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v3057(())"
    let v3060 : string = "aria-current=move || if v3054(()) { \"page\" } else { \"\" }"
    let v3061 : string = " " + v3058 + v43 + ""
    let v3062 : string = " " + v3059 + v3061 + ""
    let v3063 : string = " " + v3060 + v3062 + ""
    let v3064 : string = "leptos::prelude::AnyView::from($0)"
    let v3065 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3049 v3064 
    let v3066 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3067 : string = "&*$0"
    let v3068 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2360 v3067 
    let _v3066 = v3068 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3069 : string = "&*$0"
    let v3070 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2360 v3069 
    let _v3066 = v3070 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3071 : string = "&*$0"
    let v3072 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2360 v3071 
    let _v3066 = v3072 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3073 : Ref<Str> = v2360 |> unbox<Ref<Str>>
    let _v3066 = v3073 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3076 : Ref<Str> = v2360 |> unbox<Ref<Str>>
    let _v3066 = v3076 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3079 : Ref<Str> = v2360 |> unbox<Ref<Str>>
    let _v3066 = v3079 
    #endif
#else
    let v3082 : Ref<Str> = v2360 |> unbox<Ref<Str>>
    let _v3066 = v3082 
    #endif
    let v3085 : Ref<Str> = _v3066 
    let v3090 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3091 : string = "String::from($0)"
    let v3092 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3085 v3091 
    let _v3090 = v3092 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3093 : string = "String::from($0)"
    let v3094 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3085 v3093 
    let _v3090 = v3094 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v3095 : string = "String::from($0)"
    let v3096 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3085 v3095 
    let _v3090 = v3096 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v3097 : std_string_String = v3085 |> unbox<std_string_String>
    let _v3090 = v3097 
    #endif
#if FABLE_COMPILER_PYTHON
    let v3100 : std_string_String = v3085 |> unbox<std_string_String>
    let _v3090 = v3100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3103 : std_string_String = v3085 |> unbox<std_string_String>
    let _v3090 = v3103 
    #endif
#else
    let v3106 : std_string_String = v3085 |> unbox<std_string_String>
    let _v3090 = v3106 
    #endif
    let v3109 : std_string_String = _v3090 
    let v3114 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v3115 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3109 v3114 
    let v3116 : Vec<leptos_prelude_AnyView_> = method176(v3065, v3115)
    let v3117 : string = "leptos::prelude::Fragment::new($0)"
    let v3118 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3116 v3117 
    let v3119 : string = "leptos::prelude::AnyView::from($0)"
    let v3120 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3118 v3119 
    let v3121 : string = "<" + v2588 + " " + v3063 + ">move || { v3120 }</" + v2588 + ">"
    let v3122 : string = "leptos::prelude::view! { " + v3121 + " }"
    let v3123 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3122 
    let v3124 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v3123 |> unbox
    let v3125 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3126 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3124 v3125 
    let v3127 : Vec<leptos_prelude_AnyView_> = method276(v3126, v2900, v2718, v2594)
    let v3128 : string = "leptos::prelude::Fragment::new($0)"
    let v3129 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3127 v3128 
    let v3130 : string = "leptos::prelude::AnyView::from($0)"
    let v3131 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3129 v3130 
    let v3132 : string = "nav"
    let v3133 : string = "<" + v3132 + " " + v2451 + ">move || { v3131 }</" + v3132 + ">"
    let v3134 : string = "leptos::prelude::view! { " + v3133 + " }"
    let v3135 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3134 
    let v3136 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Nav>> = v3135 |> unbox
    let v3137 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3138 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3136 v3137 
    let v3139 : Vec<leptos_prelude_AnyView_> = method173(v3138)
    let v3140 : string = "leptos::prelude::Fragment::new($0)"
    let v3141 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3139 v3140 
    let v3142 : string = "leptos::prelude::AnyView::from($0)"
    let v3143 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3141 v3142 
    let v3144 : string = "<" + v2439 + " " + v2447 + ">move || { v3143 }</" + v2439 + ">"
    let v3145 : string = "leptos::prelude::view! { " + v3144 + " }"
    let v3146 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3145 
    let v3147 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3146 |> unbox
    let v3148 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3149 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3147 v3148 
    let v3150 : Vec<leptos_prelude_AnyView_> = method173(v3149)
    let v3151 : string = "leptos::prelude::Fragment::new($0)"
    let v3152 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3150 v3151 
    let v3153 : string = "leptos::prelude::AnyView::from($0)"
    let v3154 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3152 v3153 
    let v3155 : string = "<" + v2439 + " " + v2445 + ">move || { v3154 }</" + v2439 + ">"
    let v3156 : string = "leptos::prelude::view! { " + v3155 + " }"
    let v3157 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3156 
    let v3158 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3157 |> unbox
    let v3159 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3160 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3158 v3159 
    let v3161 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3162 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2443 v3161 
    let v3163 : Vec<leptos_prelude_AnyView_> = method176(v3162, v3160)
    let v3164 : string = "leptos::prelude::Fragment::new($0)"
    let v3165 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3163 v3164 
    let v3166 : string = "leptos::prelude::AnyView::from($0)"
    let v3167 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3165 v3166 
    let v3168 : string = "<" + v2439 + " " + v2077 + ">move || { v3167 }</" + v2439 + ">"
    let v3169 : string = "leptos::prelude::view! { " + v3168 + " }"
    let v3170 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3169 
    let v3171 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3170 |> unbox
    let v3172 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3173 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3171 v3172 
    let v3174 : Vec<leptos_prelude_AnyView_> = method176(v2075, v3173)
    let v3175 : string = "leptos::prelude::Fragment::new($0)"
    let v3176 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3174 v3175 
    let v3177 : string = "leptos::prelude::AnyView::from($0)"
    let v3178 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3176 v3177 
    let v3179 : string = "<" + v2439 + " " + v84 + ">move || { v3178 }</" + v2439 + ">"
    let v3180 : string = "leptos::prelude::view! { " + v3179 + " }"
    let v3181 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3180 
    let v3182 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3181 |> unbox
    let v3183 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3184 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3182 v3183 
    let v3185 : Vec<leptos_prelude_AnyView_> = method173(v3184)
    let v3186 : string = "leptos::prelude::Fragment::new($0)"
    let v3187 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3185 v3186 
    let v3188 : string = "leptos::prelude::AnyView::from($0)"
    let v3189 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3187 v3188 
    let v3190 : string = "<" + v2439 + " " + v82 + ">move || { v3189 }</" + v2439 + ">"
    let v3191 : string = "leptos::prelude::view! { " + v3190 + " }"
    let v3192 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3191 
    let v3193 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3192 |> unbox
    let v3194 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3195 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3193 v3194 
    let v3196 : Vec<leptos_prelude_AnyView_> = method173(v3195)
    let v3197 : string = "leptos::prelude::Fragment::new($0)"
    let v3198 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3196 v3197 
    let v3199 : string = "leptos::prelude::AnyView::from($0)"
    let v3200 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3198 v3199 
    let v3201 : string = "<" + v2439 + " " + v45 + ">move || { v3200 }</" + v2439 + ">"
    let v3202 : string = "leptos::prelude::view! { " + v3201 + " }"
    let v3203 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3202 
    let v3204 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3203 |> unbox
    v3204
and method5 () : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>) =
    closure5()
and method277 (v0 : std_string_String) : std_string_String =
    v0
and closure370 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 1
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : Vec<leptos_prelude_AnyView_> = method173(v3)
    let v5 : string = "leptos::prelude::Fragment::new($0)"
    let v6 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from($0)"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method278 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure370(v0)
and closure371 () () : leptos_dom_Fragment =
    let v0 : Vec<leptos_prelude_AnyView_> = method172()
    let v1 : string = "leptos::prelude::Fragment::new($0)"
    let v2 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure372 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 2
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : Vec<leptos_prelude_AnyView_> = method173(v3)
    let v5 : string = "leptos::prelude::Fragment::new($0)"
    let v6 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from($0)"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method279 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure372(v0)
and closure373 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 3
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : Vec<leptos_prelude_AnyView_> = method173(v3)
    let v5 : string = "leptos::prelude::Fragment::new($0)"
    let v6 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from($0)"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method280 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure373(v0)
and closure374 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 4
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : Vec<leptos_prelude_AnyView_> = method173(v3)
    let v5 : string = "leptos::prelude::Fragment::new($0)"
    let v6 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from($0)"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method281 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure374(v0)
and method283 (v0 : leptos_prelude_View<leptos_router_NestedRoute>) : leptos_prelude_View<leptos_router_NestedRoute> =
    v0
and method282 (v0 : leptos_prelude_View<leptos_router_NestedRoute>, v1 : leptos_prelude_View<leptos_router_NestedRoute>, v2 : leptos_prelude_View<leptos_router_NestedRoute>, v3 : leptos_prelude_View<leptos_router_NestedRoute>) : Vec<leptos_prelude_View<leptos_router_NestedRoute>> =
    let v4 : leptos_prelude_View<leptos_router_NestedRoute> = method283(v3)
    let v5 : string = "v4"
    let v6 : string = ""
    let v7 : string = v5 + v6 
    let v8 : string = v7 + v6 
    let v9 : leptos_prelude_View<leptos_router_NestedRoute> = method283(v2)
    let v10 : string = "v9"
    let v11 : string = ", "
    let v12 : string = v10 + v11 
    let v13 : string = v12 + v8 
    let v14 : leptos_prelude_View<leptos_router_NestedRoute> = method283(v1)
    let v15 : string = "v14"
    let v16 : string = v15 + v11 
    let v17 : string = v16 + v13 
    let v18 : leptos_prelude_View<leptos_router_NestedRoute> = method283(v0)
    let v19 : string = "v18"
    let v20 : string = v19 + v11 
    let v21 : string = v20 + v17 
    let v22 : string = "vec![" + v21 + "]"
    let v23 : Vec<leptos_prelude_View<leptos_router_NestedRoute>> = Fable.Core.RustInterop.emitRustExpr () v22 
    v23
and closure4 () () : Vec<leptos_prelude_View<leptos_router_NestedRoute>> =
    let v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>) = method5()
    let v1 : string = ""
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : std_string_String = method277(v45)
    let v51 : (unit -> leptos_prelude_AnyView_) = method278(v0)
    let v52 : string = "path=leptos_router_macro::path!(v50)"
    let v53 : string = "view= move || v51()"
    let v54 : (unit -> leptos_dom_Fragment) = closure371()
    let v55 : string = "children=Box::new(move || v54())"
    let v56 : string = " " + v52 + v1 + ""
    let v57 : string = " " + v53 + v56 + ""
    let v58 : string = " " + v55 + v57 + ""
    let v59 : string = "leptos_router::components::ParentRoute"
    let v60 : string = "<" + v59 + " " + v58 + " />"
    let v61 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v60 + " })"
    let v62 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "/"
    let v64 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v65 
    let _v64 = v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v67 : string = "&*$0"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v67 
    let _v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v69 : string = "&*$0"
    let v70 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v69 
    let _v64 = v70 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v71 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _v64 = v71 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _v64 = v74 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _v64 = v77 
    #endif
#else
    let v80 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _v64 = v80 
    #endif
    let v83 : Ref<Str> = _v64 
    let v88 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : std_string_String = v83 |> unbox<std_string_String>
    let _v88 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v98 : std_string_String = v83 |> unbox<std_string_String>
    let _v88 = v98 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v101 : std_string_String = v83 |> unbox<std_string_String>
    let _v88 = v101 
    #endif
#else
    let v104 : std_string_String = v83 |> unbox<std_string_String>
    let _v88 = v104 
    #endif
    let v107 : std_string_String = _v88 
    let v112 : std_string_String = method277(v107)
    let v113 : (unit -> leptos_prelude_AnyView_) = method279(v0)
    let v114 : string = "path=leptos_router_macro::path!(v112)"
    let v115 : string = "view= move || v113()"
    let v116 : string = "children=Box::new(move || v54())"
    let v117 : string = " " + v114 + v1 + ""
    let v118 : string = " " + v115 + v117 + ""
    let v119 : string = " " + v116 + v118 + ""
    let v120 : string = "<" + v59 + " " + v119 + " />"
    let v121 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v120 + " })"
    let v122 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : string = "/*"
    let v124 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v125 
    let _v124 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "&*$0"
    let v128 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v127 
    let _v124 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "&*$0"
    let v130 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v129 
    let _v124 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v131 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _v124 = v131 
    #endif
#if FABLE_COMPILER_PYTHON
    let v134 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _v124 = v134 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _v124 = v137 
    #endif
#else
    let v140 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _v124 = v140 
    #endif
    let v143 : Ref<Str> = _v124 
    let v148 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v149 : string = "String::from($0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v149 
    let _v148 = v150 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v151 : string = "String::from($0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v151 
    let _v148 = v152 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v153 : string = "String::from($0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v153 
    let _v148 = v154 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v155 : std_string_String = v143 |> unbox<std_string_String>
    let _v148 = v155 
    #endif
#if FABLE_COMPILER_PYTHON
    let v158 : std_string_String = v143 |> unbox<std_string_String>
    let _v148 = v158 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v161 : std_string_String = v143 |> unbox<std_string_String>
    let _v148 = v161 
    #endif
#else
    let v164 : std_string_String = v143 |> unbox<std_string_String>
    let _v148 = v164 
    #endif
    let v167 : std_string_String = _v148 
    let v172 : std_string_String = method277(v167)
    let v173 : (unit -> leptos_prelude_AnyView_) = method280(v0)
    let v174 : string = "path=leptos_router_macro::path!(v172)"
    let v175 : string = "view= move || v173()"
    let v176 : string = "children=Box::new(move || v54())"
    let v177 : string = " " + v174 + v1 + ""
    let v178 : string = " " + v175 + v177 + ""
    let v179 : string = " " + v176 + v178 + ""
    let v180 : string = "<" + v59 + " " + v179 + " />"
    let v181 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v180 + " })"
    let v182 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v181 
    let v183 : string = "*"
    let v184 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v185 : string = "&*$0"
    let v186 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v185 
    let _v184 = v186 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v187 : string = "&*$0"
    let v188 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v187 
    let _v184 = v188 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v189 : string = "&*$0"
    let v190 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v189 
    let _v184 = v190 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v191 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _v184 = v191 
    #endif
#if FABLE_COMPILER_PYTHON
    let v194 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _v184 = v194 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v197 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _v184 = v197 
    #endif
#else
    let v200 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _v184 = v200 
    #endif
    let v203 : Ref<Str> = _v184 
    let v208 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v209 : string = "String::from($0)"
    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v209 
    let _v208 = v210 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v211 : string = "String::from($0)"
    let v212 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v211 
    let _v208 = v212 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v213 : string = "String::from($0)"
    let v214 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v213 
    let _v208 = v214 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v215 : std_string_String = v203 |> unbox<std_string_String>
    let _v208 = v215 
    #endif
#if FABLE_COMPILER_PYTHON
    let v218 : std_string_String = v203 |> unbox<std_string_String>
    let _v208 = v218 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v221 : std_string_String = v203 |> unbox<std_string_String>
    let _v208 = v221 
    #endif
#else
    let v224 : std_string_String = v203 |> unbox<std_string_String>
    let _v208 = v224 
    #endif
    let v227 : std_string_String = _v208 
    let v232 : std_string_String = method277(v227)
    let v233 : (unit -> leptos_prelude_AnyView_) = method281(v0)
    let v234 : string = "path=leptos_router_macro::path!(v232)"
    let v235 : string = "view= move || v233()"
    let v236 : string = "children=Box::new(move || v54())"
    let v237 : string = " " + v234 + v1 + ""
    let v238 : string = " " + v235 + v237 + ""
    let v239 : string = " " + v236 + v238 + ""
    let v240 : string = "<" + v59 + " " + v239 + " />"
    let v241 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v240 + " })"
    let v242 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v241 
    method282(v62, v122, v182, v242)
and method4 () : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) =
    closure4()
and method284 (v0 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>)) : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) =
    v0
and closure3 () () : leptos_dom_Fragment =
    let v0 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) = method4()
    let v1 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) = method284(v0)
    let v2 : string = "leptos.routes / fallback"
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let _v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let _v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _v3 = v13 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _v3 = v16 
    #endif
#else
    let v19 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _v3 = v19 
    #endif
    let v22 : Ref<Str> = _v3 
    let v27 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v28 
    let _v27 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v30 
    let _v27 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v32 
    let _v27 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v40 
    #endif
#else
    let v43 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v43 
    #endif
    let v46 : std_string_String = _v27 
    let v51 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v52 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v46 v51 
    let v53 : string = "fallback=move || v52"
    let v54 : string = "children=leptos::children::ToChildren::to_children(move || v1())"
    let v55 : string = ""
    let v56 : string = " " + v53 + v55 + ""
    let v57 : string = " " + v54 + v56 + ""
    let v58 : string = "leptos_router::components::Routes"
    let v59 : string = "<" + v58 + " " + v57 + " />"
    let v60 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v59 + " })"
    let v61 : leptos_prelude_View<_> = Fable.Core.RustInterop.emitRustExpr () v60 
    let v62 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : Vec<leptos_prelude_AnyView_> = method173(v63)
    let v65 : string = "leptos::prelude::Fragment::new($0)"
    let v66 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and closure2 () () : Impl<leptos_IntoView> =
    let v0 : string = "app.render ()"
    let v1 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "true; leptos_meta::provide_meta_context()"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = $"leptos::prelude::RwSignal::new($0)"
    let v6 : leptos_prelude_RwSignal<bool> = Fable.Core.RustInterop.emitRustExpr false v5 
    let v7 : string = $"leptos::prelude::RwSignal::new($0)"
    let v8 : leptos_prelude_RwSignal<bool> = Fable.Core.RustInterop.emitRustExpr false v7 
    let v9 : string = ""
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v35 
    let _v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "String::from($0)"
    let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v37 
    let _v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v39 
    let _v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v47 
    #endif
#else
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v50 
    #endif
    let v53 : std_string_String = _v34 
    let v58 : string = $"leptos::prelude::RwSignal::new($0)"
    let v59 : leptos_prelude_RwSignal<std_string_String> = Fable.Core.RustInterop.emitRustExpr v53 v58 
    let v60 : string = "i574n.near"
    let v61 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v62 
    let _v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v64 
    let _v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _v61 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _v61 = v71 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v74 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _v61 = v74 
    #endif
#else
    let v77 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _v61 = v77 
    #endif
    let v80 : Ref<Str> = _v61 
    let v85 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v86 : string = "String::from($0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v86 
    let _v85 = v87 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v88 : string = "String::from($0)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v88 
    let _v85 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "String::from($0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v90 
    let _v85 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v92 : std_string_String = v80 |> unbox<std_string_String>
    let _v85 = v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : std_string_String = v80 |> unbox<std_string_String>
    let _v85 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_string_String = v80 |> unbox<std_string_String>
    let _v85 = v98 
    #endif
#else
    let v101 : std_string_String = v80 |> unbox<std_string_String>
    let _v85 = v101 
    #endif
    let v104 : std_string_String = _v85 
    let v109 : (bool * std_string_String) = true, v104 
    let v110 : string = "luckier.near"
    let v111 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v112 : string = "&*$0"
    let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v112 
    let _v111 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v114 : string = "&*$0"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v114 
    let _v111 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v116 : string = "&*$0"
    let v117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v116 
    let _v111 = v117 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _v111 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v121 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _v111 = v121 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _v111 = v124 
    #endif
#else
    let v127 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _v111 = v127 
    #endif
    let v130 : Ref<Str> = _v111 
    let v135 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v136 : string = "String::from($0)"
    let v137 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v136 
    let _v135 = v137 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v138 : string = "String::from($0)"
    let v139 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v138 
    let _v135 = v139 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : string = "String::from($0)"
    let v141 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v140 
    let _v135 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v142 : std_string_String = v130 |> unbox<std_string_String>
    let _v135 = v142 
    #endif
#if FABLE_COMPILER_PYTHON
    let v145 : std_string_String = v130 |> unbox<std_string_String>
    let _v135 = v145 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v148 : std_string_String = v130 |> unbox<std_string_String>
    let _v135 = v148 
    #endif
#else
    let v151 : std_string_String = v130 |> unbox<std_string_String>
    let _v135 = v151 
    #endif
    let v154 : std_string_String = _v135 
    let v159 : (bool * std_string_String) = true, v154 
    let v160 : ((bool * std_string_String) []) = [|v109; v159|]
    let v161 : string = "$0.to_vec()"
    let v162 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr v160 v161 
    let v163 : std_string_String option = None
    let v164 : US1 = US1_0
    let v165 : Heap0 = {l0 = v162; l1 = v163; l2 = 1; l3 = 1; l4 = v164} : Heap0
    let v166 : string = $"leptos::prelude::RwSignal::new($0)"
    let v167 : leptos_prelude_RwSignal<Heap0> = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : Heap1 = {l0 = v6; l1 = v8; l2 = v59; l3 = v167} : Heap1
    let v169 : string = $"leptos::prelude::RwSignal::new($0)"
    let v170 : leptos_prelude_RwSignal<Heap1> = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let v171 : string = "std::collections::HashMap::new()"
    let v172 : std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : string = $"leptos::prelude::RwSignal::new($0)"
    let v174 : leptos_prelude_RwSignal<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>> = Fable.Core.RustInterop.emitRustExpr v172 v173 
    let v175 : Heap2 = {l0 = v170; l1 = v174} : Heap2
    let v176 : string = $"true; leptos::context::provide_context::<std::sync::Arc<Heap2>>($0)"
    let v177 : bool = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : (unit -> leptos_dom_Fragment) = closure3()
    let v179 : string = "children=Box::new(move || v178())"
    let v180 : string = " " + v179 + v9 + ""
    let v181 : string = "leptos_router::components::Router"
    let v182 : string = "<" + v181 + " " + v180 + " />"
    let v183 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v182 + " })"
    let v184 : leptos_prelude_View<_> = Fable.Core.RustInterop.emitRustExpr () v183 
    let v185 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v186 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v184 v185 
    let v187 : Impl<leptos_IntoView> = v186 |> unbox
    v187
and method3 () : unit =
    let v0 : string = "true; leptos::prelude::mount_to_body(|| $0()); //"
    let v1 : (unit -> Impl<leptos_IntoView>) = closure2()
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v1 v0 
    ()
and closure375 () () : unit =
    method3()
and method285 () : (unit -> unit) =
    closure375()
and method286 (v0 : Box<Dyn<FnUnit>>) : Box<Dyn<FnUnit>> =
    v0
and closure0 () (v0 : (string [])) : int32 =
    let v1 : string = "main / args: " + string v0 + ""
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "let _ = console_log::init_with_level(log::Level::Debug)"
    Fable.Core.RustInterop.emitRustExpr () v4 
    let v5 : string = "console_error_panic_hook::set_once()"
    Fable.Core.RustInterop.emitRustExpr () v5 
    let v6 : string = "leptos::prelude::document().body()"
    let v7 : web_sys_HtmlElement option = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : (web_sys_HtmlElement -> US0) = method0()
    let v9 : US0 option = v7 |> Option.map v8 
    let v20 : US0 = US0_1
    let v21 : US0 = v9 |> Option.defaultValue v20 
    let v25 : string = $"%A{v21}"
    let v28 : string = "main / mount_to_body / body: " + string v25 + ""
    let v29 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr v28 v29 
    match v21 with
    | US0_0(v31) -> (* Some *)
        let v32 : string = method1()
        let v33 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v34 : string = "&*$0"
        let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v34 
        let _v33 = v35 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v36 : string = "&*$0"
        let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v36 
        let _v33 = v37 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v38 : string = "&*$0"
        let v39 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v38 
        let _v33 = v39 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v40 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _v33 = v40 
        #endif
#if FABLE_COMPILER_PYTHON
        let v43 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _v33 = v43 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v46 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _v33 = v46 
        #endif
#else
        let v49 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _v33 = v49 
        #endif
        let v52 : Ref<Str> = _v33 
        let v57 : web_sys_HtmlElement = method2(v31)
        let v58 : string = "v57.set_inner_html($0)"
        Fable.Core.RustInterop.emitRustExpr v52 v58 
        method3()
    | _ ->
        let v59 : (unit -> unit) = method285()
        let v60 : string = "Box::new(move || v59())"
        let v61 : Box<Dyn<FnUnit>> = Fable.Core.RustInterop.emitRustExpr () v60 
        let v62 : Box<Dyn<FnUnit>> = method286(v61)
        let v63 : string = "wasm_bindgen::closure::Closure::wrap(v62)"
        let v64 : wasm_bindgen_closure_Closure<Dyn<FnUnit>> = Fable.Core.RustInterop.emitRustExpr () v63 
        let v65 : string = "wasm_bindgen::closure::Closure::as_ref(&v64)"
        let v66 : Ref<wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr () v65 
        let v67 : string = "wasm_bindgen::JsCast::unchecked_ref(v66)"
        let v68 : Ref<js_sys_Function> = Fable.Core.RustInterop.emitRustExpr () v67 
        let v69 : string = "leptos::prelude::document().add_event_listener_with_callback(\"DOMContentLoaded\", v68).unwrap()"
        Fable.Core.RustInterop.emitRustExpr () v69 
        let v70 : string = "v64.forget()"
        Fable.Core.RustInterop.emitRustExpr () v70 
        ()
    0
let v0 : ((string []) -> int32) = closure0()
let main args = v0 args
()
