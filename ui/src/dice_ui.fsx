#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::HtmlElement")>]
#endif
type web_sys_HtmlElement = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::RwSignal<$0>")>]
#endif
type leptos_prelude_RwSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Error")>]
#endif
type rexie_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Rexie")>]
#endif
type rexie_Rexie = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Resource<$0, $1>")>]
#endif
type leptos_prelude_Resource<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("*/ $0 /*")>]
#endif
type TypeEmit<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("PartialEqWrapper<$0>")>]
#endif
type PartialEqWrapper<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Transaction")>]
#endif
type rexie_Transaction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Store")>]
#endif
type rexie_Store = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("wasm_bindgen::JsValue")>]
#endif
type wasm_bindgen_JsValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_wasm_bindgen::Error")>]
#endif
type serde_wasm_bindgen_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Value")>]
#endif
type serde_json_Value = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("borsh::io::Error")>]
#endif
type borsh_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::Window")>]
#endif
type web_sys_Window = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::Storage")>]
#endif
type web_sys_Storage = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Memo<$0>")>]
#endif
type leptos_prelude_Memo<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::ReadSignal<$0>")>]
#endif
type leptos_prelude_ReadSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::WriteSignal<$0>")>]
#endif
type leptos_prelude_WriteSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Action<$0, $1>")>]
#endif
type leptos_prelude_Action<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::location::Location")>]
#endif
type leptos_router_location_Location = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::location::Url")>]
#endif
type leptos_router_Url = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Root")>] type crate_model_near_nearblocks_Root = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Txn")>] type crate_model_near_nearblocks_Txn = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Block")>] type crate_model_near_nearblocks_Block = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Action")>] type crate_model_near_nearblocks_Action = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::ActionsAgg")>] type crate_model_near_nearblocks_ActionsAgg = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Outcomes")>] type crate_model_near_nearblocks_Outcomes = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::OutcomesAgg")>] type crate_model_near_nearblocks_OutcomesAgg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("futures::future::TryJoinAll<$0>")>]
#endif
type futures_future_TryJoinAll<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::RequestBuilder")>]
#endif
type reqwest_RequestBuilder = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::Error")>]
#endif
type reqwest_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::Response")>]
#endif
type reqwest_Response = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Signal<$0>")>]
#endif
type leptos_prelude_Signal<'T> = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcInput")>] type crate_model_near_rpc_RpcInput = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcResponse")>] type crate_model_near_rpc_RpcResponse = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::TransactionStatus")>] type crate_model_near_rpc_TransactionStatus = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Receipt")>] type crate_model_near_rpc_Receipt = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ReceiptDetail")>] type crate_model_near_rpc_ReceiptDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ActionDetail")>] type crate_model_near_rpc_ActionDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::TransferDetail")>] type crate_model_near_rpc_TransferDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ReceiptsOutcome")>] type crate_model_near_rpc_ReceiptsOutcome = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::OutcomeDetail")>] type crate_model_near_rpc_OutcomeDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Metadata")>] type crate_model_near_rpc_Metadata = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::GasProfile")>] type crate_model_near_rpc_GasProfile = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Proof")>] type crate_model_near_rpc_Proof = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcError")>] type crate_model_near_rpc_RpcError = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ErrorCause")>] type crate_model_near_rpc_ErrorCause = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ErrorCauseInfo")>] type crate_model_near_rpc_ErrorCauseInfo = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::AnyView")>]
#endif
type leptos_prelude_AnyView_ = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Fragment")>]
#endif
type leptos_dom_Fragment = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("impl $0")>]
#endif
type Impl<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::View<$0>")>]
#endif
type leptos_prelude_View<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func0<$0>")>]
#endif
type Func0<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::ev::Event")>]
#endif
type leptos_ev_Event = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("wasm_bindgen::closure::Closure<$0>")>]
#endif
type wasm_bindgen_closure_Closure<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::IntoView")>]
#endif
type leptos_IntoView = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::NestedRoute<_, _, _, _>")>]
#endif
type leptos_router_NestedRoute = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::HtmlElement<$0, _, _>")>]
#endif
type leptos_dom_html_HtmlElement<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Div")>]
#endif
type leptos_html_Div = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::*;
//"
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn($0, $1)")>]
#endif
type ActionFn2<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::NavigateOptions")>]
#endif
type leptos_router_NavigateOptions = class end
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::ElementChild;
//"
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::ClassAttribute;
//"
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Path")>]
#endif
type leptos_svg_Path = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Svg")>]
#endif
type leptos_svg_Svg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Span")>]
#endif
type leptos_html_Span = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Pre")>]
#endif
type leptos_html_Pre = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Circle")>]
#endif
type leptos_svg_Circle = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Button")>]
#endif
type leptos_html_Button = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Summary")>]
#endif
type leptos_html_Summary = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Details")>]
#endif
type leptos_html_Details = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Input")>]
#endif
type leptos_html_Input = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Animate")>]
#endif
type leptos_svg_Animate = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Rect")>]
#endif
type leptos_svg_Rect = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Th")>]
#endif
type leptos_html_Th = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Tr")>]
#endif
type leptos_html_Tr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Td")>]
#endif
type leptos_html_Td = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Thead")>]
#endif
type leptos_html_Thead = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Tbody")>]
#endif
type leptos_html_Tbody = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Table")>]
#endif
type leptos_html_Table = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Label")>]
#endif
type leptos_html_Label = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dt")>]
#endif
type leptos_html_Dt = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dd")>]
#endif
type leptos_html_Dd = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dl")>]
#endif
type leptos_html_Dl = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Main")>]
#endif
type leptos_html_Main = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Option_")>]
#endif
type leptos_html_Option = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Select")>]
#endif
type leptos_html_Select = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::A")>]
#endif
type leptos_html_A = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Nav")>]
#endif
type leptos_html_Nav = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn()")>]
#endif
type FnUnit = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("js_sys::Function")>]
#endif
type js_sys_Function = class end
type [<Struct>] US0 =
    | US0_0 of f0_0 : web_sys_HtmlElement
    | US0_1
and [<Struct>] US1 =
    | US1_0
    | US1_1
and Heap0 = {l0 : Vec<(bool * std_string_String)>; l1 : std_string_String option; l2 : int32; l3 : int32; l4 : US1}
and Heap1 = {l0 : leptos_prelude_RwSignal<bool>; l1 : leptos_prelude_RwSignal<bool>; l2 : leptos_prelude_RwSignal<std_string_String>; l3 : leptos_prelude_RwSignal<Heap0>}
and  Heap2 = {l0 : leptos_prelude_RwSignal<Heap1>; l1 : leptos_prelude_RwSignal<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>>}
and [<Struct>] US2 =
    | US2_0
    | US2_1
and Heap3 = {l0 : bool; l1 : bool; l2 : std_string_String; l3 : Heap0}
and [<Struct>] US3 =
    | US3_0 of f0_0 : Heap3
    | US3_1
and [<Struct>] US4 =
    | US4_0 of f0_0 : std_sync_Arc<rexie_Rexie>
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : Heap3 option
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : wasm_bindgen_JsValue
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : serde_json_Value
    | US7_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : Heap3 option option
    | US8_1 of f1_0 : std_string_String
and [<Struct>] US9 =
    | US9_0 of f0_0 : US3
    | US9_1
and [<Struct>] US10 =
    | US10_0 of f0_0 : web_sys_Storage option
    | US10_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US12 =
    | US12_0 of f0_0 : web_sys_Storage
    | US12_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : US12
    | US11_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US13 =
    | US13_0 of f0_0 : std_string_String option
    | US13_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US15 =
    | US15_0 of f0_0 : std_string_String
    | US15_1
and [<Struct>] US14 =
    | US14_0 of f0_0 : US15
    | US14_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US16 =
    | US16_0 of f0_0 : US15
    | US16_1
and [<Struct>] US17 =
    | US17_0 of f0_0 : leptos_prelude_RwSignal<bool>
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : bool
    | US18_1
and [<Struct>] US20 =
    | US20_0
and [<Struct>] US19 =
    | US19_0
    | US19_1 of f1_0 : US20
    | US19_2
    | US19_3
    | US19_4
and [<Struct>] US21 =
    | US21_0 of f0_0 : leptos_router_Url
    | US21_1 of f1_0 : std_string_String
and [<Struct>] US22 =
    | US22_0 of f0_0 : US19
    | US22_1
and [<Struct>] US23 =
    | US23_0 of f0_0 : leptos_dom_Fragment
    | US23_1
and [<Struct>] US24 =
    | US24_0
    | US24_1
and Mut0 = {mutable l0 : int32}
and Mut1 = {mutable l0 : int32; mutable l1 : Vec<struct (string * US24 * string * bool * bool)>}
and Mut2 = {mutable l0 : int32; mutable l1 : Vec<string>}
and Heap4 = {l0 : std_string_String}
and [<Struct>] US25 =
    | US25_0 of f0_0 : Vec<Heap4 option>
    | US25_1 of f1_0 : std_string_String
and [<Struct>] US26 =
    | US26_0 of f0_0 : Heap4
    | US26_1
and [<Struct>] US27 =
    | US27_0 of f0_0 : Result<Vec<Heap4 option>, std_string_String>
    | US27_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : Vec<US26>
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US28 =
    | US28_0 of f0_0 : US29
    | US28_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : string
    | US32_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : US32
    | US31_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : US31
    | US30_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : US26
    | US33_1
and [<Struct>] US34 =
    | US34_0 of f0_0 : string option
    | US34_1 of f1_0 : std_string_String
and [<Struct>] US35 =
    | US35_0 of f0_0 : Vec<unit>
    | US35_1 of f1_0 : std_string_String
and [<Struct>] US37 =
    | US37_0 of f0_0 : (US26 [])
    | US37_1 of f1_0 : std_string_String
and [<Struct>] US36 =
    | US36_0 of f0_0 : US37
    | US36_1
and [<Struct>] US38 =
    | US38_0 of f0_0 : Result<Vec<string option>, std_string_String>
    | US38_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : Vec<string option>
    | US40_1 of f1_0 : std_string_String
and [<Struct>] US39 =
    | US39_0 of f0_0 : US40
    | US39_1
and [<Struct>] US42 =
    | US42_0 of f0_0 : Vec<US32>
    | US42_1 of f1_0 : std_string_String
and [<Struct>] US41 =
    | US41_0 of f0_0 : US42
    | US41_1
and [<Struct>] US43 =
    | US43_0 of f0_0 : US32
    | US43_1
and Heap5 = {l0 : std_string_String; l1 : std_string_String; l2 : std_string_String; l3 : std_string_String; l4 : std_string_String; l5 : std_string_String; l6 : uint32; l7 : (struct (std_string_String * std_string_String option) []); l8 : float; l9 : bool; l10 : float; l11 : (std_string_String [])}
and [<Struct>] US44 =
    | US44_0 of f0_0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option
    | US44_1 of f1_0 : std_string_String
and [<Struct>] US46 =
    | US46_0 of f0_0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])
    | US46_1
and [<Struct>] US45 =
    | US45_0 of f0_0 : US46
    | US45_1 of f1_0 : std_string_String
and [<Struct>] US48 =
    | US48_0 of f0_0 : (struct (string * unativeint * Heap5) [])
    | US48_1
and [<Struct>] US47 =
    | US47_0 of f0_0 : US48
    | US47_1 of f1_0 : std_string_String
and [<Struct>] US50 =
    | US50_0 of f0_0 : Vec<struct (string * unativeint * Heap5)>
    | US50_1
and [<Struct>] US49 =
    | US49_0 of f0_0 : US50
    | US49_1 of f1_0 : std_string_String
and [<Struct>] US51 =
    | US51_0 of f0_0 : Vec<struct (string * unativeint * Heap5)> option
    | US51_1 of f1_0 : std_string_String
and [<Struct>] US52 =
    | US52_0 of f0_0 : Vec<struct (string * unativeint * Heap5)>
    | US52_1 of f1_0 : std_string_String
and Mut3 = {mutable l0 : int32; mutable l1 : US52}
and [<Struct>] US53 =
    | US53_0 of f0_0 : (struct (string * unativeint * Heap5) [])
    | US53_1 of f1_0 : std_string_String
and [<Struct>] US54 =
    | US54_0 of f0_0 : (struct (string * unativeint * Heap5) []) option
    | US54_1 of f1_0 : std_string_String
and [<Struct>] US56 =
    | US56_0 of f0_0 : (struct (string * US24 * string * bool * bool) [])
    | US56_1
and [<Struct>] US55 =
    | US55_0 of f0_0 : US56
    | US55_1 of f1_0 : std_string_String
and [<Struct>] US57 =
    | US57_0 of f0_0 : (struct (string * US24 * string * bool * bool) []) option
    | US57_1 of f1_0 : std_string_String
and Heap6 = {l0 : int32}
and [<Struct>] US58 =
    | US58_0 of f0_0 : std_string_String * f0_1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * f0_2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * f0_3 : std_string_String option
    | US58_1
and [<Struct>] US59 =
    | US59_0 of f0_0 : US15
    | US59_1 of f1_0 : std_string_String
and [<Struct>] US60 =
    | US60_0 of f0_0 : US58
    | US60_1 of f1_0 : std_string_String
and [<Struct>] US61 =
    | US61_0 of f0_0 : crate_model_near_rpc_RpcResponse
    | US61_1 of f1_0 : std_string_String
and [<Struct>] US62 =
    | US62_0 of f0_0 : std_string_String * f0_1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * f0_2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * f0_3 : std_string_String option
    | US62_1 of f1_0 : std_string_String
and [<Struct>] US63 =
    | US63_0 of f0_0 : US60
    | US63_1
and [<Struct>] US64 =
    | US64_0 of f0_0 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option
    | US64_1 of f1_0 : std_string_String
and [<Struct>] US65 =
    | US65_0 of f0_0 : std_string_String * f0_1 : std_string_String * f0_2 : struct (std_string_String option * std_string_String option) option * f0_3 : int32 * f0_4 : std_string_String * f0_5 : std_string_String
    | US65_1
and [<Struct>] US66 =
    | US66_0 of f0_0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>
    | US66_1
and [<Struct>] US67 =
    | US67_0 of f0_0 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>
    | US67_1
and [<Struct>] US68 =
    | US68_0 of f0_0 : leptos_prelude_Memo<US32>
    | US68_1
and [<Struct>] US69 =
    | US69_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US69_1
and [<Struct>] US70 =
    | US70_0 of f0_0 : string
    | US70_1 of f1_0 : string
and Mut4 = {mutable l0 : int32; mutable l1 : US32}
and [<Struct>] US71 =
    | US71_0 of f0_0 : std_string_String
    | US71_1 of f1_0 : std_string_String
let rec closure1 () (v0 : web_sys_HtmlElement) : US0 =
    US0_0(v0)
and method0 () : (web_sys_HtmlElement -> US0) =
    closure1()
and method1 () : string =
    let v0 : string = ""
    v0
and method2 (v0 : web_sys_HtmlElement) : web_sys_HtmlElement =
    v0
and closure6 () () : US2 =
    US2_1
and closure7 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method8 () : (rexie_Error -> std_string_String) =
    closure7()
and method9 (v0 : Result<rexie_Rexie, std_string_String>) : Result<rexie_Rexie, std_string_String> =
    v0
and closure8 () (v0 : rexie_Rexie) : rexie_Rexie =
    v0
and method10 () : (rexie_Rexie -> rexie_Rexie) =
    closure8()
and method11 (v0 : int64, v1 : string) : string =
    let v2 : int64 = System.Convert.ToInt64 v1.Length
    let v3 : bool = v2 <= v0
    if v3 then
        v1
    else
        let v4 : (int64 -> float) = float
        let v5 : float = v4 v0
        let v8 : float = v5 / 2.0
        let v9 : (float -> float) = ceil
        let v10 : float = v9 v8
        let v11 : (float -> int64) = int64
        let v12 : int64 = v11 v10
        let v15 : (float -> float) = floor
        let v16 : float = v15 v8
        let v17 : (float -> int64) = int64
        let v18 : int64 = v17 v16
        let v21 : int64 = v12 - 1L
        let v22 : string = v1.[int 0L..int v21]
        let v26 : int64 = v2 - v18
        let v27 : int64 = v2 - 1L
        let v28 : string = v1.[int v26..int v27]
        let v32 : string = "..."
        let v33 : (string []) = [|v22; v32; v28|]
        let v34 : string seq = v33 |> Seq.ofArray
        let v37 : (string -> (string seq -> string)) = String.concat
        let v38 : string = ""
        let v39 : (string seq -> string) = v37 v38
        v39 v34
and method12 (v0 : std_sync_Arc<rexie_Rexie>) : std_sync_Arc<rexie_Rexie> =
    v0
and method13 (v0 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>>) : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> =
    v0
and method7 () : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> =
    let v0 : string = "let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //"
    let v1 : (unit -> US2) = closure6()
    Fable.Core.RustInterop.emitRustExpr v1 v0 
    let v2 : string = "x"
    let v3 : US2 = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "true; let __future_init = Box::pin(async move { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "state_core.use_database (2) / database create_local_resource"
    let v7 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "state_core.build_database ()"
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; let __future_init = Box::pin(async { //"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())"
    let v15 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "v15.await"
    let v17 : Result<rexie_Rexie, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : (rexie_Error -> std_string_String) = method8()
    let v19 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "$0.map_err(|x| $1(x))"
    let v21 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v17, v18) v20 
    let _v19 = v21 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v22 : string = "$0.map_err(|x| $1(x))"
    let v23 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v17, v18) v22 
    let _v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v24 : string = "$0.map_err(|x| $1(x))"
    let v25 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v17, v18) v24 
    let _v19 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : Result<rexie_Rexie, std_string_String> = match v17 with Ok x -> Ok x | Error x -> Error (v18 x)
    let _v19 = v26 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : Result<rexie_Rexie, std_string_String> = match v17 with Ok x -> Ok x | Error x -> Error (v18 x)
    let _v19 = v27 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v28 : Result<rexie_Rexie, std_string_String> = match v17 with Ok x -> Ok x | Error x -> Error (v18 x)
    let _v19 = v28 
    #endif
#else
    let v29 : Result<rexie_Rexie, std_string_String> = match v17 with Ok x -> Ok x | Error x -> Error (v18 x)
    let _v19 = v29 
    #endif
    let v30 : Result<rexie_Rexie, std_string_String> = _v19 
    let v33 : Result<rexie_Rexie, std_string_String> = method9(v30)
    let v34 : string = ""
    let v35 : string = "}"
    let v36 : string = v34 + v35 
    let v37 : _ = v33 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = $"true; let v37 = $0"
    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v37 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = $"true; let v37 = $0"
    let v42 : bool = Fable.Core.RustInterop.emitRustExpr v37 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = $"true; let v37 = $0"
    let v44 : bool = Fable.Core.RustInterop.emitRustExpr v37 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : bool = true
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : bool = true
    let _v38 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v47 : bool = true
    let _v38 = v47 
    #endif
#else
    let v48 : bool = true
    let _v38 = v48 
    #endif
    let v49 : bool = _v38 
    let v52 : string = $"true; v37 " + v36 + "); " + v34 + " // rust.fix_closure'"
    let v53 : bool = Fable.Core.RustInterop.emitRustExpr () v52 
    let v54 : string = "__future_init"
    let v55 : _ = Fable.Core.RustInterop.emitRustExpr () v54 
    let v56 : string = "v55"
    let v57 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "v57.await"
    let v59 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v58 
    let v60 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v61 : string = "$0.unwrap()"
    let v62 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v59 v61 
    let _v60 = v62 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v63 : string = "$0.unwrap()"
    let v64 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v59 v63 
    let _v60 = v64 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v65 : string = "$0.unwrap()"
    let v66 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v59 v65 
    let _v60 = v66 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v67 : rexie_Rexie = match v59 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v60 = v67 
    #endif
#if FABLE_COMPILER_PYTHON
    let v68 : rexie_Rexie = match v59 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v60 = v68 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v69 : rexie_Rexie = match v59 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v60 = v69 
    #endif
#else
    let v70 : rexie_Rexie = match v59 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v60 = v70 
    #endif
    let v71 : rexie_Rexie = _v60 
    let v74 : (rexie_Rexie -> rexie_Rexie) = method10()
    let v75 : rexie_Rexie = v74 v71
    let v76 : string = "std::sync::Arc::new(v75)"
    let v77 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = $"%A{v77}"
    let v81 : string = "state_core.use_database (3) / database create_local_resource / result: " + string v78 + ""
    let v82 : int64 = 200L
    let v83 : string = method11(v82, v81)
    let v84 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v85 : bool = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : std_sync_Arc<rexie_Rexie> = method12(v77)
    let v87 : string = v34 + v35 
    let v88 : _ = v86 
    let v89 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v90 : string = $"true; let v88 = $0"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr v88 v90 
    let _v89 = v91 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v92 : string = $"true; let v88 = $0"
    let v93 : bool = Fable.Core.RustInterop.emitRustExpr v88 v92 
    let _v89 = v93 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v94 : string = $"true; let v88 = $0"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr v88 v94 
    let _v89 = v95 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v96 : bool = true
    let _v89 = v96 
    #endif
#if FABLE_COMPILER_PYTHON
    let v97 : bool = true
    let _v89 = v97 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : bool = true
    let _v89 = v98 
    #endif
#else
    let v99 : bool = true
    let _v89 = v99 
    #endif
    let v100 : bool = _v89 
    let v103 : string = $"true; v88 " + v87 + "); " + v34 + " // rust.fix_closure'"
    let v104 : bool = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : string = "__future_init"
    let v106 : _ = Fable.Core.RustInterop.emitRustExpr () v105 
    let v107 : string = "v106"
    let v108 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> = Fable.Core.RustInterop.emitRustExpr () v107 
    let v109 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> = method13(v108)
    let v110 : string = "v109.await"
    let v111 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = v34 + v35 
    let v113 : string = v112 + v35 
    let v114 : string = "{"
    let v115 : string = v34 + v114 
    let v116 : _ = v111 
    let v117 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v118 : string = $"true; let v116 = $0"
    let v119 : bool = Fable.Core.RustInterop.emitRustExpr v116 v118 
    let _v117 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : string = $"true; let v116 = $0"
    let v121 : bool = Fable.Core.RustInterop.emitRustExpr v116 v120 
    let _v117 = v121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v122 : string = $"true; let v116 = $0"
    let v123 : bool = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _v117 = v123 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v124 : bool = true
    let _v117 = v124 
    #endif
#if FABLE_COMPILER_PYTHON
    let v125 : bool = true
    let _v117 = v125 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v126 : bool = true
    let _v117 = v126 
    #endif
#else
    let v127 : bool = true
    let _v117 = v127 
    #endif
    let v128 : bool = _v117 
    let v131 : string = $"true; v116 " + v113 + "); " + v115 + " // rust.fix_closure'"
    let v132 : bool = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : string = "__create_local_resource"
    let v134 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v133 
    v134
and closure10 () () : unit =
    let v0 : string = "} //"
    Fable.Core.RustInterop.emitRustExpr () v0 
    let v1 : string = "#[derive( //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : string = "  Debug, //"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "  Clone, //"
    Fable.Core.RustInterop.emitRustExpr () v3 
    let v4 : string = ")] //"
    Fable.Core.RustInterop.emitRustExpr () v4 
    let v5 : string = "pub struct PartialEqWrapper<T>(T); /*"
    Fable.Core.RustInterop.emitRustExpr () v5 
    let v6 : string = "*/ impl PartialEq for PartialEqWrapper< /*"
    Fable.Core.RustInterop.emitRustExpr () v6 
    let v7 : TypeEmit<std_sync_Arc<rexie_Rexie>> = null |> unbox<TypeEmit<std_sync_Arc<rexie_Rexie>>>
    let v10 : string = "*/ > { //"
    Fable.Core.RustInterop.emitRustExpr () v10 
    let v11 : string = "fn eq(&self, other: &Self) -> bool { //"
    Fable.Core.RustInterop.emitRustExpr () v11 
    let v12 : string = $"self"
    let v13 : Ref<PartialEqWrapper<std_sync_Arc<rexie_Rexie>>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = $"other"
    let v15 : Ref<PartialEqWrapper<std_sync_Arc<rexie_Rexie>>> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "&$0.0"
    let v17 : Ref<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "&$0.0"
    let v19 : Ref<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v13 v18 
    let v20 : string = "std::sync::Arc::ptr_eq($0, $1)"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr struct (v19, v17) v20 
    let v22 : string = $"v21 //"
    Fable.Core.RustInterop.emitRustExpr () v22 
    let v23 : string = "} } } fn _main() { { { //"
    Fable.Core.RustInterop.emitRustExpr () v23 
    ()
and closure9 (v0 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) () : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "x"
    let v6 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : (unit -> unit) = closure10()
    let _v7 = true
    let v8 : string = "PartialEqWrapper($0)"
    let v9 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v6 v8 
    let v10 : string = "true; $0 })"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "_optionm_map_"
    let v13 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v12 
    v13
and closure11 () (v0 : std_sync_Arc<rexie_Rexie>) : US4 =
    US4_0(v0)
and method15 () : (std_sync_Arc<rexie_Rexie> -> US4) =
    closure11()
and closure12 () (v0 : string) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and method16 (v0 : std_sync_Arc<rexie_Rexie>) : std_sync_Arc<rexie_Rexie> =
    v0
and closure13 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method17 () : (rexie_Error -> std_string_String) =
    closure13()
and method18 () : string =
    let v0 : string = "store"
    v0
and closure14 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method19 () : (rexie_Error -> std_string_String) =
    closure14()
and method20 () : string =
    let v0 : string = "core-state-heap"
    v0
and closure15 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method21 () : (rexie_Error -> std_string_String) =
    closure15()
and closure16 () (v0 : wasm_bindgen_JsValue) : US6 =
    US6_0(v0)
and method22 () : (wasm_bindgen_JsValue -> US6) =
    closure16()
and method23 (v0 : wasm_bindgen_JsValue) : wasm_bindgen_JsValue =
    v0
and closure17 () (v0 : serde_wasm_bindgen_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method24 () : (serde_wasm_bindgen_Error -> std_string_String) =
    closure17()
and closure18 () (v0 : serde_json_Value) : US7 =
    US7_0(v0)
and method25 () : (serde_json_Value -> US7) =
    closure18()
and method26 (v0 : serde_json_Value) : serde_json_Value =
    v0
and closure19 () (v0 : serde_json_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method27 () : (serde_json_Error -> std_string_String) =
    closure19()
and closure20 () (v0 : borsh_io_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method28 () : (borsh_io_Error -> std_string_String) =
    closure20()
and method29 (v0 : Result<Heap3 option option, std_string_String>) : Result<Heap3 option option, std_string_String> =
    v0
and closure21 () (v0 : Heap3 option option) : US8 =
    US8_0(v0)
and method30 () : (Heap3 option option -> US8) =
    closure21()
and closure22 () (v0 : std_string_String) : US8 =
    US8_1(v0)
and method31 () : (std_string_String -> US8) =
    closure22()
and closure23 () (v0 : Heap3 option) : US5 =
    US5_0(v0)
and method32 () : (Heap3 option -> US5) =
    closure23()
and closure24 () (v0 : Heap3) : US3 =
    US3_0(v0)
and method33 () : (Heap3 -> US3) =
    closure24()
and method34 (v0 : US3) : US3 =
    v0
and method35 (v0 : std_pin_Pin<Box<Dyn<std_future_Future<US3>>>>) : std_pin_Pin<Box<Dyn<std_future_Future<US3>>>> =
    v0
and method14 (v0 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) : leptos_prelude_Resource<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, US3> =
    let v1 : string = "let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //"
    let v2 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = closure9(v0)
    Fable.Core.RustInterop.emitRustExpr v2 v1 
    let v3 : string = "x"
    let v4 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "true; let __future_init = Box::pin(async move { //"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : string = $"%A{v4}"
    let v10 : string = "state_core.use_core_database (2) / core_state_heap create_local_resource / database: " + v7 + ""
    let v11 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v4 v13 
    let v15 : string = "x"
    let v16 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "$0.0"
    let v18 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "true; $0 })"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "_optionm_map_"
    let v22 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : (std_sync_Arc<rexie_Rexie> -> US4) = method15()
    let v24 : US4 option = v22 |> Option.map v23 
    let v35 : US4 = US4_1
    let v36 : US4 = v24 |> Option.defaultValue v35 
    let v345 : US5 =
        match v36 with
        | US4_1 -> (* None *)
            US5_1
        | US4_0(v40) -> (* Some *)
            let v41 : string = "core-state-heap"
            let v42 : string = "state_core.get_data () / id: " + v41 + ""
            let v43 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
            let v45 : string = "true; let __future_init = Box::pin(async { //"
            let v46 : bool = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "store"
            let v48 : (string []) = [|v47|]
            let v49 : string = "$0.to_vec()"
            let v50 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v48 v49 
            let v51 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v52 : (string -> std_string_String) = closure12()
            let v53 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v50, v52) v51 
            let v54 : std_sync_Arc<rexie_Rexie> = method16(v40)
            let v55 : string = "$0.transaction(&v53, rexie::TransactionMode::ReadOnly)"
            let v56 : Result<rexie_Transaction, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v54 v55 
            let v57 : (rexie_Error -> std_string_String) = method17()
            let v58 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v59 : string = "$0.map_err(|x| $1(x))"
            let v60 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v56, v57) v59 
            let _v58 = v60 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v61 : string = "$0.map_err(|x| $1(x))"
            let v62 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v56, v57) v61 
            let _v58 = v62 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v63 : string = "$0.map_err(|x| $1(x))"
            let v64 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v56, v57) v63 
            let _v58 = v64 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v65 : Result<rexie_Transaction, std_string_String> = match v56 with Ok x -> Ok x | Error x -> Error (v57 x)
            let _v58 = v65 
            #endif
#if FABLE_COMPILER_PYTHON
            let v66 : Result<rexie_Transaction, std_string_String> = match v56 with Ok x -> Ok x | Error x -> Error (v57 x)
            let _v58 = v66 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v67 : Result<rexie_Transaction, std_string_String> = match v56 with Ok x -> Ok x | Error x -> Error (v57 x)
            let _v58 = v67 
            #endif
#else
            let v68 : Result<rexie_Transaction, std_string_String> = match v56 with Ok x -> Ok x | Error x -> Error (v57 x)
            let _v58 = v68 
            #endif
            let v69 : Result<rexie_Transaction, std_string_String> = _v58 
            let v72 : string = "$0?"
            let v73 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v69 v72 
            let v74 : string = method18()
            let v75 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v76 : string = "&*$0"
            let v77 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v76 
            let _v75 = v77 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v78 : string = "&*$0"
            let v79 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v78 
            let _v75 = v79 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v80 : string = "&*$0"
            let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v74 v80 
            let _v75 = v81 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v82 : Ref<Str> = v74 |> unbox<Ref<Str>>
            let _v75 = v82 
            #endif
#if FABLE_COMPILER_PYTHON
            let v85 : Ref<Str> = v74 |> unbox<Ref<Str>>
            let _v75 = v85 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v88 : Ref<Str> = v74 |> unbox<Ref<Str>>
            let _v75 = v88 
            #endif
#else
            let v91 : Ref<Str> = v74 |> unbox<Ref<Str>>
            let _v75 = v91 
            #endif
            let v94 : Ref<Str> = _v75 
            let v99 : string = "v73.store($0)"
            let v100 : Result<rexie_Store, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v94 v99 
            let v101 : (rexie_Error -> std_string_String) = method19()
            let v102 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v103 : string = "$0.map_err(|x| $1(x))"
            let v104 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v103 
            let _v102 = v104 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v105 : string = "$0.map_err(|x| $1(x))"
            let v106 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v105 
            let _v102 = v106 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v107 : string = "$0.map_err(|x| $1(x))"
            let v108 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v100, v101) v107 
            let _v102 = v108 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v109 : Result<rexie_Store, std_string_String> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
            let _v102 = v109 
            #endif
#if FABLE_COMPILER_PYTHON
            let v110 : Result<rexie_Store, std_string_String> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
            let _v102 = v110 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v111 : Result<rexie_Store, std_string_String> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
            let _v102 = v111 
            #endif
#else
            let v112 : Result<rexie_Store, std_string_String> = match v100 with Ok x -> Ok x | Error x -> Error (v101 x)
            let _v102 = v112 
            #endif
            let v113 : Result<rexie_Store, std_string_String> = _v102 
            let v116 : string = "$0?"
            let v117 : rexie_Store = Fable.Core.RustInterop.emitRustExpr v113 v116 
            let v118 : string = method20()
            let v119 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v120 : string = "&*$0"
            let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v120 
            let _v119 = v121 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v122 : string = "&*$0"
            let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v122 
            let _v119 = v123 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v124 : string = "&*$0"
            let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
            let _v119 = v125 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v126 : Ref<Str> = v118 |> unbox<Ref<Str>>
            let _v119 = v126 
            #endif
#if FABLE_COMPILER_PYTHON
            let v129 : Ref<Str> = v118 |> unbox<Ref<Str>>
            let _v119 = v129 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v132 : Ref<Str> = v118 |> unbox<Ref<Str>>
            let _v119 = v132 
            #endif
#else
            let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
            let _v119 = v135 
            #endif
            let v138 : Ref<Str> = _v119 
            let v143 : string = "wasm_bindgen::JsValue::from_str($0)"
            let v144 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr v138 v143 
            let v145 : string = $"Box::pin(rexie::Store::get(&v117, v144))"
            let v146 : std_pin_Pin<Box<Dyn<std_future_Future<Result<wasm_bindgen_JsValue option, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v145 
            let v147 : string = "v146.await"
            let v148 : Result<wasm_bindgen_JsValue option, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v147 
            let v149 : (rexie_Error -> std_string_String) = method21()
            let v150 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v151 : string = "$0.map_err(|x| $1(x))"
            let v152 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v148, v149) v151 
            let _v150 = v152 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v153 : string = "$0.map_err(|x| $1(x))"
            let v154 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v148, v149) v153 
            let _v150 = v154 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v155 : string = "$0.map_err(|x| $1(x))"
            let v156 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v148, v149) v155 
            let _v150 = v156 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v157 : Result<wasm_bindgen_JsValue option, std_string_String> = match v148 with Ok x -> Ok x | Error x -> Error (v149 x)
            let _v150 = v157 
            #endif
#if FABLE_COMPILER_PYTHON
            let v158 : Result<wasm_bindgen_JsValue option, std_string_String> = match v148 with Ok x -> Ok x | Error x -> Error (v149 x)
            let _v150 = v158 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v159 : Result<wasm_bindgen_JsValue option, std_string_String> = match v148 with Ok x -> Ok x | Error x -> Error (v149 x)
            let _v150 = v159 
            #endif
#else
            let v160 : Result<wasm_bindgen_JsValue option, std_string_String> = match v148 with Ok x -> Ok x | Error x -> Error (v149 x)
            let _v150 = v160 
            #endif
            let v161 : Result<wasm_bindgen_JsValue option, std_string_String> = _v150 
            let v164 : string = "$0?"
            let v165 : wasm_bindgen_JsValue option = Fable.Core.RustInterop.emitRustExpr v161 v164 
            let v166 : (wasm_bindgen_JsValue -> US6) = method22()
            let v167 : US6 option = v165 |> Option.map v166 
            let v178 : US6 = US6_1
            let v179 : US6 = v167 |> Option.defaultValue v178 
            let v279 : US5 =
                match v179 with
                | US6_1 -> (* None *)
                    US5_1
                | US6_0(v183) -> (* Some *)
                    let v184 : wasm_bindgen_JsValue = method23(v183)
                    let v185 : string = "serde_wasm_bindgen::from_value(v184)"
                    let v186 : Result<serde_json_Value option, serde_wasm_bindgen_Error> = Fable.Core.RustInterop.emitRustExpr () v185 
                    let v187 : (serde_wasm_bindgen_Error -> std_string_String) = method24()
                    let v188 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v189 : string = "$0.map_err(|x| $1(x))"
                    let v190 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v186, v187) v189 
                    let _v188 = v190 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v191 : string = "$0.map_err(|x| $1(x))"
                    let v192 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v186, v187) v191 
                    let _v188 = v192 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v193 : string = "$0.map_err(|x| $1(x))"
                    let v194 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v186, v187) v193 
                    let _v188 = v194 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v195 : Result<serde_json_Value option, std_string_String> = match v186 with Ok x -> Ok x | Error x -> Error (v187 x)
                    let _v188 = v195 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v196 : Result<serde_json_Value option, std_string_String> = match v186 with Ok x -> Ok x | Error x -> Error (v187 x)
                    let _v188 = v196 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v197 : Result<serde_json_Value option, std_string_String> = match v186 with Ok x -> Ok x | Error x -> Error (v187 x)
                    let _v188 = v197 
                    #endif
#else
                    let v198 : Result<serde_json_Value option, std_string_String> = match v186 with Ok x -> Ok x | Error x -> Error (v187 x)
                    let _v188 = v198 
                    #endif
                    let v199 : Result<serde_json_Value option, std_string_String> = _v188 
                    let v202 : string = "$0?"
                    let v203 : serde_json_Value option = Fable.Core.RustInterop.emitRustExpr v199 v202 
                    let v204 : (serde_json_Value -> US7) = method25()
                    let v205 : US7 option = v203 |> Option.map v204 
                    let v216 : US7 = US7_1
                    let v217 : US7 = v205 |> Option.defaultValue v216 
                    match v217 with
                    | US7_1 -> (* None *)
                        US5_1
                    | US7_0(v221) -> (* Some *)
                        let v222 : serde_json_Value = method26(v221)
                        let v223 : string = "serde_json::from_value(v222)"
                        let v224 : Result<Vec<uint8>, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v223 
                        let v225 : (serde_json_Error -> std_string_String) = method27()
                        let v226 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v227 : string = "$0.map_err(|x| $1(x))"
                        let v228 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v227 
                        let _v226 = v228 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v229 : string = "$0.map_err(|x| $1(x))"
                        let v230 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v229 
                        let _v226 = v230 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v231 : string = "$0.map_err(|x| $1(x))"
                        let v232 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v231 
                        let _v226 = v232 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v233 : Result<Vec<uint8>, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
                        let _v226 = v233 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v234 : Result<Vec<uint8>, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
                        let _v226 = v234 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v235 : Result<Vec<uint8>, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
                        let _v226 = v235 
                        #endif
#else
                        let v236 : Result<Vec<uint8>, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
                        let _v226 = v236 
                        #endif
                        let v237 : Result<Vec<uint8>, std_string_String> = _v226 
                        let v240 : string = "$0?"
                        let v241 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v237 v240 
                        let v242 : string = "fable_library_rust::NativeArray_::array_from($0)"
                        let v243 : (uint8 []) = Fable.Core.RustInterop.emitRustExpr v241 v242 
                        let v244 : int32 = v243.Length
                        let v245 : string = "state_core.get_data () / data_len: " + string v244 + ""
                        let v246 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v247 : bool = Fable.Core.RustInterop.emitRustExpr v245 v246 
                        let v248 : string = "$0.to_vec()"
                        let v249 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v243 v248 
                        let v250 : string = "v249.as_slice()"
                        let v251 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v250 
                        let v252 : string = "true; let mut v251 = v251"
                        let v253 : bool = Fable.Core.RustInterop.emitRustExpr () v252 
                        let v254 : string = "borsh::BorshDeserialize::deserialize(&mut v251)"
                        let v255 : Result<Heap3 option, borsh_io_Error> = Fable.Core.RustInterop.emitRustExpr () v254 
                        let v256 : (borsh_io_Error -> std_string_String) = method28()
                        let v257 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v258 : string = "$0.map_err(|x| $1(x))"
                        let v259 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v255, v256) v258 
                        let _v257 = v259 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v260 : string = "$0.map_err(|x| $1(x))"
                        let v261 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v255, v256) v260 
                        let _v257 = v261 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v262 : string = "$0.map_err(|x| $1(x))"
                        let v263 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v255, v256) v262 
                        let _v257 = v263 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v264 : Result<Heap3 option, std_string_String> = match v255 with Ok x -> Ok x | Error x -> Error (v256 x)
                        let _v257 = v264 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v265 : Result<Heap3 option, std_string_String> = match v255 with Ok x -> Ok x | Error x -> Error (v256 x)
                        let _v257 = v265 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v266 : Result<Heap3 option, std_string_String> = match v255 with Ok x -> Ok x | Error x -> Error (v256 x)
                        let _v257 = v266 
                        #endif
#else
                        let v267 : Result<Heap3 option, std_string_String> = match v255 with Ok x -> Ok x | Error x -> Error (v256 x)
                        let _v257 = v267 
                        #endif
                        let v268 : Result<Heap3 option, std_string_String> = _v257 
                        let v271 : string = "$0?"
                        let v272 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v268 v271 
                        US5_0(v272)
            let v286 : Heap3 option option =
                match v279 with
                | US5_1 -> (* None *)
                    let v284 : Heap3 option option = None
                    v284
                | US5_0(v280) -> (* Some *)
                    let v281 : Heap3 option option = Some v280 
                    v281
            let v287 : Result<Heap3 option option, std_string_String> = Ok v286 
            let v288 : Result<Heap3 option option, std_string_String> = method29(v287)
            let v289 : string = ""
            let v290 : string = "}"
            let v291 : string = v289 + v290 
            let v292 : _ = v288 
            let v293 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v294 : string = $"true; let v292 = $0"
            let v295 : bool = Fable.Core.RustInterop.emitRustExpr v292 v294 
            let _v293 = v295 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v296 : string = $"true; let v292 = $0"
            let v297 : bool = Fable.Core.RustInterop.emitRustExpr v292 v296 
            let _v293 = v297 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v298 : string = $"true; let v292 = $0"
            let v299 : bool = Fable.Core.RustInterop.emitRustExpr v292 v298 
            let _v293 = v299 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v300 : bool = true
            let _v293 = v300 
            #endif
#if FABLE_COMPILER_PYTHON
            let v301 : bool = true
            let _v293 = v301 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v302 : bool = true
            let _v293 = v302 
            #endif
#else
            let v303 : bool = true
            let _v293 = v303 
            #endif
            let v304 : bool = _v293 
            let v307 : string = $"true; v292 " + v291 + "); " + v289 + " // rust.fix_closure'"
            let v308 : bool = Fable.Core.RustInterop.emitRustExpr () v307 
            let v309 : string = "__future_init"
            let v310 : _ = Fable.Core.RustInterop.emitRustExpr () v309 
            let v311 : string = "v310"
            let v312 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap3 option option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v311 
            let v313 : string = "v312.await"
            let v314 : Result<Heap3 option option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v313 
            let v315 : (Heap3 option option -> US8) = method30()
            let v316 : (std_string_String -> US8) = method31()
            let v317 : US8 = match v314 with Ok x -> v315 x | Error x -> v316 x
            match v317 with
            | US8_1(v336) -> (* Error *)
                let v337 : string = "state_core.use_core_database (3) / error: " + string v336 + ""
                let v338 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v339 : bool = Fable.Core.RustInterop.emitRustExpr v337 v338 
                US5_1
            | US8_0(v318) -> (* Ok *)
                let v319 : (Heap3 option -> US5) = method32()
                let v320 : US5 option = v318 |> Option.map v319 
                let v331 : US5 = US5_1
                let v332 : US5 = v320 |> Option.defaultValue v331 
                v332
    let v367 : US9 =
        match v345 with
        | US5_1 -> (* None *)
            US9_1
        | US5_0(v346) -> (* Some *)
            let v347 : (Heap3 -> US3) = method33()
            let v348 : US3 option = v346 |> Option.map v347 
            let v359 : US3 = US3_1
            let v360 : US3 = v348 |> Option.defaultValue v359 
            US9_0(v360)
    let v374 : US3 =
        match v367 with
        | US9_0(v368) -> (* Some *)
            match v368 with
            | US3_0(v369) -> (* Some *)
                US3_0(v369)
            | _ ->
                US3_1
        | _ ->
            US3_1
    let v375 : US3 = method34(v374)
    let v376 : string = ""
    let v377 : string = "}"
    let v378 : string = v376 + v377 
    let v379 : _ = v375 
    let v380 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v381 : string = $"true; let v379 = $0"
    let v382 : bool = Fable.Core.RustInterop.emitRustExpr v379 v381 
    let _v380 = v382 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v383 : string = $"true; let v379 = $0"
    let v384 : bool = Fable.Core.RustInterop.emitRustExpr v379 v383 
    let _v380 = v384 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v385 : string = $"true; let v379 = $0"
    let v386 : bool = Fable.Core.RustInterop.emitRustExpr v379 v385 
    let _v380 = v386 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v387 : bool = true
    let _v380 = v387 
    #endif
#if FABLE_COMPILER_PYTHON
    let v388 : bool = true
    let _v380 = v388 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v389 : bool = true
    let _v380 = v389 
    #endif
#else
    let v390 : bool = true
    let _v380 = v390 
    #endif
    let v391 : bool = _v380 
    let v394 : string = $"true; v379 " + v378 + "); " + v376 + " // rust.fix_closure'"
    let v395 : bool = Fable.Core.RustInterop.emitRustExpr () v394 
    let v396 : string = "__future_init"
    let v397 : _ = Fable.Core.RustInterop.emitRustExpr () v396 
    let v398 : string = "v397"
    let v399 : std_pin_Pin<Box<Dyn<std_future_Future<US3>>>> = Fable.Core.RustInterop.emitRustExpr () v398 
    let v400 : std_pin_Pin<Box<Dyn<std_future_Future<US3>>>> = method35(v399)
    let v401 : string = "v400.await"
    let v402 : US3 = Fable.Core.RustInterop.emitRustExpr () v401 
    let v403 : string = v376 + v377 
    let v404 : string = v403 + v377 
    let v405 : string = "{"
    let v406 : string = v376 + v405 
    let v407 : _ = v402 
    let v408 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v409 : string = $"true; let v407 = $0"
    let v410 : bool = Fable.Core.RustInterop.emitRustExpr v407 v409 
    let _v408 = v410 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v411 : string = $"true; let v407 = $0"
    let v412 : bool = Fable.Core.RustInterop.emitRustExpr v407 v411 
    let _v408 = v412 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v413 : string = $"true; let v407 = $0"
    let v414 : bool = Fable.Core.RustInterop.emitRustExpr v407 v413 
    let _v408 = v414 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v415 : bool = true
    let _v408 = v415 
    #endif
#if FABLE_COMPILER_PYTHON
    let v416 : bool = true
    let _v408 = v416 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v417 : bool = true
    let _v408 = v417 
    #endif
#else
    let v418 : bool = true
    let _v408 = v418 
    #endif
    let v419 : bool = _v408 
    let v422 : string = $"true; v407 " + v404 + "); " + v406 + " // rust.fix_closure'"
    let v423 : bool = Fable.Core.RustInterop.emitRustExpr () v422 
    let v424 : string = "__create_local_resource"
    let v425 : leptos_prelude_Resource<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, US3> = Fable.Core.RustInterop.emitRustExpr () v424 
    v425
and method36 () : web_sys_Window =
    let v0 : string = "leptos::leptos_dom::window()"
    let v1 : web_sys_Window = Fable.Core.RustInterop.emitRustExpr () v0 
    v1
and method37 (v0 : web_sys_Window) : Result<web_sys_Storage option, wasm_bindgen_JsValue> =
    let v1 : string = "$0.local_storage()"
    let v2 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure26 () (v0 : web_sys_Storage option) : US10 =
    US10_0(v0)
and method38 () : (web_sys_Storage option -> US10) =
    closure26()
and closure27 () (v0 : wasm_bindgen_JsValue) : US10 =
    US10_1(v0)
and method39 () : (wasm_bindgen_JsValue -> US10) =
    closure27()
and closure28 () (v0 : web_sys_Storage) : US12 =
    US12_0(v0)
and method40 () : (web_sys_Storage -> US12) =
    closure28()
and closure29 () (v0 : US3) : US9 =
    US9_0(v0)
and method41 () : (US3 -> US9) =
    closure29()
and method42 (v0 : web_sys_Storage) : web_sys_Storage =
    v0
and method43 () : string =
    let v0 : string = "core-state-heap"
    v0
and closure30 () (v0 : std_string_String option) : US13 =
    US13_0(v0)
and method44 () : (std_string_String option -> US13) =
    closure30()
and closure31 () (v0 : wasm_bindgen_JsValue) : US13 =
    US13_1(v0)
and method45 () : (wasm_bindgen_JsValue -> US13) =
    closure31()
and method46 (v0 : std_string_String option) : std_string_String option =
    v0
and closure32 () (v0 : std_string_String) : US15 =
    US15_0(v0)
and method47 () : (std_string_String -> US15) =
    closure32()
and method49 (v0 : string) : string =
    v0
and closure34 () (v0 : serde_json_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method50 () : (serde_json_Error -> std_string_String) =
    closure34()
and closure33 () (v0 : std_string_String) : US3 =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = method49(v2)
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : string = "serde_json::from_str(&$0)"
    let v29 : Result<Heap3, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v23 v28 
    let v30 : (serde_json_Error -> std_string_String) = method50()
    let v31 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "$0.map_err(|x| $1(x))"
    let v33 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v32 
    let _v31 = v33 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v34 : string = "$0.map_err(|x| $1(x))"
    let v35 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v34 
    let _v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : string = "$0.map_err(|x| $1(x))"
    let v37 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v36 
    let _v31 = v37 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _v31 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _v31 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _v31 = v40 
    #endif
#else
    let v41 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _v31 = v41 
    #endif
    let v42 : Result<Heap3, std_string_String> = _v31 
    let v45 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v46 : string = "$0.ok()"
    let v47 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v46 
    let _v45 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "$0.ok()"
    let v49 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v48 
    let _v45 = v49 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v50 : string = "$0.ok()"
    let v51 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v50 
    let _v45 = v51 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _v45 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _v45 = v53 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _v45 = v54 
    #endif
#else
    let v55 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _v45 = v55 
    #endif
    let v56 : Heap3 option = _v45 
    let v59 : (Heap3 -> US3) = method33()
    let v60 : US3 option = v56 |> Option.map v59 
    let v71 : US3 = US3_1
    let v72 : US3 = v60 |> Option.defaultValue v71 
    v72
and method48 () : (std_string_String -> US3) =
    closure33()
and closure36 (v0 : Heap3) (v1 : bool) : bool =
    let v2 : string = "state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : bool = v0.l0
    v5
and closure37 (v0 : Heap3) (v1 : bool) : bool =
    let v2 : string = "state_core.use_core_database (8) / effect core_state_heap / debug signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : bool = v0.l1
    v5
and closure38 (v0 : Heap3) (v1 : std_string_String) : std_string_String =
    let v2 : string = "state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : std_string_String = v0.l2
    v5
and closure39 (v0 : Heap3) (v1 : Heap0) : Heap0 =
    let v2 : string = "state_core.use_core_database (10) / effect core_state_heap / data signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : Heap0 = v0.l3
    v5
and closure35 (v0 : Heap2, v1 : Heap3) () : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<bool> = v4.l0
    let v6 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v7 : (bool -> bool) = closure36(v1)
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    let v9 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v10 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v11 : Heap1 = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_RwSignal<bool> = v11.l1
    let v13 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v14 : (bool -> bool) = closure37(v1)
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr struct (v12, v14) v13 
    let v16 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v17 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v18 : Heap1 = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : leptos_prelude_RwSignal<std_string_String> = v18.l2
    let v20 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v21 : (std_string_String -> std_string_String) = closure38(v1)
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr struct (v19, v21) v20 
    let v23 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v24 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v25 : Heap1 = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_RwSignal<Heap0> = v25.l3
    let v27 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v28 : (Heap0 -> Heap0) = closure39(v1)
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr struct (v26, v28) v27 
    ()
and closure25 (v0 : Heap2, v1 : leptos_prelude_Resource<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, US3>) () : unit =
    let v2 : string = "state_core.use_core_database (4) / effect core_state_heap / ##1"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : web_sys_Window = method36()
    let v6 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method37(v5)
    let v7 : (web_sys_Storage option -> US10) = method38()
    let v8 : (wasm_bindgen_JsValue -> US10) = method39()
    let v9 : US10 = match v6 with Ok x -> v7 x | Error x -> v8 x
    let v32 : US11 =
        match v9 with
        | US10_1(v29) -> (* Error *)
            US11_1(v29)
        | US10_0(v10) -> (* Ok *)
            let v11 : (web_sys_Storage -> US12) = method40()
            let v12 : US12 option = v10 |> Option.map v11 
            let v23 : US12 = US12_1
            let v24 : US12 = v12 |> Option.defaultValue v23 
            US11_0(v24)
    match v32 with
    | US11_0(v33) -> (* Ok *)
        match v33 with
        | US12_0(v34) -> (* Some *)
            let v35 : string = $"leptos::prelude::SignalGet::get(&$0)"
            let v36 : US3 option = Fable.Core.RustInterop.emitRustExpr v1 v35 
            let v37 : (US3 -> US9) = method41()
            let v38 : US9 option = v36 |> Option.map v37 
            let v49 : US9 = US9_1
            let v50 : US9 = v38 |> Option.defaultValue v49 
            let v54 : string = $"%A{v50}"
            let v57 : string = "state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: " + v54 + ""
            let v58 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v59 : bool = Fable.Core.RustInterop.emitRustExpr v57 v58 
            let v438 : US3 =
                match v50 with
                | US9_0(v60) -> (* Some *)
                    match v60 with
                    | US3_0(v61) -> (* Some *)
                        US3_0(v61)
                    | _ ->
                        let v63 : web_sys_Storage = method42(v34)
                        let v64 : string = method43()
                        let v65 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v66 : string = "&*$0"
                        let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v64 v66 
                        let _v65 = v67 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v68 : string = "&*$0"
                        let v69 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v64 v68 
                        let _v65 = v69 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v70 : string = "&*$0"
                        let v71 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v64 v70 
                        let _v65 = v71 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v72 : Ref<Str> = v64 |> unbox<Ref<Str>>
                        let _v65 = v72 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v75 : Ref<Str> = v64 |> unbox<Ref<Str>>
                        let _v65 = v75 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v78 : Ref<Str> = v64 |> unbox<Ref<Str>>
                        let _v65 = v78 
                        #endif
#else
                        let v81 : Ref<Str> = v64 |> unbox<Ref<Str>>
                        let _v65 = v81 
                        #endif
                        let v84 : Ref<Str> = _v65 
                        let v89 : string = $"web_sys::Storage::get_item(&v63, $0)"
                        let v90 : Result<std_string_String option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v84 v89 
                        let v91 : (std_string_String option -> US13) = method44()
                        let v92 : (wasm_bindgen_JsValue -> US13) = method45()
                        let v93 : US13 = match v90 with Ok x -> v91 x | Error x -> v92 x
                        let v119 : US14 =
                            match v93 with
                            | US13_1(v116) -> (* Error *)
                                US14_1(v116)
                            | US13_0(v94) -> (* Ok *)
                                let v95 : std_string_String option = method46(v94)
                                let v96 : string = "serde_json::from_value(v95.into()).unwrap()"
                                let v97 : std_string_String option = Fable.Core.RustInterop.emitRustExpr () v96 
                                let v98 : (std_string_String -> US15) = method47()
                                let v99 : US15 option = v97 |> Option.map v98 
                                let v110 : US15 = US15_1
                                let v111 : US15 = v99 |> Option.defaultValue v110 
                                US14_0(v111)
                        let v125 : US16 =
                            match v119 with
                            | US14_1(v122) -> (* Error *)
                                US16_1
                            | US14_0(v120) -> (* Ok *)
                                US16_0(v120)
                        let v132 : US15 =
                            match v125 with
                            | US16_0(v126) -> (* Some *)
                                match v126 with
                                | US15_0(v127) -> (* Some *)
                                    US15_0(v127)
                                | _ ->
                                    US15_1
                            | _ ->
                                US15_1
                        let v139 : std_string_String option =
                            match v132 with
                            | US15_1 -> (* None *)
                                let v137 : std_string_String option = None
                                v137
                            | US15_0(v133) -> (* Some *)
                                let v134 : std_string_String option = Some v133 
                                v134
                        let v140 : (std_string_String -> US3) = method48()
                        let v141 : US3 option = v139 |> Option.map v140 
                        let v226 : (US3 -> US9) = method41()
                        let v227 : US9 option = v141 |> Option.map v226 
                        let v238 : US9 = US9_1
                        let v239 : US9 = v227 |> Option.defaultValue v238 
                        match v239 with
                        | US9_0(v243) -> (* Some *)
                            match v243 with
                            | US3_0(v244) -> (* Some *)
                                US3_0(v244)
                            | _ ->
                                US3_1
                        | _ ->
                            US3_1
                | _ ->
                    let v251 : web_sys_Storage = method42(v34)
                    let v252 : string = method43()
                    let v253 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v254 : string = "&*$0"
                    let v255 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v254 
                    let _v253 = v255 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v256 : string = "&*$0"
                    let v257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v256 
                    let _v253 = v257 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v258 : string = "&*$0"
                    let v259 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v258 
                    let _v253 = v259 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v260 : Ref<Str> = v252 |> unbox<Ref<Str>>
                    let _v253 = v260 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v263 : Ref<Str> = v252 |> unbox<Ref<Str>>
                    let _v253 = v263 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v266 : Ref<Str> = v252 |> unbox<Ref<Str>>
                    let _v253 = v266 
                    #endif
#else
                    let v269 : Ref<Str> = v252 |> unbox<Ref<Str>>
                    let _v253 = v269 
                    #endif
                    let v272 : Ref<Str> = _v253 
                    let v277 : string = $"web_sys::Storage::get_item(&v251, $0)"
                    let v278 : Result<std_string_String option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v272 v277 
                    let v279 : (std_string_String option -> US13) = method44()
                    let v280 : (wasm_bindgen_JsValue -> US13) = method45()
                    let v281 : US13 = match v278 with Ok x -> v279 x | Error x -> v280 x
                    let v307 : US14 =
                        match v281 with
                        | US13_1(v304) -> (* Error *)
                            US14_1(v304)
                        | US13_0(v282) -> (* Ok *)
                            let v283 : std_string_String option = method46(v282)
                            let v284 : string = "serde_json::from_value(v283.into()).unwrap()"
                            let v285 : std_string_String option = Fable.Core.RustInterop.emitRustExpr () v284 
                            let v286 : (std_string_String -> US15) = method47()
                            let v287 : US15 option = v285 |> Option.map v286 
                            let v298 : US15 = US15_1
                            let v299 : US15 = v287 |> Option.defaultValue v298 
                            US14_0(v299)
                    let v313 : US16 =
                        match v307 with
                        | US14_1(v310) -> (* Error *)
                            US16_1
                        | US14_0(v308) -> (* Ok *)
                            US16_0(v308)
                    let v320 : US15 =
                        match v313 with
                        | US16_0(v314) -> (* Some *)
                            match v314 with
                            | US15_0(v315) -> (* Some *)
                                US15_0(v315)
                            | _ ->
                                US15_1
                        | _ ->
                            US15_1
                    let v327 : std_string_String option =
                        match v320 with
                        | US15_1 -> (* None *)
                            let v325 : std_string_String option = None
                            v325
                        | US15_0(v321) -> (* Some *)
                            let v322 : std_string_String option = Some v321 
                            v322
                    let v328 : (std_string_String -> US3) = method48()
                    let v329 : US3 option = v327 |> Option.map v328 
                    let v414 : (US3 -> US9) = method41()
                    let v415 : US9 option = v329 |> Option.map v414 
                    let v426 : US9 = US9_1
                    let v427 : US9 = v415 |> Option.defaultValue v426 
                    match v427 with
                    | US9_0(v431) -> (* Some *)
                        match v431 with
                        | US3_0(v432) -> (* Some *)
                            US3_0(v432)
                        | _ ->
                            US3_1
                    | _ ->
                        US3_1
            let v439 : string = $"%A{v438}"
            let v442 : string = "state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: " + v439 + ""
            let v443 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v444 : bool = Fable.Core.RustInterop.emitRustExpr v442 v443 
            match v438 with
            | US3_0(v445) -> (* Some *)
                let v446 : string = "true; leptos::prelude::batch(move || $0());"
                let v447 : (unit -> unit) = closure35(v0, v445)
                let v448 : bool = Fable.Core.RustInterop.emitRustExpr v447 v446 
                ()
            | _ ->
                ()
        | _ ->
            ()
    | _ ->
        ()
and closure40 (v0 : Heap2) () : std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>> =
    let v1 : string = "state_core.use_core_database (11) / loading create_memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>> = v0.l1
    let v5 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v6 : std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method51 () : string =
    let v0 : string = "core-state-heap"
    v0
and method52 (v0 : Result<unit, rexie_Error>) : Result<unit, rexie_Error> =
    v0
and method53 () : unit =
    ()
and closure41 (v0 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) (v1 : Heap3) : std_pin_Pin<Box<Dyn<std_future_Future<unit>>>> =
    let v2 : string = $"%A{v1}"
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : (std_sync_Arc<rexie_Rexie> -> US4) = method15()
    let v8 : US4 option = v6 |> Option.map v7 
    let v19 : US4 = US4_1
    let v20 : US4 = v8 |> Option.defaultValue v19 
    let v24 : string = "true; let __future_init = Box::pin(async move { //"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    match v20 with
    | US4_1 -> (* None *)
        let v112 : string = "state_core.use_core_database (13) / set_core_state_heap_action / database=None"
        let v113 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v114 : bool = Fable.Core.RustInterop.emitRustExpr v112 v113 
        ()
    | US4_0(v26) -> (* Some *)
        let v27 : string = "state_core.use_core_database (12) / set_core_state_heap_action / value: " + string v2 + ""
        let v28 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v29 : bool = Fable.Core.RustInterop.emitRustExpr v27 v28 
        let v30 : string = $"%A{v1}"
        let v33 : int64 = System.Convert.ToInt64 v30.Length
        let v34 : string = "state_core.set_data () / data_len: " + string v33 + ""
        let v35 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v36 : bool = Fable.Core.RustInterop.emitRustExpr v34 v35 
        let v37 : string = "true; let __future_init = Box::pin(async move { //"
        let v38 : bool = Fable.Core.RustInterop.emitRustExpr () v37 
        let v39 : string = "true; let mut data = Vec::new()"
        let v40 : bool = Fable.Core.RustInterop.emitRustExpr () v39 
        let v41 : string = "true; borsh::BorshSerialize::serialize(&$0, &mut data).unwrap()"
        let v42 : bool = Fable.Core.RustInterop.emitRustExpr v1 v41 
        let v43 : string = "data"
        let v44 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v43 
        let v45 : string = "serde_wasm_bindgen::to_value(&v44).unwrap()"
        let v46 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr () v45 
        let v47 : string = method51()
        let v48 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v49 : string = "&*$0"
        let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v47 v49 
        let _v48 = v50 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v51 : string = "&*$0"
        let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v47 v51 
        let _v48 = v52 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v53 : string = "&*$0"
        let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v47 v53 
        let _v48 = v54 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v55 : Ref<Str> = v47 |> unbox<Ref<Str>>
        let _v48 = v55 
        #endif
#if FABLE_COMPILER_PYTHON
        let v58 : Ref<Str> = v47 |> unbox<Ref<Str>>
        let _v48 = v58 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v61 : Ref<Str> = v47 |> unbox<Ref<Str>>
        let _v48 = v61 
        #endif
#else
        let v64 : Ref<Str> = v47 |> unbox<Ref<Str>>
        let _v48 = v64 
        #endif
        let v67 : Ref<Str> = _v48 
        let v72 : string = "$0.transaction(&[\"store\"], rexie::TransactionMode::ReadWrite)?"
        let v73 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v26 v72 
        let v74 : string = "v73.store(\"store\")?"
        let v75 : rexie_Store = Fable.Core.RustInterop.emitRustExpr () v74 
        let v76 : string = "true; v75.put(&v46, Some(&$0.into())).await?"
        let v77 : bool = Fable.Core.RustInterop.emitRustExpr v67 v76 
        let v78 : string = "true; v73.done().await?"
        let v79 : bool = Fable.Core.RustInterop.emitRustExpr () v78 
        let v80 : Result<unit, rexie_Error> = Ok () 
        let v81 : Result<unit, rexie_Error> = method52(v80)
        let v82 : string = ""
        let v83 : string = "}"
        let v84 : string = v82 + v83 
        let v85 : _ = v81 
        let v86 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v87 : string = $"true; let v85 = $0"
        let v88 : bool = Fable.Core.RustInterop.emitRustExpr v85 v87 
        let _v86 = v88 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v89 : string = $"true; let v85 = $0"
        let v90 : bool = Fable.Core.RustInterop.emitRustExpr v85 v89 
        let _v86 = v90 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v91 : string = $"true; let v85 = $0"
        let v92 : bool = Fable.Core.RustInterop.emitRustExpr v85 v91 
        let _v86 = v92 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v93 : bool = true
        let _v86 = v93 
        #endif
#if FABLE_COMPILER_PYTHON
        let v94 : bool = true
        let _v86 = v94 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v95 : bool = true
        let _v86 = v95 
        #endif
#else
        let v96 : bool = true
        let _v86 = v96 
        #endif
        let v97 : bool = _v86 
        let v100 : string = $"true; v85 " + v84 + "); " + v82 + " // rust.fix_closure'"
        let v101 : bool = Fable.Core.RustInterop.emitRustExpr () v100 
        let v102 : string = "__future_init"
        let v103 : _ = Fable.Core.RustInterop.emitRustExpr () v102 
        let v104 : string = "v103"
        let v105 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v104 
        let v106 : string = "v105.await"
        let v107 : Result<unit, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v106 
        let v108 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v109 : string = "$0.unwrap()"
        Fable.Core.RustInterop.emitRustExpr v107 v109 
        let _v108 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "$0.unwrap()"
        Fable.Core.RustInterop.emitRustExpr v107 v110 
        let _v108 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v111 : string = "$0.unwrap()"
        Fable.Core.RustInterop.emitRustExpr v107 v111 
        let _v108 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _v108 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _v108 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _v108 = () 
        #endif
#else
        match v107 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
        let _v108 = () 
        #endif
        _v108 
        ()
    method53()
    let v115 : string = ""
    let v116 : string = "}"
    let v117 : string = v115 + v116 
    let v118 : string = v117 + v116 
    let v119 : string = "{"
    let v120 : string = v115 + v119 
    let v121 : _ = () 
    let v122 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v123 : string = $"true; let v121 = $0"
    let v124 : bool = Fable.Core.RustInterop.emitRustExpr v121 v123 
    let _v122 = v124 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v125 : string = $"true; let v121 = $0"
    let v126 : bool = Fable.Core.RustInterop.emitRustExpr v121 v125 
    let _v122 = v126 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v127 : string = $"true; let v121 = $0"
    let v128 : bool = Fable.Core.RustInterop.emitRustExpr v121 v127 
    let _v122 = v128 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v129 : bool = true
    let _v122 = v129 
    #endif
#if FABLE_COMPILER_PYTHON
    let v130 : bool = true
    let _v122 = v130 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v131 : bool = true
    let _v122 = v131 
    #endif
#else
    let v132 : bool = true
    let _v122 = v132 
    #endif
    let v133 : bool = _v122 
    let v136 : string = $"true; v121 " + v118 + "); " + v120 + " // rust.fix_closure'"
    let v137 : bool = Fable.Core.RustInterop.emitRustExpr () v136 
    let v138 : string = "__future_init"
    let v139 : _ = Fable.Core.RustInterop.emitRustExpr () v138 
    let v140 : string = "v139"
    let v141 : std_pin_Pin<Box<Dyn<std_future_Future<unit>>>> = Fable.Core.RustInterop.emitRustExpr () v140 
    v141
and method54 (v0 : std_string_String) : std_string_String =
    v0
and closure43 () (v0 : leptos_prelude_RwSignal<bool>) : US17 =
    US17_0(v0)
and method55 () : (leptos_prelude_RwSignal<bool> -> US17) =
    closure43()
and closure44 () (v0 : bool) : bool =
    let v1 : string = "state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    true
and method56 (v0 : web_sys_Storage) : web_sys_Storage =
    v0
and method57 () : string =
    let v0 : string = "core-state-heap"
    v0
and method58 (v0 : Heap3) : Heap3 =
    v0
and closure42 (v0 : Heap2, v1 : leptos_prelude_Memo<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>>, v2 : leptos_prelude_WriteSignal<bool>, v3 : leptos_prelude_ReadSignal<bool>, v4 : leptos_prelude_Action<Heap3, unit>) () : unit =
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let v7 : string = "state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: " + string v6 + ""
    let v8 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v11 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v12 : Heap1 = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_prelude_RwSignal<bool> = v12.l0
    let v14 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v17 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v18 : Heap1 = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : leptos_prelude_RwSignal<bool> = v18.l1
    let v20 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v23 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v24 : Heap1 = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : leptos_prelude_RwSignal<std_string_String> = v24.l2
    let v26 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v29 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v30 : Heap1 = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_RwSignal<Heap0> = v30.l3
    let v32 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v33 : Heap0 = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : Heap3 = {l0 = v15; l1 = v21; l2 = v27; l3 = v33} : Heap3
    let v35 : string = $"%A{v34}"
    let v38 : string = "state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: " + string v35 + ""
    let v39 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = $"$0()"
    let v42 : std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr v1 v41 
    let v43 : string = "dark_mode_key"
    let v44 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v43 v45 
    let _v44 = v46 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v43 v47 
    let _v44 = v48 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v49 : string = "&*$0"
    let v50 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v43 v49 
    let _v44 = v50 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v51 : Ref<Str> = v43 |> unbox<Ref<Str>>
    let _v44 = v51 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : Ref<Str> = v43 |> unbox<Ref<Str>>
    let _v44 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v57 : Ref<Str> = v43 |> unbox<Ref<Str>>
    let _v44 = v57 
    #endif
#else
    let v60 : Ref<Str> = v43 |> unbox<Ref<Str>>
    let _v44 = v60 
    #endif
    let v63 : Ref<Str> = _v44 
    let v68 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v63 v69 
    let _v68 = v70 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v71 : string = "String::from($0)"
    let v72 : std_string_String = Fable.Core.RustInterop.emitRustExpr v63 v71 
    let _v68 = v72 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v73 : string = "String::from($0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v63 v73 
    let _v68 = v74 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v75 : std_string_String = v63 |> unbox<std_string_String>
    let _v68 = v75 
    #endif
#if FABLE_COMPILER_PYTHON
    let v78 : std_string_String = v63 |> unbox<std_string_String>
    let _v68 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v81 : std_string_String = v63 |> unbox<std_string_String>
    let _v68 = v81 
    #endif
#else
    let v84 : std_string_String = v63 |> unbox<std_string_String>
    let _v68 = v84 
    #endif
    let v87 : std_string_String = _v68 
    let v92 : std_string_String = method54(v87)
    let v93 : string = "std::collections::HashMap::get(&$0, &v92).map(|x| x).cloned()"
    let v94 : leptos_prelude_RwSignal<bool> option = Fable.Core.RustInterop.emitRustExpr v42 v93 
    let v95 : (leptos_prelude_RwSignal<bool> -> US17) = method55()
    let v96 : US17 option = v94 |> Option.map v95 
    let v107 : US17 = US17_1
    let v108 : US17 = v96 |> Option.defaultValue v107 
    let v118 : US18 =
        match v108 with
        | US17_1 -> (* None *)
            US18_1
        | US17_0(v112) -> (* Some *)
            let v113 : string = $"leptos::prelude::SignalGet::get(&$0)"
            let v114 : bool = Fable.Core.RustInterop.emitRustExpr v112 v113 
            US18_0(v114)
    let v121 : bool =
        match v118 with
        | US18_1 -> (* None *)
            false
        | US18_0(v119) -> (* Some *)
            v119
    let v122 : string = "state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: " + string v121 + ""
    let v123 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v124 : bool = Fable.Core.RustInterop.emitRustExpr v122 v123 
    let v125 : bool = v121 = false
    if v125 then
        let v126 : bool = v6 = false
        if v126 then
            let v127 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
            let v128 : (bool -> bool) = closure44()
            let v129 : bool = Fable.Core.RustInterop.emitRustExpr struct (v2, v128) v127 
            ()
        else
            let v130 : string = "state_core.use_core_database (18) / effect new_core_state_heap / ##4"
            let v131 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v132 : bool = Fable.Core.RustInterop.emitRustExpr v130 v131 
            let v133 : web_sys_Window = method36()
            let v134 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method37(v133)
            let v135 : (web_sys_Storage option -> US10) = method38()
            let v136 : (wasm_bindgen_JsValue -> US10) = method39()
            let v137 : US10 = match v134 with Ok x -> v135 x | Error x -> v136 x
            let v160 : US11 =
                match v137 with
                | US10_1(v157) -> (* Error *)
                    US11_1(v157)
                | US10_0(v138) -> (* Ok *)
                    let v139 : (web_sys_Storage -> US12) = method40()
                    let v140 : US12 option = v138 |> Option.map v139 
                    let v151 : US12 = US12_1
                    let v152 : US12 = v140 |> Option.defaultValue v151 
                    US11_0(v152)
            match v160 with
            | US11_0(v161) -> (* Ok *)
                match v161 with
                | US12_0(v162) -> (* Some *)
                    let v163 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
                    let v164 : bool = Fable.Core.RustInterop.emitRustExpr struct (v4, v34) v163 
                    let v165 : web_sys_Storage = method56(v162)
                    let v166 : string = method57()
                    let v167 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v168 : string = "&*$0"
                    let v169 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v166 v168 
                    let _v167 = v169 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v170 : string = "&*$0"
                    let v171 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v166 v170 
                    let _v167 = v171 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v172 : string = "&*$0"
                    let v173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v166 v172 
                    let _v167 = v173 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v174 : Ref<Str> = v166 |> unbox<Ref<Str>>
                    let _v167 = v174 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v177 : Ref<Str> = v166 |> unbox<Ref<Str>>
                    let _v167 = v177 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v180 : Ref<Str> = v166 |> unbox<Ref<Str>>
                    let _v167 = v180 
                    #endif
#else
                    let v183 : Ref<Str> = v166 |> unbox<Ref<Str>>
                    let _v167 = v183 
                    #endif
                    let v186 : Ref<Str> = _v167 
                    let v191 : Heap3 = method58(v34)
                    let v192 : string = "serde_json::json!(v191).to_string()"
                    let v193 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v192 
                    let v194 : string = "$0.as_str()"
                    let v195 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v193 v194 
                    let v196 : string = $"web_sys::Storage::set(&v165, $0, v195).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr v186 v196 
                    ()
                | _ ->
                    ()
            | _ ->
                ()
and closure45 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<bool> = v3.l0
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method59 (v0 : Heap2) : (unit -> bool) =
    closure45(v0)
and closure47 (v0 : leptos_router_location_Location) () : string =
    let v1 : string = "$0.pathname"
    let v2 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"$0()"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "fable_library_rust::String_::fromString($0)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.search"
    let v8 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : string = $"$0()"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "fable_library_rust::String_::fromString($0)"
    let v12 : string = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : bool = v12 = ""
    let v16 : string =
        if v13 then
            let v14 : string = ""
            v14
        else
            let v15 : string = $"?{v12}"
            v15
    let v17 : string = v6 + v16 
    v17
and method61 (v0 : std_string_String) : std_string_String =
    v0
and closure48 (v0 : leptos_router_location_Location, v1 : std_sync_Arc<Dyn<ActionFn2<Ref<Str>, leptos_router_NavigateOptions>>>, v2 : leptos_prelude_Memo<string>, v3 : Heap2, v4 : leptos_prelude_WriteSignal<bool>, v5 : leptos_prelude_ReadSignal<bool>) () : unit =
    let v6 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.hash"
    let v9 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = $"$0()"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"$0()"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v2 v12 
    let v14 : string = $"{v13}{v11}"
    let v15 : string = "content.render () / effect 1 / new_url_hash: " + v14 + " / loaded: " + string v7 + ""
    let v16 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : bool = v7 = false
    if v18 then
        let v19 : std_string_String = method61(v11)
        let v20 : string = "v19 == \"\""
        let v21 : bool = Fable.Core.RustInterop.emitRustExpr () v20 
        if v21 then
            let v22 : leptos_prelude_RwSignal<Heap1> = v3.l0
            let v23 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
            let v24 : Heap1 = Fable.Core.RustInterop.emitRustExpr v22 v23 
            let v25 : leptos_prelude_RwSignal<std_string_String> = v24.l2
            let v26 : string = $"leptos::prelude::SignalGet::get(&$0)"
            let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v26 
            let v28 : string = "fable_library_rust::String_::fromString($0)"
            let v29 : string = Fable.Core.RustInterop.emitRustExpr v27 v28 
            let v30 : string = "content.render () / effect 1 / url_hash: " + v29 + ""
            let v31 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v32 : bool = Fable.Core.RustInterop.emitRustExpr v30 v31 
            let v33 : string = "#"
            let v34 : bool = v29.Contains v33 
            if v34 then
                let v37 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v38 : string = "&*$0"
                let v39 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v29 v38 
                let _v37 = v39 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v40 : string = "&*$0"
                let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v29 v40 
                let _v37 = v41 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v42 : string = "&*$0"
                let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v29 v42 
                let _v37 = v43 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v44 : Ref<Str> = v29 |> unbox<Ref<Str>>
                let _v37 = v44 
                #endif
#if FABLE_COMPILER_PYTHON
                let v47 : Ref<Str> = v29 |> unbox<Ref<Str>>
                let _v37 = v47 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v50 : Ref<Str> = v29 |> unbox<Ref<Str>>
                let _v37 = v50 
                #endif
#else
                let v53 : Ref<Str> = v29 |> unbox<Ref<Str>>
                let _v37 = v53 
                #endif
                let v56 : Ref<Str> = _v37 
                let v61 : string = "$0($1, Default::default())"
                Fable.Core.RustInterop.emitRustExpr struct (v1, v56) v61 
                ()
        let v62 : string = $"true; leptos::prelude::SignalSet::set(&$0, $1);"
        let v63 : bool = Fable.Core.RustInterop.emitRustExpr struct (v4, true) v62 
        ()
    else
        let v64 : leptos_prelude_RwSignal<Heap1> = v3.l0
        let v65 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
        let v66 : Heap1 = Fable.Core.RustInterop.emitRustExpr v64 v65 
        let v67 : leptos_prelude_RwSignal<std_string_String> = v66.l2
        let v68 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v69 : string = "&*$0"
        let v70 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14 v69 
        let _v68 = v70 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v71 : string = "&*$0"
        let v72 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14 v71 
        let _v68 = v72 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v73 : string = "&*$0"
        let v74 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v14 v73 
        let _v68 = v74 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v75 : Ref<Str> = v14 |> unbox<Ref<Str>>
        let _v68 = v75 
        #endif
#if FABLE_COMPILER_PYTHON
        let v78 : Ref<Str> = v14 |> unbox<Ref<Str>>
        let _v68 = v78 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v81 : Ref<Str> = v14 |> unbox<Ref<Str>>
        let _v68 = v81 
        #endif
#else
        let v84 : Ref<Str> = v14 |> unbox<Ref<Str>>
        let _v68 = v84 
        #endif
        let v87 : Ref<Str> = _v68 
        let v92 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v93 : string = "String::from($0)"
        let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v93 
        let _v92 = v94 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v95 : string = "String::from($0)"
        let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v95 
        let _v92 = v96 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v97 : string = "String::from($0)"
        let v98 : std_string_String = Fable.Core.RustInterop.emitRustExpr v87 v97 
        let _v92 = v98 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v99 : std_string_String = v87 |> unbox<std_string_String>
        let _v92 = v99 
        #endif
#if FABLE_COMPILER_PYTHON
        let v102 : std_string_String = v87 |> unbox<std_string_String>
        let _v92 = v102 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v105 : std_string_String = v87 |> unbox<std_string_String>
        let _v92 = v105 
        #endif
#else
        let v108 : std_string_String = v87 |> unbox<std_string_String>
        let _v92 = v108 
        #endif
        let v111 : std_string_String = _v92 
        let v116 : string = $"true; leptos::prelude::SignalSet::set(&$0, $1);"
        let v117 : bool = Fable.Core.RustInterop.emitRustExpr struct (v67, v111) v116 
        ()
and method62 (v0 : std_string_String) : std_string_String =
    v0
and closure50 () (v0 : leptos_router_Url) : US21 =
    US21_0(v0)
and method63 () : (leptos_router_Url -> US21) =
    closure50()
and closure51 () (v0 : std_string_String) : US21 =
    US21_1(v0)
and method64 () : (std_string_String -> US21) =
    closure51()
and closure49 (v0 : leptos_router_location_Location, v1 : leptos_prelude_WriteSignal<US19>) () : unit =
    let v2 : string = "$0.hash"
    let v3 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = $"$0()"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : std_string_String = method62(v5)
    let v7 : string = "v6.strip_prefix('#')"
    let v8 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = ""
    let v10 : string = "r#\"" + v9 + "\"#"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "v8.unwrap_or(v11)"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "leptos_router::location::Url::try_from($0)"
    let v15 : Result<leptos_router_Url, std_string_String> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : (leptos_router_Url -> US21) = method63()
    let v17 : (std_string_String -> US21) = method64()
    let v18 : US21 = match v15 with Ok x -> v16 x | Error x -> v17 x
    let v19 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v20 : string = "format!(\"{:#?}\", $0)"
    let v21 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v20 
    let v22 : string = "fable_library_rust::String_::fromString($0)"
    let v23 : string = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let _v19 = v23 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v24 : string = "format!(\"{:#?}\", $0)"
    let v25 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v24 
    let v26 : string = "fable_library_rust::String_::fromString($0)"
    let v27 : string = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let _v19 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "format!(\"{:#?}\", $0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v18 v28 
    let v30 : string = "fable_library_rust::String_::fromString($0)"
    let v31 : string = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let _v19 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : string = $"%A{v18}"
    let _v19 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : string = $"%A{v18}"
    let _v19 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : string = $"%A{v18}"
    let _v19 = v38 
    #endif
#else
    let v41 : string = $"%A{v18}"
    let _v19 = v41 
    #endif
    let v44 : string = _v19 
    let v49 : string = "content.render () / effect 2 / hash_url: " + v44 + ""
    let v50 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v51 : bool = Fable.Core.RustInterop.emitRustExpr v49 v50 
    match v18 with
    | US21_1(v158) -> (* Error *)
        let v159 : string = "content.render () / effect 2 / hash_url error: " + string v158 + ""
        let v160 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v161 : bool = Fable.Core.RustInterop.emitRustExpr v159 v160 
        ()
    | US21_0(v52) -> (* Ok *)
        let v53 : string = "$0.pathname"
        let v54 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v53 
        let v55 : string = "fable_library_rust::String_::fromString($0)"
        let v56 : string = Fable.Core.RustInterop.emitRustExpr v54 v55 
        let v57 : string = "dice"
        let v58 : string = "/" + v57 + ""
        let v59 : bool = v56.StartsWith v58 
        let v66 : US22 =
            if v59 then
                let v62 : US20 = US20_0
                let v63 : US19 = US19_1(v62)
                US22_0(v63)
            else
                US22_1
        let v83 : US22 =
            match v66 with
            | US22_1 -> (* None *)
                let v69 : string = "$0.pathname"
                let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v69 
                let v71 : string = "fable_library_rust::String_::fromString($0)"
                let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
                let v73 : string = "lists"
                let v74 : string = "/" + v73 + ""
                let v75 : bool = v72.StartsWith v74 
                if v75 then
                    let v78 : US19 = US19_2
                    US22_0(v78)
                else
                    US22_1
            | US22_0(v67) -> (* Some *)
                US22_0(v67)
        let v100 : US22 =
            match v83 with
            | US22_1 -> (* None *)
                let v86 : string = "$0.pathname"
                let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v86 
                let v88 : string = "fable_library_rust::String_::fromString($0)"
                let v89 : string = Fable.Core.RustInterop.emitRustExpr v87 v88 
                let v90 : string = "transactions"
                let v91 : string = "/" + v90 + ""
                let v92 : bool = v89.StartsWith v91 
                if v92 then
                    let v95 : US19 = US19_3
                    US22_0(v95)
                else
                    US22_1
            | US22_0(v84) -> (* Some *)
                US22_0(v84)
        let v117 : US22 =
            match v100 with
            | US22_1 -> (* None *)
                let v103 : string = "$0.pathname"
                let v104 : std_string_String = Fable.Core.RustInterop.emitRustExpr v52 v103 
                let v105 : string = "fable_library_rust::String_::fromString($0)"
                let v106 : string = Fable.Core.RustInterop.emitRustExpr v104 v105 
                let v107 : string = "settings"
                let v108 : string = "/" + v107 + ""
                let v109 : bool = v106.StartsWith v108 
                if v109 then
                    let v112 : US19 = US19_4
                    US22_0(v112)
                else
                    US22_1
            | US22_0(v101) -> (* Some *)
                US22_0(v101)
        let v122 : US19 =
            match v117 with
            | US22_1 -> (* None *)
                let v119 : US20 = US20_0
                US19_1(v119)
            | US22_0(v118) -> (* Some *)
                v118
        let v123 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v124 : string = "format!(\"{:#?}\", $0)"
        let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v124 
        let v126 : string = "fable_library_rust::String_::fromString($0)"
        let v127 : string = Fable.Core.RustInterop.emitRustExpr v125 v126 
        let _v123 = v127 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v128 : string = "format!(\"{:#?}\", $0)"
        let v129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v128 
        let v130 : string = "fable_library_rust::String_::fromString($0)"
        let v131 : string = Fable.Core.RustInterop.emitRustExpr v129 v130 
        let _v123 = v131 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v132 : string = "format!(\"{:#?}\", $0)"
        let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v132 
        let v134 : string = "fable_library_rust::String_::fromString($0)"
        let v135 : string = Fable.Core.RustInterop.emitRustExpr v133 v134 
        let _v123 = v135 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v136 : string = $"%A{v122}"
        let _v123 = v136 
        #endif
#if FABLE_COMPILER_PYTHON
        let v139 : string = $"%A{v122}"
        let _v123 = v139 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v142 : string = $"%A{v122}"
        let _v123 = v142 
        #endif
#else
        let v145 : string = $"%A{v122}"
        let _v123 = v145 
        #endif
        let v148 : string = _v123 
        let v153 : string = "content.render () / effect 2 / new_tab: " + v148 + ""
        let v154 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
        let v155 : bool = Fable.Core.RustInterop.emitRustExpr v153 v154 
        let v156 : string = $"true; leptos::prelude::SignalSet::set(&$0, $1);"
        let v157 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1, v122) v156 
        ()
and closure56 () (v0 : (bool * std_string_String)) : struct (bool * std_string_String) =
    let (a, b) = v0 
    let v1 : bool = a
    let v2 : std_string_String = b
    struct (v1, v2)
and closure57 () struct (v0 : bool, v1 : std_string_String) : bool =
    v0
and method68 () : (struct (bool * std_string_String) -> bool) =
    closure57()
and method69 (v0 : Vec<struct (bool * std_string_String)>) : Vec<struct (bool * std_string_String)> =
    v0
and closure58 () struct (v0 : bool, v1 : std_string_String) : std_string_String =
    v1
and closure59 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure55 (v0 : Heap2) () : Vec<string> =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : Vec<(bool * std_string_String)> = v6.l0
    let v8 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v9 : ((bool * std_string_String) -> struct (bool * std_string_String)) = closure56()
    let v10 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v7, v9) v8 
    let v11 : (struct (bool * std_string_String) -> bool) = method68()
    let v12 : Vec<struct (bool * std_string_String)> = method69(v10)
    let v13 : string = "v12.into_iter().filter(|x| v11(x.clone().clone())).collect::<Vec<_>>()"
    let v14 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v16 : (struct (bool * std_string_String) -> std_string_String) = closure58()
    let v17 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v14, v16) v15 
    let v18 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v19 : (std_string_String -> string) = closure59()
    let v20 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v17, v19) v18 
    let v21 : string = $"%A{v20}"
    let v24 : string = "use_transactions.render (2) / accounts create_memo / result: " + string v21 + ""
    let v25 : int64 = 200L
    let v26 : string = method11(v25, v24)
    let v27 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr v26 v27 
    v20
and closure61 () (v0 : string) : struct (string * US24 * string * bool * bool) =
    let v1 : string = "https://api3.nearblocks.io/v1/account/" + v0 + ""
    let v2 : US24 = US24_0
    let v3 : string = ""
    struct (v1, v2, v3, false, true)
and closure60 (v0 : leptos_prelude_Memo<Vec<string>>) () : (struct (string * US24 * string * bool * bool) []) =
    let v1 : string = $"$0()"
    let v2 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (string -> struct (string * US24 * string * bool * bool)) = closure61()
    let v5 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v7 : (struct (string * US24 * string * bool * bool) []) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"%A{v7}"
    let v11 : string = "use_transactions.render (3) / accounts_metadata create_memo / result: " + string v8 + ""
    let v12 : int64 = 200L
    let v13 : string = method11(v12, v11)
    let v14 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v13 v14 
    v7
and method70 (v0 : int32, v1 : Mut0) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure64 (v0 : string) (v1 : int32) : struct (string * US24 * string * bool * bool) =
    let v2 : int32 = v1 + 1
    let v3 : string = "https://api3.nearblocks.io/v1/account/" + v0 + "/txns?&order=desc&page=" + string v2 + "&per_page=" + string 25 + ""
    let v4 : US24 = US24_0
    let v5 : string = ""
    struct (v3, v4, v5, false, true)
and closure63 (v0 : Heap0) (v1 : string) : struct (string * Vec<struct (string * US24 * string * bool * bool)>) =
    let v2 : int32 = v0.l3
    let v3 : (int32 []) = Array.zeroCreate<int32> (v2)
    let v4 : Mut0 = {l0 = 0} : Mut0
    while method70(v2, v4) do
        let v6 : int32 = v4.l0
        v3.[int v6] <- v6
        let v7 : int32 = v6 + 1
        v4.l0 <- v7
        ()
    let v8 : string = "$0.to_vec()"
    let v9 : Vec<int32> = Fable.Core.RustInterop.emitRustExpr v3 v8 
    let v10 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v11 : (int32 -> struct (string * US24 * string * bool * bool)) = closure64(v1)
    let v12 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr struct (v9, v11) v10 
    struct (v1, v12)
and closure62 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<string>>) () : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<Heap0> = v4.l3
    let v6 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v7 : Heap0 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"$0()"
    let v9 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v1 v8 
    let v10 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v11 : (string -> struct (string * Vec<struct (string * US24 * string * bool * bool)>)) = closure63(v7)
    let v12 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr struct (v9, v11) v10 
    let v13 : string = $"%A{v12}"
    let v16 : string = "use_transactions.render (4) / accounts_requests create_memo / result: " + string v13 + ""
    let v17 : int64 = 200L
    let v18 : string = method11(v17, v16)
    let v19 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    v12
and closure66 () struct (v0 : string, v1 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<struct (string * US24 * string * bool * bool)> =
    v1
and method71 (v0 : int32, v1 : Mut1) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method72 (v0 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<struct (string * US24 * string * bool * bool)> =
    v0
and method73 (v0 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<struct (string * US24 * string * bool * bool)> =
    v0
and closure65 (v0 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>) () : Vec<struct (string * US24 * string * bool * bool)> =
    let v1 : string = $"$0()"
    let v2 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (struct (string * Vec<struct (string * US24 * string * bool * bool)>) -> Vec<struct (string * US24 * string * bool * bool)>) = closure66()
    let v5 : Vec<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : (struct (string * US24 * string * bool * bool) []) = [||]
    let v7 : string = "$0.to_vec()"
    let v8 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v10 : (Vec<struct (string * US24 * string * bool * bool)> []) = Fable.Core.RustInterop.emitRustExpr v5 v9 
    let v11 : int32 = v10.Length
    let v12 : Mut1 = {l0 = 0; l1 = v8} : Mut1
    while method71(v11, v12) do
        let v14 : int32 = v12.l0
        let v15 : Vec<struct (string * US24 * string * bool * bool)> = v12.l1
        let v16 : Vec<struct (string * US24 * string * bool * bool)> = v10.[int v14]
        let v17 : Vec<struct (string * US24 * string * bool * bool)> = method72(v16)
        let v18 : Vec<struct (string * US24 * string * bool * bool)> = method73(v15)
        let v19 : string = "true; let mut v18 = v18"
        let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
        let v21 : string = "true; v18.extend(v17)"
        let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
        let v23 : string = "v18"
        let v24 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr () v23 
        let v25 : int32 = v14 + 1
        v12.l0 <- v25
        v12.l1 <- v24
        ()
    let v26 : Vec<struct (string * US24 * string * bool * bool)> = v12.l1
    let v27 : string = $"%A{v26}"
    let v30 : string = "use_transactions.render (5) / txns_requests create_memo / result: " + string v27 + ""
    let v31 : int64 = 200L
    let v32 : string = method11(v31, v30)
    let v33 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v34 : bool = Fable.Core.RustInterop.emitRustExpr v32 v33 
    v26
and closure69 (v0 : string) struct (v1 : string, v2 : US24, v3 : string, v4 : bool, v5 : bool) : string =
    v0
and closure68 () struct (v0 : string, v1 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<string> =
    let v2 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v3 : (struct (string * US24 * string * bool * bool) -> string) = closure69(v0)
    let v4 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v1, v3) v2 
    v4
and method74 (v0 : int32, v1 : Mut2) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method75 (v0 : Vec<string>) : Vec<string> =
    v0
and method76 (v0 : Vec<string>) : Vec<string> =
    v0
and closure67 (v0 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>) () : (string []) =
    let v1 : string = $"$0()"
    let v2 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (struct (string * Vec<struct (string * US24 * string * bool * bool)>) -> Vec<string>) = closure68()
    let v5 : Vec<Vec<string>> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : (string []) = [||]
    let v7 : string = "$0.to_vec()"
    let v8 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v10 : (Vec<string> []) = Fable.Core.RustInterop.emitRustExpr v5 v9 
    let v11 : int32 = v10.Length
    let v12 : Mut2 = {l0 = 0; l1 = v8} : Mut2
    while method74(v11, v12) do
        let v14 : int32 = v12.l0
        let v15 : Vec<string> = v12.l1
        let v16 : Vec<string> = v10.[int v14]
        let v17 : Vec<string> = method75(v16)
        let v18 : Vec<string> = method76(v15)
        let v19 : string = "true; let mut v18 = v18"
        let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
        let v21 : string = "true; v18.extend(v17)"
        let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
        let v23 : string = "v18"
        let v24 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v23 
        let v25 : int32 = v14 + 1
        v12.l0 <- v25
        v12.l1 <- v24
        ()
    let v26 : Vec<string> = v12.l1
    let v27 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v28 : (string []) = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = $"%A{v28}"
    let v32 : string = "use_transactions.render (6) / urls_accounts create_memo / result: " + string v29 + ""
    let v33 : int64 = 200L
    let v34 : string = method11(v33, v32)
    let v35 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v36 : bool = Fable.Core.RustInterop.emitRustExpr v34 v35 
    v28
and closure72 () (v0 : crate_model_near_nearblocks_Action) : struct (std_string_String * std_string_String option) =
    let v1 : string = "$0.action"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.method"
    let v4 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    struct (v2, v4)
and method77 (v0 : (struct (std_string_String * std_string_String option) [])) : (struct (std_string_String * std_string_String option) []) =
    v0
and closure73 () (v0 : Vec<std_string_String>) : (std_string_String []) =
    let v1 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v2 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and method78 () : (Vec<std_string_String> -> (std_string_String [])) =
    closure73()
and closure71 () (v0 : crate_model_near_nearblocks_Txn) : struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) =
    let v1 : string = "$0.receipt_id"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.predecessor_account_id"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.receiver_account_id"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "$0.transaction_hash"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : string = "$0.included_in_block_hash"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v9 
    let v11 : string = "$0.block_timestamp"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v11 
    let v13 : string = "$0.block"
    let v14 : crate_model_near_nearblocks_Block = Fable.Core.RustInterop.emitRustExpr v0 v13 
    let v15 : string = "$0.block_height"
    let v16 : uint32 = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.actions"
    let v18 : Vec<crate_model_near_nearblocks_Action> = Fable.Core.RustInterop.emitRustExpr v0 v17 
    let v19 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v20 : (crate_model_near_nearblocks_Action -> struct (std_string_String * std_string_String option)) = closure72()
    let v21 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v19 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v23 : (struct (std_string_String * std_string_String option) []) = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : (struct (std_string_String * std_string_String option) []) = method77(v23)
    let v25 : string = "$0.actions_agg"
    let v26 : crate_model_near_nearblocks_ActionsAgg = Fable.Core.RustInterop.emitRustExpr v0 v25 
    let v27 : string = "$0.deposit"
    let v28 : float = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "$0.outcomes"
    let v30 : crate_model_near_nearblocks_Outcomes = Fable.Core.RustInterop.emitRustExpr v0 v29 
    let v31 : string = "$0.status"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "$0.outcomes_agg"
    let v34 : crate_model_near_nearblocks_OutcomesAgg = Fable.Core.RustInterop.emitRustExpr v0 v33 
    let v35 : string = "$0.transaction_fee"
    let v36 : float = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "$0.logs"
    let v38 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v0 v37 
    let v39 : (Vec<std_string_String> -> (std_string_String [])) = method78()
    let v40 : (std_string_String []) option = v38 |> Option.map v39 
    let v52 : (std_string_String []) = [||]
    let v53 : (std_string_String []) = v40 |> Option.defaultValue v52 
    struct (v2, v4, v6, v8, v10, v12, v16, v24, v28, v32, v36, v53)
and method79 (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) =
    v0
and closure70 () (v0 : crate_model_near_nearblocks_Root) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) =
    let v1 : string = "$0.txns"
    let v2 : Vec<crate_model_near_nearblocks_Txn> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (crate_model_near_nearblocks_Txn -> struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) = closure71()
    let v5 : Vec<struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v7 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = method79(v7)
    v8
and closure74 (v0 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) () : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option =
    let v1 : string = "state_core.use_requests (2) / database_memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v5 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : (unit -> unit) = closure10()
    let _v10 = true
    let v11 : string = "PartialEqWrapper($0)"
    let v12 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let v13 : string = "true; $0 })"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "_optionm_map_"
    let v16 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v15 
    v16
and closure75 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) () : struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>) =
    let v2 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v3 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "x"
    let v7 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : (unit -> unit) = closure10()
    let _v8 = true
    let v9 : string = "PartialEqWrapper($0)"
    let v10 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v7 v9 
    let v11 : string = "true; $0 })"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "_optionm_map_"
    let v14 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = $"$0()"
    let v16 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v15 
    struct (v14, v16)
and method82 (v0 : string) : string =
    v0
and method83 (v0 : Result<Heap4 option, std_string_String>) : Result<Heap4 option, std_string_String> =
    v0
and closure76 (v0 : std_sync_Arc<rexie_Rexie>) struct (v1 : string, v2 : US24, v3 : string, v4 : bool, v5 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>> =
    let v6 : string = "url[" + v1 + "](" + $"%A{v3}" + ")"
    let v7 : string = "state_core.get_data () / id: " + v6 + ""
    let v8 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; let __future_init = Box::pin(async { //"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = "store"
    let v13 : (string []) = [|v12|]
    let v14 : string = "$0.to_vec()"
    let v15 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v17 : (string -> std_string_String) = closure12()
    let v18 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v15, v17) v16 
    let v19 : std_sync_Arc<rexie_Rexie> = method16(v0)
    let v20 : string = "$0.transaction(&v18, rexie::TransactionMode::ReadOnly)"
    let v21 : Result<rexie_Transaction, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : (rexie_Error -> std_string_String) = method17()
    let v23 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v24 : string = "$0.map_err(|x| $1(x))"
    let v25 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v21, v22) v24 
    let _v23 = v25 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v26 : string = "$0.map_err(|x| $1(x))"
    let v27 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v21, v22) v26 
    let _v23 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v28 : string = "$0.map_err(|x| $1(x))"
    let v29 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v21, v22) v28 
    let _v23 = v29 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v30 : Result<rexie_Transaction, std_string_String> = match v21 with Ok x -> Ok x | Error x -> Error (v22 x)
    let _v23 = v30 
    #endif
#if FABLE_COMPILER_PYTHON
    let v31 : Result<rexie_Transaction, std_string_String> = match v21 with Ok x -> Ok x | Error x -> Error (v22 x)
    let _v23 = v31 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v32 : Result<rexie_Transaction, std_string_String> = match v21 with Ok x -> Ok x | Error x -> Error (v22 x)
    let _v23 = v32 
    #endif
#else
    let v33 : Result<rexie_Transaction, std_string_String> = match v21 with Ok x -> Ok x | Error x -> Error (v22 x)
    let _v23 = v33 
    #endif
    let v34 : Result<rexie_Transaction, std_string_String> = _v23 
    let v37 : string = "$0?"
    let v38 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v34 v37 
    let v39 : string = method18()
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "&*$0"
    let v42 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _v40 = v53 
    #endif
#else
    let v56 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _v40 = v56 
    #endif
    let v59 : Ref<Str> = _v40 
    let v64 : string = "v38.store($0)"
    let v65 : Result<rexie_Store, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : (rexie_Error -> std_string_String) = method19()
    let v67 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v68 : string = "$0.map_err(|x| $1(x))"
    let v69 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v65, v66) v68 
    let _v67 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "$0.map_err(|x| $1(x))"
    let v71 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v65, v66) v70 
    let _v67 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "$0.map_err(|x| $1(x))"
    let v73 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v65, v66) v72 
    let _v67 = v73 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v74 : Result<rexie_Store, std_string_String> = match v65 with Ok x -> Ok x | Error x -> Error (v66 x)
    let _v67 = v74 
    #endif
#if FABLE_COMPILER_PYTHON
    let v75 : Result<rexie_Store, std_string_String> = match v65 with Ok x -> Ok x | Error x -> Error (v66 x)
    let _v67 = v75 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : Result<rexie_Store, std_string_String> = match v65 with Ok x -> Ok x | Error x -> Error (v66 x)
    let _v67 = v76 
    #endif
#else
    let v77 : Result<rexie_Store, std_string_String> = match v65 with Ok x -> Ok x | Error x -> Error (v66 x)
    let _v67 = v77 
    #endif
    let v78 : Result<rexie_Store, std_string_String> = _v67 
    let v81 : string = "$0?"
    let v82 : rexie_Store = Fable.Core.RustInterop.emitRustExpr v78 v81 
    let v83 : string = method82(v6)
    let v84 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v85 : string = "&*$0"
    let v86 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v85 
    let _v84 = v86 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v87 : string = "&*$0"
    let v88 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v87 
    let _v84 = v88 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v89 : string = "&*$0"
    let v90 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _v84 = v90 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v91 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _v84 = v91 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _v84 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v97 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _v84 = v97 
    #endif
#else
    let v100 : Ref<Str> = v83 |> unbox<Ref<Str>>
    let _v84 = v100 
    #endif
    let v103 : Ref<Str> = _v84 
    let v108 : string = "wasm_bindgen::JsValue::from_str($0)"
    let v109 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr v103 v108 
    let v110 : string = $"Box::pin(rexie::Store::get(&v82, v109))"
    let v111 : std_pin_Pin<Box<Dyn<std_future_Future<Result<wasm_bindgen_JsValue option, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = "v111.await"
    let v113 : Result<wasm_bindgen_JsValue option, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : (rexie_Error -> std_string_String) = method21()
    let v115 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v116 : string = "$0.map_err(|x| $1(x))"
    let v117 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v113, v114) v116 
    let _v115 = v117 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v118 : string = "$0.map_err(|x| $1(x))"
    let v119 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v113, v114) v118 
    let _v115 = v119 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v120 : string = "$0.map_err(|x| $1(x))"
    let v121 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v113, v114) v120 
    let _v115 = v121 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v122 : Result<wasm_bindgen_JsValue option, std_string_String> = match v113 with Ok x -> Ok x | Error x -> Error (v114 x)
    let _v115 = v122 
    #endif
#if FABLE_COMPILER_PYTHON
    let v123 : Result<wasm_bindgen_JsValue option, std_string_String> = match v113 with Ok x -> Ok x | Error x -> Error (v114 x)
    let _v115 = v123 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : Result<wasm_bindgen_JsValue option, std_string_String> = match v113 with Ok x -> Ok x | Error x -> Error (v114 x)
    let _v115 = v124 
    #endif
#else
    let v125 : Result<wasm_bindgen_JsValue option, std_string_String> = match v113 with Ok x -> Ok x | Error x -> Error (v114 x)
    let _v115 = v125 
    #endif
    let v126 : Result<wasm_bindgen_JsValue option, std_string_String> = _v115 
    let v129 : string = "$0?"
    let v130 : wasm_bindgen_JsValue option = Fable.Core.RustInterop.emitRustExpr v126 v129 
    let v131 : (wasm_bindgen_JsValue -> US6) = method22()
    let v132 : US6 option = v130 |> Option.map v131 
    let v143 : US6 = US6_1
    let v144 : US6 = v132 |> Option.defaultValue v143 
    let v244 : US26 =
        match v144 with
        | US6_1 -> (* None *)
            US26_1
        | US6_0(v148) -> (* Some *)
            let v149 : wasm_bindgen_JsValue = method23(v148)
            let v150 : string = "serde_wasm_bindgen::from_value(v149)"
            let v151 : Result<serde_json_Value option, serde_wasm_bindgen_Error> = Fable.Core.RustInterop.emitRustExpr () v150 
            let v152 : (serde_wasm_bindgen_Error -> std_string_String) = method24()
            let v153 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v154 : string = "$0.map_err(|x| $1(x))"
            let v155 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v151, v152) v154 
            let _v153 = v155 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v156 : string = "$0.map_err(|x| $1(x))"
            let v157 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v151, v152) v156 
            let _v153 = v157 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v158 : string = "$0.map_err(|x| $1(x))"
            let v159 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v151, v152) v158 
            let _v153 = v159 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v160 : Result<serde_json_Value option, std_string_String> = match v151 with Ok x -> Ok x | Error x -> Error (v152 x)
            let _v153 = v160 
            #endif
#if FABLE_COMPILER_PYTHON
            let v161 : Result<serde_json_Value option, std_string_String> = match v151 with Ok x -> Ok x | Error x -> Error (v152 x)
            let _v153 = v161 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v162 : Result<serde_json_Value option, std_string_String> = match v151 with Ok x -> Ok x | Error x -> Error (v152 x)
            let _v153 = v162 
            #endif
#else
            let v163 : Result<serde_json_Value option, std_string_String> = match v151 with Ok x -> Ok x | Error x -> Error (v152 x)
            let _v153 = v163 
            #endif
            let v164 : Result<serde_json_Value option, std_string_String> = _v153 
            let v167 : string = "$0?"
            let v168 : serde_json_Value option = Fable.Core.RustInterop.emitRustExpr v164 v167 
            let v169 : (serde_json_Value -> US7) = method25()
            let v170 : US7 option = v168 |> Option.map v169 
            let v181 : US7 = US7_1
            let v182 : US7 = v170 |> Option.defaultValue v181 
            match v182 with
            | US7_1 -> (* None *)
                US26_1
            | US7_0(v186) -> (* Some *)
                let v187 : serde_json_Value = method26(v186)
                let v188 : string = "serde_json::from_value(v187)"
                let v189 : Result<Vec<uint8>, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v188 
                let v190 : (serde_json_Error -> std_string_String) = method27()
                let v191 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v192 : string = "$0.map_err(|x| $1(x))"
                let v193 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v189, v190) v192 
                let _v191 = v193 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v194 : string = "$0.map_err(|x| $1(x))"
                let v195 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v189, v190) v194 
                let _v191 = v195 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v196 : string = "$0.map_err(|x| $1(x))"
                let v197 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v189, v190) v196 
                let _v191 = v197 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v198 : Result<Vec<uint8>, std_string_String> = match v189 with Ok x -> Ok x | Error x -> Error (v190 x)
                let _v191 = v198 
                #endif
#if FABLE_COMPILER_PYTHON
                let v199 : Result<Vec<uint8>, std_string_String> = match v189 with Ok x -> Ok x | Error x -> Error (v190 x)
                let _v191 = v199 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v200 : Result<Vec<uint8>, std_string_String> = match v189 with Ok x -> Ok x | Error x -> Error (v190 x)
                let _v191 = v200 
                #endif
#else
                let v201 : Result<Vec<uint8>, std_string_String> = match v189 with Ok x -> Ok x | Error x -> Error (v190 x)
                let _v191 = v201 
                #endif
                let v202 : Result<Vec<uint8>, std_string_String> = _v191 
                let v205 : string = "$0?"
                let v206 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v202 v205 
                let v207 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v208 : (uint8 []) = Fable.Core.RustInterop.emitRustExpr v206 v207 
                let v209 : int32 = v208.Length
                let v210 : string = "state_core.get_data () / data_len: " + string v209 + ""
                let v211 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v212 : bool = Fable.Core.RustInterop.emitRustExpr v210 v211 
                let v213 : string = "$0.to_vec()"
                let v214 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v208 v213 
                let v215 : string = "v214.as_slice()"
                let v216 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v215 
                let v217 : string = "true; let mut v216 = v216"
                let v218 : bool = Fable.Core.RustInterop.emitRustExpr () v217 
                let v219 : string = "borsh::BorshDeserialize::deserialize(&mut v216)"
                let v220 : Result<Heap4, borsh_io_Error> = Fable.Core.RustInterop.emitRustExpr () v219 
                let v221 : (borsh_io_Error -> std_string_String) = method28()
                let v222 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v223 : string = "$0.map_err(|x| $1(x))"
                let v224 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v220, v221) v223 
                let _v222 = v224 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v225 : string = "$0.map_err(|x| $1(x))"
                let v226 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v220, v221) v225 
                let _v222 = v226 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v227 : string = "$0.map_err(|x| $1(x))"
                let v228 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v220, v221) v227 
                let _v222 = v228 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v229 : Result<Heap4, std_string_String> = match v220 with Ok x -> Ok x | Error x -> Error (v221 x)
                let _v222 = v229 
                #endif
#if FABLE_COMPILER_PYTHON
                let v230 : Result<Heap4, std_string_String> = match v220 with Ok x -> Ok x | Error x -> Error (v221 x)
                let _v222 = v230 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v231 : Result<Heap4, std_string_String> = match v220 with Ok x -> Ok x | Error x -> Error (v221 x)
                let _v222 = v231 
                #endif
#else
                let v232 : Result<Heap4, std_string_String> = match v220 with Ok x -> Ok x | Error x -> Error (v221 x)
                let _v222 = v232 
                #endif
                let v233 : Result<Heap4, std_string_String> = _v222 
                let v236 : string = "$0?"
                let v237 : Heap4 = Fable.Core.RustInterop.emitRustExpr v233 v236 
                US26_0(v237)
    let v251 : Heap4 option =
        match v244 with
        | US26_1 -> (* None *)
            let v249 : Heap4 option = None
            v249
        | US26_0(v245) -> (* Some *)
            let v246 : Heap4 option = Some v245 
            v246
    let v252 : Result<Heap4 option, std_string_String> = Ok v251 
    let v253 : Result<Heap4 option, std_string_String> = method83(v252)
    let v254 : string = ""
    let v255 : string = "}"
    let v256 : string = v254 + v255 
    let v257 : _ = v253 
    let v258 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v259 : string = $"true; let v257 = $0"
    let v260 : bool = Fable.Core.RustInterop.emitRustExpr v257 v259 
    let _v258 = v260 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v261 : string = $"true; let v257 = $0"
    let v262 : bool = Fable.Core.RustInterop.emitRustExpr v257 v261 
    let _v258 = v262 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v263 : string = $"true; let v257 = $0"
    let v264 : bool = Fable.Core.RustInterop.emitRustExpr v257 v263 
    let _v258 = v264 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v265 : bool = true
    let _v258 = v265 
    #endif
#if FABLE_COMPILER_PYTHON
    let v266 : bool = true
    let _v258 = v266 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v267 : bool = true
    let _v258 = v267 
    #endif
#else
    let v268 : bool = true
    let _v258 = v268 
    #endif
    let v269 : bool = _v258 
    let v272 : string = $"true; v257 " + v256 + "); " + v254 + " // rust.fix_closure'"
    let v273 : bool = Fable.Core.RustInterop.emitRustExpr () v272 
    let v274 : string = "__future_init"
    let v275 : _ = Fable.Core.RustInterop.emitRustExpr () v274 
    let v276 : string = "v275"
    let v277 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v276 
    v277
and method84 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> =
    v0
and method85 (v0 : Result<Vec<Heap4 option>, std_string_String>) : Result<Vec<Heap4 option>, std_string_String> =
    v0
and method86 (v0 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>>) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>> =
    v0
and method81 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>) : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>> =
    let v2 : string = "let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //"
    let v3 : (unit -> struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>)) = closure75(v0, v1)
    Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v4 : string = "x"
    let struct (v5 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, v6 : Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr () v4 
    let v7 : string = "true; let __future_init = Box::pin(async move { //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = $"%A{v5}"
    let v12 : string = $"%A{v6}"
    let v15 : int64 = 400L
    let v16 : string = method11(v15, v12)
    let v17 : string = "state_core.use_requests (3) / state_data_resource create_local_resource / request : " + string v16 + " / database: " + string v9 + ""
    let v18 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr v5 v20 
    let v22 : string = "x"
    let v23 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : string = "$0.0"
    let v25 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "true; $0 })"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : string = "_optionm_map_"
    let v29 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : (std_sync_Arc<rexie_Rexie> -> US4) = method15()
    let v31 : US4 option = v29 |> Option.map v30 
    let v42 : US4 = US4_1
    let v43 : US4 = v31 |> Option.defaultValue v42 
    let v109 : US25 =
        match v43 with
        | US4_0(v47) -> (* Some *)
            let v48 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v49 : (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>) = closure76(v47)
            let v50 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v6, v49) v48 
            let v51 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = method84(v50)
            let v52 : string = "futures::future::try_join_all(v51)"
            let v53 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v52 
            let v54 : string = "v53.await"
            let v55 : Result<Vec<Heap4 option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v54 
            let v56 : string = "$0?"
            let v57 : Vec<Heap4 option> = Fable.Core.RustInterop.emitRustExpr v55 v56 
            US25_0(v57)
        | _ ->
            let v59 : string = "database=None"
            let v60 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v61 : string = "&*$0"
            let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v59 v61 
            let _v60 = v62 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v63 : string = "&*$0"
            let v64 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v59 v63 
            let _v60 = v64 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v65 : string = "&*$0"
            let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v59 v65 
            let _v60 = v66 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v67 : Ref<Str> = v59 |> unbox<Ref<Str>>
            let _v60 = v67 
            #endif
#if FABLE_COMPILER_PYTHON
            let v70 : Ref<Str> = v59 |> unbox<Ref<Str>>
            let _v60 = v70 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v73 : Ref<Str> = v59 |> unbox<Ref<Str>>
            let _v60 = v73 
            #endif
#else
            let v76 : Ref<Str> = v59 |> unbox<Ref<Str>>
            let _v60 = v76 
            #endif
            let v79 : Ref<Str> = _v60 
            let v84 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v85 : string = "String::from($0)"
            let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v85 
            let _v84 = v86 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v87 : string = "String::from($0)"
            let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v87 
            let _v84 = v88 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v89 : string = "String::from($0)"
            let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v79 v89 
            let _v84 = v90 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v91 : std_string_String = v79 |> unbox<std_string_String>
            let _v84 = v91 
            #endif
#if FABLE_COMPILER_PYTHON
            let v94 : std_string_String = v79 |> unbox<std_string_String>
            let _v84 = v94 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v97 : std_string_String = v79 |> unbox<std_string_String>
            let _v84 = v97 
            #endif
#else
            let v100 : std_string_String = v79 |> unbox<std_string_String>
            let _v84 = v100 
            #endif
            let v103 : std_string_String = _v84 
            US25_1(v103)
    let v115 : Result<Vec<Heap4 option>, std_string_String> =
        match v109 with
        | US25_1(v112) -> (* Error *)
            let v113 : Result<Vec<Heap4 option>, std_string_String> = Error v112 
            v113
        | US25_0(v110) -> (* Ok *)
            let v111 : Result<Vec<Heap4 option>, std_string_String> = Ok v110 
            v111
    let v116 : string = $"%A{v115}"
    let v119 : string = "state_core.use_requests (4) / state_data_resource create_local_resource / result: " + string v116 + ""
    let v120 : int64 = 200L
    let v121 : string = method11(v120, v119)
    let v122 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v123 : bool = Fable.Core.RustInterop.emitRustExpr v121 v122 
    let v124 : Result<Vec<Heap4 option>, std_string_String> = method85(v115)
    let v125 : string = ""
    let v126 : string = "}"
    let v127 : string = v125 + v126 
    let v128 : _ = v124 
    let v129 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v130 : string = $"true; let v128 = $0"
    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v128 v130 
    let _v129 = v131 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v132 : string = $"true; let v128 = $0"
    let v133 : bool = Fable.Core.RustInterop.emitRustExpr v128 v132 
    let _v129 = v133 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v134 : string = $"true; let v128 = $0"
    let v135 : bool = Fable.Core.RustInterop.emitRustExpr v128 v134 
    let _v129 = v135 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v136 : bool = true
    let _v129 = v136 
    #endif
#if FABLE_COMPILER_PYTHON
    let v137 : bool = true
    let _v129 = v137 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v138 : bool = true
    let _v129 = v138 
    #endif
#else
    let v139 : bool = true
    let _v129 = v139 
    #endif
    let v140 : bool = _v129 
    let v143 : string = $"true; v128 " + v127 + "); " + v125 + " // rust.fix_closure'"
    let v144 : bool = Fable.Core.RustInterop.emitRustExpr () v143 
    let v145 : string = "__future_init"
    let v146 : _ = Fable.Core.RustInterop.emitRustExpr () v145 
    let v147 : string = "v146"
    let v148 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>> = method86(v148)
    let v150 : string = "v149.await"
    let v151 : Result<Vec<Heap4 option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v150 
    let v152 : string = v125 + v126 
    let v153 : string = v152 + v126 
    let v154 : string = "{"
    let v155 : string = v125 + v154 
    let v156 : _ = v151 
    let v157 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v158 : string = $"true; let v156 = $0"
    let v159 : bool = Fable.Core.RustInterop.emitRustExpr v156 v158 
    let _v157 = v159 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v160 : string = $"true; let v156 = $0"
    let v161 : bool = Fable.Core.RustInterop.emitRustExpr v156 v160 
    let _v157 = v161 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v162 : string = $"true; let v156 = $0"
    let v163 : bool = Fable.Core.RustInterop.emitRustExpr v156 v162 
    let _v157 = v163 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v164 : bool = true
    let _v157 = v164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : bool = true
    let _v157 = v165 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v166 : bool = true
    let _v157 = v166 
    #endif
#else
    let v167 : bool = true
    let _v157 = v167 
    #endif
    let v168 : bool = _v157 
    let v171 : string = $"true; v156 " + v153 + "); " + v155 + " // rust.fix_closure'"
    let v172 : bool = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : string = "__create_local_resource"
    let v174 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v173 
    v174
and closure77 (v0 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>>) () : Result<Vec<Heap4 option>, std_string_String> option =
    let v1 : string = "state_core.use_requests (5) / state_data_func"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : web_sys_Window = method36()
    let v5 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method37(v4)
    let v6 : (web_sys_Storage option -> US10) = method38()
    let v7 : (wasm_bindgen_JsValue -> US10) = method39()
    let v8 : US10 = match v5 with Ok x -> v6 x | Error x -> v7 x
    let v31 : US11 =
        match v8 with
        | US10_1(v28) -> (* Error *)
            US11_1(v28)
        | US10_0(v9) -> (* Ok *)
            let v10 : (web_sys_Storage -> US12) = method40()
            let v11 : US12 option = v9 |> Option.map v10 
            let v22 : US12 = US12_1
            let v23 : US12 = v11 |> Option.defaultValue v22 
            US11_0(v23)
    let v39 : Result<Vec<Heap4 option>, std_string_String> option =
        match v31 with
        | US11_0(v32) -> (* Ok *)
            match v32 with
            | US12_0(v33) -> (* Some *)
                let v34 : string = $"leptos::prelude::SignalGet::get(&$0)"
                let v35 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v0 v34 
                v35
            | _ ->
                let v36 : Result<Vec<Heap4 option>, std_string_String> option = None
                v36
        | _ ->
            let v38 : Result<Vec<Heap4 option>, std_string_String> option = None
            v38
    let v40 : string = $"%A{v39}"
    let v43 : string = "state_core.use_requests (6) / state_data_func func0 / result: " + string v40 + ""
    let v44 : int64 = 200L
    let v45 : string = method11(v44, v43)
    let v46 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v47 : bool = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v39
and closure78 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option>) () : struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option) =
    let v2 : string = $"$0()"
    let v3 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : string = $"$0()"
    let v5 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v1 v4 
    struct (v3, v5)
and closure79 () (v0 : Result<Vec<Heap4 option>, std_string_String>) : US27 =
    US27_0(v0)
and method88 () : (Result<Vec<Heap4 option>, std_string_String> -> US27) =
    closure79()
and closure80 () (v0 : Vec<Heap4 option>) : US25 =
    US25_0(v0)
and method89 () : (Vec<Heap4 option> -> US25) =
    closure80()
and closure81 () (v0 : std_string_String) : US25 =
    US25_1(v0)
and method90 () : (std_string_String -> US25) =
    closure81()
and closure82 () (v0 : Heap4) : US26 =
    US26_0(v0)
and method91 () : (Heap4 -> US26) =
    closure82()
and closure85 () (v0 : US26) : US33 =
    US33_0(v0)
and method93 () : (US26 -> US33) =
    closure85()
and method94 (v0 : US24) : US24 =
    v0
and method95 (v0 : string) : string =
    v0
and method96 (v0 : std_string_String) : std_string_String =
    v0
and method97 (v0 : string) : string =
    v0
and method98 (v0 : std_string_String) : std_string_String =
    v0
and method99 (v0 : reqwest_RequestBuilder) : reqwest_RequestBuilder =
    v0
and method100 (v0 : reqwest_RequestBuilder) : reqwest_RequestBuilder =
    v0
and closure86 () (v0 : reqwest_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method101 () : (reqwest_Error -> std_string_String) =
    closure86()
and method102 (v0 : Result<string option, std_string_String>) : Result<string option, std_string_String> =
    v0
and closure84 (v0 : US28, v1 : int32) struct (v2 : string, v3 : US24, v4 : string, v5 : bool, v6 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>> =
    let v7 : string = "true; let __future_init = Box::pin(async move { //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v54 : US30 =
        match v0 with
        | US28_1 -> (* None *)
            US30_1
        | US28_0(v9) -> (* Some *)
            let v50 : US31 =
                match v9 with
                | US29_1(v47) -> (* Error *)
                    US31_1(v47)
                | US29_0(v10) -> (* Ok *)
                    let v11 : string = "fable_library_rust::NativeArray_::array_from($0)"
                    let v12 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v10 v11 
                    let v13 : US26 option = v12 |> Array.tryItem v1 
                    let v14 : (US26 -> US33) = method93()
                    let v15 : US33 option = v13 |> Option.map v14 
                    let v26 : US33 = US33_1
                    let v27 : US33 = v15 |> Option.defaultValue v26 
                    let v37 : US26 =
                        match v27 with
                        | US33_0(v31) -> (* Some *)
                            match v31 with
                            | US26_0(v32) -> (* Some *)
                                US26_0(v32)
                            | _ ->
                                US26_1
                        | _ ->
                            US26_1
                    let v45 : US32 =
                        match v37 with
                        | US26_1 -> (* None *)
                            US32_1
                        | US26_0(v38) -> (* Some *)
                            let v39 : std_string_String = v38.l0
                            let v40 : string = "fable_library_rust::String_::fromString($0)"
                            let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
                            US32_0(v41)
                    US31_0(v45)
            US30_0(v50)
    let v55 : string = $"%A{struct (v3, v5, v6)}"
    let v58 : int64 = 400L
    let v59 : string = method11(v58, v55)
    let v60 : string = $"%A{v0}"
    let v63 : int64 = 400L
    let v64 : string = method11(v63, v60)
    let v65 : string = $"%A{v54}"
    let v68 : int64 = 400L
    let v69 : string = method11(v68, v65)
    let v94 : bool =
        if v6 then
            true
        else
            match v0 with
            | US28_0(v70) -> (* Some *)
                match v70 with
                | US29_0(v71) -> (* Ok *)
                    let v72 : string = "fable_library_rust::NativeArray_::array_from($0)"
                    let v73 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v71 v72 
                    let v74 : int32 = v73.Length
                    let v75 : bool = v74 = 0
                    if v75 then
                        false
                    else
                        match v54 with
                        | US30_0(v76) -> (* Some *)
                            match v76 with
                            | US31_0(v77) -> (* Ok *)
                                match v77 with
                                | US32_1 -> (* None *)
                                    true
                                | _ ->
                                    false
                            | _ ->
                                false
                        | _ ->
                            false
                | _ ->
                    match v54 with
                    | US30_0(v82) -> (* Some *)
                        match v82 with
                        | US31_0(v83) -> (* Ok *)
                            match v83 with
                            | US32_1 -> (* None *)
                                true
                            | _ ->
                                false
                        | _ ->
                            false
                    | _ ->
                        false
            | _ ->
                match v54 with
                | US30_0(v88) -> (* Some *)
                    match v88 with
                    | US31_0(v89) -> (* Ok *)
                        match v89 with
                        | US32_1 -> (* None *)
                            true
                        | _ ->
                            false
                    | _ ->
                        false
                | _ ->
                    false
    let v95 : string = "state_core.use_requests (9) / result memo / state_data: " + string v64 + " / state_data': " + string v69 + " / request: " + string v59 + " / should_fetch: " + string v94 + ""
    let v96 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v97 : bool = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : bool = v94 = false
    let v415 : US34 =
        if v98 then
            let v99 : string option = None
            US34_0(v99)
        else
            let v101 : US24 = method94(v3)
            let v207 : reqwest_RequestBuilder =
                match v101 with
                | US24_0 -> (* Get *)
                    let v102 : string = method95(v2)
                    let v103 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v104 : string = "&*$0"
                    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v104 
                    let _v103 = v105 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v106 : string = "&*$0"
                    let v107 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v106 
                    let _v103 = v107 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v108 : string = "&*$0"
                    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v102 v108 
                    let _v103 = v109 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v110 : Ref<Str> = v102 |> unbox<Ref<Str>>
                    let _v103 = v110 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v113 : Ref<Str> = v102 |> unbox<Ref<Str>>
                    let _v103 = v113 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v116 : Ref<Str> = v102 |> unbox<Ref<Str>>
                    let _v103 = v116 
                    #endif
#else
                    let v119 : Ref<Str> = v102 |> unbox<Ref<Str>>
                    let _v103 = v119 
                    #endif
                    let v122 : Ref<Str> = _v103 
                    let v127 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v128 : string = "String::from($0)"
                    let v129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v128 
                    let _v127 = v129 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v130 : string = "String::from($0)"
                    let v131 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v130 
                    let _v127 = v131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v132 : string = "String::from($0)"
                    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v122 v132 
                    let _v127 = v133 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v134 : std_string_String = v122 |> unbox<std_string_String>
                    let _v127 = v134 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v137 : std_string_String = v122 |> unbox<std_string_String>
                    let _v127 = v137 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v140 : std_string_String = v122 |> unbox<std_string_String>
                    let _v127 = v140 
                    #endif
#else
                    let v143 : std_string_String = v122 |> unbox<std_string_String>
                    let _v127 = v143 
                    #endif
                    let v146 : std_string_String = _v127 
                    let v151 : std_string_String = method96(v146)
                    let v152 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.get(v151)"
                    let v153 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v152 
                    v153
                | US24_1 -> (* Post *)
                    let v154 : string = method97(v2)
                    let v155 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v156 : string = "&*$0"
                    let v157 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v154 v156 
                    let _v155 = v157 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v158 : string = "&*$0"
                    let v159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v154 v158 
                    let _v155 = v159 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v160 : string = "&*$0"
                    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v154 v160 
                    let _v155 = v161 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v162 : Ref<Str> = v154 |> unbox<Ref<Str>>
                    let _v155 = v162 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v165 : Ref<Str> = v154 |> unbox<Ref<Str>>
                    let _v155 = v165 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v168 : Ref<Str> = v154 |> unbox<Ref<Str>>
                    let _v155 = v168 
                    #endif
#else
                    let v171 : Ref<Str> = v154 |> unbox<Ref<Str>>
                    let _v155 = v171 
                    #endif
                    let v174 : Ref<Str> = _v155 
                    let v179 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v180 : string = "String::from($0)"
                    let v181 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v180 
                    let _v179 = v181 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v182 : string = "String::from($0)"
                    let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v182 
                    let _v179 = v183 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v184 : string = "String::from($0)"
                    let v185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v174 v184 
                    let _v179 = v185 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v186 : std_string_String = v174 |> unbox<std_string_String>
                    let _v179 = v186 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v189 : std_string_String = v174 |> unbox<std_string_String>
                    let _v179 = v189 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v192 : std_string_String = v174 |> unbox<std_string_String>
                    let _v179 = v192 
                    #endif
#else
                    let v195 : std_string_String = v174 |> unbox<std_string_String>
                    let _v179 = v195 
                    #endif
                    let v198 : std_string_String = _v179 
                    let v203 : std_string_String = method98(v198)
                    let v204 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(v203)"
                    let v205 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v204 
                    v205
            let v208 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v209 : string = "&*$0"
            let v210 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v209 
            let _v208 = v210 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v211 : string = "&*$0"
            let v212 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v211 
            let _v208 = v212 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v213 : string = "&*$0"
            let v214 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v213 
            let _v208 = v214 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v215 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v208 = v215 
            #endif
#if FABLE_COMPILER_PYTHON
            let v218 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v208 = v218 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v221 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v208 = v221 
            #endif
#else
            let v224 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v208 = v224 
            #endif
            let v227 : Ref<Str> = _v208 
            let v232 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v233 : string = "String::from($0)"
            let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v233 
            let _v232 = v234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v235 : string = "String::from($0)"
            let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v235 
            let _v232 = v236 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v237 : string = "String::from($0)"
            let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v237 
            let _v232 = v238 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v239 : std_string_String = v227 |> unbox<std_string_String>
            let _v232 = v239 
            #endif
#if FABLE_COMPILER_PYTHON
            let v242 : std_string_String = v227 |> unbox<std_string_String>
            let _v232 = v242 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v245 : std_string_String = v227 |> unbox<std_string_String>
            let _v232 = v245 
            #endif
#else
            let v248 : std_string_String = v227 |> unbox<std_string_String>
            let _v232 = v248 
            #endif
            let v251 : std_string_String = _v232 
            let v256 : string = "reqwest_wasm::RequestBuilder::body(v207, $0)"
            let v257 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr v251 v256 
            let v258 : bool = v5 = false
            let v365 : reqwest_RequestBuilder =
                if v258 then
                    let v259 : string = "v257"
                    let v260 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v259 
                    v260
                else
                    let v261 : string = "reqwest_wasm::header::CONTENT_TYPE.to_string()"
                    let v262 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v261 
                    let v263 : string = "fable_library_rust::String_::fromString($0)"
                    let v264 : string = Fable.Core.RustInterop.emitRustExpr v262 v263 
                    let v265 : reqwest_RequestBuilder = method99(v257)
                    let v266 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v267 : string = "&*$0"
                    let v268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v264 v267 
                    let _v266 = v268 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v269 : string = "&*$0"
                    let v270 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v264 v269 
                    let _v266 = v270 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v271 : string = "&*$0"
                    let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v264 v271 
                    let _v266 = v272 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v273 : Ref<Str> = v264 |> unbox<Ref<Str>>
                    let _v266 = v273 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v276 : Ref<Str> = v264 |> unbox<Ref<Str>>
                    let _v266 = v276 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v279 : Ref<Str> = v264 |> unbox<Ref<Str>>
                    let _v266 = v279 
                    #endif
#else
                    let v282 : Ref<Str> = v264 |> unbox<Ref<Str>>
                    let _v266 = v282 
                    #endif
                    let v285 : Ref<Str> = _v266 
                    let v290 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v291 : string = "String::from($0)"
                    let v292 : std_string_String = Fable.Core.RustInterop.emitRustExpr v285 v291 
                    let _v290 = v292 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v293 : string = "String::from($0)"
                    let v294 : std_string_String = Fable.Core.RustInterop.emitRustExpr v285 v293 
                    let _v290 = v294 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v295 : string = "String::from($0)"
                    let v296 : std_string_String = Fable.Core.RustInterop.emitRustExpr v285 v295 
                    let _v290 = v296 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v297 : std_string_String = v285 |> unbox<std_string_String>
                    let _v290 = v297 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v300 : std_string_String = v285 |> unbox<std_string_String>
                    let _v290 = v300 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v303 : std_string_String = v285 |> unbox<std_string_String>
                    let _v290 = v303 
                    #endif
#else
                    let v306 : std_string_String = v285 |> unbox<std_string_String>
                    let _v290 = v306 
                    #endif
                    let v309 : std_string_String = _v290 
                    let v314 : string = "application/json"
                    let v315 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v316 : string = "&*$0"
                    let v317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v314 v316 
                    let _v315 = v317 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v318 : string = "&*$0"
                    let v319 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v314 v318 
                    let _v315 = v319 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v320 : string = "&*$0"
                    let v321 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v314 v320 
                    let _v315 = v321 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v322 : Ref<Str> = v314 |> unbox<Ref<Str>>
                    let _v315 = v322 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v325 : Ref<Str> = v314 |> unbox<Ref<Str>>
                    let _v315 = v325 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v328 : Ref<Str> = v314 |> unbox<Ref<Str>>
                    let _v315 = v328 
                    #endif
#else
                    let v331 : Ref<Str> = v314 |> unbox<Ref<Str>>
                    let _v315 = v331 
                    #endif
                    let v334 : Ref<Str> = _v315 
                    let v339 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v340 : string = "String::from($0)"
                    let v341 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v340 
                    let _v339 = v341 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v342 : string = "String::from($0)"
                    let v343 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v342 
                    let _v339 = v343 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v344 : string = "String::from($0)"
                    let v345 : std_string_String = Fable.Core.RustInterop.emitRustExpr v334 v344 
                    let _v339 = v345 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v346 : std_string_String = v334 |> unbox<std_string_String>
                    let _v339 = v346 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v349 : std_string_String = v334 |> unbox<std_string_String>
                    let _v339 = v349 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v352 : std_string_String = v334 |> unbox<std_string_String>
                    let _v339 = v352 
                    #endif
#else
                    let v355 : std_string_String = v334 |> unbox<std_string_String>
                    let _v339 = v355 
                    #endif
                    let v358 : std_string_String = _v339 
                    let v363 : string = "reqwest_wasm::RequestBuilder::header(v265, $0, $1)"
                    let v364 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr struct (v309, v358) v363 
                    v364
            let v366 : reqwest_RequestBuilder = method100(v365)
            let v367 : string = "Box::pin(reqwest_wasm::RequestBuilder::send(v366))"
            let v368 : std_pin_Pin<Box<Dyn<std_future_Future<Result<reqwest_Response, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v367 
            let v369 : string = "v368.await"
            let v370 : Result<reqwest_Response, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v369 
            let v371 : (reqwest_Error -> std_string_String) = method101()
            let v372 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v373 : string = "$0.map_err(|x| $1(x))"
            let v374 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v370, v371) v373 
            let _v372 = v374 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v375 : string = "$0.map_err(|x| $1(x))"
            let v376 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v370, v371) v375 
            let _v372 = v376 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v377 : string = "$0.map_err(|x| $1(x))"
            let v378 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v370, v371) v377 
            let _v372 = v378 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v379 : Result<reqwest_Response, std_string_String> = match v370 with Ok x -> Ok x | Error x -> Error (v371 x)
            let _v372 = v379 
            #endif
#if FABLE_COMPILER_PYTHON
            let v380 : Result<reqwest_Response, std_string_String> = match v370 with Ok x -> Ok x | Error x -> Error (v371 x)
            let _v372 = v380 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v381 : Result<reqwest_Response, std_string_String> = match v370 with Ok x -> Ok x | Error x -> Error (v371 x)
            let _v372 = v381 
            #endif
#else
            let v382 : Result<reqwest_Response, std_string_String> = match v370 with Ok x -> Ok x | Error x -> Error (v371 x)
            let _v372 = v382 
            #endif
            let v383 : Result<reqwest_Response, std_string_String> = _v372 
            let v386 : string = "$0?"
            let v387 : reqwest_Response = Fable.Core.RustInterop.emitRustExpr v383 v386 
            let v388 : string = "Box::pin(reqwest_wasm::Response::text(v387))"
            let v389 : std_pin_Pin<Box<Dyn<std_future_Future<Result<std_string_String, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v388 
            let v390 : string = "v389.await"
            let v391 : Result<std_string_String, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v390 
            let v392 : (reqwest_Error -> std_string_String) = method101()
            let v393 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v394 : string = "$0.map_err(|x| $1(x))"
            let v395 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v391, v392) v394 
            let _v393 = v395 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v396 : string = "$0.map_err(|x| $1(x))"
            let v397 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v391, v392) v396 
            let _v393 = v397 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v398 : string = "$0.map_err(|x| $1(x))"
            let v399 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v391, v392) v398 
            let _v393 = v399 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v400 : Result<std_string_String, std_string_String> = match v391 with Ok x -> Ok x | Error x -> Error (v392 x)
            let _v393 = v400 
            #endif
#if FABLE_COMPILER_PYTHON
            let v401 : Result<std_string_String, std_string_String> = match v391 with Ok x -> Ok x | Error x -> Error (v392 x)
            let _v393 = v401 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v402 : Result<std_string_String, std_string_String> = match v391 with Ok x -> Ok x | Error x -> Error (v392 x)
            let _v393 = v402 
            #endif
#else
            let v403 : Result<std_string_String, std_string_String> = match v391 with Ok x -> Ok x | Error x -> Error (v392 x)
            let _v393 = v403 
            #endif
            let v404 : Result<std_string_String, std_string_String> = _v393 
            let v407 : string = "$0?"
            let v408 : std_string_String = Fable.Core.RustInterop.emitRustExpr v404 v407 
            let v409 : string = "fable_library_rust::String_::fromString($0)"
            let v410 : string = Fable.Core.RustInterop.emitRustExpr v408 v409 
            let v411 : string option = Some v410 
            US34_0(v411)
    let v421 : Result<string option, std_string_String> =
        match v415 with
        | US34_1(v418) -> (* Error *)
            let v419 : Result<string option, std_string_String> = Error v418 
            v419
        | US34_0(v416) -> (* Ok *)
            let v417 : Result<string option, std_string_String> = Ok v416 
            v417
    let v422 : Result<string option, std_string_String> = method102(v421)
    let v423 : string = ""
    let v424 : string = "}"
    let v425 : string = v423 + v424 
    let v426 : _ = v422 
    let v427 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v428 : string = $"true; let v426 = $0"
    let v429 : bool = Fable.Core.RustInterop.emitRustExpr v426 v428 
    let _v427 = v429 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v430 : string = $"true; let v426 = $0"
    let v431 : bool = Fable.Core.RustInterop.emitRustExpr v426 v430 
    let _v427 = v431 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v432 : string = $"true; let v426 = $0"
    let v433 : bool = Fable.Core.RustInterop.emitRustExpr v426 v432 
    let _v427 = v433 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v434 : bool = true
    let _v427 = v434 
    #endif
#if FABLE_COMPILER_PYTHON
    let v435 : bool = true
    let _v427 = v435 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v436 : bool = true
    let _v427 = v436 
    #endif
#else
    let v437 : bool = true
    let _v427 = v437 
    #endif
    let v438 : bool = _v427 
    let v441 : string = $"true; v426 " + v425 + "); " + v423 + " // rust.fix_closure'"
    let v442 : bool = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "__future_init"
    let v444 : _ = Fable.Core.RustInterop.emitRustExpr () v443 
    let v445 : string = "v444"
    let v446 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v445 
    v446
and closure83 (v0 : US28) (v1 : int32) : (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>) =
    closure84(v0, v1)
and method92 (v0 : US28) : (int32 -> (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>)) =
    closure83(v0)
and method103 (v0 : Vec<struct (string * US24 * string * bool * bool)>) : Vec<struct (string * US24 * string * bool * bool)> =
    v0
and method104 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> =
    v0
and method105 (v0 : Result<Vec<string option>, std_string_String>) : Result<Vec<string option>, std_string_String> =
    v0
and method106 (v0 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>>) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>> =
    v0
and method87 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option>) : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>> =
    let v2 : string = "let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //"
    let v3 : (unit -> struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option)) = closure78(v0, v1)
    Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v4 : string = "x"
    let struct (v5 : Vec<struct (string * US24 * string * bool * bool)>, v6 : Result<Vec<Heap4 option>, std_string_String> option) = Fable.Core.RustInterop.emitRustExpr () v4 
    let v7 : string = $"%A{v5}"
    let v10 : int64 = 400L
    let v11 : string = method11(v10, v7)
    let v12 : string = "state_core.use_requests (7) / json create_local_resource / requests: " + string v11 + ""
    let v13 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "true; let __future_init = Box::pin(async move { //"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method88()
    let v18 : US27 option = v6 |> Option.map v17 
    let v29 : US27 = US27_1
    let v30 : US27 = v18 |> Option.defaultValue v29 
    let v72 : US28 =
        match v30 with
        | US27_1 -> (* None *)
            US28_1
        | US27_0(v34) -> (* Some *)
            let v35 : (Vec<Heap4 option> -> US25) = method89()
            let v36 : (std_string_String -> US25) = method90()
            let v37 : US25 = match v34 with Ok x -> v35 x | Error x -> v36 x
            let v68 : US29 =
                match v37 with
                | US25_1(v65) -> (* Error *)
                    US29_1(v65)
                | US25_0(v38) -> (* Ok *)
                    let v39 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v38 v39 
                    let v41 : string = "x"
                    let v42 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v41 
                    let v43 : (Heap4 -> US26) = method91()
                    let v44 : US26 option = v42 |> Option.map v43 
                    let v55 : US26 = US26_1
                    let v56 : US26 = v44 |> Option.defaultValue v55 
                    let v60 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v61 : bool = Fable.Core.RustInterop.emitRustExpr v56 v60 
                    let v62 : string = "_vec_map"
                    let v63 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v62 
                    US29_0(v63)
            US28_0(v68)
    let v73 : string = $"%A{v72}"
    let v76 : int64 = 400L
    let v77 : string = method11(v76, v73)
    let v78 : string = "state_core.use_requests (8) / result_memo / state_data: " + string v77 + ""
    let v79 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : (int32 -> (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>)) = method92(v72)
    let v82 : Vec<struct (string * US24 * string * bool * bool)> = method103(v5)
    let v83 : string = "v82.iter().enumerate().map(|(i, x)| v81(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v84 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = method104(v84)
    let v86 : string = "futures::future::try_join_all(v85)"
    let v87 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "v87.await"
    let v89 : Result<Vec<string option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "$0?"
    let v91 : Vec<string option> = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : Result<Vec<string option>, std_string_String> = Ok v91 
    let v93 : Result<Vec<string option>, std_string_String> = method105(v92)
    let v94 : string = ""
    let v95 : string = "}"
    let v96 : string = v94 + v95 
    let v97 : _ = v93 
    let v98 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v99 : string = $"true; let v97 = $0"
    let v100 : bool = Fable.Core.RustInterop.emitRustExpr v97 v99 
    let _v98 = v100 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v101 : string = $"true; let v97 = $0"
    let v102 : bool = Fable.Core.RustInterop.emitRustExpr v97 v101 
    let _v98 = v102 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v103 : string = $"true; let v97 = $0"
    let v104 : bool = Fable.Core.RustInterop.emitRustExpr v97 v103 
    let _v98 = v104 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v105 : bool = true
    let _v98 = v105 
    #endif
#if FABLE_COMPILER_PYTHON
    let v106 : bool = true
    let _v98 = v106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v107 : bool = true
    let _v98 = v107 
    #endif
#else
    let v108 : bool = true
    let _v98 = v108 
    #endif
    let v109 : bool = _v98 
    let v112 : string = $"true; v97 " + v96 + "); " + v94 + " // rust.fix_closure'"
    let v113 : bool = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : string = "__future_init"
    let v115 : _ = Fable.Core.RustInterop.emitRustExpr () v114 
    let v116 : string = "v115"
    let v117 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v116 
    let v118 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>> = method106(v117)
    let v119 : string = "v118.await"
    let v120 : Result<Vec<string option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : string = v94 + v95 
    let v122 : string = v121 + v95 
    let v123 : string = "{"
    let v124 : string = v94 + v123 
    let v125 : _ = v120 
    let v126 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v127 : string = $"true; let v125 = $0"
    let v128 : bool = Fable.Core.RustInterop.emitRustExpr v125 v127 
    let _v126 = v128 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v129 : string = $"true; let v125 = $0"
    let v130 : bool = Fable.Core.RustInterop.emitRustExpr v125 v129 
    let _v126 = v130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v131 : string = $"true; let v125 = $0"
    let v132 : bool = Fable.Core.RustInterop.emitRustExpr v125 v131 
    let _v126 = v132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v133 : bool = true
    let _v126 = v133 
    #endif
#if FABLE_COMPILER_PYTHON
    let v134 : bool = true
    let _v126 = v134 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v135 : bool = true
    let _v126 = v135 
    #endif
#else
    let v136 : bool = true
    let _v126 = v136 
    #endif
    let v137 : bool = _v126 
    let v140 : string = $"true; v125 " + v122 + "); " + v124 + " // rust.fix_closure'"
    let v141 : bool = Fable.Core.RustInterop.emitRustExpr () v140 
    let v142 : string = "__create_local_resource"
    let v143 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v142 
    v143
and method107 (v0 : string) : string =
    v0
and closure89 () (v0 : rexie_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method108 () : (rexie_Error -> std_string_String) =
    closure89()
and method109 (v0 : Result<unit, std_string_String>) : Result<unit, std_string_String> =
    v0
and closure88 (v0 : Heap4, v1 : std_sync_Arc<rexie_Rexie>) struct (v2 : string, v3 : US24, v4 : string, v5 : bool, v6 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>> =
    let v7 : string = "true; let __future_init = Box::pin(async move { //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: " + v2 + ""
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "url[" + v2 + "](" + $"%A{v4}" + ")"
    let v13 : string = $"%A{v0}"
    let v16 : int64 = System.Convert.ToInt64 v13.Length
    let v17 : string = "state_core.set_data () / data_len: " + string v16 + ""
    let v18 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "true; let __future_init = Box::pin(async move { //"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "true; let mut data = Vec::new()"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : string = "true; borsh::BorshSerialize::serialize(&$0, &mut data).unwrap()"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr v0 v24 
    let v26 : string = "data"
    let v27 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "serde_wasm_bindgen::to_value(&v27).unwrap()"
    let v29 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = method107(v12)
    let v31 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "&*$0"
    let v33 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v32 
    let _v31 = v33 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v34 : string = "&*$0"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v34 
    let _v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : string = "&*$0"
    let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v36 
    let _v31 = v37 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v41 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v44 
    #endif
#else
    let v47 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v47 
    #endif
    let v50 : Ref<Str> = _v31 
    let v55 : string = "$0.transaction(&[\"store\"], rexie::TransactionMode::ReadWrite)?"
    let v56 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v1 v55 
    let v57 : string = "v56.store(\"store\")?"
    let v58 : rexie_Store = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "true; v58.put(&v29, Some(&$0.into())).await?"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr v50 v59 
    let v61 : string = "true; v56.done().await?"
    let v62 : bool = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : Result<unit, rexie_Error> = Ok () 
    let v64 : Result<unit, rexie_Error> = method52(v63)
    let v65 : string = ""
    let v66 : string = "}"
    let v67 : string = v65 + v66 
    let v68 : _ = v64 
    let v69 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v70 : string = $"true; let v68 = $0"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr v68 v70 
    let _v69 = v71 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v72 : string = $"true; let v68 = $0"
    let v73 : bool = Fable.Core.RustInterop.emitRustExpr v68 v72 
    let _v69 = v73 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : string = $"true; let v68 = $0"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v68 v74 
    let _v69 = v75 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v76 : bool = true
    let _v69 = v76 
    #endif
#if FABLE_COMPILER_PYTHON
    let v77 : bool = true
    let _v69 = v77 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : bool = true
    let _v69 = v78 
    #endif
#else
    let v79 : bool = true
    let _v69 = v79 
    #endif
    let v80 : bool = _v69 
    let v83 : string = $"true; v68 " + v67 + "); " + v65 + " // rust.fix_closure'"
    let v84 : bool = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = "__future_init"
    let v86 : _ = Fable.Core.RustInterop.emitRustExpr () v85 
    let v87 : string = "v86"
    let v88 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v87 
    let v89 : string = "v88.await"
    let v90 : Result<unit, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : (rexie_Error -> std_string_String) = method108()
    let v92 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v93 : string = "$0.map_err(|x| $1(x))"
    let v94 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v93 
    let _v92 = v94 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v95 : string = "$0.map_err(|x| $1(x))"
    let v96 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v95 
    let _v92 = v96 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v97 : string = "$0.map_err(|x| $1(x))"
    let v98 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v90, v91) v97 
    let _v92 = v98 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v99 : Result<unit, std_string_String> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
    let _v92 = v99 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : Result<unit, std_string_String> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
    let _v92 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v101 : Result<unit, std_string_String> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
    let _v92 = v101 
    #endif
#else
    let v102 : Result<unit, std_string_String> = match v90 with Ok x -> Ok x | Error x -> Error (v91 x)
    let _v92 = v102 
    #endif
    let v103 : Result<unit, std_string_String> = _v92 
    let v106 : string = "true; $0?"
    let v107 : bool = Fable.Core.RustInterop.emitRustExpr v103 v106 
    
    let v108 : Result<unit, std_string_String> = Ok () 
    let v109 : Result<unit, std_string_String> = method109(v108)
    let v110 : string = v65 + v66 
    let v111 : _ = v109 
    let v112 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v113 : string = $"true; let v111 = $0"
    let v114 : bool = Fable.Core.RustInterop.emitRustExpr v111 v113 
    let _v112 = v114 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v115 : string = $"true; let v111 = $0"
    let v116 : bool = Fable.Core.RustInterop.emitRustExpr v111 v115 
    let _v112 = v116 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v117 : string = $"true; let v111 = $0"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v111 v117 
    let _v112 = v118 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v119 : bool = true
    let _v112 = v119 
    #endif
#if FABLE_COMPILER_PYTHON
    let v120 : bool = true
    let _v112 = v120 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v121 : bool = true
    let _v112 = v121 
    #endif
#else
    let v122 : bool = true
    let _v112 = v122 
    #endif
    let v123 : bool = _v112 
    let v126 : string = $"true; v111 " + v110 + "); " + v65 + " // rust.fix_closure'"
    let v127 : bool = Fable.Core.RustInterop.emitRustExpr () v126 
    let v128 : string = "__future_init"
    let v129 : _ = Fable.Core.RustInterop.emitRustExpr () v128 
    let v130 : string = "v129"
    let v131 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v130 
    v131
and method110 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> =
    v0
and method111 (v0 : Result<Vec<unit>, std_string_String>) : Result<Vec<unit>, std_string_String> =
    v0
and closure87 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option>) (v2 : Heap4) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>> =
    let v3 : string = $"%A{v2}"
    let v6 : int64 = System.Convert.ToInt64 v3.Length
    let v7 : string = "state_core.use_requests (10) / set_state_data_action / value_len: " + string v6 + ""
    let v8 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "true; let __future_init = Box::pin(async move { //"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v13 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v15 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr v1 v14 
    let v16 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "x"
    let v19 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : string = "$0.0"
    let v21 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "true; $0 })"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = "_optionm_map_"
    let v25 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : (std_sync_Arc<rexie_Rexie> -> US4) = method15()
    let v27 : US4 option = v25 |> Option.map v26 
    let v38 : US4 = US4_1
    let v39 : US4 = v27 |> Option.defaultValue v38 
    let v62 : US35 =
        match v39 with
        | US4_0(v43) -> (* Some *)
            let v44 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v45 : (struct (string * US24 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>) = closure88(v2, v43)
            let v46 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v13, v45) v44 
            let v47 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = method110(v46)
            let v48 : string = "futures::future::try_join_all(v47)"
            let v49 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v48 
            let v50 : string = "v49.await"
            let v51 : Result<Vec<unit>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v50 
            let v52 : string = "$0?"
            let v53 : Vec<unit> = Fable.Core.RustInterop.emitRustExpr v51 v52 
            US35_0(v53)
        | _ ->
            let v55 : string = "state_core.use_requests (12) / set_state_data_action / database,request=None"
            let v56 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v57 : bool = Fable.Core.RustInterop.emitRustExpr v55 v56 
            let v58 : (unit []) = [||]
            let v59 : string = "$0.to_vec()"
            let v60 : Vec<unit> = Fable.Core.RustInterop.emitRustExpr v58 v59 
            US35_0(v60)
    let v68 : Result<Vec<unit>, std_string_String> =
        match v62 with
        | US35_1(v65) -> (* Error *)
            let v66 : Result<Vec<unit>, std_string_String> = Error v65 
            v66
        | US35_0(v63) -> (* Ok *)
            let v64 : Result<Vec<unit>, std_string_String> = Ok v63 
            v64
    let v69 : Result<Vec<unit>, std_string_String> = method111(v68)
    let v70 : string = ""
    let v71 : string = "}"
    let v72 : string = v70 + v71 
    let v73 : _ = v69 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = $"true; let v73 = $0"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr v73 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = $"true; let v73 = $0"
    let v78 : bool = Fable.Core.RustInterop.emitRustExpr v73 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = $"true; let v73 = $0"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v73 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : bool = true
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v82 : bool = true
    let _v74 = v82 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v83 : bool = true
    let _v74 = v83 
    #endif
#else
    let v84 : bool = true
    let _v74 = v84 
    #endif
    let v85 : bool = _v74 
    let v88 : string = $"true; v73 " + v72 + "); " + v70 + " // rust.fix_closure'"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "__future_init"
    let v91 : _ = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "v91"
    let v93 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v92 
    v93
and closure91 () (v0 : Result<Vec<string option>, std_string_String>) : US38 =
    US38_0(v0)
and method112 () : (Result<Vec<string option>, std_string_String> -> US38) =
    closure91()
and closure92 () (v0 : Vec<string option>) : US40 =
    US40_0(v0)
and method113 () : (Vec<string option> -> US40) =
    closure92()
and closure93 () (v0 : std_string_String) : US40 =
    US40_1(v0)
and method114 () : (std_string_String -> US40) =
    closure93()
and closure94 () (v0 : string) : US32 =
    US32_0(v0)
and method115 () : (string -> US32) =
    closure94()
and closure97 () (v0 : US32) : US43 =
    US43_0(v0)
and method117 () : (US32 -> US43) =
    closure97()
and closure98 () (v0 : crate_model_near_nearblocks_Root) : crate_model_near_nearblocks_Root option =
    let v1 : crate_model_near_nearblocks_Root option = Some v0 
    v1
and method118 () : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) =
    closure98()
and method119 (v0 : Result<crate_model_near_nearblocks_Root, std_string_String>) : Result<crate_model_near_nearblocks_Root, std_string_String> =
    v0
and closure96 (v0 : US36, v1 : US42, v2 : int32) struct (v3 : string, v4 : US24, v5 : string, v6 : bool, v7 : bool) : Result<crate_model_near_nearblocks_Root option, std_string_String> =
    let v51 : US30 =
        match v0 with
        | US36_1 -> (* None *)
            US30_1
        | US36_0(v8) -> (* Some *)
            let v47 : US31 =
                match v8 with
                | US37_1(v44) -> (* Error *)
                    US31_1(v44)
                | US37_0(v9) -> (* Ok *)
                    let v10 : US26 option = v9 |> Array.tryItem v2 
                    let v11 : (US26 -> US33) = method93()
                    let v12 : US33 option = v10 |> Option.map v11 
                    let v23 : US33 = US33_1
                    let v24 : US33 = v12 |> Option.defaultValue v23 
                    let v34 : US26 =
                        match v24 with
                        | US33_0(v28) -> (* Some *)
                            match v28 with
                            | US26_0(v29) -> (* Some *)
                                US26_0(v29)
                            | _ ->
                                US26_1
                        | _ ->
                            US26_1
                    let v42 : US32 =
                        match v34 with
                        | US26_1 -> (* None *)
                            US32_1
                        | US26_0(v35) -> (* Some *)
                            let v36 : std_string_String = v35.l0
                            let v37 : string = "fable_library_rust::String_::fromString($0)"
                            let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
                            US32_0(v38)
                    US31_0(v42)
            US30_0(v47)
    let v52 : string = $"%A{struct (v3, v4, v5, v6, v7)}"
    let v55 : int64 = 400L
    let v56 : string = method11(v55, v52)
    let v57 : string = $"%A{v51}"
    let v60 : int64 = 400L
    let v61 : string = method11(v60, v57)
    let v62 : string = "state_core.use_request (15) / result memo / request: " + string v56 + " / state_data: " + string v61 + ""
    let v63 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = $"%A{v1}"
    let v68 : int64 = 400L
    let v69 : string = method11(v68, v65)
    let v70 : string = "state_core.use_request (16) / effect / json: " + string v69 + ""
    let v71 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v104 : US32 =
        match v1 with
        | US42_1(v101) -> (* Error *)
            US32_1
        | US42_0(v73) -> (* Ok *)
            let v74 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v75 : (US32 []) = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : US32 option = v75 |> Array.tryItem v2 
            let v77 : (US32 -> US43) = method117()
            let v78 : US43 option = v76 |> Option.map v77 
            let v89 : US43 = US43_1
            let v90 : US43 = v78 |> Option.defaultValue v89 
            match v90 with
            | US43_0(v94) -> (* Some *)
                match v94 with
                | US32_0(v95) -> (* Some *)
                    US32_0(v95)
                | _ ->
                    US32_1
            | _ ->
                US32_1
    match v104 with
    | US32_0(v105) -> (* Some *)
        let v106 : string = method49(v105)
        let v107 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v108 : string = "&*$0"
        let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v108 
        let _v107 = v109 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "&*$0"
        let v111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v110 
        let _v107 = v111 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v112 : string = "&*$0"
        let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v112 
        let _v107 = v113 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v120 
        #endif
#else
        let v123 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v123 
        #endif
        let v126 : Ref<Str> = _v107 
        let v131 : string = "serde_json::from_str(&$0)"
        let v132 : Result<crate_model_near_nearblocks_Root, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v126 v131 
        let v133 : (serde_json_Error -> std_string_String) = method50()
        let v134 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "$0.map_err(|x| $1(x))"
        let v136 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v135 
        let _v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "$0.map_err(|x| $1(x))"
        let v138 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v137 
        let _v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "$0.map_err(|x| $1(x))"
        let v140 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v139 
        let _v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v143 
        #endif
#else
        let v144 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v144 
        #endif
        let v145 : Result<crate_model_near_nearblocks_Root, std_string_String> = _v134 
        let v148 : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) = method118()
        let v149 : Result<crate_model_near_nearblocks_Root, std_string_String> = method119(v145)
        let v150 : string = "v149.map(|x| v148(x))"
        let v151 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v150 
        v151
    | _ ->
        match v51 with
        | US30_0(v152) -> (* Some *)
            match v152 with
            | US31_0(v153) -> (* Ok *)
                match v153 with
                | US32_0(v154) -> (* Some *)
                    let v155 : string = method49(v154)
                    let v156 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
                    let _v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
                    let _v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
                    let _v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v163 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v166 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v169 
                    #endif
#else
                    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v172 
                    #endif
                    let v175 : Ref<Str> = _v156 
                    let v180 : string = "serde_json::from_str(&$0)"
                    let v181 : Result<crate_model_near_nearblocks_Root, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v175 v180 
                    let v182 : (serde_json_Error -> std_string_String) = method50()
                    let v183 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "$0.map_err(|x| $1(x))"
                    let v185 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v184 
                    let _v183 = v185 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v186 : string = "$0.map_err(|x| $1(x))"
                    let v187 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v186 
                    let _v183 = v187 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v188 : string = "$0.map_err(|x| $1(x))"
                    let v189 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v188 
                    let _v183 = v189 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v191 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v191 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v192 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v192 
                    #endif
#else
                    let v193 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v193 
                    #endif
                    let v194 : Result<crate_model_near_nearblocks_Root, std_string_String> = _v183 
                    let v197 : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) = method118()
                    let v198 : Result<crate_model_near_nearblocks_Root, std_string_String> = method119(v194)
                    let v199 : string = "v198.map(|x| v197(x))"
                    let v200 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v199 
                    v200
                | _ ->
                    let v201 : string = $"%A{struct (v104, v51)}"
                    let v204 : string = "state_core.use_request (17) / json Error / value: " + string v201 + ""
                    let v205 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                    let v206 : bool = Fable.Core.RustInterop.emitRustExpr v204 v205 
                    let v207 : crate_model_near_nearblocks_Root option = None
                    let v208 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v207 
                    v208
            | _ ->
                let v210 : string = $"%A{struct (v104, v51)}"
                let v213 : string = "state_core.use_request (17) / json Error / value: " + string v210 + ""
                let v214 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v215 : bool = Fable.Core.RustInterop.emitRustExpr v213 v214 
                let v216 : crate_model_near_nearblocks_Root option = None
                let v217 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v216 
                v217
        | _ ->
            let v219 : string = $"%A{struct (v104, v51)}"
            let v222 : string = "state_core.use_request (17) / json Error / value: " + string v219 + ""
            let v223 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v224 : bool = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : crate_model_near_nearblocks_Root option = None
            let v226 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v225 
            v226
and closure95 (v0 : US36, v1 : US42) (v2 : int32) : (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>) =
    closure96(v0, v1, v2)
and method116 (v0 : US36, v1 : US42) : (int32 -> (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>)) =
    closure95(v0, v1)
and closure90 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option>, v2 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>>, v3 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>>) () : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) =
    let v4 : string = $"$0()"
    let v5 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = $"%A{v5}"
    let v9 : string = "state_core.use_requests (13) / result memo / requests: " + string v6 + ""
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"$0()"
    let v13 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method88()
    let v15 : US27 option = v13 |> Option.map v14 
    let v26 : US27 = US27_1
    let v27 : US27 = v15 |> Option.defaultValue v26 
    let v71 : US36 =
        match v27 with
        | US27_1 -> (* None *)
            US36_1
        | US27_0(v31) -> (* Some *)
            let v32 : (Vec<Heap4 option> -> US25) = method89()
            let v33 : (std_string_String -> US25) = method90()
            let v34 : US25 = match v31 with Ok x -> v32 x | Error x -> v33 x
            let v67 : US37 =
                match v34 with
                | US25_1(v64) -> (* Error *)
                    US37_1(v64)
                | US25_0(v35) -> (* Ok *)
                    let v36 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
                    let v38 : string = "x"
                    let v39 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v38 
                    let v40 : (Heap4 -> US26) = method91()
                    let v41 : US26 option = v39 |> Option.map v40 
                    let v52 : US26 = US26_1
                    let v53 : US26 = v41 |> Option.defaultValue v52 
                    let v57 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v58 : bool = Fable.Core.RustInterop.emitRustExpr v53 v57 
                    let v59 : string = "_vec_map"
                    let v60 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v59 
                    let v61 : string = "fable_library_rust::NativeArray_::array_from($0)"
                    let v62 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v60 v61 
                    US37_0(v62)
            US36_0(v67)
    let v72 : string = $"%A{v71}"
    let v75 : int64 = 400L
    let v76 : string = method11(v75, v72)
    let v77 : string = "state_core.use_request (14) / result_memo / state_data: " + string v76 + ""
    let v78 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v81 : Result<Vec<string option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v80 
    let v82 : (Result<Vec<string option>, std_string_String> -> US38) = method112()
    let v83 : US38 option = v81 |> Option.map v82 
    let v94 : US38 = US38_1
    let v95 : US38 = v83 |> Option.defaultValue v94 
    let v106 : US39 =
        match v95 with
        | US38_1 -> (* None *)
            US39_1
        | US38_0(v99) -> (* Some *)
            let v100 : (Vec<string option> -> US40) = method113()
            let v101 : (std_string_String -> US40) = method114()
            let v102 : US40 = match v99 with Ok x -> v100 x | Error x -> v101 x
            US39_0(v102)
    let v142 : US41 =
        match v106 with
        | US39_1 -> (* None *)
            US41_1
        | US39_0(v107) -> (* Some *)
            let v138 : US42 =
                match v107 with
                | US40_1(v135) -> (* Error *)
                    US42_1(v135)
                | US40_0(v108) -> (* Ok *)
                    let v109 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v110 : bool = Fable.Core.RustInterop.emitRustExpr v108 v109 
                    let v111 : string = "x"
                    let v112 : string option = Fable.Core.RustInterop.emitRustExpr () v111 
                    let v113 : (string -> US32) = method115()
                    let v114 : US32 option = v112 |> Option.map v113 
                    let v125 : US32 = US32_1
                    let v126 : US32 = v114 |> Option.defaultValue v125 
                    let v130 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v126 v130 
                    let v132 : string = "_vec_map"
                    let v133 : Vec<US32> = Fable.Core.RustInterop.emitRustExpr () v132 
                    US42_0(v133)
            US41_0(v138)
    let v143 : (US32 []) = [||]
    let v144 : string = "$0.to_vec()"
    let v145 : Vec<US32> = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v149 : US42 =
        match v142 with
        | US41_1 -> (* None *)
            US42_0(v145)
        | US41_0(v146) -> (* Some *)
            v146
    match v149 with
    | US42_1(v211) -> (* Error *)
        ()
    | US42_0(v150) -> (* Ok *)
        let v151 : string = "true; $0.into_iter().for_each(|x| { //"
        let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
        let v153 : string = "x"
        let v154 : US32 = Fable.Core.RustInterop.emitRustExpr () v153 
        match v154 with
        | US32_0(v155) -> (* Some *)
            let v156 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v157 : string = "&*$0"
            let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
            let _v156 = v158 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v159 : string = "&*$0"
            let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
            let _v156 = v160 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v161 : string = "&*$0"
            let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
            let _v156 = v162 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v163 
            #endif
#if FABLE_COMPILER_PYTHON
            let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v166 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v169 
            #endif
#else
            let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v172 
            #endif
            let v175 : Ref<Str> = _v156 
            let v180 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v181 : string = "String::from($0)"
            let v182 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v181 
            let _v180 = v182 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v183 : string = "String::from($0)"
            let v184 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v183 
            let _v180 = v184 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v185 : string = "String::from($0)"
            let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v185 
            let _v180 = v186 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v187 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v187 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v193 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v193 
            #endif
#else
            let v196 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v196 
            #endif
            let v199 : std_string_String = _v180 
            let v204 : Heap4 = {l0 = v199} : Heap4
            let v205 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
            let v206 : bool = Fable.Core.RustInterop.emitRustExpr struct (v3, v204) v205 
            ()
        | _ ->
            ()
        let v207 : string = $"true"
        let v208 : bool = Fable.Core.RustInterop.emitRustExpr () v207 
        let v209 : string = "true; }}); { //"
        let v210 : bool = Fable.Core.RustInterop.emitRustExpr () v209 
        ()
    let v212 : (int32 -> (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>)) = method116(v71, v149)
    let v213 : Vec<struct (string * US24 * string * bool * bool)> = method103(v5)
    let v214 : string = "v213.iter().enumerate().map(|(i, x)| v212(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v215 : Vec<Result<crate_model_near_nearblocks_Root option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v214 
    let v216 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v217 : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v215 v216 
    let v218 : string = $"%A{v217}"
    let v221 : string = "state_core.use_requests (18) / result_func func0 / result: " + string v218 + ""
    let v222 : int64 = 200L
    let v223 : string = method11(v222, v221)
    let v224 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v225 : bool = Fable.Core.RustInterop.emitRustExpr v223 v224 
    v217
and method121 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) =
    v0
and closure101 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) (v1 : crate_model_near_nearblocks_Root option) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option =
    let v2 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = method121(v0)
    let v3 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option = v1 |> Option.map v2 
    v3
and method120 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : (crate_model_near_nearblocks_Root option -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) =
    closure101(v0)
and method122 (v0 : Result<crate_model_near_nearblocks_Root option, std_string_String>) : Result<crate_model_near_nearblocks_Root option, std_string_String> =
    v0
and closure100 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) (v1 : Result<crate_model_near_nearblocks_Root option, std_string_String>) : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> =
    let v2 : (crate_model_near_nearblocks_Root option -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) = method120(v0)
    let v3 : Result<crate_model_near_nearblocks_Root option, std_string_String> = method122(v1)
    let v4 : string = "v3.map(|x| v2(x))"
    let v5 : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4 
    v5
and closure99 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])), v1 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>, v2 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>>, v3 : leptos_prelude_Memo<(Result<crate_model_near_nearblocks_Root option, std_string_String> [])>) () : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> =
    let v4 : string = $"leptos::prelude::loading(&$0)"
    let v5 : leptos_prelude_Signal<bool> = Fable.Core.RustInterop.emitRustExpr v1 v4 
    let v6 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"leptos::prelude::loading(&$0)"
    let v9 : leptos_prelude_Signal<bool> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v13 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (std_sync_Arc<rexie_Rexie> -> US4) = method15()
    let v15 : US4 option = v13 |> Option.map v14 
    let v26 : US4 = US4_1
    let v27 : US4 = v15 |> Option.defaultValue v26 
    let v31 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v32 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v31 
    let v33 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method88()
    let v34 : US27 option = v32 |> Option.map v33 
    let v45 : US27 = US27_1
    let v46 : US27 = v34 |> Option.defaultValue v45 
    let v90 : US36 =
        match v46 with
        | US27_1 -> (* None *)
            US36_1
        | US27_0(v50) -> (* Some *)
            let v51 : (Vec<Heap4 option> -> US25) = method89()
            let v52 : (std_string_String -> US25) = method90()
            let v53 : US25 = match v50 with Ok x -> v51 x | Error x -> v52 x
            let v86 : US37 =
                match v53 with
                | US25_1(v83) -> (* Error *)
                    US37_1(v83)
                | US25_0(v54) -> (* Ok *)
                    let v55 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
                    let v57 : string = "x"
                    let v58 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v57 
                    let v59 : (Heap4 -> US26) = method91()
                    let v60 : US26 option = v58 |> Option.map v59 
                    let v71 : US26 = US26_1
                    let v72 : US26 = v60 |> Option.defaultValue v71 
                    let v76 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v72 v76 
                    let v78 : string = "_vec_map"
                    let v79 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v78 
                    let v80 : string = "fable_library_rust::NativeArray_::array_from($0)"
                    let v81 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v79 v80 
                    US37_0(v81)
            US36_0(v86)
    let v91 : string = $"%A{v27}"
    let v94 : int64 = 400L
    let v95 : string = method11(v94, v91)
    let v96 : string = $"%A{v90}"
    let v99 : int64 = 400L
    let v100 : string = method11(v99, v96)
    let v101 : string = "state_core.use_request (19) / result move / database: " + string v95 + " / database_loading: " + string v7 + " / state_data: " + string v100 + " / state_data_loading: " + string v11 + ""
    let v102 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = $"$0()"
    let v105 : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v3 v104 
    let v106 : string = "$0.to_vec()"
    let v107 : Vec<Result<crate_model_near_nearblocks_Root option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v109 : (Result<crate_model_near_nearblocks_Root option, std_string_String> -> Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>) = closure100(v0)
    let v110 : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v107, v109) v108 
    let v111 : string = $"%A{v110}"
    let v114 : string = "state_core.use_requests (20) / result func0 / result: " + string v111 + ""
    let v115 : int64 = 200L
    let v116 : string = method11(v115, v114)
    let v117 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v116 v117 
    v110
and method80 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> =
    let v2 : string = "state_core.use_requests (1)"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "state_core.use_database (1)"
    let v6 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> = method7()
    let v9 : string = "$0"
    let v10 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = closure74(v8)
    let v11 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "leptos::prelude::Memo::new(move |_| { v11(()) })"
    let v13 : leptos_prelude_Memo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>> = method81(v0, v8)
    let v15 : string = "$0"
    let v16 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = closure77(v14)
    let v17 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = Fable.Core.RustInterop.emitRustExpr v16 v15 
    let v18 : string = "leptos::prelude::Memo::new(move |_| { v17(()) })"
    let v19 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>> = method87(v0, v19)
    let v21 : string = "Box::pin($0)"
    let v22 : (Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>) = closure87(v0, v13)
    let v23 : std_pin_Pin<Box<(Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>)>> = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone())))"
    let v25 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "$0"
    let v27 : (unit -> (Result<crate_model_near_nearblocks_Root option, std_string_String> [])) = closure90(v0, v19, v20, v25)
    let v28 : (unit -> (Result<crate_model_near_nearblocks_Root option, std_string_String> [])) = Fable.Core.RustInterop.emitRustExpr v27 v26 
    let v29 : string = "leptos::prelude::Memo::new(move |_| { v28(()) })"
    let v30 : leptos_prelude_Memo<(Result<crate_model_near_nearblocks_Root option, std_string_String> [])> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "$0"
    let v32 : (unit -> Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>) = closure99(v1, v8, v14, v30)
    let v33 : (unit -> Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>) = Fable.Core.RustInterop.emitRustExpr v32 v31 
    let v34 : string = "leptos::prelude::Memo::new(move |_| { v33(()) })"
    let v35 : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v34 
    v35
and closure104 () (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) : US44 =
    US44_0(v0)
and method123 () : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option -> US44) =
    closure104()
and closure105 () (v0 : std_string_String) : US44 =
    US44_1(v0)
and method124 () : (std_string_String -> US44) =
    closure105()
and closure103 () (v0 : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>) : US44 =
    let v1 : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option -> US44) = method123()
    let v2 : (std_string_String -> US44) = method124()
    let v3 : US44 = match v0 with Ok x -> v1 x | Error x -> v2 x
    v3
and closure107 () (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) : US46 =
    US46_0(v0)
and method125 () : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) -> US46) =
    closure107()
and closure106 () (v0 : US44) : US45 =
    match v0 with
    | US44_1(v20) -> (* Error *)
        US45_1(v20)
    | US44_0(v1) -> (* Ok *)
        let v2 : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) -> US46) = method125()
        let v3 : US46 option = v1 |> Option.map v2 
        let v14 : US46 = US46_1
        let v15 : US46 = v3 |> Option.defaultValue v14 
        US45_0(v15)
and closure108 () (v0 : US45) : bool =
    match v0 with
    | US45_0(v1) -> (* Ok *)
        match v1 with
        | US46_1 -> (* None *)
            true
        | _ ->
            false
    | _ ->
        false
and method126 () : (US45 -> bool) =
    closure108()
and method127 (v0 : Vec<US45>) : Vec<US45> =
    v0
and closure111 () (v0 : (unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])))) : struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) =
    let (a, b) = v0 
    let v1 : unativeint = a
    let struct (v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : uint32, v9 : (struct (std_string_String * std_string_String option) []), v10 : float, v11 : bool, v12 : float, v13 : (std_string_String [])) = b
    struct (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
and closure112 (v0 : int32, v1 : string) struct (v2 : unativeint, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : std_string_String, v9 : uint32, v10 : (struct (std_string_String * std_string_String option) []), v11 : float, v12 : bool, v13 : float, v14 : (std_string_String [])) : struct (string * unativeint * Heap5) =
    let v15 : unativeint = v0 |> unativeint 
    let v18 : Heap5 = {l0 = v3; l1 = v4; l2 = v5; l3 = v6; l4 = v7; l5 = v8; l6 = v9; l7 = v10; l8 = v11; l9 = v12; l10 = v13; l11 = v14} : Heap5
    struct (v1, v15, v18)
and closure110 (v0 : (string []), v1 : int32) (v2 : US45) : US49 =
    let v3 : string = v0.[int v1]
    match v2 with
    | US45_1(v29) -> (* Error *)
        US49_1(v29)
    | US45_0(v4) -> (* Ok *)
        let v27 : US50 =
            match v4 with
            | US46_1 -> (* None *)
                US50_1
            | US46_0(v5) -> (* Some *)
                let v6 : string = "$0.to_vec()"
                let v7 : Vec<struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr v5 v6 
                let v8 : string = "v7.into_iter()"
                let v9 : _ = Fable.Core.RustInterop.emitRustExpr () v8 
                let v10 : string = "v9.enumerate().map(std::sync::Arc::new)"
                let v11 : _ = Fable.Core.RustInterop.emitRustExpr () v10 
                let v12 : string = "$0.collect::<Vec<_>>()"
                let v13 : Vec<(unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])))> = Fable.Core.RustInterop.emitRustExpr v11 v12 
                let v14 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v15 : ((unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) -> struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) = closure111()
                let v16 : Vec<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr struct (v13, v15) v14 
                let v17 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v18 : (struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = Fable.Core.RustInterop.emitRustExpr v16 v17 
                let v19 : string = "$0.to_vec()"
                let v20 : Vec<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr v18 v19 
                let v21 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v22 : (struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) -> struct (string * unativeint * Heap5)) = closure112(v1, v3)
                let v23 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr struct (v20, v22) v21 
                US50_0(v23)
        US49_0(v27)
and closure109 (v0 : (string [])) (v1 : int32) : (US45 -> US49) =
    closure110(v0, v1)
and method128 (v0 : (string [])) : (int32 -> (US45 -> US49)) =
    closure109(v0)
and method129 (v0 : Vec<US45>) : Vec<US45> =
    v0
and closure113 () (v0 : US49) : US51 =
    match v0 with
    | US49_1(v10) -> (* Error *)
        US51_1(v10)
    | US49_0(v1) -> (* Ok *)
        let v8 : Vec<struct (string * unativeint * Heap5)> option =
            match v1 with
            | US50_1 -> (* None *)
                let v6 : Vec<struct (string * unativeint * Heap5)> option = None
                v6
            | US50_0(v2) -> (* Some *)
                let v3 : Vec<struct (string * unativeint * Heap5)> option = Some v2 
                v3
        US51_0(v8)
and closure114 () (v0 : US51) : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> =
    match v0 with
    | US51_1(v3) -> (* Error *)
        let v4 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = Error v3 
        v4
    | US51_0(v1) -> (* Ok *)
        let v2 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = Ok v1 
        v2
and method130 (v0 : int32, v1 : Mut3) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure115 () (v0 : Vec<struct (string * unativeint * Heap5)> option) : US51 =
    US51_0(v0)
and method131 () : (Vec<struct (string * unativeint * Heap5)> option -> US51) =
    closure115()
and closure116 () (v0 : std_string_String) : US51 =
    US51_1(v0)
and method132 () : (std_string_String -> US51) =
    closure116()
and closure117 () (v0 : Vec<struct (string * unativeint * Heap5)>) : US50 =
    US50_0(v0)
and method133 () : (Vec<struct (string * unativeint * Heap5)> -> US50) =
    closure117()
and method134 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and method135 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and method136 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and closure118 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : std_string_String =
    let v3 : std_string_String = v2.l5
    v3
and method137 () : (struct (string * unativeint * Heap5) -> std_string_String) =
    closure118()
and method138 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and closure102 (v0 : leptos_prelude_Memo<(string [])>, v1 : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>>) () : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> =
    let v2 : string = $"$0()"
    let v3 : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v5 : (Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> -> US44) = closure103()
    let v6 : Vec<US44> = Fable.Core.RustInterop.emitRustExpr struct (v3, v5) v4 
    let v7 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v8 : (US44 -> US45) = closure106()
    let v9 : Vec<US45> = Fable.Core.RustInterop.emitRustExpr struct (v6, v8) v7 
    let v10 : string = $"%A{v9}"
    let v13 : int64 = 400L
    let v14 : string = method11(v13, v10)
    let v15 : string = "transactions.render (8) / txns move / root: " + string v14 + ""
    let v16 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : (US45 -> bool) = method126()
    let v19 : Vec<US45> = method127(v9)
    let v20 : string = "v19.into_iter().filter(|x| v18(x.clone().clone())).collect::<Vec<_>>()"
    let v21 : Vec<US45> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v23 : (US45 []) = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : int32 = v23.Length
    let v25 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v26 : (US45 []) = Fable.Core.RustInterop.emitRustExpr v9 v25 
    let v27 : int32 = v26.Length
    let v28 : bool = v24 = v27
    let v140 : US47 =
        if v28 then
            let v29 : US48 = US48_1
            US47_0(v29)
        else
            let v31 : string = $"$0()"
            let v32 : (string []) = Fable.Core.RustInterop.emitRustExpr v0 v31 
            let v33 : (int32 -> (US45 -> US49)) = method128(v32)
            let v34 : Vec<US45> = method129(v9)
            let v35 : string = "v34.iter().enumerate().map(|(i, x)| v33(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
            let v36 : Vec<US49> = Fable.Core.RustInterop.emitRustExpr () v35 
            let v37 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v38 : (US49 -> US51) = closure113()
            let v39 : Vec<US51> = Fable.Core.RustInterop.emitRustExpr struct (v36, v38) v37 
            let v40 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v41 : (US51 -> Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>) = closure114()
            let v42 : Vec<Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v39, v41) v40 
            let v43 : (struct (string * unativeint * Heap5) []) = [||]
            let v44 : string = "$0.to_vec()"
            let v45 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v43 v44 
            let v46 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v47 : (Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v42 v46 
            let v48 : int32 = v47.Length
            let v49 : US52 = US52_0(v45)
            let v50 : Mut3 = {l0 = 0; l1 = v49} : Mut3
            while method130(v48, v50) do
                let v52 : int32 = v50.l0
                let v53 : US52 = v50.l1
                let v54 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = v47.[int v52]
                let v55 : (Vec<struct (string * unativeint * Heap5)> option -> US51) = method131()
                let v56 : (std_string_String -> US51) = method132()
                let v57 : US51 = match v54 with Ok x -> v55 x | Error x -> v56 x
                let v80 : US49 =
                    match v57 with
                    | US51_1(v77) -> (* Error *)
                        US49_1(v77)
                    | US51_0(v58) -> (* Ok *)
                        let v59 : (Vec<struct (string * unativeint * Heap5)> -> US50) = method133()
                        let v60 : US50 option = v58 |> Option.map v59 
                        let v71 : US50 = US50_1
                        let v72 : US50 = v60 |> Option.defaultValue v71 
                        US49_0(v72)
                let v101 : US52 =
                    match v53 with
                    | US52_0(v81) -> (* Ok *)
                        match v80 with
                        | US49_1(v94) -> (* Error *)
                            US52_1(v94)
                        | US49_0(v82) -> (* Ok *)
                            match v82 with
                            | US50_0(v83) -> (* Some *)
                                let v84 : Vec<struct (string * unativeint * Heap5)> = method134(v83)
                                let v85 : Vec<struct (string * unativeint * Heap5)> = method135(v81)
                                let v86 : string = "true; let mut v85 = v85"
                                let v87 : bool = Fable.Core.RustInterop.emitRustExpr () v86 
                                let v88 : string = "true; v85.extend(v84)"
                                let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
                                let v90 : string = "v85"
                                let v91 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v90 
                                US52_0(v91)
                            | _ ->
                                v53
                    | _ ->
                        match v80 with
                        | US49_1(v98) -> (* Error *)
                            US52_1(v98)
                        | _ ->
                            v53
                let v102 : int32 = v52 + 1
                v50.l0 <- v102
                v50.l1 <- v101
                ()
            let v103 : US52 = v50.l1
            let v117 : US52 =
                match v103 with
                | US52_1(v114) -> (* Error *)
                    US52_1(v114)
                | US52_0(v104) -> (* Ok *)
                    let v105 : Vec<struct (string * unativeint * Heap5)> = method136(v104)
                    let v106 : (struct (string * unativeint * Heap5) -> std_string_String) = method137()
                    let v107 : string = "true; let mut v105 = v105"
                    let v108 : bool = Fable.Core.RustInterop.emitRustExpr () v107 
                    let v109 : string = "true; v105.sort_by_key(|x| v106(x.clone()))"
                    let v110 : bool = Fable.Core.RustInterop.emitRustExpr () v109 
                    let v111 : string = "v105"
                    let v112 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v111 
                    US52_0(v112)
            let v132 : US53 =
                match v117 with
                | US52_1(v129) -> (* Error *)
                    US53_1(v129)
                | US52_0(v118) -> (* Ok *)
                    let v119 : Vec<struct (string * unativeint * Heap5)> = method138(v118)
                    let v120 : string = "true; let mut v119 = v119"
                    let v121 : bool = Fable.Core.RustInterop.emitRustExpr () v120 
                    let v122 : string = "true; v119.reverse()"
                    let v123 : bool = Fable.Core.RustInterop.emitRustExpr () v122 
                    let v124 : string = "v119"
                    let v125 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v124 
                    let v126 : string = "fable_library_rust::NativeArray_::array_from($0)"
                    let v127 : (struct (string * unativeint * Heap5) []) = Fable.Core.RustInterop.emitRustExpr v125 v126 
                    US53_0(v127)
            match v132 with
            | US53_1(v136) -> (* Error *)
                US47_1(v136)
            | US53_0(v133) -> (* Ok *)
                let v134 : US48 = US48_0(v133)
                US47_0(v134)
    let v153 : US54 =
        match v140 with
        | US47_1(v150) -> (* Error *)
            US54_1(v150)
        | US47_0(v141) -> (* Ok *)
            let v148 : (struct (string * unativeint * Heap5) []) option =
                match v141 with
                | US48_1 -> (* None *)
                    let v146 : (struct (string * unativeint * Heap5) []) option = None
                    v146
                | US48_0(v142) -> (* Some *)
                    let v143 : (struct (string * unativeint * Heap5) []) option = Some v142 
                    v143
            US54_0(v148)
    let v159 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> =
        match v153 with
        | US54_1(v156) -> (* Error *)
            let v157 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Error v156 
            v157
        | US54_0(v154) -> (* Ok *)
            let v155 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Ok v154 
            v155
    let v160 : string = $"%A{v159}"
    let v163 : string = "use_transactions.render (9) / txns create_memo / result: " + string v160 + " / loading: " + string v28 + ""
    let v164 : int64 = 200L
    let v165 : string = method11(v164, v163)
    let v166 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v167 : bool = Fable.Core.RustInterop.emitRustExpr v165 v166 
    v159
and closure120 () (v0 : (struct (string * unativeint * Heap5) []) option) : US54 =
    US54_0(v0)
and method139 () : ((struct (string * unativeint * Heap5) []) option -> US54) =
    closure120()
and closure121 () (v0 : std_string_String) : US54 =
    US54_1(v0)
and method140 () : (std_string_String -> US54) =
    closure121()
and closure122 () (v0 : (struct (string * unativeint * Heap5) [])) : US48 =
    US48_0(v0)
and method141 () : ((struct (string * unativeint * Heap5) []) -> US48) =
    closure122()
and closure124 () (v0 : serde_json_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method142 () : (serde_json_Error -> std_string_String) =
    closure124()
and method143 () : (std_string_String -> string) =
    closure59()
and method144 (v0 : Result<std_string_String, std_string_String>) : Result<std_string_String, std_string_String> =
    v0
and closure125 () (v0 : string) : struct (string * US24 * string * bool * bool) =
    let v1 : string = "https://rpc.mainnet.near.org"
    let v2 : US24 = US24_1
    struct (v1, v2, v0, true, false)
and method145 () : (string -> struct (string * US24 * string * bool * bool)) =
    closure125()
and method146 (v0 : Result<string, std_string_String>) : Result<string, std_string_String> =
    v0
and closure123 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : Result<struct (string * US24 * string * bool * bool), std_string_String> =
    let v3 : string = "2.0"
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "dontcare"
    let v53 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v54 : string = "&*$0"
    let v55 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v52 v54 
    let _v53 = v55 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v56 : string = "&*$0"
    let v57 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v52 v56 
    let _v53 = v57 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v58 : string = "&*$0"
    let v59 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v52 v58 
    let _v53 = v59 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v60 : Ref<Str> = v52 |> unbox<Ref<Str>>
    let _v53 = v60 
    #endif
#if FABLE_COMPILER_PYTHON
    let v63 : Ref<Str> = v52 |> unbox<Ref<Str>>
    let _v53 = v63 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v52 |> unbox<Ref<Str>>
    let _v53 = v66 
    #endif
#else
    let v69 : Ref<Str> = v52 |> unbox<Ref<Str>>
    let _v53 = v69 
    #endif
    let v72 : Ref<Str> = _v53 
    let v77 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v78 : string = "String::from($0)"
    let v79 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v78 
    let _v77 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v80 : string = "String::from($0)"
    let v81 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v80 
    let _v77 = v81 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : string = "String::from($0)"
    let v83 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v82 
    let _v77 = v83 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v84 : std_string_String = v72 |> unbox<std_string_String>
    let _v77 = v84 
    #endif
#if FABLE_COMPILER_PYTHON
    let v87 : std_string_String = v72 |> unbox<std_string_String>
    let _v77 = v87 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v90 : std_string_String = v72 |> unbox<std_string_String>
    let _v77 = v90 
    #endif
#else
    let v93 : std_string_String = v72 |> unbox<std_string_String>
    let _v77 = v93 
    #endif
    let v96 : std_string_String = _v77 
    let v101 : string = "EXPERIMENTAL_tx_status"
    let v102 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = "&*$0"
    let v104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v101 v103 
    let _v102 = v104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = "&*$0"
    let v106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v101 v105 
    let _v102 = v106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = "&*$0"
    let v108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v101 v107 
    let _v102 = v108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v109 : Ref<Str> = v101 |> unbox<Ref<Str>>
    let _v102 = v109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v112 : Ref<Str> = v101 |> unbox<Ref<Str>>
    let _v102 = v112 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v115 : Ref<Str> = v101 |> unbox<Ref<Str>>
    let _v102 = v115 
    #endif
#else
    let v118 : Ref<Str> = v101 |> unbox<Ref<Str>>
    let _v102 = v118 
    #endif
    let v121 : Ref<Str> = _v102 
    let v126 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v127 : string = "String::from($0)"
    let v128 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v127 
    let _v126 = v128 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v129 : string = "String::from($0)"
    let v130 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v129 
    let _v126 = v130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v131 : string = "String::from($0)"
    let v132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v121 v131 
    let _v126 = v132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v133 : std_string_String = v121 |> unbox<std_string_String>
    let _v126 = v133 
    #endif
#if FABLE_COMPILER_PYTHON
    let v136 : std_string_String = v121 |> unbox<std_string_String>
    let _v126 = v136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v139 : std_string_String = v121 |> unbox<std_string_String>
    let _v126 = v139 
    #endif
#else
    let v142 : std_string_String = v121 |> unbox<std_string_String>
    let _v126 = v142 
    #endif
    let v145 : std_string_String = _v126 
    let v150 : std_string_String = v2.l3
    let v151 : string = "bowen"
    let v152 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v153 : string = "&*$0"
    let v154 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v153 
    let _v152 = v154 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v155 : string = "&*$0"
    let v156 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v155 
    let _v152 = v156 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v157 : string = "&*$0"
    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v151 v157 
    let _v152 = v158 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v159 : Ref<Str> = v151 |> unbox<Ref<Str>>
    let _v152 = v159 
    #endif
#if FABLE_COMPILER_PYTHON
    let v162 : Ref<Str> = v151 |> unbox<Ref<Str>>
    let _v152 = v162 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v165 : Ref<Str> = v151 |> unbox<Ref<Str>>
    let _v152 = v165 
    #endif
#else
    let v168 : Ref<Str> = v151 |> unbox<Ref<Str>>
    let _v152 = v168 
    #endif
    let v171 : Ref<Str> = _v152 
    let v176 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v177 : string = "String::from($0)"
    let v178 : std_string_String = Fable.Core.RustInterop.emitRustExpr v171 v177 
    let _v176 = v178 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v179 : string = "String::from($0)"
    let v180 : std_string_String = Fable.Core.RustInterop.emitRustExpr v171 v179 
    let _v176 = v180 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v181 : string = "String::from($0)"
    let v182 : std_string_String = Fable.Core.RustInterop.emitRustExpr v171 v181 
    let _v176 = v182 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v183 : std_string_String = v171 |> unbox<std_string_String>
    let _v176 = v183 
    #endif
#if FABLE_COMPILER_PYTHON
    let v186 : std_string_String = v171 |> unbox<std_string_String>
    let _v176 = v186 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v189 : std_string_String = v171 |> unbox<std_string_String>
    let _v176 = v189 
    #endif
#else
    let v192 : std_string_String = v171 |> unbox<std_string_String>
    let _v176 = v192 
    #endif
    let v195 : std_string_String = _v176 
    let v200 : (std_string_String []) = [|v150; v195|]
    let v201 : string = "$0.to_vec()"
    let v202 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v200 v201 
    let v203 : string = "crate::model::near::rpc::RpcInput { jsonrpc: $0, id: $1, method: $2, params: v202 }"
    let v204 : crate_model_near_rpc_RpcInput = Fable.Core.RustInterop.emitRustExpr struct (v47, v96, v145) v203 
    let v205 : string = "serde_json::to_string(&v204)"
    let v206 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v205 
    let v207 : (serde_json_Error -> std_string_String) = method142()
    let v208 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v209 : string = "$0.map_err(|x| $1(x))"
    let v210 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v206, v207) v209 
    let _v208 = v210 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v211 : string = "$0.map_err(|x| $1(x))"
    let v212 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v206, v207) v211 
    let _v208 = v212 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v213 : string = "$0.map_err(|x| $1(x))"
    let v214 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v206, v207) v213 
    let _v208 = v214 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v215 : Result<std_string_String, std_string_String> = match v206 with Ok x -> Ok x | Error x -> Error (v207 x)
    let _v208 = v215 
    #endif
#if FABLE_COMPILER_PYTHON
    let v216 : Result<std_string_String, std_string_String> = match v206 with Ok x -> Ok x | Error x -> Error (v207 x)
    let _v208 = v216 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v217 : Result<std_string_String, std_string_String> = match v206 with Ok x -> Ok x | Error x -> Error (v207 x)
    let _v208 = v217 
    #endif
#else
    let v218 : Result<std_string_String, std_string_String> = match v206 with Ok x -> Ok x | Error x -> Error (v207 x)
    let _v208 = v218 
    #endif
    let v219 : Result<std_string_String, std_string_String> = _v208 
    let v222 : (std_string_String -> string) = method143()
    let v223 : Result<std_string_String, std_string_String> = method144(v219)
    let v224 : string = "v223.map(|x| v222(x))"
    let v225 : Result<string, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v224 
    let v226 : (string -> struct (string * US24 * string * bool * bool)) = method145()
    let v227 : Result<string, std_string_String> = method146(v225)
    let v228 : string = "v227.map(|x| v226(x))"
    let v229 : Result<struct (string * US24 * string * bool * bool), std_string_String> = Fable.Core.RustInterop.emitRustExpr () v228 
    v229
and closure119 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> =
    let v1 : string = $"$0()"
    let v2 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : ((struct (string * unativeint * Heap5) []) option -> US54) = method139()
    let v4 : (std_string_String -> US54) = method140()
    let v5 : US54 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v28 : US47 =
        match v5 with
        | US54_1(v25) -> (* Error *)
            US47_1(v25)
        | US54_0(v6) -> (* Ok *)
            let v7 : ((struct (string * unativeint * Heap5) []) -> US48) = method141()
            let v8 : US48 option = v6 |> Option.map v7 
            let v19 : US48 = US48_1
            let v20 : US48 = v8 |> Option.defaultValue v19 
            US47_0(v20)
    let v50 : US55 =
        match v28 with
        | US47_1(v47) -> (* Error *)
            US55_1(v47)
        | US47_0(v29) -> (* Ok *)
            match v29 with
            | US48_0(v30) -> (* Some *)
                let v31 : string = "$0.to_vec()"
                let v32 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v30 v31 
                let v33 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v34 : (struct (string * unativeint * Heap5) -> Result<struct (string * US24 * string * bool * bool), std_string_String>) = closure123()
                let v35 : Vec<Result<struct (string * US24 * string * bool * bool), std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v32, v34) v33 
                let v36 : string = "v35.into_iter().collect()"
                let v37 : Result<Vec<struct (string * US24 * string * bool * bool)>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v36 
                let v38 : string = "$0?"
                let v39 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v37 v38 
                let v40 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v41 : (struct (string * US24 * string * bool * bool) []) = Fable.Core.RustInterop.emitRustExpr v39 v40 
                let v42 : US56 = US56_0(v41)
                US55_0(v42)
            | _ ->
                let v44 : US56 = US56_1
                US55_0(v44)
    let v63 : US57 =
        match v50 with
        | US55_1(v60) -> (* Error *)
            US57_1(v60)
        | US55_0(v51) -> (* Ok *)
            let v58 : (struct (string * US24 * string * bool * bool) []) option =
                match v51 with
                | US56_1 -> (* None *)
                    let v56 : (struct (string * US24 * string * bool * bool) []) option = None
                    v56
                | US56_0(v52) -> (* Some *)
                    let v53 : (struct (string * US24 * string * bool * bool) []) option = Some v52 
                    v53
            US57_0(v58)
    let v69 : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> =
        match v63 with
        | US57_1(v66) -> (* Error *)
            let v67 : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> = Error v66 
            v67
        | US57_0(v64) -> (* Ok *)
            let v65 : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> = Ok v64 
            v65
    let v70 : string = $"%A{v69}"
    let v73 : string = "use_transactions.render (10) / rpc_requests create_memo / result: " + string v70 + ""
    let v74 : int64 = 200L
    let v75 : string = method11(v74, v73)
    let v76 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    v69
and closure127 () (v0 : (struct (string * US24 * string * bool * bool) []) option) : US57 =
    US57_0(v0)
and method147 () : ((struct (string * US24 * string * bool * bool) []) option -> US57) =
    closure127()
and closure128 () (v0 : std_string_String) : US57 =
    US57_1(v0)
and method148 () : (std_string_String -> US57) =
    closure128()
and closure129 () (v0 : (struct (string * US24 * string * bool * bool) [])) : US56 =
    US56_0(v0)
and method149 () : ((struct (string * US24 * string * bool * bool) []) -> US56) =
    closure129()
and closure126 (v0 : leptos_prelude_Memo<Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>>) () : Vec<struct (string * US24 * string * bool * bool)> =
    let v1 : string = $"$0()"
    let v2 : Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : ((struct (string * US24 * string * bool * bool) []) option -> US57) = method147()
    let v4 : (std_string_String -> US57) = method148()
    let v5 : US57 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v28 : US55 =
        match v5 with
        | US57_1(v25) -> (* Error *)
            US55_1(v25)
        | US57_0(v6) -> (* Ok *)
            let v7 : ((struct (string * US24 * string * bool * bool) []) -> US56) = method149()
            let v8 : US56 option = v6 |> Option.map v7 
            let v19 : US56 = US56_1
            let v20 : US56 = v8 |> Option.defaultValue v19 
            US55_0(v20)
    let v34 : (struct (string * US24 * string * bool * bool) []) =
        match v28 with
        | US55_0(v29) -> (* Ok *)
            match v29 with
            | US56_0(v30) -> (* Some *)
                v30
            | _ ->
                [||]
        | _ ->
            [||]
    let v35 : string = "$0.to_vec()"
    let v36 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = $"%A{v36}"
    let v40 : string = "use_transactions.render (11) / rpc_requests' create_memo / result: " + string v37 + ""
    let v41 : int64 = 200L
    let v42 : string = method11(v41, v40)
    let v43 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v36
and closure134 () (v0 : crate_model_near_rpc_TransferDetail) : struct (std_string_String * std_string_String option * float option * std_string_String option) =
    let v1 : string = "$0.deposit"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.args"
    let v4 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.gas"
    let v6 : float option = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "$0.method_name"
    let v8 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v7 
    struct (v2, v4, v6, v8)
and closure133 () (v0 : std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>) : std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> =
    let v1 : string = "$0.into_iter().map(|(k, v)| (k, $1(v))).collect()"
    let v2 : (crate_model_near_rpc_TransferDetail -> struct (std_string_String * std_string_String option * float option * std_string_String option)) = closure134()
    let v3 : std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr struct (v0, v2) v1 
    v3
and closure132 () (v0 : crate_model_near_rpc_Receipt) : struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) =
    let v1 : string = "$0.predecessor_id"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.receipt"
    let v4 : crate_model_near_rpc_ReceiptDetail = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.action"
    let v6 : crate_model_near_rpc_ActionDetail = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.actions"
    let v8 : Vec<std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v10 : (std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail> -> std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>) = closure133()
    let v11 : Vec<std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>> = Fable.Core.RustInterop.emitRustExpr struct (v8, v10) v9 
    let v12 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v13 : (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.gas_price"
    let v15 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v14 
    let v16 : string = "$0.input_data_ids"
    let v17 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v16 
    let v18 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v19 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "$0.output_data_receivers"
    let v21 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v20 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v23 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = "$0.signer_id"
    let v25 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v24 
    let v26 : string = "$0.signer_public_key"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v26 
    let v28 : string = "$0.receipt_id"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v28 
    let v30 : string = "$0.receiver_id"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v30 
    struct (v2, v13, v15, v19, v23, v25, v27, v29, v31)
and closure136 () (v0 : crate_model_near_rpc_GasProfile) : struct (std_string_String * std_string_String * std_string_String) =
    let v1 : string = "$0.cost"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.cost_category"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.gas_used"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v5 
    struct (v2, v4, v6)
and closure138 () (v0 : crate_model_near_rpc_Proof) : struct (std_string_String * std_string_String) =
    let v1 : string = "$0.direction"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.hash"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v3 
    struct (v2, v4)
and closure137 () (v0 : Vec<crate_model_near_rpc_Proof>) : (struct (std_string_String * std_string_String) []) =
    let v1 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v2 : (crate_model_near_rpc_Proof -> struct (std_string_String * std_string_String)) = closure138()
    let v3 : Vec<struct (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v0, v2) v1 
    let v4 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v5 : (struct (std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method151 () : (Vec<crate_model_near_rpc_Proof> -> (struct (std_string_String * std_string_String) [])) =
    closure137()
and closure135 () (v0 : crate_model_near_rpc_ReceiptsOutcome) : struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) =
    let v1 : string = "$0.block_hash"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.id"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.outcome"
    let v6 : crate_model_near_rpc_OutcomeDetail = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "$0.executor_id"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = "$0.gas_burnt"
    let v10 : uint64 = Fable.Core.RustInterop.emitRustExpr v6 v9 
    let v11 : string = "$0.logs"
    let v12 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let v13 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v14 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "$0.metadata"
    let v16 : crate_model_near_rpc_Metadata = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let v17 : string = "$0.gas_profile"
    let v18 : Vec<crate_model_near_rpc_GasProfile> = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v20 : (crate_model_near_rpc_GasProfile -> struct (std_string_String * std_string_String * std_string_String)) = closure136()
    let v21 : Vec<struct (std_string_String * std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v19 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v23 : (struct (std_string_String * std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = "$0.version"
    let v25 : uint8 = Fable.Core.RustInterop.emitRustExpr v16 v24 
    let v26 : string = "$0.receipt_ids"
    let v27 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v26 
    let v28 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v29 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v30 : string = "$0.status"
    let v31 : std_collections_HashMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr v6 v30 
    let v32 : string = "$0.tokens_burnt"
    let v33 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v6 v32 
    let v34 : string = "$0.proof"
    let v35 : Vec<crate_model_near_rpc_Proof> option = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : (Vec<crate_model_near_rpc_Proof> -> (struct (std_string_String * std_string_String) [])) = method151()
    let v37 : (struct (std_string_String * std_string_String) []) option = v35 |> Option.map v36 
    let v52 : (struct (std_string_String * std_string_String) []) = [||]
    let v53 : (struct (std_string_String * std_string_String) []) = v37 |> Option.defaultValue v52 
    struct (v2, v4, v8, v10, v14, v23, v25, v29, v31, v33, v53)
and closure131 () (v0 : crate_model_near_rpc_TransactionStatus) : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) =
    let v1 : string = "$0.receipts"
    let v2 : Vec<crate_model_near_rpc_Receipt> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (crate_model_near_rpc_Receipt -> struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)) = closure132()
    let v5 : Vec<struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v7 : (struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.receipts_outcome"
    let v9 : Vec<crate_model_near_rpc_ReceiptsOutcome> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v11 : (crate_model_near_rpc_ReceiptsOutcome -> struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))) = closure135()
    let v12 : Vec<struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))> = Fable.Core.RustInterop.emitRustExpr struct (v9, v11) v10 
    let v13 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v14 : (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []) = Fable.Core.RustInterop.emitRustExpr v12 v13 
    struct (v7, v14)
and method150 () : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) =
    closure131()
and closure140 () (v0 : crate_model_near_rpc_ErrorCauseInfo) : struct (std_string_String option * std_string_String option) =
    let v1 : string = "$0.error_message"
    let v2 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.requested_transaction_hash"
    let v4 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    struct (v2, v4)
and method153 () : (crate_model_near_rpc_ErrorCauseInfo -> struct (std_string_String option * std_string_String option)) =
    closure140()
and closure139 () (v0 : crate_model_near_rpc_RpcError) : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) =
    let v1 : string = "$0.name"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.cause"
    let v4 : crate_model_near_rpc_ErrorCause = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.name"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.info"
    let v8 : crate_model_near_rpc_ErrorCauseInfo option = Fable.Core.RustInterop.emitRustExpr v4 v7 
    let v9 : (crate_model_near_rpc_ErrorCauseInfo -> struct (std_string_String option * std_string_String option)) = method153()
    let v10 : struct (std_string_String option * std_string_String option) option = v8 |> Option.map v9 
    let v24 : string = "$0.code"
    let v25 : int32 = Fable.Core.RustInterop.emitRustExpr v0 v24 
    let v26 : string = "$0.message"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v26 
    let v28 : string = "$0.data"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v28 
    struct (v2, v6, v10, v25, v27, v29)
and method152 () : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) =
    closure139()
and closure130 () (v0 : crate_model_near_rpc_RpcResponse) : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) =
    let v1 : string = "$0.jsonrpc"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.result"
    let v4 : crate_model_near_rpc_TransactionStatus option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) = method150()
    let v6 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option = v4 |> Option.map v5 
    let v30 : string = "$0.error"
    let v31 : crate_model_near_rpc_RpcError option = Fable.Core.RustInterop.emitRustExpr v0 v30 
    let v32 : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) = method152()
    let v33 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option = v31 |> Option.map v32 
    let v72 : string = "$0.id"
    let v73 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v72 
    struct (v2, v6, v33, v73)
and closure144 () (v0 : crate_model_near_rpc_RpcResponse) : crate_model_near_rpc_RpcResponse option =
    let v1 : crate_model_near_rpc_RpcResponse option = Some v0 
    v1
and method156 () : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) =
    closure144()
and method157 (v0 : Result<crate_model_near_rpc_RpcResponse, std_string_String>) : Result<crate_model_near_rpc_RpcResponse, std_string_String> =
    v0
and closure143 (v0 : US36, v1 : US42, v2 : int32) struct (v3 : string, v4 : US24, v5 : string, v6 : bool, v7 : bool) : Result<crate_model_near_rpc_RpcResponse option, std_string_String> =
    let v51 : US30 =
        match v0 with
        | US36_1 -> (* None *)
            US30_1
        | US36_0(v8) -> (* Some *)
            let v47 : US31 =
                match v8 with
                | US37_1(v44) -> (* Error *)
                    US31_1(v44)
                | US37_0(v9) -> (* Ok *)
                    let v10 : US26 option = v9 |> Array.tryItem v2 
                    let v11 : (US26 -> US33) = method93()
                    let v12 : US33 option = v10 |> Option.map v11 
                    let v23 : US33 = US33_1
                    let v24 : US33 = v12 |> Option.defaultValue v23 
                    let v34 : US26 =
                        match v24 with
                        | US33_0(v28) -> (* Some *)
                            match v28 with
                            | US26_0(v29) -> (* Some *)
                                US26_0(v29)
                            | _ ->
                                US26_1
                        | _ ->
                            US26_1
                    let v42 : US32 =
                        match v34 with
                        | US26_1 -> (* None *)
                            US32_1
                        | US26_0(v35) -> (* Some *)
                            let v36 : std_string_String = v35.l0
                            let v37 : string = "fable_library_rust::String_::fromString($0)"
                            let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
                            US32_0(v38)
                    US31_0(v42)
            US30_0(v47)
    let v52 : string = $"%A{struct (v3, v4, v5, v6, v7)}"
    let v55 : int64 = 400L
    let v56 : string = method11(v55, v52)
    let v57 : string = $"%A{v51}"
    let v60 : int64 = 400L
    let v61 : string = method11(v60, v57)
    let v62 : string = "state_core.use_request (15) / result memo / request: " + string v56 + " / state_data: " + string v61 + ""
    let v63 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = $"%A{v1}"
    let v68 : int64 = 400L
    let v69 : string = method11(v68, v65)
    let v70 : string = "state_core.use_request (16) / effect / json: " + string v69 + ""
    let v71 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v104 : US32 =
        match v1 with
        | US42_1(v101) -> (* Error *)
            US32_1
        | US42_0(v73) -> (* Ok *)
            let v74 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v75 : (US32 []) = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : US32 option = v75 |> Array.tryItem v2 
            let v77 : (US32 -> US43) = method117()
            let v78 : US43 option = v76 |> Option.map v77 
            let v89 : US43 = US43_1
            let v90 : US43 = v78 |> Option.defaultValue v89 
            match v90 with
            | US43_0(v94) -> (* Some *)
                match v94 with
                | US32_0(v95) -> (* Some *)
                    US32_0(v95)
                | _ ->
                    US32_1
            | _ ->
                US32_1
    match v104 with
    | US32_0(v105) -> (* Some *)
        let v106 : string = method49(v105)
        let v107 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v108 : string = "&*$0"
        let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v108 
        let _v107 = v109 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "&*$0"
        let v111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v110 
        let _v107 = v111 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v112 : string = "&*$0"
        let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v112 
        let _v107 = v113 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v120 
        #endif
#else
        let v123 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _v107 = v123 
        #endif
        let v126 : Ref<Str> = _v107 
        let v131 : string = "serde_json::from_str(&$0)"
        let v132 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v126 v131 
        let v133 : (serde_json_Error -> std_string_String) = method50()
        let v134 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "$0.map_err(|x| $1(x))"
        let v136 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v135 
        let _v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "$0.map_err(|x| $1(x))"
        let v138 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v137 
        let _v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "$0.map_err(|x| $1(x))"
        let v140 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v139 
        let _v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v143 
        #endif
#else
        let v144 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _v134 = v144 
        #endif
        let v145 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _v134 
        let v148 : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) = method156()
        let v149 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = method157(v145)
        let v150 : string = "v149.map(|x| v148(x))"
        let v151 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v150 
        v151
    | _ ->
        match v51 with
        | US30_0(v152) -> (* Some *)
            match v152 with
            | US31_0(v153) -> (* Ok *)
                match v153 with
                | US32_0(v154) -> (* Some *)
                    let v155 : string = method49(v154)
                    let v156 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
                    let _v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
                    let _v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
                    let _v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v163 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v166 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v169 
                    #endif
#else
                    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _v156 = v172 
                    #endif
                    let v175 : Ref<Str> = _v156 
                    let v180 : string = "serde_json::from_str(&$0)"
                    let v181 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v175 v180 
                    let v182 : (serde_json_Error -> std_string_String) = method50()
                    let v183 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "$0.map_err(|x| $1(x))"
                    let v185 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v184 
                    let _v183 = v185 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v186 : string = "$0.map_err(|x| $1(x))"
                    let v187 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v186 
                    let _v183 = v187 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v188 : string = "$0.map_err(|x| $1(x))"
                    let v189 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v188 
                    let _v183 = v189 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v191 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v191 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v192 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v192 
                    #endif
#else
                    let v193 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _v183 = v193 
                    #endif
                    let v194 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _v183 
                    let v197 : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) = method156()
                    let v198 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = method157(v194)
                    let v199 : string = "v198.map(|x| v197(x))"
                    let v200 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v199 
                    v200
                | _ ->
                    let v201 : string = $"%A{struct (v104, v51)}"
                    let v204 : string = "state_core.use_request (17) / json Error / value: " + string v201 + ""
                    let v205 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                    let v206 : bool = Fable.Core.RustInterop.emitRustExpr v204 v205 
                    let v207 : crate_model_near_rpc_RpcResponse option = None
                    let v208 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v207 
                    v208
            | _ ->
                let v210 : string = $"%A{struct (v104, v51)}"
                let v213 : string = "state_core.use_request (17) / json Error / value: " + string v210 + ""
                let v214 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v215 : bool = Fable.Core.RustInterop.emitRustExpr v213 v214 
                let v216 : crate_model_near_rpc_RpcResponse option = None
                let v217 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v216 
                v217
        | _ ->
            let v219 : string = $"%A{struct (v104, v51)}"
            let v222 : string = "state_core.use_request (17) / json Error / value: " + string v219 + ""
            let v223 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v224 : bool = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : crate_model_near_rpc_RpcResponse option = None
            let v226 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v225 
            v226
and closure142 (v0 : US36, v1 : US42) (v2 : int32) : (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>) =
    closure143(v0, v1, v2)
and method155 (v0 : US36, v1 : US42) : (int32 -> (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>)) =
    closure142(v0, v1)
and closure141 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option>, v2 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>>, v3 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>>) () : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) =
    let v4 : string = $"$0()"
    let v5 : Vec<struct (string * US24 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = $"%A{v5}"
    let v9 : string = "state_core.use_requests (13) / result memo / requests: " + string v6 + ""
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"$0()"
    let v13 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method88()
    let v15 : US27 option = v13 |> Option.map v14 
    let v26 : US27 = US27_1
    let v27 : US27 = v15 |> Option.defaultValue v26 
    let v71 : US36 =
        match v27 with
        | US27_1 -> (* None *)
            US36_1
        | US27_0(v31) -> (* Some *)
            let v32 : (Vec<Heap4 option> -> US25) = method89()
            let v33 : (std_string_String -> US25) = method90()
            let v34 : US25 = match v31 with Ok x -> v32 x | Error x -> v33 x
            let v67 : US37 =
                match v34 with
                | US25_1(v64) -> (* Error *)
                    US37_1(v64)
                | US25_0(v35) -> (* Ok *)
                    let v36 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
                    let v38 : string = "x"
                    let v39 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v38 
                    let v40 : (Heap4 -> US26) = method91()
                    let v41 : US26 option = v39 |> Option.map v40 
                    let v52 : US26 = US26_1
                    let v53 : US26 = v41 |> Option.defaultValue v52 
                    let v57 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v58 : bool = Fable.Core.RustInterop.emitRustExpr v53 v57 
                    let v59 : string = "_vec_map"
                    let v60 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v59 
                    let v61 : string = "fable_library_rust::NativeArray_::array_from($0)"
                    let v62 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v60 v61 
                    US37_0(v62)
            US36_0(v67)
    let v72 : string = $"%A{v71}"
    let v75 : int64 = 400L
    let v76 : string = method11(v75, v72)
    let v77 : string = "state_core.use_request (14) / result_memo / state_data: " + string v76 + ""
    let v78 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v81 : Result<Vec<string option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v80 
    let v82 : (Result<Vec<string option>, std_string_String> -> US38) = method112()
    let v83 : US38 option = v81 |> Option.map v82 
    let v94 : US38 = US38_1
    let v95 : US38 = v83 |> Option.defaultValue v94 
    let v106 : US39 =
        match v95 with
        | US38_1 -> (* None *)
            US39_1
        | US38_0(v99) -> (* Some *)
            let v100 : (Vec<string option> -> US40) = method113()
            let v101 : (std_string_String -> US40) = method114()
            let v102 : US40 = match v99 with Ok x -> v100 x | Error x -> v101 x
            US39_0(v102)
    let v142 : US41 =
        match v106 with
        | US39_1 -> (* None *)
            US41_1
        | US39_0(v107) -> (* Some *)
            let v138 : US42 =
                match v107 with
                | US40_1(v135) -> (* Error *)
                    US42_1(v135)
                | US40_0(v108) -> (* Ok *)
                    let v109 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v110 : bool = Fable.Core.RustInterop.emitRustExpr v108 v109 
                    let v111 : string = "x"
                    let v112 : string option = Fable.Core.RustInterop.emitRustExpr () v111 
                    let v113 : (string -> US32) = method115()
                    let v114 : US32 option = v112 |> Option.map v113 
                    let v125 : US32 = US32_1
                    let v126 : US32 = v114 |> Option.defaultValue v125 
                    let v130 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v126 v130 
                    let v132 : string = "_vec_map"
                    let v133 : Vec<US32> = Fable.Core.RustInterop.emitRustExpr () v132 
                    US42_0(v133)
            US41_0(v138)
    let v143 : (US32 []) = [||]
    let v144 : string = "$0.to_vec()"
    let v145 : Vec<US32> = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v149 : US42 =
        match v142 with
        | US41_1 -> (* None *)
            US42_0(v145)
        | US41_0(v146) -> (* Some *)
            v146
    match v149 with
    | US42_1(v211) -> (* Error *)
        ()
    | US42_0(v150) -> (* Ok *)
        let v151 : string = "true; $0.into_iter().for_each(|x| { //"
        let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
        let v153 : string = "x"
        let v154 : US32 = Fable.Core.RustInterop.emitRustExpr () v153 
        match v154 with
        | US32_0(v155) -> (* Some *)
            let v156 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v157 : string = "&*$0"
            let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
            let _v156 = v158 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v159 : string = "&*$0"
            let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
            let _v156 = v160 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v161 : string = "&*$0"
            let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
            let _v156 = v162 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v163 
            #endif
#if FABLE_COMPILER_PYTHON
            let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v166 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v169 
            #endif
#else
            let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
            let _v156 = v172 
            #endif
            let v175 : Ref<Str> = _v156 
            let v180 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v181 : string = "String::from($0)"
            let v182 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v181 
            let _v180 = v182 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v183 : string = "String::from($0)"
            let v184 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v183 
            let _v180 = v184 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v185 : string = "String::from($0)"
            let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v185 
            let _v180 = v186 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v187 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v187 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v193 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v193 
            #endif
#else
            let v196 : std_string_String = v175 |> unbox<std_string_String>
            let _v180 = v196 
            #endif
            let v199 : std_string_String = _v180 
            let v204 : Heap4 = {l0 = v199} : Heap4
            let v205 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
            let v206 : bool = Fable.Core.RustInterop.emitRustExpr struct (v3, v204) v205 
            ()
        | _ ->
            ()
        let v207 : string = $"true"
        let v208 : bool = Fable.Core.RustInterop.emitRustExpr () v207 
        let v209 : string = "true; }}); { //"
        let v210 : bool = Fable.Core.RustInterop.emitRustExpr () v209 
        ()
    let v212 : (int32 -> (struct (string * US24 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>)) = method155(v71, v149)
    let v213 : Vec<struct (string * US24 * string * bool * bool)> = method103(v5)
    let v214 : string = "v213.iter().enumerate().map(|(i, x)| v212(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v215 : Vec<Result<crate_model_near_rpc_RpcResponse option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v214 
    let v216 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v217 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v215 v216 
    let v218 : string = $"%A{v217}"
    let v221 : string = "state_core.use_requests (18) / result_func func0 / result: " + string v218 + ""
    let v222 : int64 = 200L
    let v223 : string = method11(v222, v221)
    let v224 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v225 : bool = Fable.Core.RustInterop.emitRustExpr v223 v224 
    v217
and method159 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) =
    v0
and closure147 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) (v1 : crate_model_near_rpc_RpcResponse option) : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option =
    let v2 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = method159(v0)
    let v3 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = v1 |> Option.map v2 
    v3
and method158 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : (crate_model_near_rpc_RpcResponse option -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) =
    closure147(v0)
and method160 (v0 : Result<crate_model_near_rpc_RpcResponse option, std_string_String>) : Result<crate_model_near_rpc_RpcResponse option, std_string_String> =
    v0
and closure146 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) (v1 : Result<crate_model_near_rpc_RpcResponse option, std_string_String>) : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
    let v2 : (crate_model_near_rpc_RpcResponse option -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) = method158(v0)
    let v3 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = method160(v1)
    let v4 : string = "v3.map(|x| v2(x))"
    let v5 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4 
    v5
and closure145 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)), v1 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>>, v2 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>>, v3 : leptos_prelude_Memo<(Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])>) () : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> =
    let v4 : string = $"leptos::prelude::loading(&$0)"
    let v5 : leptos_prelude_Signal<bool> = Fable.Core.RustInterop.emitRustExpr v1 v4 
    let v6 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"leptos::prelude::loading(&$0)"
    let v9 : leptos_prelude_Signal<bool> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v13 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (std_sync_Arc<rexie_Rexie> -> US4) = method15()
    let v15 : US4 option = v13 |> Option.map v14 
    let v26 : US4 = US4_1
    let v27 : US4 = v15 |> Option.defaultValue v26 
    let v31 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v32 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v31 
    let v33 : (Result<Vec<Heap4 option>, std_string_String> -> US27) = method88()
    let v34 : US27 option = v32 |> Option.map v33 
    let v45 : US27 = US27_1
    let v46 : US27 = v34 |> Option.defaultValue v45 
    let v90 : US36 =
        match v46 with
        | US27_1 -> (* None *)
            US36_1
        | US27_0(v50) -> (* Some *)
            let v51 : (Vec<Heap4 option> -> US25) = method89()
            let v52 : (std_string_String -> US25) = method90()
            let v53 : US25 = match v50 with Ok x -> v51 x | Error x -> v52 x
            let v86 : US37 =
                match v53 with
                | US25_1(v83) -> (* Error *)
                    US37_1(v83)
                | US25_0(v54) -> (* Ok *)
                    let v55 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
                    let v57 : string = "x"
                    let v58 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v57 
                    let v59 : (Heap4 -> US26) = method91()
                    let v60 : US26 option = v58 |> Option.map v59 
                    let v71 : US26 = US26_1
                    let v72 : US26 = v60 |> Option.defaultValue v71 
                    let v76 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v72 v76 
                    let v78 : string = "_vec_map"
                    let v79 : Vec<US26> = Fable.Core.RustInterop.emitRustExpr () v78 
                    let v80 : string = "fable_library_rust::NativeArray_::array_from($0)"
                    let v81 : (US26 []) = Fable.Core.RustInterop.emitRustExpr v79 v80 
                    US37_0(v81)
            US36_0(v86)
    let v91 : string = $"%A{v27}"
    let v94 : int64 = 400L
    let v95 : string = method11(v94, v91)
    let v96 : string = $"%A{v90}"
    let v99 : int64 = 400L
    let v100 : string = method11(v99, v96)
    let v101 : string = "state_core.use_request (19) / result move / database: " + string v95 + " / database_loading: " + string v7 + " / state_data: " + string v100 + " / state_data_loading: " + string v11 + ""
    let v102 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = $"$0()"
    let v105 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v3 v104 
    let v106 : string = "$0.to_vec()"
    let v107 : Vec<Result<crate_model_near_rpc_RpcResponse option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v109 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> -> Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) = closure146(v0)
    let v110 : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v107, v109) v108 
    let v111 : string = $"%A{v110}"
    let v114 : string = "state_core.use_requests (20) / result func0 / result: " + string v111 + ""
    let v115 : int64 = 200L
    let v116 : string = method11(v115, v114)
    let v117 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v116 v117 
    v110
and method154 (v0 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>>, v1 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> =
    let v2 : string = "state_core.use_requests (1)"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "state_core.use_database (1)"
    let v6 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> = method7()
    let v9 : string = "$0"
    let v10 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = closure74(v8)
    let v11 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "leptos::prelude::Memo::new(move |_| { v11(()) })"
    let v13 : leptos_prelude_Memo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : leptos_prelude_Resource<struct (PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option * Vec<struct (string * US24 * string * bool * bool)>), Result<Vec<Heap4 option>, std_string_String>> = method81(v0, v8)
    let v15 : string = "$0"
    let v16 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = closure77(v14)
    let v17 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = Fable.Core.RustInterop.emitRustExpr v16 v15 
    let v18 : string = "leptos::prelude::Memo::new(move |_| { v17(()) })"
    let v19 : leptos_prelude_Memo<Result<Vec<Heap4 option>, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_Resource<struct (Vec<struct (string * US24 * string * bool * bool)> * Result<Vec<Heap4 option>, std_string_String> option), Result<Vec<string option>, std_string_String>> = method87(v0, v19)
    let v21 : string = "Box::pin($0)"
    let v22 : (Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>) = closure87(v0, v13)
    let v23 : std_pin_Pin<Box<(Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>)>> = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone())))"
    let v25 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "$0"
    let v27 : (unit -> (Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])) = closure141(v0, v19, v20, v25)
    let v28 : (unit -> (Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])) = Fable.Core.RustInterop.emitRustExpr v27 v26 
    let v29 : string = "leptos::prelude::Memo::new(move |_| { v28(()) })"
    let v30 : leptos_prelude_Memo<(Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "$0"
    let v32 : (unit -> Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) = closure145(v1, v8, v14, v30)
    let v33 : (unit -> Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) = Fable.Core.RustInterop.emitRustExpr v32 v31 
    let v34 : string = "leptos::prelude::Memo::new(move |_| { v33(()) })"
    let v35 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v34 
    v35
and method161 () : string =
    let v0 : string = "https://rpc.mainnet.near.org"
    v0
and closure149 () (v0 : US15) : US59 =
    US59_0(v0)
and method162 () : (US15 -> US59) =
    closure149()
and closure150 () (v0 : std_string_String) : US59 =
    US59_1(v0)
and method163 () : (std_string_String -> US59) =
    closure150()
and closure151 () (v0 : crate_model_near_rpc_RpcResponse) : US61 =
    US61_0(v0)
and method164 () : (crate_model_near_rpc_RpcResponse -> US61) =
    closure151()
and closure152 () (v0 : std_string_String) : US61 =
    US61_1(v0)
and method165 () : (std_string_String -> US61) =
    closure152()
and method166 (v0 : Result<US58, std_string_String>) : Result<US58, std_string_String> =
    v0
and closure148 () (v0 : Heap6) : std_pin_Pin<Box<Dyn<std_future_Future<Result<US58, std_string_String>>>>> =
    let v1 : string = $"%A{v0}"
    let v4 : string = "dice_view.render (2) / set_max_action / value: " + string v1 + ""
    let v5 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "true; let __future_init = Box::pin(async move { //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "2.0"
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v35 
    let _v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "String::from($0)"
    let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v37 
    let _v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v39 
    let _v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v47 
    #endif
#else
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v50 
    #endif
    let v53 : std_string_String = _v34 
    let v58 : string = "dontcare"
    let v59 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v60 : string = "&*$0"
    let v61 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v58 v60 
    let _v59 = v61 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v58 v62 
    let _v59 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v58 v64 
    let _v59 = v65 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v66 : Ref<Str> = v58 |> unbox<Ref<Str>>
    let _v59 = v66 
    #endif
#if FABLE_COMPILER_PYTHON
    let v69 : Ref<Str> = v58 |> unbox<Ref<Str>>
    let _v59 = v69 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v72 : Ref<Str> = v58 |> unbox<Ref<Str>>
    let _v59 = v72 
    #endif
#else
    let v75 : Ref<Str> = v58 |> unbox<Ref<Str>>
    let _v59 = v75 
    #endif
    let v78 : Ref<Str> = _v59 
    let v83 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "String::from($0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v84 
    let _v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "String::from($0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v86 
    let _v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "String::from($0)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v88 
    let _v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : std_string_String = v78 |> unbox<std_string_String>
    let _v83 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v93 : std_string_String = v78 |> unbox<std_string_String>
    let _v83 = v93 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v96 : std_string_String = v78 |> unbox<std_string_String>
    let _v83 = v96 
    #endif
#else
    let v99 : std_string_String = v78 |> unbox<std_string_String>
    let _v83 = v99 
    #endif
    let v102 : std_string_String = _v83 
    let v107 : string = "EXPERIMENTAL_tx_status"
    let v108 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v109 : string = "&*$0"
    let v110 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v107 v109 
    let _v108 = v110 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : string = "&*$0"
    let v112 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v107 v111 
    let _v108 = v112 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v113 : string = "&*$0"
    let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v107 v113 
    let _v108 = v114 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v115 : Ref<Str> = v107 |> unbox<Ref<Str>>
    let _v108 = v115 
    #endif
#if FABLE_COMPILER_PYTHON
    let v118 : Ref<Str> = v107 |> unbox<Ref<Str>>
    let _v108 = v118 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v121 : Ref<Str> = v107 |> unbox<Ref<Str>>
    let _v108 = v121 
    #endif
#else
    let v124 : Ref<Str> = v107 |> unbox<Ref<Str>>
    let _v108 = v124 
    #endif
    let v127 : Ref<Str> = _v108 
    let v132 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "String::from($0)"
    let v134 : std_string_String = Fable.Core.RustInterop.emitRustExpr v127 v133 
    let _v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : string = "String::from($0)"
    let v136 : std_string_String = Fable.Core.RustInterop.emitRustExpr v127 v135 
    let _v132 = v136 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string = "String::from($0)"
    let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v127 v137 
    let _v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v139 : std_string_String = v127 |> unbox<std_string_String>
    let _v132 = v139 
    #endif
#if FABLE_COMPILER_PYTHON
    let v142 : std_string_String = v127 |> unbox<std_string_String>
    let _v132 = v142 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v145 : std_string_String = v127 |> unbox<std_string_String>
    let _v132 = v145 
    #endif
#else
    let v148 : std_string_String = v127 |> unbox<std_string_String>
    let _v132 = v148 
    #endif
    let v151 : std_string_String = _v132 
    let v156 : string = "9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS"
    let v157 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v158 : string = "&*$0"
    let v159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v156 v158 
    let _v157 = v159 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v160 : string = "&*$0"
    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v156 v160 
    let _v157 = v161 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v162 : string = "&*$0"
    let v163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v156 v162 
    let _v157 = v163 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v164 : Ref<Str> = v156 |> unbox<Ref<Str>>
    let _v157 = v164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v167 : Ref<Str> = v156 |> unbox<Ref<Str>>
    let _v157 = v167 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v170 : Ref<Str> = v156 |> unbox<Ref<Str>>
    let _v157 = v170 
    #endif
#else
    let v173 : Ref<Str> = v156 |> unbox<Ref<Str>>
    let _v157 = v173 
    #endif
    let v176 : Ref<Str> = _v157 
    let v181 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v182 : string = "String::from($0)"
    let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v176 v182 
    let _v181 = v183 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v184 : string = "String::from($0)"
    let v185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v176 v184 
    let _v181 = v185 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v186 : string = "String::from($0)"
    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v176 v186 
    let _v181 = v187 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v188 : std_string_String = v176 |> unbox<std_string_String>
    let _v181 = v188 
    #endif
#if FABLE_COMPILER_PYTHON
    let v191 : std_string_String = v176 |> unbox<std_string_String>
    let _v181 = v191 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v194 : std_string_String = v176 |> unbox<std_string_String>
    let _v181 = v194 
    #endif
#else
    let v197 : std_string_String = v176 |> unbox<std_string_String>
    let _v181 = v197 
    #endif
    let v200 : std_string_String = _v181 
    let v205 : string = "bowen"
    let v206 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v207 : string = "&*$0"
    let v208 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v207 
    let _v206 = v208 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v209 : string = "&*$0"
    let v210 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v209 
    let _v206 = v210 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v211 : string = "&*$0"
    let v212 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v211 
    let _v206 = v212 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v213 : Ref<Str> = v205 |> unbox<Ref<Str>>
    let _v206 = v213 
    #endif
#if FABLE_COMPILER_PYTHON
    let v216 : Ref<Str> = v205 |> unbox<Ref<Str>>
    let _v206 = v216 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v219 : Ref<Str> = v205 |> unbox<Ref<Str>>
    let _v206 = v219 
    #endif
#else
    let v222 : Ref<Str> = v205 |> unbox<Ref<Str>>
    let _v206 = v222 
    #endif
    let v225 : Ref<Str> = _v206 
    let v230 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v231 : string = "String::from($0)"
    let v232 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v231 
    let _v230 = v232 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v233 : string = "String::from($0)"
    let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v233 
    let _v230 = v234 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v235 : string = "String::from($0)"
    let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v225 v235 
    let _v230 = v236 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : std_string_String = v225 |> unbox<std_string_String>
    let _v230 = v237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v240 : std_string_String = v225 |> unbox<std_string_String>
    let _v230 = v240 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v243 : std_string_String = v225 |> unbox<std_string_String>
    let _v230 = v243 
    #endif
#else
    let v246 : std_string_String = v225 |> unbox<std_string_String>
    let _v230 = v246 
    #endif
    let v249 : std_string_String = _v230 
    let v254 : (std_string_String []) = [|v200; v249|]
    let v255 : string = "$0.to_vec()"
    let v256 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v254 v255 
    let v257 : string = "crate::model::near::rpc::RpcInput { jsonrpc: $0, id: $1, method: $2, params: v256 }"
    let v258 : crate_model_near_rpc_RpcInput = Fable.Core.RustInterop.emitRustExpr struct (v53, v102, v151) v257 
    let v259 : string = method161()
    let v260 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v261 : string = "&*$0"
    let v262 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v259 v261 
    let _v260 = v262 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v263 : string = "&*$0"
    let v264 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v259 v263 
    let _v260 = v264 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v265 : string = "&*$0"
    let v266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v259 v265 
    let _v260 = v266 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v267 : Ref<Str> = v259 |> unbox<Ref<Str>>
    let _v260 = v267 
    #endif
#if FABLE_COMPILER_PYTHON
    let v270 : Ref<Str> = v259 |> unbox<Ref<Str>>
    let _v260 = v270 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v273 : Ref<Str> = v259 |> unbox<Ref<Str>>
    let _v260 = v273 
    #endif
#else
    let v276 : Ref<Str> = v259 |> unbox<Ref<Str>>
    let _v260 = v276 
    #endif
    let v279 : Ref<Str> = _v260 
    let v284 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v285 : string = "String::from($0)"
    let v286 : std_string_String = Fable.Core.RustInterop.emitRustExpr v279 v285 
    let _v284 = v286 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v287 : string = "String::from($0)"
    let v288 : std_string_String = Fable.Core.RustInterop.emitRustExpr v279 v287 
    let _v284 = v288 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v289 : string = "String::from($0)"
    let v290 : std_string_String = Fable.Core.RustInterop.emitRustExpr v279 v289 
    let _v284 = v290 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v291 : std_string_String = v279 |> unbox<std_string_String>
    let _v284 = v291 
    #endif
#if FABLE_COMPILER_PYTHON
    let v294 : std_string_String = v279 |> unbox<std_string_String>
    let _v284 = v294 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v297 : std_string_String = v279 |> unbox<std_string_String>
    let _v284 = v297 
    #endif
#else
    let v300 : std_string_String = v279 |> unbox<std_string_String>
    let _v284 = v300 
    #endif
    let v303 : std_string_String = _v284 
    let v308 : std_string_String = method98(v303)
    let v309 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(v308)"
    let v310 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v309 
    let v311 : string = "reqwest_wasm::RequestBuilder::json(v310, &v258)"
    let v312 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v311 
    let v313 : reqwest_RequestBuilder = method100(v312)
    let v314 : string = "Box::pin(reqwest_wasm::RequestBuilder::send(v313))"
    let v315 : std_pin_Pin<Box<Dyn<std_future_Future<Result<reqwest_Response, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v314 
    let v316 : string = "v315.await"
    let v317 : Result<reqwest_Response, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v316 
    let v318 : (reqwest_Error -> std_string_String) = method101()
    let v319 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v320 : string = "$0.map_err(|x| $1(x))"
    let v321 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v317, v318) v320 
    let _v319 = v321 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v322 : string = "$0.map_err(|x| $1(x))"
    let v323 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v317, v318) v322 
    let _v319 = v323 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v324 : string = "$0.map_err(|x| $1(x))"
    let v325 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v317, v318) v324 
    let _v319 = v325 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v326 : Result<reqwest_Response, std_string_String> = match v317 with Ok x -> Ok x | Error x -> Error (v318 x)
    let _v319 = v326 
    #endif
#if FABLE_COMPILER_PYTHON
    let v327 : Result<reqwest_Response, std_string_String> = match v317 with Ok x -> Ok x | Error x -> Error (v318 x)
    let _v319 = v327 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v328 : Result<reqwest_Response, std_string_String> = match v317 with Ok x -> Ok x | Error x -> Error (v318 x)
    let _v319 = v328 
    #endif
#else
    let v329 : Result<reqwest_Response, std_string_String> = match v317 with Ok x -> Ok x | Error x -> Error (v318 x)
    let _v319 = v329 
    #endif
    let v330 : Result<reqwest_Response, std_string_String> = _v319 
    let v333 : string = "$0?"
    let v334 : reqwest_Response = Fable.Core.RustInterop.emitRustExpr v330 v333 
    let v335 : string = "Box::pin(reqwest_wasm::Response::text(v334))"
    let v336 : std_pin_Pin<Box<Dyn<std_future_Future<Result<std_string_String, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v335 
    let v337 : string = "v336.await"
    let v338 : Result<std_string_String, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v337 
    let v339 : (reqwest_Error -> std_string_String) = method101()
    let v340 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v341 : string = "$0.map_err(|x| $1(x))"
    let v342 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v338, v339) v341 
    let _v340 = v342 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v343 : string = "$0.map_err(|x| $1(x))"
    let v344 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v338, v339) v343 
    let _v340 = v344 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v345 : string = "$0.map_err(|x| $1(x))"
    let v346 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v338, v339) v345 
    let _v340 = v346 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v347 : Result<std_string_String, std_string_String> = match v338 with Ok x -> Ok x | Error x -> Error (v339 x)
    let _v340 = v347 
    #endif
#if FABLE_COMPILER_PYTHON
    let v348 : Result<std_string_String, std_string_String> = match v338 with Ok x -> Ok x | Error x -> Error (v339 x)
    let _v340 = v348 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v349 : Result<std_string_String, std_string_String> = match v338 with Ok x -> Ok x | Error x -> Error (v339 x)
    let _v340 = v349 
    #endif
#else
    let v350 : Result<std_string_String, std_string_String> = match v338 with Ok x -> Ok x | Error x -> Error (v339 x)
    let _v340 = v350 
    #endif
    let v351 : Result<std_string_String, std_string_String> = _v340 
    let v354 : string = "$0?"
    let v355 : std_string_String = Fable.Core.RustInterop.emitRustExpr v351 v354 
    let v356 : US15 = US15_0(v355)
    let v357 : Result<US15, std_string_String> = Ok v356 
    let v358 : string = $"%A{v357}"
    let v361 : string = "dice_view.render (x) / roll_action create_action / result1 / result: " + string v358 + ""
    let v362 : int64 = 200L
    let v363 : string = method11(v362, v361)
    let v364 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v365 : bool = Fable.Core.RustInterop.emitRustExpr v363 v364 
    let v366 : (US15 -> US59) = method162()
    let v367 : (std_string_String -> US59) = method163()
    let v368 : US59 = match v357 with Ok x -> v366 x | Error x -> v367 x
    let v512 : US60 =
        match v368 with
        | US59_0(v369) -> (* Ok *)
            match v369 with
            | US15_0(v370) -> (* Some *)
                let v371 : string = "fable_library_rust::String_::fromString($0)"
                let v372 : string = Fable.Core.RustInterop.emitRustExpr v370 v371 
                let v373 : string = method49(v372)
                let v374 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v375 : string = "&*$0"
                let v376 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v373 v375 
                let _v374 = v376 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v377 : string = "&*$0"
                let v378 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v373 v377 
                let _v374 = v378 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v379 : string = "&*$0"
                let v380 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v373 v379 
                let _v374 = v380 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v381 : Ref<Str> = v373 |> unbox<Ref<Str>>
                let _v374 = v381 
                #endif
#if FABLE_COMPILER_PYTHON
                let v384 : Ref<Str> = v373 |> unbox<Ref<Str>>
                let _v374 = v384 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v387 : Ref<Str> = v373 |> unbox<Ref<Str>>
                let _v374 = v387 
                #endif
#else
                let v390 : Ref<Str> = v373 |> unbox<Ref<Str>>
                let _v374 = v390 
                #endif
                let v393 : Ref<Str> = _v374 
                let v398 : string = "serde_json::from_str(&$0)"
                let v399 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v393 v398 
                let v400 : (serde_json_Error -> std_string_String) = method50()
                let v401 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v402 : string = "$0.map_err(|x| $1(x))"
                let v403 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v399, v400) v402 
                let _v401 = v403 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v404 : string = "$0.map_err(|x| $1(x))"
                let v405 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v399, v400) v404 
                let _v401 = v405 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v406 : string = "$0.map_err(|x| $1(x))"
                let v407 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v399, v400) v406 
                let _v401 = v407 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v408 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v399 with Ok x -> Ok x | Error x -> Error (v400 x)
                let _v401 = v408 
                #endif
#if FABLE_COMPILER_PYTHON
                let v409 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v399 with Ok x -> Ok x | Error x -> Error (v400 x)
                let _v401 = v409 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v410 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v399 with Ok x -> Ok x | Error x -> Error (v400 x)
                let _v401 = v410 
                #endif
#else
                let v411 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v399 with Ok x -> Ok x | Error x -> Error (v400 x)
                let _v401 = v411 
                #endif
                let v412 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _v401 
                let v415 : (crate_model_near_rpc_RpcResponse -> US61) = method164()
                let v416 : (std_string_String -> US61) = method165()
                let v417 : US61 = match v412 with Ok x -> v415 x | Error x -> v416 x
                let v496 : US62 =
                    match v417 with
                    | US61_1(v493) -> (* Error *)
                        US62_1(v493)
                    | US61_0(v418) -> (* Ok *)
                        let v419 : string = "$0.jsonrpc"
                        let v420 : std_string_String = Fable.Core.RustInterop.emitRustExpr v418 v419 
                        let v421 : string = "$0.result"
                        let v422 : crate_model_near_rpc_TransactionStatus option = Fable.Core.RustInterop.emitRustExpr v418 v421 
                        let v423 : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) = method150()
                        let v424 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option = v422 |> Option.map v423 
                        let v448 : string = "$0.error"
                        let v449 : crate_model_near_rpc_RpcError option = Fable.Core.RustInterop.emitRustExpr v418 v448 
                        let v450 : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) = method152()
                        let v451 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option = v449 |> Option.map v450 
                        let v490 : string = "$0.id"
                        let v491 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v418 v490 
                        US62_0(v420, v424, v451, v491)
                match v496 with
                | US62_1(v503) -> (* Error *)
                    US60_1(v503)
                | US62_0(v497, v498, v499, v500) -> (* Ok *)
                    let v501 : US58 = US58_0(v497, v498, v499, v500)
                    US60_0(v501)
            | _ ->
                let v507 : US58 = US58_1
                US60_0(v507)
        | _ ->
            let v510 : US58 = US58_1
            US60_0(v510)
    let v518 : Result<US58, std_string_String> =
        match v512 with
        | US60_1(v515) -> (* Error *)
            let v516 : Result<US58, std_string_String> = Error v515 
            v516
        | US60_0(v513) -> (* Ok *)
            let v514 : Result<US58, std_string_String> = Ok v513 
            v514
    let v519 : string = $"%A{v518}"
    let v522 : string = "dice_view.render (x) / roll_action create_action / result2 / result: " + string v519 + ""
    let v523 : int64 = 200L
    let v524 : string = method11(v523, v522)
    let v525 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v526 : bool = Fable.Core.RustInterop.emitRustExpr v524 v525 
    let v527 : Result<US58, std_string_String> = method166(v518)
    let v528 : string = ""
    let v529 : string = "}"
    let v530 : string = v528 + v529 
    let v531 : _ = v527 
    let v532 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v533 : string = $"true; let v531 = $0"
    let v534 : bool = Fable.Core.RustInterop.emitRustExpr v531 v533 
    let _v532 = v534 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v535 : string = $"true; let v531 = $0"
    let v536 : bool = Fable.Core.RustInterop.emitRustExpr v531 v535 
    let _v532 = v536 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v537 : string = $"true; let v531 = $0"
    let v538 : bool = Fable.Core.RustInterop.emitRustExpr v531 v537 
    let _v532 = v538 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v539 : bool = true
    let _v532 = v539 
    #endif
#if FABLE_COMPILER_PYTHON
    let v540 : bool = true
    let _v532 = v540 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v541 : bool = true
    let _v532 = v541 
    #endif
#else
    let v542 : bool = true
    let _v532 = v542 
    #endif
    let v543 : bool = _v532 
    let v546 : string = $"true; v531 " + v530 + "); " + v528 + " // rust.fix_closure'"
    let v547 : bool = Fable.Core.RustInterop.emitRustExpr () v546 
    let v548 : string = "__future_init"
    let v549 : _ = Fable.Core.RustInterop.emitRustExpr () v548 
    let v550 : string = "v549"
    let v551 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US58, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v550 
    v551
and closure155 () (v0 : US58) : US60 =
    US60_0(v0)
and method168 () : (US58 -> US60) =
    closure155()
and closure156 () (v0 : std_string_String) : US60 =
    US60_1(v0)
and method169 () : (std_string_String -> US60) =
    closure156()
and closure154 () (v0 : Result<US58, std_string_String>) : US60 =
    let v1 : (US58 -> US60) = method168()
    let v2 : (std_string_String -> US60) = method169()
    let v3 : US60 = match v0 with Ok x -> v1 x | Error x -> v2 x
    v3
and method167 () : (Result<US58, std_string_String> -> US60) =
    closure154()
and closure157 () (v0 : US60) : US63 =
    US63_0(v0)
and method170 () : (US60 -> US63) =
    closure157()
and closure153 (v0 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>) () : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
    let v1 : string = "leptos::prelude::Action::value(&$0)"
    let v2 : leptos_prelude_RwSignal<Result<US58, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v4 : Result<US58, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (Result<US58, std_string_String> -> US60) = method167()
    let v6 : US60 option = v4 |> Option.map v5 
    let v19 : (US60 -> US63) = method170()
    let v20 : US63 option = v6 |> Option.map v19 
    let v31 : US63 = US63_1
    let v32 : US63 = v20 |> Option.defaultValue v31 
    let v53 : US60 =
        match v32 with
        | US63_0(v36) -> (* Some *)
            match v36 with
            | US60_1(v37) -> (* Error *)
                US60_1(v37)
            | US60_0(v39) -> (* Ok *)
                match v39 with
                | US58_0(v40, v41, v42, v43) -> (* Some *)
                    let v44 : US58 = US58_0(v40, v41, v42, v43)
                    US60_0(v44)
                | _ ->
                    let v46 : US58 = US58_1
                    US60_0(v46)
        | _ ->
            let v51 : US58 = US58_1
            US60_0(v51)
    let v69 : US64 =
        match v53 with
        | US60_1(v66) -> (* Error *)
            US64_1(v66)
        | US60_0(v54) -> (* Ok *)
            let v64 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option =
                match v54 with
                | US58_1 -> (* None *)
                    let v62 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = None
                    v62
                | US58_0(v55, v56, v57, v58) -> (* Some *)
                    let v59 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = Some struct (v55, v56, v57, v58) 
                    v59
            US64_0(v64)
    let v75 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
        match v69 with
        | US64_1(v72) -> (* Error *)
            let v73 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Error v72 
            v73
        | US64_0(v70) -> (* Ok *)
            let v71 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Ok v70 
            v71
    let v76 : string = $"%A{v75}"
    let v79 : string = "dice_view.render (x) / roll create_memo / result: " + string v76 + ""
    let v80 : int64 = 200L
    let v81 : string = method11(v80, v79)
    let v82 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr v81 v82 
    v75
and closure159 () (v0 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) : US64 =
    US64_0(v0)
and method171 () : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US64) =
    closure159()
and closure160 () (v0 : std_string_String) : US64 =
    US64_1(v0)
and method172 () : (std_string_String -> US64) =
    closure160()
and closure161 () struct (v0 : std_string_String, v1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option, v2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option, v3 : std_string_String option) : US58 =
    US58_0(v0, v1, v2, v3)
and method173 () : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US58) =
    closure161()
and closure162 () struct (v0 : std_string_String, v1 : std_string_String, v2 : struct (std_string_String option * std_string_String option) option, v3 : int32, v4 : std_string_String, v5 : std_string_String) : US65 =
    US65_0(v0, v1, v2, v3, v4, v5)
and method174 () : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US65) =
    closure162()
and closure158 (v0 : leptos_prelude_Memo<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) () : string option =
    let v1 : string = $"$0()"
    let v2 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US64) = method171()
    let v4 : (std_string_String -> US64) = method172()
    let v5 : US64 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v31 : US60 =
        match v5 with
        | US64_1(v28) -> (* Error *)
            US60_1(v28)
        | US64_0(v6) -> (* Ok *)
            let v7 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US58) = method173()
            let v8 : US58 option = v6 |> Option.map v7 
            let v22 : US58 = US58_1
            let v23 : US58 = v8 |> Option.defaultValue v22 
            US60_0(v23)
    let v72 : US32 =
        match v31 with
        | US60_0(v32) -> (* Ok *)
            match v32 with
            | US58_0(v33, v34, v35, v36) -> (* Some *)
                let v37 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US65) = method174()
                let v38 : US65 option = v35 |> Option.map v37 
                let v54 : US65 = US65_1
                let v55 : US65 = v38 |> Option.defaultValue v54 
                match v55 with
                | US65_0(v59, v60, v61, v62, v63, v64) -> (* Some *)
                    let v65 : string = string v59 + ": " + string v63 + " - " + string v64 + " (" + string v60 + ")"
                    US32_0(v65)
                | _ ->
                    US32_1
            | _ ->
                US32_1
        | _ ->
            US32_1
    let v79 : string option =
        match v72 with
        | US32_1 -> (* None *)
            let v77 : string option = None
            v77
        | US32_0(v73) -> (* Some *)
            let v74 : string option = Some v73 
            v74
    let v80 : string = $"%A{v79}"
    let v83 : string = "dice_view.render (x) / error_message create_memo / result: " + string v80 + ""
    let v84 : int64 = 200L
    let v85 : string = method11(v84, v83)
    let v86 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v87 : bool = Fable.Core.RustInterop.emitRustExpr v85 v86 
    v79
and closure163 (v0 : Heap2) () : US32 =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : std_string_String option = v6.l1
    let v8 : (std_string_String -> US15) = method47()
    let v9 : US15 option = v7 |> Option.map v8 
    let v20 : US15 = US15_1
    let v21 : US15 = v9 |> Option.defaultValue v20 
    match v21 with
    | US15_1 -> (* None *)
        US32_1
    | US15_0(v25) -> (* Some *)
        let v26 : string = "fable_library_rust::String_::fromString($0)"
        let v27 : string = Fable.Core.RustInterop.emitRustExpr v25 v26 
        US32_0(v27)
and closure166 (v0 : int32) (v1 : std_string_String) : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) =
    let v2 : string = $"leptos::prelude::signal($0)"
    let struct (v3 : leptos_prelude_ReadSignal<std_string_String>, v4 : leptos_prelude_WriteSignal<std_string_String>) = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v5 : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) = v0, struct (v3, v4) 
    v5
and closure165 () (v0 : int32) : (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))) =
    closure166(v0)
and method175 () : (int32 -> (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)))) =
    closure165()
and method176 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and closure164 (v0 : Heap2) () : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : Vec<(bool * std_string_String)> = v6.l0
    let v8 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v9 : ((bool * std_string_String) -> struct (bool * std_string_String)) = closure56()
    let v10 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v7, v9) v8 
    let v11 : (struct (bool * std_string_String) -> bool) = method68()
    let v12 : Vec<struct (bool * std_string_String)> = method69(v10)
    let v13 : string = "v12.into_iter().filter(|x| v11(x.clone().clone())).collect::<Vec<_>>()"
    let v14 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v16 : (struct (bool * std_string_String) -> std_string_String) = closure58()
    let v17 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v14, v16) v15 
    let v18 : (int32 -> (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)))) = method175()
    let v19 : Vec<std_string_String> = method176(v17)
    let v20 : string = "v19.iter().enumerate().map(|(i, x)| v18(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v21 : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> = Fable.Core.RustInterop.emitRustExpr () v20 
    v21
and closure168 () (v0 : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))) : struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>) =
    let (a, b) = v0 
    let v1 : int32 = a
    let struct (v2 : leptos_prelude_ReadSignal<std_string_String>, v3 : leptos_prelude_WriteSignal<std_string_String>) = b
    struct (v1, v2, v3)
and closure169 () struct (v0 : int32, v1 : leptos_prelude_ReadSignal<std_string_String>, v2 : leptos_prelude_WriteSignal<std_string_String>) : struct (int32 * leptos_prelude_ReadSignal<std_string_String>) =
    struct (v0, v1)
and closure167 (v0 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>>) () : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> =
    let v1 : string = $"$0()"
    let v2 : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : ((int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) -> struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) = closure168()
    let v5 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v7 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>) -> struct (int32 * leptos_prelude_ReadSignal<std_string_String>)) = closure169()
    let v8 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    v8
and method177 (v0 : (leptos_prelude_AnyView_ [])) : (leptos_prelude_AnyView_ []) =
    v0
and closure175 () (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) : US66 =
    US66_0(v0)
and method183 () : (leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US66) =
    closure175()
and closure179 () () : leptos_prelude_AnyView_ =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "leptos::prelude::Fragment::new($0)"
    let v4 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "&$0"
    let v6 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method187 () : (unit -> leptos_prelude_AnyView_) =
    closure179()
and method188 (v0 : leptos_prelude_AnyView_) : leptos_prelude_AnyView_ =
    v0
and closure178 () () : leptos_prelude_AnyView_ =
    let v0 : string = "stroke-linecap=\"round\""
    let v1 : string = "stroke-linejoin=\"round\""
    let v2 : string = "d=\"M6 18L18 6M6 6l12 12\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v3 
    let v18 : string = v17 + v3 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method186 () : (unit -> leptos_prelude_AnyView_) =
    closure178()
and closure177 () () : leptos_prelude_AnyView_ =
    let v0 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v1 : string = "fill=\"none\""
    let v2 : string = "height=\"100%\""
    let v3 : string = "viewBox=\"0 0 24 24\""
    let v4 : string = "stroke-width=\"1.5\""
    let v5 : string = "stroke=\"currentColor\""
    let v6 : string = "class=\"text-red-700\""
    let v7 : string = ""
    let v8 : string = " " + v0 + v7 + ""
    let v9 : string = " " + v1 + v8 + ""
    let v10 : string = " " + v2 + v9 + ""
    let v11 : string = " " + v3 + v10 + ""
    let v12 : string = " " + v4 + v11 + ""
    let v13 : string = " " + v5 + v12 + ""
    let v14 : string = " " + v6 + v13 + ""
    let v15 : (unit -> leptos_prelude_AnyView_) = method186()
    let v16 : string = "svg"
    let v17 : string = "<" + v16 + " " + v14 + ">move || { v15() }</" + v16 + ">"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : leptos_prelude_AnyView_ = method188(v22)
    let v24 : string = "v23"
    let v25 : string = v24 + v7 
    let v26 : string = v25 + v7 
    let v27 : string = "vec![" + v26 + "]"
    let v28 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = "leptos::prelude::Fragment::new($0)"
    let v30 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : string = "&$0"
    let v32 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
    v34
and method185 () : (unit -> leptos_prelude_AnyView_) =
    closure177()
and closure180 () () : leptos_prelude_AnyView_ =
    let v0 : string = "No data"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method189 () : (unit -> leptos_prelude_AnyView_) =
    closure180()
and closure176 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"[height:17px]\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method185()
    let v4 : string = "span"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
    let v12 : string = " " + v11 + v1 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method189()
    let v14 : string = "pre"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v1 
    let v24 : string = v23 + v1 
    let v25 : leptos_prelude_AnyView_ = method188(v10)
    let v26 : string = "v25"
    let v27 : string = ", "
    let v28 : string = v26 + v27 
    let v29 : string = v28 + v24 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "&$0"
    let v35 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and method184 () : (unit -> leptos_prelude_AnyView_) =
    closure176()
and method190 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> =
    v0
and closure181 () struct (v0 : int32, v1 : leptos_prelude_ReadSignal<std_string_String>) : int32 =
    v0
and method191 () : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> int32) =
    closure181()
and method193 (v0 : std_string_String) : std_string_String =
    v0
and closure183 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2, v3 : int32, v4 : std_string_String) () : unit =
    let v5 : string = "fable_library_rust::String_::fromString($0)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : leptos_prelude_RwSignal<Heap1> = v2.l0
    let v8 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v9 : Heap1 = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : leptos_prelude_RwSignal<Heap0> = v9.l3
    let v11 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v12 : Heap0 = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : Vec<(bool * std_string_String)> = v12.l0
    let v14 : std_string_String option = v12.l1
    let v15 : int32 = v12.l2
    let v16 : int32 = v12.l3
    let v17 : US1 = v12.l4
    let v18 : leptos_prelude_RwSignal<Heap1> = v2.l0
    let v19 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v20 : Heap1 = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_RwSignal<Heap0> = v20.l3
    let v22 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v23 
    let _v22 = v24 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v25 : string = "&*$0"
    let v26 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v25 
    let _v22 = v26 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v27 : string = "&*$0"
    let v28 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let _v22 = v28 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v29 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v22 = v29 
    #endif
#if FABLE_COMPILER_PYTHON
    let v32 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v22 = v32 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v35 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v22 = v35 
    #endif
#else
    let v38 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v22 = v38 
    #endif
    let v41 : Ref<Str> = _v22 
    let v46 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v41 v47 
    let _v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "String::from($0)"
    let v50 : std_string_String = Fable.Core.RustInterop.emitRustExpr v41 v49 
    let _v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "String::from($0)"
    let v52 : std_string_String = Fable.Core.RustInterop.emitRustExpr v41 v51 
    let _v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v53 : std_string_String = v41 |> unbox<std_string_String>
    let _v46 = v53 
    #endif
#if FABLE_COMPILER_PYTHON
    let v56 : std_string_String = v41 |> unbox<std_string_String>
    let _v46 = v56 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v59 : std_string_String = v41 |> unbox<std_string_String>
    let _v46 = v59 
    #endif
#else
    let v62 : std_string_String = v41 |> unbox<std_string_String>
    let _v46 = v62 
    #endif
    let v65 : std_string_String = _v46 
    let v70 : std_string_String option = Some v65 
    let v73 : Heap0 = {l0 = v13; l1 = v70; l2 = v15; l3 = v16; l4 = v17} : Heap0
    let v74 : string = $"true; leptos::prelude::SignalSet::set(&$0, $1);"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr struct (v21, v73) v74 
    ()
and closure185 () (v0 : leptos_prelude_Memo<US32>) : US68 =
    US68_0(v0)
and method195 () : (leptos_prelude_Memo<US32> -> US68) =
    closure185()
and closure186 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure188 () () : leptos_prelude_AnyView_ =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "leptos::prelude::Fragment::new($0)"
    let v4 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "&$0"
    let v6 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method197 () : (unit -> leptos_prelude_AnyView_) =
    closure188()
and closure187 () () : leptos_prelude_AnyView_ =
    let v0 : string = "cx=\"12\""
    let v1 : string = "cy=\"12\""
    let v2 : string = "r=\"9\""
    let v3 : string = "stroke-linecap=\"round\""
    let v4 : string = "stroke-linejoin=\"round\""
    let v5 : string = ""
    let v6 : string = " " + v0 + v5 + ""
    let v7 : string = " " + v1 + v6 + ""
    let v8 : string = " " + v2 + v7 + ""
    let v9 : string = " " + v3 + v8 + ""
    let v10 : string = " " + v4 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method197()
    let v12 : string = "circle"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "stroke-linecap=\"round\""
    let v20 : string = "stroke-linejoin=\"round\""
    let v21 : string = "d=\"M9 12l2 2l4 -4\""
    let v22 : string = " " + v19 + v5 + ""
    let v23 : string = " " + v20 + v22 + ""
    let v24 : string = " " + v21 + v23 + ""
    let v25 : (unit -> leptos_prelude_AnyView_) = method187()
    let v26 : string = "path"
    let v27 : string = "<" + v26 + " " + v24 + ">move || { v25() }</" + v26 + ">"
    let v28 : string = "leptos::prelude::view! { " + v27 + " }"
    let v29 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v29 |> unbox
    let v31 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v32 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : leptos_prelude_AnyView_ = method188(v32)
    let v34 : string = "v33"
    let v35 : string = v34 + v5 
    let v36 : string = v35 + v5 
    let v37 : leptos_prelude_AnyView_ = method188(v18)
    let v38 : string = "v37"
    let v39 : string = ", "
    let v40 : string = v38 + v39 
    let v41 : string = v40 + v36 
    let v42 : string = "vec![" + v41 + "]"
    let v43 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = "leptos::prelude::Fragment::new($0)"
    let v45 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "&$0"
    let v47 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let v48 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v49 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v48 
    v49
and method196 () : (unit -> leptos_prelude_AnyView_) =
    closure187()
and closure184 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2, v3 : std_string_String) () : leptos_prelude_AnyView_ =
    let v4 : string = "fable_library_rust::String_::fromString($0)"
    let v5 : string = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : (leptos_prelude_Memo<US32> -> US68) = method195()
    let v7 : US68 option = v1 |> Option.map v6 
    let v18 : US68 = US68_1
    let v19 : US68 = v7 |> Option.defaultValue v18 
    let v29 : US43 =
        match v19 with
        | US68_1 -> (* None *)
            US43_1
        | US68_0(v23) -> (* Some *)
            let v24 : string = $"$0()"
            let v25 : US32 = Fable.Core.RustInterop.emitRustExpr v23 v24 
            US43_0(v25)
    let v36 : US32 =
        match v29 with
        | US43_0(v30) -> (* Some *)
            match v30 with
            | US32_0(v31) -> (* Some *)
                US32_0(v31)
            | _ ->
                US32_1
        | _ ->
            US32_1
    let v72 : leptos_prelude_AnyView_ =
        match v36 with
        | US32_0(v37) -> (* Some *)
            let v38 : bool = v5 = v37
            if v38 then
                let v39 : string = "$0"
                let v40 : (unit -> string) = closure186()
                let v41 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v40 v39 
                let v42 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                let v43 : string = "fill=\"none\""
                let v44 : string = "viewBox=\"0 0 24 24\""
                let v45 : string = "stroke-width=\"1.5\""
                let v46 : string = "stroke=\"currentColor\""
                let v47 : string = "class=move || \" \".to_owned() + &v41(())"
                let v48 : string = ""
                let v49 : string = " " + v42 + v48 + ""
                let v50 : string = " " + v43 + v49 + ""
                let v51 : string = " " + v44 + v50 + ""
                let v52 : string = " " + v45 + v51 + ""
                let v53 : string = " " + v46 + v52 + ""
                let v54 : string = " " + v47 + v53 + ""
                let v55 : (unit -> leptos_prelude_AnyView_) = method196()
                let v56 : string = "svg"
                let v57 : string = "<" + v56 + " " + v54 + ">move || { v55() }</" + v56 + ">"
                let v58 : string = "leptos::prelude::view! { " + v57 + " }"
                let v59 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v58 
                let v60 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v59 |> unbox
                let v61 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v62 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v60 v61 
                v62
            else
                let v63 : (leptos_prelude_AnyView_ []) = [||]
                let v64 : (leptos_prelude_AnyView_ []) = method177(v63)
                let v65 : string = "leptos::prelude::CollectView::collect_view($0)"
                let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
                v66
        | _ ->
            let v68 : (leptos_prelude_AnyView_ []) = [||]
            let v69 : (leptos_prelude_AnyView_ []) = method177(v68)
            let v70 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v71 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v69 v70 
            v71
    let v73 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "&*$0"
    let v75 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5 v74 
    let _v73 = v75 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v76 : string = "&*$0"
    let v77 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5 v76 
    let _v73 = v77 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : string = "&*$0"
    let v79 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5 v78 
    let _v73 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v80 : Ref<Str> = v5 |> unbox<Ref<Str>>
    let _v73 = v80 
    #endif
#if FABLE_COMPILER_PYTHON
    let v83 : Ref<Str> = v5 |> unbox<Ref<Str>>
    let _v73 = v83 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v86 : Ref<Str> = v5 |> unbox<Ref<Str>>
    let _v73 = v86 
    #endif
#else
    let v89 : Ref<Str> = v5 |> unbox<Ref<Str>>
    let _v73 = v89 
    #endif
    let v92 : Ref<Str> = _v73 
    let v97 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v98 : string = "String::from($0)"
    let v99 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v98 
    let _v97 = v99 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v100 : string = "String::from($0)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v100 
    let _v97 = v101 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v102 : string = "String::from($0)"
    let v103 : std_string_String = Fable.Core.RustInterop.emitRustExpr v92 v102 
    let _v97 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : std_string_String = v92 |> unbox<std_string_String>
    let _v97 = v104 
    #endif
#if FABLE_COMPILER_PYTHON
    let v107 : std_string_String = v92 |> unbox<std_string_String>
    let _v97 = v107 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v110 : std_string_String = v92 |> unbox<std_string_String>
    let _v97 = v110 
    #endif
#else
    let v113 : std_string_String = v92 |> unbox<std_string_String>
    let _v97 = v113 
    #endif
    let v116 : std_string_String = _v97 
    let v121 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v122 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v116 v121 
    let v123 : leptos_prelude_AnyView_ = method188(v122)
    let v124 : string = "v123"
    let v125 : string = ""
    let v126 : string = v124 + v125 
    let v127 : string = v126 + v125 
    let v128 : leptos_prelude_AnyView_ = method188(v72)
    let v129 : string = "v128"
    let v130 : string = ", "
    let v131 : string = v129 + v130 
    let v132 : string = v131 + v127 
    let v133 : string = "vec![" + v132 + "]"
    let v134 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v133 
    let v135 : string = "leptos::prelude::Fragment::new($0)"
    let v136 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v134 v135 
    let v137 : string = "&$0"
    let v138 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v140 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v138 v139 
    v140
and method194 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2, v3 : std_string_String) : (unit -> leptos_prelude_AnyView_) =
    closure184(v0, v1, v2, v3)
and closure182 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) struct (v3 : int32, v4 : leptos_prelude_ReadSignal<std_string_String>) : leptos_dom_Fragment =
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : std_string_String = method193(v6)
    let v8 : (unit -> unit) = closure183(v0, v1, v2, v3, v6)
    let v9 : string = "let v8 = $0"
    Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v10 : string = "class=\"flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\""
    let v11 : string = "on:click=move |_| v8()"
    let v12 : string = "aria-label=v7"
    let v13 : string = ""
    let v14 : string = " " + v10 + v13 + ""
    let v15 : string = " " + v11 + v14 + ""
    let v16 : string = " " + v12 + v15 + ""
    let v17 : (unit -> leptos_prelude_AnyView_) = method194(v0, v1, v2, v6)
    let v18 : string = "button"
    let v19 : string = "<" + v18 + " " + v16 + ">move || { v17() }</" + v18 + ">"
    let v20 : string = "leptos::prelude::view! { " + v19 + " }"
    let v21 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v21 |> unbox
    let v23 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : leptos_prelude_AnyView_ = method188(v24)
    let v26 : string = "v25"
    let v27 : string = v26 + v13 
    let v28 : string = v27 + v13 
    let v29 : string = "vec![" + v28 + "]"
    let v30 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "leptos::prelude::Fragment::new($0)"
    let v32 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v30 v31 
    v32
and method192 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> leptos_dom_Fragment) =
    closure182(v0, v1, v2)
and closure174 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : leptos_prelude_AnyView_ =
    let v3 : (leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US66) = method183()
    let v4 : US66 option = v0 |> Option.map v3 
    let v15 : US66 = US66_1
    let v16 : US66 = v4 |> Option.defaultValue v15 
    let v26 : US67 =
        match v16 with
        | US66_1 -> (* None *)
            US67_1
        | US66_0(v20) -> (* Some *)
            let v21 : string = $"$0()"
            let v22 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr v20 v21 
            US67_0(v22)
    let v27 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) []) = [||]
    let v28 : string = "$0.to_vec()"
    let v29 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v32 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> =
        match v26 with
        | US67_1 -> (* None *)
            v29
        | US67_0(v30) -> (* Some *)
            v30
    let v33 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v34 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) []) = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : uint64 = System.Convert.ToUInt64 v34.Length
    let v36 : bool = v35 = 0UL
    let v105 : leptos_dom_Fragment =
        if v36 then
            let v37 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v38 : string = ""
            let v39 : string = " " + v37 + v38 + ""
            let v40 : (unit -> leptos_prelude_AnyView_) = method184()
            let v41 : string = "div"
            let v42 : string = "<" + v41 + " " + v39 + ">move || { v40() }</" + v41 + ">"
            let v43 : string = "leptos::prelude::view! { " + v42 + " }"
            let v44 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v43 
            let v45 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v44 |> unbox
            let v46 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
            let v48 : leptos_prelude_AnyView_ = method188(v47)
            let v49 : string = "v48"
            let v50 : string = v49 + v38 
            let v51 : string = v50 + v38 
            let v52 : string = "vec![" + v51 + "]"
            let v53 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v52 
            let v54 : string = "leptos::prelude::Fragment::new($0)"
            let v55 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v53 v54 
            v55
        else
            let v56 : (leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US66) = method183()
            let v57 : US66 option = v0 |> Option.map v56 
            let v68 : US66 = US66_1
            let v69 : US66 = v57 |> Option.defaultValue v68 
            match v69 with
            | US66_1 -> (* None *)
                let v98 : string = ""
                let v99 : string = "vec![" + v98 + "]"
                let v100 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v99 
                let v101 : string = "leptos::prelude::Fragment::new($0)"
                let v102 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v100 v101 
                v102
            | US66_0(v73) -> (* Some *)
                let v74 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> = method190(v73)
                let v75 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> int32) = method191()
                let v76 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> leptos_dom_Fragment) = method192(v0, v1, v2)
                let v77 : string = "each=v74"
                let v78 : string = "key=move |x| v75(x.to_owned())"
                let v79 : string = "let:x"
                let v80 : string = "children=move |x| v76(x)"
                let v81 : string = ""
                let v82 : string = " " + v77 + v81 + ""
                let v83 : string = " " + v78 + v82 + ""
                let v84 : string = " " + v79 + v83 + ""
                let v85 : string = " " + v80 + v84 + ""
                let v86 : string = "leptos::prelude::For"
                let v87 : string = "<" + v86 + " " + v85 + " />"
                let v88 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { " + v87 + " })"
                let v89 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v88 
                let v90 : leptos_prelude_AnyView_ = method188(v89)
                let v91 : string = "v90"
                let v92 : string = v91 + v81 
                let v93 : string = v92 + v81 
                let v94 : string = "vec![" + v93 + "]"
                let v95 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v94 
                let v96 : string = "leptos::prelude::Fragment::new($0)"
                let v97 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v95 v96 
                v97
    let v106 : string = "&$0"
    let v107 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v109 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v107 v108 
    v109
and method182 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure174(v0, v1, v2)
and closure173 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : leptos_dom_Fragment =
    let v3 : string = "class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\""
    let v4 : string = ""
    let v5 : string = " " + v3 + v4 + ""
    let v6 : (unit -> leptos_prelude_AnyView_) = method182(v0, v1, v2)
    let v7 : string = "div"
    let v8 : string = "<" + v7 + " " + v5 + ">move || { v6() }</" + v7 + ">"
    let v9 : string = "leptos::prelude::view! { " + v8 + " }"
    let v10 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v10 |> unbox
    let v12 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : leptos_prelude_AnyView_ = method188(v13)
    let v15 : string = "v14"
    let v16 : string = v15 + v4 
    let v17 : string = v16 + v4 
    let v18 : string = "vec![" + v17 + "]"
    let v19 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : string = "leptos::prelude::Fragment::new($0)"
    let v21 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v19 v20 
    v21
and method181 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure173(v0, v1, v2)
and method199 (v0 : Func0<leptos_dom_Fragment>) : Func0<leptos_dom_Fragment> =
    v0
and closure189 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_dom_Fragment =
    let v1 : string = "Func0::new(move || $0())"
    let v2 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : Func0<leptos_dom_Fragment> = method199(v2)
    let v4 : string = "(move || v3())()"
    let v5 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "leptos::prelude::IntoAny::into_any(v5)"
    let v7 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_AnyView_ = method188(v7)
    let v9 : string = "v8"
    let v10 : string = ""
    let v11 : string = v9 + v10 
    let v12 : string = v11 + v10 
    let v13 : string = "vec![" + v12 + "]"
    let v14 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "leptos::prelude::Fragment::new($0)"
    let v16 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v14 v15 
    v16
and method198 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_dom_Fragment) =
    closure189(v0)
and closure191 () () : string =
    let v0 : string = "[align-self:flex-start]"
    v0
and closure192 () () : bool =
    false
and closure193 (v0 : leptos_prelude_AnyView_) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_AnyView_ = method188(v0)
    let v2 : string = "v1"
    let v3 : string = ""
    let v4 : string = v2 + v3 
    let v5 : string = v4 + v3 
    let v6 : string = "vec![" + v5 + "]"
    let v7 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "leptos::prelude::Fragment::new($0)"
    let v9 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "&$0"
    let v11 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    v13
and method201 (v0 : leptos_prelude_AnyView_) : (unit -> leptos_prelude_AnyView_) =
    closure193(v0)
and closure195 () () : string =
    let v0 : string = "py-[4px]"
    v0
and closure196 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v3 : string = ""
    let v4 : string = "r#\"" + v3 + "\"#"
    let v5 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v4 
    v5
and closure199 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : string =
    let v3 : (leptos_prelude_Memo<US32> -> US68) = method195()
    let v4 : US68 option = v1 |> Option.map v3 
    let v15 : US68 = US68_1
    let v16 : US68 = v4 |> Option.defaultValue v15 
    let v26 : US43 =
        match v16 with
        | US68_1 -> (* None *)
            US43_1
        | US68_0(v20) -> (* Some *)
            let v21 : string = $"$0()"
            let v22 : US32 = Fable.Core.RustInterop.emitRustExpr v20 v21 
            US43_0(v22)
    let v33 : US32 =
        match v26 with
        | US43_0(v27) -> (* Some *)
            match v27 with
            | US32_0(v28) -> (* Some *)
                US32_0(v28)
            | _ ->
                US32_1
        | _ ->
            US32_1
    match v33 with
    | US32_1 -> (* None *)
        let v35 : string = "Select..."
        v35
    | US32_0(v34) -> (* Some *)
        v34
and method205 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) : (unit -> string) =
    closure199(v0, v1, v2)
and closure200 (v0 : (unit -> string)) () : leptos_prelude_AnyView_ =
    let v1 : string = v0 ()
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v50 
    let v52 : leptos_prelude_AnyView_ = method188(v51)
    let v53 : string = "v52"
    let v54 : string = ""
    let v55 : string = v53 + v54 
    let v56 : string = v55 + v54 
    let v57 : string = "vec![" + v56 + "]"
    let v58 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "leptos::prelude::Fragment::new($0)"
    let v60 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "&$0"
    let v62 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v64 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v62 v63 
    v64
and method206 (v0 : (unit -> string)) : (unit -> leptos_prelude_AnyView_) =
    closure200(v0)
and closure198 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : leptos_prelude_AnyView_ =
    let v3 : (unit -> string) = method205(v0, v1, v2)
    let v4 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v5 : string = ""
    let v6 : string = " " + v4 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method206(v3)
    let v8 : string = "span"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v5 
    let v18 : string = v17 + v5 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method204 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure198(v0, v1, v2)
and closure202 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure203 () () : leptos_prelude_AnyView_ =
    let v0 : string = "fill-rule=\"evenodd\""
    let v1 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
    let v2 : string = "clip-rule=\"evenodd\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v3 
    let v18 : string = v17 + v3 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method208 () : (unit -> leptos_prelude_AnyView_) =
    closure203()
and closure201 () () : leptos_prelude_AnyView_ =
    let v0 : string = "$0"
    let v1 : (unit -> string) = closure202()
    let v2 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1 v0 
    let v3 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v4 : string = "viewBox=\"0 0 20 20\""
    let v5 : string = "fill=\"currentColor\""
    let v6 : string = "class=move || \" \".to_owned() + &v2(())"
    let v7 : string = ""
    let v8 : string = " " + v3 + v7 + ""
    let v9 : string = " " + v4 + v8 + ""
    let v10 : string = " " + v5 + v9 + ""
    let v11 : string = " " + v6 + v10 + ""
    let v12 : (unit -> leptos_prelude_AnyView_) = method208()
    let v13 : string = "svg"
    let v14 : string = "<" + v13 + " " + v11 + ">move || { v12() }</" + v13 + ">"
    let v15 : string = "leptos::prelude::view! { " + v14 + " }"
    let v16 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v16 |> unbox
    let v18 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v19 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : leptos_prelude_AnyView_ = method188(v19)
    let v21 : string = "v20"
    let v22 : string = v21 + v7 
    let v23 : string = v22 + v7 
    let v24 : string = "vec![" + v23 + "]"
    let v25 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "leptos::prelude::Fragment::new($0)"
    let v27 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : string = "&$0"
    let v29 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v30 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v31 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v29 v30 
    v31
and method207 () : (unit -> leptos_prelude_AnyView_) =
    closure201()
and closure197 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) () : leptos_prelude_AnyView_ =
    let v3 : string = "class=\"flex items-center gap-2\""
    let v4 : string = ""
    let v5 : string = " " + v3 + v4 + ""
    let v6 : (unit -> leptos_prelude_AnyView_) = method204(v0, v1, v2)
    let v7 : string = "div"
    let v8 : string = "<" + v7 + " " + v5 + ">move || { v6() }</" + v7 + ">"
    let v9 : string = "leptos::prelude::view! { " + v8 + " }"
    let v10 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v10 |> unbox
    let v12 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v15 : string = " " + v14 + v4 + ""
    let v16 : (unit -> leptos_prelude_AnyView_) = method207()
    let v17 : string = "span"
    let v18 : string = "<" + v17 + " " + v15 + ">move || { v16() }</" + v17 + ">"
    let v19 : string = "leptos::prelude::view! { " + v18 + " }"
    let v20 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v20 |> unbox
    let v22 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : leptos_prelude_AnyView_ = method188(v23)
    let v25 : string = "v24"
    let v26 : string = v25 + v4 
    let v27 : string = v26 + v4 
    let v28 : leptos_prelude_AnyView_ = method188(v13)
    let v29 : string = "v28"
    let v30 : string = ", "
    let v31 : string = v29 + v30 
    let v32 : string = v31 + v27 
    let v33 : string = "vec![" + v32 + "]"
    let v34 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : string = "leptos::prelude::Fragment::new($0)"
    let v36 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "&$0"
    let v38 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v40 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v38 v39 
    v40
and method203 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure197(v0, v1, v2)
and closure204 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_dom_Fragment = v0 ()
    let v2 : string = "&$0"
    let v3 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v5 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method209 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure204(v0)
and closure194 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2, v3 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v4 : string = "$0"
    let v5 : (unit -> string) = closure195()
    let v6 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v5 v4 
    let v7 : string = "$0"
    let v8 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure196(v0, v1, v2)
    let v9 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v8 v7 
    let v10 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v9(()) + \" \" + &v6(())"
    let v11 : string = ""
    let v12 : string = " " + v10 + v11 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method203(v0, v1, v2)
    let v14 : string = "summary"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "class=\"flex flex-1 flex-col\""
    let v22 : string = " " + v21 + v11 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method209(v3)
    let v24 : string = "div"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v30)
    let v32 : string = "v31"
    let v33 : string = v32 + v11 
    let v34 : string = v33 + v11 
    let v35 : leptos_prelude_AnyView_ = method188(v20)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method202 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2, v3 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure194(v0, v1, v2, v3)
and closure190 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2, v3 : leptos_prelude_AnyView_, v4 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v5 : string = "$0"
    let v6 : (unit -> string) = closure191()
    let v7 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "$0"
    let v9 : (unit -> bool) = closure192()
    let v10 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v9 v8 
    let v11 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v12 : string = ""
    let v13 : string = " " + v11 + v12 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method201(v3)
    let v15 : string = "div"
    let v16 : string = "<" + v15 + " " + v13 + ">move || { v14() }</" + v15 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v7(())"
    let v23 : string = "open=move || v10(())"
    let v24 : string = " " + v22 + v12 + ""
    let v25 : string = " " + v23 + v24 + ""
    let v26 : (unit -> leptos_prelude_AnyView_) = method202(v0, v1, v2, v4)
    let v27 : string = "details"
    let v28 : string = "<" + v27 + " " + v25 + ">move || { v26() }</" + v27 + ">"
    let v29 : string = "leptos::prelude::view! { " + v28 + " }"
    let v30 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v30 |> unbox
    let v32 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v33 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : leptos_prelude_AnyView_ = method188(v33)
    let v35 : string = "v34"
    let v36 : string = v35 + v12 
    let v37 : string = v36 + v12 
    let v38 : leptos_prelude_AnyView_ = method188(v21)
    let v39 : string = "v38"
    let v40 : string = ", "
    let v41 : string = v39 + v40 
    let v42 : string = v41 + v37 
    let v43 : string = "vec![" + v42 + "]"
    let v44 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : string = "leptos::prelude::Fragment::new($0)"
    let v46 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "&$0"
    let v48 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v48 v49 
    v50
and method200 (v0 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_Memo<US32> option, v2 : Heap2, v3 : leptos_prelude_AnyView_, v4 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure190(v0, v1, v2, v3, v4)
and closure172 (v0 : Heap2, v1 : leptos_prelude_Memo<US32>, v2 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) () : leptos_prelude_AnyView_ =
    let v3 : string = "Account"
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v52 
    let v54 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option = None
    let v55 : leptos_prelude_Memo<US32> option = None
    let v56 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option = Some v2 
    let v59 : leptos_prelude_Memo<US32> option = Some v1 
    let v62 : (leptos_prelude_AnyView_ []) = [||]
    let v63 : (leptos_prelude_AnyView_ []) = method177(v62)
    let v64 : string = "leptos::prelude::CollectView::collect_view($0)"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v63 v64 
    let v66 : (unit -> leptos_dom_Fragment) = method181(v56, v59, v0)
    let v67 : (unit -> leptos_dom_Fragment) = method198(v66)
    let v68 : string = "class=\"flex flex-col [position:relative]\""
    let v69 : string = ""
    let v70 : string = " " + v68 + v69 + ""
    let v71 : (unit -> leptos_prelude_AnyView_) = method200(v56, v59, v0, v65, v67)
    let v72 : string = "div"
    let v73 : string = "<" + v72 + " " + v70 + ">move || { v71() }</" + v72 + ">"
    let v74 : string = "leptos::prelude::view! { " + v73 + " }"
    let v75 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v75 |> unbox
    let v77 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v78 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : leptos_prelude_AnyView_ = method188(v78)
    let v80 : string = "v79"
    let v81 : string = v80 + v69 
    let v82 : string = v81 + v69 
    let v83 : leptos_prelude_AnyView_ = method188(v53)
    let v84 : string = "v83"
    let v85 : string = ", "
    let v86 : string = v84 + v85 
    let v87 : string = v86 + v82 
    let v88 : string = "vec![" + v87 + "]"
    let v89 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "leptos::prelude::Fragment::new($0)"
    let v91 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "&$0"
    let v93 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v95 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v93 v94 
    v95
and method180 (v0 : Heap2, v1 : leptos_prelude_Memo<US32>, v2 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) : (unit -> leptos_prelude_AnyView_) =
    closure172(v0, v1, v2)
and closure206 (v0 : Heap2) () : int32 =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : int32 = v6.l2
    v7
and method211 (v0 : Heap2) : (unit -> int32) =
    closure206(v0)
and closure207 (v0 : Heap2) (v1 : std_string_String) : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<Heap0> = v4.l3
    let v6 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v7 : Heap0 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : Vec<(bool * std_string_String)> = v7.l0
    let v9 : std_string_String option = v7.l1
    let v10 : int32 = v7.l2
    let v11 : int32 = v7.l3
    let v12 : US1 = v7.l4
    let v13 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v14 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v15 : Heap1 = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : leptos_prelude_RwSignal<Heap0> = v15.l3
    let v17 : (std_string_String -> string) = _.ToString()
    let v18 : string = v17 v1
    let v21 : bool = "" = v18
    let v29 : int32 =
        if v21 then
            1
        else
            let v22 : int32 = v18 |> int32 
            v22
    let v30 : Heap0 = {l0 = v8; l1 = v9; l2 = v29; l3 = v11; l4 = v12} : Heap0
    let v31 : string = $"true; leptos::prelude::SignalSet::set(&$0, $1);"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr struct (v16, v30) v31 
    ()
and method212 (v0 : Heap2) : (std_string_String -> unit) =
    closure207(v0)
and closure208 () () : string =
    let v0 : string = ""
    v0
and closure205 (v0 : Heap2) () : leptos_prelude_AnyView_ =
    let v1 : string = "Max"
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v50 
    let v52 : (unit -> int32) = method211(v0)
    let v53 : (std_string_String -> unit) = method212(v0)
    let v54 : string = "$0"
    let v55 : (unit -> string) = closure208()
    let v56 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v55 v54 
    let v57 : string = "class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v56(())"
    let v58 : string = "prop:value=move || v52()"
    let v59 : string = "on:keyup=move |event: web_sys::KeyboardEvent| v53(leptos::prelude::event_target_value(&event))"
    let v60 : string = ""
    let v61 : string = " " + v57 + v60 + ""
    let v62 : string = " " + v58 + v61 + ""
    let v63 : string = " " + v59 + v62 + ""
    let v64 : string = "input"
    let v65 : string = "<" + v64 + " " + v63 + " />"
    let v66 : string = "leptos::prelude::view! { " + v65 + " }"
    let v67 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v67 |> unbox
    let v69 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v70 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : leptos_prelude_AnyView_ = method188(v70)
    let v72 : string = "v71"
    let v73 : string = v72 + v60 
    let v74 : string = v73 + v60 
    let v75 : leptos_prelude_AnyView_ = method188(v51)
    let v76 : string = "v75"
    let v77 : string = ", "
    let v78 : string = v76 + v77 
    let v79 : string = v78 + v74 
    let v80 : string = "vec![" + v79 + "]"
    let v81 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : string = "leptos::prelude::Fragment::new($0)"
    let v83 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "&$0"
    let v85 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v87 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v85 v86 
    v87
and method210 (v0 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure205(v0)
and closure210 (v0 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>) () : bool =
    let v1 : string = "leptos::prelude::Action::pending(&$0)"
    let v2 : leptos_prelude_ReadSignal<bool> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    v4
and method214 (v0 : Func0<bool>) : Func0<bool> =
    v0
and closure211 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>) () : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<Heap0> = v4.l3
    let v6 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v7 : Heap0 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : int32 = v7.l2
    let v9 : Heap6 = {l0 = v8} : Heap6
    let v10 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1, v9) v10 
    ()
and closure213 () () : string =
    let v0 : string = "[width:15px] [height:14px]"
    v0
and closure216 () () : leptos_prelude_AnyView_ =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "leptos::prelude::Fragment::new($0)"
    let v4 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "&$0"
    let v6 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method218 () : (unit -> leptos_prelude_AnyView_) =
    closure216()
and closure215 () () : leptos_prelude_AnyView_ =
    let v0 : string = "attributeName=\"opacity\""
    let v1 : string = "attributeType=\"XML\""
    let v2 : string = "values=\"0.2; 1; .2\""
    let v3 : string = "begin=\"0s\""
    let v4 : string = "dur=\"0.6s\""
    let v5 : string = "repeatCount=\"indefinite\""
    let v6 : string = ""
    let v7 : string = " " + v0 + v6 + ""
    let v8 : string = " " + v1 + v7 + ""
    let v9 : string = " " + v2 + v8 + ""
    let v10 : string = " " + v3 + v9 + ""
    let v11 : string = " " + v4 + v10 + ""
    let v12 : string = " " + v5 + v11 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method218()
    let v14 : string = "animate"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "attributeName=\"height\""
    let v22 : string = "attributeType=\"XML\""
    let v23 : string = "values=\"10; 20; 10\""
    let v24 : string = "begin=\"0s\""
    let v25 : string = "dur=\"0.6s\""
    let v26 : string = "repeatCount=\"indefinite\""
    let v27 : string = " " + v21 + v6 + ""
    let v28 : string = " " + v22 + v27 + ""
    let v29 : string = " " + v23 + v28 + ""
    let v30 : string = " " + v24 + v29 + ""
    let v31 : string = " " + v25 + v30 + ""
    let v32 : string = " " + v26 + v31 + ""
    let v33 : (unit -> leptos_prelude_AnyView_) = method218()
    let v34 : string = "<" + v14 + " " + v32 + ">move || { v33() }</" + v14 + ">"
    let v35 : string = "leptos::prelude::view! { " + v34 + " }"
    let v36 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v36 |> unbox
    let v38 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v39 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "attributeName=\"y\""
    let v41 : string = "attributeType=\"XML\""
    let v42 : string = "values=\"10; 5; 10\""
    let v43 : string = "begin=\"0s\""
    let v44 : string = "dur=\"0.6s\""
    let v45 : string = "repeatCount=\"indefinite\""
    let v46 : string = " " + v40 + v6 + ""
    let v47 : string = " " + v41 + v46 + ""
    let v48 : string = " " + v42 + v47 + ""
    let v49 : string = " " + v43 + v48 + ""
    let v50 : string = " " + v44 + v49 + ""
    let v51 : string = " " + v45 + v50 + ""
    let v52 : (unit -> leptos_prelude_AnyView_) = method218()
    let v53 : string = "<" + v14 + " " + v51 + ">move || { v52() }</" + v14 + ">"
    let v54 : string = "leptos::prelude::view! { " + v53 + " }"
    let v55 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v54 
    let v56 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v55 |> unbox
    let v57 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v58 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : leptos_prelude_AnyView_ = method188(v58)
    let v60 : string = "v59"
    let v61 : string = v60 + v6 
    let v62 : string = v61 + v6 
    let v63 : leptos_prelude_AnyView_ = method188(v39)
    let v64 : string = "v63"
    let v65 : string = ", "
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v62 
    let v68 : leptos_prelude_AnyView_ = method188(v20)
    let v69 : string = "v68"
    let v70 : string = v69 + v65 
    let v71 : string = v70 + v67 
    let v72 : string = "vec![" + v71 + "]"
    let v73 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "leptos::prelude::Fragment::new($0)"
    let v75 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = "&$0"
    let v77 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v79 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v78 
    v79
and method217 () : (unit -> leptos_prelude_AnyView_) =
    closure215()
and closure217 () () : leptos_prelude_AnyView_ =
    let v0 : string = "attributeName=\"opacity\""
    let v1 : string = "attributeType=\"XML\""
    let v2 : string = "values=\"0.2; 1; .2\""
    let v3 : string = "begin=\"0.15s\""
    let v4 : string = "dur=\"0.6s\""
    let v5 : string = "repeatCount=\"indefinite\""
    let v6 : string = ""
    let v7 : string = " " + v0 + v6 + ""
    let v8 : string = " " + v1 + v7 + ""
    let v9 : string = " " + v2 + v8 + ""
    let v10 : string = " " + v3 + v9 + ""
    let v11 : string = " " + v4 + v10 + ""
    let v12 : string = " " + v5 + v11 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method218()
    let v14 : string = "animate"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "attributeName=\"opacity\""
    let v22 : string = "attributeType=\"XML\""
    let v23 : string = "values=\"10; 20; 10\""
    let v24 : string = "begin=\"0.15s\""
    let v25 : string = "dur=\"0.6s\""
    let v26 : string = "repeatCount=\"indefinite\""
    let v27 : string = " " + v21 + v6 + ""
    let v28 : string = " " + v22 + v27 + ""
    let v29 : string = " " + v23 + v28 + ""
    let v30 : string = " " + v24 + v29 + ""
    let v31 : string = " " + v25 + v30 + ""
    let v32 : string = " " + v26 + v31 + ""
    let v33 : (unit -> leptos_prelude_AnyView_) = method218()
    let v34 : string = "<" + v14 + " " + v32 + ">move || { v33() }</" + v14 + ">"
    let v35 : string = "leptos::prelude::view! { " + v34 + " }"
    let v36 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v36 |> unbox
    let v38 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v39 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "attributeName=\"y\""
    let v41 : string = "attributeType=\"XML\""
    let v42 : string = "values=\"10; 5; 10\""
    let v43 : string = "begin=\"0.15s\""
    let v44 : string = "dur=\"0.6s\""
    let v45 : string = "repeatCount=\"indefinite\""
    let v46 : string = " " + v40 + v6 + ""
    let v47 : string = " " + v41 + v46 + ""
    let v48 : string = " " + v42 + v47 + ""
    let v49 : string = " " + v43 + v48 + ""
    let v50 : string = " " + v44 + v49 + ""
    let v51 : string = " " + v45 + v50 + ""
    let v52 : (unit -> leptos_prelude_AnyView_) = method218()
    let v53 : string = "<" + v14 + " " + v51 + ">move || { v52() }</" + v14 + ">"
    let v54 : string = "leptos::prelude::view! { " + v53 + " }"
    let v55 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v54 
    let v56 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v55 |> unbox
    let v57 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v58 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : leptos_prelude_AnyView_ = method188(v58)
    let v60 : string = "v59"
    let v61 : string = v60 + v6 
    let v62 : string = v61 + v6 
    let v63 : leptos_prelude_AnyView_ = method188(v39)
    let v64 : string = "v63"
    let v65 : string = ", "
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v62 
    let v68 : leptos_prelude_AnyView_ = method188(v20)
    let v69 : string = "v68"
    let v70 : string = v69 + v65 
    let v71 : string = v70 + v67 
    let v72 : string = "vec![" + v71 + "]"
    let v73 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "leptos::prelude::Fragment::new($0)"
    let v75 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = "&$0"
    let v77 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v79 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v78 
    v79
and method219 () : (unit -> leptos_prelude_AnyView_) =
    closure217()
and closure218 () () : leptos_prelude_AnyView_ =
    let v0 : string = "attributeName=\"opacity\""
    let v1 : string = "attributeType=\"XML\""
    let v2 : string = "values=\"0.2; 1; .2\""
    let v3 : string = "begin=\"0.3s\""
    let v4 : string = "dur=\"0.6s\""
    let v5 : string = "repeatCount=\"indefinite\""
    let v6 : string = ""
    let v7 : string = " " + v0 + v6 + ""
    let v8 : string = " " + v1 + v7 + ""
    let v9 : string = " " + v2 + v8 + ""
    let v10 : string = " " + v3 + v9 + ""
    let v11 : string = " " + v4 + v10 + ""
    let v12 : string = " " + v5 + v11 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method218()
    let v14 : string = "animate"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "attributeName=\"height\""
    let v22 : string = "attributeType=\"XML\""
    let v23 : string = "values=\"10; 20; 10\""
    let v24 : string = "begin=\"0.3s\""
    let v25 : string = "dur=\"0.6s\""
    let v26 : string = "repeatCount=\"indefinite\""
    let v27 : string = " " + v21 + v6 + ""
    let v28 : string = " " + v22 + v27 + ""
    let v29 : string = " " + v23 + v28 + ""
    let v30 : string = " " + v24 + v29 + ""
    let v31 : string = " " + v25 + v30 + ""
    let v32 : string = " " + v26 + v31 + ""
    let v33 : (unit -> leptos_prelude_AnyView_) = method218()
    let v34 : string = "<" + v14 + " " + v32 + ">move || { v33() }</" + v14 + ">"
    let v35 : string = "leptos::prelude::view! { " + v34 + " }"
    let v36 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v36 |> unbox
    let v38 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v39 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "attributeName=\"y\""
    let v41 : string = "attributeType=\"XML\""
    let v42 : string = "values=\"10; 5; 10\""
    let v43 : string = "begin=\"0.3s\""
    let v44 : string = "dur=\"0.6s\""
    let v45 : string = "repeatCount=\"indefinite\""
    let v46 : string = " " + v40 + v6 + ""
    let v47 : string = " " + v41 + v46 + ""
    let v48 : string = " " + v42 + v47 + ""
    let v49 : string = " " + v43 + v48 + ""
    let v50 : string = " " + v44 + v49 + ""
    let v51 : string = " " + v45 + v50 + ""
    let v52 : (unit -> leptos_prelude_AnyView_) = method218()
    let v53 : string = "<" + v14 + " " + v51 + ">move || { v52() }</" + v14 + ">"
    let v54 : string = "leptos::prelude::view! { " + v53 + " }"
    let v55 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v54 
    let v56 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v55 |> unbox
    let v57 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v58 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : leptos_prelude_AnyView_ = method188(v58)
    let v60 : string = "v59"
    let v61 : string = v60 + v6 
    let v62 : string = v61 + v6 
    let v63 : leptos_prelude_AnyView_ = method188(v39)
    let v64 : string = "v63"
    let v65 : string = ", "
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v62 
    let v68 : leptos_prelude_AnyView_ = method188(v20)
    let v69 : string = "v68"
    let v70 : string = v69 + v65 
    let v71 : string = v70 + v67 
    let v72 : string = "vec![" + v71 + "]"
    let v73 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "leptos::prelude::Fragment::new($0)"
    let v75 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = "&$0"
    let v77 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v79 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v78 
    v79
and method220 () : (unit -> leptos_prelude_AnyView_) =
    closure218()
and closure214 () () : leptos_prelude_AnyView_ =
    let v0 : string = "x=\"0\""
    let v1 : string = "y=\"10\""
    let v2 : string = "width=\"4\""
    let v3 : string = "height=\"10\""
    let v4 : string = "fill=\"#333\""
    let v5 : string = "opacity=\"0.2\""
    let v6 : string = ""
    let v7 : string = " " + v0 + v6 + ""
    let v8 : string = " " + v1 + v7 + ""
    let v9 : string = " " + v2 + v8 + ""
    let v10 : string = " " + v3 + v9 + ""
    let v11 : string = " " + v4 + v10 + ""
    let v12 : string = " " + v5 + v11 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method217()
    let v14 : string = "rect"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v17 |> unbox
    let v19 : string = "x=\"8\""
    let v20 : string = "y=\"10\""
    let v21 : string = "width=\"4\""
    let v22 : string = "height=\"10\""
    let v23 : string = "fill=\"#333\""
    let v24 : string = "opacity=\"0.2\""
    let v25 : string = " " + v19 + v6 + ""
    let v26 : string = " " + v20 + v25 + ""
    let v27 : string = " " + v21 + v26 + ""
    let v28 : string = " " + v22 + v27 + ""
    let v29 : string = " " + v23 + v28 + ""
    let v30 : string = " " + v24 + v29 + ""
    let v31 : (unit -> leptos_prelude_AnyView_) = method219()
    let v32 : string = "<" + v14 + " " + v30 + ">move || { v31() }</" + v14 + ">"
    let v33 : string = "leptos::prelude::view! { " + v32 + " }"
    let v34 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v34 |> unbox
    let v36 : string = "x=\"16\""
    let v37 : string = "y=\"10\""
    let v38 : string = "width=\"4\""
    let v39 : string = "height=\"10\""
    let v40 : string = "fill=\"#333\""
    let v41 : string = "opacity=\"0.2\""
    let v42 : string = " " + v36 + v6 + ""
    let v43 : string = " " + v37 + v42 + ""
    let v44 : string = " " + v38 + v43 + ""
    let v45 : string = " " + v39 + v44 + ""
    let v46 : string = " " + v40 + v45 + ""
    let v47 : string = " " + v41 + v46 + ""
    let v48 : (unit -> leptos_prelude_AnyView_) = method220()
    let v49 : string = "<" + v14 + " " + v47 + ">move || { v48() }</" + v14 + ">"
    let v50 : string = "leptos::prelude::view! { " + v49 + " }"
    let v51 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v51 |> unbox
    let v53 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let v55 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v56 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v55 
    let v57 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v58 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v57 
    let v59 : leptos_prelude_AnyView_ = method188(v54)
    let v60 : string = "v59"
    let v61 : string = v60 + v6 
    let v62 : string = v61 + v6 
    let v63 : leptos_prelude_AnyView_ = method188(v56)
    let v64 : string = "v63"
    let v65 : string = ", "
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v62 
    let v68 : leptos_prelude_AnyView_ = method188(v58)
    let v69 : string = "v68"
    let v70 : string = v69 + v65 
    let v71 : string = v70 + v67 
    let v72 : string = "vec![" + v71 + "]"
    let v73 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "leptos::prelude::Fragment::new($0)"
    let v75 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = "&$0"
    let v77 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v79 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v78 
    v79
and method216 () : (unit -> leptos_prelude_AnyView_) =
    closure214()
and closure212 (v0 : Func0<bool>) () : leptos_prelude_AnyView_ =
    let v1 : string = "Roll"
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v50 
    let v52 : string = "$0()"
    let v53 : bool = Fable.Core.RustInterop.emitRustExpr v0 v52 
    let v88 : leptos_prelude_AnyView_ =
        if v53 then
            let v54 : string = "$0"
            let v55 : (unit -> string) = closure213()
            let v56 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v55 v54 
            let v57 : string = "version=\"1.1\""
            let v58 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v59 : string = "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
            let v60 : string = "x=\"0px\""
            let v61 : string = "y=\"0px\""
            let v62 : string = "viewBox=\"0 0 24 30\""
            let v63 : string = "style=\"enable-background:new 0 0 50 50;\""
            let v64 : string = "xml:space=\"preserve\""
            let v65 : string = "class=move || \" \".to_owned() + &v56(())"
            let v66 : string = ""
            let v67 : string = " " + v57 + v66 + ""
            let v68 : string = " " + v58 + v67 + ""
            let v69 : string = " " + v59 + v68 + ""
            let v70 : string = " " + v60 + v69 + ""
            let v71 : string = " " + v61 + v70 + ""
            let v72 : string = " " + v62 + v71 + ""
            let v73 : string = " " + v63 + v72 + ""
            let v74 : string = " " + v64 + v73 + ""
            let v75 : string = " " + v65 + v74 + ""
            let v76 : (unit -> leptos_prelude_AnyView_) = method216()
            let v77 : string = "svg"
            let v78 : string = "<" + v77 + " " + v75 + ">move || { v76() }</" + v77 + ">"
            let v79 : string = "leptos::prelude::view! { " + v78 + " }"
            let v80 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v79 
            let v81 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v80 |> unbox
            let v82 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v83 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v81 v82 
            v83
        else
            let v84 : (leptos_prelude_AnyView_ []) = [||]
            let v85 : (leptos_prelude_AnyView_ []) = method177(v84)
            let v86 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v87 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v85 v86 
            v87
    let v89 : leptos_prelude_AnyView_ = method188(v88)
    let v90 : string = "v89"
    let v91 : string = ""
    let v92 : string = v90 + v91 
    let v93 : string = v92 + v91 
    let v94 : leptos_prelude_AnyView_ = method188(v51)
    let v95 : string = "v94"
    let v96 : string = ", "
    let v97 : string = v95 + v96 
    let v98 : string = v97 + v93 
    let v99 : string = "vec![" + v98 + "]"
    let v100 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v99 
    let v101 : string = "leptos::prelude::Fragment::new($0)"
    let v102 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v100 v101 
    let v103 : string = "&$0"
    let v104 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v106 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v104 v105 
    v106
and method215 (v0 : Func0<bool>) : (unit -> leptos_prelude_AnyView_) =
    closure212(v0)
and closure220 (v0 : string) () : leptos_prelude_AnyView_ =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method222 (v0 : string) : (unit -> leptos_prelude_AnyView_) =
    closure220(v0)
and closure219 (v0 : string) () : leptos_prelude_AnyView_ =
    let v1 : string = "class=\"[height:17px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method185()
    let v5 : string = "span"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
    let v13 : string = " " + v12 + v2 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method222(v0)
    let v15 : string = "pre"
    let v16 : string = "<" + v15 + " " + v13 + ">move || { v14() }</" + v15 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : leptos_prelude_AnyView_ = method188(v21)
    let v23 : string = "v22"
    let v24 : string = v23 + v2 
    let v25 : string = v24 + v2 
    let v26 : leptos_prelude_AnyView_ = method188(v11)
    let v27 : string = "v26"
    let v28 : string = ", "
    let v29 : string = v27 + v28 
    let v30 : string = v29 + v25 
    let v31 : string = "vec![" + v30 + "]"
    let v32 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "leptos::prelude::Fragment::new($0)"
    let v34 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "&$0"
    let v36 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
    v38
and method221 (v0 : string) : (unit -> leptos_prelude_AnyView_) =
    closure219(v0)
and closure209 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>, v2 : leptos_prelude_Memo<string option>) () : leptos_prelude_AnyView_ =
    let v3 : string = "Func0::new(move || $0())"
    let v4 : (unit -> bool) = closure210(v1)
    let v5 : Func0<bool> = Fable.Core.RustInterop.emitRustExpr v4 v3 
    let v6 : Func0<bool> = method214(v5)
    let v7 : (unit -> unit) = closure211(v0, v1)
    let v8 : string = "let v7 = $0"
    Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v9 : string = "class=\"flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\""
    let v10 : string = "prop:disabled=move || v6()"
    let v11 : string = "on:click=move |_| v7()"
    let v12 : string = ""
    let v13 : string = " " + v9 + v12 + ""
    let v14 : string = " " + v10 + v13 + ""
    let v15 : string = " " + v11 + v14 + ""
    let v16 : (unit -> leptos_prelude_AnyView_) = method215(v5)
    let v17 : string = "button"
    let v18 : string = "<" + v17 + " " + v15 + ">move || { v16() }</" + v17 + ">"
    let v19 : string = "leptos::prelude::view! { " + v18 + " }"
    let v20 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v20 |> unbox
    let v22 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = $"$0()"
    let v25 : string option = Fable.Core.RustInterop.emitRustExpr v2 v24 
    let v26 : (string -> US32) = method115()
    let v27 : US32 option = v25 |> Option.map v26 
    let v38 : US32 = US32_1
    let v39 : US32 = v27 |> Option.defaultValue v38 
    let v58 : leptos_prelude_AnyView_ =
        match v39 with
        | US32_0(v43) -> (* Some *)
            let v44 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v45 : string = " " + v44 + v12 + ""
            let v46 : (unit -> leptos_prelude_AnyView_) = method221(v43)
            let v47 : string = "div"
            let v48 : string = "<" + v47 + " " + v45 + ">move || { v46() }</" + v47 + ">"
            let v49 : string = "leptos::prelude::view! { " + v48 + " }"
            let v50 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v49 
            let v51 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v50 |> unbox
            let v52 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v51 v52 
            v53
        | _ ->
            let v54 : (leptos_prelude_AnyView_ []) = [||]
            let v55 : (leptos_prelude_AnyView_ []) = method177(v54)
            let v56 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v57 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v56 
            v57
    let v59 : leptos_prelude_AnyView_ = method188(v58)
    let v60 : string = "v59"
    let v61 : string = v60 + v12 
    let v62 : string = v61 + v12 
    let v63 : leptos_prelude_AnyView_ = method188(v23)
    let v64 : string = "v63"
    let v65 : string = ", "
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v62 
    let v68 : string = "vec![" + v67 + "]"
    let v69 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "leptos::prelude::Fragment::new($0)"
    let v71 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let v72 : string = "&$0"
    let v73 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v75 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v73 v74 
    v75
and method213 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>, v2 : leptos_prelude_Memo<string option>) : (unit -> leptos_prelude_AnyView_) =
    closure209(v0, v1, v2)
and closure171 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>, v2 : leptos_prelude_Memo<string option>, v3 : leptos_prelude_Memo<US32>, v4 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) () : leptos_prelude_AnyView_ =
    let v5 : string = "class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method180(v0, v3, v4)
    let v9 : string = "div"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\""
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method210(v0)
    let v19 : string = "<" + v9 + " " + v17 + ">move || { v18() }</" + v9 + ">"
    let v20 : string = "leptos::prelude::view! { " + v19 + " }"
    let v21 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v21 |> unbox
    let v23 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "class=\"flex\""
    let v26 : string = " " + v25 + v6 + ""
    let v27 : (unit -> leptos_prelude_AnyView_) = method213(v0, v1, v2)
    let v28 : string = "<" + v9 + " " + v26 + ">move || { v27() }</" + v9 + ">"
    let v29 : string = "leptos::prelude::view! { " + v28 + " }"
    let v30 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v30 |> unbox
    let v32 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v33 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : leptos_prelude_AnyView_ = method188(v33)
    let v35 : string = "v34"
    let v36 : string = v35 + v6 
    let v37 : string = v36 + v6 
    let v38 : leptos_prelude_AnyView_ = method188(v24)
    let v39 : string = "v38"
    let v40 : string = ", "
    let v41 : string = v39 + v40 
    let v42 : string = v41 + v37 
    let v43 : leptos_prelude_AnyView_ = method188(v15)
    let v44 : string = "v43"
    let v45 : string = v44 + v40 
    let v46 : string = v45 + v42 
    let v47 : string = "vec![" + v46 + "]"
    let v48 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v47 
    let v49 : string = "leptos::prelude::Fragment::new($0)"
    let v50 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v48 v49 
    let v51 : string = "&$0"
    let v52 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let v53 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v52 v53 
    v54
and method179 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>, v2 : leptos_prelude_Memo<string option>, v3 : leptos_prelude_Memo<US32>, v4 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) : (unit -> leptos_prelude_AnyView_) =
    closure171(v0, v1, v2, v3, v4)
and closure170 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>, v2 : leptos_prelude_Memo<string option>, v3 : leptos_prelude_Memo<US32>, v4 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) () : leptos_dom_Fragment =
    let v5 : string = "class=\"flex flex-col p-[10px] gap-[11px]\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method179(v0, v1, v2, v3, v4)
    let v9 : string = "div"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : leptos_prelude_AnyView_ = method188(v15)
    let v17 : string = "v16"
    let v18 : string = v17 + v6 
    let v19 : string = v18 + v6 
    let v20 : string = "vec![" + v19 + "]"
    let v21 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "leptos::prelude::Fragment::new($0)"
    let v23 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method178 (v0 : Heap2, v1 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>>, v2 : leptos_prelude_Memo<string option>, v3 : leptos_prelude_Memo<US32>, v4 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) : (unit -> leptos_dom_Fragment) =
    closure170(v0, v1, v2, v3, v4)
and closure222 () () : string =
    let v0 : string = ""
    v0
and closure223 () () : bool =
    true
and closure225 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure226 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure229 () () : string =
    let v0 : string = "Roll"
    v0
and method227 () : (unit -> string) =
    closure229()
and closure228 () () : leptos_prelude_AnyView_ =
    let v0 : (unit -> string) = method227()
    let v1 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method206(v0)
    let v5 : string = "span"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = v13 + v2 
    let v15 : string = v14 + v2 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "&$0"
    let v21 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method226 () : (unit -> leptos_prelude_AnyView_) =
    closure228()
and closure227 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"flex items-center gap-2\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method226()
    let v4 : string = "div"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v12 : string = " " + v11 + v1 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method207()
    let v14 : string = "span"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v1 
    let v24 : string = v23 + v1 
    let v25 : leptos_prelude_AnyView_ = method188(v10)
    let v26 : string = "v25"
    let v27 : string = ", "
    let v28 : string = v26 + v27 
    let v29 : string = v28 + v24 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "&$0"
    let v35 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and method225 () : (unit -> leptos_prelude_AnyView_) =
    closure227()
and closure224 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : string = "$0"
    let v2 : (unit -> string) = closure225()
    let v3 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2 v1 
    let v4 : string = "$0"
    let v5 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure226()
    let v6 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5 v4 
    let v7 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())"
    let v8 : string = ""
    let v9 : string = " " + v7 + v8 + ""
    let v10 : (unit -> leptos_prelude_AnyView_) = method225()
    let v11 : string = "summary"
    let v12 : string = "<" + v11 + " " + v9 + ">move || { v10() }</" + v11 + ">"
    let v13 : string = "leptos::prelude::view! { " + v12 + " }"
    let v14 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v14 |> unbox
    let v16 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v17 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "class=\"flex flex-1 flex-col\""
    let v19 : string = " " + v18 + v8 + ""
    let v20 : (unit -> leptos_prelude_AnyView_) = method209(v0)
    let v21 : string = "div"
    let v22 : string = "<" + v21 + " " + v19 + ">move || { v20() }</" + v21 + ">"
    let v23 : string = "leptos::prelude::view! { " + v22 + " }"
    let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v24 |> unbox
    let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_AnyView_ = method188(v27)
    let v29 : string = "v28"
    let v30 : string = v29 + v8 
    let v31 : string = v30 + v8 
    let v32 : leptos_prelude_AnyView_ = method188(v17)
    let v33 : string = "v32"
    let v34 : string = ", "
    let v35 : string = v33 + v34 
    let v36 : string = v35 + v31 
    let v37 : string = "vec![" + v36 + "]"
    let v38 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "leptos::prelude::Fragment::new($0)"
    let v40 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "&$0"
    let v42 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v44 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v44
and method224 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure224(v0)
and closure221 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure222()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> bool) = closure223()
    let v7 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method201(v0)
    let v12 : string = "div"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())"
    let v20 : string = "open=move || v7(())"
    let v21 : string = " " + v19 + v9 + ""
    let v22 : string = " " + v20 + v21 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method224(v1)
    let v24 : string = "details"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v30)
    let v32 : string = "v31"
    let v33 : string = v32 + v9 
    let v34 : string = v33 + v9 
    let v35 : leptos_prelude_AnyView_ = method188(v18)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method223 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure221(v0, v1)
and closure232 () () : leptos_prelude_AnyView_ =
    let v0 : string = "No account selected"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method230 () : (unit -> leptos_prelude_AnyView_) =
    closure232()
and closure231 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"[height:17px]\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method185()
    let v4 : string = "span"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
    let v12 : string = " " + v11 + v1 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method230()
    let v14 : string = "pre"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v1 
    let v24 : string = v23 + v1 
    let v25 : leptos_prelude_AnyView_ = method188(v10)
    let v26 : string = "v25"
    let v27 : string = ", "
    let v28 : string = v26 + v27 
    let v29 : string = v28 + v24 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "&$0"
    let v35 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and method229 () : (unit -> leptos_prelude_AnyView_) =
    closure231()
and closure234 () struct (v0 : std_string_String, v1 : std_string_String option) : struct (string * US32) =
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let v4 : (std_string_String -> US15) = method47()
    let v5 : US15 option = v1 |> Option.map v4 
    let v16 : US15 = US15_1
    let v17 : US15 = v5 |> Option.defaultValue v16 
    let v27 : US32 =
        match v17 with
        | US15_1 -> (* None *)
            US32_1
        | US15_0(v21) -> (* Some *)
            let v22 : string = "fable_library_rust::String_::fromString($0)"
            let v23 : string = Fable.Core.RustInterop.emitRustExpr v21 v22 
            US32_0(v23)
    struct (v3, v27)
and closure235 () struct (v0 : string, v1 : US32) : bool =
    let v2 : bool = "FUNCTION_CALL" = v0
    if v2 then
        match v1 with
        | US32_0(v3) -> (* Some *)
            let v4 : bool = "generate_random_number" = v3
            v4
        | _ ->
            false
    else
        false
and method232 () : (struct (string * US32) -> bool) =
    closure235()
and method233 (v0 : Vec<struct (string * US32)>) : Vec<struct (string * US32)> =
    v0
and closure233 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : bool =
    let v3 : (struct (std_string_String * std_string_String option) []) = v2.l7
    let v4 : string = "$0.to_vec()"
    let v5 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v7 : (struct (std_string_String * std_string_String option) -> struct (string * US32)) = closure234()
    let v8 : Vec<struct (string * US32)> = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    let v9 : (struct (string * US32) -> bool) = method232()
    let v10 : Vec<struct (string * US32)> = method233(v8)
    let v11 : string = "v10.into_iter().filter(|x| v9(x.clone().clone())).collect::<Vec<_>>()"
    let v12 : Vec<struct (string * US32)> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v14 : (struct (string * US32) []) = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : int32 = v14.Length
    let v16 : bool = v15 > 0
    let v17 : std_string_String = v2.l2
    let v18 : string = "fable_library_rust::String_::fromString($0)"
    let v19 : string = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : bool = v0 = v19
    let v21 : bool = v16 && v20
    v21
and method231 () : (struct (string * unativeint * Heap5) -> bool) =
    closure233()
and method234 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and closure237 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Block Timestamp"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method236 () : (unit -> leptos_prelude_AnyView_) =
    closure237()
and closure238 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Predecessor"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method237 () : (unit -> leptos_prelude_AnyView_) =
    closure238()
and closure239 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Receiver"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method238 () : (unit -> leptos_prelude_AnyView_) =
    closure239()
and closure240 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Fee"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method239 () : (unit -> leptos_prelude_AnyView_) =
    closure240()
and closure241 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Result"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method240 () : (unit -> leptos_prelude_AnyView_) =
    closure241()
and closure242 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Status"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method241 () : (unit -> leptos_prelude_AnyView_) =
    closure242()
and closure236 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method236()
    let v4 : string = "th"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v12 : string = " " + v11 + v1 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method237()
    let v14 : string = "<" + v4 + " " + v12 + ">move || { v13() }</" + v4 + ">"
    let v15 : string = "leptos::prelude::view! { " + v14 + " }"
    let v16 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v16 |> unbox
    let v18 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v19 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v21 : string = " " + v20 + v1 + ""
    let v22 : (unit -> leptos_prelude_AnyView_) = method238()
    let v23 : string = "<" + v4 + " " + v21 + ">move || { v22() }</" + v4 + ">"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v30 : string = " " + v29 + v1 + ""
    let v31 : (unit -> leptos_prelude_AnyView_) = method239()
    let v32 : string = "<" + v4 + " " + v30 + ">move || { v31() }</" + v4 + ">"
    let v33 : string = "leptos::prelude::view! { " + v32 + " }"
    let v34 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v34 |> unbox
    let v36 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v39 : string = " " + v38 + v1 + ""
    let v40 : (unit -> leptos_prelude_AnyView_) = method240()
    let v41 : string = "<" + v4 + " " + v39 + ">move || { v40() }</" + v4 + ">"
    let v42 : string = "leptos::prelude::view! { " + v41 + " }"
    let v43 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v43 |> unbox
    let v45 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v46 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v48 : string = " " + v47 + v1 + ""
    let v49 : (unit -> leptos_prelude_AnyView_) = method241()
    let v50 : string = "<" + v4 + " " + v48 + ">move || { v49() }</" + v4 + ">"
    let v51 : string = "leptos::prelude::view! { " + v50 + " }"
    let v52 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v52 |> unbox
    let v54 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : leptos_prelude_AnyView_ = method188(v55)
    let v57 : string = "v56"
    let v58 : string = v57 + v1 
    let v59 : string = v58 + v1 
    let v60 : leptos_prelude_AnyView_ = method188(v46)
    let v61 : string = "v60"
    let v62 : string = ", "
    let v63 : string = v61 + v62 
    let v64 : string = v63 + v59 
    let v65 : leptos_prelude_AnyView_ = method188(v37)
    let v66 : string = "v65"
    let v67 : string = v66 + v62 
    let v68 : string = v67 + v64 
    let v69 : leptos_prelude_AnyView_ = method188(v28)
    let v70 : string = "v69"
    let v71 : string = v70 + v62 
    let v72 : string = v71 + v68 
    let v73 : leptos_prelude_AnyView_ = method188(v19)
    let v74 : string = "v73"
    let v75 : string = v74 + v62 
    let v76 : string = v75 + v72 
    let v77 : leptos_prelude_AnyView_ = method188(v10)
    let v78 : string = "v77"
    let v79 : string = v78 + v62 
    let v80 : string = v79 + v76 
    let v81 : string = "vec![" + v80 + "]"
    let v82 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : string = "leptos::prelude::Fragment::new($0)"
    let v84 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "&$0"
    let v86 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v88 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v86 v87 
    v88
and method235 () : (unit -> leptos_prelude_AnyView_) =
    closure236()
and method244 (v0 : int64) : int64 =
    v0
and closure246 () (v0 : chrono_DateTime<chrono_Utc>) : US69 =
    US69_0(v0)
and method245 () : (chrono_DateTime<chrono_Utc> -> US69) =
    closure246()
and closure245 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l5
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : (string -> int64) = int64
    let v5 : int64 = v4 v3
    let v8 : int64 = method244(v5)
    let v9 : int64 = v8 / 1000L
    let v10 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v11 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : (chrono_DateTime<chrono_Utc> -> US69) = method245()
    let v13 : US69 option = v11 |> Option.map v12 
    let v24 : US69 = US69_1
    let v25 : US69 = v13 |> Option.defaultValue v24 
    let v44 : US32 =
        match v25 with
        | US69_1 -> (* None *)
            US32_1
        | US69_0(v29) -> (* Some *)
            let v30 : string = "$0.naive_utc()"
            let v31 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v29 v30 
            let v32 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v33 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "%Y-%m-%d %H:%M:%S"
            let v35 : string = "r#\"" + v34 + "\"#"
            let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v35 
            let v37 : string = "$0.format($1).to_string()"
            let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v33, v36) v37 
            let v39 : string = "fable_library_rust::String_::fromString($0)"
            let v40 : string = Fable.Core.RustInterop.emitRustExpr v38 v39 
            US32_0(v40)
    let v50 : US70 =
        match v44 with
        | US32_1 -> (* None *)
            let v47 : string = "resultm.from_option / Option does not have a value."
            US70_1(v47)
        | US32_0(v45) -> (* Some *)
            US70_0(v45)
    let v55 : string =
        match v50 with
        | US70_1(v52) -> (* Error *)
            let v53 : string = "sm'.to_string result / Error: " + v52 + ""
            v53
        | US70_0(v51) -> (* Ok *)
            v51
    let v56 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v55 v57 
    let _v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v55 v59 
    let _v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v55 v61 
    let _v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v55 |> unbox<Ref<Str>>
    let _v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v55 |> unbox<Ref<Str>>
    let _v56 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v69 : Ref<Str> = v55 |> unbox<Ref<Str>>
    let _v56 = v69 
    #endif
#else
    let v72 : Ref<Str> = v55 |> unbox<Ref<Str>>
    let _v56 = v72 
    #endif
    let v75 : Ref<Str> = _v56 
    let v80 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v75 v81 
    let _v80 = v82 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : string = "String::from($0)"
    let v84 : std_string_String = Fable.Core.RustInterop.emitRustExpr v75 v83 
    let _v80 = v84 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : string = "String::from($0)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr v75 v85 
    let _v80 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : std_string_String = v75 |> unbox<std_string_String>
    let _v80 = v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : std_string_String = v75 |> unbox<std_string_String>
    let _v80 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_string_String = v75 |> unbox<std_string_String>
    let _v80 = v93 
    #endif
#else
    let v96 : std_string_String = v75 |> unbox<std_string_String>
    let _v80 = v96 
    #endif
    let v99 : std_string_String = _v80 
    let v104 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v105 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v99 v104 
    let v106 : leptos_prelude_AnyView_ = method188(v105)
    let v107 : string = "v106"
    let v108 : string = ""
    let v109 : string = v107 + v108 
    let v110 : string = v109 + v108 
    let v111 : string = "vec![" + v110 + "]"
    let v112 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v111 
    let v113 : string = "leptos::prelude::Fragment::new($0)"
    let v114 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "&$0"
    let v116 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    let v117 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v118 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v116 v117 
    v118
and method243 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure245(v0)
and closure247 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l1
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v52 
    let v54 : leptos_prelude_AnyView_ = method188(v53)
    let v55 : string = "v54"
    let v56 : string = ""
    let v57 : string = v55 + v56 
    let v58 : string = v57 + v56 
    let v59 : string = "vec![" + v58 + "]"
    let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "leptos::prelude::Fragment::new($0)"
    let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "&$0"
    let v64 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method246 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure247(v0)
and closure248 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l2
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v52 
    let v54 : leptos_prelude_AnyView_ = method188(v53)
    let v55 : string = "v54"
    let v56 : string = ""
    let v57 : string = v55 + v56 
    let v58 : string = v57 + v56 
    let v59 : string = "vec![" + v58 + "]"
    let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "leptos::prelude::Fragment::new($0)"
    let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "&$0"
    let v64 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method247 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure248(v0)
and closure249 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : float = v0.l10
    let v2 : (float -> string) = _.ToString()
    let v3 : string = v2 v1
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v19 
    #endif
#else
    let v22 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v22 
    #endif
    let v25 : Ref<Str> = _v6 
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v31 
    let _v30 = v32 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v35 
    let _v30 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v40 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v43 
    #endif
#else
    let v46 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v46 
    #endif
    let v49 : std_string_String = _v30 
    let v54 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v54 
    let v56 : leptos_prelude_AnyView_ = method188(v55)
    let v57 : string = "v56"
    let v58 : string = ""
    let v59 : string = v57 + v58 
    let v60 : string = v59 + v58 
    let v61 : string = "vec![" + v60 + "]"
    let v62 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "leptos::prelude::Fragment::new($0)"
    let v64 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "&$0"
    let v66 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v64 v65 
    let v67 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v68 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method248 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure249(v0)
and method250 (v0 : int32, v1 : Mut4) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure250 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : (std_string_String []) = v0.l11
    let v2 : uint64 = System.Convert.ToUInt64 v1.Length
    let v3 : bool = v2 = 0UL
    let v152 : leptos_dom_Fragment =
        if v3 then
            let v4 : string = ""
            let v5 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : string = "&*$0"
            let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
            let _v5 = v7 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v8 : string = "&*$0"
            let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
            let _v5 = v9 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v10 : string = "&*$0"
            let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
            let _v5 = v11 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v5 = v12 
            #endif
#if FABLE_COMPILER_PYTHON
            let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v5 = v15 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v5 = v18 
            #endif
#else
            let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v5 = v21 
            #endif
            let v24 : Ref<Str> = _v5 
            let v29 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v30 : string = "String::from($0)"
            let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
            let _v29 = v31 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v32 : string = "String::from($0)"
            let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
            let _v29 = v33 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v34 : string = "String::from($0)"
            let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
            let _v29 = v35 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v36 : std_string_String = v24 |> unbox<std_string_String>
            let _v29 = v36 
            #endif
#if FABLE_COMPILER_PYTHON
            let v39 : std_string_String = v24 |> unbox<std_string_String>
            let _v29 = v39 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : std_string_String = v24 |> unbox<std_string_String>
            let _v29 = v42 
            #endif
#else
            let v45 : std_string_String = v24 |> unbox<std_string_String>
            let _v29 = v45 
            #endif
            let v48 : std_string_String = _v29 
            let v53 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v48 v53 
            let v55 : leptos_prelude_AnyView_ = method188(v54)
            let v56 : string = "v55"
            let v57 : string = v56 + v4 
            let v58 : string = v57 + v4 
            let v59 : string = "vec![" + v58 + "]"
            let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
            let v61 : string = "leptos::prelude::Fragment::new($0)"
            let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
            v62
        else
            let v63 : (std_string_String []) = v0.l11
            let v64 : int32 = v63.Length
            let v65 : US32 = US32_1
            let v66 : Mut4 = {l0 = 0; l1 = v65} : Mut4
            while method250(v64, v66) do
                let v68 : int32 = v66.l0
                let v69 : int32 =  -v68
                let v70 : int32 = v69 + v64
                let v71 : int32 = v70 - 1
                let v72 : US32 = v66.l1
                let v73 : std_string_String = v63.[int v71]
                let v74 : string = "fable_library_rust::String_::fromString($0)"
                let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
                let v76 : string = " / result: "
                let v77 : (string []) = v75.Split v76 
                let v86 : US32 =
                    match v72 with
                    | US32_1 -> (* None *)
                        let v80 : uint64 = System.Convert.ToUInt64 v77.Length
                        let v81 : bool = v80 = 2UL
                        if v81 then
                            let v82 : string = v77.[int 0]
                            let v83 : string = v77.[int 1]
                            US32_0(v83)
                        else
                            v72
                    | _ ->
                        v72
                let v87 : int32 = v68 + 1
                v66.l0 <- v87
                v66.l1 <- v86
                ()
            let v88 : US32 = v66.l1
            let v92 : string =
                match v88 with
                | US32_1 -> (* None *)
                    let v90 : string = "?"
                    v90
                | US32_0(v89) -> (* Some *)
                    v89
            let v93 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v94 : string = "&*$0"
            let v95 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v92 v94 
            let _v93 = v95 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v96 : string = "&*$0"
            let v97 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v92 v96 
            let _v93 = v97 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v98 : string = "&*$0"
            let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v92 v98 
            let _v93 = v99 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v100 : Ref<Str> = v92 |> unbox<Ref<Str>>
            let _v93 = v100 
            #endif
#if FABLE_COMPILER_PYTHON
            let v103 : Ref<Str> = v92 |> unbox<Ref<Str>>
            let _v93 = v103 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v106 : Ref<Str> = v92 |> unbox<Ref<Str>>
            let _v93 = v106 
            #endif
#else
            let v109 : Ref<Str> = v92 |> unbox<Ref<Str>>
            let _v93 = v109 
            #endif
            let v112 : Ref<Str> = _v93 
            let v117 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v118 : string = "String::from($0)"
            let v119 : std_string_String = Fable.Core.RustInterop.emitRustExpr v112 v118 
            let _v117 = v119 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v120 : string = "String::from($0)"
            let v121 : std_string_String = Fable.Core.RustInterop.emitRustExpr v112 v120 
            let _v117 = v121 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v122 : string = "String::from($0)"
            let v123 : std_string_String = Fable.Core.RustInterop.emitRustExpr v112 v122 
            let _v117 = v123 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v124 : std_string_String = v112 |> unbox<std_string_String>
            let _v117 = v124 
            #endif
#if FABLE_COMPILER_PYTHON
            let v127 : std_string_String = v112 |> unbox<std_string_String>
            let _v117 = v127 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v130 : std_string_String = v112 |> unbox<std_string_String>
            let _v117 = v130 
            #endif
#else
            let v133 : std_string_String = v112 |> unbox<std_string_String>
            let _v117 = v133 
            #endif
            let v136 : std_string_String = _v117 
            let v141 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v142 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v136 v141 
            let v143 : leptos_prelude_AnyView_ = method188(v142)
            let v144 : string = "v143"
            let v145 : string = ""
            let v146 : string = v144 + v145 
            let v147 : string = v146 + v145 
            let v148 : string = "vec![" + v147 + "]"
            let v149 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v148 
            let v150 : string = "leptos::prelude::Fragment::new($0)"
            let v151 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v149 v150 
            v151
    let v153 : string = "&$0"
    let v154 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v152 v153 
    let v155 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v156 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v154 v155 
    v156
and method249 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure250(v0)
and closure251 (v0 : Heap5, v1 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) () : leptos_prelude_AnyView_ =
    let v2 : bool = v0.l9
    let v5 : string =
        if v2 then
            let v3 : string = "Ok"
            v3
        else
            let v4 : string = "Outcome Error"
            v4
    let v6 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US64) = method171()
    let v7 : (std_string_String -> US64) = method172()
    let v8 : US64 = match v1 with Ok x -> v6 x | Error x -> v7 x
    let v34 : US60 =
        match v8 with
        | US64_1(v31) -> (* Error *)
            US60_1(v31)
        | US64_0(v9) -> (* Ok *)
            let v10 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US58) = method173()
            let v11 : US58 option = v9 |> Option.map v10 
            let v25 : US58 = US58_1
            let v26 : US58 = v11 |> Option.defaultValue v25 
            US60_0(v26)
    let v130 : US70 =
        match v34 with
        | US60_1(v125) -> (* Error *)
            let v126 : string = "fable_library_rust::String_::fromString($0)"
            let v127 : string = Fable.Core.RustInterop.emitRustExpr v125 v126 
            US70_1(v127)
        | US60_0(v35) -> (* Ok *)
            match v35 with
            | US58_0(v36, v37, v38, v39) -> (* Some *)
                let v40 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US65) = method174()
                let v41 : US65 option = v38 |> Option.map v40 
                let v57 : US65 = US65_1
                let v58 : US65 = v41 |> Option.defaultValue v57 
                match v58 with
                | US65_1 -> (* None *)
                    let v109 : string = $"%A{struct (v36, v37, v38, v39)}"
                    let v112 : int64 = 400L
                    let v113 : string = method11(v112, v109)
                    US70_0(v113)
                | US65_0(v62, v63, v64, v65, v66, v67) -> (* Some *)
                    let v68 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US65) = method174()
                    let v69 : US65 option = v38 |> Option.map v68 
                    let v85 : US65 = US65_1
                    let v86 : US65 = v69 |> Option.defaultValue v85 
                    let v99 : US32 =
                        match v86 with
                        | US65_0(v90, v91, v92, v93, v94, v95) -> (* Some *)
                            let v96 : string = string v90 + ": " + string v94 + " - " + string v95 + " (" + string v91 + ")"
                            US32_0(v96)
                        | _ ->
                            US32_1
                    let v107 : string =
                        match v99 with
                        | US32_1 -> (* None *)
                            let v101 : string = $"%A{()}"
                            let v104 : int64 = 400L
                            method11(v104, v101)
                        | US32_0(v100) -> (* Some *)
                            v100
                    US70_1(v107)
            | _ ->
                let v117 : string = $"%A{v34}"
                let v120 : int64 = 400L
                let v121 : string = method11(v120, v117)
                let v122 : string = $"RPC Response: {v121}"
                US70_1(v122)
    let v141 : string =
        match v130 with
        | US70_1(v138) -> (* Error *)
            let v139 : string = $"Error: {v138}"
            v139
        | US70_0(v131) -> (* Ok *)
            let v132 : string = $"%A{v131}"
            let v135 : int64 = 400L
            let v136 : string = method11(v135, v132)
            let v137 : string = $"RPC Response: {v136}"
            v137
    let v142 : string = $"{v5} / {v141}"
    let v143 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v144 : string = "&*$0"
    let v145 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v142 v144 
    let _v143 = v145 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v146 : string = "&*$0"
    let v147 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v142 v146 
    let _v143 = v147 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v148 : string = "&*$0"
    let v149 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v142 v148 
    let _v143 = v149 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v150 : Ref<Str> = v142 |> unbox<Ref<Str>>
    let _v143 = v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v153 : Ref<Str> = v142 |> unbox<Ref<Str>>
    let _v143 = v153 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v156 : Ref<Str> = v142 |> unbox<Ref<Str>>
    let _v143 = v156 
    #endif
#else
    let v159 : Ref<Str> = v142 |> unbox<Ref<Str>>
    let _v143 = v159 
    #endif
    let v162 : Ref<Str> = _v143 
    let v167 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v168 : string = "String::from($0)"
    let v169 : std_string_String = Fable.Core.RustInterop.emitRustExpr v162 v168 
    let _v167 = v169 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v170 : string = "String::from($0)"
    let v171 : std_string_String = Fable.Core.RustInterop.emitRustExpr v162 v170 
    let _v167 = v171 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v172 : string = "String::from($0)"
    let v173 : std_string_String = Fable.Core.RustInterop.emitRustExpr v162 v172 
    let _v167 = v173 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v174 : std_string_String = v162 |> unbox<std_string_String>
    let _v167 = v174 
    #endif
#if FABLE_COMPILER_PYTHON
    let v177 : std_string_String = v162 |> unbox<std_string_String>
    let _v167 = v177 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v180 : std_string_String = v162 |> unbox<std_string_String>
    let _v167 = v180 
    #endif
#else
    let v183 : std_string_String = v162 |> unbox<std_string_String>
    let _v167 = v183 
    #endif
    let v186 : std_string_String = _v167 
    let v191 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v192 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v186 v191 
    let v193 : leptos_prelude_AnyView_ = method188(v192)
    let v194 : string = "v193"
    let v195 : string = ""
    let v196 : string = v194 + v195 
    let v197 : string = v196 + v195 
    let v198 : string = "vec![" + v197 + "]"
    let v199 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v198 
    let v200 : string = "leptos::prelude::Fragment::new($0)"
    let v201 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v199 v200 
    let v202 : string = "&$0"
    let v203 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v201 v202 
    let v204 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v205 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v203 v204 
    v205
and method251 (v0 : Heap5, v1 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) : (unit -> leptos_prelude_AnyView_) =
    closure251(v0, v1)
and closure244 (v0 : Heap5, v1 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) () : leptos_prelude_AnyView_ =
    let v2 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v3 : string = ""
    let v4 : string = " " + v2 + v3 + ""
    let v5 : (unit -> leptos_prelude_AnyView_) = method243(v0)
    let v6 : string = "td"
    let v7 : string = "<" + v6 + " " + v4 + ">move || { v5() }</" + v6 + ">"
    let v8 : string = "leptos::prelude::view! { " + v7 + " }"
    let v9 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v9 |> unbox
    let v11 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v12 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v14 : string = " " + v13 + v3 + ""
    let v15 : (unit -> leptos_prelude_AnyView_) = method246(v0)
    let v16 : string = "<" + v6 + " " + v14 + ">move || { v15() }</" + v6 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v23 : string = " " + v22 + v3 + ""
    let v24 : (unit -> leptos_prelude_AnyView_) = method247(v0)
    let v25 : string = "<" + v6 + " " + v23 + ">move || { v24() }</" + v6 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v32 : string = " " + v31 + v3 + ""
    let v33 : (unit -> leptos_prelude_AnyView_) = method248(v0)
    let v34 : string = "<" + v6 + " " + v32 + ">move || { v33() }</" + v6 + ">"
    let v35 : string = "leptos::prelude::view! { " + v34 + " }"
    let v36 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v36 |> unbox
    let v38 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v39 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v41 : string = " " + v40 + v3 + ""
    let v42 : (unit -> leptos_prelude_AnyView_) = method249(v0)
    let v43 : string = "<" + v6 + " " + v41 + ">move || { v42() }</" + v6 + ">"
    let v44 : string = "leptos::prelude::view! { " + v43 + " }"
    let v45 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v44 
    let v46 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v45 |> unbox
    let v47 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v48 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v50 : string = " " + v49 + v3 + ""
    let v51 : (unit -> leptos_prelude_AnyView_) = method251(v0, v1)
    let v52 : string = "<" + v6 + " " + v50 + ">move || { v51() }</" + v6 + ">"
    let v53 : string = "leptos::prelude::view! { " + v52 + " }"
    let v54 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v53 
    let v55 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v54 |> unbox
    let v56 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v57 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v56 
    let v58 : leptos_prelude_AnyView_ = method188(v57)
    let v59 : string = "v58"
    let v60 : string = v59 + v3 
    let v61 : string = v60 + v3 
    let v62 : leptos_prelude_AnyView_ = method188(v48)
    let v63 : string = "v62"
    let v64 : string = ", "
    let v65 : string = v63 + v64 
    let v66 : string = v65 + v61 
    let v67 : leptos_prelude_AnyView_ = method188(v39)
    let v68 : string = "v67"
    let v69 : string = v68 + v64 
    let v70 : string = v69 + v66 
    let v71 : leptos_prelude_AnyView_ = method188(v30)
    let v72 : string = "v71"
    let v73 : string = v72 + v64 
    let v74 : string = v73 + v70 
    let v75 : leptos_prelude_AnyView_ = method188(v21)
    let v76 : string = "v75"
    let v77 : string = v76 + v64 
    let v78 : string = v77 + v74 
    let v79 : leptos_prelude_AnyView_ = method188(v12)
    let v80 : string = "v79"
    let v81 : string = v80 + v64 
    let v82 : string = v81 + v78 
    let v83 : string = "vec![" + v82 + "]"
    let v84 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = "leptos::prelude::Fragment::new($0)"
    let v86 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : string = "&$0"
    let v88 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v90 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v88 v89 
    v90
and method242 (v0 : Heap5, v1 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) : (unit -> leptos_prelude_AnyView_) =
    closure244(v0, v1)
and closure243 (v0 : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) struct (v1 : string, v2 : unativeint, v3 : Heap5) : leptos_prelude_AnyView_ =
    let v4 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v5 : (Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : int32 = v2 |> int32 
    let v13 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = v5.[int v6]
    let v16 : string = "class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\""
    let v17 : string = ""
    let v18 : string = " " + v16 + v17 + ""
    let v19 : (unit -> leptos_prelude_AnyView_) = method242(v3, v13)
    let v20 : string = "tr"
    let v21 : string = "<" + v20 + " " + v18 + ">move || { v19() }</" + v20 + ">"
    let v22 : string = "leptos::prelude::view! { " + v21 + " }"
    let v23 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v23 |> unbox
    let v25 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and closure253 (v0 : leptos_dom_Fragment) () : leptos_prelude_AnyView_ =
    let v1 : string = "&$0"
    let v2 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v4 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2 v3 
    v4
and method253 (v0 : leptos_dom_Fragment) : (unit -> leptos_prelude_AnyView_) =
    closure253(v0)
and closure254 (v0 : leptos_dom_Fragment) () : leptos_prelude_AnyView_ =
    let v1 : string = "&$0"
    let v2 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v4 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2 v3 
    v4
and method254 (v0 : leptos_dom_Fragment) : (unit -> leptos_prelude_AnyView_) =
    closure254(v0)
and closure252 (v0 : leptos_dom_Fragment, v1 : leptos_dom_Fragment) () : leptos_prelude_AnyView_ =
    let v2 : string = "class=\"ltr:text-left rtl:text-right\""
    let v3 : string = ""
    let v4 : string = " " + v2 + v3 + ""
    let v5 : (unit -> leptos_prelude_AnyView_) = method253(v0)
    let v6 : string = "thead"
    let v7 : string = "<" + v6 + " " + v4 + ">move || { v5() }</" + v6 + ">"
    let v8 : string = "leptos::prelude::view! { " + v7 + " }"
    let v9 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Thead>> = v9 |> unbox
    let v11 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v12 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "class=\"divide-y divide-gray-200 dark:divide-gray-700\""
    let v14 : string = " " + v13 + v3 + ""
    let v15 : (unit -> leptos_prelude_AnyView_) = method254(v1)
    let v16 : string = "tbody"
    let v17 : string = "<" + v16 + " " + v14 + ">move || { v15() }</" + v16 + ">"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tbody>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : leptos_prelude_AnyView_ = method188(v22)
    let v24 : string = "v23"
    let v25 : string = v24 + v3 
    let v26 : string = v25 + v3 
    let v27 : leptos_prelude_AnyView_ = method188(v12)
    let v28 : string = "v27"
    let v29 : string = ", "
    let v30 : string = v28 + v29 
    let v31 : string = v30 + v26 
    let v32 : string = "vec![" + v31 + "]"
    let v33 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v32 
    let v34 : string = "leptos::prelude::Fragment::new($0)"
    let v35 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "&$0"
    let v37 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v39 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v37 v38 
    v39
and method252 (v0 : leptos_dom_Fragment, v1 : leptos_dom_Fragment) : (unit -> leptos_prelude_AnyView_) =
    closure252(v0, v1)
and closure257 () () : string =
    let v0 : string = "[width:24px] [height:30px]"
    v0
and closure256 () () : leptos_prelude_AnyView_ =
    let v0 : string = "$0"
    let v1 : (unit -> string) = closure257()
    let v2 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1 v0 
    let v3 : string = "version=\"1.1\""
    let v4 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v5 : string = "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
    let v6 : string = "x=\"0px\""
    let v7 : string = "y=\"0px\""
    let v8 : string = "viewBox=\"0 0 24 30\""
    let v9 : string = "style=\"enable-background:new 0 0 50 50;\""
    let v10 : string = "xml:space=\"preserve\""
    let v11 : string = "class=move || \" \".to_owned() + &v2(())"
    let v12 : string = ""
    let v13 : string = " " + v3 + v12 + ""
    let v14 : string = " " + v4 + v13 + ""
    let v15 : string = " " + v5 + v14 + ""
    let v16 : string = " " + v6 + v15 + ""
    let v17 : string = " " + v7 + v16 + ""
    let v18 : string = " " + v8 + v17 + ""
    let v19 : string = " " + v9 + v18 + ""
    let v20 : string = " " + v10 + v19 + ""
    let v21 : string = " " + v11 + v20 + ""
    let v22 : (unit -> leptos_prelude_AnyView_) = method216()
    let v23 : string = "svg"
    let v24 : string = "<" + v23 + " " + v21 + ">move || { v22() }</" + v23 + ">"
    let v25 : string = "leptos::prelude::view! { " + v24 + " }"
    let v26 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v26 |> unbox
    let v28 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v29 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v30 : string = "Loading..."
    let v31 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "&*$0"
    let v33 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v32 
    let _v31 = v33 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v34 : string = "&*$0"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v34 
    let _v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : string = "&*$0"
    let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v36 
    let _v31 = v37 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v41 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v44 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v44 
    #endif
#else
    let v47 : Ref<Str> = v30 |> unbox<Ref<Str>>
    let _v31 = v47 
    #endif
    let v50 : Ref<Str> = _v31 
    let v55 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v56 : string = "String::from($0)"
    let v57 : std_string_String = Fable.Core.RustInterop.emitRustExpr v50 v56 
    let _v55 = v57 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : string = "String::from($0)"
    let v59 : std_string_String = Fable.Core.RustInterop.emitRustExpr v50 v58 
    let _v55 = v59 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : string = "String::from($0)"
    let v61 : std_string_String = Fable.Core.RustInterop.emitRustExpr v50 v60 
    let _v55 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v62 : std_string_String = v50 |> unbox<std_string_String>
    let _v55 = v62 
    #endif
#if FABLE_COMPILER_PYTHON
    let v65 : std_string_String = v50 |> unbox<std_string_String>
    let _v55 = v65 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v68 : std_string_String = v50 |> unbox<std_string_String>
    let _v55 = v68 
    #endif
#else
    let v71 : std_string_String = v50 |> unbox<std_string_String>
    let _v55 = v71 
    #endif
    let v74 : std_string_String = _v55 
    let v79 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v80 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v74 v79 
    let v81 : leptos_prelude_AnyView_ = method188(v80)
    let v82 : string = "v81"
    let v83 : string = v82 + v12 
    let v84 : string = v83 + v12 
    let v85 : leptos_prelude_AnyView_ = method188(v29)
    let v86 : string = "v85"
    let v87 : string = ", "
    let v88 : string = v86 + v87 
    let v89 : string = v88 + v84 
    let v90 : string = "vec![" + v89 + "]"
    let v91 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "leptos::prelude::Fragment::new($0)"
    let v93 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "&$0"
    let v95 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v97 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v95 v96 
    v97
and method256 () : (unit -> leptos_prelude_AnyView_) =
    closure256()
and closure255 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"flex flex-1 [gap:4px] items-center\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method256()
    let v4 : string = "div"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : leptos_prelude_AnyView_ = method188(v10)
    let v12 : string = "v11"
    let v13 : string = v12 + v1 
    let v14 : string = v13 + v1 
    let v15 : string = "vec![" + v14 + "]"
    let v16 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "leptos::prelude::Fragment::new($0)"
    let v18 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "&$0"
    let v20 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    v22
and method255 () : (unit -> leptos_prelude_AnyView_) =
    closure255()
and closure230 (v0 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>>, v1 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>, v2 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>) () : leptos_dom_Fragment =
    let v3 : string = $"$0()"
    let v4 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v6 : (struct (string * Vec<struct (string * US24 * string * bool * bool)>) []) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : uint64 = System.Convert.ToUInt64 v6.Length
    let v8 : bool = v7 = 0UL
    let v129 : leptos_prelude_AnyView_ =
        if v8 then
            let v9 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v10 : string = ""
            let v11 : string = " " + v9 + v10 + ""
            let v12 : (unit -> leptos_prelude_AnyView_) = method229()
            let v13 : string = "div"
            let v14 : string = "<" + v13 + " " + v11 + ">move || { v12() }</" + v13 + ">"
            let v15 : string = "leptos::prelude::view! { " + v14 + " }"
            let v16 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v15 
            let v17 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v16 |> unbox
            let v18 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v19 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v17 v18 
            v19
        else
            let v20 : string = $"$0()"
            let v21 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v1 v20 
            let v22 : ((struct (string * unativeint * Heap5) []) option -> US54) = method139()
            let v23 : (std_string_String -> US54) = method140()
            let v24 : US54 = match v21 with Ok x -> v22 x | Error x -> v23 x
            let v47 : US47 =
                match v24 with
                | US54_1(v44) -> (* Error *)
                    US47_1(v44)
                | US54_0(v25) -> (* Ok *)
                    let v26 : ((struct (string * unativeint * Heap5) []) -> US48) = method141()
                    let v27 : US48 option = v25 |> Option.map v26 
                    let v38 : US48 = US48_1
                    let v39 : US48 = v27 |> Option.defaultValue v38 
                    US47_0(v39)
            match v47 with
            | US47_1(v113) -> (* Error *)
                let v114 : string = "fable_library_rust::String_::fromString($0)"
                let v115 : string = Fable.Core.RustInterop.emitRustExpr v113 v114 
                let v116 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
                let v117 : string = ""
                let v118 : string = " " + v116 + v117 + ""
                let v119 : (unit -> leptos_prelude_AnyView_) = method221(v115)
                let v120 : string = "div"
                let v121 : string = "<" + v120 + " " + v118 + ">move || { v119() }</" + v120 + ">"
                let v122 : string = "leptos::prelude::view! { " + v121 + " }"
                let v123 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v122 
                let v124 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v123 |> unbox
                let v125 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v126 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v124 v125 
                v126
            | US47_0(v48) -> (* Ok *)
                match v48 with
                | US48_0(v49) -> (* Some *)
                    let v50 : string = "$0.to_vec()"
                    let v51 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v49 v50 
                    let v52 : (struct (string * unativeint * Heap5) -> bool) = method231()
                    let v53 : Vec<struct (string * unativeint * Heap5)> = method234(v51)
                    let v54 : string = "v53.into_iter().filter(|x| v52(x.clone().clone())).collect::<Vec<_>>()"
                    let v55 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v54 
                    let v56 : (unit -> leptos_prelude_AnyView_) = method235()
                    let v57 : string = "tr"
                    let v58 : string = ""
                    let v59 : string = "<" + v57 + " " + v58 + ">move || { v56() }</" + v57 + ">"
                    let v60 : string = "leptos::prelude::view! { " + v59 + " }"
                    let v61 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v60 
                    let v62 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v61 |> unbox
                    let v63 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v64 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v62 v63 
                    let v65 : leptos_prelude_AnyView_ = method188(v64)
                    let v66 : string = "v65"
                    let v67 : string = v66 + v58 
                    let v68 : string = v67 + v58 
                    let v69 : string = "vec![" + v68 + "]"
                    let v70 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v69 
                    let v71 : string = "leptos::prelude::Fragment::new($0)"
                    let v72 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v70 v71 
                    let v73 : string = $"$0()"
                    let v74 : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v0 v73 
                    let v75 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                    let v76 : (struct (string * unativeint * Heap5) -> leptos_prelude_AnyView_) = closure243(v74)
                    let v77 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr struct (v55, v76) v75 
                    let v78 : string = "fable_library_rust::NativeArray_::array_from($0)"
                    let v79 : (leptos_prelude_AnyView_ []) = Fable.Core.RustInterop.emitRustExpr v77 v78 
                    let v80 : (leptos_prelude_AnyView_ []) = method177(v79)
                    let v81 : string = "leptos::prelude::CollectView::collect_view($0)"
                    let v82 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v80 v81 
                    let v83 : leptos_prelude_AnyView_ = method188(v82)
                    let v84 : string = "v83"
                    let v85 : string = v84 + v58 
                    let v86 : string = v85 + v58 
                    let v87 : string = "vec![" + v86 + "]"
                    let v88 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v87 
                    let v89 : string = "leptos::prelude::Fragment::new($0)"
                    let v90 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v88 v89 
                    let v91 : string = "class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\""
                    let v92 : string = " " + v91 + v58 + ""
                    let v93 : (unit -> leptos_prelude_AnyView_) = method252(v72, v90)
                    let v94 : string = "table"
                    let v95 : string = "<" + v94 + " " + v92 + ">move || { v93() }</" + v94 + ">"
                    let v96 : string = "leptos::prelude::view! { " + v95 + " }"
                    let v97 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v96 
                    let v98 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Table>> = v97 |> unbox
                    let v99 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v100 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v98 v99 
                    v100
                | _ ->
                    let v101 : string = "class=\"grid place-content-center py-[10vh]\""
                    let v102 : string = ""
                    let v103 : string = " " + v101 + v102 + ""
                    let v104 : (unit -> leptos_prelude_AnyView_) = method255()
                    let v105 : string = "div"
                    let v106 : string = "<" + v105 + " " + v103 + ">move || { v104() }</" + v105 + ">"
                    let v107 : string = "leptos::prelude::view! { " + v106 + " }"
                    let v108 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v107 
                    let v109 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v108 |> unbox
                    let v110 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v111 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v109 v110 
                    v111
    let v130 : leptos_prelude_AnyView_ = method188(v129)
    let v131 : string = "v130"
    let v132 : string = ""
    let v133 : string = v131 + v132 
    let v134 : string = v133 + v132 
    let v135 : string = "vec![" + v134 + "]"
    let v136 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v135 
    let v137 : string = "leptos::prelude::Fragment::new($0)"
    let v138 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v136 v137 
    v138
and method228 (v0 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>>, v1 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>, v2 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>) : (unit -> leptos_dom_Fragment) =
    closure230(v0, v1, v2)
and closure260 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure261 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure264 () () : string =
    let v0 : string = "History"
    v0
and method261 () : (unit -> string) =
    closure264()
and closure263 () () : leptos_prelude_AnyView_ =
    let v0 : (unit -> string) = method261()
    let v1 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method206(v0)
    let v5 : string = "span"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = v13 + v2 
    let v15 : string = v14 + v2 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "&$0"
    let v21 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method260 () : (unit -> leptos_prelude_AnyView_) =
    closure263()
and closure262 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"flex items-center gap-2\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method260()
    let v4 : string = "div"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v12 : string = " " + v11 + v1 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method207()
    let v14 : string = "span"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v1 
    let v24 : string = v23 + v1 
    let v25 : leptos_prelude_AnyView_ = method188(v10)
    let v26 : string = "v25"
    let v27 : string = ", "
    let v28 : string = v26 + v27 
    let v29 : string = v28 + v24 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "&$0"
    let v35 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and method259 () : (unit -> leptos_prelude_AnyView_) =
    closure262()
and closure259 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : string = "$0"
    let v2 : (unit -> string) = closure260()
    let v3 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2 v1 
    let v4 : string = "$0"
    let v5 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure261()
    let v6 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5 v4 
    let v7 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())"
    let v8 : string = ""
    let v9 : string = " " + v7 + v8 + ""
    let v10 : (unit -> leptos_prelude_AnyView_) = method259()
    let v11 : string = "summary"
    let v12 : string = "<" + v11 + " " + v9 + ">move || { v10() }</" + v11 + ">"
    let v13 : string = "leptos::prelude::view! { " + v12 + " }"
    let v14 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v14 |> unbox
    let v16 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v17 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "class=\"flex flex-1 flex-col\""
    let v19 : string = " " + v18 + v8 + ""
    let v20 : (unit -> leptos_prelude_AnyView_) = method209(v0)
    let v21 : string = "div"
    let v22 : string = "<" + v21 + " " + v19 + ">move || { v20() }</" + v21 + ">"
    let v23 : string = "leptos::prelude::view! { " + v22 + " }"
    let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v24 |> unbox
    let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_AnyView_ = method188(v27)
    let v29 : string = "v28"
    let v30 : string = v29 + v8 
    let v31 : string = v30 + v8 
    let v32 : leptos_prelude_AnyView_ = method188(v17)
    let v33 : string = "v32"
    let v34 : string = ", "
    let v35 : string = v33 + v34 
    let v36 : string = v35 + v31 
    let v37 : string = "vec![" + v36 + "]"
    let v38 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "leptos::prelude::Fragment::new($0)"
    let v40 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "&$0"
    let v42 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v44 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v44
and method258 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure259(v0)
and closure258 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure222()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> bool) = closure223()
    let v7 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method201(v0)
    let v12 : string = "div"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())"
    let v20 : string = "open=move || v7(())"
    let v21 : string = " " + v19 + v9 + ""
    let v22 : string = " " + v20 + v21 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method258(v1)
    let v24 : string = "details"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v30)
    let v32 : string = "v31"
    let v33 : string = v32 + v9 
    let v34 : string = v33 + v9 
    let v35 : leptos_prelude_AnyView_ = method188(v18)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method257 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure258(v0, v1)
and closure267 (v0 : int32) (v1 : (bool * std_string_String)) : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) =
    let v2 : string = $"leptos::prelude::signal($0)"
    let struct (v3 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v4 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v5 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = v0, struct (v3, v4) 
    v5
and closure266 () (v0 : int32) : ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) =
    closure267(v0)
and method262 () : (int32 -> ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)))) =
    closure266()
and method263 (v0 : Vec<(bool * std_string_String)>) : Vec<(bool * std_string_String)> =
    v0
and closure265 (v0 : Heap2) () : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : Vec<(bool * std_string_String)> = v6.l0
    let v8 : (int32 -> ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)))) = method262()
    let v9 : Vec<(bool * std_string_String)> = method263(v7)
    let v10 : string = "v9.iter().enumerate().map(|(i, x)| v8(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v11 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v10 
    v11
and closure269 () (v0 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>) =
    let (a, b) = v0 
    let v1 : int32 = a
    let struct (v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v3 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    struct (v1, v2, v3)
and closure270 (v0 : int32) struct (v1 : int32, v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v3 : leptos_prelude_WriteSignal<(bool * std_string_String)>) : struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) =
    struct (v0, v1, v2)
and closure268 (v0 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v1 : leptos_prelude_ReadSignal<int32>) () : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> =
    let v2 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v3 : int32 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"$0()"
    let v5 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v7 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = closure269()
    let v8 : Vec<struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    let v9 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v10 : (struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>) -> struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)) = closure270(v3)
    let v11 : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr struct (v8, v10) v9 
    v11
and closure271 (v0 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>) () : int32 =
    let v1 : string = $"$0()"
    let v2 : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v4 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) []) = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : int32 = v4.Length
    v5
and method264 (v0 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) =
    v0
and method265 (v0 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    v0
and closure275 () (v0 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : (bool * std_string_String) =
    let (a, b) = v0 
    let v1 : int32 = a
    let struct (v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v3 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    let v10 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v11 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v2 v10 
    v11
and closure274 (v0 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>) (v1 : Heap0) : Heap0 =
    let v2 : Vec<(bool * std_string_String)> = v1.l0
    let v3 : std_string_String option = v1.l1
    let v4 : int32 = v1.l2
    let v5 : int32 = v1.l3
    let v6 : US1 = v1.l4
    let v7 : string = $"$0()"
    let v8 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v10 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) []) = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : int32 = v10.Length
    let v12 : string = ""
    let v13 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v14 
    let _v13 = v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v16 
    let _v13 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v18 : string = "&*$0"
    let v19 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v18 
    let _v13 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _v13 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _v13 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _v13 = v26 
    #endif
#else
    let v29 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _v13 = v29 
    #endif
    let v32 : Ref<Str> = _v13 
    let v37 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : string = "String::from($0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v38 
    let _v37 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v40 
    let _v37 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "String::from($0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v42 
    let _v37 = v43 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : std_string_String = v32 |> unbox<std_string_String>
    let _v37 = v44 
    #endif
#if FABLE_COMPILER_PYTHON
    let v47 : std_string_String = v32 |> unbox<std_string_String>
    let _v37 = v47 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v32 |> unbox<std_string_String>
    let _v37 = v50 
    #endif
#else
    let v53 : std_string_String = v32 |> unbox<std_string_String>
    let _v37 = v53 
    #endif
    let v56 : std_string_String = _v37 
    let v61 : (bool * std_string_String) = false, v56 
    let v62 : string = $"leptos::prelude::signal($0)"
    let struct (v63 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v64 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v65 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = v11, struct (v63, v64) 
    let v66 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = method264(v65)
    let v67 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = method265(v8)
    let v68 : string = "true; let mut v67 = v67"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "true; v67.push(v66)"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "v67"
    let v73 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v75 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> (bool * std_string_String)) = closure275()
    let v76 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v73, v75) v74 
    {l0 = v76; l1 = v3; l2 = v4; l3 = v5; l4 = v6} : Heap0
and closure276 () (v0 : int32) : int32 =
    let v1 : int32 = 1 + v0
    v1
and closure273 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v2 : leptos_prelude_WriteSignal<int32>) () : unit =
    let v3 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v4 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_RwSignal<Heap0> = v5.l3
    let v7 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v8 : (Heap0 -> Heap0) = closure274(v1)
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr struct (v6, v8) v7 
    let v10 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v11 : (int32 -> int32) = closure276()
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr struct (v2, v11) v10 
    ()
and closure272 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v2 : leptos_prelude_WriteSignal<int32>) () : unit =
    let v3 : string = "true; leptos::prelude::batch(move || $0());"
    let v4 : (unit -> unit) = closure273(v0, v1, v2)
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v4 v3 
    ()
and closure277 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure278 () () : leptos_prelude_AnyView_ =
    let v0 : string = "stroke-linecap=\"round\""
    let v1 : string = "stroke-linejoin=\"round\""
    let v2 : string = "d=\"M12 6v12m6-6H6\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v3 
    let v18 : string = v17 + v3 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method266 () : (unit -> leptos_prelude_AnyView_) =
    closure278()
and closure279 () () : std_string_String =
    let v0 : string = " bg-gray-300 hover:bg-gray-200"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure280 (v0 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>>) () : leptos_prelude_AnyView_ =
    let v1 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : leptos_prelude_AnyView_ = method188(v2)
    let v4 : string = "v3"
    let v5 : string = ""
    let v6 : string = v4 + v5 
    let v7 : string = v6 + v5 
    let v8 : string = "vec![" + v7 + "]"
    let v9 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "leptos::prelude::Fragment::new($0)"
    let v11 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "&$0"
    let v13 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    v15
and method267 (v0 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>>) : (unit -> leptos_prelude_AnyView_) =
    closure280(v0)
and method270 (v0 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>) : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>> =
    v0
and closure283 () struct (v0 : int32, v1 : int32, v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : struct (int32 * int32) =
    struct (v0, v1)
and method271 () : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> struct (int32 * int32)) =
    closure283()
and method274 (v0 : int32) : int32 =
    v0
and closure286 (v0 : int32) () : std_string_String =
    let v1 : string = "account-" + string v0 + ""
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    v45
and method277 (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure290 (v0 : int32, v1 : int32) (v2 : (bool * std_string_String)) : (bool * std_string_String) =
    let v3 : bool = v1 = v0
    let v4 : bool = method277(v3)
    if v4 then
        v2
    else
        let (a, b) = v2 
        let v5 : bool = a
        let v6 : std_string_String = b
        let v11 : bool = v5 = false
        let v12 : (bool * std_string_String) = v11, v6 
        v12
and closure289 (v0 : int32) (v1 : int32) : ((bool * std_string_String) -> (bool * std_string_String)) =
    closure290(v0, v1)
and method276 (v0 : int32) : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) =
    closure289(v0)
and closure288 (v0 : Heap2, v1 : int32) (v2 : leptos_ev_Event) : unit =
    let v3 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v4 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_RwSignal<Heap0> = v5.l3
    let v7 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v8 : Heap0 = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : Vec<(bool * std_string_String)> = v8.l0
    let v10 : std_string_String option = v8.l1
    let v11 : int32 = v8.l2
    let v12 : int32 = v8.l3
    let v13 : US1 = v8.l4
    let v14 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v15 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v16 : Heap1 = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : leptos_prelude_RwSignal<Heap0> = v16.l3
    let v18 : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) = method276(v1)
    let v19 : Vec<(bool * std_string_String)> = method263(v9)
    let v20 : string = "v19.iter().enumerate().map(|(i, x)| v18(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v21 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : Heap0 = {l0 = v21; l1 = v10; l2 = v11; l3 = v12; l4 = v13} : Heap0
    let v23 : string = $"true; leptos::prelude::SignalSet::set(&$0, $1);"
    let v24 : bool = Fable.Core.RustInterop.emitRustExpr struct (v17, v22) v23 
    ()
and closure291 (v0 : leptos_prelude_ReadSignal<(bool * std_string_String)>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let (a, b) = v2 
    let v3 : bool = a
    let v4 : std_string_String = b
    v3
and method278 (v0 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : (unit -> bool) =
    closure291(v0)
and method279 (v0 : int32) : (unit -> std_string_String) =
    closure286(v0)
and closure293 () () : leptos_prelude_AnyView_ =
    let v0 : string = "fill-rule=\"evenodd\""
    let v1 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v2 : string = "clip-rule=\"evenodd\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v3 
    let v18 : string = v17 + v3 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method281 () : (unit -> leptos_prelude_AnyView_) =
    closure293()
and closure294 () () : leptos_prelude_AnyView_ =
    let v0 : string = "fill-rule=\"evenodd\""
    let v1 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v2 : string = "clip-rule=\"evenodd\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v3 
    let v18 : string = v17 + v3 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method282 () : (unit -> leptos_prelude_AnyView_) =
    closure294()
and closure292 () () : leptos_prelude_AnyView_ =
    let v0 : string = "data-unchecked-icon"
    let v1 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v2 : string = "class=\"h-4 w-4\""
    let v3 : string = "viewBox=\"0 0 20 20\""
    let v4 : string = "fill=\"currentColor\""
    let v5 : string = ""
    let v6 : string = " " + v0 + v5 + ""
    let v7 : string = " " + v1 + v6 + ""
    let v8 : string = " " + v2 + v7 + ""
    let v9 : string = " " + v3 + v8 + ""
    let v10 : string = " " + v4 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method281()
    let v12 : string = "svg"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v15 |> unbox
    let v17 : string = "data-checked-icon"
    let v18 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v19 : string = "class=\"hidden h-4 w-4\""
    let v20 : string = "viewBox=\"0 0 20 20\""
    let v21 : string = "fill=\"currentColor\""
    let v22 : string = " " + v17 + v5 + ""
    let v23 : string = " " + v18 + v22 + ""
    let v24 : string = " " + v19 + v23 + ""
    let v25 : string = " " + v20 + v24 + ""
    let v26 : string = " " + v21 + v25 + ""
    let v27 : (unit -> leptos_prelude_AnyView_) = method282()
    let v28 : string = "<" + v12 + " " + v26 + ">move || { v27() }</" + v12 + ">"
    let v29 : string = "leptos::prelude::view! { " + v28 + " }"
    let v30 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v30 |> unbox
    let v32 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v33 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v35 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v34 
    let v36 : leptos_prelude_AnyView_ = method188(v33)
    let v37 : string = "v36"
    let v38 : string = v37 + v5 
    let v39 : string = v38 + v5 
    let v40 : leptos_prelude_AnyView_ = method188(v35)
    let v41 : string = "v40"
    let v42 : string = ", "
    let v43 : string = v41 + v42 
    let v44 : string = v43 + v39 
    let v45 : string = "vec![" + v44 + "]"
    let v46 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v45 
    let v47 : string = "leptos::prelude::Fragment::new($0)"
    let v48 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "&$0"
    let v50 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v48 v49 
    let v51 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v52 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v50 v51 
    v52
and method280 () : (unit -> leptos_prelude_AnyView_) =
    closure292()
and closure295 () () : leptos_prelude_AnyView_ =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "leptos::prelude::Fragment::new($0)"
    let v4 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "&$0"
    let v6 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method283 () : (unit -> leptos_prelude_AnyView_) =
    closure295()
and closure287 (v0 : int32, v1 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v2 : Heap2) () : leptos_prelude_AnyView_ =
    let v3 : (leptos_ev_Event -> unit) = closure288(v2, v0)
    let v4 : string = "let v3 = $0"
    Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v5 : (unit -> bool) = method278(v1)
    let v6 : (unit -> std_string_String) = method279(v0)
    let v7 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v8 : string = "type=\"checkbox\""
    let v9 : string = "id=move || v6()"
    let v10 : string = "on:change=move |event| v3(event)"
    let v11 : string = "prop:checked=move || v5()"
    let v12 : string = ""
    let v13 : string = " " + v7 + v12 + ""
    let v14 : string = " " + v8 + v13 + ""
    let v15 : string = " " + v9 + v14 + ""
    let v16 : string = " " + v10 + v15 + ""
    let v17 : string = " " + v11 + v16 + ""
    let v18 : string = "input"
    let v19 : string = "<" + v18 + " " + v17 + " />"
    let v20 : string = "leptos::prelude::view! { " + v19 + " }"
    let v21 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v21 |> unbox
    let v23 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v26 : string = " " + v25 + v12 + ""
    let v27 : (unit -> leptos_prelude_AnyView_) = method280()
    let v28 : string = "span"
    let v29 : string = "<" + v28 + " " + v26 + ">move || { v27() }</" + v28 + ">"
    let v30 : string = "leptos::prelude::view! { " + v29 + " }"
    let v31 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v31 |> unbox
    let v33 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v36 : string = " " + v35 + v12 + ""
    let v37 : (unit -> leptos_prelude_AnyView_) = method283()
    let v38 : string = "<" + v28 + " " + v36 + ">move || { v37() }</" + v28 + ">"
    let v39 : string = "leptos::prelude::view! { " + v38 + " }"
    let v40 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v40 |> unbox
    let v42 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v43 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : leptos_prelude_AnyView_ = method188(v43)
    let v45 : string = "v44"
    let v46 : string = v45 + v12 
    let v47 : string = v46 + v12 
    let v48 : leptos_prelude_AnyView_ = method188(v34)
    let v49 : string = "v48"
    let v50 : string = ", "
    let v51 : string = v49 + v50 
    let v52 : string = v51 + v47 
    let v53 : leptos_prelude_AnyView_ = method188(v24)
    let v54 : string = "v53"
    let v55 : string = v54 + v50 
    let v56 : string = v55 + v52 
    let v57 : string = "vec![" + v56 + "]"
    let v58 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "leptos::prelude::Fragment::new($0)"
    let v60 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "&$0"
    let v62 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v64 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v62 v63 
    v64
and method275 (v0 : int32, v1 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v2 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure287(v0, v1, v2)
and closure296 (v0 : leptos_prelude_ReadSignal<(bool * std_string_String)>) () : std_string_String =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let (a, b) = v2 
    let v3 : bool = a
    let v4 : std_string_String = b
    v4
and method284 (v0 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : (unit -> std_string_String) =
    closure296(v0)
and method287 (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure299 (v0 : int32, v1 : std_string_String, v2 : int32) (v3 : (bool * std_string_String)) : (bool * std_string_String) =
    let v4 : bool = v2 = v0
    let v5 : bool = method287(v4)
    if v5 then
        v3
    else
        let (a, b) = v3 
        let v6 : bool = a
        let v7 : std_string_String = b
        let v12 : (bool * std_string_String) = v6, v1 
        v12
and closure298 (v0 : int32, v1 : std_string_String) (v2 : int32) : ((bool * std_string_String) -> (bool * std_string_String)) =
    closure299(v0, v1, v2)
and method286 (v0 : int32, v1 : std_string_String) : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) =
    closure298(v0, v1)
and closure297 (v0 : Heap2, v1 : int32) (v2 : std_string_String) : unit =
    let v3 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v4 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_RwSignal<Heap0> = v5.l3
    let v7 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v8 : Heap0 = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : Vec<(bool * std_string_String)> = v8.l0
    let v10 : std_string_String option = v8.l1
    let v11 : int32 = v8.l2
    let v12 : int32 = v8.l3
    let v13 : US1 = v8.l4
    let v14 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v15 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v16 : Heap1 = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : leptos_prelude_RwSignal<Heap0> = v16.l3
    let v18 : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) = method286(v1, v2)
    let v19 : Vec<(bool * std_string_String)> = method263(v9)
    let v20 : string = "v19.iter().enumerate().map(|(i, x)| v18(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v21 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : Heap0 = {l0 = v21; l1 = v10; l2 = v11; l3 = v12; l4 = v13} : Heap0
    let v23 : string = $"true; leptos::prelude::SignalSet::set(&$0, $1);"
    let v24 : bool = Fable.Core.RustInterop.emitRustExpr struct (v17, v22) v23 
    ()
and method285 (v0 : Heap2, v1 : int32) : (std_string_String -> unit) =
    closure297(v0, v1)
and closure300 () () : string =
    let v0 : string = "flex-1"
    v0
and method288 (v0 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    v0
and closure305 () (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and method290 () : (bool -> bool) =
    closure305()
and closure304 (v0 : int32) (v1 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : bool =
    let (a, b) = v1 
    let v2 : int32 = a
    let struct (v3 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v4 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    let v11 : bool = v2 = v0
    let v12 : (bool -> bool) = method290()
    v12 v11
and method289 (v0 : int32) : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> bool) =
    closure304(v0)
and closure303 (v0 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v1 : int32) (v2 : Heap0) : Heap0 =
    let v3 : Vec<(bool * std_string_String)> = v2.l0
    let v4 : std_string_String option = v2.l1
    let v5 : int32 = v2.l2
    let v6 : int32 = v2.l3
    let v7 : US1 = v2.l4
    let v8 : string = $"$0()"
    let v9 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = method288(v9)
    let v11 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> bool) = method289(v1)
    let v12 : string = "true; let mut v10 = v10"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "true; v10.retain(|x| v11(x.clone()))"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "v10"
    let v17 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v19 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> (bool * std_string_String)) = closure275()
    let v20 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v17, v19) v18 
    {l0 = v20; l1 = v4; l2 = v5; l3 = v6; l4 = v7} : Heap0
and closure302 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v2 : leptos_prelude_WriteSignal<int32>, v3 : int32) () : unit =
    let v4 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v5 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v6 : Heap1 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : leptos_prelude_RwSignal<Heap0> = v6.l3
    let v8 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v9 : (Heap0 -> Heap0) = closure303(v1, v3)
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr struct (v7, v9) v8 
    let v11 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v12 : (int32 -> int32) = closure276()
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr struct (v2, v12) v11 
    ()
and closure301 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v2 : leptos_prelude_WriteSignal<int32>, v3 : int32) () : unit =
    let v4 : string = "true; leptos::prelude::batch(move || $0());"
    let v5 : (unit -> unit) = closure302(v0, v1, v2, v3)
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v5 v4 
    ()
and closure306 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure307 () () : leptos_prelude_AnyView_ =
    let v0 : string = "stroke-linecap=\"round\""
    let v1 : string = "stroke-linejoin=\"round\""
    let v2 : string = "d=\"M6 6l12 12m0-12L6 18\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v3 
    let v18 : string = v17 + v3 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method291 () : (unit -> leptos_prelude_AnyView_) =
    closure307()
and closure308 () () : std_string_String =
    let v0 : string = " pr-[7px] pl-[5px]"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure285 (v0 : Heap2, v1 : leptos_prelude_Memo<int32>, v2 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v3 : leptos_prelude_WriteSignal<int32>, v4 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v5 : int32) () : leptos_prelude_AnyView_ =
    let v6 : int32 = method274(v5)
    let v7 : (unit -> std_string_String) = closure286(v6)
    let v8 : string = "let v7 = $0"
    Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v9 : string = "for=move || v7()"
    let v10 : string = "class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\""
    let v11 : string = ""
    let v12 : string = " " + v9 + v11 + ""
    let v13 : string = " " + v10 + v12 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method275(v6, v4, v0)
    let v15 : string = "label"
    let v16 : string = "<" + v15 + " " + v13 + ">move || { v14() }</" + v15 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : (unit -> std_string_String) = method284(v4)
    let v23 : (std_string_String -> unit) = method285(v0, v6)
    let v24 : string = "$0"
    let v25 : (unit -> string) = closure300()
    let v26 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v25 v24 
    let v27 : string = "class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v26(())"
    let v28 : string = "prop:value=move || v22()"
    let v29 : string = "on:keyup=move |event: web_sys::KeyboardEvent| v23(leptos::prelude::event_target_value(&event))"
    let v30 : string = " " + v27 + v11 + ""
    let v31 : string = " " + v28 + v30 + ""
    let v32 : string = " " + v29 + v31 + ""
    let v33 : string = "input"
    let v34 : string = "<" + v33 + " " + v32 + " />"
    let v35 : string = "leptos::prelude::view! { " + v34 + " }"
    let v36 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v36 |> unbox
    let v38 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v39 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = $"$0()"
    let v41 : int32 = Fable.Core.RustInterop.emitRustExpr v1 v40 
    let v42 : bool = v41 = 1
    let v87 : leptos_prelude_AnyView_ =
        if v42 then
            let v43 : (leptos_prelude_AnyView_ []) = [||]
            let v44 : (leptos_prelude_AnyView_ []) = method177(v43)
            let v45 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v46 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v45 
            v46
        else
            let v47 : (unit -> unit) = closure301(v0, v2, v3, v6)
            let v48 : string = "let v47 = $0"
            Fable.Core.RustInterop.emitRustExpr v47 v48 
            let v49 : string = "$0"
            let v50 : (unit -> string) = closure306()
            let v51 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v50 v49 
            let v52 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v53 : string = "fill=\"none\""
            let v54 : string = "viewBox=\"0 0 24 24\""
            let v55 : string = "stroke-width=\"1.5\""
            let v56 : string = "stroke=\"currentColor\""
            let v57 : string = "class=move || \" \".to_owned() + &v51(())"
            let v58 : string = " " + v52 + v11 + ""
            let v59 : string = " " + v53 + v58 + ""
            let v60 : string = " " + v54 + v59 + ""
            let v61 : string = " " + v55 + v60 + ""
            let v62 : string = " " + v56 + v61 + ""
            let v63 : string = " " + v57 + v62 + ""
            let v64 : (unit -> leptos_prelude_AnyView_) = method291()
            let v65 : string = "svg"
            let v66 : string = "<" + v65 + " " + v63 + ">move || { v64() }</" + v65 + ">"
            let v67 : string = "leptos::prelude::view! { " + v66 + " }"
            let v68 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v67 
            let v69 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v68 |> unbox
            let v70 : string = "on:click=move |_| v47()"
            let v71 : string = "aria-label=\"Delete\""
            let v72 : string = "$0"
            let v73 : (unit -> std_string_String) = closure308()
            let v74 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v73 v72 
            let v75 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v74(())"
            let v76 : string = " " + v75 + v11 + ""
            let v77 : string = " " + v70 + v76 + ""
            let v78 : string = " " + v71 + v77 + ""
            let v79 : (unit -> leptos_prelude_AnyView_) = method267(v69)
            let v80 : string = "button"
            let v81 : string = "<" + v80 + " " + v78 + ">move || { v79() }</" + v80 + ">"
            let v82 : string = "leptos::prelude::view! { " + v81 + " }"
            let v83 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v82 
            let v84 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v83 |> unbox
            let v85 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v86 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v84 v85 
            v86
    let v88 : leptos_prelude_AnyView_ = method188(v87)
    let v89 : string = "v88"
    let v90 : string = v89 + v11 
    let v91 : string = v90 + v11 
    let v92 : leptos_prelude_AnyView_ = method188(v39)
    let v93 : string = "v92"
    let v94 : string = ", "
    let v95 : string = v93 + v94 
    let v96 : string = v95 + v91 
    let v97 : leptos_prelude_AnyView_ = method188(v21)
    let v98 : string = "v97"
    let v99 : string = v98 + v94 
    let v100 : string = v99 + v96 
    let v101 : string = "vec![" + v100 + "]"
    let v102 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v101 
    let v103 : string = "leptos::prelude::Fragment::new($0)"
    let v104 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : string = "&$0"
    let v106 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v104 v105 
    let v107 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v106 v107 
    v108
and method273 (v0 : Heap2, v1 : leptos_prelude_Memo<int32>, v2 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v3 : leptos_prelude_WriteSignal<int32>, v4 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v5 : int32) : (unit -> leptos_prelude_AnyView_) =
    closure285(v0, v1, v2, v3, v4, v5)
and closure284 (v0 : Heap2, v1 : leptos_prelude_Memo<int32>, v2 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v3 : leptos_prelude_WriteSignal<int32>) struct (v4 : int32, v5 : int32, v6 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : leptos_dom_Fragment =
    let v7 : string = "class=\"flex gap-[8px] [align-items:center]\""
    let v8 : string = ""
    let v9 : string = " " + v7 + v8 + ""
    let v10 : (unit -> leptos_prelude_AnyView_) = method273(v0, v1, v2, v3, v6, v5)
    let v11 : string = "div"
    let v12 : string = "<" + v11 + " " + v9 + ">move || { v10() }</" + v11 + ">"
    let v13 : string = "leptos::prelude::view! { " + v12 + " }"
    let v14 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v14 |> unbox
    let v16 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v17 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : leptos_prelude_AnyView_ = method188(v17)
    let v19 : string = "v18"
    let v20 : string = v19 + v8 
    let v21 : string = v20 + v8 
    let v22 : string = "vec![" + v21 + "]"
    let v23 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : string = "leptos::prelude::Fragment::new($0)"
    let v25 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v23 v24 
    v25
and method272 (v0 : Heap2, v1 : leptos_prelude_Memo<int32>, v2 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v3 : leptos_prelude_WriteSignal<int32>) : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> leptos_dom_Fragment) =
    closure284(v0, v1, v2, v3)
and closure282 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>, v2 : leptos_prelude_Memo<int32>, v3 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v4 : leptos_prelude_WriteSignal<int32>) () : leptos_prelude_AnyView_ =
    let v5 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>> = method270(v1)
    let v6 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> struct (int32 * int32)) = method271()
    let v7 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> leptos_dom_Fragment) = method272(v0, v2, v3, v4)
    let v8 : string = "each=v5"
    let v9 : string = "key=move |x| v6(x.to_owned())"
    let v10 : string = "let:x"
    let v11 : string = "children=move |x| v7(x)"
    let v12 : string = ""
    let v13 : string = " " + v8 + v12 + ""
    let v14 : string = " " + v9 + v13 + ""
    let v15 : string = " " + v10 + v14 + ""
    let v16 : string = " " + v11 + v15 + ""
    let v17 : string = "leptos::prelude::For"
    let v18 : string = "<" + v17 + " " + v16 + " />"
    let v19 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { " + v18 + " })"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v12 
    let v24 : string = v23 + v12 
    let v25 : string = "vec![" + v24 + "]"
    let v26 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : string = "leptos::prelude::Fragment::new($0)"
    let v28 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "&$0"
    let v30 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v32 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v30 v31 
    v32
and method269 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>, v2 : leptos_prelude_Memo<int32>, v3 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v4 : leptos_prelude_WriteSignal<int32>) : (unit -> leptos_prelude_AnyView_) =
    closure282(v0, v1, v2, v3, v4)
and closure281 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>, v2 : leptos_prelude_Memo<int32>, v3 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v4 : leptos_prelude_WriteSignal<int32>) () : leptos_dom_Fragment =
    let v5 : string = "class=\"flex flex-1 flex-col p-[8px] gap-[8px]\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method269(v0, v1, v2, v3, v4)
    let v9 : string = "div"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : leptos_prelude_AnyView_ = method188(v15)
    let v17 : string = "v16"
    let v18 : string = v17 + v6 
    let v19 : string = v18 + v6 
    let v20 : string = "vec![" + v19 + "]"
    let v21 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "leptos::prelude::Fragment::new($0)"
    let v23 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method268 (v0 : Heap2, v1 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>, v2 : leptos_prelude_Memo<int32>, v3 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v4 : leptos_prelude_WriteSignal<int32>) : (unit -> leptos_dom_Fragment) =
    closure281(v0, v1, v2, v3, v4)
and closure311 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure312 (v0 : leptos_prelude_AnyView_) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = "[margin-right:40px]"
    let v2 : string = "r#\"" + v1 + "\"#"
    let v3 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v2 
    v3
and closure315 () () : string =
    let v0 : string = "Accounts"
    v0
and method296 (v0 : leptos_prelude_AnyView_) : (unit -> string) =
    closure315()
and closure314 (v0 : leptos_prelude_AnyView_) () : leptos_prelude_AnyView_ =
    let v1 : (unit -> string) = method296(v0)
    let v2 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v3 : string = ""
    let v4 : string = " " + v2 + v3 + ""
    let v5 : (unit -> leptos_prelude_AnyView_) = method206(v1)
    let v6 : string = "span"
    let v7 : string = "<" + v6 + " " + v4 + ">move || { v5() }</" + v6 + ">"
    let v8 : string = "leptos::prelude::view! { " + v7 + " }"
    let v9 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v9 |> unbox
    let v11 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v12 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_prelude_AnyView_ = method188(v12)
    let v14 : string = "v13"
    let v15 : string = v14 + v3 
    let v16 : string = v15 + v3 
    let v17 : string = "vec![" + v16 + "]"
    let v18 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = "leptos::prelude::Fragment::new($0)"
    let v20 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "&$0"
    let v22 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    v24
and method295 (v0 : leptos_prelude_AnyView_) : (unit -> leptos_prelude_AnyView_) =
    closure314(v0)
and closure313 (v0 : leptos_prelude_AnyView_) () : leptos_prelude_AnyView_ =
    let v1 : string = "class=\"flex items-center gap-2\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method295(v0)
    let v5 : string = "div"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v13 : string = " " + v12 + v2 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method207()
    let v15 : string = "span"
    let v16 : string = "<" + v15 + " " + v13 + ">move || { v14() }</" + v15 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : leptos_prelude_AnyView_ = method188(v21)
    let v23 : string = "v22"
    let v24 : string = v23 + v2 
    let v25 : string = v24 + v2 
    let v26 : leptos_prelude_AnyView_ = method188(v11)
    let v27 : string = "v26"
    let v28 : string = ", "
    let v29 : string = v27 + v28 
    let v30 : string = v29 + v25 
    let v31 : string = "vec![" + v30 + "]"
    let v32 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "leptos::prelude::Fragment::new($0)"
    let v34 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "&$0"
    let v36 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
    v38
and method294 (v0 : leptos_prelude_AnyView_) : (unit -> leptos_prelude_AnyView_) =
    closure313(v0)
and closure310 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure311()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure312(v0)
    let v7 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v7(()) + \" \" + &v4(())"
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method294(v0)
    let v12 : string = "summary"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=\"flex flex-1 flex-col\""
    let v20 : string = " " + v19 + v9 + ""
    let v21 : (unit -> leptos_prelude_AnyView_) = method209(v1)
    let v22 : string = "div"
    let v23 : string = "<" + v22 + " " + v20 + ">move || { v21() }</" + v22 + ">"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : leptos_prelude_AnyView_ = method188(v28)
    let v30 : string = "v29"
    let v31 : string = v30 + v9 
    let v32 : string = v31 + v9 
    let v33 : leptos_prelude_AnyView_ = method188(v18)
    let v34 : string = "v33"
    let v35 : string = ", "
    let v36 : string = v34 + v35 
    let v37 : string = v36 + v32 
    let v38 : string = "vec![" + v37 + "]"
    let v39 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v38 
    let v40 : string = "leptos::prelude::Fragment::new($0)"
    let v41 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "&$0"
    let v43 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v45 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v43 v44 
    v45
and method293 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure310(v0, v1)
and closure309 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure222()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> bool) = closure223()
    let v7 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method201(v0)
    let v12 : string = "div"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())"
    let v20 : string = "open=move || v7(())"
    let v21 : string = " " + v19 + v9 + ""
    let v22 : string = " " + v20 + v21 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method293(v0, v1)
    let v24 : string = "details"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v30)
    let v32 : string = "v31"
    let v33 : string = v32 + v9 
    let v34 : string = v33 + v9 
    let v35 : leptos_prelude_AnyView_ = method188(v18)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method292 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure309(v0, v1)
and closure318 () () : leptos_dom_Fragment =
    let v0 : string = "Dark Mode"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method299 () : (unit -> leptos_dom_Fragment) =
    closure318()
and closure320 () () : std_string_String =
    let v0 : string = "dark-mode"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure323 () (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure322 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<bool> = v4.l0
    let v6 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v7 : (bool -> bool) = closure323()
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    ()
and closure324 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<bool> = v3.l0
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method302 (v0 : Heap2) : (unit -> bool) =
    closure324(v0)
and method303 () : (unit -> std_string_String) =
    closure320()
and closure321 (v0 : Heap2) () : leptos_prelude_AnyView_ =
    let v1 : (leptos_ev_Event -> unit) = closure322(v0)
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : (unit -> bool) = method302(v0)
    let v4 : (unit -> std_string_String) = method303()
    let v5 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v6 : string = "type=\"checkbox\""
    let v7 : string = "id=move || v4()"
    let v8 : string = "on:change=move |event| v1(event)"
    let v9 : string = "prop:checked=move || v3()"
    let v10 : string = ""
    let v11 : string = " " + v5 + v10 + ""
    let v12 : string = " " + v6 + v11 + ""
    let v13 : string = " " + v7 + v12 + ""
    let v14 : string = " " + v8 + v13 + ""
    let v15 : string = " " + v9 + v14 + ""
    let v16 : string = "input"
    let v17 : string = "<" + v16 + " " + v15 + " />"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v24 : string = " " + v23 + v10 + ""
    let v25 : (unit -> leptos_prelude_AnyView_) = method280()
    let v26 : string = "span"
    let v27 : string = "<" + v26 + " " + v24 + ">move || { v25() }</" + v26 + ">"
    let v28 : string = "leptos::prelude::view! { " + v27 + " }"
    let v29 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v29 |> unbox
    let v31 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v32 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v34 : string = " " + v33 + v10 + ""
    let v35 : (unit -> leptos_prelude_AnyView_) = method283()
    let v36 : string = "<" + v26 + " " + v34 + ">move || { v35() }</" + v26 + ">"
    let v37 : string = "leptos::prelude::view! { " + v36 + " }"
    let v38 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v38 |> unbox
    let v40 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v41 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : leptos_prelude_AnyView_ = method188(v41)
    let v43 : string = "v42"
    let v44 : string = v43 + v10 
    let v45 : string = v44 + v10 
    let v46 : leptos_prelude_AnyView_ = method188(v32)
    let v47 : string = "v46"
    let v48 : string = ", "
    let v49 : string = v47 + v48 
    let v50 : string = v49 + v45 
    let v51 : leptos_prelude_AnyView_ = method188(v22)
    let v52 : string = "v51"
    let v53 : string = v52 + v48 
    let v54 : string = v53 + v50 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : string = "&$0"
    let v60 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v62 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v60 v61 
    v62
and method301 (v0 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure321(v0)
and closure319 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : (unit -> std_string_String) = closure320()
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : string = "for=move || v1()"
    let v4 : string = "class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\""
    let v5 : string = ""
    let v6 : string = " " + v3 + v5 + ""
    let v7 : string = " " + v4 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method301(v0)
    let v9 : string = "label"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : leptos_prelude_AnyView_ = method188(v15)
    let v17 : string = "v16"
    let v18 : string = v17 + v5 
    let v19 : string = v18 + v5 
    let v20 : string = "vec![" + v19 + "]"
    let v21 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "leptos::prelude::Fragment::new($0)"
    let v23 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method300 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure319(v0)
and closure325 () () : string =
    let v0 : string = "items-center p-0"
    v0
and closure326 () () : string =
    let v0 : string = "pt-[9px] pr-[10px] pb-[11px] pl-[10px]"
    v0
and closure327 () () : string =
    let v0 : string = "sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]"
    v0
and closure329 () () : string =
    let v0 : string = "[overflow:auto]"
    v0
and closure330 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_dom_Fragment = v0 ()
    let v2 : string = "&$0"
    let v3 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v5 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method305 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure330(v0)
and closure328 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method304 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure328(v0, v1)
and closure331 () () : leptos_dom_Fragment =
    let v0 : string = "Debug"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method306 () : (unit -> leptos_dom_Fragment) =
    closure331()
and closure333 () () : std_string_String =
    let v0 : string = "debug"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure335 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<bool> = v4.l1
    let v6 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v7 : (bool -> bool) = closure323()
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    ()
and closure336 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<bool> = v3.l1
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method309 (v0 : Heap2) : (unit -> bool) =
    closure336(v0)
and method310 () : (unit -> std_string_String) =
    closure333()
and closure334 (v0 : Heap2) () : leptos_prelude_AnyView_ =
    let v1 : (leptos_ev_Event -> unit) = closure335(v0)
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : (unit -> bool) = method309(v0)
    let v4 : (unit -> std_string_String) = method310()
    let v5 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v6 : string = "type=\"checkbox\""
    let v7 : string = "id=move || v4()"
    let v8 : string = "on:change=move |event| v1(event)"
    let v9 : string = "prop:checked=move || v3()"
    let v10 : string = ""
    let v11 : string = " " + v5 + v10 + ""
    let v12 : string = " " + v6 + v11 + ""
    let v13 : string = " " + v7 + v12 + ""
    let v14 : string = " " + v8 + v13 + ""
    let v15 : string = " " + v9 + v14 + ""
    let v16 : string = "input"
    let v17 : string = "<" + v16 + " " + v15 + " />"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v24 : string = " " + v23 + v10 + ""
    let v25 : (unit -> leptos_prelude_AnyView_) = method280()
    let v26 : string = "span"
    let v27 : string = "<" + v26 + " " + v24 + ">move || { v25() }</" + v26 + ">"
    let v28 : string = "leptos::prelude::view! { " + v27 + " }"
    let v29 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v29 |> unbox
    let v31 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v32 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v34 : string = " " + v33 + v10 + ""
    let v35 : (unit -> leptos_prelude_AnyView_) = method283()
    let v36 : string = "<" + v26 + " " + v34 + ">move || { v35() }</" + v26 + ">"
    let v37 : string = "leptos::prelude::view! { " + v36 + " }"
    let v38 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v38 |> unbox
    let v40 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v41 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : leptos_prelude_AnyView_ = method188(v41)
    let v43 : string = "v42"
    let v44 : string = v43 + v10 
    let v45 : string = v44 + v10 
    let v46 : leptos_prelude_AnyView_ = method188(v32)
    let v47 : string = "v46"
    let v48 : string = ", "
    let v49 : string = v47 + v48 
    let v50 : string = v49 + v45 
    let v51 : leptos_prelude_AnyView_ = method188(v22)
    let v52 : string = "v51"
    let v53 : string = v52 + v48 
    let v54 : string = v53 + v50 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : string = "&$0"
    let v60 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v62 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v60 v61 
    v62
and method308 (v0 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure334(v0)
and closure332 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : (unit -> std_string_String) = closure333()
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : string = "for=move || v1()"
    let v4 : string = "class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\""
    let v5 : string = ""
    let v6 : string = " " + v3 + v5 + ""
    let v7 : string = " " + v4 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method308(v0)
    let v9 : string = "label"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : leptos_prelude_AnyView_ = method188(v15)
    let v17 : string = "v16"
    let v18 : string = v17 + v5 
    let v19 : string = v18 + v5 
    let v20 : string = "vec![" + v19 + "]"
    let v21 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "leptos::prelude::Fragment::new($0)"
    let v23 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method307 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure332(v0)
and closure337 () () : string =
    let v0 : string = "items-center p-0"
    v0
and closure338 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method311 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure338(v0, v1)
and closure317 (v0 : Heap2) () : leptos_prelude_AnyView_ =
    let v1 : (unit -> leptos_dom_Fragment) = method299()
    let v2 : (unit -> leptos_dom_Fragment) = method300(v0)
    let v3 : string = "$0"
    let v4 : (unit -> string) = closure325()
    let v5 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4 v3 
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure326()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure327()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())"
    let v13 : string = ""
    let v14 : string = " " + v12 + v13 + ""
    let v15 : (unit -> leptos_prelude_AnyView_) = method304(v1, v2)
    let v16 : string = "dl"
    let v17 : string = "<" + v16 + " " + v14 + ">move || { v15() }</" + v16 + ">"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v19 |> unbox
    let v21 : (unit -> leptos_dom_Fragment) = method306()
    let v22 : (unit -> leptos_dom_Fragment) = method307(v0)
    let v23 : string = "$0"
    let v24 : (unit -> string) = closure337()
    let v25 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v24 v23 
    let v26 : string = "$0"
    let v27 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v26 
    let v28 : string = "$0"
    let v29 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v28 
    let v30 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v27(()) + \" \" + &v25(())"
    let v31 : string = " " + v30 + v13 + ""
    let v32 : (unit -> leptos_prelude_AnyView_) = method311(v21, v22)
    let v33 : string = "<" + v16 + " " + v31 + ">move || { v32() }</" + v16 + ">"
    let v34 : string = "leptos::prelude::view! { " + v33 + " }"
    let v35 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v35 |> unbox
    let v37 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v40 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v39 
    let v41 : leptos_prelude_AnyView_ = method188(v38)
    let v42 : string = "v41"
    let v43 : string = v42 + v13 
    let v44 : string = v43 + v13 
    let v45 : leptos_prelude_AnyView_ = method188(v40)
    let v46 : string = "v45"
    let v47 : string = ", "
    let v48 : string = v46 + v47 
    let v49 : string = v48 + v44 
    let v50 : string = "vec![" + v49 + "]"
    let v51 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "&$0"
    let v55 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v57 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v56 
    v57
and method298 (v0 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure317(v0)
and closure316 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : string = "class=\"flex flex-1 flex-col p-[11px] gap-[11px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method298(v0)
    let v5 : string = "div"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = v13 + v2 
    let v15 : string = v14 + v2 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    v19
and method297 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure316(v0)
and closure341 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure342 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure345 () () : string =
    let v0 : string = "View"
    v0
and method316 () : (unit -> string) =
    closure345()
and closure344 () () : leptos_prelude_AnyView_ =
    let v0 : (unit -> string) = method316()
    let v1 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method206(v0)
    let v5 : string = "span"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = v13 + v2 
    let v15 : string = v14 + v2 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "&$0"
    let v21 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method315 () : (unit -> leptos_prelude_AnyView_) =
    closure344()
and closure343 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"flex items-center gap-2\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method315()
    let v4 : string = "div"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v12 : string = " " + v11 + v1 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method207()
    let v14 : string = "span"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v1 
    let v24 : string = v23 + v1 
    let v25 : leptos_prelude_AnyView_ = method188(v10)
    let v26 : string = "v25"
    let v27 : string = ", "
    let v28 : string = v26 + v27 
    let v29 : string = v28 + v24 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "&$0"
    let v35 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and method314 () : (unit -> leptos_prelude_AnyView_) =
    closure343()
and closure340 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : string = "$0"
    let v2 : (unit -> string) = closure341()
    let v3 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2 v1 
    let v4 : string = "$0"
    let v5 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure342()
    let v6 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5 v4 
    let v7 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())"
    let v8 : string = ""
    let v9 : string = " " + v7 + v8 + ""
    let v10 : (unit -> leptos_prelude_AnyView_) = method314()
    let v11 : string = "summary"
    let v12 : string = "<" + v11 + " " + v9 + ">move || { v10() }</" + v11 + ">"
    let v13 : string = "leptos::prelude::view! { " + v12 + " }"
    let v14 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v14 |> unbox
    let v16 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v17 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "class=\"flex flex-1 flex-col\""
    let v19 : string = " " + v18 + v8 + ""
    let v20 : (unit -> leptos_prelude_AnyView_) = method209(v0)
    let v21 : string = "div"
    let v22 : string = "<" + v21 + " " + v19 + ">move || { v20() }</" + v21 + ">"
    let v23 : string = "leptos::prelude::view! { " + v22 + " }"
    let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v24 |> unbox
    let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_AnyView_ = method188(v27)
    let v29 : string = "v28"
    let v30 : string = v29 + v8 
    let v31 : string = v30 + v8 
    let v32 : leptos_prelude_AnyView_ = method188(v17)
    let v33 : string = "v32"
    let v34 : string = ", "
    let v35 : string = v33 + v34 
    let v36 : string = v35 + v31 
    let v37 : string = "vec![" + v36 + "]"
    let v38 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "leptos::prelude::Fragment::new($0)"
    let v40 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "&$0"
    let v42 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v44 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v44
and method313 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure340(v0)
and closure339 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure222()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> bool) = closure223()
    let v7 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method201(v0)
    let v12 : string = "div"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())"
    let v20 : string = "open=move || v7(())"
    let v21 : string = " " + v19 + v9 + ""
    let v22 : string = " " + v20 + v21 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method313(v1)
    let v24 : string = "details"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v30)
    let v32 : string = "v31"
    let v33 : string = v32 + v9 
    let v34 : string = v33 + v9 
    let v35 : leptos_prelude_AnyView_ = method188(v18)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method312 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure339(v0, v1)
and closure347 () () : leptos_dom_Fragment =
    let v0 : string = "Global State"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method318 () : (unit -> leptos_dom_Fragment) =
    closure347()
and method320 (v0 : Heap2) : Heap2 =
    v0
and closure350 () (v0 : std_string_String) : US71 =
    US71_0(v0)
and method321 () : (std_string_String -> US71) =
    closure350()
and closure351 () (v0 : std_string_String) : US71 =
    US71_1(v0)
and method322 () : (std_string_String -> US71) =
    closure351()
and closure349 (v0 : Heap2) () : string =
    let v1 : string = "settings_view.global_state_log_render () / global_state_json memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : Heap2 = method320(v0)
    let v5 : string = "serde_json::to_string_pretty(&v4).map_err(|x| x.to_string())"
    let v6 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : (std_string_String -> US71) = method321()
    let v8 : (std_string_String -> US71) = method322()
    let v9 : US71 = match v6 with Ok x -> v7 x | Error x -> v8 x
    match v9 with
    | US71_1(v13) -> (* Error *)
        let v14 : string = "Error: " + string v13 + ""
        v14
    | US71_0(v10) -> (* Ok *)
        let v11 : string = "fable_library_rust::String_::fromString($0)"
        let v12 : string = Fable.Core.RustInterop.emitRustExpr v10 v11 
        v12
and closure352 () () : string =
    let v0 : string = ""
    v0
and closure353 (v0 : string) () : leptos_prelude_AnyView_ =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method323 (v0 : string) : (unit -> leptos_prelude_AnyView_) =
    closure353(v0)
and closure348 () () : leptos_dom_Fragment =
    let v0 : string = "settings_view.global_state_log_render ()"
    let v1 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v4 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "$0.unwrap()"
    let v6 : Heap2 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0"
    let v8 : (unit -> string) = closure349(v6)
    let v9 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v8 v7 
    let v10 : string = "leptos::prelude::Memo::new(move |_| { v9(()) })"
    let v11 : leptos_prelude_Memo<string> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = $"$0()"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0"
    let v15 : (unit -> string) = closure352()
    let v16 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v15 v14 
    let v17 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v16(())"
    let v18 : string = ""
    let v19 : string = " " + v17 + v18 + ""
    let v20 : (unit -> leptos_prelude_AnyView_) = method323(v13)
    let v21 : string = "pre"
    let v22 : string = "<" + v21 + " " + v19 + ">move || { v20() }</" + v21 + ">"
    let v23 : string = "leptos::prelude::view! { " + v22 + " }"
    let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v24 |> unbox
    let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_AnyView_ = method188(v27)
    let v29 : string = "v28"
    let v30 : string = v29 + v18 
    let v31 : string = v30 + v18 
    let v32 : string = "vec![" + v31 + "]"
    let v33 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v32 
    let v34 : string = "leptos::prelude::Fragment::new($0)"
    let v35 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v33 v34 
    v35
and method319 () : (unit -> leptos_dom_Fragment) =
    closure348()
and closure354 () () : string =
    let v0 : string = ""
    v0
and closure355 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method324 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure355(v0, v1)
and closure346 () () : leptos_dom_Fragment =
    let v0 : (unit -> leptos_dom_Fragment) = method318()
    let v1 : (unit -> leptos_dom_Fragment) = method319()
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure354()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> string) = closure326()
    let v7 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "$0"
    let v9 : (unit -> string) = closure327()
    let v10 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v9 v8 
    let v11 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())"
    let v12 : string = ""
    let v13 : string = " " + v11 + v12 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method324(v0, v1)
    let v15 : string = "dl"
    let v16 : string = "<" + v15 + " " + v13 + ">move || { v14() }</" + v15 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : leptos_prelude_AnyView_ = method188(v21)
    let v23 : string = "v22"
    let v24 : string = v23 + v12 
    let v25 : string = v24 + v12 
    let v26 : string = "vec![" + v25 + "]"
    let v27 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "leptos::prelude::Fragment::new($0)"
    let v29 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v27 v28 
    v29
and method317 () : (unit -> leptos_dom_Fragment) =
    closure346()
and closure358 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure359 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure362 () () : string =
    let v0 : string = "Debug"
    v0
and method329 () : (unit -> string) =
    closure362()
and closure361 () () : leptos_prelude_AnyView_ =
    let v0 : (unit -> string) = method329()
    let v1 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method206(v0)
    let v5 : string = "span"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = v13 + v2 
    let v15 : string = v14 + v2 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "&$0"
    let v21 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method328 () : (unit -> leptos_prelude_AnyView_) =
    closure361()
and closure360 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"flex items-center gap-2\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method328()
    let v4 : string = "div"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v12 : string = " " + v11 + v1 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method207()
    let v14 : string = "span"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v1 
    let v24 : string = v23 + v1 
    let v25 : leptos_prelude_AnyView_ = method188(v10)
    let v26 : string = "v25"
    let v27 : string = ", "
    let v28 : string = v26 + v27 
    let v29 : string = v28 + v24 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "&$0"
    let v35 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and method327 () : (unit -> leptos_prelude_AnyView_) =
    closure360()
and closure357 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : string = "$0"
    let v2 : (unit -> string) = closure358()
    let v3 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2 v1 
    let v4 : string = "$0"
    let v5 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure359()
    let v6 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5 v4 
    let v7 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())"
    let v8 : string = ""
    let v9 : string = " " + v7 + v8 + ""
    let v10 : (unit -> leptos_prelude_AnyView_) = method327()
    let v11 : string = "summary"
    let v12 : string = "<" + v11 + " " + v9 + ">move || { v10() }</" + v11 + ">"
    let v13 : string = "leptos::prelude::view! { " + v12 + " }"
    let v14 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v14 |> unbox
    let v16 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v17 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "class=\"flex flex-1 flex-col\""
    let v19 : string = " " + v18 + v8 + ""
    let v20 : (unit -> leptos_prelude_AnyView_) = method209(v0)
    let v21 : string = "div"
    let v22 : string = "<" + v21 + " " + v19 + ">move || { v20() }</" + v21 + ">"
    let v23 : string = "leptos::prelude::view! { " + v22 + " }"
    let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v24 |> unbox
    let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_AnyView_ = method188(v27)
    let v29 : string = "v28"
    let v30 : string = v29 + v8 
    let v31 : string = v30 + v8 
    let v32 : leptos_prelude_AnyView_ = method188(v17)
    let v33 : string = "v32"
    let v34 : string = ", "
    let v35 : string = v33 + v34 
    let v36 : string = v35 + v31 
    let v37 : string = "vec![" + v36 + "]"
    let v38 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "leptos::prelude::Fragment::new($0)"
    let v40 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "&$0"
    let v42 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v44 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v44
and method326 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure357(v0)
and closure356 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure222()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> bool) = closure223()
    let v7 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method201(v0)
    let v12 : string = "div"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())"
    let v20 : string = "open=move || v7(())"
    let v21 : string = " " + v19 + v9 + ""
    let v22 : string = " " + v20 + v21 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method326(v1)
    let v24 : string = "details"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v30)
    let v32 : string = "v31"
    let v33 : string = v32 + v9 
    let v34 : string = v33 + v9 
    let v35 : leptos_prelude_AnyView_ = method188(v18)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method325 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure356(v0, v1)
and closure363 (v0 : leptos_prelude_WriteSignal<bool>) () : unit =
    let v1 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v2 : (bool -> bool) = closure323()
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v2) v1 
    ()
and closure364 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure365 () () : leptos_prelude_AnyView_ =
    let v0 : string = "stroke-linecap=\"round\""
    let v1 : string = "stroke-linejoin=\"round\""
    let v2 : string = "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "stroke-linecap=\"round\""
    let v16 : string = "stroke-linejoin=\"round\""
    let v17 : string = "d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\""
    let v18 : string = " " + v15 + v3 + ""
    let v19 : string = " " + v16 + v18 + ""
    let v20 : string = " " + v17 + v19 + ""
    let v21 : (unit -> leptos_prelude_AnyView_) = method187()
    let v22 : string = "<" + v8 + " " + v20 + ">move || { v21() }</" + v8 + ">"
    let v23 : string = "leptos::prelude::view! { " + v22 + " }"
    let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v24 |> unbox
    let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_AnyView_ = method188(v27)
    let v29 : string = "v28"
    let v30 : string = v29 + v3 
    let v31 : string = v30 + v3 
    let v32 : leptos_prelude_AnyView_ = method188(v14)
    let v33 : string = "v32"
    let v34 : string = ", "
    let v35 : string = v33 + v34 
    let v36 : string = v35 + v31 
    let v37 : string = "vec![" + v36 + "]"
    let v38 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "leptos::prelude::Fragment::new($0)"
    let v40 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "&$0"
    let v42 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v44 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v44
and method330 () : (unit -> leptos_prelude_AnyView_) =
    closure365()
and method331 (v0 : Ref<Lifetime<StaticLifetime, Str>>) : Ref<Lifetime<StaticLifetime, Str>> =
    v0
and closure366 (v0 : leptos_prelude_ReadSignal<bool>) () : std_string_String =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v9 : Ref<Lifetime<StaticLifetime, Str>> =
        if v2 then
            let v3 : string = ""
            let v4 : string = "r#\"" + v3 + "\"#"
            let v5 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v4 
            v5
        else
            let v6 : string = "bg-gray-300 hover:bg-gray-200"
            let v7 : string = "r#\"" + v6 + "\"#"
            let v8 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v7 
            v8
    let v10 : Ref<Lifetime<StaticLifetime, Str>> = method331(v9)
    let v11 : string = "v10.to_owned() + \" hover:bg-gray-200\""
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11 
    v12
and closure369 () () : leptos_dom_Fragment =
    let v0 : string = "Settings"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method334 () : (unit -> leptos_dom_Fragment) =
    closure369()
and closure370 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_dom_Fragment =
    let v1 : string = "Func0::new(move || $0())"
    let v2 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : Func0<leptos_dom_Fragment> = method199(v2)
    let v4 : string = "(move || v3())()"
    let v5 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "leptos::prelude::IntoAny::into_any(v5)"
    let v7 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_AnyView_ = method188(v7)
    let v9 : string = "v8"
    let v10 : string = ""
    let v11 : string = v9 + v10 
    let v12 : string = v11 + v10 
    let v13 : string = "vec![" + v12 + "]"
    let v14 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "leptos::prelude::Fragment::new($0)"
    let v16 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v14 v15 
    v16
and method335 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_dom_Fragment) =
    closure370(v0)
and closure372 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_dom_Fragment = v0 ()
    let v2 : string = "&$0"
    let v3 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v5 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method337 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure372(v0)
and closure373 () () : leptos_prelude_AnyView_ =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "leptos::prelude::Fragment::new($0)"
    let v4 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "&$0"
    let v6 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method338 () : (unit -> leptos_prelude_AnyView_) =
    closure373()
and closure371 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : string = "class=\"pr-[15px] [font-size:13px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method337(v0)
    let v5 : string = "span"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "class=\"h-px flex-1 bg-gray-300\""
    let v13 : string = " " + v12 + v2 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method338()
    let v15 : string = "<" + v5 + " " + v13 + ">move || { v14() }</" + v5 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v2 
    let v24 : string = v23 + v2 
    let v25 : leptos_prelude_AnyView_ = method188(v11)
    let v26 : string = "v25"
    let v27 : string = ", "
    let v28 : string = v26 + v27 
    let v29 : string = v28 + v24 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "&$0"
    let v35 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and method336 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure371(v0)
and closure374 () () : leptos_dom_Fragment =
    let v0 : string = "Table View"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method339 () : (unit -> leptos_dom_Fragment) =
    closure374()
and closure376 () () : std_string_String =
    let v0 : string = "table-view"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    v44
and closure379 () (v0 : Heap0) : Heap0 =
    let v1 : Vec<(bool * std_string_String)> = v0.l0
    let v2 : std_string_String option = v0.l1
    let v3 : int32 = v0.l2
    let v4 : int32 = v0.l3
    let v5 : US1 = v0.l4
    let v6 : bool =
        match v5 with
        | US1_1 -> (* Table *)
            true
        | _ ->
            false
    let v9 : US1 =
        if v6 then
            US1_0
        else
            US1_1
    {l0 = v1; l1 = v2; l2 = v3; l3 = v4; l4 = v9} : Heap0
and closure378 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v3 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v4 : Heap1 = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : leptos_prelude_RwSignal<Heap0> = v4.l3
    let v6 : string = "true; leptos::prelude::SignalUpdate::update(&$0, |x| { *x = $1(x.clone()) });"
    let v7 : (Heap0 -> Heap0) = closure379()
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr struct (v5, v7) v6 
    ()
and closure380 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_RwSignal<Heap1> = v0.l0
    let v2 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
    let v3 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_RwSignal<Heap0> = v3.l3
    let v5 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v6 : Heap0 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : US1 = v6.l4
    match v7 with
    | US1_1 -> (* Table *)
        true
    | _ ->
        false
and method342 (v0 : Heap2) : (unit -> bool) =
    closure380(v0)
and method343 () : (unit -> std_string_String) =
    closure376()
and closure377 (v0 : Heap2) () : leptos_prelude_AnyView_ =
    let v1 : (leptos_ev_Event -> unit) = closure378(v0)
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : (unit -> bool) = method342(v0)
    let v4 : (unit -> std_string_String) = method343()
    let v5 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v6 : string = "type=\"checkbox\""
    let v7 : string = "id=move || v4()"
    let v8 : string = "on:change=move |event| v1(event)"
    let v9 : string = "prop:checked=move || v3()"
    let v10 : string = ""
    let v11 : string = " " + v5 + v10 + ""
    let v12 : string = " " + v6 + v11 + ""
    let v13 : string = " " + v7 + v12 + ""
    let v14 : string = " " + v8 + v13 + ""
    let v15 : string = " " + v9 + v14 + ""
    let v16 : string = "input"
    let v17 : string = "<" + v16 + " " + v15 + " />"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v24 : string = " " + v23 + v10 + ""
    let v25 : (unit -> leptos_prelude_AnyView_) = method280()
    let v26 : string = "span"
    let v27 : string = "<" + v26 + " " + v24 + ">move || { v25() }</" + v26 + ">"
    let v28 : string = "leptos::prelude::view! { " + v27 + " }"
    let v29 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v29 |> unbox
    let v31 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v32 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v34 : string = " " + v33 + v10 + ""
    let v35 : (unit -> leptos_prelude_AnyView_) = method283()
    let v36 : string = "<" + v26 + " " + v34 + ">move || { v35() }</" + v26 + ">"
    let v37 : string = "leptos::prelude::view! { " + v36 + " }"
    let v38 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v38 |> unbox
    let v40 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v41 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : leptos_prelude_AnyView_ = method188(v41)
    let v43 : string = "v42"
    let v44 : string = v43 + v10 
    let v45 : string = v44 + v10 
    let v46 : leptos_prelude_AnyView_ = method188(v32)
    let v47 : string = "v46"
    let v48 : string = ", "
    let v49 : string = v47 + v48 
    let v50 : string = v49 + v45 
    let v51 : leptos_prelude_AnyView_ = method188(v22)
    let v52 : string = "v51"
    let v53 : string = v52 + v48 
    let v54 : string = v53 + v50 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : string = "&$0"
    let v60 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v62 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v60 v61 
    v62
and method341 (v0 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure377(v0)
and closure375 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : (unit -> std_string_String) = closure376()
    let v2 : string = "let v1 = $0"
    Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v3 : string = "for=move || v1()"
    let v4 : string = "class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\""
    let v5 : string = ""
    let v6 : string = " " + v3 + v5 + ""
    let v7 : string = " " + v4 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method341(v0)
    let v9 : string = "label"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : leptos_prelude_AnyView_ = method188(v15)
    let v17 : string = "v16"
    let v18 : string = v17 + v5 
    let v19 : string = v18 + v5 
    let v20 : string = "vec![" + v19 + "]"
    let v21 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = "leptos::prelude::Fragment::new($0)"
    let v23 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method340 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure375(v0)
and closure381 () () : string =
    let v0 : string = "items-center"
    v0
and closure382 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method344 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure382(v0, v1)
and closure368 (v0 : Heap2) () : leptos_prelude_AnyView_ =
    let v1 : (unit -> leptos_dom_Fragment) = method334()
    let v2 : (unit -> leptos_dom_Fragment) = method335(v1)
    let v3 : string = "class=\"flex items-center pb-[6px]\""
    let v4 : string = ""
    let v5 : string = " " + v3 + v4 + ""
    let v6 : (unit -> leptos_prelude_AnyView_) = method336(v2)
    let v7 : string = "span"
    let v8 : string = "<" + v7 + " " + v5 + ">move || { v6() }</" + v7 + ">"
    let v9 : string = "leptos::prelude::view! { " + v8 + " }"
    let v10 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v10 |> unbox
    let v12 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : (unit -> leptos_dom_Fragment) = method339()
    let v15 : (unit -> leptos_dom_Fragment) = method340(v0)
    let v16 : string = "$0"
    let v17 : (unit -> string) = closure381()
    let v18 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v17 v16 
    let v19 : string = "$0"
    let v20 : (unit -> string) = closure326()
    let v21 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v20 v19 
    let v22 : string = "$0"
    let v23 : (unit -> string) = closure327()
    let v24 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v23 v22 
    let v25 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v24(()) + \" \" + &v21(()) + \" \" + &v18(())"
    let v26 : string = " " + v25 + v4 + ""
    let v27 : (unit -> leptos_prelude_AnyView_) = method344(v14, v15)
    let v28 : string = "dl"
    let v29 : string = "<" + v28 + " " + v26 + ">move || { v27() }</" + v28 + ">"
    let v30 : string = "leptos::prelude::view! { " + v29 + " }"
    let v31 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v31 |> unbox
    let v33 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : leptos_prelude_AnyView_ = method188(v34)
    let v36 : string = "v35"
    let v37 : string = v36 + v4 
    let v38 : string = v37 + v4 
    let v39 : leptos_prelude_AnyView_ = method188(v13)
    let v40 : string = "v39"
    let v41 : string = ", "
    let v42 : string = v40 + v41 
    let v43 : string = v42 + v38 
    let v44 : string = "vec![" + v43 + "]"
    let v45 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v44 
    let v46 : string = "leptos::prelude::Fragment::new($0)"
    let v47 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let v48 : string = "&$0"
    let v49 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let v50 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v50 
    v51
and method333 (v0 : Heap2) : (unit -> leptos_prelude_AnyView_) =
    closure368(v0)
and closure386 (v0 : int64) () : leptos_dom_Fragment =
    let v1 : string = "Transaction " + string (v0 + 1L) + ""
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v50 
    let v52 : leptos_prelude_AnyView_ = method188(v51)
    let v53 : string = "v52"
    let v54 : string = ""
    let v55 : string = v53 + v54 
    let v56 : string = v55 + v54 
    let v57 : string = "vec![" + v56 + "]"
    let v58 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "leptos::prelude::Fragment::new($0)"
    let v60 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v58 v59 
    v60
and method347 (v0 : int64) : (unit -> leptos_dom_Fragment) =
    closure386(v0)
and closure388 () () : leptos_dom_Fragment =
    let v0 : string = "Account"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method349 () : (unit -> leptos_dom_Fragment) =
    closure388()
and closure389 (v0 : string) () : leptos_dom_Fragment =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method350 (v0 : string) : (unit -> leptos_dom_Fragment) =
    closure389(v0)
and closure390 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure391 () () : string =
    let v0 : string = ""
    v0
and closure392 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method351 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure392(v0, v1)
and closure393 () () : leptos_dom_Fragment =
    let v0 : string = "Block Timestamp"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method352 () : (unit -> leptos_dom_Fragment) =
    closure393()
and closure394 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v5 v12 
    let v14 : (string -> int64) = int64
    let v15 : int64 = v14 v13
    let v18 : int64 = method244(v15)
    let v19 : int64 = v18 / 1000L
    let v20 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v21 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : (chrono_DateTime<chrono_Utc> -> US69) = method245()
    let v23 : US69 option = v21 |> Option.map v22 
    let v34 : US69 = US69_1
    let v35 : US69 = v23 |> Option.defaultValue v34 
    let v54 : US32 =
        match v35 with
        | US69_1 -> (* None *)
            US32_1
        | US69_0(v39) -> (* Some *)
            let v40 : string = "$0.naive_utc()"
            let v41 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v39 v40 
            let v42 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v43 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = "%Y-%m-%d %H:%M:%S"
            let v45 : string = "r#\"" + v44 + "\"#"
            let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "$0.format($1).to_string()"
            let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v43, v46) v47 
            let v49 : string = "fable_library_rust::String_::fromString($0)"
            let v50 : string = Fable.Core.RustInterop.emitRustExpr v48 v49 
            US32_0(v50)
    let v60 : US70 =
        match v54 with
        | US32_1 -> (* None *)
            let v57 : string = "resultm.from_option / Option does not have a value."
            US70_1(v57)
        | US32_0(v55) -> (* Some *)
            US70_0(v55)
    let v65 : string =
        match v60 with
        | US70_1(v62) -> (* Error *)
            let v63 : string = "sm'.to_string result / Error: " + v62 + ""
            v63
        | US70_0(v61) -> (* Ok *)
            v61
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "&*$0"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v67 
    let _v66 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "&*$0"
    let v70 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v69 
    let _v66 = v70 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v71 : string = "&*$0"
    let v72 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _v66 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _v66 = v76 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _v66 = v79 
    #endif
#else
    let v82 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _v66 = v82 
    #endif
    let v85 : Ref<Str> = _v66 
    let v90 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _v90 = v92 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v93 
    let _v90 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v95 
    let _v90 = v96 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v97 : std_string_String = v85 |> unbox<std_string_String>
    let _v90 = v97 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v85 |> unbox<std_string_String>
    let _v90 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : std_string_String = v85 |> unbox<std_string_String>
    let _v90 = v103 
    #endif
#else
    let v106 : std_string_String = v85 |> unbox<std_string_String>
    let _v90 = v106 
    #endif
    let v109 : std_string_String = _v90 
    let v114 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v115 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v109 v114 
    let v116 : leptos_prelude_AnyView_ = method188(v115)
    let v117 : string = "v116"
    let v118 : string = ""
    let v119 : string = v117 + v118 
    let v120 : string = v119 + v118 
    let v121 : string = "vec![" + v120 + "]"
    let v122 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : string = "leptos::prelude::Fragment::new($0)"
    let v124 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v122 v123 
    v124
and method353 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure394(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure395 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure396 () () : string =
    let v0 : string = ""
    v0
and closure397 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method354 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure397(v0, v1)
and closure398 () () : leptos_dom_Fragment =
    let v0 : string = "Predecessor"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method355 () : (unit -> leptos_dom_Fragment) =
    closure398()
and closure399 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : leptos_prelude_AnyView_ = method188(v63)
    let v65 : string = "v64"
    let v66 : string = ""
    let v67 : string = v65 + v66 
    let v68 : string = v67 + v66 
    let v69 : string = "vec![" + v68 + "]"
    let v70 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "leptos::prelude::Fragment::new($0)"
    let v72 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method356 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure399(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure400 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure401 () () : string =
    let v0 : string = ""
    v0
and closure402 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method357 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure402(v0, v1)
and closure403 () () : leptos_dom_Fragment =
    let v0 : string = "Receiver"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method358 () : (unit -> leptos_dom_Fragment) =
    closure403()
and closure404 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v2 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : leptos_prelude_AnyView_ = method188(v63)
    let v65 : string = "v64"
    let v66 : string = ""
    let v67 : string = v65 + v66 
    let v68 : string = v67 + v66 
    let v69 : string = "vec![" + v68 + "]"
    let v70 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "leptos::prelude::Fragment::new($0)"
    let v72 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method359 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure404(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure405 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure406 () () : string =
    let v0 : string = ""
    v0
and closure407 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method360 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure407(v0, v1)
and closure408 () () : leptos_dom_Fragment =
    let v0 : string = "Actions"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method361 () : (unit -> leptos_dom_Fragment) =
    closure408()
and closure411 (v0 : std_string_String) () : leptos_dom_Fragment =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool = "FUNCTION_CALL" = v2
    let v11 : string =
        if v3 then
            let v4 : string = "Function Call:"
            v4
        else
            let v5 : bool = "DEPLOY_CONTRACT" = v2
            if v5 then
                let v6 : string = "Contract Deploy:"
                v6
            else
                let v7 : bool = "TRANSFER" = v2
                if v7 then
                    let v8 : string = "Transfer:"
                    v8
                else
                    v2
    let v12 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v13 
    let _v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v15 
    let _v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v17 
    let _v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _v12 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v25 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _v12 = v25 
    #endif
#else
    let v28 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _v12 = v28 
    #endif
    let v31 : Ref<Str> = _v12 
    let v36 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "String::from($0)"
    let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v37 
    let _v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v39 
    let _v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v41 
    let _v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : std_string_String = v31 |> unbox<std_string_String>
    let _v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : std_string_String = v31 |> unbox<std_string_String>
    let _v36 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : std_string_String = v31 |> unbox<std_string_String>
    let _v36 = v49 
    #endif
#else
    let v52 : std_string_String = v31 |> unbox<std_string_String>
    let _v36 = v52 
    #endif
    let v55 : std_string_String = _v36 
    let v60 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v61 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v60 
    let v62 : leptos_prelude_AnyView_ = method188(v61)
    let v63 : string = "v62"
    let v64 : string = ""
    let v65 : string = v63 + v64 
    let v66 : string = v65 + v64 
    let v67 : string = "vec![" + v66 + "]"
    let v68 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "leptos::prelude::Fragment::new($0)"
    let v70 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v68 v69 
    v70
and method363 (v0 : std_string_String) : (unit -> leptos_dom_Fragment) =
    closure411(v0)
and closure414 () () : leptos_dom_Fragment =
    let v0 : string = "Method"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method366 () : (unit -> leptos_dom_Fragment) =
    closure414()
and closure415 (v0 : std_string_String option) () : leptos_dom_Fragment =
    let v1 : (std_string_String -> US15) = method47()
    let v2 : US15 option = v0 |> Option.map v1 
    let v13 : US15 = US15_1
    let v14 : US15 = v2 |> Option.defaultValue v13 
    match v14 with
    | US15_1 -> (* None *)
        let v80 : string = "None"
        let v81 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v82 : string = "&*$0"
        let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v82 
        let _v81 = v83 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v84 : string = "&*$0"
        let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v84 
        let _v81 = v85 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v86 : string = "&*$0"
        let v87 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v86 
        let _v81 = v87 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v88 : Ref<Str> = v80 |> unbox<Ref<Str>>
        let _v81 = v88 
        #endif
#if FABLE_COMPILER_PYTHON
        let v91 : Ref<Str> = v80 |> unbox<Ref<Str>>
        let _v81 = v91 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v94 : Ref<Str> = v80 |> unbox<Ref<Str>>
        let _v81 = v94 
        #endif
#else
        let v97 : Ref<Str> = v80 |> unbox<Ref<Str>>
        let _v81 = v97 
        #endif
        let v100 : Ref<Str> = _v81 
        let v105 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v106 : string = "String::from($0)"
        let v107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v100 v106 
        let _v105 = v107 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v108 : string = "String::from($0)"
        let v109 : std_string_String = Fable.Core.RustInterop.emitRustExpr v100 v108 
        let _v105 = v109 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v110 : string = "String::from($0)"
        let v111 : std_string_String = Fable.Core.RustInterop.emitRustExpr v100 v110 
        let _v105 = v111 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v112 : std_string_String = v100 |> unbox<std_string_String>
        let _v105 = v112 
        #endif
#if FABLE_COMPILER_PYTHON
        let v115 : std_string_String = v100 |> unbox<std_string_String>
        let _v105 = v115 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v118 : std_string_String = v100 |> unbox<std_string_String>
        let _v105 = v118 
        #endif
#else
        let v121 : std_string_String = v100 |> unbox<std_string_String>
        let _v105 = v121 
        #endif
        let v124 : std_string_String = _v105 
        let v129 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
        let v130 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v124 v129 
        let v131 : leptos_prelude_AnyView_ = method188(v130)
        let v132 : string = "v131"
        let v133 : string = ""
        let v134 : string = v132 + v133 
        let v135 : string = v134 + v133 
        let v136 : string = "vec![" + v135 + "]"
        let v137 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v136 
        let v138 : string = "leptos::prelude::Fragment::new($0)"
        let v139 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v137 v138 
        v139
    | US15_0(v18) -> (* Some *)
        let v19 : string = "fable_library_rust::String_::fromString($0)"
        let v20 : string = Fable.Core.RustInterop.emitRustExpr v18 v19 
        let v21 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v22 : string = "&*$0"
        let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v22 
        let _v21 = v23 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v24 : string = "&*$0"
        let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v24 
        let _v21 = v25 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v26 : string = "&*$0"
        let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v26 
        let _v21 = v27 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v28 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _v21 = v28 
        #endif
#if FABLE_COMPILER_PYTHON
        let v31 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _v21 = v31 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v34 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _v21 = v34 
        #endif
#else
        let v37 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _v21 = v37 
        #endif
        let v40 : Ref<Str> = _v21 
        let v45 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v46 : string = "String::from($0)"
        let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v46 
        let _v45 = v47 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v48 : string = "String::from($0)"
        let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v48 
        let _v45 = v49 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v50 : string = "String::from($0)"
        let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v50 
        let _v45 = v51 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_string_String = v40 |> unbox<std_string_String>
        let _v45 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_string_String = v40 |> unbox<std_string_String>
        let _v45 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v58 : std_string_String = v40 |> unbox<std_string_String>
        let _v45 = v58 
        #endif
#else
        let v61 : std_string_String = v40 |> unbox<std_string_String>
        let _v45 = v61 
        #endif
        let v64 : std_string_String = _v45 
        let v69 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
        let v70 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v69 
        let v71 : leptos_prelude_AnyView_ = method188(v70)
        let v72 : string = "v71"
        let v73 : string = ""
        let v74 : string = v72 + v73 
        let v75 : string = v74 + v73 
        let v76 : string = "vec![" + v75 + "]"
        let v77 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v76 
        let v78 : string = "leptos::prelude::Fragment::new($0)"
        let v79 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v77 v78 
        v79
and method367 (v0 : std_string_String option) : (unit -> leptos_dom_Fragment) =
    closure415(v0)
and closure416 () () : string =
    let v0 : string = ""
    v0
and closure417 () () : string =
    let v0 : string = ""
    v0
and closure419 () () : string =
    let v0 : string = ""
    v0
and closure418 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure419()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method368 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure418(v0, v1)
and closure413 (v0 : std_string_String option) () : leptos_prelude_AnyView_ =
    let v1 : (unit -> leptos_dom_Fragment) = method366()
    let v2 : (unit -> leptos_dom_Fragment) = method367(v0)
    let v3 : string = "$0"
    let v4 : (unit -> string) = closure416()
    let v5 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4 v3 
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure417()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure327()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())"
    let v13 : string = ""
    let v14 : string = " " + v12 + v13 + ""
    let v15 : (unit -> leptos_prelude_AnyView_) = method368(v1, v2)
    let v16 : string = "dl"
    let v17 : string = "<" + v16 + " " + v14 + ">move || { v15() }</" + v16 + ">"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : leptos_prelude_AnyView_ = method188(v22)
    let v24 : string = "v23"
    let v25 : string = v24 + v13 
    let v26 : string = v25 + v13 
    let v27 : string = "vec![" + v26 + "]"
    let v28 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = "leptos::prelude::Fragment::new($0)"
    let v30 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : string = "&$0"
    let v32 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
    v34
and method365 (v0 : std_string_String option) : (unit -> leptos_prelude_AnyView_) =
    closure413(v0)
and closure412 (v0 : std_string_String option) () : leptos_dom_Fragment =
    let v1 : string = "class=\"flex flex-1 flex-col\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method365(v0)
    let v5 : string = "div"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = v13 + v2 
    let v15 : string = v14 + v2 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    v19
and method364 (v0 : std_string_String option) : (unit -> leptos_dom_Fragment) =
    closure412(v0)
and closure420 () () : string =
    let v0 : string = ""
    v0
and closure421 () () : string =
    let v0 : string = "items-center"
    v0
and closure422 () () : string =
    let v0 : string = ""
    v0
and closure424 () () : string =
    let v0 : string = ""
    v0
and closure423 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure424()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method369 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure423(v0, v1)
and closure410 () struct (v0 : std_string_String, v1 : std_string_String option) : leptos_prelude_AnyView_ =
    let v2 : (unit -> leptos_dom_Fragment) = method363(v0)
    let v3 : (unit -> leptos_dom_Fragment) = method364(v1)
    let v4 : string = "$0"
    let v5 : (unit -> string) = closure420()
    let v6 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v5 v4 
    let v7 : string = "$0"
    let v8 : (unit -> string) = closure421()
    let v9 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v8 v7 
    let v10 : string = "$0"
    let v11 : (unit -> string) = closure422()
    let v12 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v11 v10 
    let v13 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v12(()) + \" \" + &v9(()) + \" \" + &v6(())"
    let v14 : string = ""
    let v15 : string = " " + v13 + v14 + ""
    let v16 : (unit -> leptos_prelude_AnyView_) = method369(v2, v3)
    let v17 : string = "dl"
    let v18 : string = "<" + v17 + " " + v15 + ">move || { v16() }</" + v17 + ">"
    let v19 : string = "leptos::prelude::view! { " + v18 + " }"
    let v20 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v20 |> unbox
    let v22 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and closure409 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "$0.to_vec()"
    let v13 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v7 v12 
    let v14 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v15 : (struct (std_string_String * std_string_String option) -> leptos_prelude_AnyView_) = closure410()
    let v16 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr struct (v13, v15) v14 
    let v17 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v18 : (leptos_prelude_AnyView_ []) = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : (leptos_prelude_AnyView_ []) = method177(v18)
    let v20 : string = "leptos::prelude::CollectView::collect_view($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : leptos_prelude_AnyView_ = method188(v21)
    let v23 : string = "v22"
    let v24 : string = ""
    let v25 : string = v23 + v24 
    let v26 : string = v25 + v24 
    let v27 : string = "vec![" + v26 + "]"
    let v28 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = "leptos::prelude::Fragment::new($0)"
    let v30 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v28 v29 
    v30
and method362 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure409(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure425 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure426 () () : string =
    let v0 : string = "sm:pr-[10px]"
    v0
and closure428 () () : string =
    let v0 : string = "[flex-direction:column]"
    v0
and closure427 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure428()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method370 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure427(v0, v1)
and closure429 () () : leptos_dom_Fragment =
    let v0 : string = "Deposit"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method371 () : (unit -> leptos_dom_Fragment) =
    closure429()
and closure430 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (float -> string) = _.ToString()
    let v13 : string = v12 v8
    let v16 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v32 
    #endif
    let v35 : Ref<Str> = _v16 
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v56 
    #endif
    let v59 : std_string_String = _v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : leptos_prelude_AnyView_ = method188(v65)
    let v67 : string = "v66"
    let v68 : string = ""
    let v69 : string = v67 + v68 
    let v70 : string = v69 + v68 
    let v71 : string = "vec![" + v70 + "]"
    let v72 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "leptos::prelude::Fragment::new($0)"
    let v74 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v72 v73 
    v74
and method372 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure430(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure431 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure432 () () : string =
    let v0 : string = ""
    v0
and closure433 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method373 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure433(v0, v1)
and closure434 () () : leptos_dom_Fragment =
    let v0 : string = "Outcome Status"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method374 () : (unit -> leptos_dom_Fragment) =
    closure434()
and closure435 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (bool -> string) = _.ToString()
    let v13 : string = v12 v9
    let v16 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v32 
    #endif
    let v35 : Ref<Str> = _v16 
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v56 
    #endif
    let v59 : std_string_String = _v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : leptos_prelude_AnyView_ = method188(v65)
    let v67 : string = "v66"
    let v68 : string = ""
    let v69 : string = v67 + v68 
    let v70 : string = v69 + v68 
    let v71 : string = "vec![" + v70 + "]"
    let v72 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "leptos::prelude::Fragment::new($0)"
    let v74 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v72 v73 
    v74
and method375 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure435(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure436 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure437 () () : string =
    let v0 : string = ""
    v0
and closure438 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method376 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure438(v0, v1)
and closure439 () () : leptos_dom_Fragment =
    let v0 : string = "Fee"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method377 () : (unit -> leptos_dom_Fragment) =
    closure439()
and closure440 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (float -> string) = _.ToString()
    let v13 : string = v12 v10
    let v16 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v32 
    #endif
    let v35 : Ref<Str> = _v16 
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v56 
    #endif
    let v59 : std_string_String = _v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : leptos_prelude_AnyView_ = method188(v65)
    let v67 : string = "v66"
    let v68 : string = ""
    let v69 : string = v67 + v68 
    let v70 : string = v69 + v68 
    let v71 : string = "vec![" + v70 + "]"
    let v72 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "leptos::prelude::Fragment::new($0)"
    let v74 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v72 v73 
    v74
and method378 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure440(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure441 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure442 () () : string =
    let v0 : string = ""
    v0
and closure443 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method379 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure443(v0, v1)
and closure444 () () : leptos_dom_Fragment =
    let v0 : string = "Block Height"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method380 () : (unit -> leptos_dom_Fragment) =
    closure444()
and closure445 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (uint32 -> string) = _.ToString()
    let v13 : string = v12 v6
    let v16 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v16 = v32 
    #endif
    let v35 : Ref<Str> = _v16 
    let v40 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _v40 = v56 
    #endif
    let v59 : std_string_String = _v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : leptos_prelude_AnyView_ = method188(v65)
    let v67 : string = "v66"
    let v68 : string = ""
    let v69 : string = v67 + v68 
    let v70 : string = v69 + v68 
    let v71 : string = "vec![" + v70 + "]"
    let v72 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "leptos::prelude::Fragment::new($0)"
    let v74 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v72 v73 
    v74
and method381 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure445(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure446 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure447 () () : string =
    let v0 : string = ""
    v0
and closure448 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method382 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure448(v0, v1)
and closure449 () () : leptos_dom_Fragment =
    let v0 : string = "Hash"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method383 () : (unit -> leptos_dom_Fragment) =
    closure449()
and closure450 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v3 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : leptos_prelude_AnyView_ = method188(v63)
    let v65 : string = "v64"
    let v66 : string = ""
    let v67 : string = v65 + v66 
    let v68 : string = v67 + v66 
    let v69 : string = "vec![" + v68 + "]"
    let v70 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "leptos::prelude::Fragment::new($0)"
    let v72 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method384 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure450(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure451 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure452 () () : string =
    let v0 : string = ""
    v0
and closure453 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method385 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure453(v0, v1)
and closure454 () () : leptos_dom_Fragment =
    let v0 : string = "Block Hash"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method386 () : (unit -> leptos_dom_Fragment) =
    closure454()
and closure455 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v4 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : leptos_prelude_AnyView_ = method188(v63)
    let v65 : string = "v64"
    let v66 : string = ""
    let v67 : string = v65 + v66 
    let v68 : string = v67 + v66 
    let v69 : string = "vec![" + v68 + "]"
    let v70 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "leptos::prelude::Fragment::new($0)"
    let v72 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method387 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure455(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure456 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure457 () () : string =
    let v0 : string = ""
    v0
and closure458 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method388 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure458(v0, v1)
and closure459 () () : leptos_dom_Fragment =
    let v0 : string = "Receipt ID"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method389 () : (unit -> leptos_dom_Fragment) =
    closure459()
and closure460 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _v14 = v30 
    #endif
    let v33 : Ref<Str> = _v14 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : leptos_prelude_AnyView_ = method188(v63)
    let v65 : string = "v64"
    let v66 : string = ""
    let v67 : string = v65 + v66 
    let v68 : string = v67 + v66 
    let v69 : string = "vec![" + v68 + "]"
    let v70 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "leptos::prelude::Fragment::new($0)"
    let v72 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method390 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure460(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure461 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure462 () () : string =
    let v0 : string = ""
    v0
and closure463 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method391 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure463(v0, v1)
and closure464 () () : leptos_dom_Fragment =
    let v0 : string = "Logs"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method392 () : (unit -> leptos_dom_Fragment) =
    closure464()
and method394 () : string =
    let v0 : string = "\n"
    v0
and closure466 () () : string =
    let v0 : string = "[max-height:20vh]"
    v0
and closure465 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "$0.to_vec()"
    let v13 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v15 : (std_string_String -> string) = closure59()
    let v16 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v13, v15) v14 
    let v17 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v18 : (string []) = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string seq = v18 |> Seq.ofArray
    let v22 : string = method394()
    let v23 : (string -> (string seq -> string)) = String.concat
    let v24 : (string seq -> string) = v23 v22
    let v25 : string = v24 v19
    let v29 : string = "\\n"
    let v30 : string = "\n"
    let v31 : string = v25.Replace (v29, v30)
    let v32 : string = "$0"
    let v33 : (unit -> string) = closure466()
    let v34 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v33 v32 
    let v35 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v34(())"
    let v36 : string = ""
    let v37 : string = " " + v35 + v36 + ""
    let v38 : (unit -> leptos_prelude_AnyView_) = method323(v31)
    let v39 : string = "pre"
    let v40 : string = "<" + v39 + " " + v37 + ">move || { v38() }</" + v39 + ">"
    let v41 : string = "leptos::prelude::view! { " + v40 + " }"
    let v42 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v42 |> unbox
    let v44 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v45 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : leptos_prelude_AnyView_ = method188(v45)
    let v47 : string = "v46"
    let v48 : string = v47 + v36 
    let v49 : string = v48 + v36 
    let v50 : string = "vec![" + v49 + "]"
    let v51 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method393 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure465(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure467 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure468 () () : string =
    let v0 : string = ""
    v0
and closure469 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure329()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "class=\"[font-size:12px] text-gray-400\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : (unit -> leptos_prelude_AnyView_) = method305(v0)
    let v9 : string = "dt"
    let v10 : string = "<" + v9 + " " + v7 + ">move || { v8() }</" + v9 + ">"
    let v11 : string = "leptos::prelude::view! { " + v10 + " }"
    let v12 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v12 |> unbox
    let v14 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())"
    let v17 : string = " " + v16 + v6 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method305(v1)
    let v19 : string = "dd"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v6 
    let v29 : string = v28 + v6 
    let v30 : leptos_prelude_AnyView_ = method188(v15)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method395 (v0 : (unit -> leptos_dom_Fragment), v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure469(v0, v1)
and closure387 (v0 : string, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : uint32, v8 : (struct (std_string_String * std_string_String option) []), v9 : float, v10 : bool, v11 : float, v12 : (std_string_String [])) () : leptos_prelude_AnyView_ =
    let v13 : (unit -> leptos_dom_Fragment) = method349()
    let v14 : (unit -> leptos_dom_Fragment) = method350(v0)
    let v15 : string = "$0"
    let v16 : (unit -> string) = closure390()
    let v17 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v16 v15 
    let v18 : string = "$0"
    let v19 : (unit -> string) = closure391()
    let v20 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v19 v18 
    let v21 : string = "$0"
    let v22 : (unit -> string) = closure327()
    let v23 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v23(()) + \" \" + &v20(()) + \" \" + &v17(())"
    let v25 : string = ""
    let v26 : string = " " + v24 + v25 + ""
    let v27 : (unit -> leptos_prelude_AnyView_) = method351(v13, v14)
    let v28 : string = "dl"
    let v29 : string = "<" + v28 + " " + v26 + ">move || { v27() }</" + v28 + ">"
    let v30 : string = "leptos::prelude::view! { " + v29 + " }"
    let v31 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v31 |> unbox
    let v33 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : (unit -> leptos_dom_Fragment) = method352()
    let v36 : (unit -> leptos_dom_Fragment) = method353(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v37 : string = "$0"
    let v38 : (unit -> string) = closure395()
    let v39 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v38 v37 
    let v40 : string = "$0"
    let v41 : (unit -> string) = closure396()
    let v42 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v41 v40 
    let v43 : string = "$0"
    let v44 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v43 
    let v45 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v44(()) + \" \" + &v42(()) + \" \" + &v39(())"
    let v46 : string = " " + v45 + v25 + ""
    let v47 : (unit -> leptos_prelude_AnyView_) = method354(v35, v36)
    let v48 : string = "<" + v28 + " " + v46 + ">move || { v47() }</" + v28 + ">"
    let v49 : string = "leptos::prelude::view! { " + v48 + " }"
    let v50 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v50 |> unbox
    let v52 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : (unit -> leptos_dom_Fragment) = method355()
    let v55 : (unit -> leptos_dom_Fragment) = method356(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v56 : string = "$0"
    let v57 : (unit -> string) = closure400()
    let v58 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v57 v56 
    let v59 : string = "$0"
    let v60 : (unit -> string) = closure401()
    let v61 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v60 v59 
    let v62 : string = "$0"
    let v63 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v62 
    let v64 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v63(()) + \" \" + &v61(()) + \" \" + &v58(())"
    let v65 : string = " " + v64 + v25 + ""
    let v66 : (unit -> leptos_prelude_AnyView_) = method357(v54, v55)
    let v67 : string = "<" + v28 + " " + v65 + ">move || { v66() }</" + v28 + ">"
    let v68 : string = "leptos::prelude::view! { " + v67 + " }"
    let v69 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v69 |> unbox
    let v71 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : (unit -> leptos_dom_Fragment) = method358()
    let v74 : (unit -> leptos_dom_Fragment) = method359(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v75 : string = "$0"
    let v76 : (unit -> string) = closure405()
    let v77 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v76 v75 
    let v78 : string = "$0"
    let v79 : (unit -> string) = closure406()
    let v80 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v79 v78 
    let v81 : string = "$0"
    let v82 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v81 
    let v83 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v82(()) + \" \" + &v80(()) + \" \" + &v77(())"
    let v84 : string = " " + v83 + v25 + ""
    let v85 : (unit -> leptos_prelude_AnyView_) = method360(v73, v74)
    let v86 : string = "<" + v28 + " " + v84 + ">move || { v85() }</" + v28 + ">"
    let v87 : string = "leptos::prelude::view! { " + v86 + " }"
    let v88 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v87 
    let v89 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v88 |> unbox
    let v90 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v91 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : (unit -> leptos_dom_Fragment) = method361()
    let v93 : (unit -> leptos_dom_Fragment) = method362(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v94 : string = "$0"
    let v95 : (unit -> string) = closure425()
    let v96 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v95 v94 
    let v97 : string = "$0"
    let v98 : (unit -> string) = closure426()
    let v99 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v98 v97 
    let v100 : string = "$0"
    let v101 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v100 
    let v102 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v101(()) + \" \" + &v99(()) + \" \" + &v96(())"
    let v103 : string = " " + v102 + v25 + ""
    let v104 : (unit -> leptos_prelude_AnyView_) = method370(v92, v93)
    let v105 : string = "<" + v28 + " " + v103 + ">move || { v104() }</" + v28 + ">"
    let v106 : string = "leptos::prelude::view! { " + v105 + " }"
    let v107 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v106 
    let v108 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v107 |> unbox
    let v109 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v110 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v108 v109 
    let v111 : (unit -> leptos_dom_Fragment) = method371()
    let v112 : (unit -> leptos_dom_Fragment) = method372(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v113 : string = "$0"
    let v114 : (unit -> string) = closure431()
    let v115 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v114 v113 
    let v116 : string = "$0"
    let v117 : (unit -> string) = closure432()
    let v118 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v117 v116 
    let v119 : string = "$0"
    let v120 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v119 
    let v121 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v120(()) + \" \" + &v118(()) + \" \" + &v115(())"
    let v122 : string = " " + v121 + v25 + ""
    let v123 : (unit -> leptos_prelude_AnyView_) = method373(v111, v112)
    let v124 : string = "<" + v28 + " " + v122 + ">move || { v123() }</" + v28 + ">"
    let v125 : string = "leptos::prelude::view! { " + v124 + " }"
    let v126 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v125 
    let v127 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v126 |> unbox
    let v128 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v129 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let v130 : (unit -> leptos_dom_Fragment) = method374()
    let v131 : (unit -> leptos_dom_Fragment) = method375(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v132 : string = "$0"
    let v133 : (unit -> string) = closure436()
    let v134 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v133 v132 
    let v135 : string = "$0"
    let v136 : (unit -> string) = closure437()
    let v137 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v136 v135 
    let v138 : string = "$0"
    let v139 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v138 
    let v140 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v139(()) + \" \" + &v137(()) + \" \" + &v134(())"
    let v141 : string = " " + v140 + v25 + ""
    let v142 : (unit -> leptos_prelude_AnyView_) = method376(v130, v131)
    let v143 : string = "<" + v28 + " " + v141 + ">move || { v142() }</" + v28 + ">"
    let v144 : string = "leptos::prelude::view! { " + v143 + " }"
    let v145 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v144 
    let v146 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v145 |> unbox
    let v147 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v148 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v146 v147 
    let v149 : (unit -> leptos_dom_Fragment) = method377()
    let v150 : (unit -> leptos_dom_Fragment) = method378(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v151 : string = "$0"
    let v152 : (unit -> string) = closure441()
    let v153 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v152 v151 
    let v154 : string = "$0"
    let v155 : (unit -> string) = closure442()
    let v156 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v155 v154 
    let v157 : string = "$0"
    let v158 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v157 
    let v159 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v158(()) + \" \" + &v156(()) + \" \" + &v153(())"
    let v160 : string = " " + v159 + v25 + ""
    let v161 : (unit -> leptos_prelude_AnyView_) = method379(v149, v150)
    let v162 : string = "<" + v28 + " " + v160 + ">move || { v161() }</" + v28 + ">"
    let v163 : string = "leptos::prelude::view! { " + v162 + " }"
    let v164 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v163 
    let v165 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v164 |> unbox
    let v166 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v167 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : (unit -> leptos_dom_Fragment) = method380()
    let v169 : (unit -> leptos_dom_Fragment) = method381(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v170 : string = "$0"
    let v171 : (unit -> string) = closure446()
    let v172 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v171 v170 
    let v173 : string = "$0"
    let v174 : (unit -> string) = closure447()
    let v175 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v174 v173 
    let v176 : string = "$0"
    let v177 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v176 
    let v178 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v177(()) + \" \" + &v175(()) + \" \" + &v172(())"
    let v179 : string = " " + v178 + v25 + ""
    let v180 : (unit -> leptos_prelude_AnyView_) = method382(v168, v169)
    let v181 : string = "<" + v28 + " " + v179 + ">move || { v180() }</" + v28 + ">"
    let v182 : string = "leptos::prelude::view! { " + v181 + " }"
    let v183 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v182 
    let v184 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v183 |> unbox
    let v185 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v186 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v184 v185 
    let v187 : (unit -> leptos_dom_Fragment) = method383()
    let v188 : (unit -> leptos_dom_Fragment) = method384(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v189 : string = "$0"
    let v190 : (unit -> string) = closure451()
    let v191 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v190 v189 
    let v192 : string = "$0"
    let v193 : (unit -> string) = closure452()
    let v194 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v193 v192 
    let v195 : string = "$0"
    let v196 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v195 
    let v197 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v196(()) + \" \" + &v194(()) + \" \" + &v191(())"
    let v198 : string = " " + v197 + v25 + ""
    let v199 : (unit -> leptos_prelude_AnyView_) = method385(v187, v188)
    let v200 : string = "<" + v28 + " " + v198 + ">move || { v199() }</" + v28 + ">"
    let v201 : string = "leptos::prelude::view! { " + v200 + " }"
    let v202 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v201 
    let v203 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v202 |> unbox
    let v204 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v205 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v203 v204 
    let v206 : (unit -> leptos_dom_Fragment) = method386()
    let v207 : (unit -> leptos_dom_Fragment) = method387(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v208 : string = "$0"
    let v209 : (unit -> string) = closure456()
    let v210 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v209 v208 
    let v211 : string = "$0"
    let v212 : (unit -> string) = closure457()
    let v213 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v212 v211 
    let v214 : string = "$0"
    let v215 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v214 
    let v216 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v215(()) + \" \" + &v213(()) + \" \" + &v210(())"
    let v217 : string = " " + v216 + v25 + ""
    let v218 : (unit -> leptos_prelude_AnyView_) = method388(v206, v207)
    let v219 : string = "<" + v28 + " " + v217 + ">move || { v218() }</" + v28 + ">"
    let v220 : string = "leptos::prelude::view! { " + v219 + " }"
    let v221 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v220 
    let v222 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v221 |> unbox
    let v223 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v224 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v222 v223 
    let v225 : (unit -> leptos_dom_Fragment) = method389()
    let v226 : (unit -> leptos_dom_Fragment) = method390(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
    let v227 : string = "$0"
    let v228 : (unit -> string) = closure461()
    let v229 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v228 v227 
    let v230 : string = "$0"
    let v231 : (unit -> string) = closure462()
    let v232 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v231 v230 
    let v233 : string = "$0"
    let v234 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v233 
    let v235 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v234(()) + \" \" + &v232(()) + \" \" + &v229(())"
    let v236 : string = " " + v235 + v25 + ""
    let v237 : (unit -> leptos_prelude_AnyView_) = method391(v225, v226)
    let v238 : string = "<" + v28 + " " + v236 + ">move || { v237() }</" + v28 + ">"
    let v239 : string = "leptos::prelude::view! { " + v238 + " }"
    let v240 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v239 
    let v241 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v240 |> unbox
    let v242 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v243 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v241 v242 
    let v244 : uint64 = System.Convert.ToUInt64 v12.Length
    let v245 : bool = v244 = 0UL
    let v269 : leptos_prelude_AnyView_ =
        if v245 then
            let v246 : (leptos_prelude_AnyView_ []) = [||]
            let v247 : (leptos_prelude_AnyView_ []) = method177(v246)
            let v248 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v249 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v247 v248 
            v249
        else
            let v250 : (unit -> leptos_dom_Fragment) = method392()
            let v251 : (unit -> leptos_dom_Fragment) = method393(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
            let v252 : string = "$0"
            let v253 : (unit -> string) = closure467()
            let v254 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v253 v252 
            let v255 : string = "$0"
            let v256 : (unit -> string) = closure468()
            let v257 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v256 v255 
            let v258 : string = "$0"
            let v259 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v258 
            let v260 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v259(()) + \" \" + &v257(()) + \" \" + &v254(())"
            let v261 : string = " " + v260 + v25 + ""
            let v262 : (unit -> leptos_prelude_AnyView_) = method395(v250, v251)
            let v263 : string = "<" + v28 + " " + v261 + ">move || { v262() }</" + v28 + ">"
            let v264 : string = "leptos::prelude::view! { " + v263 + " }"
            let v265 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v264 
            let v266 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v265 |> unbox
            let v267 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v268 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v266 v267 
            v268
    let v270 : leptos_prelude_AnyView_ = method188(v269)
    let v271 : string = "v270"
    let v272 : string = v271 + v25 
    let v273 : string = v272 + v25 
    let v274 : leptos_prelude_AnyView_ = method188(v243)
    let v275 : string = "v274"
    let v276 : string = ", "
    let v277 : string = v275 + v276 
    let v278 : string = v277 + v273 
    let v279 : leptos_prelude_AnyView_ = method188(v224)
    let v280 : string = "v279"
    let v281 : string = v280 + v276 
    let v282 : string = v281 + v278 
    let v283 : leptos_prelude_AnyView_ = method188(v205)
    let v284 : string = "v283"
    let v285 : string = v284 + v276 
    let v286 : string = v285 + v282 
    let v287 : leptos_prelude_AnyView_ = method188(v186)
    let v288 : string = "v287"
    let v289 : string = v288 + v276 
    let v290 : string = v289 + v286 
    let v291 : leptos_prelude_AnyView_ = method188(v167)
    let v292 : string = "v291"
    let v293 : string = v292 + v276 
    let v294 : string = v293 + v290 
    let v295 : leptos_prelude_AnyView_ = method188(v148)
    let v296 : string = "v295"
    let v297 : string = v296 + v276 
    let v298 : string = v297 + v294 
    let v299 : leptos_prelude_AnyView_ = method188(v129)
    let v300 : string = "v299"
    let v301 : string = v300 + v276 
    let v302 : string = v301 + v298 
    let v303 : leptos_prelude_AnyView_ = method188(v110)
    let v304 : string = "v303"
    let v305 : string = v304 + v276 
    let v306 : string = v305 + v302 
    let v307 : leptos_prelude_AnyView_ = method188(v91)
    let v308 : string = "v307"
    let v309 : string = v308 + v276 
    let v310 : string = v309 + v306 
    let v311 : leptos_prelude_AnyView_ = method188(v72)
    let v312 : string = "v311"
    let v313 : string = v312 + v276 
    let v314 : string = v313 + v310 
    let v315 : leptos_prelude_AnyView_ = method188(v53)
    let v316 : string = "v315"
    let v317 : string = v316 + v276 
    let v318 : string = v317 + v314 
    let v319 : leptos_prelude_AnyView_ = method188(v34)
    let v320 : string = "v319"
    let v321 : string = v320 + v276 
    let v322 : string = v321 + v318 
    let v323 : string = "vec![" + v322 + "]"
    let v324 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v323 
    let v325 : string = "leptos::prelude::Fragment::new($0)"
    let v326 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v324 v325 
    let v327 : string = "&$0"
    let v328 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v326 v327 
    let v329 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v330 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v328 v329 
    v330
and method348 (v0 : string, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : uint32, v8 : (struct (std_string_String * std_string_String option) []), v9 : float, v10 : bool, v11 : float, v12 : (std_string_String [])) : (unit -> leptos_prelude_AnyView_) =
    closure387(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12)
and closure385 (v0 : string, v1 : int64, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : uint32, v9 : (struct (std_string_String * std_string_String option) []), v10 : float, v11 : bool, v12 : float, v13 : (std_string_String [])) () : leptos_prelude_AnyView_ =
    let v14 : (unit -> leptos_dom_Fragment) = method347(v1)
    let v15 : (unit -> leptos_dom_Fragment) = method335(v14)
    let v16 : string = "class=\"flex items-center pb-[6px]\""
    let v17 : string = ""
    let v18 : string = " " + v16 + v17 + ""
    let v19 : (unit -> leptos_prelude_AnyView_) = method336(v15)
    let v20 : string = "span"
    let v21 : string = "<" + v20 + " " + v18 + ">move || { v19() }</" + v20 + ">"
    let v22 : string = "leptos::prelude::view! { " + v21 + " }"
    let v23 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v23 |> unbox
    let v25 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = "class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\""
    let v28 : string = " " + v27 + v17 + ""
    let v29 : (unit -> leptos_prelude_AnyView_) = method348(v0, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
    let v30 : string = "div"
    let v31 : string = "<" + v30 + " " + v28 + ">move || { v29() }</" + v30 + ">"
    let v32 : string = "leptos::prelude::view! { " + v31 + " }"
    let v33 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v32 
    let v34 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v33 |> unbox
    let v35 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v36 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : leptos_prelude_AnyView_ = method188(v36)
    let v38 : string = "v37"
    let v39 : string = v38 + v17 
    let v40 : string = v39 + v17 
    let v41 : leptos_prelude_AnyView_ = method188(v26)
    let v42 : string = "v41"
    let v43 : string = ", "
    let v44 : string = v42 + v43 
    let v45 : string = v44 + v40 
    let v46 : string = "vec![" + v45 + "]"
    let v47 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v46 
    let v48 : string = "leptos::prelude::Fragment::new($0)"
    let v49 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v47 v48 
    let v50 : string = "&$0"
    let v51 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let v52 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v51 v52 
    v53
and method346 (v0 : string, v1 : int64, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : uint32, v9 : (struct (std_string_String * std_string_String option) []), v10 : float, v11 : bool, v12 : float, v13 : (std_string_String [])) : (unit -> leptos_prelude_AnyView_) =
    closure385(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13)
and closure384 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : leptos_prelude_AnyView_ =
    let v3 : std_string_String = v2.l0
    let v4 : std_string_String = v2.l1
    let v5 : std_string_String = v2.l2
    let v6 : std_string_String = v2.l3
    let v7 : std_string_String = v2.l4
    let v8 : std_string_String = v2.l5
    let v9 : uint32 = v2.l6
    let v10 : (struct (std_string_String * std_string_String option) []) = v2.l7
    let v11 : float = v2.l8
    let v12 : bool = v2.l9
    let v13 : float = v2.l10
    let v14 : (std_string_String []) = v2.l11
    let v15 : (unativeint -> int64) = int64
    let v16 : int64 = v15 v1
    let v19 : string = "transaction.render (1)"
    let v20 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v23 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : string = "$0.unwrap()"
    let v25 : Heap2 = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "class=\"flex flex-1 flex-col overflow-x-auto\""
    let v27 : string = ""
    let v28 : string = " " + v26 + v27 + ""
    let v29 : (unit -> leptos_prelude_AnyView_) = method346(v0, v16, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14)
    let v30 : string = "div"
    let v31 : string = "<" + v30 + " " + v28 + ">move || { v29() }</" + v30 + ">"
    let v32 : string = "leptos::prelude::view! { " + v31 + " }"
    let v33 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v32 
    let v34 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v33 |> unbox
    let v35 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v36 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v34 v35 
    v36
and closure383 (v0 : (struct (string * unativeint * Heap5) [])) () : leptos_prelude_AnyView_ =
    let v1 : string = "$0.to_vec()"
    let v2 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4 : (struct (string * unativeint * Heap5) -> leptos_prelude_AnyView_) = closure384()
    let v5 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr struct (v2, v4) v3 
    let v6 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v7 : (leptos_prelude_AnyView_ []) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : (leptos_prelude_AnyView_ []) = method177(v7)
    let v9 : string = "leptos::prelude::CollectView::collect_view($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : leptos_prelude_AnyView_ = method188(v10)
    let v12 : string = "v11"
    let v13 : string = ""
    let v14 : string = v12 + v13 
    let v15 : string = v14 + v13 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "&$0"
    let v21 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method345 (v0 : (struct (string * unativeint * Heap5) [])) : (unit -> leptos_prelude_AnyView_) =
    closure383(v0)
and closure472 (v0 : string) () : leptos_prelude_AnyView_ =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method397 (v0 : string) : (unit -> leptos_prelude_AnyView_) =
    closure472(v0)
and closure473 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l5
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : (string -> int64) = int64
    let v5 : int64 = v4 v3
    let v8 : int64 = method244(v5)
    let v9 : int64 = v8 / 1000L
    let v10 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v11 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : (chrono_DateTime<chrono_Utc> -> US69) = method245()
    let v13 : US69 option = v11 |> Option.map v12 
    let v24 : US69 = US69_1
    let v25 : US69 = v13 |> Option.defaultValue v24 
    let v44 : US32 =
        match v25 with
        | US69_1 -> (* None *)
            US32_1
        | US69_0(v29) -> (* Some *)
            let v30 : string = "$0.naive_utc()"
            let v31 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v29 v30 
            let v32 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v33 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "%Y-%m-%d %H:%M:%S"
            let v35 : string = "r#\"" + v34 + "\"#"
            let v36 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v35 
            let v37 : string = "$0.format($1).to_string()"
            let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v33, v36) v37 
            let v39 : string = "fable_library_rust::String_::fromString($0)"
            let v40 : string = Fable.Core.RustInterop.emitRustExpr v38 v39 
            US32_0(v40)
    let v50 : US70 =
        match v44 with
        | US32_1 -> (* None *)
            let v47 : string = "resultm.from_option / Option does not have a value."
            US70_1(v47)
        | US32_0(v45) -> (* Some *)
            US70_0(v45)
    let v55 : string =
        match v50 with
        | US70_1(v52) -> (* Error *)
            let v53 : string = "sm'.to_string result / Error: " + v52 + ""
            v53
        | US70_0(v51) -> (* Ok *)
            v51
    let v56 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v55 v57 
    let _v56 = v58 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v55 v59 
    let _v56 = v60 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = "&*$0"
    let v62 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v55 v61 
    let _v56 = v62 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : Ref<Str> = v55 |> unbox<Ref<Str>>
    let _v56 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : Ref<Str> = v55 |> unbox<Ref<Str>>
    let _v56 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v69 : Ref<Str> = v55 |> unbox<Ref<Str>>
    let _v56 = v69 
    #endif
#else
    let v72 : Ref<Str> = v55 |> unbox<Ref<Str>>
    let _v56 = v72 
    #endif
    let v75 : Ref<Str> = _v56 
    let v80 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v75 v81 
    let _v80 = v82 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : string = "String::from($0)"
    let v84 : std_string_String = Fable.Core.RustInterop.emitRustExpr v75 v83 
    let _v80 = v84 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : string = "String::from($0)"
    let v86 : std_string_String = Fable.Core.RustInterop.emitRustExpr v75 v85 
    let _v80 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : std_string_String = v75 |> unbox<std_string_String>
    let _v80 = v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : std_string_String = v75 |> unbox<std_string_String>
    let _v80 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_string_String = v75 |> unbox<std_string_String>
    let _v80 = v93 
    #endif
#else
    let v96 : std_string_String = v75 |> unbox<std_string_String>
    let _v80 = v96 
    #endif
    let v99 : std_string_String = _v80 
    let v104 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v105 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v99 v104 
    let v106 : leptos_prelude_AnyView_ = method188(v105)
    let v107 : string = "v106"
    let v108 : string = ""
    let v109 : string = v107 + v108 
    let v110 : string = v109 + v108 
    let v111 : string = "vec![" + v110 + "]"
    let v112 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v111 
    let v113 : string = "leptos::prelude::Fragment::new($0)"
    let v114 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "&$0"
    let v116 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v114 v115 
    let v117 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v118 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v116 v117 
    v118
and method398 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure473(v0)
and closure474 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l1
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v52 
    let v54 : leptos_prelude_AnyView_ = method188(v53)
    let v55 : string = "v54"
    let v56 : string = ""
    let v57 : string = v55 + v56 
    let v58 : string = v57 + v56 
    let v59 : string = "vec![" + v58 + "]"
    let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "leptos::prelude::Fragment::new($0)"
    let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "&$0"
    let v64 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method399 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure474(v0)
and closure475 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l2
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v52 
    let v54 : leptos_prelude_AnyView_ = method188(v53)
    let v55 : string = "v54"
    let v56 : string = ""
    let v57 : string = v55 + v56 
    let v58 : string = v57 + v56 
    let v59 : string = "vec![" + v58 + "]"
    let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "leptos::prelude::Fragment::new($0)"
    let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "&$0"
    let v64 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method400 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure475(v0)
and closure477 () struct (v0 : std_string_String, v1 : std_string_String option) : leptos_prelude_AnyView_ =
    let v2 : (unit -> leptos_dom_Fragment) = method363(v0)
    let v3 : (unit -> leptos_dom_Fragment) = method364(v1)
    let v4 : string = "$0"
    let v5 : (unit -> string) = closure420()
    let v6 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v5 v4 
    let v7 : string = "$0"
    let v8 : (unit -> string) = closure421()
    let v9 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v8 v7 
    let v10 : string = "$0"
    let v11 : (unit -> string) = closure422()
    let v12 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v11 v10 
    let v13 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v12(()) + \" \" + &v9(()) + \" \" + &v6(())"
    let v14 : string = ""
    let v15 : string = " " + v13 + v14 + ""
    let v16 : (unit -> leptos_prelude_AnyView_) = method369(v2, v3)
    let v17 : string = "dl"
    let v18 : string = "<" + v17 + " " + v15 + ">move || { v16() }</" + v17 + ">"
    let v19 : string = "leptos::prelude::view! { " + v18 + " }"
    let v20 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v20 |> unbox
    let v22 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and closure476 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : (struct (std_string_String * std_string_String option) []) = v0.l7
    let v2 : string = "$0.to_vec()"
    let v3 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v5 : (struct (std_string_String * std_string_String option) -> leptos_prelude_AnyView_) = closure477()
    let v6 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr struct (v3, v5) v4 
    let v7 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v8 : (leptos_prelude_AnyView_ []) = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : (leptos_prelude_AnyView_ []) = method177(v8)
    let v10 : string = "leptos::prelude::CollectView::collect_view($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = ""
    let v15 : string = v13 + v14 
    let v16 : string = v15 + v14 
    let v17 : string = "vec![" + v16 + "]"
    let v18 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = "leptos::prelude::Fragment::new($0)"
    let v20 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "&$0"
    let v22 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    v24
and method401 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure476(v0)
and closure478 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : float = v0.l8
    let v2 : (float -> string) = _.ToString()
    let v3 : string = v2 v1
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v19 
    #endif
#else
    let v22 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v22 
    #endif
    let v25 : Ref<Str> = _v6 
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v31 
    let _v30 = v32 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v35 
    let _v30 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v40 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v43 
    #endif
#else
    let v46 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v46 
    #endif
    let v49 : std_string_String = _v30 
    let v54 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v54 
    let v56 : leptos_prelude_AnyView_ = method188(v55)
    let v57 : string = "v56"
    let v58 : string = ""
    let v59 : string = v57 + v58 
    let v60 : string = v59 + v58 
    let v61 : string = "vec![" + v60 + "]"
    let v62 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "leptos::prelude::Fragment::new($0)"
    let v64 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "&$0"
    let v66 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v64 v65 
    let v67 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v68 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method402 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure478(v0)
and closure479 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : float = v0.l10
    let v2 : (float -> string) = _.ToString()
    let v3 : string = v2 v1
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v19 
    #endif
#else
    let v22 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v22 
    #endif
    let v25 : Ref<Str> = _v6 
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v31 
    let _v30 = v32 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v35 
    let _v30 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v40 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v43 
    #endif
#else
    let v46 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v46 
    #endif
    let v49 : std_string_String = _v30 
    let v54 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v54 
    let v56 : leptos_prelude_AnyView_ = method188(v55)
    let v57 : string = "v56"
    let v58 : string = ""
    let v59 : string = v57 + v58 
    let v60 : string = v59 + v58 
    let v61 : string = "vec![" + v60 + "]"
    let v62 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "leptos::prelude::Fragment::new($0)"
    let v64 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "&$0"
    let v66 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v64 v65 
    let v67 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v68 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method403 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure479(v0)
and closure480 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : uint32 = v0.l6
    let v2 : (uint32 -> string) = _.ToString()
    let v3 : string = v2 v1
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v19 
    #endif
#else
    let v22 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v22 
    #endif
    let v25 : Ref<Str> = _v6 
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v31 
    let _v30 = v32 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v35 
    let _v30 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v40 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v43 
    #endif
#else
    let v46 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v46 
    #endif
    let v49 : std_string_String = _v30 
    let v54 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v54 
    let v56 : leptos_prelude_AnyView_ = method188(v55)
    let v57 : string = "v56"
    let v58 : string = ""
    let v59 : string = v57 + v58 
    let v60 : string = v59 + v58 
    let v61 : string = "vec![" + v60 + "]"
    let v62 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "leptos::prelude::Fragment::new($0)"
    let v64 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "&$0"
    let v66 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v64 v65 
    let v67 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v68 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method404 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure480(v0)
and closure482 () () : string =
    let v0 : string = "[max-height:20vh] [width:100vw] [max-width:100vw]"
    v0
and closure481 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : (std_string_String []) = v0.l11
    let v2 : uint64 = System.Convert.ToUInt64 v1.Length
    let v3 : bool = v2 = 0UL
    let v106 : leptos_dom_Fragment =
        if v3 then
            let v4 : string = ""
            let v5 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : string = "&*$0"
            let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
            let _v5 = v7 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v8 : string = "&*$0"
            let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
            let _v5 = v9 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v10 : string = "&*$0"
            let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
            let _v5 = v11 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v5 = v12 
            #endif
#if FABLE_COMPILER_PYTHON
            let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v5 = v15 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v5 = v18 
            #endif
#else
            let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _v5 = v21 
            #endif
            let v24 : Ref<Str> = _v5 
            let v29 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v30 : string = "String::from($0)"
            let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
            let _v29 = v31 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v32 : string = "String::from($0)"
            let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
            let _v29 = v33 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v34 : string = "String::from($0)"
            let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
            let _v29 = v35 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v36 : std_string_String = v24 |> unbox<std_string_String>
            let _v29 = v36 
            #endif
#if FABLE_COMPILER_PYTHON
            let v39 : std_string_String = v24 |> unbox<std_string_String>
            let _v29 = v39 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v42 : std_string_String = v24 |> unbox<std_string_String>
            let _v29 = v42 
            #endif
#else
            let v45 : std_string_String = v24 |> unbox<std_string_String>
            let _v29 = v45 
            #endif
            let v48 : std_string_String = _v29 
            let v53 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v48 v53 
            let v55 : leptos_prelude_AnyView_ = method188(v54)
            let v56 : string = "v55"
            let v57 : string = v56 + v4 
            let v58 : string = v57 + v4 
            let v59 : string = "vec![" + v58 + "]"
            let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
            let v61 : string = "leptos::prelude::Fragment::new($0)"
            let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
            v62
        else
            let v63 : (std_string_String []) = v0.l11
            let v64 : string = "$0.to_vec()"
            let v65 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v63 v64 
            let v66 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v67 : (std_string_String -> string) = closure59()
            let v68 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v65, v67) v66 
            let v69 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v70 : (string []) = Fable.Core.RustInterop.emitRustExpr v68 v69 
            let v71 : string seq = v70 |> Seq.ofArray
            let v74 : string = method394()
            let v75 : (string -> (string seq -> string)) = String.concat
            let v76 : (string seq -> string) = v75 v74
            let v77 : string = v76 v71
            let v81 : string = "\\n"
            let v82 : string = "\n"
            let v83 : string = v77.Replace (v81, v82)
            let v84 : string = "$0"
            let v85 : (unit -> string) = closure482()
            let v86 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v85 v84 
            let v87 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v86(())"
            let v88 : string = ""
            let v89 : string = " " + v87 + v88 + ""
            let v90 : (unit -> leptos_prelude_AnyView_) = method323(v83)
            let v91 : string = "pre"
            let v92 : string = "<" + v91 + " " + v89 + ">move || { v90() }</" + v91 + ">"
            let v93 : string = "leptos::prelude::view! { " + v92 + " }"
            let v94 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v93 
            let v95 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v94 |> unbox
            let v96 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v97 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v95 v96 
            let v98 : leptos_prelude_AnyView_ = method188(v97)
            let v99 : string = "v98"
            let v100 : string = v99 + v88 
            let v101 : string = v100 + v88 
            let v102 : string = "vec![" + v101 + "]"
            let v103 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v102 
            let v104 : string = "leptos::prelude::Fragment::new($0)"
            let v105 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v103 v104 
            v105
    let v107 : string = "&$0"
    let v108 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v110 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v108 v109 
    v110
and method405 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure481(v0)
and closure483 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : bool = v0.l9
    let v2 : (bool -> string) = _.ToString()
    let v3 : string = v2 v1
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v19 
    #endif
#else
    let v22 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v6 = v22 
    #endif
    let v25 : Ref<Str> = _v6 
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v31 
    let _v30 = v32 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v25 v35 
    let _v30 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v40 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v43 
    #endif
#else
    let v46 : std_string_String = v25 |> unbox<std_string_String>
    let _v30 = v46 
    #endif
    let v49 : std_string_String = _v30 
    let v54 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v49 v54 
    let v56 : leptos_prelude_AnyView_ = method188(v55)
    let v57 : string = "v56"
    let v58 : string = ""
    let v59 : string = v57 + v58 
    let v60 : string = v59 + v58 
    let v61 : string = "vec![" + v60 + "]"
    let v62 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "leptos::prelude::Fragment::new($0)"
    let v64 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "&$0"
    let v66 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v64 v65 
    let v67 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v68 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and method406 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure483(v0)
and closure484 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l3
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v52 
    let v54 : leptos_prelude_AnyView_ = method188(v53)
    let v55 : string = "v54"
    let v56 : string = ""
    let v57 : string = v55 + v56 
    let v58 : string = v57 + v56 
    let v59 : string = "vec![" + v58 + "]"
    let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "leptos::prelude::Fragment::new($0)"
    let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "&$0"
    let v64 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method407 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure484(v0)
and closure485 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l4
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v52 
    let v54 : leptos_prelude_AnyView_ = method188(v53)
    let v55 : string = "v54"
    let v56 : string = ""
    let v57 : string = v55 + v56 
    let v58 : string = v57 + v56 
    let v59 : string = "vec![" + v58 + "]"
    let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "leptos::prelude::Fragment::new($0)"
    let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "&$0"
    let v64 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method408 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure485(v0)
and closure486 (v0 : Heap5) () : leptos_prelude_AnyView_ =
    let v1 : std_string_String = v0.l0
    let v2 : string = "fable_library_rust::String_::fromString($0)"
    let v3 : string = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _v4 = v20 
    #endif
    let v23 : Ref<Str> = _v4 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v29 
    let _v28 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v31 
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : string = "String::from($0)"
    let v34 : std_string_String = Fable.Core.RustInterop.emitRustExpr v23 v33 
    let _v28 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v35 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v41 
    #endif
#else
    let v44 : std_string_String = v23 |> unbox<std_string_String>
    let _v28 = v44 
    #endif
    let v47 : std_string_String = _v28 
    let v52 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v47 v52 
    let v54 : leptos_prelude_AnyView_ = method188(v53)
    let v55 : string = "v54"
    let v56 : string = ""
    let v57 : string = v55 + v56 
    let v58 : string = v57 + v56 
    let v59 : string = "vec![" + v58 + "]"
    let v60 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "leptos::prelude::Fragment::new($0)"
    let v62 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v60 v61 
    let v63 : string = "&$0"
    let v64 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
    v66
and method409 (v0 : Heap5) : (unit -> leptos_prelude_AnyView_) =
    closure486(v0)
and closure471 (v0 : Heap5, v1 : string) () : leptos_prelude_AnyView_ =
    let v2 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v3 : string = ""
    let v4 : string = " " + v2 + v3 + ""
    let v5 : (unit -> leptos_prelude_AnyView_) = method397(v1)
    let v6 : string = "td"
    let v7 : string = "<" + v6 + " " + v4 + ">move || { v5() }</" + v6 + ">"
    let v8 : string = "leptos::prelude::view! { " + v7 + " }"
    let v9 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v9 |> unbox
    let v11 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v12 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v14 : string = " " + v13 + v3 + ""
    let v15 : (unit -> leptos_prelude_AnyView_) = method398(v0)
    let v16 : string = "<" + v6 + " " + v14 + ">move || { v15() }</" + v6 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v23 : string = " " + v22 + v3 + ""
    let v24 : (unit -> leptos_prelude_AnyView_) = method399(v0)
    let v25 : string = "<" + v6 + " " + v23 + ">move || { v24() }</" + v6 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v32 : string = " " + v31 + v3 + ""
    let v33 : (unit -> leptos_prelude_AnyView_) = method400(v0)
    let v34 : string = "<" + v6 + " " + v32 + ">move || { v33() }</" + v6 + ">"
    let v35 : string = "leptos::prelude::view! { " + v34 + " }"
    let v36 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v36 |> unbox
    let v38 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v39 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v41 : string = " " + v40 + v3 + ""
    let v42 : (unit -> leptos_prelude_AnyView_) = method401(v0)
    let v43 : string = "<" + v6 + " " + v41 + ">move || { v42() }</" + v6 + ">"
    let v44 : string = "leptos::prelude::view! { " + v43 + " }"
    let v45 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v44 
    let v46 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v45 |> unbox
    let v47 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v48 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v46 v47 
    let v49 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v50 : string = " " + v49 + v3 + ""
    let v51 : (unit -> leptos_prelude_AnyView_) = method402(v0)
    let v52 : string = "<" + v6 + " " + v50 + ">move || { v51() }</" + v6 + ">"
    let v53 : string = "leptos::prelude::view! { " + v52 + " }"
    let v54 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v53 
    let v55 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v54 |> unbox
    let v56 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v57 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v56 
    let v58 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v59 : string = " " + v58 + v3 + ""
    let v60 : (unit -> leptos_prelude_AnyView_) = method403(v0)
    let v61 : string = "<" + v6 + " " + v59 + ">move || { v60() }</" + v6 + ">"
    let v62 : string = "leptos::prelude::view! { " + v61 + " }"
    let v63 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v62 
    let v64 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v63 |> unbox
    let v65 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v66 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v65 
    let v67 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v68 : string = " " + v67 + v3 + ""
    let v69 : (unit -> leptos_prelude_AnyView_) = method404(v0)
    let v70 : string = "<" + v6 + " " + v68 + ">move || { v69() }</" + v6 + ">"
    let v71 : string = "leptos::prelude::view! { " + v70 + " }"
    let v72 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v72 |> unbox
    let v74 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v75 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\""
    let v77 : string = " " + v76 + v3 + ""
    let v78 : (unit -> leptos_prelude_AnyView_) = method405(v0)
    let v79 : string = "<" + v6 + " " + v77 + ">move || { v78() }</" + v6 + ">"
    let v80 : string = "leptos::prelude::view! { " + v79 + " }"
    let v81 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v80 
    let v82 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v81 |> unbox
    let v83 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v84 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v86 : string = " " + v85 + v3 + ""
    let v87 : (unit -> leptos_prelude_AnyView_) = method406(v0)
    let v88 : string = "<" + v6 + " " + v86 + ">move || { v87() }</" + v6 + ">"
    let v89 : string = "leptos::prelude::view! { " + v88 + " }"
    let v90 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v90 |> unbox
    let v92 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v93 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v95 : string = " " + v94 + v3 + ""
    let v96 : (unit -> leptos_prelude_AnyView_) = method407(v0)
    let v97 : string = "<" + v6 + " " + v95 + ">move || { v96() }</" + v6 + ">"
    let v98 : string = "leptos::prelude::view! { " + v97 + " }"
    let v99 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v99 |> unbox
    let v101 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v102 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v100 v101 
    let v103 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v104 : string = " " + v103 + v3 + ""
    let v105 : (unit -> leptos_prelude_AnyView_) = method408(v0)
    let v106 : string = "<" + v6 + " " + v104 + ">move || { v105() }</" + v6 + ">"
    let v107 : string = "leptos::prelude::view! { " + v106 + " }"
    let v108 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v107 
    let v109 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v108 |> unbox
    let v110 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v111 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v109 v110 
    let v112 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
    let v113 : string = " " + v112 + v3 + ""
    let v114 : (unit -> leptos_prelude_AnyView_) = method409(v0)
    let v115 : string = "<" + v6 + " " + v113 + ">move || { v114() }</" + v6 + ">"
    let v116 : string = "leptos::prelude::view! { " + v115 + " }"
    let v117 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v116 
    let v118 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v117 |> unbox
    let v119 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v120 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v118 v119 
    let v121 : leptos_prelude_AnyView_ = method188(v120)
    let v122 : string = "v121"
    let v123 : string = v122 + v3 
    let v124 : string = v123 + v3 
    let v125 : leptos_prelude_AnyView_ = method188(v111)
    let v126 : string = "v125"
    let v127 : string = ", "
    let v128 : string = v126 + v127 
    let v129 : string = v128 + v124 
    let v130 : leptos_prelude_AnyView_ = method188(v102)
    let v131 : string = "v130"
    let v132 : string = v131 + v127 
    let v133 : string = v132 + v129 
    let v134 : leptos_prelude_AnyView_ = method188(v93)
    let v135 : string = "v134"
    let v136 : string = v135 + v127 
    let v137 : string = v136 + v133 
    let v138 : leptos_prelude_AnyView_ = method188(v84)
    let v139 : string = "v138"
    let v140 : string = v139 + v127 
    let v141 : string = v140 + v137 
    let v142 : leptos_prelude_AnyView_ = method188(v75)
    let v143 : string = "v142"
    let v144 : string = v143 + v127 
    let v145 : string = v144 + v141 
    let v146 : leptos_prelude_AnyView_ = method188(v66)
    let v147 : string = "v146"
    let v148 : string = v147 + v127 
    let v149 : string = v148 + v145 
    let v150 : leptos_prelude_AnyView_ = method188(v57)
    let v151 : string = "v150"
    let v152 : string = v151 + v127 
    let v153 : string = v152 + v149 
    let v154 : leptos_prelude_AnyView_ = method188(v48)
    let v155 : string = "v154"
    let v156 : string = v155 + v127 
    let v157 : string = v156 + v153 
    let v158 : leptos_prelude_AnyView_ = method188(v39)
    let v159 : string = "v158"
    let v160 : string = v159 + v127 
    let v161 : string = v160 + v157 
    let v162 : leptos_prelude_AnyView_ = method188(v30)
    let v163 : string = "v162"
    let v164 : string = v163 + v127 
    let v165 : string = v164 + v161 
    let v166 : leptos_prelude_AnyView_ = method188(v21)
    let v167 : string = "v166"
    let v168 : string = v167 + v127 
    let v169 : string = v168 + v165 
    let v170 : leptos_prelude_AnyView_ = method188(v12)
    let v171 : string = "v170"
    let v172 : string = v171 + v127 
    let v173 : string = v172 + v169 
    let v174 : string = "vec![" + v173 + "]"
    let v175 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v174 
    let v176 : string = "leptos::prelude::Fragment::new($0)"
    let v177 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : string = "&$0"
    let v179 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v177 v178 
    let v180 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v181 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v179 v180 
    v181
and method396 (v0 : Heap5, v1 : string) : (unit -> leptos_prelude_AnyView_) =
    closure471(v0, v1)
and closure470 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> =
    let v3 : string = "transaction.tr_render (1)"
    let v4 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = "class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\""
    let v7 : string = ""
    let v8 : string = " " + v6 + v7 + ""
    let v9 : (unit -> leptos_prelude_AnyView_) = method396(v2, v0)
    let v10 : string = "tr"
    let v11 : string = "<" + v10 + " " + v8 + ">move || { v9() }</" + v10 + ">"
    let v12 : string = "leptos::prelude::view! { " + v11 + " }"
    let v13 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v13 |> unbox
    v14
and closure487 () (v0 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>>) : leptos_prelude_AnyView_ =
    let v1 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v2 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure489 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Account"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method411 () : (unit -> leptos_prelude_AnyView_) =
    closure489()
and closure490 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Block Timestamp"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method412 () : (unit -> leptos_prelude_AnyView_) =
    closure490()
and closure491 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Predecessor"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method413 () : (unit -> leptos_prelude_AnyView_) =
    closure491()
and closure492 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Receiver"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method414 () : (unit -> leptos_prelude_AnyView_) =
    closure492()
and closure493 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Action"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method415 () : (unit -> leptos_prelude_AnyView_) =
    closure493()
and closure494 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Deposit"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method416 () : (unit -> leptos_prelude_AnyView_) =
    closure494()
and closure495 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Fee"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method417 () : (unit -> leptos_prelude_AnyView_) =
    closure495()
and closure496 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Block Height"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method418 () : (unit -> leptos_prelude_AnyView_) =
    closure496()
and method421 (v0 : (std_string_String []), v1 : int32) : bool =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 < v2
    if v3 then
        let v4 : std_string_String = v0.[int v1]
        let v5 : string = "fable_library_rust::String_::fromString($0)"
        let v6 : string = Fable.Core.RustInterop.emitRustExpr v4 v5 
        let v7 : int32 = v6.Length
        let v8 : bool = v7 > 0
        if v8 then
            true
        else
            let v9 : int32 = v1 + 1
            method421(v0, v9)
    else
        false
and method420 (v0 : (struct (string * unativeint * Heap5) []), v1 : int32) : bool =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 < v2
    if v3 then
        let struct (v4 : string, v5 : unativeint, v6 : Heap5) = v0.[int v1]
        let v7 : (std_string_String []) = v6.l11
        let v8 : int32 = 0
        let v9 : bool = method421(v7, v8)
        if v9 then
            true
        else
            let v10 : int32 = v1 + 1
            method420(v0, v10)
    else
        false
and closure497 (v0 : (struct (string * unativeint * Heap5) [])) () : leptos_prelude_AnyView_ =
    let v1 : int32 = 0
    let v2 : bool = method420(v0, v1)
    let v3 : bool = false = v2
    let v6 : string =
        if v3 then
            let v4 : string = ""
            v4
        else
            let v5 : string = "Logs"
            v5
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v8 
    let _v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v10 
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v12 
    let _v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v7 = v17 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v7 = v20 
    #endif
#else
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v7 = v23 
    #endif
    let v26 : Ref<Str> = _v7 
    let v31 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v26 v32 
    let _v31 = v33 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v26 v34 
    let _v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : string = "String::from($0)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v26 v36 
    let _v31 = v37 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : std_string_String = v26 |> unbox<std_string_String>
    let _v31 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : std_string_String = v26 |> unbox<std_string_String>
    let _v31 = v41 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v44 : std_string_String = v26 |> unbox<std_string_String>
    let _v31 = v44 
    #endif
#else
    let v47 : std_string_String = v26 |> unbox<std_string_String>
    let _v31 = v47 
    #endif
    let v50 : std_string_String = _v31 
    let v55 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v56 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v50 v55 
    let v57 : leptos_prelude_AnyView_ = method188(v56)
    let v58 : string = "v57"
    let v59 : string = ""
    let v60 : string = v58 + v59 
    let v61 : string = v60 + v59 
    let v62 : string = "vec![" + v61 + "]"
    let v63 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v62 
    let v64 : string = "leptos::prelude::Fragment::new($0)"
    let v65 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v63 v64 
    let v66 : string = "&$0"
    let v67 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v65 v66 
    let v68 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v69 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v67 v68 
    v69
and method419 (v0 : (struct (string * unativeint * Heap5) [])) : (unit -> leptos_prelude_AnyView_) =
    closure497(v0)
and closure498 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Outcome Status"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method422 () : (unit -> leptos_prelude_AnyView_) =
    closure498()
and closure499 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Hash"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method423 () : (unit -> leptos_prelude_AnyView_) =
    closure499()
and closure500 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Block Hash"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method424 () : (unit -> leptos_prelude_AnyView_) =
    closure500()
and closure501 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Receipt ID"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method425 () : (unit -> leptos_prelude_AnyView_) =
    closure501()
and closure488 (v0 : (struct (string * unativeint * Heap5) [])) () : leptos_prelude_AnyView_ =
    let v1 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method411()
    let v5 : string = "th"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v13 : string = " " + v12 + v2 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method412()
    let v15 : string = "<" + v5 + " " + v13 + ">move || { v14() }</" + v5 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v22 : string = " " + v21 + v2 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method413()
    let v24 : string = "<" + v5 + " " + v22 + ">move || { v23() }</" + v5 + ">"
    let v25 : string = "leptos::prelude::view! { " + v24 + " }"
    let v26 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v26 |> unbox
    let v28 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v29 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v30 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v31 : string = " " + v30 + v2 + ""
    let v32 : (unit -> leptos_prelude_AnyView_) = method414()
    let v33 : string = "<" + v5 + " " + v31 + ">move || { v32() }</" + v5 + ">"
    let v34 : string = "leptos::prelude::view! { " + v33 + " }"
    let v35 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v35 |> unbox
    let v37 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v40 : string = " " + v39 + v2 + ""
    let v41 : (unit -> leptos_prelude_AnyView_) = method415()
    let v42 : string = "<" + v5 + " " + v40 + ">move || { v41() }</" + v5 + ">"
    let v43 : string = "leptos::prelude::view! { " + v42 + " }"
    let v44 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v44 |> unbox
    let v46 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let v48 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v49 : string = " " + v48 + v2 + ""
    let v50 : (unit -> leptos_prelude_AnyView_) = method416()
    let v51 : string = "<" + v5 + " " + v49 + ">move || { v50() }</" + v5 + ">"
    let v52 : string = "leptos::prelude::view! { " + v51 + " }"
    let v53 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v52 
    let v54 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v53 |> unbox
    let v55 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v56 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v54 v55 
    let v57 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v58 : string = " " + v57 + v2 + ""
    let v59 : (unit -> leptos_prelude_AnyView_) = method417()
    let v60 : string = "<" + v5 + " " + v58 + ">move || { v59() }</" + v5 + ">"
    let v61 : string = "leptos::prelude::view! { " + v60 + " }"
    let v62 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v62 |> unbox
    let v64 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v63 v64 
    let v66 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v67 : string = " " + v66 + v2 + ""
    let v68 : (unit -> leptos_prelude_AnyView_) = method418()
    let v69 : string = "<" + v5 + " " + v67 + ">move || { v68() }</" + v5 + ">"
    let v70 : string = "leptos::prelude::view! { " + v69 + " }"
    let v71 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v71 |> unbox
    let v73 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v74 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v72 v73 
    let v75 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v76 : string = " " + v75 + v2 + ""
    let v77 : (unit -> leptos_prelude_AnyView_) = method419(v0)
    let v78 : string = "<" + v5 + " " + v76 + ">move || { v77() }</" + v5 + ">"
    let v79 : string = "leptos::prelude::view! { " + v78 + " }"
    let v80 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v80 |> unbox
    let v82 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v83 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v85 : string = " " + v84 + v2 + ""
    let v86 : (unit -> leptos_prelude_AnyView_) = method422()
    let v87 : string = "<" + v5 + " " + v85 + ">move || { v86() }</" + v5 + ">"
    let v88 : string = "leptos::prelude::view! { " + v87 + " }"
    let v89 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v89 |> unbox
    let v91 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v92 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let v93 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v94 : string = " " + v93 + v2 + ""
    let v95 : (unit -> leptos_prelude_AnyView_) = method423()
    let v96 : string = "<" + v5 + " " + v94 + ">move || { v95() }</" + v5 + ">"
    let v97 : string = "leptos::prelude::view! { " + v96 + " }"
    let v98 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v97 
    let v99 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v98 |> unbox
    let v100 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v101 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v99 v100 
    let v102 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v103 : string = " " + v102 + v2 + ""
    let v104 : (unit -> leptos_prelude_AnyView_) = method424()
    let v105 : string = "<" + v5 + " " + v103 + ">move || { v104() }</" + v5 + ">"
    let v106 : string = "leptos::prelude::view! { " + v105 + " }"
    let v107 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v106 
    let v108 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v107 |> unbox
    let v109 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v110 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v108 v109 
    let v111 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
    let v112 : string = " " + v111 + v2 + ""
    let v113 : (unit -> leptos_prelude_AnyView_) = method425()
    let v114 : string = "<" + v5 + " " + v112 + ">move || { v113() }</" + v5 + ">"
    let v115 : string = "leptos::prelude::view! { " + v114 + " }"
    let v116 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v115 
    let v117 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v116 |> unbox
    let v118 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v119 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v117 v118 
    let v120 : leptos_prelude_AnyView_ = method188(v119)
    let v121 : string = "v120"
    let v122 : string = v121 + v2 
    let v123 : string = v122 + v2 
    let v124 : leptos_prelude_AnyView_ = method188(v110)
    let v125 : string = "v124"
    let v126 : string = ", "
    let v127 : string = v125 + v126 
    let v128 : string = v127 + v123 
    let v129 : leptos_prelude_AnyView_ = method188(v101)
    let v130 : string = "v129"
    let v131 : string = v130 + v126 
    let v132 : string = v131 + v128 
    let v133 : leptos_prelude_AnyView_ = method188(v92)
    let v134 : string = "v133"
    let v135 : string = v134 + v126 
    let v136 : string = v135 + v132 
    let v137 : leptos_prelude_AnyView_ = method188(v83)
    let v138 : string = "v137"
    let v139 : string = v138 + v126 
    let v140 : string = v139 + v136 
    let v141 : leptos_prelude_AnyView_ = method188(v74)
    let v142 : string = "v141"
    let v143 : string = v142 + v126 
    let v144 : string = v143 + v140 
    let v145 : leptos_prelude_AnyView_ = method188(v65)
    let v146 : string = "v145"
    let v147 : string = v146 + v126 
    let v148 : string = v147 + v144 
    let v149 : leptos_prelude_AnyView_ = method188(v56)
    let v150 : string = "v149"
    let v151 : string = v150 + v126 
    let v152 : string = v151 + v148 
    let v153 : leptos_prelude_AnyView_ = method188(v47)
    let v154 : string = "v153"
    let v155 : string = v154 + v126 
    let v156 : string = v155 + v152 
    let v157 : leptos_prelude_AnyView_ = method188(v38)
    let v158 : string = "v157"
    let v159 : string = v158 + v126 
    let v160 : string = v159 + v156 
    let v161 : leptos_prelude_AnyView_ = method188(v29)
    let v162 : string = "v161"
    let v163 : string = v162 + v126 
    let v164 : string = v163 + v160 
    let v165 : leptos_prelude_AnyView_ = method188(v20)
    let v166 : string = "v165"
    let v167 : string = v166 + v126 
    let v168 : string = v167 + v164 
    let v169 : leptos_prelude_AnyView_ = method188(v11)
    let v170 : string = "v169"
    let v171 : string = v170 + v126 
    let v172 : string = v171 + v168 
    let v173 : string = "vec![" + v172 + "]"
    let v174 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v173 
    let v175 : string = "leptos::prelude::Fragment::new($0)"
    let v176 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v174 v175 
    let v177 : string = "&$0"
    let v178 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v176 v177 
    let v179 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v180 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v178 v179 
    v180
and method410 (v0 : (struct (string * unativeint * Heap5) [])) : (unit -> leptos_prelude_AnyView_) =
    closure488(v0)
and closure367 (v0 : Heap2, v1 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>, v2 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>, v3 : leptos_prelude_ReadSignal<bool>) () : leptos_dom_Fragment =
    let v4 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v21 : leptos_prelude_AnyView_ =
        if v5 then
            let v6 : string = "class=\"px-[12px] py-[10px]\""
            let v7 : string = ""
            let v8 : string = " " + v6 + v7 + ""
            let v9 : (unit -> leptos_prelude_AnyView_) = method333(v0)
            let v10 : string = "div"
            let v11 : string = "<" + v10 + " " + v8 + ">move || { v9() }</" + v10 + ">"
            let v12 : string = "leptos::prelude::view! { " + v11 + " }"
            let v13 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v12 
            let v14 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v13 |> unbox
            let v15 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v16 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v14 v15 
            v16
        else
            let v17 : (leptos_prelude_AnyView_ []) = [||]
            let v18 : (leptos_prelude_AnyView_ []) = method177(v17)
            let v19 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
            v20
    let v22 : string = $"$0()"
    let v23 : Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v2 v22 
    let v24 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v25 : (struct (string * Vec<struct (string * US24 * string * bool * bool)>) []) = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : uint64 = System.Convert.ToUInt64 v25.Length
    let v27 : bool = v26 = 0UL
    let v168 : leptos_prelude_AnyView_ =
        if v27 then
            let v28 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v29 : string = ""
            let v30 : string = " " + v28 + v29 + ""
            let v31 : (unit -> leptos_prelude_AnyView_) = method229()
            let v32 : string = "div"
            let v33 : string = "<" + v32 + " " + v30 + ">move || { v31() }</" + v32 + ">"
            let v34 : string = "leptos::prelude::view! { " + v33 + " }"
            let v35 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v34 
            let v36 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v35 |> unbox
            let v37 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
            v38
        else
            let v39 : string = $"$0()"
            let v40 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v1 v39 
            let v41 : ((struct (string * unativeint * Heap5) []) option -> US54) = method139()
            let v42 : (std_string_String -> US54) = method140()
            let v43 : US54 = match v40 with Ok x -> v41 x | Error x -> v42 x
            let v66 : US47 =
                match v43 with
                | US54_1(v63) -> (* Error *)
                    US47_1(v63)
                | US54_0(v44) -> (* Ok *)
                    let v45 : ((struct (string * unativeint * Heap5) []) -> US48) = method141()
                    let v46 : US48 option = v44 |> Option.map v45 
                    let v57 : US48 = US48_1
                    let v58 : US48 = v46 |> Option.defaultValue v57 
                    US47_0(v58)
            match v66 with
            | US47_1(v152) -> (* Error *)
                let v153 : string = "fable_library_rust::String_::fromString($0)"
                let v154 : string = Fable.Core.RustInterop.emitRustExpr v152 v153 
                let v155 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
                let v156 : string = ""
                let v157 : string = " " + v155 + v156 + ""
                let v158 : (unit -> leptos_prelude_AnyView_) = method221(v154)
                let v159 : string = "div"
                let v160 : string = "<" + v159 + " " + v157 + ">move || { v158() }</" + v159 + ">"
                let v161 : string = "leptos::prelude::view! { " + v160 + " }"
                let v162 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v161 
                let v163 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v162 |> unbox
                let v164 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v165 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v163 v164 
                v165
            | US47_0(v67) -> (* Ok *)
                match v67 with
                | US48_0(v68) -> (* Some *)
                    let v69 : leptos_prelude_RwSignal<Heap1> = v0.l0
                    let v70 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
                    let v71 : Heap1 = Fable.Core.RustInterop.emitRustExpr v69 v70 
                    let v72 : leptos_prelude_RwSignal<Heap0> = v71.l3
                    let v73 : string = $"leptos::prelude::SignalGet::get(&$0)"
                    let v74 : Heap0 = Fable.Core.RustInterop.emitRustExpr v72 v73 
                    let v75 : US1 = v74.l4
                    let v76 : bool =
                        match v75 with
                        | US1_0 -> (* Details *)
                            true
                        | _ ->
                            false
                    if v76 then
                        let v77 : string = "class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\""
                        let v78 : string = ""
                        let v79 : string = " " + v77 + v78 + ""
                        let v80 : (unit -> leptos_prelude_AnyView_) = method345(v68)
                        let v81 : string = "div"
                        let v82 : string = "<" + v81 + " " + v79 + ">move || { v80() }</" + v81 + ">"
                        let v83 : string = "leptos::prelude::view! { " + v82 + " }"
                        let v84 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v83 
                        let v85 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v84 |> unbox
                        let v86 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v87 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v85 v86 
                        v87
                    else
                        let v88 : string = "$0.to_vec()"
                        let v89 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v68 v88 
                        let v90 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                        let v91 : (struct (string * unativeint * Heap5) -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>>) = closure470()
                        let v92 : Vec<leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>>> = Fable.Core.RustInterop.emitRustExpr struct (v89, v91) v90 
                        let v93 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                        let v94 : (leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> -> leptos_prelude_AnyView_) = closure487()
                        let v95 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr struct (v92, v94) v93 
                        let v96 : string = "fable_library_rust::NativeArray_::array_from($0)"
                        let v97 : (leptos_prelude_AnyView_ []) = Fable.Core.RustInterop.emitRustExpr v95 v96 
                        let v98 : (leptos_prelude_AnyView_ []) = method177(v97)
                        let v99 : string = "leptos::prelude::CollectView::collect_view($0)"
                        let v100 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v98 v99 
                        let v101 : leptos_prelude_AnyView_ = method188(v100)
                        let v102 : string = "v101"
                        let v103 : string = ""
                        let v104 : string = v102 + v103 
                        let v105 : string = v104 + v103 
                        let v106 : string = "vec![" + v105 + "]"
                        let v107 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v106 
                        let v108 : string = "leptos::prelude::Fragment::new($0)"
                        let v109 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v107 v108 
                        let v110 : string = "transaction.tr_head_render (1)"
                        let v111 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v112 : bool = Fable.Core.RustInterop.emitRustExpr v110 v111 
                        let v113 : (unit -> leptos_prelude_AnyView_) = method410(v68)
                        let v114 : string = "tr"
                        let v115 : string = "<" + v114 + " " + v103 + ">move || { v113() }</" + v114 + ">"
                        let v116 : string = "leptos::prelude::view! { " + v115 + " }"
                        let v117 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v116 
                        let v118 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v117 |> unbox
                        let v119 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v120 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v118 v119 
                        let v121 : leptos_prelude_AnyView_ = method188(v120)
                        let v122 : string = "v121"
                        let v123 : string = v122 + v103 
                        let v124 : string = v123 + v103 
                        let v125 : string = "vec![" + v124 + "]"
                        let v126 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v125 
                        let v127 : string = "leptos::prelude::Fragment::new($0)"
                        let v128 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v126 v127 
                        let v129 : string = "class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\""
                        let v130 : string = " " + v129 + v103 + ""
                        let v131 : (unit -> leptos_prelude_AnyView_) = method252(v128, v109)
                        let v132 : string = "table"
                        let v133 : string = "<" + v132 + " " + v130 + ">move || { v131() }</" + v132 + ">"
                        let v134 : string = "leptos::prelude::view! { " + v133 + " }"
                        let v135 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v134 
                        let v136 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Table>> = v135 |> unbox
                        let v137 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v138 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v136 v137 
                        v138
                | _ ->
                    let v140 : string = "class=\"grid place-content-center py-[10vh]\""
                    let v141 : string = ""
                    let v142 : string = " " + v140 + v141 + ""
                    let v143 : (unit -> leptos_prelude_AnyView_) = method255()
                    let v144 : string = "div"
                    let v145 : string = "<" + v144 + " " + v142 + ">move || { v143() }</" + v144 + ">"
                    let v146 : string = "leptos::prelude::view! { " + v145 + " }"
                    let v147 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v146 
                    let v148 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v147 |> unbox
                    let v149 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v150 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v148 v149 
                    v150
    let v169 : leptos_prelude_AnyView_ = method188(v168)
    let v170 : string = "v169"
    let v171 : string = ""
    let v172 : string = v170 + v171 
    let v173 : string = v172 + v171 
    let v174 : leptos_prelude_AnyView_ = method188(v21)
    let v175 : string = "v174"
    let v176 : string = ", "
    let v177 : string = v175 + v176 
    let v178 : string = v177 + v173 
    let v179 : string = "vec![" + v178 + "]"
    let v180 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v179 
    let v181 : string = "leptos::prelude::Fragment::new($0)"
    let v182 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v180 v181 
    v182
and method332 (v0 : Heap2, v1 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>, v2 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>>, v3 : leptos_prelude_ReadSignal<bool>) : (unit -> leptos_dom_Fragment) =
    closure367(v0, v1, v2, v3)
and closure504 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure505 (v0 : leptos_prelude_AnyView_) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = "[margin-right:40px]"
    let v2 : string = "r#\"" + v1 + "\"#"
    let v3 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v2 
    v3
and closure508 () () : string =
    let v0 : string = "Transactions"
    v0
and method430 (v0 : leptos_prelude_AnyView_) : (unit -> string) =
    closure508()
and closure507 (v0 : leptos_prelude_AnyView_) () : leptos_prelude_AnyView_ =
    let v1 : (unit -> string) = method430(v0)
    let v2 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v3 : string = ""
    let v4 : string = " " + v2 + v3 + ""
    let v5 : (unit -> leptos_prelude_AnyView_) = method206(v1)
    let v6 : string = "span"
    let v7 : string = "<" + v6 + " " + v4 + ">move || { v5() }</" + v6 + ">"
    let v8 : string = "leptos::prelude::view! { " + v7 + " }"
    let v9 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v9 |> unbox
    let v11 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v12 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_prelude_AnyView_ = method188(v12)
    let v14 : string = "v13"
    let v15 : string = v14 + v3 
    let v16 : string = v15 + v3 
    let v17 : string = "vec![" + v16 + "]"
    let v18 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = "leptos::prelude::Fragment::new($0)"
    let v20 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "&$0"
    let v22 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    v24
and method429 (v0 : leptos_prelude_AnyView_) : (unit -> leptos_prelude_AnyView_) =
    closure507(v0)
and closure506 (v0 : leptos_prelude_AnyView_) () : leptos_prelude_AnyView_ =
    let v1 : string = "class=\"flex items-center gap-2\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method429(v0)
    let v5 : string = "div"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v13 : string = " " + v12 + v2 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method207()
    let v15 : string = "span"
    let v16 : string = "<" + v15 + " " + v13 + ">move || { v14() }</" + v15 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : leptos_prelude_AnyView_ = method188(v21)
    let v23 : string = "v22"
    let v24 : string = v23 + v2 
    let v25 : string = v24 + v2 
    let v26 : leptos_prelude_AnyView_ = method188(v11)
    let v27 : string = "v26"
    let v28 : string = ", "
    let v29 : string = v27 + v28 
    let v30 : string = v29 + v25 
    let v31 : string = "vec![" + v30 + "]"
    let v32 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "leptos::prelude::Fragment::new($0)"
    let v34 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "&$0"
    let v36 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
    v38
and method428 (v0 : leptos_prelude_AnyView_) : (unit -> leptos_prelude_AnyView_) =
    closure506(v0)
and closure503 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure504()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure505(v0)
    let v7 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v7(()) + \" \" + &v4(())"
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method428(v0)
    let v12 : string = "summary"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=\"flex flex-1 flex-col\""
    let v20 : string = " " + v19 + v9 + ""
    let v21 : (unit -> leptos_prelude_AnyView_) = method209(v1)
    let v22 : string = "div"
    let v23 : string = "<" + v22 + " " + v20 + ">move || { v21() }</" + v22 + ">"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : leptos_prelude_AnyView_ = method188(v28)
    let v30 : string = "v29"
    let v31 : string = v30 + v9 
    let v32 : string = v31 + v9 
    let v33 : leptos_prelude_AnyView_ = method188(v18)
    let v34 : string = "v33"
    let v35 : string = ", "
    let v36 : string = v34 + v35 
    let v37 : string = v36 + v32 
    let v38 : string = "vec![" + v37 + "]"
    let v39 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v38 
    let v40 : string = "leptos::prelude::Fragment::new($0)"
    let v41 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "&$0"
    let v43 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v45 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v43 v44 
    v45
and method427 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure503(v0, v1)
and closure502 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure222()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> bool) = closure223()
    let v7 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method201(v0)
    let v12 : string = "div"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())"
    let v20 : string = "open=move || v7(())"
    let v21 : string = " " + v19 + v9 + ""
    let v22 : string = " " + v20 + v21 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method427(v0, v1)
    let v24 : string = "details"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v30)
    let v32 : string = "v31"
    let v33 : string = v32 + v9 
    let v34 : string = v33 + v9 
    let v35 : leptos_prelude_AnyView_ = method188(v18)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method426 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure502(v0, v1)
and closure510 () () : leptos_dom_Fragment =
    let v0 : string = "Transactions"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and method432 () : (unit -> leptos_dom_Fragment) =
    closure510()
and closure512 () () : string =
    let v0 : string = "[max-height:70vh]"
    v0
and closure511 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : leptos_dom_Fragment =
    let v1 : string = $"$0()"
    let v2 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let v6 : string = "fable_library_rust::String_::fromString($0)"
    let v7 : string = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _v3 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _v3 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : string = $"%A{v2}"
    let _v3 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : string = $"%A{v2}"
    let _v3 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : string = $"%A{v2}"
    let _v3 = v22 
    #endif
#else
    let v25 : string = $"%A{v2}"
    let _v3 = v25 
    #endif
    let v28 : string = _v3 
    let v33 : string = "$0"
    let v34 : (unit -> string) = closure512()
    let v35 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v34 v33 
    let v36 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v35(())"
    let v37 : string = ""
    let v38 : string = " " + v36 + v37 + ""
    let v39 : (unit -> leptos_prelude_AnyView_) = method323(v28)
    let v40 : string = "pre"
    let v41 : string = "<" + v40 + " " + v38 + ">move || { v39() }</" + v40 + ">"
    let v42 : string = "leptos::prelude::view! { " + v41 + " }"
    let v43 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v43 |> unbox
    let v45 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v46 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : leptos_prelude_AnyView_ = method188(v46)
    let v48 : string = "v47"
    let v49 : string = v48 + v37 
    let v50 : string = v49 + v37 
    let v51 : string = "vec![" + v50 + "]"
    let v52 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : string = "leptos::prelude::Fragment::new($0)"
    let v54 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v52 v53 
    v54
and method433 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) : (unit -> leptos_dom_Fragment) =
    closure511(v0)
and closure509 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : leptos_dom_Fragment =
    let v1 : (unit -> leptos_dom_Fragment) = method432()
    let v2 : (unit -> leptos_dom_Fragment) = method433(v0)
    let v3 : string = "$0"
    let v4 : (unit -> string) = closure354()
    let v5 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4 v3 
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure326()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure327()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())"
    let v13 : string = ""
    let v14 : string = " " + v12 + v13 + ""
    let v15 : (unit -> leptos_prelude_AnyView_) = method324(v1, v2)
    let v16 : string = "dl"
    let v17 : string = "<" + v16 + " " + v14 + ">move || { v15() }</" + v16 + ">"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : leptos_prelude_AnyView_ = method188(v22)
    let v24 : string = "v23"
    let v25 : string = v24 + v13 
    let v26 : string = v25 + v13 
    let v27 : string = "vec![" + v26 + "]"
    let v28 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = "leptos::prelude::Fragment::new($0)"
    let v30 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v28 v29 
    v30
and method431 (v0 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) : (unit -> leptos_dom_Fragment) =
    closure509(v0)
and closure515 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure516 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure519 () () : string =
    let v0 : string = "Debug"
    v0
and method438 () : (unit -> string) =
    closure519()
and closure518 () () : leptos_prelude_AnyView_ =
    let v0 : (unit -> string) = method438()
    let v1 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method206(v0)
    let v5 : string = "span"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = v13 + v2 
    let v15 : string = v14 + v2 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "&$0"
    let v21 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method437 () : (unit -> leptos_prelude_AnyView_) =
    closure518()
and closure517 () () : leptos_prelude_AnyView_ =
    let v0 : string = "class=\"flex items-center gap-2\""
    let v1 : string = ""
    let v2 : string = " " + v0 + v1 + ""
    let v3 : (unit -> leptos_prelude_AnyView_) = method437()
    let v4 : string = "div"
    let v5 : string = "<" + v4 + " " + v2 + ">move || { v3() }</" + v4 + ">"
    let v6 : string = "leptos::prelude::view! { " + v5 + " }"
    let v7 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v7 |> unbox
    let v9 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v10 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v12 : string = " " + v11 + v1 + ""
    let v13 : (unit -> leptos_prelude_AnyView_) = method207()
    let v14 : string = "span"
    let v15 : string = "<" + v14 + " " + v12 + ">move || { v13() }</" + v14 + ">"
    let v16 : string = "leptos::prelude::view! { " + v15 + " }"
    let v17 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v17 |> unbox
    let v19 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : leptos_prelude_AnyView_ = method188(v20)
    let v22 : string = "v21"
    let v23 : string = v22 + v1 
    let v24 : string = v23 + v1 
    let v25 : leptos_prelude_AnyView_ = method188(v10)
    let v26 : string = "v25"
    let v27 : string = ", "
    let v28 : string = v26 + v27 
    let v29 : string = v28 + v24 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "&$0"
    let v35 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v37 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v35 v36 
    v37
and method436 () : (unit -> leptos_prelude_AnyView_) =
    closure517()
and closure514 (v0 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v1 : string = "$0"
    let v2 : (unit -> string) = closure515()
    let v3 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2 v1 
    let v4 : string = "$0"
    let v5 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure516()
    let v6 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5 v4 
    let v7 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())"
    let v8 : string = ""
    let v9 : string = " " + v7 + v8 + ""
    let v10 : (unit -> leptos_prelude_AnyView_) = method436()
    let v11 : string = "summary"
    let v12 : string = "<" + v11 + " " + v9 + ">move || { v10() }</" + v11 + ">"
    let v13 : string = "leptos::prelude::view! { " + v12 + " }"
    let v14 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v14 |> unbox
    let v16 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v17 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "class=\"flex flex-1 flex-col\""
    let v19 : string = " " + v18 + v8 + ""
    let v20 : (unit -> leptos_prelude_AnyView_) = method209(v0)
    let v21 : string = "div"
    let v22 : string = "<" + v21 + " " + v19 + ">move || { v20() }</" + v21 + ">"
    let v23 : string = "leptos::prelude::view! { " + v22 + " }"
    let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v24 |> unbox
    let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
    let v28 : leptos_prelude_AnyView_ = method188(v27)
    let v29 : string = "v28"
    let v30 : string = v29 + v8 
    let v31 : string = v30 + v8 
    let v32 : leptos_prelude_AnyView_ = method188(v17)
    let v33 : string = "v32"
    let v34 : string = ", "
    let v35 : string = v33 + v34 
    let v36 : string = v35 + v31 
    let v37 : string = "vec![" + v36 + "]"
    let v38 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "leptos::prelude::Fragment::new($0)"
    let v40 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "&$0"
    let v42 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v44 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v44
and method435 (v0 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure514(v0)
and closure513 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure222()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> bool) = closure223()
    let v7 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v9 : string = ""
    let v10 : string = " " + v8 + v9 + ""
    let v11 : (unit -> leptos_prelude_AnyView_) = method201(v0)
    let v12 : string = "div"
    let v13 : string = "<" + v12 + " " + v10 + ">move || { v11() }</" + v12 + ">"
    let v14 : string = "leptos::prelude::view! { " + v13 + " }"
    let v15 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v15 |> unbox
    let v17 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v18 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v16 v17 
    let v19 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())"
    let v20 : string = "open=move || v7(())"
    let v21 : string = " " + v19 + v9 + ""
    let v22 : string = " " + v20 + v21 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method435(v1)
    let v24 : string = "details"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v30)
    let v32 : string = "v31"
    let v33 : string = v32 + v9 
    let v34 : string = v33 + v9 
    let v35 : leptos_prelude_AnyView_ = method188(v18)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method434 (v0 : leptos_prelude_AnyView_, v1 : (unit -> leptos_dom_Fragment)) : (unit -> leptos_prelude_AnyView_) =
    closure513(v0, v1)
and closure520 (v0 : leptos_dom_Fragment) () : leptos_prelude_AnyView_ =
    let v1 : string = "&$0"
    let v2 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v4 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2 v3 
    v4
and method439 (v0 : leptos_dom_Fragment) : (unit -> leptos_prelude_AnyView_) =
    closure520(v0)
and closure54 (v0 : leptos_prelude_ReadSignal<US19>) () : leptos_prelude_AnyView_ =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v533 : US23 =
        match v2 with
        | US19_1(v3) -> (* Dice *)
            let v4 : string = "dice_view.render (1)"
            let v5 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
            let v7 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v8 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v7 
            let v9 : string = "$0.unwrap()"
            let v10 : Heap2 = Fable.Core.RustInterop.emitRustExpr v8 v9 
            let v11 : string = "use_transactions.render (1)"
            let v12 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
            let v14 : string = "$0"
            let v15 : (unit -> Vec<string>) = closure55(v10)
            let v16 : (unit -> Vec<string>) = Fable.Core.RustInterop.emitRustExpr v15 v14 
            let v17 : string = "leptos::prelude::Memo::new(move |_| { v16(()) })"
            let v18 : leptos_prelude_Memo<Vec<string>> = Fable.Core.RustInterop.emitRustExpr () v17 
            let v19 : string = "$0"
            let v20 : (unit -> (struct (string * US24 * string * bool * bool) [])) = closure60(v18)
            let v21 : (unit -> (struct (string * US24 * string * bool * bool) [])) = Fable.Core.RustInterop.emitRustExpr v20 v19 
            let v22 : string = "leptos::prelude::Memo::new(move |_| { v21(()) })"
            let v23 : leptos_prelude_Memo<(struct (string * US24 * string * bool * bool) [])> = Fable.Core.RustInterop.emitRustExpr () v22 
            let v24 : string = "$0"
            let v25 : (unit -> Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>) = closure62(v10, v18)
            let v26 : (unit -> Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>) = Fable.Core.RustInterop.emitRustExpr v25 v24 
            let v27 : string = "leptos::prelude::Memo::new(move |_| { v26(()) })"
            let v28 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>> = Fable.Core.RustInterop.emitRustExpr () v27 
            let v29 : string = "$0"
            let v30 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = closure65(v28)
            let v31 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v30 v29 
            let v32 : string = "leptos::prelude::Memo::new(move |_| { v31(()) })"
            let v33 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v32 
            let v34 : string = "$0"
            let v35 : (unit -> (string [])) = closure67(v28)
            let v36 : (unit -> (string [])) = Fable.Core.RustInterop.emitRustExpr v35 v34 
            let v37 : string = "leptos::prelude::Memo::new(move |_| { v36(()) })"
            let v38 : leptos_prelude_Memo<(string [])> = Fable.Core.RustInterop.emitRustExpr () v37 
            let v39 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = closure70()
            let v40 : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = method80(v33, v39)
            let v41 : string = $"%A{v40}"
            let v44 : string = "use_transactions.render (7) / root func0 / result: " + string v41 + ""
            let v45 : int64 = 200L
            let v46 : string = method11(v45, v44)
            let v47 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v48 : bool = Fable.Core.RustInterop.emitRustExpr v46 v47 
            let v49 : string = "$0"
            let v50 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = closure102(v38, v40)
            let v51 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v50 v49 
            let v52 : string = "leptos::prelude::Memo::new(move |_| { v51(()) })"
            let v53 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v52 
            let v54 : string = "$0"
            let v55 : (unit -> Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>) = closure119(v53)
            let v56 : (unit -> Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v55 v54 
            let v57 : string = "leptos::prelude::Memo::new(move |_| { v56(()) })"
            let v58 : leptos_prelude_Memo<Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v57 
            let v59 : string = "$0"
            let v60 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = closure126(v58)
            let v61 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v60 v59 
            let v62 : string = "leptos::prelude::Memo::new(move |_| { v61(()) })"
            let v63 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v62 
            let v64 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = closure130()
            let v65 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = method154(v63, v64)
            let v66 : string = $"%A{v65}"
            let v69 : string = "use_transactions.render (12) / rpc_response func0 / result: " + string v66 + ""
            let v70 : int64 = 200L
            let v71 : string = method11(v70, v69)
            let v72 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v73 : bool = Fable.Core.RustInterop.emitRustExpr v71 v72 
            let v74 : string = "Box::pin($0)"
            let v75 : (Heap6 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<US58, std_string_String>>>>>) = closure148()
            let v76 : std_pin_Pin<Box<(Heap6 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<US58, std_string_String>>>>>)>> = Fable.Core.RustInterop.emitRustExpr v75 v74 
            let v77 : string = "leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap6>| $0(value.clone())))"
            let v78 : leptos_prelude_Action<Heap6, Result<US58, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v76 v77 
            let v79 : string = "$0"
            let v80 : (unit -> Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) = closure153(v78)
            let v81 : (unit -> Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v80 v79 
            let v82 : string = "leptos::prelude::Memo::new(move |_| { v81(()) })"
            let v83 : leptos_prelude_Memo<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v82 
            let v84 : string = "$0"
            let v85 : (unit -> string option) = closure158(v83)
            let v86 : (unit -> string option) = Fable.Core.RustInterop.emitRustExpr v85 v84 
            let v87 : string = "leptos::prelude::Memo::new(move |_| { v86(()) })"
            let v88 : leptos_prelude_Memo<string option> = Fable.Core.RustInterop.emitRustExpr () v87 
            let v89 : string = "$0"
            let v90 : (unit -> US32) = closure163(v10)
            let v91 : (unit -> US32) = Fable.Core.RustInterop.emitRustExpr v90 v89 
            let v92 : string = "leptos::prelude::Memo::new(move |_| { v91(()) })"
            let v93 : leptos_prelude_Memo<US32> = Fable.Core.RustInterop.emitRustExpr () v92 
            let v94 : string = "$0"
            let v95 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>) = closure164(v10)
            let v96 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>) = Fable.Core.RustInterop.emitRustExpr v95 v94 
            let v97 : string = "leptos::prelude::Memo::new(move |_| { v96(()) })"
            let v98 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>> = Fable.Core.RustInterop.emitRustExpr () v97 
            let v99 : string = "$0"
            let v100 : (unit -> Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>) = closure167(v98)
            let v101 : (unit -> Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>) = Fable.Core.RustInterop.emitRustExpr v100 v99 
            let v102 : string = "leptos::prelude::Memo::new(move |_| { v101(()) })"
            let v103 : leptos_prelude_Memo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> = Fable.Core.RustInterop.emitRustExpr () v102 
            let v104 : (leptos_prelude_AnyView_ []) = [||]
            let v105 : (leptos_prelude_AnyView_ []) = method177(v104)
            let v106 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v107 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v105 v106 
            let v108 : (unit -> leptos_dom_Fragment) = method178(v10, v78, v88, v93, v103)
            let v109 : (unit -> leptos_dom_Fragment) = method198(v108)
            let v110 : string = "class=\"flex flex-col [position:relative]\""
            let v111 : string = ""
            let v112 : string = " " + v110 + v111 + ""
            let v113 : (unit -> leptos_prelude_AnyView_) = method223(v107, v109)
            let v114 : string = "div"
            let v115 : string = "<" + v114 + " " + v112 + ">move || { v113() }</" + v114 + ">"
            let v116 : string = "leptos::prelude::view! { " + v115 + " }"
            let v117 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v116 
            let v118 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v117 |> unbox
            let v119 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v120 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v118 v119 
            let v121 : (leptos_prelude_AnyView_ []) = [||]
            let v122 : (leptos_prelude_AnyView_ []) = method177(v121)
            let v123 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v124 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v122 v123 
            let v125 : (unit -> leptos_dom_Fragment) = method228(v65, v53, v28)
            let v126 : (unit -> leptos_dom_Fragment) = method198(v125)
            let v127 : string = "class=\"flex flex-col [position:relative]\""
            let v128 : string = " " + v127 + v111 + ""
            let v129 : (unit -> leptos_prelude_AnyView_) = method257(v124, v126)
            let v130 : string = "<" + v114 + " " + v128 + ">move || { v129() }</" + v114 + ">"
            let v131 : string = "leptos::prelude::view! { " + v130 + " }"
            let v132 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v131 
            let v133 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v132 |> unbox
            let v134 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v135 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v133 v134 
            let v136 : leptos_prelude_AnyView_ = method188(v135)
            let v137 : string = "v136"
            let v138 : string = v137 + v111 
            let v139 : string = v138 + v111 
            let v140 : leptos_prelude_AnyView_ = method188(v120)
            let v141 : string = "v140"
            let v142 : string = ", "
            let v143 : string = v141 + v142 
            let v144 : string = v143 + v139 
            let v145 : string = "vec![" + v144 + "]"
            let v146 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v145 
            let v147 : string = "leptos::prelude::Fragment::new($0)"
            let v148 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v146 v147 
            US23_0(v148)
        | US19_2 -> (* Lists *)
            let v150 : string = "lists_view.render ()"
            let v151 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
            let v153 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v154 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v153 
            let v155 : string = "$0.unwrap()"
            let v156 : Heap2 = Fable.Core.RustInterop.emitRustExpr v154 v155 
            let v157 : string = "???"
            let v158 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v159 : string = "&*$0"
            let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v159 
            let _v158 = v160 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v161 : string = "&*$0"
            let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v161 
            let _v158 = v162 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v163 : string = "&*$0"
            let v164 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v157 v163 
            let _v158 = v164 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v165 : Ref<Str> = v157 |> unbox<Ref<Str>>
            let _v158 = v165 
            #endif
#if FABLE_COMPILER_PYTHON
            let v168 : Ref<Str> = v157 |> unbox<Ref<Str>>
            let _v158 = v168 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v171 : Ref<Str> = v157 |> unbox<Ref<Str>>
            let _v158 = v171 
            #endif
#else
            let v174 : Ref<Str> = v157 |> unbox<Ref<Str>>
            let _v158 = v174 
            #endif
            let v177 : Ref<Str> = _v158 
            let v182 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v183 : string = "String::from($0)"
            let v184 : std_string_String = Fable.Core.RustInterop.emitRustExpr v177 v183 
            let _v182 = v184 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v185 : string = "String::from($0)"
            let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v177 v185 
            let _v182 = v186 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v187 : string = "String::from($0)"
            let v188 : std_string_String = Fable.Core.RustInterop.emitRustExpr v177 v187 
            let _v182 = v188 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v189 : std_string_String = v177 |> unbox<std_string_String>
            let _v182 = v189 
            #endif
#if FABLE_COMPILER_PYTHON
            let v192 : std_string_String = v177 |> unbox<std_string_String>
            let _v182 = v192 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v195 : std_string_String = v177 |> unbox<std_string_String>
            let _v182 = v195 
            #endif
#else
            let v198 : std_string_String = v177 |> unbox<std_string_String>
            let _v182 = v198 
            #endif
            let v201 : std_string_String = _v182 
            let v206 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v207 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v201 v206 
            let v208 : leptos_prelude_AnyView_ = method188(v207)
            let v209 : string = "v208"
            let v210 : string = ""
            let v211 : string = v209 + v210 
            let v212 : string = v211 + v210 
            let v213 : string = "vec![" + v212 + "]"
            let v214 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v213 
            let v215 : string = "leptos::prelude::Fragment::new($0)"
            let v216 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v214 v215 
            US23_0(v216)
        | US19_4 -> (* Settings *)
            let v388 : string = "settings_view.render ()"
            let v389 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v390 : bool = Fable.Core.RustInterop.emitRustExpr v388 v389 
            let v391 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v392 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v391 
            let v393 : string = "$0.unwrap()"
            let v394 : Heap2 = Fable.Core.RustInterop.emitRustExpr v392 v393 
            let v395 : string = "$0"
            let v396 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) = closure265(v394)
            let v397 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) = Fable.Core.RustInterop.emitRustExpr v396 v395 
            let v398 : string = "leptos::prelude::Memo::new(move |_| { v397(()) })"
            let v399 : leptos_prelude_Memo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>> = Fable.Core.RustInterop.emitRustExpr () v398 
            let v400 : string = $"leptos::prelude::signal($0)"
            let struct (v401 : leptos_prelude_ReadSignal<int32>, v402 : leptos_prelude_WriteSignal<int32>) = Fable.Core.RustInterop.emitRustExpr 0 v400 
            let v403 : string = "$0"
            let v404 : (unit -> Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>) = closure268(v399, v401)
            let v405 : (unit -> Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>) = Fable.Core.RustInterop.emitRustExpr v404 v403 
            let v406 : string = "leptos::prelude::Memo::new(move |_| { v405(()) })"
            let v407 : leptos_prelude_Memo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>> = Fable.Core.RustInterop.emitRustExpr () v406 
            let v408 : string = "$0"
            let v409 : (unit -> int32) = closure271(v407)
            let v410 : (unit -> int32) = Fable.Core.RustInterop.emitRustExpr v409 v408 
            let v411 : string = "leptos::prelude::Memo::new(move |_| { v410(()) })"
            let v412 : leptos_prelude_Memo<int32> = Fable.Core.RustInterop.emitRustExpr () v411 
            let v413 : (unit -> unit) = closure272(v394, v399, v402)
            let v414 : string = "let v413 = $0"
            Fable.Core.RustInterop.emitRustExpr v413 v414 
            let v415 : string = "$0"
            let v416 : (unit -> string) = closure277()
            let v417 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v416 v415 
            let v418 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v419 : string = "fill=\"none\""
            let v420 : string = "viewBox=\"0 0 24 24\""
            let v421 : string = "stroke-width=\"1.5\""
            let v422 : string = "stroke=\"currentColor\""
            let v423 : string = "class=move || \" \".to_owned() + &v417(())"
            let v424 : string = ""
            let v425 : string = " " + v418 + v424 + ""
            let v426 : string = " " + v419 + v425 + ""
            let v427 : string = " " + v420 + v426 + ""
            let v428 : string = " " + v421 + v427 + ""
            let v429 : string = " " + v422 + v428 + ""
            let v430 : string = " " + v423 + v429 + ""
            let v431 : (unit -> leptos_prelude_AnyView_) = method266()
            let v432 : string = "svg"
            let v433 : string = "<" + v432 + " " + v430 + ">move || { v431() }</" + v432 + ">"
            let v434 : string = "leptos::prelude::view! { " + v433 + " }"
            let v435 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v434 
            let v436 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v435 |> unbox
            let v437 : string = "on:click=move |_| v413()"
            let v438 : string = "aria-label=\"Add\""
            let v439 : string = "$0"
            let v440 : (unit -> std_string_String) = closure279()
            let v441 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v440 v439 
            let v442 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v441(())"
            let v443 : string = " " + v442 + v424 + ""
            let v444 : string = " " + v437 + v443 + ""
            let v445 : string = " " + v438 + v444 + ""
            let v446 : (unit -> leptos_prelude_AnyView_) = method267(v436)
            let v447 : string = "button"
            let v448 : string = "<" + v447 + " " + v445 + ">move || { v446() }</" + v447 + ">"
            let v449 : string = "leptos::prelude::view! { " + v448 + " }"
            let v450 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v449 
            let v451 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v450 |> unbox
            let v452 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v453 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v451 v452 
            let v454 : (leptos_prelude_AnyView_ []) = [||]
            let v455 : (leptos_prelude_AnyView_ []) = method177(v454)
            let v456 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v457 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v455 v456 
            let v458 : (unit -> leptos_dom_Fragment) = method268(v394, v407, v412, v399, v402)
            let v459 : (unit -> leptos_dom_Fragment) = method198(v458)
            let v460 : string = "class=\"flex flex-col [position:relative]\""
            let v461 : string = " " + v460 + v424 + ""
            let v462 : (unit -> leptos_prelude_AnyView_) = method292(v453, v459)
            let v463 : string = "div"
            let v464 : string = "<" + v463 + " " + v461 + ">move || { v462() }</" + v463 + ">"
            let v465 : string = "leptos::prelude::view! { " + v464 + " }"
            let v466 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v465 
            let v467 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v466 |> unbox
            let v468 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v469 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v467 v468 
            let v470 : (leptos_prelude_AnyView_ []) = [||]
            let v471 : (leptos_prelude_AnyView_ []) = method177(v470)
            let v472 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v473 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v471 v472 
            let v474 : (unit -> leptos_dom_Fragment) = method297(v394)
            let v475 : (unit -> leptos_dom_Fragment) = method198(v474)
            let v476 : string = "class=\"flex flex-col [position:relative]\""
            let v477 : string = " " + v476 + v424 + ""
            let v478 : (unit -> leptos_prelude_AnyView_) = method312(v473, v475)
            let v479 : string = "<" + v463 + " " + v477 + ">move || { v478() }</" + v463 + ">"
            let v480 : string = "leptos::prelude::view! { " + v479 + " }"
            let v481 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v480 
            let v482 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v481 |> unbox
            let v483 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v484 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v482 v483 
            let v485 : leptos_prelude_RwSignal<Heap1> = v394.l0
            let v486 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
            let v487 : Heap1 = Fable.Core.RustInterop.emitRustExpr v485 v486 
            let v488 : leptos_prelude_RwSignal<bool> = v487.l1
            let v489 : string = $"leptos::prelude::SignalGet::get(&$0)"
            let v490 : bool = Fable.Core.RustInterop.emitRustExpr v488 v489 
            let v510 : leptos_prelude_AnyView_ =
                if v490 then
                    let v491 : (leptos_prelude_AnyView_ []) = [||]
                    let v492 : (leptos_prelude_AnyView_ []) = method177(v491)
                    let v493 : string = "leptos::prelude::CollectView::collect_view($0)"
                    let v494 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v492 v493 
                    let v495 : (unit -> leptos_dom_Fragment) = method317()
                    let v496 : (unit -> leptos_dom_Fragment) = method198(v495)
                    let v497 : string = "class=\"flex flex-col [position:relative]\""
                    let v498 : string = " " + v497 + v424 + ""
                    let v499 : (unit -> leptos_prelude_AnyView_) = method325(v494, v496)
                    let v500 : string = "<" + v463 + " " + v498 + ">move || { v499() }</" + v463 + ">"
                    let v501 : string = "leptos::prelude::view! { " + v500 + " }"
                    let v502 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v501 
                    let v503 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v502 |> unbox
                    let v504 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v505 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v503 v504 
                    v505
                else
                    let v506 : (leptos_prelude_AnyView_ []) = [||]
                    let v507 : (leptos_prelude_AnyView_ []) = method177(v506)
                    let v508 : string = "leptos::prelude::CollectView::collect_view($0)"
                    let v509 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v507 v508 
                    v509
            let v511 : leptos_prelude_AnyView_ = method188(v510)
            let v512 : string = "v511"
            let v513 : string = v512 + v424 
            let v514 : string = v513 + v424 
            let v515 : leptos_prelude_AnyView_ = method188(v484)
            let v516 : string = "v515"
            let v517 : string = ", "
            let v518 : string = v516 + v517 
            let v519 : string = v518 + v514 
            let v520 : leptos_prelude_AnyView_ = method188(v469)
            let v521 : string = "v520"
            let v522 : string = v521 + v517 
            let v523 : string = v522 + v519 
            let v524 : string = "vec![" + v523 + "]"
            let v525 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v524 
            let v526 : string = "leptos::prelude::Fragment::new($0)"
            let v527 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v525 v526 
            US23_0(v527)
        | US19_3 -> (* Transactions *)
            let v218 : string = "transactions_view.render (1)"
            let v219 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v220 : bool = Fable.Core.RustInterop.emitRustExpr v218 v219 
            let v221 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v222 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v221 
            let v223 : string = "$0.unwrap()"
            let v224 : Heap2 = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : string = "use_transactions.render (1)"
            let v226 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v227 : bool = Fable.Core.RustInterop.emitRustExpr v225 v226 
            let v228 : string = "$0"
            let v229 : (unit -> Vec<string>) = closure55(v224)
            let v230 : (unit -> Vec<string>) = Fable.Core.RustInterop.emitRustExpr v229 v228 
            let v231 : string = "leptos::prelude::Memo::new(move |_| { v230(()) })"
            let v232 : leptos_prelude_Memo<Vec<string>> = Fable.Core.RustInterop.emitRustExpr () v231 
            let v233 : string = "$0"
            let v234 : (unit -> (struct (string * US24 * string * bool * bool) [])) = closure60(v232)
            let v235 : (unit -> (struct (string * US24 * string * bool * bool) [])) = Fable.Core.RustInterop.emitRustExpr v234 v233 
            let v236 : string = "leptos::prelude::Memo::new(move |_| { v235(()) })"
            let v237 : leptos_prelude_Memo<(struct (string * US24 * string * bool * bool) [])> = Fable.Core.RustInterop.emitRustExpr () v236 
            let v238 : string = "$0"
            let v239 : (unit -> Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>) = closure62(v224, v232)
            let v240 : (unit -> Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>) = Fable.Core.RustInterop.emitRustExpr v239 v238 
            let v241 : string = "leptos::prelude::Memo::new(move |_| { v240(()) })"
            let v242 : leptos_prelude_Memo<Vec<struct (string * Vec<struct (string * US24 * string * bool * bool)>)>> = Fable.Core.RustInterop.emitRustExpr () v241 
            let v243 : string = "$0"
            let v244 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = closure65(v242)
            let v245 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v244 v243 
            let v246 : string = "leptos::prelude::Memo::new(move |_| { v245(()) })"
            let v247 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v246 
            let v248 : string = "$0"
            let v249 : (unit -> (string [])) = closure67(v242)
            let v250 : (unit -> (string [])) = Fable.Core.RustInterop.emitRustExpr v249 v248 
            let v251 : string = "leptos::prelude::Memo::new(move |_| { v250(()) })"
            let v252 : leptos_prelude_Memo<(string [])> = Fable.Core.RustInterop.emitRustExpr () v251 
            let v253 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = closure70()
            let v254 : leptos_prelude_Memo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = method80(v247, v253)
            let v255 : string = $"%A{v254}"
            let v258 : string = "use_transactions.render (7) / root func0 / result: " + string v255 + ""
            let v259 : int64 = 200L
            let v260 : string = method11(v259, v258)
            let v261 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v262 : bool = Fable.Core.RustInterop.emitRustExpr v260 v261 
            let v263 : string = "$0"
            let v264 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = closure102(v252, v254)
            let v265 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v264 v263 
            let v266 : string = "leptos::prelude::Memo::new(move |_| { v265(()) })"
            let v267 : leptos_prelude_Memo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : string = "$0"
            let v269 : (unit -> Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>) = closure119(v267)
            let v270 : (unit -> Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>) = Fable.Core.RustInterop.emitRustExpr v269 v268 
            let v271 : string = "leptos::prelude::Memo::new(move |_| { v270(()) })"
            let v272 : leptos_prelude_Memo<Result<(struct (string * US24 * string * bool * bool) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v271 
            let v273 : string = "$0"
            let v274 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = closure126(v272)
            let v275 : (unit -> Vec<struct (string * US24 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v274 v273 
            let v276 : string = "leptos::prelude::Memo::new(move |_| { v275(()) })"
            let v277 : leptos_prelude_Memo<Vec<struct (string * US24 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v276 
            let v278 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = closure130()
            let v279 : leptos_prelude_Memo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = method154(v277, v278)
            let v280 : string = $"%A{v279}"
            let v283 : string = "use_transactions.render (12) / rpc_response func0 / result: " + string v280 + ""
            let v284 : int64 = 200L
            let v285 : string = method11(v284, v283)
            let v286 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v287 : bool = Fable.Core.RustInterop.emitRustExpr v285 v286 
            let v288 : string = $"leptos::prelude::signal($0)"
            let struct (v289 : leptos_prelude_ReadSignal<bool>, v290 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v288 
            let v291 : (unit -> unit) = closure363(v290)
            let v292 : string = "let v291 = $0"
            Fable.Core.RustInterop.emitRustExpr v291 v292 
            let v293 : string = "$0"
            let v294 : (unit -> string) = closure364()
            let v295 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v294 v293 
            let v296 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v297 : string = "fill=\"none\""
            let v298 : string = "viewBox=\"0 0 24 24\""
            let v299 : string = "stroke-width=\"1.5\""
            let v300 : string = "stroke=\"currentColor\""
            let v301 : string = "class=move || \" \".to_owned() + &v295(())"
            let v302 : string = ""
            let v303 : string = " " + v296 + v302 + ""
            let v304 : string = " " + v297 + v303 + ""
            let v305 : string = " " + v298 + v304 + ""
            let v306 : string = " " + v299 + v305 + ""
            let v307 : string = " " + v300 + v306 + ""
            let v308 : string = " " + v301 + v307 + ""
            let v309 : (unit -> leptos_prelude_AnyView_) = method330()
            let v310 : string = "svg"
            let v311 : string = "<" + v310 + " " + v308 + ">move || { v309() }</" + v310 + ">"
            let v312 : string = "leptos::prelude::view! { " + v311 + " }"
            let v313 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v312 
            let v314 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v313 |> unbox
            let v315 : string = "on:click=move |_| v291()"
            let v316 : string = "aria-label=\"Settings\""
            let v317 : string = "$0"
            let v318 : (unit -> std_string_String) = closure366(v289)
            let v319 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v318 v317 
            let v320 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v319(())"
            let v321 : string = " " + v320 + v302 + ""
            let v322 : string = " " + v315 + v321 + ""
            let v323 : string = " " + v316 + v322 + ""
            let v324 : (unit -> leptos_prelude_AnyView_) = method267(v314)
            let v325 : string = "button"
            let v326 : string = "<" + v325 + " " + v323 + ">move || { v324() }</" + v325 + ">"
            let v327 : string = "leptos::prelude::view! { " + v326 + " }"
            let v328 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v327 
            let v329 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v328 |> unbox
            let v330 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v331 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v329 v330 
            let v332 : (leptos_prelude_AnyView_ []) = [||]
            let v333 : (leptos_prelude_AnyView_ []) = method177(v332)
            let v334 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v335 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v333 v334 
            let v336 : (unit -> leptos_dom_Fragment) = method332(v224, v267, v242, v289)
            let v337 : (unit -> leptos_dom_Fragment) = method198(v336)
            let v338 : string = "class=\"flex flex-col [position:relative]\""
            let v339 : string = " " + v338 + v302 + ""
            let v340 : (unit -> leptos_prelude_AnyView_) = method426(v331, v337)
            let v341 : string = "div"
            let v342 : string = "<" + v341 + " " + v339 + ">move || { v340() }</" + v341 + ">"
            let v343 : string = "leptos::prelude::view! { " + v342 + " }"
            let v344 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v343 
            let v345 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v344 |> unbox
            let v346 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v347 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v345 v346 
            let v348 : leptos_prelude_RwSignal<Heap1> = v224.l0
            let v349 : string = $"leptos::prelude::SignalGetUntracked::get_untracked(&$0)"
            let v350 : Heap1 = Fable.Core.RustInterop.emitRustExpr v348 v349 
            let v351 : leptos_prelude_RwSignal<bool> = v350.l1
            let v352 : string = $"leptos::prelude::SignalGet::get(&$0)"
            let v353 : bool = Fable.Core.RustInterop.emitRustExpr v351 v352 
            let v373 : leptos_prelude_AnyView_ =
                if v353 then
                    let v354 : (leptos_prelude_AnyView_ []) = [||]
                    let v355 : (leptos_prelude_AnyView_ []) = method177(v354)
                    let v356 : string = "leptos::prelude::CollectView::collect_view($0)"
                    let v357 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v355 v356 
                    let v358 : (unit -> leptos_dom_Fragment) = method431(v267)
                    let v359 : (unit -> leptos_dom_Fragment) = method198(v358)
                    let v360 : string = "class=\"flex flex-col [position:relative]\""
                    let v361 : string = " " + v360 + v302 + ""
                    let v362 : (unit -> leptos_prelude_AnyView_) = method434(v357, v359)
                    let v363 : string = "<" + v341 + " " + v361 + ">move || { v362() }</" + v341 + ">"
                    let v364 : string = "leptos::prelude::view! { " + v363 + " }"
                    let v365 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v364 
                    let v366 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v365 |> unbox
                    let v367 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v368 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v366 v367 
                    v368
                else
                    let v369 : (leptos_prelude_AnyView_ []) = [||]
                    let v370 : (leptos_prelude_AnyView_ []) = method177(v369)
                    let v371 : string = "leptos::prelude::CollectView::collect_view($0)"
                    let v372 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v370 v371 
                    v372
            let v374 : leptos_prelude_AnyView_ = method188(v373)
            let v375 : string = "v374"
            let v376 : string = v375 + v302 
            let v377 : string = v376 + v302 
            let v378 : leptos_prelude_AnyView_ = method188(v347)
            let v379 : string = "v378"
            let v380 : string = ", "
            let v381 : string = v379 + v380 
            let v382 : string = v381 + v377 
            let v383 : string = "vec![" + v382 + "]"
            let v384 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v383 
            let v385 : string = "leptos::prelude::Fragment::new($0)"
            let v386 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v384 v385 
            US23_0(v386)
        | _ ->
            US23_1
    let v551 : leptos_prelude_AnyView_ =
        match v533 with
        | US23_1 -> (* None *)
            let v546 : (leptos_prelude_AnyView_ []) = [||]
            let v547 : (leptos_prelude_AnyView_ []) = method177(v546)
            let v548 : string = "leptos::prelude::CollectView::collect_view($0)"
            let v549 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v547 v548 
            v549
        | US23_0(v534) -> (* Some *)
            let v535 : string = "class=\"flex flex-1 flex-col [overflow-y:auto]\""
            let v536 : string = ""
            let v537 : string = " " + v535 + v536 + ""
            let v538 : (unit -> leptos_prelude_AnyView_) = method439(v534)
            let v539 : string = "div"
            let v540 : string = "<" + v539 + " " + v537 + ">move || { v538() }</" + v539 + ">"
            let v541 : string = "leptos::prelude::view! { " + v540 + " }"
            let v542 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v541 
            let v543 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v542 |> unbox
            let v544 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v545 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v543 v544 
            v545
    let v552 : leptos_prelude_AnyView_ = method188(v551)
    let v553 : string = "v552"
    let v554 : string = ""
    let v555 : string = v553 + v554 
    let v556 : string = v555 + v554 
    let v557 : string = "vec![" + v556 + "]"
    let v558 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v557 
    let v559 : string = "leptos::prelude::Fragment::new($0)"
    let v560 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v558 v559 
    let v561 : string = "&$0"
    let v562 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v560 v561 
    let v563 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v564 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v562 v563 
    v564
and method67 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> leptos_prelude_AnyView_) =
    closure54(v0)
and closure523 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Tab"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method442 () : (unit -> leptos_prelude_AnyView_) =
    closure523()
and closure525 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_4 -> (* Settings *)
        true
    | _ ->
        false
and method444 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> bool) =
    closure525(v0)
and closure526 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Settings"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method445 () : (unit -> leptos_prelude_AnyView_) =
    closure526()
and closure527 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_3 -> (* Transactions *)
        true
    | _ ->
        false
and method446 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> bool) =
    closure527(v0)
and closure528 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Transactions"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method447 () : (unit -> leptos_prelude_AnyView_) =
    closure528()
and closure529 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_2 -> (* Lists *)
        true
    | _ ->
        false
and method448 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> bool) =
    closure529(v0)
and closure530 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Lists"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method449 () : (unit -> leptos_prelude_AnyView_) =
    closure530()
and closure531 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_1(v3) -> (* Dice *)
        match v3 with
        | US20_0 -> (* Dice' *)
            true
        | _ ->
            false
    | _ ->
        false
and method450 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> bool) =
    closure531(v0)
and closure532 () () : leptos_prelude_AnyView_ =
    let v0 : string = "Dice"
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v1 = v17 
    #endif
    let v20 : Ref<Str> = _v1 
    let v25 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _v25 = v41 
    #endif
    let v44 : std_string_String = _v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : leptos_prelude_AnyView_ = method188(v50)
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "&$0"
    let v61 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    v63
and method451 () : (unit -> leptos_prelude_AnyView_) =
    closure532()
and closure524 (v0 : leptos_prelude_ReadSignal<US19>) () : leptos_prelude_AnyView_ =
    let v1 : (unit -> bool) = method444(v0)
    let v2 : string = "selected=v1()"
    let v3 : string = ""
    let v4 : string = " " + v2 + v3 + ""
    let v5 : (unit -> leptos_prelude_AnyView_) = method445()
    let v6 : string = "option"
    let v7 : string = "<" + v6 + " " + v4 + ">move || { v5() }</" + v6 + ">"
    let v8 : string = "leptos::prelude::view! { " + v7 + " }"
    let v9 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v9 |> unbox
    let v11 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v12 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : (unit -> bool) = method446(v0)
    let v14 : string = "selected=v13()"
    let v15 : string = " " + v14 + v3 + ""
    let v16 : (unit -> leptos_prelude_AnyView_) = method447()
    let v17 : string = "<" + v6 + " " + v15 + ">move || { v16() }</" + v6 + ">"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : (unit -> bool) = method448(v0)
    let v24 : string = "selected=v23()"
    let v25 : string = " " + v24 + v3 + ""
    let v26 : (unit -> leptos_prelude_AnyView_) = method449()
    let v27 : string = "<" + v6 + " " + v25 + ">move || { v26() }</" + v6 + ">"
    let v28 : string = "leptos::prelude::view! { " + v27 + " }"
    let v29 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v29 |> unbox
    let v31 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v32 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : (unit -> bool) = method450(v0)
    let v34 : string = "selected=v33()"
    let v35 : string = " " + v34 + v3 + ""
    let v36 : (unit -> leptos_prelude_AnyView_) = method451()
    let v37 : string = "<" + v6 + " " + v35 + ">move || { v36() }</" + v6 + ">"
    let v38 : string = "leptos::prelude::view! { " + v37 + " }"
    let v39 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v38 
    let v40 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v39 |> unbox
    let v41 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let v43 : leptos_prelude_AnyView_ = method188(v12)
    let v44 : string = "v43"
    let v45 : string = v44 + v3 
    let v46 : string = v45 + v3 
    let v47 : leptos_prelude_AnyView_ = method188(v22)
    let v48 : string = "v47"
    let v49 : string = ", "
    let v50 : string = v48 + v49 
    let v51 : string = v50 + v46 
    let v52 : leptos_prelude_AnyView_ = method188(v32)
    let v53 : string = "v52"
    let v54 : string = v53 + v49 
    let v55 : string = v54 + v51 
    let v56 : leptos_prelude_AnyView_ = method188(v42)
    let v57 : string = "v56"
    let v58 : string = v57 + v49 
    let v59 : string = v58 + v55 
    let v60 : string = "vec![" + v59 + "]"
    let v61 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v60 
    let v62 : string = "leptos::prelude::Fragment::new($0)"
    let v63 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : string = "&$0"
    let v65 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v63 v64 
    let v66 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v67 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v65 v66 
    v67
and method443 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> leptos_prelude_AnyView_) =
    closure524(v0)
and closure522 (v0 : leptos_prelude_ReadSignal<US19>) () : leptos_prelude_AnyView_ =
    let v1 : string = "for=\"Tab\""
    let v2 : string = "class=\"sr-only\""
    let v3 : string = ""
    let v4 : string = " " + v1 + v3 + ""
    let v5 : string = " " + v2 + v4 + ""
    let v6 : (unit -> leptos_prelude_AnyView_) = method442()
    let v7 : string = "label"
    let v8 : string = "<" + v7 + " " + v5 + ">move || { v6() }</" + v7 + ">"
    let v9 : string = "leptos::prelude::view! { " + v8 + " }"
    let v10 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v10 |> unbox
    let v12 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "id=\"Tab\""
    let v15 : string = "class=\"w-full rounded-md border-gray-200\""
    let v16 : string = " " + v14 + v3 + ""
    let v17 : string = " " + v15 + v16 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method443(v0)
    let v19 : string = "select"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Select>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v3 
    let v29 : string = v28 + v3 
    let v30 : leptos_prelude_AnyView_ = method188(v13)
    let v31 : string = "v30"
    let v32 : string = ", "
    let v33 : string = v31 + v32 
    let v34 : string = v33 + v29 
    let v35 : string = "vec![" + v34 + "]"
    let v36 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "leptos::prelude::Fragment::new($0)"
    let v38 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "&$0"
    let v40 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v42 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v40 v41 
    v42
and method441 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> leptos_prelude_AnyView_) =
    closure522(v0)
and closure536 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure537 (v0 : leptos_prelude_Memo<string>) () : std_string_String =
    let v1 : string = $"$0()"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "settings"
    let v4 : string = v2 + "#/" + v3 + ""
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    v48
and closure538 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_4 -> (* Settings *)
        true
    | _ ->
        false
and closure539 (v0 : leptos_prelude_ReadSignal<US19>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US19_4 -> (* Settings *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and method456 (v0 : leptos_dom_Fragment) : leptos_dom_Fragment =
    v0
and closure540 (v0 : leptos_dom_Fragment) () : leptos_prelude_AnyView_ =
    let v1 : leptos_dom_Fragment = method456(v0)
    let v2 : string = "leptos::prelude::AnyView::from(v1)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "Settings"
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    let v53 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v48 v53 
    let v55 : leptos_prelude_AnyView_ = method188(v54)
    let v56 : string = "v55"
    let v57 : string = ""
    let v58 : string = v56 + v57 
    let v59 : string = v58 + v57 
    let v60 : leptos_prelude_AnyView_ = method188(v3)
    let v61 : string = "v60"
    let v62 : string = ", "
    let v63 : string = v61 + v62 
    let v64 : string = v63 + v59 
    let v65 : string = "vec![" + v64 + "]"
    let v66 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let v69 : string = "&$0"
    let v70 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method455 (v0 : leptos_dom_Fragment) : (unit -> leptos_prelude_AnyView_) =
    closure540(v0)
and closure541 () () : leptos_prelude_AnyView_ =
    let v0 : string = "stroke-linecap=\"round\""
    let v1 : string = "stroke-linejoin=\"round\""
    let v2 : string = "d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v3 
    let v18 : string = v17 + v3 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method457 () : (unit -> leptos_prelude_AnyView_) =
    closure541()
and closure542 (v0 : leptos_prelude_Memo<string>) () : std_string_String =
    let v1 : string = $"$0()"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "transactions"
    let v4 : string = v2 + "#/" + v3 + ""
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    v48
and closure543 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_3 -> (* Transactions *)
        true
    | _ ->
        false
and closure544 (v0 : leptos_prelude_ReadSignal<US19>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US19_3 -> (* Transactions *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and closure545 (v0 : leptos_dom_Fragment) () : leptos_prelude_AnyView_ =
    let v1 : leptos_dom_Fragment = method456(v0)
    let v2 : string = "leptos::prelude::AnyView::from(v1)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "Transactions"
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    let v53 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v48 v53 
    let v55 : leptos_prelude_AnyView_ = method188(v54)
    let v56 : string = "v55"
    let v57 : string = ""
    let v58 : string = v56 + v57 
    let v59 : string = v58 + v57 
    let v60 : leptos_prelude_AnyView_ = method188(v3)
    let v61 : string = "v60"
    let v62 : string = ", "
    let v63 : string = v61 + v62 
    let v64 : string = v63 + v59 
    let v65 : string = "vec![" + v64 + "]"
    let v66 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let v69 : string = "&$0"
    let v70 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method458 (v0 : leptos_dom_Fragment) : (unit -> leptos_prelude_AnyView_) =
    closure545(v0)
and closure546 () () : leptos_prelude_AnyView_ =
    let v0 : string = "stroke-linecap=\"round\""
    let v1 : string = "stroke-linejoin=\"round\""
    let v2 : string = "d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\""
    let v3 : string = ""
    let v4 : string = " " + v0 + v3 + ""
    let v5 : string = " " + v1 + v4 + ""
    let v6 : string = " " + v2 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method187()
    let v8 : string = "path"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "cx=\"3\""
    let v16 : string = "cy=\"6.75\""
    let v17 : string = "r=\"1\""
    let v18 : string = "fill=\"currentColor\""
    let v19 : string = " " + v15 + v3 + ""
    let v20 : string = " " + v16 + v19 + ""
    let v21 : string = " " + v17 + v20 + ""
    let v22 : string = " " + v18 + v21 + ""
    let v23 : (unit -> leptos_prelude_AnyView_) = method197()
    let v24 : string = "circle"
    let v25 : string = "<" + v24 + " " + v22 + ">move || { v23() }</" + v24 + ">"
    let v26 : string = "leptos::prelude::view! { " + v25 + " }"
    let v27 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v27 |> unbox
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : string = "cx=\"3\""
    let v32 : string = "cy=\"12\""
    let v33 : string = "r=\"1\""
    let v34 : string = "fill=\"currentColor\""
    let v35 : string = " " + v31 + v3 + ""
    let v36 : string = " " + v32 + v35 + ""
    let v37 : string = " " + v33 + v36 + ""
    let v38 : string = " " + v34 + v37 + ""
    let v39 : (unit -> leptos_prelude_AnyView_) = method197()
    let v40 : string = "<" + v24 + " " + v38 + ">move || { v39() }</" + v24 + ">"
    let v41 : string = "leptos::prelude::view! { " + v40 + " }"
    let v42 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v42 |> unbox
    let v44 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v45 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "cx=\"3\""
    let v47 : string = "cy=\"17.25\""
    let v48 : string = "r=\"1\""
    let v49 : string = "fill=\"currentColor\""
    let v50 : string = " " + v46 + v3 + ""
    let v51 : string = " " + v47 + v50 + ""
    let v52 : string = " " + v48 + v51 + ""
    let v53 : string = " " + v49 + v52 + ""
    let v54 : (unit -> leptos_prelude_AnyView_) = method197()
    let v55 : string = "<" + v24 + " " + v53 + ">move || { v54() }</" + v24 + ">"
    let v56 : string = "leptos::prelude::view! { " + v55 + " }"
    let v57 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v57 |> unbox
    let v59 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v60 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : leptos_prelude_AnyView_ = method188(v60)
    let v62 : string = "v61"
    let v63 : string = v62 + v3 
    let v64 : string = v63 + v3 
    let v65 : leptos_prelude_AnyView_ = method188(v45)
    let v66 : string = "v65"
    let v67 : string = ", "
    let v68 : string = v66 + v67 
    let v69 : string = v68 + v64 
    let v70 : leptos_prelude_AnyView_ = method188(v30)
    let v71 : string = "v70"
    let v72 : string = v71 + v67 
    let v73 : string = v72 + v69 
    let v74 : leptos_prelude_AnyView_ = method188(v14)
    let v75 : string = "v74"
    let v76 : string = v75 + v67 
    let v77 : string = v76 + v73 
    let v78 : string = "vec![" + v77 + "]"
    let v79 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "leptos::prelude::Fragment::new($0)"
    let v81 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "&$0"
    let v83 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v85 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v83 v84 
    v85
and method459 () : (unit -> leptos_prelude_AnyView_) =
    closure546()
and closure547 (v0 : leptos_prelude_Memo<string>) () : std_string_String =
    let v1 : string = $"$0()"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "lists"
    let v4 : string = v2 + "#/" + v3 + ""
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    v48
and closure548 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_2 -> (* Lists *)
        true
    | _ ->
        false
and closure549 (v0 : leptos_prelude_ReadSignal<US19>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US19_2 -> (* Lists *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and closure550 (v0 : leptos_dom_Fragment) () : leptos_prelude_AnyView_ =
    let v1 : leptos_dom_Fragment = method456(v0)
    let v2 : string = "leptos::prelude::AnyView::from(v1)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "Lists"
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    let v53 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v48 v53 
    let v55 : leptos_prelude_AnyView_ = method188(v54)
    let v56 : string = "v55"
    let v57 : string = ""
    let v58 : string = v56 + v57 
    let v59 : string = v58 + v57 
    let v60 : leptos_prelude_AnyView_ = method188(v3)
    let v61 : string = "v60"
    let v62 : string = ", "
    let v63 : string = v61 + v62 
    let v64 : string = v63 + v59 
    let v65 : string = "vec![" + v64 + "]"
    let v66 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let v69 : string = "&$0"
    let v70 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method460 (v0 : leptos_dom_Fragment) : (unit -> leptos_prelude_AnyView_) =
    closure550(v0)
and closure552 () () : leptos_prelude_AnyView_ =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "leptos::prelude::Fragment::new($0)"
    let v4 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "&$0"
    let v6 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v8 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method462 () : (unit -> leptos_prelude_AnyView_) =
    closure552()
and closure551 () () : leptos_prelude_AnyView_ =
    let v0 : string = "x=\"3\""
    let v1 : string = "y=\"3\""
    let v2 : string = "width=\"18\""
    let v3 : string = "height=\"18\""
    let v4 : string = "rx=\"2\""
    let v5 : string = "stroke-linecap=\"round\""
    let v6 : string = "stroke-linejoin=\"round\""
    let v7 : string = ""
    let v8 : string = " " + v0 + v7 + ""
    let v9 : string = " " + v1 + v8 + ""
    let v10 : string = " " + v2 + v9 + ""
    let v11 : string = " " + v3 + v10 + ""
    let v12 : string = " " + v4 + v11 + ""
    let v13 : string = " " + v5 + v12 + ""
    let v14 : string = " " + v6 + v13 + ""
    let v15 : (unit -> leptos_prelude_AnyView_) = method462()
    let v16 : string = "rect"
    let v17 : string = "<" + v16 + " " + v14 + ">move || { v15() }</" + v16 + ">"
    let v18 : string = "leptos::prelude::view! { " + v17 + " }"
    let v19 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v19 |> unbox
    let v21 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "cx=\"7.5\""
    let v24 : string = "cy=\"7.5\""
    let v25 : string = "r=\"1.5\""
    let v26 : string = "fill=\"currentColor\""
    let v27 : string = " " + v23 + v7 + ""
    let v28 : string = " " + v24 + v27 + ""
    let v29 : string = " " + v25 + v28 + ""
    let v30 : string = " " + v26 + v29 + ""
    let v31 : (unit -> leptos_prelude_AnyView_) = method197()
    let v32 : string = "circle"
    let v33 : string = "<" + v32 + " " + v30 + ">move || { v31() }</" + v32 + ">"
    let v34 : string = "leptos::prelude::view! { " + v33 + " }"
    let v35 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v35 |> unbox
    let v37 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "cx=\"16.5\""
    let v40 : string = "cy=\"7.5\""
    let v41 : string = "r=\"1.5\""
    let v42 : string = "fill=\"currentColor\""
    let v43 : string = " " + v39 + v7 + ""
    let v44 : string = " " + v40 + v43 + ""
    let v45 : string = " " + v41 + v44 + ""
    let v46 : string = " " + v42 + v45 + ""
    let v47 : (unit -> leptos_prelude_AnyView_) = method197()
    let v48 : string = "<" + v32 + " " + v46 + ">move || { v47() }</" + v32 + ">"
    let v49 : string = "leptos::prelude::view! { " + v48 + " }"
    let v50 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v50 |> unbox
    let v52 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "cx=\"12\""
    let v55 : string = "cy=\"12\""
    let v56 : string = "r=\"1.5\""
    let v57 : string = "fill=\"currentColor\""
    let v58 : string = " " + v54 + v7 + ""
    let v59 : string = " " + v55 + v58 + ""
    let v60 : string = " " + v56 + v59 + ""
    let v61 : string = " " + v57 + v60 + ""
    let v62 : (unit -> leptos_prelude_AnyView_) = method197()
    let v63 : string = "<" + v32 + " " + v61 + ">move || { v62() }</" + v32 + ">"
    let v64 : string = "leptos::prelude::view! { " + v63 + " }"
    let v65 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v65 |> unbox
    let v67 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v68 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let v69 : string = "cx=\"7.5\""
    let v70 : string = "cy=\"16.5\""
    let v71 : string = "r=\"1.5\""
    let v72 : string = "fill=\"currentColor\""
    let v73 : string = " " + v69 + v7 + ""
    let v74 : string = " " + v70 + v73 + ""
    let v75 : string = " " + v71 + v74 + ""
    let v76 : string = " " + v72 + v75 + ""
    let v77 : (unit -> leptos_prelude_AnyView_) = method197()
    let v78 : string = "<" + v32 + " " + v76 + ">move || { v77() }</" + v32 + ">"
    let v79 : string = "leptos::prelude::view! { " + v78 + " }"
    let v80 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v80 |> unbox
    let v82 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v83 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "cx=\"16.5\""
    let v85 : string = "cy=\"16.5\""
    let v86 : string = "r=\"1.5\""
    let v87 : string = "fill=\"currentColor\""
    let v88 : string = " " + v84 + v7 + ""
    let v89 : string = " " + v85 + v88 + ""
    let v90 : string = " " + v86 + v89 + ""
    let v91 : string = " " + v87 + v90 + ""
    let v92 : (unit -> leptos_prelude_AnyView_) = method197()
    let v93 : string = "<" + v32 + " " + v91 + ">move || { v92() }</" + v32 + ">"
    let v94 : string = "leptos::prelude::view! { " + v93 + " }"
    let v95 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v95 |> unbox
    let v97 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v98 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : leptos_prelude_AnyView_ = method188(v98)
    let v100 : string = "v99"
    let v101 : string = v100 + v7 
    let v102 : string = v101 + v7 
    let v103 : leptos_prelude_AnyView_ = method188(v83)
    let v104 : string = "v103"
    let v105 : string = ", "
    let v106 : string = v104 + v105 
    let v107 : string = v106 + v102 
    let v108 : leptos_prelude_AnyView_ = method188(v68)
    let v109 : string = "v108"
    let v110 : string = v109 + v105 
    let v111 : string = v110 + v107 
    let v112 : leptos_prelude_AnyView_ = method188(v53)
    let v113 : string = "v112"
    let v114 : string = v113 + v105 
    let v115 : string = v114 + v111 
    let v116 : leptos_prelude_AnyView_ = method188(v38)
    let v117 : string = "v116"
    let v118 : string = v117 + v105 
    let v119 : string = v118 + v115 
    let v120 : leptos_prelude_AnyView_ = method188(v22)
    let v121 : string = "v120"
    let v122 : string = v121 + v105 
    let v123 : string = v122 + v119 
    let v124 : string = "vec![" + v123 + "]"
    let v125 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v124 
    let v126 : string = "leptos::prelude::Fragment::new($0)"
    let v127 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let v128 : string = "&$0"
    let v129 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v127 v128 
    let v130 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v131 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v129 v130 
    v131
and method461 () : (unit -> leptos_prelude_AnyView_) =
    closure551()
and closure553 (v0 : leptos_prelude_Memo<string>) () : std_string_String =
    let v1 : string = $"$0()"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "dice"
    let v4 : string = v2 + "#/" + v3 + ""
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    v48
and closure554 (v0 : leptos_prelude_ReadSignal<US19>) () : bool =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US19_1(v3) -> (* Dice *)
        match v3 with
        | US20_0 -> (* Dice' *)
            true
        | _ ->
            false
    | _ ->
        false
and closure555 (v0 : leptos_prelude_ReadSignal<US19>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::SignalGet::get(&$0)"
    let v2 : US19 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : bool =
        match v2 with
        | US19_1(v3) -> (* Dice *)
            match v3 with
            | US20_0 -> (* Dice' *)
                true
            | _ ->
                false
        | _ ->
            false
    if v5 then
        let v6 : string = "border-grey-200 text-grey-900"
        let v7 : string = "r#\"" + v6 + "\"#"
        let v8 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v7 
        v8
    else
        let v9 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v10 : string = "r#\"" + v9 + "\"#"
        let v11 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v10 
        v11
and closure556 (v0 : leptos_dom_Fragment) () : leptos_prelude_AnyView_ =
    let v1 : leptos_dom_Fragment = method456(v0)
    let v2 : string = "leptos::prelude::AnyView::from(v1)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "Dice"
    let v5 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _v5 = v21 
    #endif
    let v24 : Ref<Str> = _v5 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _v29 = v45 
    #endif
    let v48 : std_string_String = _v29 
    let v53 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v48 v53 
    let v55 : leptos_prelude_AnyView_ = method188(v54)
    let v56 : string = "v55"
    let v57 : string = ""
    let v58 : string = v56 + v57 
    let v59 : string = v58 + v57 
    let v60 : leptos_prelude_AnyView_ = method188(v3)
    let v61 : string = "v60"
    let v62 : string = ", "
    let v63 : string = v61 + v62 
    let v64 : string = v63 + v59 
    let v65 : string = "vec![" + v64 + "]"
    let v66 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    let v69 : string = "&$0"
    let v70 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    v72
and method463 (v0 : leptos_dom_Fragment) : (unit -> leptos_prelude_AnyView_) =
    closure556(v0)
and closure535 (v0 : leptos_prelude_ReadSignal<US19>, v1 : leptos_prelude_Memo<string>) () : leptos_prelude_AnyView_ =
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure536()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v6 : string = "fill=\"none\""
    let v7 : string = "viewBox=\"0 0 24 24\""
    let v8 : string = "stroke-width=\"1.5\""
    let v9 : string = "stroke=\"currentColor\""
    let v10 : string = "class=move || \" \".to_owned() + &v4(())"
    let v11 : string = ""
    let v12 : string = " " + v5 + v11 + ""
    let v13 : string = " " + v6 + v12 + ""
    let v14 : string = " " + v7 + v13 + ""
    let v15 : string = " " + v8 + v14 + ""
    let v16 : string = " " + v9 + v15 + ""
    let v17 : string = " " + v10 + v16 + ""
    let v18 : (unit -> leptos_prelude_AnyView_) = method330()
    let v19 : string = "svg"
    let v20 : string = "<" + v19 + " " + v17 + ">move || { v18() }</" + v19 + ">"
    let v21 : string = "leptos::prelude::view! { " + v20 + " }"
    let v22 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v22 |> unbox
    let v24 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v25 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : leptos_prelude_AnyView_ = method188(v25)
    let v27 : string = "v26"
    let v28 : string = v27 + v11 
    let v29 : string = v28 + v11 
    let v30 : string = "vec![" + v29 + "]"
    let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "leptos::prelude::Fragment::new($0)"
    let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : (unit -> std_string_String) = closure537(v1)
    let v35 : string = "let v34 = $0"
    Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v36 : string = "$0"
    let v37 : (unit -> bool) = closure538(v0)
    let v38 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v37 v36 
    let v39 : string = "$0"
    let v40 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure539(v0)
    let v41 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v40 v39 
    let v42 : string = "href=move || v34()"
    let v43 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v41(())"
    let v44 : string = "aria-current=move || if v38(()) { \"page\" } else { \"\" }"
    let v45 : string = " " + v42 + v11 + ""
    let v46 : string = " " + v43 + v45 + ""
    let v47 : string = " " + v44 + v46 + ""
    let v48 : (unit -> leptos_prelude_AnyView_) = method455(v33)
    let v49 : string = "a"
    let v50 : string = "<" + v49 + " " + v47 + ">move || { v48() }</" + v49 + ">"
    let v51 : string = "leptos::prelude::view! { " + v50 + " }"
    let v52 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v52 |> unbox
    let v54 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : string = "$0"
    let v57 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v56 
    let v58 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v59 : string = "fill=\"none\""
    let v60 : string = "height=\"100%\""
    let v61 : string = "viewBox=\"0 0 24 24\""
    let v62 : string = "stroke-width=\"1.5\""
    let v63 : string = "stroke=\"currentColor\""
    let v64 : string = "class=move || \"text-gray-700 \".to_owned() + &v57(())"
    let v65 : string = " " + v58 + v11 + ""
    let v66 : string = " " + v59 + v65 + ""
    let v67 : string = " " + v60 + v66 + ""
    let v68 : string = " " + v61 + v67 + ""
    let v69 : string = " " + v62 + v68 + ""
    let v70 : string = " " + v63 + v69 + ""
    let v71 : string = " " + v64 + v70 + ""
    let v72 : (unit -> leptos_prelude_AnyView_) = method457()
    let v73 : string = "<" + v19 + " " + v71 + ">move || { v72() }</" + v19 + ">"
    let v74 : string = "leptos::prelude::view! { " + v73 + " }"
    let v75 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v75 |> unbox
    let v77 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v78 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : leptos_prelude_AnyView_ = method188(v78)
    let v80 : string = "v79"
    let v81 : string = v80 + v11 
    let v82 : string = v81 + v11 
    let v83 : string = "vec![" + v82 + "]"
    let v84 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = "leptos::prelude::Fragment::new($0)"
    let v86 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : (unit -> std_string_String) = closure542(v1)
    let v88 : string = "let v87 = $0"
    Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v89 : string = "$0"
    let v90 : (unit -> bool) = closure543(v0)
    let v91 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v90 v89 
    let v92 : string = "$0"
    let v93 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure544(v0)
    let v94 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v93 v92 
    let v95 : string = "href=move || v87()"
    let v96 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v94(())"
    let v97 : string = "aria-current=move || if v91(()) { \"page\" } else { \"\" }"
    let v98 : string = " " + v95 + v11 + ""
    let v99 : string = " " + v96 + v98 + ""
    let v100 : string = " " + v97 + v99 + ""
    let v101 : (unit -> leptos_prelude_AnyView_) = method458(v86)
    let v102 : string = "<" + v49 + " " + v100 + ">move || { v101() }</" + v49 + ">"
    let v103 : string = "leptos::prelude::view! { " + v102 + " }"
    let v104 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v104 |> unbox
    let v106 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v107 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : string = "$0"
    let v109 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v108 
    let v110 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v111 : string = "fill=\"none\""
    let v112 : string = "height=\"100%\""
    let v113 : string = "viewBox=\"0 0 24 24\""
    let v114 : string = "stroke-width=\"1.5\""
    let v115 : string = "stroke=\"currentColor\""
    let v116 : string = "class=move || \"text-gray-700 \".to_owned() + &v109(())"
    let v117 : string = " " + v110 + v11 + ""
    let v118 : string = " " + v111 + v117 + ""
    let v119 : string = " " + v112 + v118 + ""
    let v120 : string = " " + v113 + v119 + ""
    let v121 : string = " " + v114 + v120 + ""
    let v122 : string = " " + v115 + v121 + ""
    let v123 : string = " " + v116 + v122 + ""
    let v124 : (unit -> leptos_prelude_AnyView_) = method459()
    let v125 : string = "<" + v19 + " " + v123 + ">move || { v124() }</" + v19 + ">"
    let v126 : string = "leptos::prelude::view! { " + v125 + " }"
    let v127 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v126 
    let v128 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v127 |> unbox
    let v129 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v130 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let v131 : leptos_prelude_AnyView_ = method188(v130)
    let v132 : string = "v131"
    let v133 : string = v132 + v11 
    let v134 : string = v133 + v11 
    let v135 : string = "vec![" + v134 + "]"
    let v136 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v135 
    let v137 : string = "leptos::prelude::Fragment::new($0)"
    let v138 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : (unit -> std_string_String) = closure547(v1)
    let v140 : string = "let v139 = $0"
    Fable.Core.RustInterop.emitRustExpr v139 v140 
    let v141 : string = "$0"
    let v142 : (unit -> bool) = closure548(v0)
    let v143 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v142 v141 
    let v144 : string = "$0"
    let v145 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure549(v0)
    let v146 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v145 v144 
    let v147 : string = "href=move || v139()"
    let v148 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v146(())"
    let v149 : string = "aria-current=move || if v143(()) { \"page\" } else { \"\" }"
    let v150 : string = " " + v147 + v11 + ""
    let v151 : string = " " + v148 + v150 + ""
    let v152 : string = " " + v149 + v151 + ""
    let v153 : (unit -> leptos_prelude_AnyView_) = method460(v138)
    let v154 : string = "<" + v49 + " " + v152 + ">move || { v153() }</" + v49 + ">"
    let v155 : string = "leptos::prelude::view! { " + v154 + " }"
    let v156 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v155 
    let v157 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v156 |> unbox
    let v158 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v159 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v157 v158 
    let v160 : string = "$0"
    let v161 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v160 
    let v162 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v163 : string = "fill=\"none\""
    let v164 : string = "viewBox=\"0 0 24 24\""
    let v165 : string = "stroke-width=\"1.5\""
    let v166 : string = "stroke=\"currentColor\""
    let v167 : string = "class=move || \" \".to_owned() + &v161(())"
    let v168 : string = " " + v162 + v11 + ""
    let v169 : string = " " + v163 + v168 + ""
    let v170 : string = " " + v164 + v169 + ""
    let v171 : string = " " + v165 + v170 + ""
    let v172 : string = " " + v166 + v171 + ""
    let v173 : string = " " + v167 + v172 + ""
    let v174 : (unit -> leptos_prelude_AnyView_) = method461()
    let v175 : string = "<" + v19 + " " + v173 + ">move || { v174() }</" + v19 + ">"
    let v176 : string = "leptos::prelude::view! { " + v175 + " }"
    let v177 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v176 
    let v178 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v177 |> unbox
    let v179 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v180 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v178 v179 
    let v181 : leptos_prelude_AnyView_ = method188(v180)
    let v182 : string = "v181"
    let v183 : string = v182 + v11 
    let v184 : string = v183 + v11 
    let v185 : string = "vec![" + v184 + "]"
    let v186 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v185 
    let v187 : string = "leptos::prelude::Fragment::new($0)"
    let v188 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v186 v187 
    let v189 : (unit -> std_string_String) = closure553(v1)
    let v190 : string = "let v189 = $0"
    Fable.Core.RustInterop.emitRustExpr v189 v190 
    let v191 : string = "$0"
    let v192 : (unit -> bool) = closure554(v0)
    let v193 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v192 v191 
    let v194 : string = "$0"
    let v195 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure555(v0)
    let v196 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v195 v194 
    let v197 : string = "href=move || v189()"
    let v198 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v196(())"
    let v199 : string = "aria-current=move || if v193(()) { \"page\" } else { \"\" }"
    let v200 : string = " " + v197 + v11 + ""
    let v201 : string = " " + v198 + v200 + ""
    let v202 : string = " " + v199 + v201 + ""
    let v203 : (unit -> leptos_prelude_AnyView_) = method463(v188)
    let v204 : string = "<" + v49 + " " + v202 + ">move || { v203() }</" + v49 + ">"
    let v205 : string = "leptos::prelude::view! { " + v204 + " }"
    let v206 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v205 
    let v207 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v206 |> unbox
    let v208 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v209 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v207 v208 
    let v210 : leptos_prelude_AnyView_ = method188(v55)
    let v211 : string = "v210"
    let v212 : string = v211 + v11 
    let v213 : string = v212 + v11 
    let v214 : leptos_prelude_AnyView_ = method188(v107)
    let v215 : string = "v214"
    let v216 : string = ", "
    let v217 : string = v215 + v216 
    let v218 : string = v217 + v213 
    let v219 : leptos_prelude_AnyView_ = method188(v159)
    let v220 : string = "v219"
    let v221 : string = v220 + v216 
    let v222 : string = v221 + v218 
    let v223 : leptos_prelude_AnyView_ = method188(v209)
    let v224 : string = "v223"
    let v225 : string = v224 + v216 
    let v226 : string = v225 + v222 
    let v227 : string = "vec![" + v226 + "]"
    let v228 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v227 
    let v229 : string = "leptos::prelude::Fragment::new($0)"
    let v230 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v228 v229 
    let v231 : string = "&$0"
    let v232 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v230 v231 
    let v233 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v234 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v232 v233 
    v234
and method454 (v0 : leptos_prelude_ReadSignal<US19>, v1 : leptos_prelude_Memo<string>) : (unit -> leptos_prelude_AnyView_) =
    closure535(v0, v1)
and closure534 (v0 : leptos_prelude_ReadSignal<US19>, v1 : leptos_prelude_Memo<string>) () : leptos_prelude_AnyView_ =
    let v2 : string = "class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\""
    let v3 : string = "aria-label=\"Tabs\""
    let v4 : string = ""
    let v5 : string = " " + v2 + v4 + ""
    let v6 : string = " " + v3 + v5 + ""
    let v7 : (unit -> leptos_prelude_AnyView_) = method454(v0, v1)
    let v8 : string = "nav"
    let v9 : string = "<" + v8 + " " + v6 + ">move || { v7() }</" + v8 + ">"
    let v10 : string = "leptos::prelude::view! { " + v9 + " }"
    let v11 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Nav>> = v11 |> unbox
    let v13 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v14 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_AnyView_ = method188(v14)
    let v16 : string = "v15"
    let v17 : string = v16 + v4 
    let v18 : string = v17 + v4 
    let v19 : string = "vec![" + v18 + "]"
    let v20 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "leptos::prelude::Fragment::new($0)"
    let v22 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "&$0"
    let v24 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v26 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v24 v25 
    v26
and method453 (v0 : leptos_prelude_ReadSignal<US19>, v1 : leptos_prelude_Memo<string>) : (unit -> leptos_prelude_AnyView_) =
    closure534(v0, v1)
and closure533 (v0 : leptos_prelude_ReadSignal<US19>, v1 : leptos_prelude_Memo<string>) () : leptos_prelude_AnyView_ =
    let v2 : string = "class=\"flex flex-1 border-t border-gray-200\""
    let v3 : string = ""
    let v4 : string = " " + v2 + v3 + ""
    let v5 : (unit -> leptos_prelude_AnyView_) = method453(v0, v1)
    let v6 : string = "div"
    let v7 : string = "<" + v6 + " " + v4 + ">move || { v5() }</" + v6 + ">"
    let v8 : string = "leptos::prelude::view! { " + v7 + " }"
    let v9 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v9 |> unbox
    let v11 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v12 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_prelude_AnyView_ = method188(v12)
    let v14 : string = "v13"
    let v15 : string = v14 + v3 
    let v16 : string = v15 + v3 
    let v17 : string = "vec![" + v16 + "]"
    let v18 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = "leptos::prelude::Fragment::new($0)"
    let v20 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = "&$0"
    let v22 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    v24
and method452 (v0 : leptos_prelude_ReadSignal<US19>, v1 : leptos_prelude_Memo<string>) : (unit -> leptos_prelude_AnyView_) =
    closure533(v0, v1)
and closure521 (v0 : leptos_prelude_ReadSignal<US19>) () : leptos_prelude_AnyView_ =
    let v1 : string = "menu_tabs.render ()"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "leptos_router::hooks::use_location()"
    let v5 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure47(v5)
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "leptos::prelude::Memo::new(move |_| { v8(()) })"
    let v10 : leptos_prelude_Memo<string> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : string = "class=\"hidden\""
    let v12 : string = ""
    let v13 : string = " " + v11 + v12 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method441(v0)
    let v15 : string = "div"
    let v16 : string = "<" + v15 + " " + v13 + ">move || { v14() }</" + v15 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v18 |> unbox
    let v20 : string = "class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\""
    let v21 : string = " " + v20 + v12 + ""
    let v22 : (unit -> leptos_prelude_AnyView_) = method452(v0, v10)
    let v23 : string = "<" + v15 + " " + v21 + ">move || { v22() }</" + v15 + ">"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v30 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v29 
    let v31 : leptos_prelude_AnyView_ = method188(v28)
    let v32 : string = "v31"
    let v33 : string = v32 + v12 
    let v34 : string = v33 + v12 
    let v35 : leptos_prelude_AnyView_ = method188(v30)
    let v36 : string = "v35"
    let v37 : string = ", "
    let v38 : string = v36 + v37 
    let v39 : string = v38 + v34 
    let v40 : string = "vec![" + v39 + "]"
    let v41 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "leptos::prelude::Fragment::new($0)"
    let v43 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "&$0"
    let v45 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v47
and method440 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> leptos_prelude_AnyView_) =
    closure521(v0)
and closure53 (v0 : leptos_prelude_ReadSignal<US19>) () : leptos_prelude_AnyView_ =
    let v1 : string = "class=\"flex flex-1 flex-col [overflow:hidden]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method67(v0)
    let v5 : string = "main"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Main>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "class=\"flex\""
    let v13 : string = " " + v12 + v2 + ""
    let v14 : (unit -> leptos_prelude_AnyView_) = method440(v0)
    let v15 : string = "div"
    let v16 : string = "<" + v15 + " " + v13 + ">move || { v14() }</" + v15 + ">"
    let v17 : string = "leptos::prelude::view! { " + v16 + " }"
    let v18 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v18 |> unbox
    let v20 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : leptos_prelude_AnyView_ = method188(v21)
    let v23 : string = "v22"
    let v24 : string = v23 + v2 
    let v25 : string = v24 + v2 
    let v26 : leptos_prelude_AnyView_ = method188(v11)
    let v27 : string = "v26"
    let v28 : string = ", "
    let v29 : string = v27 + v28 
    let v30 : string = v29 + v25 
    let v31 : string = "vec![" + v30 + "]"
    let v32 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = "leptos::prelude::Fragment::new($0)"
    let v34 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "&$0"
    let v36 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v38 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v36 v37 
    v38
and method66 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> leptos_prelude_AnyView_) =
    closure53(v0)
and closure52 (v0 : leptos_prelude_ReadSignal<US19>) () : leptos_prelude_AnyView_ =
    let v1 : string = "class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_prelude_AnyView_) = method66(v0)
    let v5 : string = "div"
    let v6 : string = "<" + v5 + " " + v3 + ">move || { v4() }</" + v5 + ">"
    let v7 : string = "leptos::prelude::view! { " + v6 + " }"
    let v8 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v8 |> unbox
    let v10 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v11 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : leptos_prelude_AnyView_ = method188(v11)
    let v13 : string = "v12"
    let v14 : string = v13 + v2 
    let v15 : string = v14 + v2 
    let v16 : string = "vec![" + v15 + "]"
    let v17 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "leptos::prelude::Fragment::new($0)"
    let v19 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "&$0"
    let v21 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v23 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v21 v22 
    v23
and method65 (v0 : leptos_prelude_ReadSignal<US19>) : (unit -> leptos_prelude_AnyView_) =
    closure52(v0)
and closure46 () () : leptos_prelude_AnyView_ =
    let v0 : string = "content.render ()"
    let v1 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "leptos_router::hooks::use_location()"
    let v4 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "std::sync::Arc::new(leptos_router::hooks::use_navigate())"
    let v6 : std_sync_Arc<Dyn<ActionFn2<Ref<Str>, leptos_router_NavigateOptions>>> = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : string = "leptos_router::hooks::use_location()"
    let v8 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure47(v8)
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "leptos::prelude::Memo::new(move |_| { v11(()) })"
    let v13 : leptos_prelude_Memo<string> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v15 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "$0.unwrap()"
    let v17 : Heap2 = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = $"leptos::prelude::signal($0)"
    let v19 : US19 = US19_0
    let struct (v20 : leptos_prelude_ReadSignal<US19>, v21 : leptos_prelude_WriteSignal<US19>) = Fable.Core.RustInterop.emitRustExpr v19 v18 
    let v22 : string = $"leptos::prelude::signal($0)"
    let struct (v23 : leptos_prelude_ReadSignal<bool>, v24 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v22 
    let v25 : string = "$0"
    let v26 : (unit -> unit) = closure48(v4, v6, v13, v17, v24, v23)
    let v27 : (unit -> unit) = Fable.Core.RustInterop.emitRustExpr v26 v25 
    let v28 : string = "true; leptos::prelude::Effect::new(move |_| { v27(()) })"
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = "$0"
    let v31 : (unit -> unit) = closure49(v4, v21)
    let v32 : (unit -> unit) = Fable.Core.RustInterop.emitRustExpr v31 v30 
    let v33 : string = "true; leptos::prelude::Effect::new(move |_| { v32(()) })"
    let v34 : bool = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : string = "class=\"flex flex-1 max-[100px]:[overflow-x:auto]\""
    let v36 : string = ""
    let v37 : string = " " + v35 + v36 + ""
    let v38 : (unit -> leptos_prelude_AnyView_) = method65(v20)
    let v39 : string = "div"
    let v40 : string = "<" + v39 + " " + v37 + ">move || { v38() }</" + v39 + ">"
    let v41 : string = "leptos::prelude::view! { " + v40 + " }"
    let v42 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v42 |> unbox
    let v44 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v45 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : leptos_prelude_AnyView_ = method188(v45)
    let v47 : string = "v46"
    let v48 : string = v47 + v36 
    let v49 : string = v48 + v36 
    let v50 : string = "vec![" + v49 + "]"
    let v51 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "leptos::prelude::Fragment::new($0)"
    let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "&$0"
    let v55 : Ref<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : string = "leptos::prelude::AnyView::from(*$0.clone())"
    let v57 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v56 
    v57
and method60 () : (unit -> leptos_prelude_AnyView_) =
    closure46()
and closure5 () (v0 : int32) : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> =
    let v1 : string = "home.render () / router: " + string v0 + ""
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v5 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "$0.unwrap()"
    let v7 : Heap2 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "state_core.use_database (1)"
    let v9 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : leptos_prelude_Resource<US2, std_sync_Arc<rexie_Rexie>> = method7()
    let v12 : string = "state_core.use_core_database (1)"
    let v13 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : leptos_prelude_Resource<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option, US3> = method14(v11)
    let v16 : string = "$0"
    let v17 : (unit -> unit) = closure25(v7, v15)
    let v18 : (unit -> unit) = Fable.Core.RustInterop.emitRustExpr v17 v16 
    let v19 : string = "true; leptos::prelude::Effect::new(move |_| { v18(()) })"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0"
    let v22 : (unit -> std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>) = closure40(v7)
    let v23 : (unit -> std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>) = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "leptos::prelude::Memo::new(move |_| { v23(()) })"
    let v25 : leptos_prelude_Memo<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = $"leptos::prelude::signal($0)"
    let struct (v27 : leptos_prelude_ReadSignal<bool>, v28 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v26 
    let v29 : string = "Box::pin($0)"
    let v30 : (Heap3 -> std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>) = closure41(v11)
    let v31 : std_pin_Pin<Box<(Heap3 -> std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>)>> = Fable.Core.RustInterop.emitRustExpr v30 v29 
    let v32 : string = "leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap3>| $0(value.clone())))"
    let v33 : leptos_prelude_Action<Heap3, unit> = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "$0"
    let v35 : (unit -> unit) = closure42(v7, v25, v28, v27, v33)
    let v36 : (unit -> unit) = Fable.Core.RustInterop.emitRustExpr v35 v34 
    let v37 : string = "true; leptos::prelude::Effect::new(move |_| { v36(()) })"
    let v38 : bool = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "class=\"flex flex-1\""
    let v40 : (unit -> bool) = method59(v7)
    let v41 : string = "class:dark"
    let v42 : string = "" + v41 + "={move || v40()}"
    let v43 : string = ""
    let v44 : string = " " + v39 + v43 + ""
    let v45 : string = " " + v42 + v44 + ""
    let v46 : (unit -> leptos_prelude_AnyView_) = method60()
    let v47 : string = "div"
    let v48 : string = "<" + v47 + " " + v45 + ">move || { v46() }</" + v47 + ">"
    let v49 : string = "leptos::prelude::view! { " + v48 + " }"
    let v50 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v50 |> unbox
    v51
and method6 () : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>) =
    closure5()
and method464 (v0 : std_string_String) : std_string_String =
    v0
and closure557 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 1
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_AnyView_ = method188(v3)
    let v5 : string = "v4"
    let v6 : string = ""
    let v7 : string = v5 + v6 
    let v8 : string = v7 + v6 
    let v9 : string = "vec![" + v8 + "]"
    let v10 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : string = "leptos::prelude::Fragment::new($0)"
    let v12 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_dom_Fragment = method456(v12)
    let v14 : string = "leptos::prelude::AnyView::from(v13)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v14 
    v15
and method465 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure557(v0)
and closure558 () () : leptos_dom_Fragment =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "leptos::prelude::Fragment::new($0)"
    let v4 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2 v3 
    v4
and closure559 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 2
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_AnyView_ = method188(v3)
    let v5 : string = "v4"
    let v6 : string = ""
    let v7 : string = v5 + v6 
    let v8 : string = v7 + v6 
    let v9 : string = "vec![" + v8 + "]"
    let v10 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : string = "leptos::prelude::Fragment::new($0)"
    let v12 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_dom_Fragment = method456(v12)
    let v14 : string = "leptos::prelude::AnyView::from(v13)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v14 
    v15
and method466 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure559(v0)
and closure560 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 3
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_AnyView_ = method188(v3)
    let v5 : string = "v4"
    let v6 : string = ""
    let v7 : string = v5 + v6 
    let v8 : string = v7 + v6 
    let v9 : string = "vec![" + v8 + "]"
    let v10 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : string = "leptos::prelude::Fragment::new($0)"
    let v12 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_dom_Fragment = method456(v12)
    let v14 : string = "leptos::prelude::AnyView::from(v13)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v14 
    v15
and method467 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure560(v0)
and closure561 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 4
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_AnyView_ = method188(v3)
    let v5 : string = "v4"
    let v6 : string = ""
    let v7 : string = v5 + v6 
    let v8 : string = v7 + v6 
    let v9 : string = "vec![" + v8 + "]"
    let v10 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : string = "leptos::prelude::Fragment::new($0)"
    let v12 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : leptos_dom_Fragment = method456(v12)
    let v14 : string = "leptos::prelude::AnyView::from(v13)"
    let v15 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v14 
    v15
and method468 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure561(v0)
and method469 (v0 : leptos_prelude_View<leptos_router_NestedRoute>) : leptos_prelude_View<leptos_router_NestedRoute> =
    v0
and closure4 () () : Vec<leptos_prelude_View<leptos_router_NestedRoute>> =
    let v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>) = method6()
    let v1 : string = ""
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : std_string_String = method464(v45)
    let v51 : (unit -> leptos_prelude_AnyView_) = method465(v0)
    let v52 : string = "path=leptos_router_macro::path!(v50)"
    let v53 : string = "view= move || v51()"
    let v54 : (unit -> leptos_dom_Fragment) = closure558()
    let v55 : string = "children=Box::new(move || v54())"
    let v56 : string = " " + v52 + v1 + ""
    let v57 : string = " " + v53 + v56 + ""
    let v58 : string = " " + v55 + v57 + ""
    let v59 : string = "leptos_router::components::ParentRoute"
    let v60 : string = "<" + v59 + " " + v58 + " />"
    let v61 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v60 + " })"
    let v62 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "/"
    let v64 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v65 
    let _v64 = v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v67 : string = "&*$0"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v67 
    let _v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v69 : string = "&*$0"
    let v70 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v69 
    let _v64 = v70 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v71 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _v64 = v71 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _v64 = v74 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _v64 = v77 
    #endif
#else
    let v80 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _v64 = v80 
    #endif
    let v83 : Ref<Str> = _v64 
    let v88 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : std_string_String = v83 |> unbox<std_string_String>
    let _v88 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v98 : std_string_String = v83 |> unbox<std_string_String>
    let _v88 = v98 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v101 : std_string_String = v83 |> unbox<std_string_String>
    let _v88 = v101 
    #endif
#else
    let v104 : std_string_String = v83 |> unbox<std_string_String>
    let _v88 = v104 
    #endif
    let v107 : std_string_String = _v88 
    let v112 : std_string_String = method464(v107)
    let v113 : (unit -> leptos_prelude_AnyView_) = method466(v0)
    let v114 : string = "path=leptos_router_macro::path!(v112)"
    let v115 : string = "view= move || v113()"
    let v116 : string = "children=Box::new(move || v54())"
    let v117 : string = " " + v114 + v1 + ""
    let v118 : string = " " + v115 + v117 + ""
    let v119 : string = " " + v116 + v118 + ""
    let v120 : string = "<" + v59 + " " + v119 + " />"
    let v121 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v120 + " })"
    let v122 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : string = "/*"
    let v124 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v125 
    let _v124 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "&*$0"
    let v128 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v127 
    let _v124 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "&*$0"
    let v130 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v129 
    let _v124 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v131 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _v124 = v131 
    #endif
#if FABLE_COMPILER_PYTHON
    let v134 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _v124 = v134 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _v124 = v137 
    #endif
#else
    let v140 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _v124 = v140 
    #endif
    let v143 : Ref<Str> = _v124 
    let v148 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v149 : string = "String::from($0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v149 
    let _v148 = v150 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v151 : string = "String::from($0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v151 
    let _v148 = v152 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v153 : string = "String::from($0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v153 
    let _v148 = v154 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v155 : std_string_String = v143 |> unbox<std_string_String>
    let _v148 = v155 
    #endif
#if FABLE_COMPILER_PYTHON
    let v158 : std_string_String = v143 |> unbox<std_string_String>
    let _v148 = v158 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v161 : std_string_String = v143 |> unbox<std_string_String>
    let _v148 = v161 
    #endif
#else
    let v164 : std_string_String = v143 |> unbox<std_string_String>
    let _v148 = v164 
    #endif
    let v167 : std_string_String = _v148 
    let v172 : std_string_String = method464(v167)
    let v173 : (unit -> leptos_prelude_AnyView_) = method467(v0)
    let v174 : string = "path=leptos_router_macro::path!(v172)"
    let v175 : string = "view= move || v173()"
    let v176 : string = "children=Box::new(move || v54())"
    let v177 : string = " " + v174 + v1 + ""
    let v178 : string = " " + v175 + v177 + ""
    let v179 : string = " " + v176 + v178 + ""
    let v180 : string = "<" + v59 + " " + v179 + " />"
    let v181 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v180 + " })"
    let v182 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v181 
    let v183 : string = "*"
    let v184 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v185 : string = "&*$0"
    let v186 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v185 
    let _v184 = v186 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v187 : string = "&*$0"
    let v188 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v187 
    let _v184 = v188 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v189 : string = "&*$0"
    let v190 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v189 
    let _v184 = v190 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v191 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _v184 = v191 
    #endif
#if FABLE_COMPILER_PYTHON
    let v194 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _v184 = v194 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v197 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _v184 = v197 
    #endif
#else
    let v200 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _v184 = v200 
    #endif
    let v203 : Ref<Str> = _v184 
    let v208 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v209 : string = "String::from($0)"
    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v209 
    let _v208 = v210 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v211 : string = "String::from($0)"
    let v212 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v211 
    let _v208 = v212 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v213 : string = "String::from($0)"
    let v214 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v213 
    let _v208 = v214 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v215 : std_string_String = v203 |> unbox<std_string_String>
    let _v208 = v215 
    #endif
#if FABLE_COMPILER_PYTHON
    let v218 : std_string_String = v203 |> unbox<std_string_String>
    let _v208 = v218 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v221 : std_string_String = v203 |> unbox<std_string_String>
    let _v208 = v221 
    #endif
#else
    let v224 : std_string_String = v203 |> unbox<std_string_String>
    let _v208 = v224 
    #endif
    let v227 : std_string_String = _v208 
    let v232 : std_string_String = method464(v227)
    let v233 : (unit -> leptos_prelude_AnyView_) = method468(v0)
    let v234 : string = "path=leptos_router_macro::path!(v232)"
    let v235 : string = "view= move || v233()"
    let v236 : string = "children=Box::new(move || v54())"
    let v237 : string = " " + v234 + v1 + ""
    let v238 : string = " " + v235 + v237 + ""
    let v239 : string = " " + v236 + v238 + ""
    let v240 : string = "<" + v59 + " " + v239 + " />"
    let v241 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v240 + " })"
    let v242 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v241 
    let v243 : leptos_prelude_View<leptos_router_NestedRoute> = method469(v242)
    let v244 : string = "v243"
    let v245 : string = v244 + v1 
    let v246 : string = v245 + v1 
    let v247 : leptos_prelude_View<leptos_router_NestedRoute> = method469(v182)
    let v248 : string = "v247"
    let v249 : string = ", "
    let v250 : string = v248 + v249 
    let v251 : string = v250 + v246 
    let v252 : leptos_prelude_View<leptos_router_NestedRoute> = method469(v122)
    let v253 : string = "v252"
    let v254 : string = v253 + v249 
    let v255 : string = v254 + v251 
    let v256 : leptos_prelude_View<leptos_router_NestedRoute> = method469(v62)
    let v257 : string = "v256"
    let v258 : string = v257 + v249 
    let v259 : string = v258 + v255 
    let v260 : string = "vec![" + v259 + "]"
    let v261 : Vec<leptos_prelude_View<leptos_router_NestedRoute>> = Fable.Core.RustInterop.emitRustExpr () v260 
    v261
and method5 () : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) =
    closure4()
and method470 (v0 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>)) : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) =
    v0
and closure3 () () : leptos_dom_Fragment =
    let v0 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) = method5()
    let v1 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) = method470(v0)
    let v2 : string = "leptos.routes / fallback"
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let _v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let _v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _v3 = v13 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _v3 = v16 
    #endif
#else
    let v19 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _v3 = v19 
    #endif
    let v22 : Ref<Str> = _v3 
    let v27 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v28 
    let _v27 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v30 
    let _v27 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v32 
    let _v27 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v40 
    #endif
#else
    let v43 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v43 
    #endif
    let v46 : std_string_String = _v27 
    let v51 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v52 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v46 v51 
    let v53 : string = "fallback=move || v52"
    let v54 : string = "children=leptos::children::ToChildren::to_children(move || v1())"
    let v55 : string = ""
    let v56 : string = " " + v53 + v55 + ""
    let v57 : string = " " + v54 + v56 + ""
    let v58 : string = "leptos_router::components::Routes"
    let v59 : string = "<" + v58 + " " + v57 + " />"
    let v60 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v59 + " })"
    let v61 : leptos_prelude_View<_> = Fable.Core.RustInterop.emitRustExpr () v60 
    let v62 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : leptos_prelude_AnyView_ = method188(v63)
    let v65 : string = "v64"
    let v66 : string = v65 + v55 
    let v67 : string = v66 + v55 
    let v68 : string = "vec![" + v67 + "]"
    let v69 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "leptos::prelude::Fragment::new($0)"
    let v71 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v69 v70 
    v71
and method4 () : (unit -> leptos_dom_Fragment) =
    closure3()
and closure2 () () : Impl<leptos_IntoView> =
    let v0 : string = "app.render ()"
    let v1 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "true; leptos_meta::provide_meta_context()"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = $"leptos::prelude::RwSignal::new($0)"
    let v6 : leptos_prelude_RwSignal<bool> = Fable.Core.RustInterop.emitRustExpr false v5 
    let v7 : string = $"leptos::prelude::RwSignal::new($0)"
    let v8 : leptos_prelude_RwSignal<bool> = Fable.Core.RustInterop.emitRustExpr false v7 
    let v9 : string = ""
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v35 
    let _v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "String::from($0)"
    let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v37 
    let _v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v39 
    let _v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v47 
    #endif
#else
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _v34 = v50 
    #endif
    let v53 : std_string_String = _v34 
    let v58 : string = $"leptos::prelude::RwSignal::new($0)"
    let v59 : leptos_prelude_RwSignal<std_string_String> = Fable.Core.RustInterop.emitRustExpr v53 v58 
    let v60 : string = "i574n.near"
    let v61 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v62 
    let _v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v64 
    let _v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _v61 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _v61 = v71 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v74 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _v61 = v74 
    #endif
#else
    let v77 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _v61 = v77 
    #endif
    let v80 : Ref<Str> = _v61 
    let v85 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v86 : string = "String::from($0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v86 
    let _v85 = v87 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v88 : string = "String::from($0)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v88 
    let _v85 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "String::from($0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v90 
    let _v85 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v92 : std_string_String = v80 |> unbox<std_string_String>
    let _v85 = v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : std_string_String = v80 |> unbox<std_string_String>
    let _v85 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_string_String = v80 |> unbox<std_string_String>
    let _v85 = v98 
    #endif
#else
    let v101 : std_string_String = v80 |> unbox<std_string_String>
    let _v85 = v101 
    #endif
    let v104 : std_string_String = _v85 
    let v109 : (bool * std_string_String) = true, v104 
    let v110 : string = "luckier.near"
    let v111 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v112 : string = "&*$0"
    let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v112 
    let _v111 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v114 : string = "&*$0"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v114 
    let _v111 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v116 : string = "&*$0"
    let v117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v116 
    let _v111 = v117 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _v111 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v121 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _v111 = v121 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _v111 = v124 
    #endif
#else
    let v127 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _v111 = v127 
    #endif
    let v130 : Ref<Str> = _v111 
    let v135 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v136 : string = "String::from($0)"
    let v137 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v136 
    let _v135 = v137 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v138 : string = "String::from($0)"
    let v139 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v138 
    let _v135 = v139 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : string = "String::from($0)"
    let v141 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v140 
    let _v135 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v142 : std_string_String = v130 |> unbox<std_string_String>
    let _v135 = v142 
    #endif
#if FABLE_COMPILER_PYTHON
    let v145 : std_string_String = v130 |> unbox<std_string_String>
    let _v135 = v145 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v148 : std_string_String = v130 |> unbox<std_string_String>
    let _v135 = v148 
    #endif
#else
    let v151 : std_string_String = v130 |> unbox<std_string_String>
    let _v135 = v151 
    #endif
    let v154 : std_string_String = _v135 
    let v159 : (bool * std_string_String) = true, v154 
    let v160 : ((bool * std_string_String) []) = [|v109; v159|]
    let v161 : string = "$0.to_vec()"
    let v162 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr v160 v161 
    let v163 : std_string_String option = None
    let v164 : US1 = US1_0
    let v165 : Heap0 = {l0 = v162; l1 = v163; l2 = 1; l3 = 1; l4 = v164} : Heap0
    let v166 : string = $"leptos::prelude::RwSignal::new($0)"
    let v167 : leptos_prelude_RwSignal<Heap0> = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : Heap1 = {l0 = v6; l1 = v8; l2 = v59; l3 = v167} : Heap1
    let v169 : string = $"leptos::prelude::RwSignal::new($0)"
    let v170 : leptos_prelude_RwSignal<Heap1> = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let v171 : string = "std::collections::HashMap::new()"
    let v172 : std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : string = $"leptos::prelude::RwSignal::new($0)"
    let v174 : leptos_prelude_RwSignal<std_collections_HashMap<std_string_String, leptos_prelude_RwSignal<bool>>> = Fable.Core.RustInterop.emitRustExpr v172 v173 
    let v175 : Heap2 = {l0 = v170; l1 = v174} : Heap2
    let v176 : string = $"true; leptos::context::provide_context::<std::sync::Arc<Heap2>>($0)"
    let v177 : bool = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : (unit -> leptos_dom_Fragment) = method4()
    let v179 : string = "children=Box::new(move || v178())"
    let v180 : string = " " + v179 + v9 + ""
    let v181 : string = "leptos_router::components::Router"
    let v182 : string = "<" + v181 + " " + v180 + " />"
    let v183 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v182 + " })"
    let v184 : leptos_prelude_View<_> = Fable.Core.RustInterop.emitRustExpr () v183 
    let v185 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v186 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v184 v185 
    let v187 : Impl<leptos_IntoView> = v186 |> unbox
    v187
and method3 () : unit =
    let v0 : string = "true; leptos::prelude::mount_to_body(|| $0()); //"
    let v1 : (unit -> Impl<leptos_IntoView>) = closure2()
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v1 v0 
    ()
and closure562 () () : unit =
    method3()
and method471 () : (unit -> unit) =
    closure562()
and method472 (v0 : Box<Dyn<FnUnit>>) : Box<Dyn<FnUnit>> =
    v0
and closure0 () (v0 : (string [])) : int32 =
    let v1 : string = "main / args: " + string v0 + ""
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "let _ = console_log::init_with_level(log::Level::Debug)"
    Fable.Core.RustInterop.emitRustExpr () v4 
    let v5 : string = "console_error_panic_hook::set_once()"
    Fable.Core.RustInterop.emitRustExpr () v5 
    let v6 : string = "leptos::prelude::document().body()"
    let v7 : web_sys_HtmlElement option = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : (web_sys_HtmlElement -> US0) = method0()
    let v9 : US0 option = v7 |> Option.map v8 
    let v20 : US0 = US0_1
    let v21 : US0 = v9 |> Option.defaultValue v20 
    let v25 : string = $"%A{v21}"
    let v28 : string = "main / mount_to_body / body: " + string v25 + ""
    let v29 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr v28 v29 
    match v21 with
    | US0_0(v31) -> (* Some *)
        let v32 : string = method1()
        let v33 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v34 : string = "&*$0"
        let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v34 
        let _v33 = v35 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v36 : string = "&*$0"
        let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v36 
        let _v33 = v37 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v38 : string = "&*$0"
        let v39 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v38 
        let _v33 = v39 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v40 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _v33 = v40 
        #endif
#if FABLE_COMPILER_PYTHON
        let v43 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _v33 = v43 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v46 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _v33 = v46 
        #endif
#else
        let v49 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _v33 = v49 
        #endif
        let v52 : Ref<Str> = _v33 
        let v57 : web_sys_HtmlElement = method2(v31)
        let v58 : string = "v57.set_inner_html($0)"
        Fable.Core.RustInterop.emitRustExpr v52 v58 
        method3()
    | _ ->
        let v59 : (unit -> unit) = method471()
        let v60 : string = "Box::new(move || v59())"
        let v61 : Box<Dyn<FnUnit>> = Fable.Core.RustInterop.emitRustExpr () v60 
        let v62 : Box<Dyn<FnUnit>> = method472(v61)
        let v63 : string = "wasm_bindgen::closure::Closure::wrap(v62)"
        let v64 : wasm_bindgen_closure_Closure<Dyn<FnUnit>> = Fable.Core.RustInterop.emitRustExpr () v63 
        let v65 : string = "wasm_bindgen::closure::Closure::as_ref(&v64)"
        let v66 : Ref<wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr () v65 
        let v67 : string = "wasm_bindgen::JsCast::unchecked_ref(v66)"
        let v68 : Ref<js_sys_Function> = Fable.Core.RustInterop.emitRustExpr () v67 
        let v69 : string = "leptos::prelude::document().add_event_listener_with_callback(\"DOMContentLoaded\", v68).unwrap()"
        Fable.Core.RustInterop.emitRustExpr () v69 
        let v70 : string = "v64.forget()"
        Fable.Core.RustInterop.emitRustExpr () v70 
        ()
    0
let v0 : ((string []) -> int32) = closure0()
let main args = v0 args
()
