#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::HtmlElement")>]
#endif
type web_sys_HtmlElement = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::ArcRwSignal<$0>")>]
#endif
type leptos_prelude_ArcRwSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Error")>]
#endif
type rexie_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Rexie")>]
#endif
type rexie_Rexie = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func0<$0>")>]
#endif
type Func0<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::ArcLocalResource<$0>")>]
#endif
type leptos_prelude_ArcLocalResource<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("*/ $0 /*")>]
#endif
type TypeEmit<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("PartialEqWrapper<$0>")>]
#endif
type PartialEqWrapper<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Func1<$0, $1>")>]
#endif
type Func0<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Transaction")>]
#endif
type rexie_Transaction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rexie::Store")>]
#endif
type rexie_Store = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("wasm_bindgen::JsValue")>]
#endif
type wasm_bindgen_JsValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_wasm_bindgen::Error")>]
#endif
type serde_wasm_bindgen_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Value")>]
#endif
type serde_json_Value = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("borsh::io::Error")>]
#endif
type borsh_io_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::Window")>]
#endif
type web_sys_Window = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("web_sys::Storage")>]
#endif
type web_sys_Storage = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::ArcMemo<$0>")>]
#endif
type leptos_prelude_ArcMemo<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::ReadSignal<$0>")>]
#endif
type leptos_prelude_ReadSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::WriteSignal<$0>")>]
#endif
type leptos_prelude_WriteSignal<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::ArcAction<$0, $1>")>]
#endif
type leptos_prelude_ArcAction<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::location::Location")>]
#endif
type leptos_router_location_Location = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Memo<$0>")>]
#endif
type leptos_prelude_Memo<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::location::Url")>]
#endif
type leptos_router_Url = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Root")>]
#endif
type crate_model_near_nearblocks_Root = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Txn")>]
#endif
type crate_model_near_nearblocks_Txn = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Block")>]
#endif
type crate_model_near_nearblocks_Block = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Action")>]
#endif
type crate_model_near_nearblocks_Action = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::ActionsAgg")>]
#endif
type crate_model_near_nearblocks_ActionsAgg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::Outcomes")>]
#endif
type crate_model_near_nearblocks_Outcomes = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::nearblocks::OutcomesAgg")>]
#endif
type crate_model_near_nearblocks_OutcomesAgg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("futures::future::TryJoinAll<$0>")>]
#endif
type futures_future_TryJoinAll<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::RequestBuilder")>]
#endif
type reqwest_RequestBuilder = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::Error")>]
#endif
type reqwest_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("reqwest_wasm::Response")>]
#endif
type reqwest_Response = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Action<$0, $1>")>]
#endif
type leptos_prelude_Action<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::ArcSignal<$0>")>]
#endif
type leptos_prelude_ArcSignal<'T> = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcInput")>] type crate_model_near_rpc_RpcInput = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcResponse")>] type crate_model_near_rpc_RpcResponse = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::TransactionStatus")>] type crate_model_near_rpc_TransactionStatus = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Receipt")>] type crate_model_near_rpc_Receipt = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ReceiptDetail")>] type crate_model_near_rpc_ReceiptDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ActionDetail")>] type crate_model_near_rpc_ActionDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::TransferDetail")>] type crate_model_near_rpc_TransferDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ReceiptsOutcome")>] type crate_model_near_rpc_ReceiptsOutcome = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::OutcomeDetail")>] type crate_model_near_rpc_OutcomeDetail = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Metadata")>] type crate_model_near_rpc_Metadata = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::GasProfile")>] type crate_model_near_rpc_GasProfile = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::Proof")>] type crate_model_near_rpc_Proof = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::RpcError")>] type crate_model_near_rpc_RpcError = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ErrorCause")>] type crate_model_near_rpc_ErrorCause = class end
[<Fable.Core.Erase; Fable.Core.Emit("crate::model::near::rpc::ErrorCauseInfo")>] type crate_model_near_rpc_ErrorCauseInfo = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::AnyView")>]
#endif
type leptos_prelude_AnyView_ = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::Fragment")>]
#endif
type leptos_dom_Fragment = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("impl $0")>]
#endif
type Impl<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::prelude::View<$0>")>]
#endif
type leptos_prelude_View<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::ev::Event")>]
#endif
type leptos_ev_Event = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("wasm_bindgen::closure::Closure<$0>")>]
#endif
type wasm_bindgen_closure_Closure<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::IntoView")>]
#endif
type leptos_IntoView = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::NestedRoute<_, _, _, _>")>]
#endif
type leptos_router_NestedRoute = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::HtmlElement<$0, _, _>")>]
#endif
type leptos_dom_html_HtmlElement<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Div")>]
#endif
type leptos_html_Div = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::*;
//"
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn($0, $1)")>]
#endif
type ActionFn2<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos_router::NavigateOptions")>]
#endif
type leptos_router_NavigateOptions = class end
#if FABLE_COMPILER
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::ElementChild;
//"
#endif
#if FABLE_COMPILER
Fable.Core.RustInterop.emitRustExpr () ");
use leptos::prelude::ClassAttribute;
//"
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Span")>]
#endif
type leptos_html_Span = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Path")>]
#endif
type leptos_svg_Path = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Svg")>]
#endif
type leptos_svg_Svg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Summary")>]
#endif
type leptos_html_Summary = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Pre")>]
#endif
type leptos_html_Pre = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Circle")>]
#endif
type leptos_svg_Circle = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Button")>]
#endif
type leptos_html_Button = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Details")>]
#endif
type leptos_html_Details = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Input")>]
#endif
type leptos_html_Input = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Animate")>]
#endif
type leptos_svg_Animate = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::svg::Rect")>]
#endif
type leptos_svg_Rect = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Th")>]
#endif
type leptos_html_Th = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Tr")>]
#endif
type leptos_html_Tr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Td")>]
#endif
type leptos_html_Td = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Thead")>]
#endif
type leptos_html_Thead = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Tbody")>]
#endif
type leptos_html_Tbody = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Table")>]
#endif
type leptos_html_Table = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Label")>]
#endif
type leptos_html_Label = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dt")>]
#endif
type leptos_html_Dt = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dd")>]
#endif
type leptos_html_Dd = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Dl")>]
#endif
type leptos_html_Dl = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Main")>]
#endif
type leptos_html_Main = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Option_")>]
#endif
type leptos_html_Option = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Select")>]
#endif
type leptos_html_Select = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::A")>]
#endif
type leptos_html_A = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("leptos::html::Nav")>]
#endif
type leptos_html_Nav = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Fn()")>]
#endif
type FnUnit = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("js_sys::Function")>]
#endif
type js_sys_Function = class end
type [<Struct>] US0 =
    | US0_0 of f0_0 : web_sys_HtmlElement
    | US0_1
and [<Struct>] US1 =
    | US1_0
    | US1_1
and Heap0 = {l0 : Vec<(bool * std_string_String)>; l1 : std_string_String option; l2 : int32; l3 : int32; l4 : US1}
and Heap1 = {l0 : leptos_prelude_ArcRwSignal<bool>; l1 : leptos_prelude_ArcRwSignal<bool>; l2 : leptos_prelude_ArcRwSignal<std_string_String>; l3 : leptos_prelude_ArcRwSignal<Heap0>}
and  Heap2 = {l0 : leptos_prelude_ArcRwSignal<Heap1>; l1 : leptos_prelude_ArcRwSignal<std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>>>}
and [<Struct>] US2 =
    | US2_0 of f0_0 : std_sync_Arc<rexie_Rexie>
    | US2_1
and Heap3 = {l0 : bool; l1 : bool; l2 : std_string_String; l3 : Heap0}
and [<Struct>] US3 =
    | US3_0 of f0_0 : Heap3 option
    | US3_1
and [<Struct>] US4 =
    | US4_0 of f0_0 : wasm_bindgen_JsValue
    | US4_1
and [<Struct>] US5 =
    | US5_0 of f0_0 : serde_json_Value
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : Heap3 option option
    | US6_1 of f1_0 : std_string_String
and [<Struct>] US8 =
    | US8_0 of f0_0 : Heap3
    | US8_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : US8
    | US7_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : web_sys_Storage option
    | US9_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US11 =
    | US11_0 of f0_0 : web_sys_Storage
    | US11_1
and [<Struct>] US10 =
    | US10_0 of f0_0 : US11
    | US10_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US12 =
    | US12_0 of f0_0 : std_string_String option
    | US12_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US14 =
    | US14_0 of f0_0 : std_string_String
    | US14_1
and [<Struct>] US13 =
    | US13_0 of f0_0 : US14
    | US13_1 of f1_0 : wasm_bindgen_JsValue
and [<Struct>] US15 =
    | US15_0 of f0_0 : US14
    | US15_1
and [<Struct>] US16 =
    | US16_0 of f0_0 : leptos_prelude_ArcRwSignal<bool>
    | US16_1
and [<Struct>] US17 =
    | US17_0 of f0_0 : bool
    | US17_1
and [<Struct>] US19 =
    | US19_0
and [<Struct>] US18 =
    | US18_0
    | US18_1 of f1_0 : US19
    | US18_2
    | US18_3
    | US18_4
and [<Struct>] US20 =
    | US20_0 of f0_0 : leptos_router_Url
    | US20_1 of f1_0 : std_string_String
and [<Struct>] US21 =
    | US21_0 of f0_0 : US18
    | US21_1
and [<Struct>] US22 =
    | US22_0 of f0_0 : leptos_dom_Fragment
    | US22_1
and [<Struct>] US23 =
    | US23_0
    | US23_1
and Mut0 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of Vec<struct (string * US23 * string * bool * bool)> * UH0
and UH1 =
    | UH1_0
    | UH1_1 of Vec<string> * UH1
and Heap4 = {l0 : std_string_String}
and [<Struct>] US24 =
    | US24_0 of f0_0 : Vec<Heap4 option>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : Heap4
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : Result<Vec<Heap4 option>, std_string_String>
    | US26_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : Vec<US25>
    | US28_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : US28
    | US27_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : string
    | US31_1
and [<Struct>] US30 =
    | US30_0 of f0_0 : US31
    | US30_1 of f1_0 : std_string_String
and [<Struct>] US29 =
    | US29_0 of f0_0 : US30
    | US29_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : US25
    | US32_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : string option
    | US33_1 of f1_0 : std_string_String
and [<Struct>] US34 =
    | US34_0 of f0_0 : Vec<unit>
    | US34_1 of f1_0 : std_string_String
and [<Struct>] US36 =
    | US36_0 of f0_0 : (US25 [])
    | US36_1 of f1_0 : std_string_String
and [<Struct>] US35 =
    | US35_0 of f0_0 : US36
    | US35_1
and [<Struct>] US37 =
    | US37_0 of f0_0 : Result<Vec<string option>, std_string_String>
    | US37_1
and [<Struct>] US39 =
    | US39_0 of f0_0 : Vec<string option>
    | US39_1 of f1_0 : std_string_String
and [<Struct>] US38 =
    | US38_0 of f0_0 : US39
    | US38_1
and [<Struct>] US41 =
    | US41_0 of f0_0 : Vec<US31>
    | US41_1 of f1_0 : std_string_String
and [<Struct>] US40 =
    | US40_0 of f0_0 : US41
    | US40_1
and [<Struct>] US42 =
    | US42_0 of f0_0 : US31
    | US42_1
and Heap5 = {l0 : std_string_String; l1 : std_string_String; l2 : std_string_String; l3 : std_string_String; l4 : std_string_String; l5 : std_string_String; l6 : uint32; l7 : (struct (std_string_String * std_string_String option) []); l8 : float; l9 : bool; l10 : float; l11 : (std_string_String [])}
and [<Struct>] US43 =
    | US43_0 of f0_0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option
    | US43_1 of f1_0 : std_string_String
and [<Struct>] US45 =
    | US45_0 of f0_0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])
    | US45_1
and [<Struct>] US44 =
    | US44_0 of f0_0 : US45
    | US44_1 of f1_0 : std_string_String
and [<Struct>] US47 =
    | US47_0 of f0_0 : (struct (string * unativeint * Heap5) [])
    | US47_1
and [<Struct>] US46 =
    | US46_0 of f0_0 : US47
    | US46_1 of f1_0 : std_string_String
and [<Struct>] US49 =
    | US49_0 of f0_0 : Vec<struct (string * unativeint * Heap5)>
    | US49_1
and [<Struct>] US48 =
    | US48_0 of f0_0 : US49
    | US48_1 of f1_0 : std_string_String
and [<Struct>] US50 =
    | US50_0 of f0_0 : Vec<struct (string * unativeint * Heap5)> option
    | US50_1 of f1_0 : std_string_String
and UH2 =
    | UH2_0
    | UH2_1 of Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> * UH2
and Mut1 = {mutable l0 : int32; mutable l1 : UH2}
and [<Struct>] US51 =
    | US51_0 of f0_0 : Vec<struct (string * unativeint * Heap5)>
    | US51_1 of f1_0 : std_string_String
and [<Struct>] US52 =
    | US52_0 of f0_0 : (struct (string * unativeint * Heap5) [])
    | US52_1 of f1_0 : std_string_String
and [<Struct>] US53 =
    | US53_0 of f0_0 : (struct (string * unativeint * Heap5) []) option
    | US53_1 of f1_0 : std_string_String
and [<Struct>] US55 =
    | US55_0 of f0_0 : (struct (string * US23 * string * bool * bool) [])
    | US55_1
and [<Struct>] US54 =
    | US54_0 of f0_0 : US55
    | US54_1 of f1_0 : std_string_String
and [<Struct>] US56 =
    | US56_0 of f0_0 : (struct (string * US23 * string * bool * bool) []) option
    | US56_1 of f1_0 : std_string_String
and Heap6 = {l0 : int32}
and [<Struct>] US57 =
    | US57_0 of f0_0 : US14
    | US57_1 of f1_0 : std_string_String
and [<Struct>] US59 =
    | US59_0 of f0_0 : std_string_String * f0_1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * f0_2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * f0_3 : std_string_String option
    | US59_1
and [<Struct>] US58 =
    | US58_0 of f0_0 : US59
    | US58_1 of f1_0 : std_string_String
and [<Struct>] US60 =
    | US60_0 of f0_0 : crate_model_near_rpc_RpcResponse
    | US60_1 of f1_0 : std_string_String
and [<Struct>] US61 =
    | US61_0 of f0_0 : std_string_String * f0_1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * f0_2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * f0_3 : std_string_String option
    | US61_1 of f1_0 : std_string_String
and [<Struct>] US62 =
    | US62_0 of f0_0 : US58
    | US62_1
and [<Struct>] US63 =
    | US63_0 of f0_0 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option
    | US63_1 of f1_0 : std_string_String
and [<Struct>] US64 =
    | US64_0 of f0_0 : std_string_String * f0_1 : std_string_String * f0_2 : struct (std_string_String option * std_string_String option) option * f0_3 : int32 * f0_4 : std_string_String * f0_5 : std_string_String
    | US64_1
and [<Struct>] US65 =
    | US65_0 of f0_0 : leptos_prelude_ArcMemo<US31>
    | US65_1
and [<Struct>] US66 =
    | US66_0 of f0_0 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>
    | US66_1
and [<Struct>] US67 =
    | US67_0 of f0_0 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>
    | US67_1
and [<Struct>] US68 =
    | US68_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US68_1
and [<Struct>] US69 =
    | US69_0 of f0_0 : string
    | US69_1 of f1_0 : string
and Mut2 = {mutable l0 : int32; mutable l1 : US31}
and [<Struct>] US70 =
    | US70_0 of f0_0 : std_string_String
    | US70_1 of f1_0 : std_string_String
let rec closure1 () (v0 : web_sys_HtmlElement) : US0 =
    US0_0(v0)
and method0 () : (web_sys_HtmlElement -> US0) =
    closure1()
and method1 () : string =
    let v0 : string = ""
    v0
and method2 (v0 : web_sys_HtmlElement) : web_sys_HtmlElement =
    v0
and closure6 () (v0 : rexie_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method6 () : (rexie_Error -> std_string_String) =
    closure6()
and closure7 () (v0 : rexie_Rexie) : rexie_Rexie =
    v0
and method7 () : (rexie_Rexie -> rexie_Rexie) =
    closure7()
and method8 (v0 : int64, v1 : string) : string =
    let v2 : int64 = System.Convert.ToInt64 v1.Length
    let v3 : bool = v2 <= v0
    if v3 then
        v1
    else
        let v4 : (int64 -> float) = float
        let v5 : float = v4 v0
        let v8 : float = v5 / 2.0
        let v9 : (float -> float) = ceil
        let v10 : float = v9 v8
        let v11 : (float -> int64) = int64
        let v12 : int64 = v11 v10
        let v15 : (float -> float) = floor
        let v16 : float = v15 v8
        let v17 : (float -> int64) = int64
        let v18 : int64 = v17 v16
        let v21 : int64 = v12 - 1L
        let v22 : string = v1.[int 0L..int v21]
        let v26 : int64 = v2 - v18
        let v27 : int64 = v2 - 1L
        let v28 : string = v1.[int v26..int v27]
        let v32 : string = "..."
        let v33 : (string []) = [|v22; v32; v28|]
        let v34 : string seq = v33 |> Seq.ofArray
        let v37 : (string -> (string seq -> string)) = String.concat
        let v38 : string = ""
        let v39 : (string seq -> string) = v37 v38
        v39 v34
and closure8 () () : unit =
    let v0 : string = "} //"
    Fable.Core.RustInterop.emitRustExpr () v0 
    let v1 : string = "#[derive( //"
    Fable.Core.RustInterop.emitRustExpr () v1 
    let v2 : string = "  Debug, //"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "  Clone, //"
    Fable.Core.RustInterop.emitRustExpr () v3 
    let v4 : string = ")] //"
    Fable.Core.RustInterop.emitRustExpr () v4 
    let v5 : string = "pub struct PartialEqWrapper<T>(T); /*"
    Fable.Core.RustInterop.emitRustExpr () v5 
    let v6 : string = "*/ impl PartialEq for PartialEqWrapper< /*"
    Fable.Core.RustInterop.emitRustExpr () v6 
    let v7 : TypeEmit<std_sync_Arc<rexie_Rexie>> = null |> unbox<TypeEmit<std_sync_Arc<rexie_Rexie>>>
    let v10 : string = "*/ > { //"
    Fable.Core.RustInterop.emitRustExpr () v10 
    let v11 : string = "fn eq(&self, other: &Self) -> bool { //"
    Fable.Core.RustInterop.emitRustExpr () v11 
    let v12 : string = $"self"
    let v13 : Ref<PartialEqWrapper<std_sync_Arc<rexie_Rexie>>> = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = $"other"
    let v15 : Ref<PartialEqWrapper<std_sync_Arc<rexie_Rexie>>> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "&$0.0"
    let v17 : Ref<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v15 v16 
    let v18 : string = "&$0.0"
    let v19 : Ref<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v13 v18 
    let v20 : string = "std::sync::Arc::ptr_eq($0, $1)"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr struct (v19, v17) v20 
    let v22 : string = $"v21 //"
    Fable.Core.RustInterop.emitRustExpr () v22 
    let v23 : string = "} } } fn _main() { { { //"
    Fable.Core.RustInterop.emitRustExpr () v23 
    ()
and closure9 () (v0 : std_sync_Arc<rexie_Rexie>) : US2 =
    US2_0(v0)
and method9 () : (std_sync_Arc<rexie_Rexie> -> US2) =
    closure9()
and method10 (v0 : Func0<string, std_string_String>) : Func0<string, std_string_String> =
    v0
and closure10 (v0 : Func0<string, std_string_String>) (v1 : string) : std_string_String =
    let v2 : Func0<string, std_string_String> = method10(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method11 (v0 : std_sync_Arc<rexie_Rexie>) : std_sync_Arc<rexie_Rexie> =
    v0
and closure11 () (v0 : rexie_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method12 () : (rexie_Error -> std_string_String) =
    closure11()
and method13 () : string =
    let v0 : string = "store"
    v0
and closure12 () (v0 : rexie_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method14 () : (rexie_Error -> std_string_String) =
    closure12()
and method15 () : string =
    let v0 : string = "core-state-heap"
    v0
and closure13 () (v0 : rexie_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method16 () : (rexie_Error -> std_string_String) =
    closure13()
and closure14 () (v0 : wasm_bindgen_JsValue) : US4 =
    US4_0(v0)
and method17 () : (wasm_bindgen_JsValue -> US4) =
    closure14()
and method18 (v0 : wasm_bindgen_JsValue) : wasm_bindgen_JsValue =
    v0
and closure15 () (v0 : serde_wasm_bindgen_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method19 () : (serde_wasm_bindgen_Error -> std_string_String) =
    closure15()
and closure16 () (v0 : serde_json_Value) : US5 =
    US5_0(v0)
and method20 () : (serde_json_Value -> US5) =
    closure16()
and method21 (v0 : serde_json_Value) : serde_json_Value =
    v0
and closure17 () (v0 : serde_json_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method22 () : (serde_json_Error -> std_string_String) =
    closure17()
and closure18 () (v0 : borsh_io_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method23 () : (borsh_io_Error -> std_string_String) =
    closure18()
and closure19 () (v0 : Heap3 option option) : US6 =
    US6_0(v0)
and method24 () : (Heap3 option option -> US6) =
    closure19()
and closure20 () (v0 : std_string_String) : US6 =
    US6_1(v0)
and method25 () : (std_string_String -> US6) =
    closure20()
and closure21 () (v0 : Heap3 option) : US3 =
    US3_0(v0)
and method26 () : (Heap3 option -> US3) =
    closure21()
and closure22 () (v0 : Heap3) : US8 =
    US8_0(v0)
and method27 () : (Heap3 -> US8) =
    closure22()
and method28 () : web_sys_Window =
    let v0 : string = "leptos::prelude::window()"
    let v1 : web_sys_Window = Fable.Core.RustInterop.emitRustExpr () v0 
    v1
and method29 (v0 : web_sys_Window) : Result<web_sys_Storage option, wasm_bindgen_JsValue> =
    let v1 : string = "$0.local_storage()"
    let v2 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and closure23 () (v0 : web_sys_Storage option) : US9 =
    US9_0(v0)
and method30 () : (web_sys_Storage option -> US9) =
    closure23()
and closure24 () (v0 : wasm_bindgen_JsValue) : US9 =
    US9_1(v0)
and method31 () : (wasm_bindgen_JsValue -> US9) =
    closure24()
and closure25 () (v0 : web_sys_Storage) : US11 =
    US11_0(v0)
and method32 () : (web_sys_Storage -> US11) =
    closure25()
and closure26 () (v0 : US8) : US7 =
    US7_0(v0)
and method33 () : (US8 -> US7) =
    closure26()
and method34 (v0 : web_sys_Storage) : web_sys_Storage =
    v0
and method35 () : string =
    let v0 : string = "core-state-heap"
    v0
and closure27 () (v0 : std_string_String option) : US12 =
    US12_0(v0)
and method36 () : (std_string_String option -> US12) =
    closure27()
and closure28 () (v0 : wasm_bindgen_JsValue) : US12 =
    US12_1(v0)
and method37 () : (wasm_bindgen_JsValue -> US12) =
    closure28()
and method38 (v0 : std_string_String option) : std_string_String option =
    v0
and closure29 () (v0 : std_string_String) : US14 =
    US14_0(v0)
and method39 () : (std_string_String -> US14) =
    closure29()
and method41 (v0 : string) : string =
    v0
and closure31 () (v0 : serde_json_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method42 () : (serde_json_Error -> std_string_String) =
    closure31()
and closure30 () (v0 : std_string_String) : US8 =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = method41(v2)
    (* run_target_args'
    let v4 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v5 
    let _run_target_args'_v4 = v6 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v7 
    let _run_target_args'_v4 = v8 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : string = "&*$0"
    let v10 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3 v9 
    let _run_target_args'_v4 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _run_target_args'_v4 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _run_target_args'_v4 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _run_target_args'_v4 = v17 
    #endif
#else
    let v20 : Ref<Str> = v3 |> unbox<Ref<Str>>
    let _run_target_args'_v4 = v20 
    #endif
    let v23 : Ref<Str> = _run_target_args'_v4 
    let v28 : string = "serde_json::from_str(&$0)"
    let v29 : Result<Heap3, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v23 v28 
    let v30 : (serde_json_Error -> std_string_String) = method42()
    (* run_target_args'
    let v31 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "$0.map_err(|x| $1(x))"
    let v33 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v32 
    let _run_target_args'_v31 = v33 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v34 : string = "$0.map_err(|x| $1(x))"
    let v35 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v34 
    let _run_target_args'_v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : string = "$0.map_err(|x| $1(x))"
    let v37 : Result<Heap3, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v29, v30) v36 
    let _run_target_args'_v31 = v37 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _run_target_args'_v31 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _run_target_args'_v31 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _run_target_args'_v31 = v40 
    #endif
#else
    let v41 : Result<Heap3, std_string_String> = match v29 with Ok x -> Ok x | Error x -> Error (v30 x)
    let _run_target_args'_v31 = v41 
    #endif
    let v42 : Result<Heap3, std_string_String> = _run_target_args'_v31 
    (* run_target_args'
    let v45 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v46 : string = "$0.ok()"
    let v47 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v46 
    let _run_target_args'_v45 = v47 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v48 : string = "$0.ok()"
    let v49 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v48 
    let _run_target_args'_v45 = v49 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v50 : string = "$0.ok()"
    let v51 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v42 v50 
    let _run_target_args'_v45 = v51 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v52 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v45 = v52 
    #endif
#if FABLE_COMPILER_PYTHON
    let v53 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v45 = v53 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v45 = v54 
    #endif
#else
    let v55 : Heap3 option = match v42 with Ok x -> Some x | Error _ -> None
    let _run_target_args'_v45 = v55 
    #endif
    let v56 : Heap3 option = _run_target_args'_v45 
    let v59 : (Heap3 -> US8) = method27()
    let v60 : US8 option = v56 |> Option.map v59 
    let v71 : US8 = US8_1
    let v72 : US8 = v60 |> Option.defaultValue v71 
    v72
and method40 () : (std_string_String -> US8) =
    closure30()
and closure32 (v0 : Heap3) (v1 : bool) : bool =
    let v2 : string = "state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : bool = v0.l0
    v5
and closure33 (v0 : Heap3) (v1 : bool) : bool =
    let v2 : string = "state_core.use_core_database (8) / effect core_state_heap / debug signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : bool = v0.l1
    v5
and closure34 (v0 : Heap3) (v1 : std_string_String) : std_string_String =
    let v2 : string = "state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : std_string_String = v0.l2
    v5
and closure35 (v0 : Heap3) (v1 : Heap0) : Heap0 =
    let v2 : string = "state_core.use_core_database (10) / effect core_state_heap / data signal_update"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : Heap0 = v0.l3
    v5
and closure36 (v0 : Heap2) () : std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>> =
    let v1 : string = "state_core.use_core_database (11) / loading new_arc_memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : leptos_prelude_ArcRwSignal<std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>>> = v0.l1
    let v5 : string = "Box::pin($0)"
    let v6 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>>>>> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v8 : std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method43 () : string =
    let v0 : string = "core-state-heap"
    v0
and method44 (v0 : Func0<Heap3, std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>>) : Func0<Heap3, std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>> =
    v0
and closure37 (v0 : Func0<Heap3, std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>>) (v1 : Heap3) : std_pin_Pin<Box<Dyn<std_future_Future<unit>>>> =
    let v2 : Func0<Heap3, std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>> = method44(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : std_pin_Pin<Box<Dyn<std_future_Future<unit>>>> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method45 (v0 : std_string_String) : std_string_String =
    v0
and closure38 () (v0 : leptos_prelude_ArcRwSignal<bool>) : US16 =
    US16_0(v0)
and method46 () : (leptos_prelude_ArcRwSignal<bool> -> US16) =
    closure38()
and closure39 () (v0 : bool) : bool =
    let v1 : string = "state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    true
and method47 (v0 : web_sys_Storage) : web_sys_Storage =
    v0
and method48 () : string =
    let v0 : string = "core-state-heap"
    v0
and method49 (v0 : Heap3) : Heap3 =
    v0
and closure40 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v2 : string = "Box::pin($0)"
    let v3 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_ArcRwSignal<bool> = v5.l0
    let v7 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method50 (v0 : Heap2) : (unit -> bool) =
    closure40(v0)
and closure41 (v0 : leptos_router_location_Location) () : string =
    let v1 : string = "$0.pathname"
    let v2 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"leptos::prelude::Memo::get(&$0)"
    let v4 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "fable_library_rust::String_::fromString($0)"
    let v6 : string = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.search"
    let v8 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : string = $"leptos::prelude::Memo::get(&$0)"
    let v10 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "fable_library_rust::String_::fromString($0)"
    let v12 : string = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : bool = v12 = ""
    let v16 : string =
        if v13 then
            let v14 : string = ""
            v14
        else
            let v15 : string = $"?{v12}"
            v15
    let v17 : string = v6 + v16 
    v17
and method51 (v0 : std_string_String) : std_string_String =
    v0
and method52 (v0 : std_string_String) : std_string_String =
    v0
and closure42 () (v0 : leptos_router_Url) : US20 =
    US20_0(v0)
and method53 () : (leptos_router_Url -> US20) =
    closure42()
and closure43 () (v0 : std_string_String) : US20 =
    US20_1(v0)
and method54 () : (std_string_String -> US20) =
    closure43()
and closure45 () struct (v0 : bool, v1 : std_string_String) : bool =
    v0
and method55 () : (struct (bool * std_string_String) -> bool) =
    closure45()
and method56 (v0 : Vec<struct (bool * std_string_String)>) : Vec<struct (bool * std_string_String)> =
    v0
and closure44 (v0 : Heap2) () : Vec<string> =
    let v1 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v2 : string = "Box::pin($0)"
    let v3 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_ArcRwSignal<Heap0> = v5.l3
    let v7 : string = "Box::pin($0)"
    let v8 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap0>>> = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v10 : Heap0 = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : Vec<(bool * std_string_String)> = v10.l0
    let v12 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "x"
    let v15 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr () v14 
    let (a, b) = v15 
    let v16 : bool = a
    let v17 : std_string_String = b
    let v22 : string = "true; $0 }).collect::<Vec<_>>()"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr struct (v16, v17) v22 
    let v24 : string = "_vec_map"
    let v25 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : (struct (bool * std_string_String) -> bool) = method55()
    let v27 : Vec<struct (bool * std_string_String)> = method56(v25)
    let v28 : string = "v27.into_iter().filter(|x| v26(x.clone().clone())).collect::<Vec<_>>()"
    let v29 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v31 : bool = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : string = "x"
    let struct (v33 : bool, v34 : std_string_String) = Fable.Core.RustInterop.emitRustExpr () v32 
    let v35 : string = "true; $0 }).collect::<Vec<_>>()"
    let v36 : bool = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "_vec_map"
    let v38 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "x"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "fable_library_rust::String_::fromString($0)"
    let v44 : string = Fable.Core.RustInterop.emitRustExpr v42 v43 
    let v45 : string = "true; $0 }).collect::<Vec<_>>()"
    let v46 : bool = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : string = "_vec_map"
    let v48 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v47 
    let v49 : string = $"%A{v48}"
    let v52 : string = "use_transactions.render (2) / accounts new_arc_memo / result: " + string v49 + ""
    let v53 : int64 = 200L
    let v54 : string = method8(v53, v52)
    let v55 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
    v48
and method57 (v0 : Func0<string, struct (string * US23 * string * bool * bool)>) : Func0<string, struct (string * US23 * string * bool * bool)> =
    v0
and closure47 (v0 : Func0<string, struct (string * US23 * string * bool * bool)>) (v1 : string) : struct (string * US23 * string * bool * bool) =
    let v2 : Func0<string, struct (string * US23 * string * bool * bool)> = method57(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : string, v6 : US23, v7 : string, v8 : bool, v9 : bool) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7, v8, v9)
and closure46 (v0 : leptos_prelude_ArcMemo<Vec<string>>) () : (struct (string * US23 * string * bool * bool) []) =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : unit = ()
    let v4 : string = $"true; let _func1_from_v3 = Func1::from(move |value| {{ //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = $"value"
    let v7 : string = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "https://api3.nearblocks.io/v1/account/" + v7 + ""
    let v9 : US23 = US23_0
    let v10 : string = ""
    let func1_from_result = struct (v8, v9, v10, false, true) //
    let v11 : _ = func1_from_result
    let v12 : string = $"true; $0 /*"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = $"*/ }}); //"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = $"_func1_from_v3"
    let v17 : Func0<string, struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v19 : (string -> struct (string * US23 * string * bool * bool)) = closure47(v17)
    let v20 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v19) v18 
    let v21 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v22 : (struct (string * US23 * string * bool * bool) []) = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = $"%A{v22}"
    let v26 : string = "use_transactions.render (3) / accounts_metadata new_arc_memo / result: " + string v23 + ""
    let v27 : int64 = 200L
    let v28 : string = method8(v27, v26)
    let v29 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr v28 v29 
    v22
and method59 (v0 : int32, v1 : Mut0) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method58 (v0 : Heap0) : Vec<int32> =
    let v1 : int32 = v0.l3
    let v2 : (int32 []) = Array.zeroCreate<int32> (v1)
    let v3 : Mut0 = {l0 = 0} : Mut0
    while method59(v1, v3) do
        let v5 : int32 = v3.l0
        v2.[int v5] <- v5
        let v6 : int32 = v5 + 1
        v3.l0 <- v6
        ()
    let v7 : string = "$0.to_vec()"
    let v8 : Vec<int32> = Fable.Core.RustInterop.emitRustExpr v2 v7 
    v8
and method60 (v0 : Func0<int32, struct (string * US23 * string * bool * bool)>) : Func0<int32, struct (string * US23 * string * bool * bool)> =
    v0
and closure49 (v0 : Func0<int32, struct (string * US23 * string * bool * bool)>) (v1 : int32) : struct (string * US23 * string * bool * bool) =
    let v2 : Func0<int32, struct (string * US23 * string * bool * bool)> = method60(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : string, v6 : US23, v7 : string, v8 : bool, v9 : bool) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7, v8, v9)
and method61 (v0 : Func0<string, struct (string * Vec<struct (string * US23 * string * bool * bool)>)>) : Func0<string, struct (string * Vec<struct (string * US23 * string * bool * bool)>)> =
    v0
and closure50 (v0 : Func0<string, struct (string * Vec<struct (string * US23 * string * bool * bool)>)>) (v1 : string) : struct (string * Vec<struct (string * US23 * string * bool * bool)>) =
    let v2 : Func0<string, struct (string * Vec<struct (string * US23 * string * bool * bool)>)> = method61(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : string, v6 : Vec<struct (string * US23 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6)
and closure48 (v0 : Heap2, v1 : leptos_prelude_ArcMemo<Vec<string>>) () : Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)> =
    let v2 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v3 : string = "Box::pin($0)"
    let v4 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v6 : Heap1 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : leptos_prelude_ArcRwSignal<Heap0> = v6.l3
    let v8 : string = "Box::pin($0)"
    let v9 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap0>>> = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v11 : Heap0 = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v13 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : unit = ()
    let v15 : string = $"true; let _func1_from_v14 = Func1::from(move |value| {{ //"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = $"value"
    let v18 : string = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : Vec<int32> = method58(v11)
    let v20 : unit = ()
    let v21 : string = $"true; let _func1_from_v20 = Func1::from(move |value| {{ //"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = $"value"
    let v24 : int32 = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : int32 = v24 + 1
    let v26 : string = "https://api3.nearblocks.io/v1/account/" + v18 + "/txns?&order=desc&page=" + string v25 + "&per_page=" + string 25 + ""
    let v27 : US23 = US23_0
    let v28 : string = ""
    let func1_from_result = struct (v26, v27, v28, false, true) //
    let v29 : _ = func1_from_result
    let v30 : string = $"true; $0 /*"
    let v31 : bool = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : string = $"*/ }}); //"
    let v33 : bool = Fable.Core.RustInterop.emitRustExpr () v32 
    let v34 : string = $"_func1_from_v20"
    let v35 : Func0<int32, struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v37 : (int32 -> struct (string * US23 * string * bool * bool)) = closure49(v35)
    let v38 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr struct (v19, v37) v36 
    let func1_from_result = struct (v18, v38) //
    let v39 : _ = func1_from_result
    let v40 : string = $"true; $0 /*"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = $"*/ }}); //"
    let v43 : bool = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = $"_func1_from_v14"
    let v45 : Func0<string, struct (string * Vec<struct (string * US23 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr () v44 
    let v46 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v47 : (string -> struct (string * Vec<struct (string * US23 * string * bool * bool)>)) = closure50(v45)
    let v48 : Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr struct (v13, v47) v46 
    let v49 : string = $"%A{v48}"
    let v52 : string = "use_transactions.render (4) / accounts_requests new_arc_memo / result: " + string v49 + ""
    let v53 : int64 = 200L
    let v54 : string = method8(v53, v52)
    let v55 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
    v48
and method62 (v0 : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<struct (string * US23 * string * bool * bool)>>) : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<struct (string * US23 * string * bool * bool)>> =
    v0
and closure52 (v0 : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<struct (string * US23 * string * bool * bool)>>) struct (v1 : string, v2 : Vec<struct (string * US23 * string * bool * bool)>) : Vec<struct (string * US23 * string * bool * bool)> =
    let v3 : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<struct (string * US23 * string * bool * bool)>> = method62(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and closure54 (v0 : Vec<struct (string * US23 * string * bool * bool)>) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure53 () (v0 : Vec<struct (string * US23 * string * bool * bool)>) : (UH0 -> UH0) =
    closure54(v0)
and method63 () : (Vec<struct (string * US23 * string * bool * bool)> -> (UH0 -> UH0)) =
    closure53()
and method65 (v0 : Vec<struct (string * US23 * string * bool * bool)>) : Vec<struct (string * US23 * string * bool * bool)> =
    v0
and method66 (v0 : Vec<struct (string * US23 * string * bool * bool)>) : Vec<struct (string * US23 * string * bool * bool)> =
    v0
and method64 (v0 : UH0, v1 : Vec<struct (string * US23 * string * bool * bool)>) : Vec<struct (string * US23 * string * bool * bool)> =
    match v0 with
    | UH0_1(v2, v3) -> (* Cons *)
        let v4 : Vec<struct (string * US23 * string * bool * bool)> = method65(v2)
        let v5 : Vec<struct (string * US23 * string * bool * bool)> = method66(v1)
        let v6 : string = "true; let mut v5 = v5"
        let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
        let v8 : string = "true; v5.extend(v4)"
        let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
        let v10 : string = "v5"
        let v11 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr () v10 
        method64(v3, v11)
    | UH0_0 -> (* Nil *)
        v1
and closure51 (v0 : leptos_prelude_ArcMemo<Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)>>) () : Vec<struct (string * US23 * string * bool * bool)> =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : unit = ()
    let v4 : string = $"true; let _func1_from_v3 = Func1::from(move |value| {{ //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = $"value"
    let struct (v7 : string, v8 : Vec<struct (string * US23 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr () v6 
    let func1_from_result = v8 //
    let v9 : _ = func1_from_result
    let v10 : string = $"true; $0 /*"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"*/ }}); //"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = $"_func1_from_v3"
    let v15 : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<struct (string * US23 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v17 : (struct (string * Vec<struct (string * US23 * string * bool * bool)>) -> Vec<struct (string * US23 * string * bool * bool)>) = closure52(v15)
    let v18 : Vec<Vec<struct (string * US23 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr struct (v2, v17) v16 
    let v19 : (struct (string * US23 * string * bool * bool) []) = [||]
    let v20 : string = "$0.to_vec()"
    let v21 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v23 : (Vec<struct (string * US23 * string * bool * bool)> []) = Fable.Core.RustInterop.emitRustExpr v18 v22 
    let v24 : Vec<struct (string * US23 * string * bool * bool)> list = v23 |> Array.toList
    let v27 : ((Vec<struct (string * US23 * string * bool * bool)> -> (UH0 -> UH0)) -> (Vec<struct (string * US23 * string * bool * bool)> list -> (UH0 -> UH0))) = List.foldBack
    let v28 : (Vec<struct (string * US23 * string * bool * bool)> -> (UH0 -> UH0)) = method63()
    let v29 : (Vec<struct (string * US23 * string * bool * bool)> list -> (UH0 -> UH0)) = v27 v28
    let v30 : (UH0 -> UH0) = v29 v24
    let v31 : UH0 = UH0_0
    let v32 : UH0 = v30 v31
    let v54 : Vec<struct (string * US23 * string * bool * bool)> = method64(v32, v21)
    let v55 : string = $"%A{v54}"
    let v58 : string = "use_transactions.render (5) / txns_requests new_arc_memo / result: " + string v55 + ""
    let v59 : int64 = 200L
    let v60 : string = method8(v59, v58)
    let v61 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v62 : bool = Fable.Core.RustInterop.emitRustExpr v60 v61 
    v54
and method67 (v0 : Func0<struct (string * US23 * string * bool * bool), string>) : Func0<struct (string * US23 * string * bool * bool), string> =
    v0
and closure56 (v0 : Func0<struct (string * US23 * string * bool * bool), string>) struct (v1 : string, v2 : US23, v3 : string, v4 : bool, v5 : bool) : string =
    let v6 : Func0<struct (string * US23 * string * bool * bool), string> = method67(v0)
    let func1_move_x = struct (v1, v2, v3, v4, v5) //
    let v7 : _ = func1_move_x
    let v8 : string = "(move |x| v6(x))($0)"
    let v9 : string = Fable.Core.RustInterop.emitRustExpr v7 v8 
    v9
and method68 (v0 : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<string>>) : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<string>> =
    v0
and closure57 (v0 : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<string>>) struct (v1 : string, v2 : Vec<struct (string * US23 * string * bool * bool)>) : Vec<string> =
    let v3 : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<string>> = method68(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and closure59 (v0 : Vec<string>) (v1 : UH1) : UH1 =
    UH1_1(v0, v1)
and closure58 () (v0 : Vec<string>) : (UH1 -> UH1) =
    closure59(v0)
and method69 () : (Vec<string> -> (UH1 -> UH1)) =
    closure58()
and method71 (v0 : Vec<string>) : Vec<string> =
    v0
and method72 (v0 : Vec<string>) : Vec<string> =
    v0
and method70 (v0 : UH1, v1 : Vec<string>) : Vec<string> =
    match v0 with
    | UH1_1(v2, v3) -> (* Cons *)
        let v4 : Vec<string> = method71(v2)
        let v5 : Vec<string> = method72(v1)
        let v6 : string = "true; let mut v5 = v5"
        let v7 : bool = Fable.Core.RustInterop.emitRustExpr () v6 
        let v8 : string = "true; v5.extend(v4)"
        let v9 : bool = Fable.Core.RustInterop.emitRustExpr () v8 
        let v10 : string = "v5"
        let v11 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v10 
        method70(v3, v11)
    | UH1_0 -> (* Nil *)
        v1
and closure55 (v0 : leptos_prelude_ArcMemo<Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)>>) () : (string []) =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : unit = ()
    let v4 : string = $"true; let _func1_from_v3 = Func1::from(move |value| {{ //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = $"value"
    let struct (v7 : string, v8 : Vec<struct (string * US23 * string * bool * bool)>) = Fable.Core.RustInterop.emitRustExpr () v6 
    let v9 : unit = ()
    let v10 : string = $"true; let _func1_from_v9 = Func1::from(move |value| {{ //"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr () v10 
    let v12 : string = $"value"
    let struct (v13 : string, v14 : US23, v15 : string, v16 : bool, v17 : bool) = Fable.Core.RustInterop.emitRustExpr () v12 
    let func1_from_result = v7 //
    let v18 : _ = func1_from_result
    let v19 : string = $"true; $0 /*"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = $"*/ }}); //"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = $"_func1_from_v9"
    let v24 : Func0<struct (string * US23 * string * bool * bool), string> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v26 : (struct (string * US23 * string * bool * bool) -> string) = closure56(v24)
    let v27 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v8, v26) v25 
    let func1_from_result = v27 //
    let v28 : _ = func1_from_result
    let v29 : string = $"true; $0 /*"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr v28 v29 
    let v31 : string = $"*/ }}); //"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = $"_func1_from_v3"
    let v34 : Func0<struct (string * Vec<struct (string * US23 * string * bool * bool)>), Vec<string>> = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v36 : (struct (string * Vec<struct (string * US23 * string * bool * bool)>) -> Vec<string>) = closure57(v34)
    let v37 : Vec<Vec<string>> = Fable.Core.RustInterop.emitRustExpr struct (v2, v36) v35 
    let v38 : (string []) = [||]
    let v39 : string = "$0.to_vec()"
    let v40 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v42 : (Vec<string> []) = Fable.Core.RustInterop.emitRustExpr v37 v41 
    let v43 : Vec<string> list = v42 |> Array.toList
    let v46 : ((Vec<string> -> (UH1 -> UH1)) -> (Vec<string> list -> (UH1 -> UH1))) = List.foldBack
    let v47 : (Vec<string> -> (UH1 -> UH1)) = method69()
    let v48 : (Vec<string> list -> (UH1 -> UH1)) = v46 v47
    let v49 : (UH1 -> UH1) = v48 v43
    let v50 : UH1 = UH1_0
    let v51 : UH1 = v49 v50
    let v73 : Vec<string> = method70(v51, v40)
    let v74 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v75 : (string []) = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = $"%A{v75}"
    let v79 : string = "use_transactions.render (6) / urls_accounts new_arc_memo / result: " + string v76 + ""
    let v80 : int64 = 200L
    let v81 : string = method8(v80, v79)
    let v82 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr v81 v82 
    v75
and method73 (v0 : Func0<crate_model_near_nearblocks_Action, struct (std_string_String * std_string_String option)>) : Func0<crate_model_near_nearblocks_Action, struct (std_string_String * std_string_String option)> =
    v0
and closure61 (v0 : Func0<crate_model_near_nearblocks_Action, struct (std_string_String * std_string_String option)>) (v1 : crate_model_near_nearblocks_Action) : struct (std_string_String * std_string_String option) =
    let v2 : Func0<crate_model_near_nearblocks_Action, struct (std_string_String * std_string_String option)> = method73(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : std_string_String, v6 : std_string_String option) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6)
and method74 (v0 : (struct (std_string_String * std_string_String option) [])) : (struct (std_string_String * std_string_String option) []) =
    v0
and closure62 () (v0 : Vec<std_string_String>) : (std_string_String []) =
    let v1 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v2 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and method75 () : (Vec<std_string_String> -> (std_string_String [])) =
    closure62()
and method76 (v0 : Func0<crate_model_near_nearblocks_Txn, struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))>) : Func0<crate_model_near_nearblocks_Txn, struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> =
    v0
and closure63 (v0 : Func0<crate_model_near_nearblocks_Txn, struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))>) (v1 : crate_model_near_nearblocks_Txn) : struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) =
    let v2 : Func0<crate_model_near_nearblocks_Txn, struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = method76(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : std_string_String, v9 : std_string_String, v10 : std_string_String, v11 : uint32, v12 : (struct (std_string_String * std_string_String option) []), v13 : float, v14 : bool, v15 : float, v16 : (std_string_String [])) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16)
and method77 (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) =
    v0
and closure60 () (v0 : crate_model_near_nearblocks_Root) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) =
    let v1 : string = "$0.txns"
    let v2 : Vec<crate_model_near_nearblocks_Txn> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : unit = ()
    let v4 : string = $"true; let _func1_from_v3 = Func1::from(move |value| {{ //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = $"value"
    let v7 : crate_model_near_nearblocks_Txn = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "$0.receipt_id"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.predecessor_account_id"
    let v11 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v10 
    let v12 : string = "$0.receiver_account_id"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v12 
    let v14 : string = "$0.transaction_hash"
    let v15 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v14 
    let v16 : string = "$0.included_in_block_hash"
    let v17 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v16 
    let v18 : string = "$0.block_timestamp"
    let v19 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v18 
    let v20 : string = "$0.block"
    let v21 : crate_model_near_nearblocks_Block = Fable.Core.RustInterop.emitRustExpr v7 v20 
    let v22 : string = "$0.block_height"
    let v23 : uint32 = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = "$0.actions"
    let v25 : Vec<crate_model_near_nearblocks_Action> = Fable.Core.RustInterop.emitRustExpr v7 v24 
    let v26 : unit = ()
    let v27 : string = $"true; let _func1_from_v26 = Func1::from(move |value| {{ //"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = $"value"
    let v30 : crate_model_near_nearblocks_Action = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "$0.action"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string = "$0.method"
    let v34 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v30 v33 
    let func1_from_result = struct (v32, v34) //
    let v35 : _ = func1_from_result
    let v36 : string = $"true; $0 /*"
    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : string = $"*/ }}); //"
    let v39 : bool = Fable.Core.RustInterop.emitRustExpr () v38 
    let v40 : string = $"_func1_from_v26"
    let v41 : Func0<crate_model_near_nearblocks_Action, struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v43 : (crate_model_near_nearblocks_Action -> struct (std_string_String * std_string_String option)) = closure61(v41)
    let v44 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr struct (v25, v43) v42 
    let v45 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v46 : (struct (std_string_String * std_string_String option) []) = Fable.Core.RustInterop.emitRustExpr v44 v45 
    let v47 : (struct (std_string_String * std_string_String option) []) = method74(v46)
    let v48 : string = "$0.actions_agg"
    let v49 : crate_model_near_nearblocks_ActionsAgg = Fable.Core.RustInterop.emitRustExpr v7 v48 
    let v50 : string = "$0.deposit"
    let v51 : float = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let v52 : string = "$0.outcomes"
    let v53 : crate_model_near_nearblocks_Outcomes = Fable.Core.RustInterop.emitRustExpr v7 v52 
    let v54 : string = "$0.status"
    let v55 : bool = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : string = "$0.outcomes_agg"
    let v57 : crate_model_near_nearblocks_OutcomesAgg = Fable.Core.RustInterop.emitRustExpr v7 v56 
    let v58 : string = "$0.transaction_fee"
    let v59 : float = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "$0.logs"
    let v61 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr v7 v60 
    let v62 : (Vec<std_string_String> -> (std_string_String [])) = method75()
    let v63 : (std_string_String []) option = v61 |> Option.map v62 
    let v75 : (std_string_String []) = [||]
    let v76 : (std_string_String []) = v63 |> Option.defaultValue v75 
    let func1_from_result = struct (v9, v11, v13, v15, v17, v19, v23, v47, v51, v55, v59, v76) //
    let v79 : _ = func1_from_result
    let v80 : string = $"true; $0 /*"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = $"*/ }}); //"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = $"_func1_from_v3"
    let v85 : Func0<crate_model_near_nearblocks_Txn, struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr () v84 
    let v86 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v87 : (crate_model_near_nearblocks_Txn -> struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) = closure63(v85)
    let v88 : Vec<struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr struct (v2, v87) v86 
    let v89 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v90 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = method77(v90)
    v91
and closure64 (v0 : leptos_prelude_ArcLocalResource<std_sync_Arc<rexie_Rexie>>) () : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option =
    let v1 : string = "state_core.use_requests (2) / database_memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v5 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "x"
    let v9 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : (unit -> unit) = closure8()
    let _v10 = true
    let v11 : string = "PartialEqWrapper($0)"
    let v12 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let v13 : string = "true; $0 })"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = "_optionm_map_"
    let v16 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v15 
    v16
and method79 (v0 : string) : string =
    v0
and method80 (v0 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>>) : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> =
    v0
and closure65 (v0 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>>) struct (v1 : string, v2 : US23, v3 : string, v4 : bool, v5 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>> =
    let v6 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = method80(v0)
    let func1_move_x = struct (v1, v2, v3, v4, v5) //
    let v7 : _ = func1_move_x
    let v8 : string = "(move |x| v6(x))($0)"
    let v9 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr v7 v8 
    v9
and method81 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> =
    v0
and closure66 (v0 : leptos_prelude_ArcLocalResource<Result<Vec<Heap4 option>, std_string_String>>) () : Result<Vec<Heap4 option>, std_string_String> option =
    let v1 : string = "state_core.use_requests (5) / state_data_func"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : web_sys_Window = method28()
    let v5 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method29(v4)
    let v6 : (web_sys_Storage option -> US9) = method30()
    let v7 : (wasm_bindgen_JsValue -> US9) = method31()
    let v8 : US9 = match v5 with Ok x -> v6 x | Error x -> v7 x
    let v31 : US10 =
        match v8 with
        | US9_1(v28) -> (* Error *)
            US10_1(v28)
        | US9_0(v9) -> (* Ok *)
            let v10 : (web_sys_Storage -> US11) = method32()
            let v11 : US11 option = v9 |> Option.map v10 
            let v22 : US11 = US11_1
            let v23 : US11 = v11 |> Option.defaultValue v22 
            US10_0(v23)
    let v39 : Result<Vec<Heap4 option>, std_string_String> option =
        match v31 with
        | US10_0(v32) -> (* Ok *)
            match v32 with
            | US11_0(v33) -> (* Some *)
                let v34 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
                let v35 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v0 v34 
                v35
            | _ ->
                let v36 : Result<Vec<Heap4 option>, std_string_String> option = None
                v36
        | _ ->
            let v38 : Result<Vec<Heap4 option>, std_string_String> option = None
            v38
    let v40 : string = $"%A{v39}"
    let v43 : string = "state_core.use_requests (6) / state_data_func func0 / result: " + string v40 + ""
    let v44 : int64 = 200L
    let v45 : string = method8(v44, v43)
    let v46 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v47 : bool = Fable.Core.RustInterop.emitRustExpr v45 v46 
    v39
and closure67 () (v0 : Result<Vec<Heap4 option>, std_string_String>) : US26 =
    US26_0(v0)
and method82 () : (Result<Vec<Heap4 option>, std_string_String> -> US26) =
    closure67()
and closure68 () (v0 : Vec<Heap4 option>) : US24 =
    US24_0(v0)
and method83 () : (Vec<Heap4 option> -> US24) =
    closure68()
and closure69 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method84 () : (std_string_String -> US24) =
    closure69()
and closure70 () (v0 : Heap4) : US25 =
    US25_0(v0)
and method85 () : (Heap4 -> US25) =
    closure70()
and closure73 () (v0 : US25) : US32 =
    US32_0(v0)
and method87 () : (US25 -> US32) =
    closure73()
and method88 (v0 : US23) : US23 =
    v0
and method89 (v0 : string) : string =
    v0
and method90 (v0 : std_string_String) : std_string_String =
    v0
and method91 (v0 : string) : string =
    v0
and method92 (v0 : std_string_String) : std_string_String =
    v0
and method93 (v0 : reqwest_RequestBuilder) : reqwest_RequestBuilder =
    v0
and method94 (v0 : reqwest_RequestBuilder) : reqwest_RequestBuilder =
    v0
and closure74 () (v0 : reqwest_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method95 () : (reqwest_Error -> std_string_String) =
    closure74()
and closure72 (v0 : US27, v1 : int32) struct (v2 : string, v3 : US23, v4 : string, v5 : bool, v6 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>> =
    let v7 : string = "true; let __future_init = Box::pin(/*"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "*/ async move { /*"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : string = "*/ //"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let v58 : US29 =
        match v0 with
        | US27_1 -> (* None *)
            US29_1
        | US27_0(v13) -> (* Some *)
            let v54 : US30 =
                match v13 with
                | US28_1(v51) -> (* Error *)
                    US30_1(v51)
                | US28_0(v14) -> (* Ok *)
                    let v15 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v16 : (US25 []) = Fable.Core.RustInterop.emitRustExpr v14 v15 
                    let v17 : US25 option = v16 |> Array.tryItem v1 
                    let v18 : (US25 -> US32) = method87()
                    let v19 : US32 option = v17 |> Option.map v18 
                    let v30 : US32 = US32_1
                    let v31 : US32 = v19 |> Option.defaultValue v30 
                    let v41 : US25 =
                        match v31 with
                        | US32_0(v35) -> (* Some *)
                            match v35 with
                            | US25_0(v36) -> (* Some *)
                                US25_0(v36)
                            | _ ->
                                US25_1
                        | _ ->
                            US25_1
                    let v49 : US31 =
                        match v41 with
                        | US25_1 -> (* None *)
                            US31_1
                        | US25_0(v42) -> (* Some *)
                            let v43 : std_string_String = v42.l0
                            let v44 : string = "fable_library_rust::String_::fromString($0)"
                            let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
                            US31_0(v45)
                    US30_0(v49)
            US29_0(v54)
    let v59 : string = $"%A{struct (v3, v5, v6)}"
    let v62 : int64 = 400L
    let v63 : string = method8(v62, v59)
    let v64 : string = $"%A{v0}"
    let v67 : int64 = 400L
    let v68 : string = method8(v67, v64)
    let v69 : string = $"%A{v58}"
    let v72 : int64 = 400L
    let v73 : string = method8(v72, v69)
    let v98 : bool =
        if v6 then
            true
        else
            match v0 with
            | US27_0(v74) -> (* Some *)
                match v74 with
                | US28_0(v75) -> (* Ok *)
                    let v76 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v77 : (US25 []) = Fable.Core.RustInterop.emitRustExpr v75 v76 
                    let v78 : int32 = v77.Length
                    let v79 : bool = v78 = 0
                    if v79 then
                        false
                    else
                        match v58 with
                        | US29_0(v80) -> (* Some *)
                            match v80 with
                            | US30_0(v81) -> (* Ok *)
                                match v81 with
                                | US31_1 -> (* None *)
                                    true
                                | _ ->
                                    false
                            | _ ->
                                false
                        | _ ->
                            false
                | _ ->
                    match v58 with
                    | US29_0(v86) -> (* Some *)
                        match v86 with
                        | US30_0(v87) -> (* Ok *)
                            match v87 with
                            | US31_1 -> (* None *)
                                true
                            | _ ->
                                false
                        | _ ->
                            false
                    | _ ->
                        false
            | _ ->
                match v58 with
                | US29_0(v92) -> (* Some *)
                    match v92 with
                    | US30_0(v93) -> (* Ok *)
                        match v93 with
                        | US31_1 -> (* None *)
                            true
                        | _ ->
                            false
                    | _ ->
                        false
                | _ ->
                    false
    let v99 : string = "state_core.use_requests (9) / result memo / state_data: " + string v68 + " / state_data': " + string v73 + " / request: " + string v63 + " / should_fetch: " + string v98 + ""
    let v100 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v101 : bool = Fable.Core.RustInterop.emitRustExpr v99 v100 
    let v102 : bool = v98 = false
    let v419 : US33 =
        if v102 then
            let v103 : string option = None
            US33_0(v103)
        else
            let v105 : US23 = method88(v3)
            let v211 : reqwest_RequestBuilder =
                match v105 with
                | US23_0 -> (* Get *)
                    let v106 : string = method89(v2)
                    (* run_target_args'
                    let v107 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v108 : string = "&*$0"
                    let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v108 
                    let _run_target_args'_v107 = v109 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v110 : string = "&*$0"
                    let v111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v110 
                    let _run_target_args'_v107 = v111 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v112 : string = "&*$0"
                    let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v112 
                    let _run_target_args'_v107 = v113 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v114 : Ref<Str> = v106 |> unbox<Ref<Str>>
                    let _run_target_args'_v107 = v114 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v117 : Ref<Str> = v106 |> unbox<Ref<Str>>
                    let _run_target_args'_v107 = v117 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v120 : Ref<Str> = v106 |> unbox<Ref<Str>>
                    let _run_target_args'_v107 = v120 
                    #endif
#else
                    let v123 : Ref<Str> = v106 |> unbox<Ref<Str>>
                    let _run_target_args'_v107 = v123 
                    #endif
                    let v126 : Ref<Str> = _run_target_args'_v107 
                    (* run_target_args'
                    let v131 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v132 : string = "String::from($0)"
                    let v133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v126 v132 
                    let _run_target_args'_v131 = v133 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v134 : string = "String::from($0)"
                    let v135 : std_string_String = Fable.Core.RustInterop.emitRustExpr v126 v134 
                    let _run_target_args'_v131 = v135 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v136 : string = "String::from($0)"
                    let v137 : std_string_String = Fable.Core.RustInterop.emitRustExpr v126 v136 
                    let _run_target_args'_v131 = v137 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v138 : std_string_String = v126 |> unbox<std_string_String>
                    let _run_target_args'_v131 = v138 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v141 : std_string_String = v126 |> unbox<std_string_String>
                    let _run_target_args'_v131 = v141 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v144 : std_string_String = v126 |> unbox<std_string_String>
                    let _run_target_args'_v131 = v144 
                    #endif
#else
                    let v147 : std_string_String = v126 |> unbox<std_string_String>
                    let _run_target_args'_v131 = v147 
                    #endif
                    let v150 : std_string_String = _run_target_args'_v131 
                    let v155 : std_string_String = method90(v150)
                    let v156 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.get(v155)"
                    let v157 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v156 
                    v157
                | US23_1 -> (* Post *)
                    let v158 : string = method91(v2)
                    (* run_target_args'
                    let v159 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v160 : string = "&*$0"
                    let v161 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v160 
                    let _run_target_args'_v159 = v161 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v162 : string = "&*$0"
                    let v163 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v162 
                    let _run_target_args'_v159 = v163 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v164 : string = "&*$0"
                    let v165 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v158 v164 
                    let _run_target_args'_v159 = v165 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v166 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v159 = v166 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v159 = v169 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v172 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v159 = v172 
                    #endif
#else
                    let v175 : Ref<Str> = v158 |> unbox<Ref<Str>>
                    let _run_target_args'_v159 = v175 
                    #endif
                    let v178 : Ref<Str> = _run_target_args'_v159 
                    (* run_target_args'
                    let v183 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "String::from($0)"
                    let v185 : std_string_String = Fable.Core.RustInterop.emitRustExpr v178 v184 
                    let _run_target_args'_v183 = v185 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v186 : string = "String::from($0)"
                    let v187 : std_string_String = Fable.Core.RustInterop.emitRustExpr v178 v186 
                    let _run_target_args'_v183 = v187 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v188 : string = "String::from($0)"
                    let v189 : std_string_String = Fable.Core.RustInterop.emitRustExpr v178 v188 
                    let _run_target_args'_v183 = v189 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : std_string_String = v178 |> unbox<std_string_String>
                    let _run_target_args'_v183 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v193 : std_string_String = v178 |> unbox<std_string_String>
                    let _run_target_args'_v183 = v193 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v196 : std_string_String = v178 |> unbox<std_string_String>
                    let _run_target_args'_v183 = v196 
                    #endif
#else
                    let v199 : std_string_String = v178 |> unbox<std_string_String>
                    let _run_target_args'_v183 = v199 
                    #endif
                    let v202 : std_string_String = _run_target_args'_v183 
                    let v207 : std_string_String = method92(v202)
                    let v208 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(v207)"
                    let v209 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v208 
                    v209
            (* run_target_args'
            let v212 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v213 : string = "&*$0"
            let v214 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v213 
            let _run_target_args'_v212 = v214 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v215 : string = "&*$0"
            let v216 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v215 
            let _run_target_args'_v212 = v216 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v217 
            let _run_target_args'_v212 = v218 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v219 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _run_target_args'_v212 = v219 
            #endif
#if FABLE_COMPILER_PYTHON
            let v222 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _run_target_args'_v212 = v222 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v225 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _run_target_args'_v212 = v225 
            #endif
#else
            let v228 : Ref<Str> = v4 |> unbox<Ref<Str>>
            let _run_target_args'_v212 = v228 
            #endif
            let v231 : Ref<Str> = _run_target_args'_v212 
            (* run_target_args'
            let v236 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v237 : string = "String::from($0)"
            let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v231 v237 
            let _run_target_args'_v236 = v238 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v239 : string = "String::from($0)"
            let v240 : std_string_String = Fable.Core.RustInterop.emitRustExpr v231 v239 
            let _run_target_args'_v236 = v240 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v241 : string = "String::from($0)"
            let v242 : std_string_String = Fable.Core.RustInterop.emitRustExpr v231 v241 
            let _run_target_args'_v236 = v242 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v243 : std_string_String = v231 |> unbox<std_string_String>
            let _run_target_args'_v236 = v243 
            #endif
#if FABLE_COMPILER_PYTHON
            let v246 : std_string_String = v231 |> unbox<std_string_String>
            let _run_target_args'_v236 = v246 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v249 : std_string_String = v231 |> unbox<std_string_String>
            let _run_target_args'_v236 = v249 
            #endif
#else
            let v252 : std_string_String = v231 |> unbox<std_string_String>
            let _run_target_args'_v236 = v252 
            #endif
            let v255 : std_string_String = _run_target_args'_v236 
            let v260 : string = "reqwest_wasm::RequestBuilder::body(v211, $0)"
            let v261 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr v255 v260 
            let v262 : bool = v5 = false
            let v369 : reqwest_RequestBuilder =
                if v262 then
                    let v263 : string = "v261"
                    let v264 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v263 
                    v264
                else
                    let v265 : string = "reqwest_wasm::header::CONTENT_TYPE.to_string()"
                    let v266 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v265 
                    let v267 : string = "fable_library_rust::String_::fromString($0)"
                    let v268 : string = Fable.Core.RustInterop.emitRustExpr v266 v267 
                    let v269 : reqwest_RequestBuilder = method93(v261)
                    (* run_target_args'
                    let v270 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v271 : string = "&*$0"
                    let v272 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v268 v271 
                    let _run_target_args'_v270 = v272 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v273 : string = "&*$0"
                    let v274 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v268 v273 
                    let _run_target_args'_v270 = v274 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v275 : string = "&*$0"
                    let v276 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v268 v275 
                    let _run_target_args'_v270 = v276 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v277 : Ref<Str> = v268 |> unbox<Ref<Str>>
                    let _run_target_args'_v270 = v277 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v280 : Ref<Str> = v268 |> unbox<Ref<Str>>
                    let _run_target_args'_v270 = v280 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v283 : Ref<Str> = v268 |> unbox<Ref<Str>>
                    let _run_target_args'_v270 = v283 
                    #endif
#else
                    let v286 : Ref<Str> = v268 |> unbox<Ref<Str>>
                    let _run_target_args'_v270 = v286 
                    #endif
                    let v289 : Ref<Str> = _run_target_args'_v270 
                    (* run_target_args'
                    let v294 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v295 : string = "String::from($0)"
                    let v296 : std_string_String = Fable.Core.RustInterop.emitRustExpr v289 v295 
                    let _run_target_args'_v294 = v296 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v297 : string = "String::from($0)"
                    let v298 : std_string_String = Fable.Core.RustInterop.emitRustExpr v289 v297 
                    let _run_target_args'_v294 = v298 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v299 : string = "String::from($0)"
                    let v300 : std_string_String = Fable.Core.RustInterop.emitRustExpr v289 v299 
                    let _run_target_args'_v294 = v300 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v301 : std_string_String = v289 |> unbox<std_string_String>
                    let _run_target_args'_v294 = v301 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v304 : std_string_String = v289 |> unbox<std_string_String>
                    let _run_target_args'_v294 = v304 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v307 : std_string_String = v289 |> unbox<std_string_String>
                    let _run_target_args'_v294 = v307 
                    #endif
#else
                    let v310 : std_string_String = v289 |> unbox<std_string_String>
                    let _run_target_args'_v294 = v310 
                    #endif
                    let v313 : std_string_String = _run_target_args'_v294 
                    let v318 : string = "application/json"
                    (* run_target_args'
                    let v319 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v320 : string = "&*$0"
                    let v321 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v318 v320 
                    let _run_target_args'_v319 = v321 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v322 : string = "&*$0"
                    let v323 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v318 v322 
                    let _run_target_args'_v319 = v323 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v324 : string = "&*$0"
                    let v325 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v318 v324 
                    let _run_target_args'_v319 = v325 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v326 : Ref<Str> = v318 |> unbox<Ref<Str>>
                    let _run_target_args'_v319 = v326 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v329 : Ref<Str> = v318 |> unbox<Ref<Str>>
                    let _run_target_args'_v319 = v329 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v332 : Ref<Str> = v318 |> unbox<Ref<Str>>
                    let _run_target_args'_v319 = v332 
                    #endif
#else
                    let v335 : Ref<Str> = v318 |> unbox<Ref<Str>>
                    let _run_target_args'_v319 = v335 
                    #endif
                    let v338 : Ref<Str> = _run_target_args'_v319 
                    (* run_target_args'
                    let v343 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v344 : string = "String::from($0)"
                    let v345 : std_string_String = Fable.Core.RustInterop.emitRustExpr v338 v344 
                    let _run_target_args'_v343 = v345 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v346 : string = "String::from($0)"
                    let v347 : std_string_String = Fable.Core.RustInterop.emitRustExpr v338 v346 
                    let _run_target_args'_v343 = v347 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v348 : string = "String::from($0)"
                    let v349 : std_string_String = Fable.Core.RustInterop.emitRustExpr v338 v348 
                    let _run_target_args'_v343 = v349 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v350 : std_string_String = v338 |> unbox<std_string_String>
                    let _run_target_args'_v343 = v350 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v353 : std_string_String = v338 |> unbox<std_string_String>
                    let _run_target_args'_v343 = v353 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v356 : std_string_String = v338 |> unbox<std_string_String>
                    let _run_target_args'_v343 = v356 
                    #endif
#else
                    let v359 : std_string_String = v338 |> unbox<std_string_String>
                    let _run_target_args'_v343 = v359 
                    #endif
                    let v362 : std_string_String = _run_target_args'_v343 
                    let v367 : string = "reqwest_wasm::RequestBuilder::header(v269, $0, $1)"
                    let v368 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr struct (v313, v362) v367 
                    v368
            let v370 : reqwest_RequestBuilder = method94(v369)
            let v371 : string = "Box::pin(reqwest_wasm::RequestBuilder::send(v370))"
            let v372 : std_pin_Pin<Box<Dyn<std_future_Future<Result<reqwest_Response, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v371 
            let v373 : string = "v372.await"
            let v374 : Result<reqwest_Response, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v373 
            let v375 : (reqwest_Error -> std_string_String) = method95()
            (* run_target_args'
            let v376 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v377 : string = "$0.map_err(|x| $1(x))"
            let v378 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v374, v375) v377 
            let _run_target_args'_v376 = v378 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v379 : string = "$0.map_err(|x| $1(x))"
            let v380 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v374, v375) v379 
            let _run_target_args'_v376 = v380 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v381 : string = "$0.map_err(|x| $1(x))"
            let v382 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v374, v375) v381 
            let _run_target_args'_v376 = v382 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v383 : Result<reqwest_Response, std_string_String> = match v374 with Ok x -> Ok x | Error x -> Error (v375 x)
            let _run_target_args'_v376 = v383 
            #endif
#if FABLE_COMPILER_PYTHON
            let v384 : Result<reqwest_Response, std_string_String> = match v374 with Ok x -> Ok x | Error x -> Error (v375 x)
            let _run_target_args'_v376 = v384 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v385 : Result<reqwest_Response, std_string_String> = match v374 with Ok x -> Ok x | Error x -> Error (v375 x)
            let _run_target_args'_v376 = v385 
            #endif
#else
            let v386 : Result<reqwest_Response, std_string_String> = match v374 with Ok x -> Ok x | Error x -> Error (v375 x)
            let _run_target_args'_v376 = v386 
            #endif
            let v387 : Result<reqwest_Response, std_string_String> = _run_target_args'_v376 
            let v390 : string = "$0?"
            let v391 : reqwest_Response = Fable.Core.RustInterop.emitRustExpr v387 v390 
            let v392 : string = "Box::pin(reqwest_wasm::Response::text(v391))"
            let v393 : std_pin_Pin<Box<Dyn<std_future_Future<Result<std_string_String, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v392 
            let v394 : string = "v393.await"
            let v395 : Result<std_string_String, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v394 
            let v396 : (reqwest_Error -> std_string_String) = method95()
            (* run_target_args'
            let v397 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v398 : string = "$0.map_err(|x| $1(x))"
            let v399 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v395, v396) v398 
            let _run_target_args'_v397 = v399 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v400 : string = "$0.map_err(|x| $1(x))"
            let v401 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v395, v396) v400 
            let _run_target_args'_v397 = v401 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v402 : string = "$0.map_err(|x| $1(x))"
            let v403 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v395, v396) v402 
            let _run_target_args'_v397 = v403 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v404 : Result<std_string_String, std_string_String> = match v395 with Ok x -> Ok x | Error x -> Error (v396 x)
            let _run_target_args'_v397 = v404 
            #endif
#if FABLE_COMPILER_PYTHON
            let v405 : Result<std_string_String, std_string_String> = match v395 with Ok x -> Ok x | Error x -> Error (v396 x)
            let _run_target_args'_v397 = v405 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v406 : Result<std_string_String, std_string_String> = match v395 with Ok x -> Ok x | Error x -> Error (v396 x)
            let _run_target_args'_v397 = v406 
            #endif
#else
            let v407 : Result<std_string_String, std_string_String> = match v395 with Ok x -> Ok x | Error x -> Error (v396 x)
            let _run_target_args'_v397 = v407 
            #endif
            let v408 : Result<std_string_String, std_string_String> = _run_target_args'_v397 
            let v411 : string = "$0?"
            let v412 : std_string_String = Fable.Core.RustInterop.emitRustExpr v408 v411 
            let v413 : string = "fable_library_rust::String_::fromString($0)"
            let v414 : string = Fable.Core.RustInterop.emitRustExpr v412 v413 
            let v415 : string option = Some v414 
            US33_0(v415)
    let v425 : Result<string option, std_string_String> =
        match v419 with
        | US33_1(v422) -> (* Error *)
            let v423 : Result<string option, std_string_String> = Error v422 
            v423
        | US33_0(v420) -> (* Ok *)
            let v421 : Result<string option, std_string_String> = Ok v420 
            v421
    let v426 : string = ""
    let v427 : string = "}"
    let v428 : string = v426 + v427 
    let x = v425 //
    let v429 : _ = x
    let v430 : unit = ()
    (* run_target_args'
    let v431 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v432 : string = $"true; let _fix_closure_v430 = $0"
    let v433 : bool = Fable.Core.RustInterop.emitRustExpr v429 v432 
    let _run_target_args'_v431 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v434 : string = $"true; let _fix_closure_v430 = $0"
    let v435 : bool = Fable.Core.RustInterop.emitRustExpr v429 v434 
    let _run_target_args'_v431 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v436 : string = $"true; let _fix_closure_v430 = $0"
    let v437 : bool = Fable.Core.RustInterop.emitRustExpr v429 v436 
    let _run_target_args'_v431 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v431 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v431 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v431 = false 
    #endif
#else
    let _run_target_args'_v431 = false 
    #endif
    let v438 : bool = _run_target_args'_v431 
    let v440 : string = $"true; _fix_closure_v430 " + v428 + "); " + v426 + " // rust.fix_closure'"
    let v441 : bool = Fable.Core.RustInterop.emitRustExpr () v440 
    let v442 : string = "__future_init"
    let v443 : _ = Fable.Core.RustInterop.emitRustExpr () v442 
    let v444 : string = "v443"
    let v445 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v444 
    v445
and closure71 (v0 : US27) (v1 : int32) : (struct (string * US23 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>) =
    closure72(v0, v1)
and method86 (v0 : US27) : (int32 -> (struct (string * US23 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>)) =
    closure71(v0)
and method96 (v0 : Vec<struct (string * US23 * string * bool * bool)>) : Vec<struct (string * US23 * string * bool * bool)> =
    v0
and method97 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> =
    v0
and method98 (v0 : string) : string =
    v0
and closure75 () (v0 : rexie_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method99 () : (rexie_Error -> std_string_String) =
    closure75()
and method100 (v0 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>>) : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> =
    v0
and closure76 (v0 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>>) struct (v1 : string, v2 : US23, v3 : string, v4 : bool, v5 : bool) : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>> =
    let v6 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = method100(v0)
    let func1_move_x = struct (v1, v2, v3, v4, v5) //
    let v7 : _ = func1_move_x
    let v8 : string = "(move |x| v6(x))($0)"
    let v9 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr v7 v8 
    v9
and method101 (v0 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>>) : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> =
    v0
and method102 (v0 : Func0<Heap4, std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>>) : Func0<Heap4, std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>> =
    v0
and closure77 (v0 : Func0<Heap4, std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>>) (v1 : Heap4) : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>> =
    let v2 : Func0<Heap4, std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>> = method102(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and closure79 () (v0 : Result<Vec<string option>, std_string_String>) : US37 =
    US37_0(v0)
and method103 () : (Result<Vec<string option>, std_string_String> -> US37) =
    closure79()
and closure80 () (v0 : Vec<string option>) : US39 =
    US39_0(v0)
and method104 () : (Vec<string option> -> US39) =
    closure80()
and closure81 () (v0 : std_string_String) : US39 =
    US39_1(v0)
and method105 () : (std_string_String -> US39) =
    closure81()
and closure82 () (v0 : string) : US31 =
    US31_0(v0)
and method106 () : (string -> US31) =
    closure82()
and closure85 () (v0 : US31) : US42 =
    US42_0(v0)
and method108 () : (US31 -> US42) =
    closure85()
and closure86 () (v0 : crate_model_near_nearblocks_Root) : crate_model_near_nearblocks_Root option =
    let v1 : crate_model_near_nearblocks_Root option = Some v0 
    v1
and method109 () : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) =
    closure86()
and method110 (v0 : Result<crate_model_near_nearblocks_Root, std_string_String>) : Result<crate_model_near_nearblocks_Root, std_string_String> =
    v0
and closure84 (v0 : US35, v1 : US41, v2 : int32) struct (v3 : string, v4 : US23, v5 : string, v6 : bool, v7 : bool) : Result<crate_model_near_nearblocks_Root option, std_string_String> =
    let v51 : US29 =
        match v0 with
        | US35_1 -> (* None *)
            US29_1
        | US35_0(v8) -> (* Some *)
            let v47 : US30 =
                match v8 with
                | US36_1(v44) -> (* Error *)
                    US30_1(v44)
                | US36_0(v9) -> (* Ok *)
                    let v10 : US25 option = v9 |> Array.tryItem v2 
                    let v11 : (US25 -> US32) = method87()
                    let v12 : US32 option = v10 |> Option.map v11 
                    let v23 : US32 = US32_1
                    let v24 : US32 = v12 |> Option.defaultValue v23 
                    let v34 : US25 =
                        match v24 with
                        | US32_0(v28) -> (* Some *)
                            match v28 with
                            | US25_0(v29) -> (* Some *)
                                US25_0(v29)
                            | _ ->
                                US25_1
                        | _ ->
                            US25_1
                    let v42 : US31 =
                        match v34 with
                        | US25_1 -> (* None *)
                            US31_1
                        | US25_0(v35) -> (* Some *)
                            let v36 : std_string_String = v35.l0
                            let v37 : string = "fable_library_rust::String_::fromString($0)"
                            let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
                            US31_0(v38)
                    US30_0(v42)
            US29_0(v47)
    let v52 : string = $"%A{struct (v3, v4, v5, v6, v7)}"
    let v55 : int64 = 400L
    let v56 : string = method8(v55, v52)
    let v57 : string = $"%A{v51}"
    let v60 : int64 = 400L
    let v61 : string = method8(v60, v57)
    let v62 : string = "state_core.use_request (15) / result memo / request: " + string v56 + " / state_data: " + string v61 + ""
    let v63 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = $"%A{v1}"
    let v68 : int64 = 400L
    let v69 : string = method8(v68, v65)
    let v70 : string = "state_core.use_request (16) / effect / json: " + string v69 + ""
    let v71 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v104 : US31 =
        match v1 with
        | US41_1(v101) -> (* Error *)
            US31_1
        | US41_0(v73) -> (* Ok *)
            let v74 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v75 : (US31 []) = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : US31 option = v75 |> Array.tryItem v2 
            let v77 : (US31 -> US42) = method108()
            let v78 : US42 option = v76 |> Option.map v77 
            let v89 : US42 = US42_1
            let v90 : US42 = v78 |> Option.defaultValue v89 
            match v90 with
            | US42_0(v94) -> (* Some *)
                match v94 with
                | US31_0(v95) -> (* Some *)
                    US31_0(v95)
                | _ ->
                    US31_1
            | _ ->
                US31_1
    match v104 with
    | US31_0(v105) -> (* Some *)
        let v106 : string = method41(v105)
        (* run_target_args'
        let v107 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v108 : string = "&*$0"
        let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v108 
        let _run_target_args'_v107 = v109 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "&*$0"
        let v111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v110 
        let _run_target_args'_v107 = v111 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v112 : string = "&*$0"
        let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v112 
        let _run_target_args'_v107 = v113 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _run_target_args'_v107 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _run_target_args'_v107 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _run_target_args'_v107 = v120 
        #endif
#else
        let v123 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _run_target_args'_v107 = v123 
        #endif
        let v126 : Ref<Str> = _run_target_args'_v107 
        let v131 : string = "serde_json::from_str(&$0)"
        let v132 : Result<crate_model_near_nearblocks_Root, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v126 v131 
        let v133 : (serde_json_Error -> std_string_String) = method42()
        (* run_target_args'
        let v134 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "$0.map_err(|x| $1(x))"
        let v136 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v135 
        let _run_target_args'_v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "$0.map_err(|x| $1(x))"
        let v138 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v137 
        let _run_target_args'_v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "$0.map_err(|x| $1(x))"
        let v140 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v139 
        let _run_target_args'_v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _run_target_args'_v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _run_target_args'_v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _run_target_args'_v134 = v143 
        #endif
#else
        let v144 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _run_target_args'_v134 = v144 
        #endif
        let v145 : Result<crate_model_near_nearblocks_Root, std_string_String> = _run_target_args'_v134 
        let v148 : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) = method109()
        let v149 : Result<crate_model_near_nearblocks_Root, std_string_String> = method110(v145)
        let v150 : string = "v149.map(|x| v148(x))"
        let v151 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v150 
        v151
    | _ ->
        match v51 with
        | US29_0(v152) -> (* Some *)
            match v152 with
            | US30_0(v153) -> (* Ok *)
                match v153 with
                | US31_0(v154) -> (* Some *)
                    let v155 : string = method41(v154)
                    (* run_target_args'
                    let v156 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
                    let _run_target_args'_v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
                    let _run_target_args'_v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
                    let _run_target_args'_v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v163 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v166 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v169 
                    #endif
#else
                    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v172 
                    #endif
                    let v175 : Ref<Str> = _run_target_args'_v156 
                    let v180 : string = "serde_json::from_str(&$0)"
                    let v181 : Result<crate_model_near_nearblocks_Root, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v175 v180 
                    let v182 : (serde_json_Error -> std_string_String) = method42()
                    (* run_target_args'
                    let v183 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "$0.map_err(|x| $1(x))"
                    let v185 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v184 
                    let _run_target_args'_v183 = v185 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v186 : string = "$0.map_err(|x| $1(x))"
                    let v187 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v186 
                    let _run_target_args'_v183 = v187 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v188 : string = "$0.map_err(|x| $1(x))"
                    let v189 : Result<crate_model_near_nearblocks_Root, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v188 
                    let _run_target_args'_v183 = v189 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _run_target_args'_v183 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v191 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _run_target_args'_v183 = v191 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v192 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _run_target_args'_v183 = v192 
                    #endif
#else
                    let v193 : Result<crate_model_near_nearblocks_Root, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _run_target_args'_v183 = v193 
                    #endif
                    let v194 : Result<crate_model_near_nearblocks_Root, std_string_String> = _run_target_args'_v183 
                    let v197 : (crate_model_near_nearblocks_Root -> crate_model_near_nearblocks_Root option) = method109()
                    let v198 : Result<crate_model_near_nearblocks_Root, std_string_String> = method110(v194)
                    let v199 : string = "v198.map(|x| v197(x))"
                    let v200 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v199 
                    v200
                | _ ->
                    let v201 : string = $"%A{struct (v104, v51)}"
                    let v204 : string = "state_core.use_request (17) / json Error / value: " + string v201 + ""
                    let v205 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                    let v206 : bool = Fable.Core.RustInterop.emitRustExpr v204 v205 
                    let v207 : crate_model_near_nearblocks_Root option = None
                    let v208 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v207 
                    v208
            | _ ->
                let v210 : string = $"%A{struct (v104, v51)}"
                let v213 : string = "state_core.use_request (17) / json Error / value: " + string v210 + ""
                let v214 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v215 : bool = Fable.Core.RustInterop.emitRustExpr v213 v214 
                let v216 : crate_model_near_nearblocks_Root option = None
                let v217 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v216 
                v217
        | _ ->
            let v219 : string = $"%A{struct (v104, v51)}"
            let v222 : string = "state_core.use_request (17) / json Error / value: " + string v219 + ""
            let v223 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v224 : bool = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : crate_model_near_nearblocks_Root option = None
            let v226 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Ok v225 
            v226
and closure83 (v0 : US35, v1 : US41) (v2 : int32) : (struct (string * US23 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>) =
    closure84(v0, v1, v2)
and method107 (v0 : US35, v1 : US41) : (int32 -> (struct (string * US23 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>)) =
    closure83(v0, v1)
and closure78 (v0 : leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>>, v1 : leptos_prelude_ArcMemo<Result<Vec<Heap4 option>, std_string_String> option>, v2 : leptos_prelude_ArcLocalResource<Result<Vec<string option>, std_string_String>>, v3 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>>) () : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) =
    let v4 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v5 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = $"%A{v5}"
    let v9 : string = "state_core.use_requests (13) / result memo / requests: " + string v6 + ""
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v13 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (Result<Vec<Heap4 option>, std_string_String> -> US26) = method82()
    let v15 : US26 option = v13 |> Option.map v14 
    let v26 : US26 = US26_1
    let v27 : US26 = v15 |> Option.defaultValue v26 
    let v71 : US35 =
        match v27 with
        | US26_1 -> (* None *)
            US35_1
        | US26_0(v31) -> (* Some *)
            let v32 : (Vec<Heap4 option> -> US24) = method83()
            let v33 : (std_string_String -> US24) = method84()
            let v34 : US24 = match v31 with Ok x -> v32 x | Error x -> v33 x
            let v67 : US36 =
                match v34 with
                | US24_1(v64) -> (* Error *)
                    US36_1(v64)
                | US24_0(v35) -> (* Ok *)
                    let v36 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
                    let v38 : string = "x"
                    let v39 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v38 
                    let v40 : (Heap4 -> US25) = method85()
                    let v41 : US25 option = v39 |> Option.map v40 
                    let v52 : US25 = US25_1
                    let v53 : US25 = v41 |> Option.defaultValue v52 
                    let v57 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v58 : bool = Fable.Core.RustInterop.emitRustExpr v53 v57 
                    let v59 : string = "_vec_map"
                    let v60 : Vec<US25> = Fable.Core.RustInterop.emitRustExpr () v59 
                    let v61 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v62 : (US25 []) = Fable.Core.RustInterop.emitRustExpr v60 v61 
                    US36_0(v62)
            US35_0(v67)
    let v72 : string = $"%A{v71}"
    let v75 : int64 = 400L
    let v76 : string = method8(v75, v72)
    let v77 : string = "state_core.use_request (14) / result_memo / state_data: " + string v76 + ""
    let v78 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v81 : Result<Vec<string option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v80 
    let v82 : (Result<Vec<string option>, std_string_String> -> US37) = method103()
    let v83 : US37 option = v81 |> Option.map v82 
    let v94 : US37 = US37_1
    let v95 : US37 = v83 |> Option.defaultValue v94 
    let v106 : US38 =
        match v95 with
        | US37_1 -> (* None *)
            US38_1
        | US37_0(v99) -> (* Some *)
            let v100 : (Vec<string option> -> US39) = method104()
            let v101 : (std_string_String -> US39) = method105()
            let v102 : US39 = match v99 with Ok x -> v100 x | Error x -> v101 x
            US38_0(v102)
    let v142 : US40 =
        match v106 with
        | US38_1 -> (* None *)
            US40_1
        | US38_0(v107) -> (* Some *)
            let v138 : US41 =
                match v107 with
                | US39_1(v135) -> (* Error *)
                    US41_1(v135)
                | US39_0(v108) -> (* Ok *)
                    let v109 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v110 : bool = Fable.Core.RustInterop.emitRustExpr v108 v109 
                    let v111 : string = "x"
                    let v112 : string option = Fable.Core.RustInterop.emitRustExpr () v111 
                    let v113 : (string -> US31) = method106()
                    let v114 : US31 option = v112 |> Option.map v113 
                    let v125 : US31 = US31_1
                    let v126 : US31 = v114 |> Option.defaultValue v125 
                    let v130 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v126 v130 
                    let v132 : string = "_vec_map"
                    let v133 : Vec<US31> = Fable.Core.RustInterop.emitRustExpr () v132 
                    US41_0(v133)
            US40_0(v138)
    let v143 : (US31 []) = [||]
    let v144 : string = "$0.to_vec()"
    let v145 : Vec<US31> = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v149 : US41 =
        match v142 with
        | US40_1 -> (* None *)
            US41_0(v145)
        | US40_0(v146) -> (* Some *)
            v146
    let v214 : bool =
        match v149 with
        | US41_1(v212) -> (* Error *)
            false
        | US41_0(v150) -> (* Ok *)
            let v151 : string = "true; $0.into_iter().for_each(|x| { //"
            let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
            let v153 : string = "x"
            let v154 : US31 = Fable.Core.RustInterop.emitRustExpr () v153 
            let v207 : bool =
                match v154 with
                | US31_0(v155) -> (* Some *)
                    (* run_target_args'
                    let v156 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
                    let _run_target_args'_v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
                    let _run_target_args'_v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
                    let _run_target_args'_v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v163 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v166 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v169 
                    #endif
#else
                    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v172 
                    #endif
                    let v175 : Ref<Str> = _run_target_args'_v156 
                    (* run_target_args'
                    let v180 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v181 : string = "String::from($0)"
                    let v182 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v181 
                    let _run_target_args'_v180 = v182 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v183 : string = "String::from($0)"
                    let v184 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v183 
                    let _run_target_args'_v180 = v184 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v185 : string = "String::from($0)"
                    let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v185 
                    let _run_target_args'_v180 = v186 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v187 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v180 = v187 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v190 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v180 = v190 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v193 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v180 = v193 
                    #endif
#else
                    let v196 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v180 = v196 
                    #endif
                    let v199 : std_string_String = _run_target_args'_v180 
                    let v204 : Heap4 = {l0 = v199} : Heap4
                    let v205 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
                    let v206 : bool = Fable.Core.RustInterop.emitRustExpr struct (v3, v204) v205 
                    true
                | _ ->
                    false
            let v208 : string = $"true"
            let v209 : bool = Fable.Core.RustInterop.emitRustExpr () v208 
            let v210 : string = "true; }); //"
            let v211 : bool = Fable.Core.RustInterop.emitRustExpr () v210 
            false
    let v215 : (int32 -> (struct (string * US23 * string * bool * bool) -> Result<crate_model_near_nearblocks_Root option, std_string_String>)) = method107(v71, v149)
    let v216 : Vec<struct (string * US23 * string * bool * bool)> = method96(v5)
    let v217 : string = "v216.iter().enumerate().map(|(i, x)| v215(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v218 : Vec<Result<crate_model_near_nearblocks_Root option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v217 
    let v219 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v220 : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v218 v219 
    let v221 : string = $"%A{v220}"
    let v224 : string = "state_core.use_requests (18) / result_func func0 / result: " + string v221 + ""
    let v225 : int64 = 200L
    let v226 : string = method8(v225, v224)
    let v227 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v228 : bool = Fable.Core.RustInterop.emitRustExpr v226 v227 
    v220
and method112 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) =
    v0
and closure88 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) (v1 : crate_model_near_nearblocks_Root option) : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option =
    let v2 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = method112(v0)
    let v3 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option = v1 |> Option.map v2 
    v3
and method111 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : (crate_model_near_nearblocks_Root option -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) =
    closure88(v0)
and method113 (v0 : Result<crate_model_near_nearblocks_Root option, std_string_String>) : Result<crate_model_near_nearblocks_Root option, std_string_String> =
    v0
and method114 (v0 : Func0<Result<crate_model_near_nearblocks_Root option, std_string_String>, Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>) : Func0<Result<crate_model_near_nearblocks_Root option, std_string_String>, Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> =
    v0
and closure89 (v0 : Func0<Result<crate_model_near_nearblocks_Root option, std_string_String>, Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>) (v1 : Result<crate_model_near_nearblocks_Root option, std_string_String>) : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> =
    let v2 : Func0<Result<crate_model_near_nearblocks_Root option, std_string_String>, Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> = method114(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and closure87 (v0 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])), v1 : leptos_prelude_ArcLocalResource<std_sync_Arc<rexie_Rexie>>, v2 : leptos_prelude_ArcLocalResource<Result<Vec<Heap4 option>, std_string_String>>, v3 : leptos_prelude_ArcMemo<(Result<crate_model_near_nearblocks_Root option, std_string_String> [])>) () : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> =
    let v4 : string = $"leptos::prelude::Submission::pending(&$0.into()).into()"
    let v5 : leptos_prelude_ArcSignal<bool> = Fable.Core.RustInterop.emitRustExpr v1 v4 
    let v6 : string = $"leptos::prelude::ArcSignal::get(&$0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"leptos::prelude::Submission::pending(&$0.into()).into()"
    let v9 : leptos_prelude_ArcSignal<bool> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = $"leptos::prelude::ArcSignal::get(&$0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v13 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (std_sync_Arc<rexie_Rexie> -> US2) = method9()
    let v15 : US2 option = v13 |> Option.map v14 
    let v26 : US2 = US2_1
    let v27 : US2 = v15 |> Option.defaultValue v26 
    let v31 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v32 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v31 
    let v33 : (Result<Vec<Heap4 option>, std_string_String> -> US26) = method82()
    let v34 : US26 option = v32 |> Option.map v33 
    let v45 : US26 = US26_1
    let v46 : US26 = v34 |> Option.defaultValue v45 
    let v90 : US35 =
        match v46 with
        | US26_1 -> (* None *)
            US35_1
        | US26_0(v50) -> (* Some *)
            let v51 : (Vec<Heap4 option> -> US24) = method83()
            let v52 : (std_string_String -> US24) = method84()
            let v53 : US24 = match v50 with Ok x -> v51 x | Error x -> v52 x
            let v86 : US36 =
                match v53 with
                | US24_1(v83) -> (* Error *)
                    US36_1(v83)
                | US24_0(v54) -> (* Ok *)
                    let v55 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
                    let v57 : string = "x"
                    let v58 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v57 
                    let v59 : (Heap4 -> US25) = method85()
                    let v60 : US25 option = v58 |> Option.map v59 
                    let v71 : US25 = US25_1
                    let v72 : US25 = v60 |> Option.defaultValue v71 
                    let v76 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v72 v76 
                    let v78 : string = "_vec_map"
                    let v79 : Vec<US25> = Fable.Core.RustInterop.emitRustExpr () v78 
                    let v80 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v81 : (US25 []) = Fable.Core.RustInterop.emitRustExpr v79 v80 
                    US36_0(v81)
            US35_0(v86)
    let v91 : string = $"%A{v27}"
    let v94 : int64 = 400L
    let v95 : string = method8(v94, v91)
    let v96 : string = $"%A{v90}"
    let v99 : int64 = 400L
    let v100 : string = method8(v99, v96)
    let v101 : string = "state_core.use_request (19) / result move / database: " + string v95 + " / database_loading: " + string v7 + " / state_data: " + string v100 + " / state_data_loading: " + string v11 + ""
    let v102 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v105 : (Result<crate_model_near_nearblocks_Root option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v3 v104 
    let v106 : string = "$0.to_vec()"
    let v107 : Vec<Result<crate_model_near_nearblocks_Root option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : unit = ()
    let v109 : string = $"true; let _func1_from_v108 = Func1::from(move |value| {{ //"
    let v110 : bool = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = $"value"
    let v112 : Result<crate_model_near_nearblocks_Root option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v111 
    let v113 : (crate_model_near_nearblocks_Root option -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) = method111(v0)
    let v114 : Result<crate_model_near_nearblocks_Root option, std_string_String> = method113(v112)
    let v115 : string = "v114.map(|x| v113(x))"
    let v116 : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v115 
    let func1_from_result = v116 //
    let v117 : _ = func1_from_result
    let v118 : string = $"true; $0 /*"
    let v119 : bool = Fable.Core.RustInterop.emitRustExpr v117 v118 
    let v120 : string = $"*/ }}); //"
    let v121 : bool = Fable.Core.RustInterop.emitRustExpr () v120 
    let v122 : string = $"_func1_from_v108"
    let v123 : Func0<Result<crate_model_near_nearblocks_Root option, std_string_String>, Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v122 
    let v124 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v125 : (Result<crate_model_near_nearblocks_Root option, std_string_String> -> Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>) = closure89(v123)
    let v126 : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v107, v125) v124 
    let v127 : string = $"%A{v126}"
    let v130 : string = "state_core.use_requests (20) / result func0 / result: " + string v127 + ""
    let v131 : int64 = 200L
    let v132 : string = method8(v131, v130)
    let v133 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v134 : bool = Fable.Core.RustInterop.emitRustExpr v132 v133 
    v126
and method78 (v0 : leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>>, v1 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []))) : leptos_prelude_ArcMemo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> =
    let v2 : string = "state_core.use_requests (1)"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "state_core.use_database (1)"
    let v6 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : unit = ()
    let v9 : string = $"true; let _func0_from_v8 = Func0::from(move || {{ //"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : string = "true; let __future_init = Box::pin(/*"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = "*/ async move { /*"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "*/ //"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "state_core.use_database (2) / database new_local_resource"
    let v18 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "state_core.build_database ()"
    let v21 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "true; let __future_init = Box::pin(/*"
    let v24 : bool = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : string = "*/ async { /*"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : string = "*/ //"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())"
    let v30 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "v30.await"
    let v32 : Result<rexie_Rexie, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : (rexie_Error -> std_string_String) = method6()
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "$0.map_err(|x| $1(x))"
    let v36 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v32, v33) v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "$0.map_err(|x| $1(x))"
    let v38 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v32, v33) v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "$0.map_err(|x| $1(x))"
    let v40 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v32, v33) v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : Result<rexie_Rexie, std_string_String> = match v32 with Ok x -> Ok x | Error x -> Error (v33 x)
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : Result<rexie_Rexie, std_string_String> = match v32 with Ok x -> Ok x | Error x -> Error (v33 x)
    let _run_target_args'_v34 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : Result<rexie_Rexie, std_string_String> = match v32 with Ok x -> Ok x | Error x -> Error (v33 x)
    let _run_target_args'_v34 = v43 
    #endif
#else
    let v44 : Result<rexie_Rexie, std_string_String> = match v32 with Ok x -> Ok x | Error x -> Error (v33 x)
    let _run_target_args'_v34 = v44 
    #endif
    let v45 : Result<rexie_Rexie, std_string_String> = _run_target_args'_v34 
    let v48 : string = ""
    let v49 : string = "}"
    let v50 : string = v48 + v49 
    let x = v45 //
    let v51 : _ = x
    let v52 : unit = ()
    (* run_target_args'
    let v53 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v54 : string = $"true; let _fix_closure_v52 = $0"
    let v55 : bool = Fable.Core.RustInterop.emitRustExpr v51 v54 
    let _run_target_args'_v53 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v56 : string = $"true; let _fix_closure_v52 = $0"
    let v57 : bool = Fable.Core.RustInterop.emitRustExpr v51 v56 
    let _run_target_args'_v53 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v58 : string = $"true; let _fix_closure_v52 = $0"
    let v59 : bool = Fable.Core.RustInterop.emitRustExpr v51 v58 
    let _run_target_args'_v53 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v53 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v53 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v53 = false 
    #endif
#else
    let _run_target_args'_v53 = false 
    #endif
    let v60 : bool = _run_target_args'_v53 
    let v62 : string = $"true; _fix_closure_v52 " + v50 + "); " + v48 + " // rust.fix_closure'"
    let v63 : bool = Fable.Core.RustInterop.emitRustExpr () v62 
    let v64 : string = "__future_init"
    let v65 : _ = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = "v65"
    let v67 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = "v67.await"
    let v69 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v68 
    (* run_target_args'
    let v70 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v71 : string = "$0.unwrap()"
    let v72 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v69 v71 
    let _run_target_args'_v70 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "$0.unwrap()"
    let v74 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v69 v73 
    let _run_target_args'_v70 = v74 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v75 : string = "$0.unwrap()"
    let v76 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v69 v75 
    let _run_target_args'_v70 = v76 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v77 : rexie_Rexie = match v69 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v70 = v77 
    #endif
#if FABLE_COMPILER_PYTHON
    let v78 : rexie_Rexie = match v69 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v70 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : rexie_Rexie = match v69 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v70 = v79 
    #endif
#else
    let v80 : rexie_Rexie = match v69 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v70 = v80 
    #endif
    let v81 : rexie_Rexie = _run_target_args'_v70 
    let v84 : (rexie_Rexie -> rexie_Rexie) = method7()
    let v85 : rexie_Rexie = v84 v81
    let v86 : string = "std::sync::Arc::new(v85)"
    let v87 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = $"%A{v87}"
    let v91 : string = "state_core.use_database (3) / database new_local_resource / result: " + string v88 + ""
    let v92 : int64 = 200L
    let v93 : string = method8(v92, v91)
    let v94 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = v48 + v49 
    let x = v87 //
    let v97 : _ = x
    let v98 : unit = ()
    (* run_target_args'
    let v99 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v100 : string = $"true; let _fix_closure_v98 = $0"
    let v101 : bool = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let _run_target_args'_v99 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = $"true; let _fix_closure_v98 = $0"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v97 v102 
    let _run_target_args'_v99 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = $"true; let _fix_closure_v98 = $0"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v97 v104 
    let _run_target_args'_v99 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v99 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v99 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v99 = false 
    #endif
#else
    let _run_target_args'_v99 = false 
    #endif
    let v106 : bool = _run_target_args'_v99 
    let v108 : string = $"true; _fix_closure_v98 " + v96 + "); " + v48 + " // rust.fix_closure'"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = "__future_init"
    let v111 : _ = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = "v111"
    let v113 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : string = $"true; $0 /*"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v113 v114 
    let v116 : string = $"*/ }}); //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr () v116 
    let v118 : string = $"_func0_from_v8"
    let v119 : Func0<std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>>> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "leptos::prelude::ArcLocalResource::new(|| async move { $0().await })"
    let v121 : leptos_prelude_ArcLocalResource<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v123 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = closure64(v121)
    let v124 : leptos_prelude_ArcMemo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option> = Fable.Core.RustInterop.emitRustExpr v123 v122 
    let v125 : unit = ()
    let v126 : string = $"true; let _func0_from_v125 = Func0::from(move || {{ //"
    let v127 : bool = Fable.Core.RustInterop.emitRustExpr () v126 
    let v128 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v129 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v121 v128 
    let v130 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v129 v130 
    let v132 : string = "x"
    let v133 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v132 
    let v134 : (unit -> unit) = closure8()
    let _v134 = true
    let v135 : string = "PartialEqWrapper($0)"
    let v136 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v133 v135 
    let v137 : string = "true; $0 })"
    let v138 : bool = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "_optionm_map_"
    let v140 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v139 
    let v141 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v142 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v141 
    let v143 : string = "true; let __future_init = Box::pin(/*"
    let v144 : bool = Fable.Core.RustInterop.emitRustExpr () v143 
    let v145 : string = "*/ async move { /*"
    let v146 : bool = Fable.Core.RustInterop.emitRustExpr () v145 
    let v147 : string = "*/ //"
    let v148 : bool = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : string = $"%A{v140}"
    let v152 : string = $"%A{v142}"
    let v155 : int64 = 400L
    let v156 : string = method8(v155, v152)
    let v157 : string = "state_core.use_requests (3) / state_data_resource new_local_resource / request : " + string v156 + " / database: " + string v149 + ""
    let v158 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v159 : bool = Fable.Core.RustInterop.emitRustExpr v157 v158 
    let v160 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v161 : bool = Fable.Core.RustInterop.emitRustExpr v140 v160 
    let v162 : string = "x"
    let v163 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v162 
    let v164 : string = "$0.0"
    let v165 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "true; $0 })"
    let v167 : bool = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : string = "_optionm_map_"
    let v169 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v168 
    let v170 : (std_sync_Arc<rexie_Rexie> -> US2) = method9()
    let v171 : US2 option = v169 |> Option.map v170 
    let v182 : US2 = US2_1
    let v183 : US2 = v171 |> Option.defaultValue v182 
    let v594 : US24 =
        match v183 with
        | US2_0(v187) -> (* Some *)
            let v188 : unit = ()
            let v189 : string = $"true; let _func1_from_v188 = Func1::from(move |value| {{ //"
            let v190 : bool = Fable.Core.RustInterop.emitRustExpr () v189 
            let v191 : string = $"value"
            let struct (v192 : string, v193 : US23, v194 : string, v195 : bool, v196 : bool) = Fable.Core.RustInterop.emitRustExpr () v191 
            let v197 : string = "url[" + v192 + "](" + $"%A{v194}" + ")"
            let v198 : string = "state_core.get_data () / id: " + v197 + ""
            let v199 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v200 : bool = Fable.Core.RustInterop.emitRustExpr v198 v199 
            let v201 : string = "true; let __future_init = Box::pin(/*"
            let v202 : bool = Fable.Core.RustInterop.emitRustExpr () v201 
            let v203 : string = "*/ async { /*"
            let v204 : bool = Fable.Core.RustInterop.emitRustExpr () v203 
            let v205 : string = "*/ //"
            let v206 : bool = Fable.Core.RustInterop.emitRustExpr () v205 
            let v207 : string = "store"
            let v208 : (string []) = [|v207|]
            let v209 : string = "$0.to_vec()"
            let v210 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v208 v209 
            let v211 : unit = ()
            let v212 : string = $"true; let _func1_from_v211 = Func1::from(move |value| {{ //"
            let v213 : bool = Fable.Core.RustInterop.emitRustExpr () v212 
            let v214 : string = $"value"
            let v215 : string = Fable.Core.RustInterop.emitRustExpr () v214 
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v215 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v215 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v215 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v229 
            #endif
#else
            let v232 : Ref<Str> = v215 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
            let v235 : Ref<Str> = _run_target_args'_v216 
            (* run_target_args'
            let v240 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v241 : string = "String::from($0)"
            let v242 : std_string_String = Fable.Core.RustInterop.emitRustExpr v235 v241 
            let _run_target_args'_v240 = v242 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v243 : string = "String::from($0)"
            let v244 : std_string_String = Fable.Core.RustInterop.emitRustExpr v235 v243 
            let _run_target_args'_v240 = v244 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v245 : string = "String::from($0)"
            let v246 : std_string_String = Fable.Core.RustInterop.emitRustExpr v235 v245 
            let _run_target_args'_v240 = v246 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v247 : std_string_String = v235 |> unbox<std_string_String>
            let _run_target_args'_v240 = v247 
            #endif
#if FABLE_COMPILER_PYTHON
            let v250 : std_string_String = v235 |> unbox<std_string_String>
            let _run_target_args'_v240 = v250 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v253 : std_string_String = v235 |> unbox<std_string_String>
            let _run_target_args'_v240 = v253 
            #endif
#else
            let v256 : std_string_String = v235 |> unbox<std_string_String>
            let _run_target_args'_v240 = v256 
            #endif
            let v259 : std_string_String = _run_target_args'_v240 
            let func1_from_result = v259 //
            let v264 : _ = func1_from_result
            let v265 : string = $"true; $0 /*"
            let v266 : bool = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = $"*/ }}); //"
            let v268 : bool = Fable.Core.RustInterop.emitRustExpr () v267 
            let v269 : string = $"_func1_from_v211"
            let v270 : Func0<string, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v272 : (string -> std_string_String) = closure10(v270)
            let v273 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v210, v272) v271 
            let v274 : std_sync_Arc<rexie_Rexie> = method11(v187)
            let v275 : string = "$0.transaction(&v273, rexie::TransactionMode::ReadOnly)"
            let v276 : Result<rexie_Transaction, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v274 v275 
            let v277 : (rexie_Error -> std_string_String) = method12()
            (* run_target_args'
            let v278 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v279 : string = "$0.map_err(|x| $1(x))"
            let v280 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v276, v277) v279 
            let _run_target_args'_v278 = v280 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v281 : string = "$0.map_err(|x| $1(x))"
            let v282 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v276, v277) v281 
            let _run_target_args'_v278 = v282 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v283 : string = "$0.map_err(|x| $1(x))"
            let v284 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v276, v277) v283 
            let _run_target_args'_v278 = v284 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v285 : Result<rexie_Transaction, std_string_String> = match v276 with Ok x -> Ok x | Error x -> Error (v277 x)
            let _run_target_args'_v278 = v285 
            #endif
#if FABLE_COMPILER_PYTHON
            let v286 : Result<rexie_Transaction, std_string_String> = match v276 with Ok x -> Ok x | Error x -> Error (v277 x)
            let _run_target_args'_v278 = v286 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v287 : Result<rexie_Transaction, std_string_String> = match v276 with Ok x -> Ok x | Error x -> Error (v277 x)
            let _run_target_args'_v278 = v287 
            #endif
#else
            let v288 : Result<rexie_Transaction, std_string_String> = match v276 with Ok x -> Ok x | Error x -> Error (v277 x)
            let _run_target_args'_v278 = v288 
            #endif
            let v289 : Result<rexie_Transaction, std_string_String> = _run_target_args'_v278 
            let v292 : string = "$0?"
            let v293 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v289 v292 
            let v294 : string = method13()
            (* run_target_args'
            let v295 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v296 : string = "&*$0"
            let v297 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v296 
            let _run_target_args'_v295 = v297 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v298 : string = "&*$0"
            let v299 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v298 
            let _run_target_args'_v295 = v299 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v300 : string = "&*$0"
            let v301 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v300 
            let _run_target_args'_v295 = v301 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v302 : Ref<Str> = v294 |> unbox<Ref<Str>>
            let _run_target_args'_v295 = v302 
            #endif
#if FABLE_COMPILER_PYTHON
            let v305 : Ref<Str> = v294 |> unbox<Ref<Str>>
            let _run_target_args'_v295 = v305 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v308 : Ref<Str> = v294 |> unbox<Ref<Str>>
            let _run_target_args'_v295 = v308 
            #endif
#else
            let v311 : Ref<Str> = v294 |> unbox<Ref<Str>>
            let _run_target_args'_v295 = v311 
            #endif
            let v314 : Ref<Str> = _run_target_args'_v295 
            let v319 : string = "v293.store($0)"
            let v320 : Result<rexie_Store, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v314 v319 
            let v321 : (rexie_Error -> std_string_String) = method14()
            (* run_target_args'
            let v322 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v323 : string = "$0.map_err(|x| $1(x))"
            let v324 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v320, v321) v323 
            let _run_target_args'_v322 = v324 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v325 : string = "$0.map_err(|x| $1(x))"
            let v326 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v320, v321) v325 
            let _run_target_args'_v322 = v326 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v327 : string = "$0.map_err(|x| $1(x))"
            let v328 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v320, v321) v327 
            let _run_target_args'_v322 = v328 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v329 : Result<rexie_Store, std_string_String> = match v320 with Ok x -> Ok x | Error x -> Error (v321 x)
            let _run_target_args'_v322 = v329 
            #endif
#if FABLE_COMPILER_PYTHON
            let v330 : Result<rexie_Store, std_string_String> = match v320 with Ok x -> Ok x | Error x -> Error (v321 x)
            let _run_target_args'_v322 = v330 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v331 : Result<rexie_Store, std_string_String> = match v320 with Ok x -> Ok x | Error x -> Error (v321 x)
            let _run_target_args'_v322 = v331 
            #endif
#else
            let v332 : Result<rexie_Store, std_string_String> = match v320 with Ok x -> Ok x | Error x -> Error (v321 x)
            let _run_target_args'_v322 = v332 
            #endif
            let v333 : Result<rexie_Store, std_string_String> = _run_target_args'_v322 
            let v336 : string = "$0?"
            let v337 : rexie_Store = Fable.Core.RustInterop.emitRustExpr v333 v336 
            let v338 : string = method79(v197)
            (* run_target_args'
            let v339 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v340 : string = "&*$0"
            let v341 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v338 v340 
            let _run_target_args'_v339 = v341 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v342 : string = "&*$0"
            let v343 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v338 v342 
            let _run_target_args'_v339 = v343 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v344 : string = "&*$0"
            let v345 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v338 v344 
            let _run_target_args'_v339 = v345 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v346 : Ref<Str> = v338 |> unbox<Ref<Str>>
            let _run_target_args'_v339 = v346 
            #endif
#if FABLE_COMPILER_PYTHON
            let v349 : Ref<Str> = v338 |> unbox<Ref<Str>>
            let _run_target_args'_v339 = v349 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v352 : Ref<Str> = v338 |> unbox<Ref<Str>>
            let _run_target_args'_v339 = v352 
            #endif
#else
            let v355 : Ref<Str> = v338 |> unbox<Ref<Str>>
            let _run_target_args'_v339 = v355 
            #endif
            let v358 : Ref<Str> = _run_target_args'_v339 
            let v363 : string = "wasm_bindgen::JsValue::from_str($0)"
            let v364 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr v358 v363 
            let v365 : string = $"Box::pin(rexie::Store::get(&v337, v364))"
            let v366 : std_pin_Pin<Box<Dyn<std_future_Future<Result<wasm_bindgen_JsValue option, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v365 
            let v367 : string = "v366.await"
            let v368 : Result<wasm_bindgen_JsValue option, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v367 
            let v369 : (rexie_Error -> std_string_String) = method16()
            (* run_target_args'
            let v370 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v371 : string = "$0.map_err(|x| $1(x))"
            let v372 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v368, v369) v371 
            let _run_target_args'_v370 = v372 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v373 : string = "$0.map_err(|x| $1(x))"
            let v374 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v368, v369) v373 
            let _run_target_args'_v370 = v374 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v375 : string = "$0.map_err(|x| $1(x))"
            let v376 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v368, v369) v375 
            let _run_target_args'_v370 = v376 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v377 : Result<wasm_bindgen_JsValue option, std_string_String> = match v368 with Ok x -> Ok x | Error x -> Error (v369 x)
            let _run_target_args'_v370 = v377 
            #endif
#if FABLE_COMPILER_PYTHON
            let v378 : Result<wasm_bindgen_JsValue option, std_string_String> = match v368 with Ok x -> Ok x | Error x -> Error (v369 x)
            let _run_target_args'_v370 = v378 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v379 : Result<wasm_bindgen_JsValue option, std_string_String> = match v368 with Ok x -> Ok x | Error x -> Error (v369 x)
            let _run_target_args'_v370 = v379 
            #endif
#else
            let v380 : Result<wasm_bindgen_JsValue option, std_string_String> = match v368 with Ok x -> Ok x | Error x -> Error (v369 x)
            let _run_target_args'_v370 = v380 
            #endif
            let v381 : Result<wasm_bindgen_JsValue option, std_string_String> = _run_target_args'_v370 
            let v384 : string = "$0?"
            let v385 : wasm_bindgen_JsValue option = Fable.Core.RustInterop.emitRustExpr v381 v384 
            let v386 : (wasm_bindgen_JsValue -> US4) = method17()
            let v387 : US4 option = v385 |> Option.map v386 
            let v398 : US4 = US4_1
            let v399 : US4 = v387 |> Option.defaultValue v398 
            let v499 : US25 =
                match v399 with
                | US4_1 -> (* None *)
                    US25_1
                | US4_0(v403) -> (* Some *)
                    let v404 : wasm_bindgen_JsValue = method18(v403)
                    let v405 : string = "serde_wasm_bindgen::from_value(v404)"
                    let v406 : Result<serde_json_Value option, serde_wasm_bindgen_Error> = Fable.Core.RustInterop.emitRustExpr () v405 
                    let v407 : (serde_wasm_bindgen_Error -> std_string_String) = method19()
                    (* run_target_args'
                    let v408 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v409 : string = "$0.map_err(|x| $1(x))"
                    let v410 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v406, v407) v409 
                    let _run_target_args'_v408 = v410 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v411 : string = "$0.map_err(|x| $1(x))"
                    let v412 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v406, v407) v411 
                    let _run_target_args'_v408 = v412 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v413 : string = "$0.map_err(|x| $1(x))"
                    let v414 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v406, v407) v413 
                    let _run_target_args'_v408 = v414 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v415 : Result<serde_json_Value option, std_string_String> = match v406 with Ok x -> Ok x | Error x -> Error (v407 x)
                    let _run_target_args'_v408 = v415 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v416 : Result<serde_json_Value option, std_string_String> = match v406 with Ok x -> Ok x | Error x -> Error (v407 x)
                    let _run_target_args'_v408 = v416 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v417 : Result<serde_json_Value option, std_string_String> = match v406 with Ok x -> Ok x | Error x -> Error (v407 x)
                    let _run_target_args'_v408 = v417 
                    #endif
#else
                    let v418 : Result<serde_json_Value option, std_string_String> = match v406 with Ok x -> Ok x | Error x -> Error (v407 x)
                    let _run_target_args'_v408 = v418 
                    #endif
                    let v419 : Result<serde_json_Value option, std_string_String> = _run_target_args'_v408 
                    let v422 : string = "$0?"
                    let v423 : serde_json_Value option = Fable.Core.RustInterop.emitRustExpr v419 v422 
                    let v424 : (serde_json_Value -> US5) = method20()
                    let v425 : US5 option = v423 |> Option.map v424 
                    let v436 : US5 = US5_1
                    let v437 : US5 = v425 |> Option.defaultValue v436 
                    match v437 with
                    | US5_1 -> (* None *)
                        US25_1
                    | US5_0(v441) -> (* Some *)
                        let v442 : serde_json_Value = method21(v441)
                        let v443 : string = "serde_json::from_value(v442)"
                        let v444 : Result<Vec<uint8>, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v443 
                        let v445 : (serde_json_Error -> std_string_String) = method22()
                        (* run_target_args'
                        let v446 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v447 : string = "$0.map_err(|x| $1(x))"
                        let v448 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v444, v445) v447 
                        let _run_target_args'_v446 = v448 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v449 : string = "$0.map_err(|x| $1(x))"
                        let v450 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v444, v445) v449 
                        let _run_target_args'_v446 = v450 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v451 : string = "$0.map_err(|x| $1(x))"
                        let v452 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v444, v445) v451 
                        let _run_target_args'_v446 = v452 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v453 : Result<Vec<uint8>, std_string_String> = match v444 with Ok x -> Ok x | Error x -> Error (v445 x)
                        let _run_target_args'_v446 = v453 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v454 : Result<Vec<uint8>, std_string_String> = match v444 with Ok x -> Ok x | Error x -> Error (v445 x)
                        let _run_target_args'_v446 = v454 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v455 : Result<Vec<uint8>, std_string_String> = match v444 with Ok x -> Ok x | Error x -> Error (v445 x)
                        let _run_target_args'_v446 = v455 
                        #endif
#else
                        let v456 : Result<Vec<uint8>, std_string_String> = match v444 with Ok x -> Ok x | Error x -> Error (v445 x)
                        let _run_target_args'_v446 = v456 
                        #endif
                        let v457 : Result<Vec<uint8>, std_string_String> = _run_target_args'_v446 
                        let v460 : string = "$0?"
                        let v461 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v457 v460 
                        let v462 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                        let v463 : (uint8 []) = Fable.Core.RustInterop.emitRustExpr v461 v462 
                        let v464 : int32 = v463.Length
                        let v465 : string = "state_core.get_data () / data_len: " + string v464 + ""
                        let v466 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v467 : bool = Fable.Core.RustInterop.emitRustExpr v465 v466 
                        let v468 : string = "$0.to_vec()"
                        let v469 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v463 v468 
                        let v470 : string = "v469.as_slice()"
                        let v471 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v470 
                        let v472 : string = "true; let mut v471 = v471"
                        let v473 : bool = Fable.Core.RustInterop.emitRustExpr () v472 
                        let v474 : string = "borsh::BorshDeserialize::deserialize(&mut v471)"
                        let v475 : Result<Heap4, borsh_io_Error> = Fable.Core.RustInterop.emitRustExpr () v474 
                        let v476 : (borsh_io_Error -> std_string_String) = method23()
                        (* run_target_args'
                        let v477 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v478 : string = "$0.map_err(|x| $1(x))"
                        let v479 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v475, v476) v478 
                        let _run_target_args'_v477 = v479 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v480 : string = "$0.map_err(|x| $1(x))"
                        let v481 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v475, v476) v480 
                        let _run_target_args'_v477 = v481 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v482 : string = "$0.map_err(|x| $1(x))"
                        let v483 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v475, v476) v482 
                        let _run_target_args'_v477 = v483 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v484 : Result<Heap4, std_string_String> = match v475 with Ok x -> Ok x | Error x -> Error (v476 x)
                        let _run_target_args'_v477 = v484 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v485 : Result<Heap4, std_string_String> = match v475 with Ok x -> Ok x | Error x -> Error (v476 x)
                        let _run_target_args'_v477 = v485 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v486 : Result<Heap4, std_string_String> = match v475 with Ok x -> Ok x | Error x -> Error (v476 x)
                        let _run_target_args'_v477 = v486 
                        #endif
#else
                        let v487 : Result<Heap4, std_string_String> = match v475 with Ok x -> Ok x | Error x -> Error (v476 x)
                        let _run_target_args'_v477 = v487 
                        #endif
                        let v488 : Result<Heap4, std_string_String> = _run_target_args'_v477 
                        let v491 : string = "$0?"
                        let v492 : Heap4 = Fable.Core.RustInterop.emitRustExpr v488 v491 
                        US25_0(v492)
            let v506 : Heap4 option =
                match v499 with
                | US25_1 -> (* None *)
                    let v504 : Heap4 option = None
                    v504
                | US25_0(v500) -> (* Some *)
                    let v501 : Heap4 option = Some v500 
                    v501
            let v507 : Result<Heap4 option, std_string_String> = Ok v506 
            let v508 : string = v48 + v49 
            let x = v507 //
            let v509 : _ = x
            let v510 : unit = ()
            (* run_target_args'
            let v511 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v512 : string = $"true; let _fix_closure_v510 = $0"
            let v513 : bool = Fable.Core.RustInterop.emitRustExpr v509 v512 
            let _run_target_args'_v511 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v514 : string = $"true; let _fix_closure_v510 = $0"
            let v515 : bool = Fable.Core.RustInterop.emitRustExpr v509 v514 
            let _run_target_args'_v511 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v516 : string = $"true; let _fix_closure_v510 = $0"
            let v517 : bool = Fable.Core.RustInterop.emitRustExpr v509 v516 
            let _run_target_args'_v511 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v511 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v511 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v511 = false 
            #endif
#else
            let _run_target_args'_v511 = false 
            #endif
            let v518 : bool = _run_target_args'_v511 
            let v520 : string = $"true; _fix_closure_v510 " + v508 + "); " + v48 + " // rust.fix_closure'"
            let v521 : bool = Fable.Core.RustInterop.emitRustExpr () v520 
            let v522 : string = "__future_init"
            let v523 : _ = Fable.Core.RustInterop.emitRustExpr () v522 
            let v524 : string = "v523"
            let v525 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v524 
            let func1_from_result = v525 //
            let v526 : _ = func1_from_result
            let v527 : string = $"true; $0 /*"
            let v528 : bool = Fable.Core.RustInterop.emitRustExpr v526 v527 
            let v529 : string = $"*/ }}); //"
            let v530 : bool = Fable.Core.RustInterop.emitRustExpr () v529 
            let v531 : string = $"_func1_from_v188"
            let v532 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v531 
            let v533 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v534 : (struct (string * US23 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>) = closure65(v532)
            let v535 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v142, v534) v533 
            let v536 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = method81(v535)
            let v537 : string = "futures::future::try_join_all(v536)"
            let v538 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v537 
            let v539 : string = "v538.await"
            let v540 : Result<Vec<Heap4 option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v539 
            let v541 : string = "$0?"
            let v542 : Vec<Heap4 option> = Fable.Core.RustInterop.emitRustExpr v540 v541 
            US24_0(v542)
        | _ ->
            let v544 : string = "database=None"
            (* run_target_args'
            let v545 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v546 : string = "&*$0"
            let v547 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v544 v546 
            let _run_target_args'_v545 = v547 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v548 : string = "&*$0"
            let v549 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v544 v548 
            let _run_target_args'_v545 = v549 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v550 : string = "&*$0"
            let v551 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v544 v550 
            let _run_target_args'_v545 = v551 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v552 : Ref<Str> = v544 |> unbox<Ref<Str>>
            let _run_target_args'_v545 = v552 
            #endif
#if FABLE_COMPILER_PYTHON
            let v555 : Ref<Str> = v544 |> unbox<Ref<Str>>
            let _run_target_args'_v545 = v555 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v558 : Ref<Str> = v544 |> unbox<Ref<Str>>
            let _run_target_args'_v545 = v558 
            #endif
#else
            let v561 : Ref<Str> = v544 |> unbox<Ref<Str>>
            let _run_target_args'_v545 = v561 
            #endif
            let v564 : Ref<Str> = _run_target_args'_v545 
            (* run_target_args'
            let v569 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v570 : string = "String::from($0)"
            let v571 : std_string_String = Fable.Core.RustInterop.emitRustExpr v564 v570 
            let _run_target_args'_v569 = v571 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v572 : string = "String::from($0)"
            let v573 : std_string_String = Fable.Core.RustInterop.emitRustExpr v564 v572 
            let _run_target_args'_v569 = v573 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v574 : string = "String::from($0)"
            let v575 : std_string_String = Fable.Core.RustInterop.emitRustExpr v564 v574 
            let _run_target_args'_v569 = v575 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v576 : std_string_String = v564 |> unbox<std_string_String>
            let _run_target_args'_v569 = v576 
            #endif
#if FABLE_COMPILER_PYTHON
            let v579 : std_string_String = v564 |> unbox<std_string_String>
            let _run_target_args'_v569 = v579 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v582 : std_string_String = v564 |> unbox<std_string_String>
            let _run_target_args'_v569 = v582 
            #endif
#else
            let v585 : std_string_String = v564 |> unbox<std_string_String>
            let _run_target_args'_v569 = v585 
            #endif
            let v588 : std_string_String = _run_target_args'_v569 
            US24_1(v588)
    let v600 : Result<Vec<Heap4 option>, std_string_String> =
        match v594 with
        | US24_1(v597) -> (* Error *)
            let v598 : Result<Vec<Heap4 option>, std_string_String> = Error v597 
            v598
        | US24_0(v595) -> (* Ok *)
            let v596 : Result<Vec<Heap4 option>, std_string_String> = Ok v595 
            v596
    let v601 : string = $"%A{v600}"
    let v604 : string = "state_core.use_requests (4) / state_data_resource new_local_resource / result: " + string v601 + ""
    let v605 : int64 = 200L
    let v606 : string = method8(v605, v604)
    let v607 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v608 : bool = Fable.Core.RustInterop.emitRustExpr v606 v607 
    let v609 : string = v48 + v49 
    let x = v600 //
    let v610 : _ = x
    let v611 : unit = ()
    (* run_target_args'
    let v612 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v613 : string = $"true; let _fix_closure_v611 = $0"
    let v614 : bool = Fable.Core.RustInterop.emitRustExpr v610 v613 
    let _run_target_args'_v612 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v615 : string = $"true; let _fix_closure_v611 = $0"
    let v616 : bool = Fable.Core.RustInterop.emitRustExpr v610 v615 
    let _run_target_args'_v612 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v617 : string = $"true; let _fix_closure_v611 = $0"
    let v618 : bool = Fable.Core.RustInterop.emitRustExpr v610 v617 
    let _run_target_args'_v612 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v612 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v612 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v612 = false 
    #endif
#else
    let _run_target_args'_v612 = false 
    #endif
    let v619 : bool = _run_target_args'_v612 
    let v621 : string = $"true; _fix_closure_v611 " + v609 + "); " + v48 + " // rust.fix_closure'"
    let v622 : bool = Fable.Core.RustInterop.emitRustExpr () v621 
    let v623 : string = "__future_init"
    let v624 : _ = Fable.Core.RustInterop.emitRustExpr () v623 
    let v625 : string = "v624"
    let v626 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v625 
    let v627 : string = $"true; $0 /*"
    let v628 : bool = Fable.Core.RustInterop.emitRustExpr v626 v627 
    let v629 : string = $"*/ }}); //"
    let v630 : bool = Fable.Core.RustInterop.emitRustExpr () v629 
    let v631 : string = $"_func0_from_v125"
    let v632 : Func0<std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v631 
    let v633 : string = "leptos::prelude::ArcLocalResource::new(|| async move { $0().await })"
    let v634 : leptos_prelude_ArcLocalResource<Result<Vec<Heap4 option>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v632 v633 
    let v635 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v636 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = closure66(v634)
    let v637 : leptos_prelude_ArcMemo<Result<Vec<Heap4 option>, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr v636 v635 
    let v638 : unit = ()
    let v639 : string = $"true; let _func0_from_v638 = Func0::from(move || {{ //"
    let v640 : bool = Fable.Core.RustInterop.emitRustExpr () v639 
    let v641 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v642 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v641 
    let v643 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v644 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v637 v643 
    let v645 : string = $"%A{v642}"
    let v648 : int64 = 400L
    let v649 : string = method8(v648, v645)
    let v650 : string = "state_core.use_requests (7) / json new_local_resource / requests: " + string v649 + ""
    let v651 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v652 : bool = Fable.Core.RustInterop.emitRustExpr v650 v651 
    let v653 : string = "true; let __future_init = Box::pin(/*"
    let v654 : bool = Fable.Core.RustInterop.emitRustExpr () v653 
    let v655 : string = "*/ async move { /*"
    let v656 : bool = Fable.Core.RustInterop.emitRustExpr () v655 
    let v657 : string = "*/ //"
    let v658 : bool = Fable.Core.RustInterop.emitRustExpr () v657 
    let v659 : (Result<Vec<Heap4 option>, std_string_String> -> US26) = method82()
    let v660 : US26 option = v644 |> Option.map v659 
    let v671 : US26 = US26_1
    let v672 : US26 = v660 |> Option.defaultValue v671 
    let v714 : US27 =
        match v672 with
        | US26_1 -> (* None *)
            US27_1
        | US26_0(v676) -> (* Some *)
            let v677 : (Vec<Heap4 option> -> US24) = method83()
            let v678 : (std_string_String -> US24) = method84()
            let v679 : US24 = match v676 with Ok x -> v677 x | Error x -> v678 x
            let v710 : US28 =
                match v679 with
                | US24_1(v707) -> (* Error *)
                    US28_1(v707)
                | US24_0(v680) -> (* Ok *)
                    let v681 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v682 : bool = Fable.Core.RustInterop.emitRustExpr v680 v681 
                    let v683 : string = "x"
                    let v684 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v683 
                    let v685 : (Heap4 -> US25) = method85()
                    let v686 : US25 option = v684 |> Option.map v685 
                    let v697 : US25 = US25_1
                    let v698 : US25 = v686 |> Option.defaultValue v697 
                    let v702 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v703 : bool = Fable.Core.RustInterop.emitRustExpr v698 v702 
                    let v704 : string = "_vec_map"
                    let v705 : Vec<US25> = Fable.Core.RustInterop.emitRustExpr () v704 
                    US28_0(v705)
            US27_0(v710)
    let v715 : string = $"%A{v714}"
    let v718 : int64 = 400L
    let v719 : string = method8(v718, v715)
    let v720 : string = "state_core.use_requests (8) / result_memo / state_data: " + string v719 + ""
    let v721 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v722 : bool = Fable.Core.RustInterop.emitRustExpr v720 v721 
    let v723 : (int32 -> (struct (string * US23 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>)) = method86(v714)
    let v724 : Vec<struct (string * US23 * string * bool * bool)> = method96(v642)
    let v725 : string = "v724.iter().enumerate().map(|(i, x)| v723(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v726 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v725 
    let v727 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = method97(v726)
    let v728 : string = "futures::future::try_join_all(v727)"
    let v729 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v728 
    let v730 : string = "v729.await"
    let v731 : Result<Vec<string option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v730 
    let v732 : string = "$0?"
    let v733 : Vec<string option> = Fable.Core.RustInterop.emitRustExpr v731 v732 
    let v734 : Result<Vec<string option>, std_string_String> = Ok v733 
    let v735 : string = v48 + v49 
    let x = v734 //
    let v736 : _ = x
    let v737 : unit = ()
    (* run_target_args'
    let v738 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v739 : string = $"true; let _fix_closure_v737 = $0"
    let v740 : bool = Fable.Core.RustInterop.emitRustExpr v736 v739 
    let _run_target_args'_v738 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v741 : string = $"true; let _fix_closure_v737 = $0"
    let v742 : bool = Fable.Core.RustInterop.emitRustExpr v736 v741 
    let _run_target_args'_v738 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v743 : string = $"true; let _fix_closure_v737 = $0"
    let v744 : bool = Fable.Core.RustInterop.emitRustExpr v736 v743 
    let _run_target_args'_v738 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v738 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v738 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v738 = false 
    #endif
#else
    let _run_target_args'_v738 = false 
    #endif
    let v745 : bool = _run_target_args'_v738 
    let v747 : string = $"true; _fix_closure_v737 " + v735 + "); " + v48 + " // rust.fix_closure'"
    let v748 : bool = Fable.Core.RustInterop.emitRustExpr () v747 
    let v749 : string = "__future_init"
    let v750 : _ = Fable.Core.RustInterop.emitRustExpr () v749 
    let v751 : string = "v750"
    let v752 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v751 
    let v753 : string = $"true; $0 /*"
    let v754 : bool = Fable.Core.RustInterop.emitRustExpr v752 v753 
    let v755 : string = $"*/ }}); //"
    let v756 : bool = Fable.Core.RustInterop.emitRustExpr () v755 
    let v757 : string = $"_func0_from_v638"
    let v758 : Func0<std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v757 
    let v759 : string = "leptos::prelude::ArcLocalResource::new(|| async move { $0().await })"
    let v760 : leptos_prelude_ArcLocalResource<Result<Vec<string option>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v758 v759 
    let v761 : unit = ()
    let v762 : string = $"true; let _func1_from_v761 = Func1::from(move |value| {{ //"
    let v763 : bool = Fable.Core.RustInterop.emitRustExpr () v762 
    let v764 : string = $"value"
    let v765 : Heap4 = Fable.Core.RustInterop.emitRustExpr () v764 
    let v766 : string = $"%A{v765}"
    let v769 : int64 = System.Convert.ToInt64 v766.Length
    let v770 : string = "state_core.use_requests (10) / set_state_data_action / value_len: " + string v769 + ""
    let v771 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v772 : bool = Fable.Core.RustInterop.emitRustExpr v770 v771 
    let v773 : string = "true; let __future_init = Box::pin(/*"
    let v774 : bool = Fable.Core.RustInterop.emitRustExpr () v773 
    let v775 : string = "*/ async move { /*"
    let v776 : bool = Fable.Core.RustInterop.emitRustExpr () v775 
    let v777 : string = "*/ //"
    let v778 : bool = Fable.Core.RustInterop.emitRustExpr () v777 
    let v779 : string = "Box::pin($0)"
    let v780 : std_pin_Pin<Box<leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>>>> = Fable.Core.RustInterop.emitRustExpr v0 v779 
    let v781 : string = $"leptos::prelude::ArcMemo::get_untracked(&$0)"
    let v782 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v780 v781 
    let v783 : string = "Box::pin($0)"
    let v784 : std_pin_Pin<Box<leptos_prelude_ArcMemo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option>>> = Fable.Core.RustInterop.emitRustExpr v124 v783 
    let v785 : string = $"leptos::prelude::ArcMemo::get_untracked(&$0)"
    let v786 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr v784 v785 
    let v787 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v788 : bool = Fable.Core.RustInterop.emitRustExpr v786 v787 
    let v789 : string = "x"
    let v790 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v789 
    let v791 : string = "$0.0"
    let v792 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v790 v791 
    let v793 : string = "true; $0 })"
    let v794 : bool = Fable.Core.RustInterop.emitRustExpr v792 v793 
    let v795 : string = "_optionm_map_"
    let v796 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v795 
    let v797 : (std_sync_Arc<rexie_Rexie> -> US2) = method9()
    let v798 : US2 option = v796 |> Option.map v797 
    let v809 : US2 = US2_1
    let v810 : US2 = v798 |> Option.defaultValue v809 
    let v970 : US34 =
        match v810 with
        | US2_0(v814) -> (* Some *)
            let v815 : unit = ()
            let v816 : string = $"true; let _func1_from_v815 = Func1::from(move |value| {{ //"
            let v817 : bool = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = $"value"
            let struct (v819 : string, v820 : US23, v821 : string, v822 : bool, v823 : bool) = Fable.Core.RustInterop.emitRustExpr () v818 
            let v824 : string = "true; let __future_init = Box::pin(/*"
            let v825 : bool = Fable.Core.RustInterop.emitRustExpr () v824 
            let v826 : string = "*/ async move { /*"
            let v827 : bool = Fable.Core.RustInterop.emitRustExpr () v826 
            let v828 : string = "*/ //"
            let v829 : bool = Fable.Core.RustInterop.emitRustExpr () v828 
            let v830 : string = "state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: " + v819 + ""
            let v831 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
            let v833 : string = "url[" + v819 + "](" + $"%A{v821}" + ")"
            let v834 : string = $"%A{v765}"
            let v837 : int64 = System.Convert.ToInt64 v834.Length
            let v838 : string = "state_core.set_data () / data_len: " + string v837 + ""
            let v839 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v840 : bool = Fable.Core.RustInterop.emitRustExpr v838 v839 
            let v841 : string = "true; let __future_init = Box::pin(/*"
            let v842 : bool = Fable.Core.RustInterop.emitRustExpr () v841 
            let v843 : string = "*/ async move { /*"
            let v844 : bool = Fable.Core.RustInterop.emitRustExpr () v843 
            let v845 : string = "*/ //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr () v845 
            let v847 : string = "true; let mut data = Vec::new()"
            let v848 : bool = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = "true; borsh::BorshSerialize::serialize(&$0, &mut data).unwrap()"
            let v850 : bool = Fable.Core.RustInterop.emitRustExpr v765 v849 
            let v851 : string = "data"
            let v852 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v851 
            let v853 : string = "serde_wasm_bindgen::to_value(&v852).unwrap()"
            let v854 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr () v853 
            let v855 : string = method98(v833)
            (* run_target_args'
            let v856 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v857 : string = "&*$0"
            let v858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v855 v857 
            let _run_target_args'_v856 = v858 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v859 : string = "&*$0"
            let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v855 v859 
            let _run_target_args'_v856 = v860 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v861 : string = "&*$0"
            let v862 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v855 v861 
            let _run_target_args'_v856 = v862 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v863 : Ref<Str> = v855 |> unbox<Ref<Str>>
            let _run_target_args'_v856 = v863 
            #endif
#if FABLE_COMPILER_PYTHON
            let v866 : Ref<Str> = v855 |> unbox<Ref<Str>>
            let _run_target_args'_v856 = v866 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v869 : Ref<Str> = v855 |> unbox<Ref<Str>>
            let _run_target_args'_v856 = v869 
            #endif
#else
            let v872 : Ref<Str> = v855 |> unbox<Ref<Str>>
            let _run_target_args'_v856 = v872 
            #endif
            let v875 : Ref<Str> = _run_target_args'_v856 
            let v880 : string = "$0.transaction(&[\"store\"], rexie::TransactionMode::ReadWrite)?"
            let v881 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v814 v880 
            let v882 : string = "v881.store(\"store\")?"
            let v883 : rexie_Store = Fable.Core.RustInterop.emitRustExpr () v882 
            let v884 : string = "true; v883.put(&v854, Some(&$0.into())).await?"
            let v885 : bool = Fable.Core.RustInterop.emitRustExpr v875 v884 
            let v886 : string = "true; v881.done().await?"
            let v887 : bool = Fable.Core.RustInterop.emitRustExpr () v886 
            let v888 : Result<unit, rexie_Error> = Ok () 
            let v889 : string = v48 + v49 
            let x = v888 //
            let v890 : _ = x
            let v891 : unit = ()
            (* run_target_args'
            let v892 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v893 : string = $"true; let _fix_closure_v891 = $0"
            let v894 : bool = Fable.Core.RustInterop.emitRustExpr v890 v893 
            let _run_target_args'_v892 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v895 : string = $"true; let _fix_closure_v891 = $0"
            let v896 : bool = Fable.Core.RustInterop.emitRustExpr v890 v895 
            let _run_target_args'_v892 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v897 : string = $"true; let _fix_closure_v891 = $0"
            let v898 : bool = Fable.Core.RustInterop.emitRustExpr v890 v897 
            let _run_target_args'_v892 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v892 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v892 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v892 = false 
            #endif
#else
            let _run_target_args'_v892 = false 
            #endif
            let v899 : bool = _run_target_args'_v892 
            let v901 : string = $"true; _fix_closure_v891 " + v889 + "); " + v48 + " // rust.fix_closure'"
            let v902 : bool = Fable.Core.RustInterop.emitRustExpr () v901 
            let v903 : string = "__future_init"
            let v904 : _ = Fable.Core.RustInterop.emitRustExpr () v903 
            let v905 : string = "v904"
            let v906 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v905 
            let v907 : string = "v906.await"
            let v908 : Result<unit, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v907 
            let v909 : (rexie_Error -> std_string_String) = method99()
            (* run_target_args'
            let v910 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v911 : string = "$0.map_err(|x| $1(x))"
            let v912 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v908, v909) v911 
            let _run_target_args'_v910 = v912 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v913 : string = "$0.map_err(|x| $1(x))"
            let v914 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v908, v909) v913 
            let _run_target_args'_v910 = v914 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v915 : string = "$0.map_err(|x| $1(x))"
            let v916 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v908, v909) v915 
            let _run_target_args'_v910 = v916 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v917 : Result<unit, std_string_String> = match v908 with Ok x -> Ok x | Error x -> Error (v909 x)
            let _run_target_args'_v910 = v917 
            #endif
#if FABLE_COMPILER_PYTHON
            let v918 : Result<unit, std_string_String> = match v908 with Ok x -> Ok x | Error x -> Error (v909 x)
            let _run_target_args'_v910 = v918 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v919 : Result<unit, std_string_String> = match v908 with Ok x -> Ok x | Error x -> Error (v909 x)
            let _run_target_args'_v910 = v919 
            #endif
#else
            let v920 : Result<unit, std_string_String> = match v908 with Ok x -> Ok x | Error x -> Error (v909 x)
            let _run_target_args'_v910 = v920 
            #endif
            let v921 : Result<unit, std_string_String> = _run_target_args'_v910 
            let v924 : string = "true; $0?"
            let v925 : bool = Fable.Core.RustInterop.emitRustExpr v921 v924 
            
            let v926 : Result<unit, std_string_String> = Ok () 
            let v927 : string = v48 + v49 
            let x = v926 //
            let v928 : _ = x
            let v929 : unit = ()
            (* run_target_args'
            let v930 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v931 : string = $"true; let _fix_closure_v929 = $0"
            let v932 : bool = Fable.Core.RustInterop.emitRustExpr v928 v931 
            let _run_target_args'_v930 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v933 : string = $"true; let _fix_closure_v929 = $0"
            let v934 : bool = Fable.Core.RustInterop.emitRustExpr v928 v933 
            let _run_target_args'_v930 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v935 : string = $"true; let _fix_closure_v929 = $0"
            let v936 : bool = Fable.Core.RustInterop.emitRustExpr v928 v935 
            let _run_target_args'_v930 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v930 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v930 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v930 = false 
            #endif
#else
            let _run_target_args'_v930 = false 
            #endif
            let v937 : bool = _run_target_args'_v930 
            let v939 : string = $"true; _fix_closure_v929 " + v927 + "); " + v48 + " // rust.fix_closure'"
            let v940 : bool = Fable.Core.RustInterop.emitRustExpr () v939 
            let v941 : string = "__future_init"
            let v942 : _ = Fable.Core.RustInterop.emitRustExpr () v941 
            let v943 : string = "v942"
            let v944 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v943 
            let func1_from_result = v944 //
            let v945 : _ = func1_from_result
            let v946 : string = $"true; $0 /*"
            let v947 : bool = Fable.Core.RustInterop.emitRustExpr v945 v946 
            let v948 : string = $"*/ }}); //"
            let v949 : bool = Fable.Core.RustInterop.emitRustExpr () v948 
            let v950 : string = $"_func1_from_v815"
            let v951 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v950 
            let v952 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v953 : (struct (string * US23 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>) = closure76(v951)
            let v954 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v782, v953) v952 
            let v955 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = method101(v954)
            let v956 : string = "futures::future::try_join_all(v955)"
            let v957 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v956 
            let v958 : string = "v957.await"
            let v959 : Result<Vec<unit>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v958 
            let v960 : string = "$0?"
            let v961 : Vec<unit> = Fable.Core.RustInterop.emitRustExpr v959 v960 
            US34_0(v961)
        | _ ->
            let v963 : string = "state_core.use_requests (12) / set_state_data_action / database,request=None"
            let v964 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v965 : bool = Fable.Core.RustInterop.emitRustExpr v963 v964 
            let v966 : (unit []) = [||]
            let v967 : string = "$0.to_vec()"
            let v968 : Vec<unit> = Fable.Core.RustInterop.emitRustExpr v966 v967 
            US34_0(v968)
    let v976 : Result<Vec<unit>, std_string_String> =
        match v970 with
        | US34_1(v973) -> (* Error *)
            let v974 : Result<Vec<unit>, std_string_String> = Error v973 
            v974
        | US34_0(v971) -> (* Ok *)
            let v972 : Result<Vec<unit>, std_string_String> = Ok v971 
            v972
    let v977 : string = v48 + v49 
    let x = v976 //
    let v978 : _ = x
    let v979 : unit = ()
    (* run_target_args'
    let v980 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v981 : string = $"true; let _fix_closure_v979 = $0"
    let v982 : bool = Fable.Core.RustInterop.emitRustExpr v978 v981 
    let _run_target_args'_v980 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v983 : string = $"true; let _fix_closure_v979 = $0"
    let v984 : bool = Fable.Core.RustInterop.emitRustExpr v978 v983 
    let _run_target_args'_v980 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v985 : string = $"true; let _fix_closure_v979 = $0"
    let v986 : bool = Fable.Core.RustInterop.emitRustExpr v978 v985 
    let _run_target_args'_v980 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v980 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v980 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v980 = false 
    #endif
#else
    let _run_target_args'_v980 = false 
    #endif
    let v987 : bool = _run_target_args'_v980 
    let v989 : string = $"true; _fix_closure_v979 " + v977 + "); " + v48 + " // rust.fix_closure'"
    let v990 : bool = Fable.Core.RustInterop.emitRustExpr () v989 
    let v991 : string = "__future_init"
    let v992 : _ = Fable.Core.RustInterop.emitRustExpr () v991 
    let v993 : string = "v992"
    let v994 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v993 
    let func1_from_result = v994 //
    let v995 : _ = func1_from_result
    let v996 : string = $"true; $0 /*"
    let v997 : bool = Fable.Core.RustInterop.emitRustExpr v995 v996 
    let v998 : string = $"*/ }}); //"
    let v999 : bool = Fable.Core.RustInterop.emitRustExpr () v998 
    let v1000 : string = $"_func1_from_v761"
    let v1001 : Func0<Heap4, std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v1000 
    let v1002 : string = "leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone()))"
    let v1003 : (Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>) = closure77(v1001)
    let v1004 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1003 v1002 
    let v1005 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v1006 : (unit -> (Result<crate_model_near_nearblocks_Root option, std_string_String> [])) = closure78(v0, v637, v760, v1004)
    let v1007 : leptos_prelude_ArcMemo<(Result<crate_model_near_nearblocks_Root option, std_string_String> [])> = Fable.Core.RustInterop.emitRustExpr v1006 v1005 
    let v1008 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v1009 : (unit -> Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>) = closure87(v1, v121, v634, v1007)
    let v1010 : leptos_prelude_ArcMemo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1009 v1008 
    v1010
and closure91 () (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option) : US43 =
    US43_0(v0)
and method115 () : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option -> US43) =
    closure91()
and closure92 () (v0 : std_string_String) : US43 =
    US43_1(v0)
and method116 () : (std_string_String -> US43) =
    closure92()
and method117 (v0 : Func0<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>, US43>) : Func0<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>, US43> =
    v0
and closure93 (v0 : Func0<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>, US43>) (v1 : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>) : US43 =
    let v2 : Func0<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>, US43> = method117(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : US43 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and closure94 () (v0 : (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) : US45 =
    US45_0(v0)
and method118 () : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) -> US45) =
    closure94()
and method119 (v0 : Func0<US43, US44>) : Func0<US43, US44> =
    v0
and closure95 (v0 : Func0<US43, US44>) (v1 : US43) : US44 =
    let v2 : Func0<US43, US44> = method119(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : US44 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and closure96 () (v0 : US44) : bool =
    match v0 with
    | US44_0(v1) -> (* Ok *)
        match v1 with
        | US45_1 -> (* None *)
            true
        | _ ->
            false
    | _ ->
        false
and method120 () : (US44 -> bool) =
    closure96()
and method121 (v0 : Vec<US44>) : Vec<US44> =
    v0
and method123 (v0 : Func0<(unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))), struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))>) : Func0<(unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))), struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> =
    v0
and closure99 (v0 : Func0<(unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))), struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))>) (v1 : (unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])))) : struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) =
    let v2 : Func0<(unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))), struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = method123(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : unativeint, v6 : std_string_String, v7 : std_string_String, v8 : std_string_String, v9 : std_string_String, v10 : std_string_String, v11 : std_string_String, v12 : uint32, v13 : (struct (std_string_String * std_string_String option) []), v14 : float, v15 : bool, v16 : float, v17 : (std_string_String [])) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17)
and method124 (v0 : Func0<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])), struct (string * unativeint * Heap5)>) : Func0<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])), struct (string * unativeint * Heap5)> =
    v0
and closure100 (v0 : Func0<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])), struct (string * unativeint * Heap5)>) struct (v1 : unativeint, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : uint32, v9 : (struct (std_string_String * std_string_String option) []), v10 : float, v11 : bool, v12 : float, v13 : (std_string_String [])) : struct (string * unativeint * Heap5) =
    let v14 : Func0<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])), struct (string * unativeint * Heap5)> = method124(v0)
    let func1_move_x = struct (v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13) //
    let v15 : _ = func1_move_x
    let v16 : string = "(move |x| v14(x))($0)"
    let struct (v17 : string, v18 : unativeint, v19 : Heap5) = Fable.Core.RustInterop.emitRustExpr v15 v16 
    struct (v17, v18, v19)
and closure98 (v0 : (string []), v1 : int32) (v2 : US44) : US48 =
    let v3 : string = v0.[int v1]
    match v2 with
    | US44_1(v108) -> (* Error *)
        US48_1(v108)
    | US44_0(v4) -> (* Ok *)
        let v106 : US49 =
            match v4 with
            | US45_1 -> (* None *)
                US49_1
            | US45_0(v5) -> (* Some *)
                let v6 : string = "$0.to_vec()"
                let v7 : Vec<struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr v5 v6 
                let v8 : string = "v7.into_iter()"
                let v9 : _ = Fable.Core.RustInterop.emitRustExpr () v8 
                let v10 : string = "v9.enumerate().map(std::sync::Arc::new)"
                let v11 : _ = Fable.Core.RustInterop.emitRustExpr () v10 
                let v12 : string = "$0.collect::<Vec<_>>()"
                let v13 : Vec<(unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])))> = Fable.Core.RustInterop.emitRustExpr v11 v12 
                let v14 : unit = ()
                let v15 : string = $"true; let _func1_from_v14 = Func1::from(move |value| {{ //"
                let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
                let v17 : string = $"value"
                let v18 : (unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) = Fable.Core.RustInterop.emitRustExpr () v17 
                let (a, b) = v18 
                let v19 : unativeint = a
                let struct (v20 : std_string_String, v21 : std_string_String, v22 : std_string_String, v23 : std_string_String, v24 : std_string_String, v25 : std_string_String, v26 : uint32, v27 : (struct (std_string_String * std_string_String option) []), v28 : float, v29 : bool, v30 : float, v31 : (std_string_String [])) = b
                let func1_from_result = struct (v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31) //
                let v58 : _ = func1_from_result
                let v59 : string = $"true; $0 /*"
                let v60 : bool = Fable.Core.RustInterop.emitRustExpr v58 v59 
                let v61 : string = $"*/ }}); //"
                let v62 : bool = Fable.Core.RustInterop.emitRustExpr () v61 
                let v63 : string = $"_func1_from_v14"
                let v64 : Func0<(unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))), struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr () v63 
                let v65 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v66 : ((unativeint * struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) -> struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))) = closure99(v64)
                let v67 : Vec<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr struct (v13, v66) v65 
                let v68 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v69 : (struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) = Fable.Core.RustInterop.emitRustExpr v67 v68 
                let v70 : string = "$0.to_vec()"
                let v71 : Vec<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String []))> = Fable.Core.RustInterop.emitRustExpr v69 v70 
                let v72 : unit = ()
                let v73 : string = $"true; let _func1_from_v72 = Func1::from(move |value| {{ //"
                let v74 : bool = Fable.Core.RustInterop.emitRustExpr () v73 
                let v75 : string = $"value"
                let struct (v76 : unativeint, v77 : std_string_String, v78 : std_string_String, v79 : std_string_String, v80 : std_string_String, v81 : std_string_String, v82 : std_string_String, v83 : uint32, v84 : (struct (std_string_String * std_string_String option) []), v85 : float, v86 : bool, v87 : float, v88 : (std_string_String [])) = Fable.Core.RustInterop.emitRustExpr () v75 
                let v89 : unativeint = v1 |> unativeint 
                let v92 : Heap5 = {l0 = v77; l1 = v78; l2 = v79; l3 = v80; l4 = v81; l5 = v82; l6 = v83; l7 = v84; l8 = v85; l9 = v86; l10 = v87; l11 = v88} : Heap5
                let func1_from_result = struct (v3, v89, v92) //
                let v93 : _ = func1_from_result
                let v94 : string = $"true; $0 /*"
                let v95 : bool = Fable.Core.RustInterop.emitRustExpr v93 v94 
                let v96 : string = $"*/ }}); //"
                let v97 : bool = Fable.Core.RustInterop.emitRustExpr () v96 
                let v98 : string = $"_func1_from_v72"
                let v99 : Func0<struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])), struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v98 
                let v100 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v101 : (struct (unativeint * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) -> struct (string * unativeint * Heap5)) = closure100(v99)
                let v102 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr struct (v71, v101) v100 
                US49_0(v102)
        US48_0(v106)
and closure97 (v0 : (string [])) (v1 : int32) : (US44 -> US48) =
    closure98(v0, v1)
and method122 (v0 : (string [])) : (int32 -> (US44 -> US48)) =
    closure97(v0)
and method125 (v0 : Vec<US44>) : Vec<US44> =
    v0
and method126 (v0 : Func0<US48, US50>) : Func0<US48, US50> =
    v0
and closure101 (v0 : Func0<US48, US50>) (v1 : US48) : US50 =
    let v2 : Func0<US48, US50> = method126(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : US50 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method127 (v0 : Func0<US50, Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>>) : Func0<US50, Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>> =
    v0
and closure102 (v0 : Func0<US50, Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>>) (v1 : US50) : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> =
    let v2 : Func0<US50, Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>> = method127(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method128 (v0 : int32, v1 : Mut1) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure103 () (v0 : Vec<struct (string * unativeint * Heap5)> option) : US50 =
    US50_0(v0)
and method130 () : (Vec<struct (string * unativeint * Heap5)> option -> US50) =
    closure103()
and closure104 () (v0 : std_string_String) : US50 =
    US50_1(v0)
and method131 () : (std_string_String -> US50) =
    closure104()
and closure105 () (v0 : Vec<struct (string * unativeint * Heap5)>) : US49 =
    US49_0(v0)
and method132 () : (Vec<struct (string * unativeint * Heap5)> -> US49) =
    closure105()
and method133 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and method134 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and method129 (v0 : UH2, v1 : US51) : US51 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : (Vec<struct (string * unativeint * Heap5)> option -> US50) = method130()
        let v5 : (std_string_String -> US50) = method131()
        let v6 : US50 = match v2 with Ok x -> v4 x | Error x -> v5 x
        let v29 : US48 =
            match v6 with
            | US50_1(v26) -> (* Error *)
                US48_1(v26)
            | US50_0(v7) -> (* Ok *)
                let v8 : (Vec<struct (string * unativeint * Heap5)> -> US49) = method132()
                let v9 : US49 option = v7 |> Option.map v8 
                let v20 : US49 = US49_1
                let v21 : US49 = v9 |> Option.defaultValue v20 
                US48_0(v21)
        let v50 : US51 =
            match v1 with
            | US51_0(v30) -> (* Ok *)
                match v29 with
                | US48_1(v43) -> (* Error *)
                    US51_1(v43)
                | US48_0(v31) -> (* Ok *)
                    match v31 with
                    | US49_0(v32) -> (* Some *)
                        let v33 : Vec<struct (string * unativeint * Heap5)> = method133(v32)
                        let v34 : Vec<struct (string * unativeint * Heap5)> = method134(v30)
                        let v35 : string = "true; let mut v34 = v34"
                        let v36 : bool = Fable.Core.RustInterop.emitRustExpr () v35 
                        let v37 : string = "true; v34.extend(v33)"
                        let v38 : bool = Fable.Core.RustInterop.emitRustExpr () v37 
                        let v39 : string = "v34"
                        let v40 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v39 
                        US51_0(v40)
                    | _ ->
                        v1
            | _ ->
                match v29 with
                | US48_1(v47) -> (* Error *)
                    US51_1(v47)
                | _ ->
                    v1
        method129(v3, v50)
    | UH2_0 -> (* Nil *)
        v1
and method135 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and closure106 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : std_string_String =
    let v3 : std_string_String = v2.l5
    v3
and method136 () : (struct (string * unativeint * Heap5) -> std_string_String) =
    closure106()
and method137 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and closure90 (v0 : leptos_prelude_ArcMemo<(string [])>, v1 : leptos_prelude_ArcMemo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>>) () : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> =
    let v2 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v3 : Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : unit = ()
    let v5 : string = $"true; let _func1_from_v4 = Func1::from(move |value| {{ //"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr () v5 
    let v7 : string = $"value"
    let v8 : Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option -> US43) = method115()
    let v10 : (std_string_String -> US43) = method116()
    let v11 : US43 = match v8 with Ok x -> v9 x | Error x -> v10 x
    let func1_from_result = v11 //
    let v12 : _ = func1_from_result
    let v13 : string = $"true; $0 /*"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr v12 v13 
    let v15 : string = $"*/ }}); //"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = $"_func1_from_v4"
    let v18 : Func0<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>, US43> = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v20 : (Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String> -> US43) = closure93(v18)
    let v21 : Vec<US43> = Fable.Core.RustInterop.emitRustExpr struct (v3, v20) v19 
    let v22 : unit = ()
    let v23 : string = $"true; let _func1_from_v22 = Func1::from(move |value| {{ //"
    let v24 : bool = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : string = $"value"
    let v26 : US43 = Fable.Core.RustInterop.emitRustExpr () v25 
    let v49 : US44 =
        match v26 with
        | US43_1(v46) -> (* Error *)
            US44_1(v46)
        | US43_0(v27) -> (* Ok *)
            let v28 : ((struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) -> US45) = method118()
            let v29 : US45 option = v27 |> Option.map v28 
            let v40 : US45 = US45_1
            let v41 : US45 = v29 |> Option.defaultValue v40 
            US44_0(v41)
    let func1_from_result = v49 //
    let v50 : _ = func1_from_result
    let v51 : string = $"true; $0 /*"
    let v52 : bool = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let v53 : string = $"*/ }}); //"
    let v54 : bool = Fable.Core.RustInterop.emitRustExpr () v53 
    let v55 : string = $"_func1_from_v22"
    let v56 : Func0<US43, US44> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v58 : (US43 -> US44) = closure95(v56)
    let v59 : Vec<US44> = Fable.Core.RustInterop.emitRustExpr struct (v21, v58) v57 
    let v60 : string = $"%A{v59}"
    let v63 : int64 = 400L
    let v64 : string = method8(v63, v60)
    let v65 : string = "transactions.render (8) / txns move / root: " + string v64 + ""
    let v66 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v67 : bool = Fable.Core.RustInterop.emitRustExpr v65 v66 
    let v68 : (US44 -> bool) = method120()
    let v69 : Vec<US44> = method121(v59)
    let v70 : string = "v69.into_iter().filter(|x| v68(x.clone().clone())).collect::<Vec<_>>()"
    let v71 : Vec<US44> = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v73 : (US44 []) = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let v74 : int32 = v73.Length
    let v75 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v76 : (US44 []) = Fable.Core.RustInterop.emitRustExpr v59 v75 
    let v77 : int32 = v76.Length
    let v78 : bool = v74 = v77
    let v192 : US46 =
        if v78 then
            let v79 : US47 = US47_1
            US46_0(v79)
        else
            let v81 : string = $"leptos::prelude::ArcMemo::get(&$0)"
            let v82 : (string []) = Fable.Core.RustInterop.emitRustExpr v0 v81 
            let v83 : (int32 -> (US44 -> US48)) = method122(v82)
            let v84 : Vec<US44> = method125(v59)
            let v85 : string = "v84.iter().enumerate().map(|(i, x)| v83(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
            let v86 : Vec<US48> = Fable.Core.RustInterop.emitRustExpr () v85 
            let v87 : unit = ()
            let v88 : string = $"true; let _func1_from_v87 = Func1::from(move |value| {{ //"
            let v89 : bool = Fable.Core.RustInterop.emitRustExpr () v88 
            let v90 : string = $"value"
            let v91 : US48 = Fable.Core.RustInterop.emitRustExpr () v90 
            let v104 : US50 =
                match v91 with
                | US48_1(v101) -> (* Error *)
                    US50_1(v101)
                | US48_0(v92) -> (* Ok *)
                    let v99 : Vec<struct (string * unativeint * Heap5)> option =
                        match v92 with
                        | US49_1 -> (* None *)
                            let v97 : Vec<struct (string * unativeint * Heap5)> option = None
                            v97
                        | US49_0(v93) -> (* Some *)
                            let v94 : Vec<struct (string * unativeint * Heap5)> option = Some v93 
                            v94
                    US50_0(v99)
            let func1_from_result = v104 //
            let v105 : _ = func1_from_result
            let v106 : string = $"true; $0 /*"
            let v107 : bool = Fable.Core.RustInterop.emitRustExpr v105 v106 
            let v108 : string = $"*/ }}); //"
            let v109 : bool = Fable.Core.RustInterop.emitRustExpr () v108 
            let v110 : string = $"_func1_from_v87"
            let v111 : Func0<US48, US50> = Fable.Core.RustInterop.emitRustExpr () v110 
            let v112 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v113 : (US48 -> US50) = closure101(v111)
            let v114 : Vec<US50> = Fable.Core.RustInterop.emitRustExpr struct (v86, v113) v112 
            let v115 : unit = ()
            let v116 : string = $"true; let _func1_from_v115 = Func1::from(move |value| {{ //"
            let v117 : bool = Fable.Core.RustInterop.emitRustExpr () v116 
            let v118 : string = $"value"
            let v119 : US50 = Fable.Core.RustInterop.emitRustExpr () v118 
            let v125 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> =
                match v119 with
                | US50_1(v122) -> (* Error *)
                    let v123 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = Error v122 
                    v123
                | US50_0(v120) -> (* Ok *)
                    let v121 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = Ok v120 
                    v121
            let func1_from_result = v125 //
            let v126 : _ = func1_from_result
            let v127 : string = $"true; $0 /*"
            let v128 : bool = Fable.Core.RustInterop.emitRustExpr v126 v127 
            let v129 : string = $"*/ }}); //"
            let v130 : bool = Fable.Core.RustInterop.emitRustExpr () v129 
            let v131 : string = $"_func1_from_v115"
            let v132 : Func0<US50, Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v131 
            let v133 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v134 : (US50 -> Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>) = closure102(v132)
            let v135 : Vec<Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v114, v134) v133 
            let v136 : (struct (string * unativeint * Heap5) []) = [||]
            let v137 : string = "$0.to_vec()"
            let v138 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v136 v137 
            let v139 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v140 : (Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v135 v139 
            let v141 : int32 = v140.Length
            let v142 : UH2 = UH2_0
            let v143 : Mut1 = {l0 = 0; l1 = v142} : Mut1
            while method128(v141, v143) do
                let v145 : int32 = v143.l0
                let v146 : int32 =  -v145
                let v147 : int32 = v146 + v141
                let v148 : int32 = v147 - 1
                let v149 : UH2 = v143.l1
                let v150 : Result<Vec<struct (string * unativeint * Heap5)> option, std_string_String> = v140.[int v148]
                let v151 : int32 = v145 + 1
                let v152 : UH2 = UH2_1(v150, v149)
                v143.l0 <- v151
                v143.l1 <- v152
                ()
            let v153 : UH2 = v143.l1
            let v154 : US51 = US51_0(v138)
            let v155 : US51 = method129(v153, v154)
            let v169 : US51 =
                match v155 with
                | US51_1(v166) -> (* Error *)
                    US51_1(v166)
                | US51_0(v156) -> (* Ok *)
                    let v157 : Vec<struct (string * unativeint * Heap5)> = method135(v156)
                    let v158 : (struct (string * unativeint * Heap5) -> std_string_String) = method136()
                    let v159 : string = "true; let mut v157 = v157"
                    let v160 : bool = Fable.Core.RustInterop.emitRustExpr () v159 
                    let v161 : string = "true; v157.sort_by_key(|x| v158(x.clone()))"
                    let v162 : bool = Fable.Core.RustInterop.emitRustExpr () v161 
                    let v163 : string = "v157"
                    let v164 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v163 
                    US51_0(v164)
            let v184 : US52 =
                match v169 with
                | US51_1(v181) -> (* Error *)
                    US52_1(v181)
                | US51_0(v170) -> (* Ok *)
                    let v171 : Vec<struct (string * unativeint * Heap5)> = method137(v170)
                    let v172 : string = "true; let mut v171 = v171"
                    let v173 : bool = Fable.Core.RustInterop.emitRustExpr () v172 
                    let v174 : string = "true; v171.reverse()"
                    let v175 : bool = Fable.Core.RustInterop.emitRustExpr () v174 
                    let v176 : string = "v171"
                    let v177 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v176 
                    let v178 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v179 : (struct (string * unativeint * Heap5) []) = Fable.Core.RustInterop.emitRustExpr v177 v178 
                    US52_0(v179)
            match v184 with
            | US52_1(v188) -> (* Error *)
                US46_1(v188)
            | US52_0(v185) -> (* Ok *)
                let v186 : US47 = US47_0(v185)
                US46_0(v186)
    let v205 : US53 =
        match v192 with
        | US46_1(v202) -> (* Error *)
            US53_1(v202)
        | US46_0(v193) -> (* Ok *)
            let v200 : (struct (string * unativeint * Heap5) []) option =
                match v193 with
                | US47_1 -> (* None *)
                    let v198 : (struct (string * unativeint * Heap5) []) option = None
                    v198
                | US47_0(v194) -> (* Some *)
                    let v195 : (struct (string * unativeint * Heap5) []) option = Some v194 
                    v195
            US53_0(v200)
    let v211 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> =
        match v205 with
        | US53_1(v208) -> (* Error *)
            let v209 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Error v208 
            v209
        | US53_0(v206) -> (* Ok *)
            let v207 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Ok v206 
            v207
    let v212 : string = $"%A{v211}"
    let v215 : string = "use_transactions.render (9) / txns new_arc_memo / result: " + string v212 + " / loading: " + string v78 + ""
    let v216 : int64 = 200L
    let v217 : string = method8(v216, v215)
    let v218 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v219 : bool = Fable.Core.RustInterop.emitRustExpr v217 v218 
    v211
and closure108 () (v0 : (struct (string * unativeint * Heap5) []) option) : US53 =
    US53_0(v0)
and method138 () : ((struct (string * unativeint * Heap5) []) option -> US53) =
    closure108()
and closure109 () (v0 : std_string_String) : US53 =
    US53_1(v0)
and method139 () : (std_string_String -> US53) =
    closure109()
and closure110 () (v0 : (struct (string * unativeint * Heap5) [])) : US47 =
    US47_0(v0)
and method140 () : ((struct (string * unativeint * Heap5) []) -> US47) =
    closure110()
and closure111 () (v0 : serde_json_Error) : std_string_String =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : std_string_String = _run_target_args'_v1 
    v20
and method141 () : (serde_json_Error -> std_string_String) =
    closure111()
and closure112 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    v2
and method142 () : (std_string_String -> string) =
    closure112()
and method143 (v0 : Result<std_string_String, std_string_String>) : Result<std_string_String, std_string_String> =
    v0
and closure113 () (v0 : string) : struct (string * US23 * string * bool * bool) =
    let v1 : string = "https://rpc.mainnet.near.org"
    let v2 : US23 = US23_1
    struct (v1, v2, v0, true, false)
and method144 () : (string -> struct (string * US23 * string * bool * bool)) =
    closure113()
and method145 (v0 : Result<string, std_string_String>) : Result<string, std_string_String> =
    v0
and method146 (v0 : Func0<struct (string * unativeint * Heap5), Result<struct (string * US23 * string * bool * bool), std_string_String>>) : Func0<struct (string * unativeint * Heap5), Result<struct (string * US23 * string * bool * bool), std_string_String>> =
    v0
and closure114 (v0 : Func0<struct (string * unativeint * Heap5), Result<struct (string * US23 * string * bool * bool), std_string_String>>) struct (v1 : string, v2 : unativeint, v3 : Heap5) : Result<struct (string * US23 * string * bool * bool), std_string_String> =
    let v4 : Func0<struct (string * unativeint * Heap5), Result<struct (string * US23 * string * bool * bool), std_string_String>> = method146(v0)
    let func1_move_x = struct (v1, v2, v3) //
    let v5 : _ = func1_move_x
    let v6 : string = "(move |x| v4(x))($0)"
    let v7 : Result<struct (string * US23 * string * bool * bool), std_string_String> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    v7
and closure107 (v0 : leptos_prelude_ArcMemo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String> =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : ((struct (string * unativeint * Heap5) []) option -> US53) = method138()
    let v4 : (std_string_String -> US53) = method139()
    let v5 : US53 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v28 : US46 =
        match v5 with
        | US53_1(v25) -> (* Error *)
            US46_1(v25)
        | US53_0(v6) -> (* Ok *)
            let v7 : ((struct (string * unativeint * Heap5) []) -> US47) = method140()
            let v8 : US47 option = v6 |> Option.map v7 
            let v19 : US47 = US47_1
            let v20 : US47 = v8 |> Option.defaultValue v19 
            US46_0(v20)
    let v291 : US54 =
        match v28 with
        | US46_1(v288) -> (* Error *)
            US54_1(v288)
        | US46_0(v29) -> (* Ok *)
            match v29 with
            | US47_0(v30) -> (* Some *)
                let v31 : string = "$0.to_vec()"
                let v32 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v30 v31 
                let v33 : unit = ()
                let v34 : string = $"true; let _func1_from_v33 = Func1::from(move |value| {{ //"
                let v35 : bool = Fable.Core.RustInterop.emitRustExpr () v34 
                let v36 : string = $"value"
                let struct (v37 : string, v38 : unativeint, v39 : Heap5) = Fable.Core.RustInterop.emitRustExpr () v36 
                let v40 : string = "2.0"
                (* run_target_args'
                let v41 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v42 : string = "&*$0"
                let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v42 
                let _run_target_args'_v41 = v43 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v44 : string = "&*$0"
                let v45 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v44 
                let _run_target_args'_v41 = v45 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v46 : string = "&*$0"
                let v47 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v46 
                let _run_target_args'_v41 = v47 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v48 : Ref<Str> = v40 |> unbox<Ref<Str>>
                let _run_target_args'_v41 = v48 
                #endif
#if FABLE_COMPILER_PYTHON
                let v51 : Ref<Str> = v40 |> unbox<Ref<Str>>
                let _run_target_args'_v41 = v51 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v54 : Ref<Str> = v40 |> unbox<Ref<Str>>
                let _run_target_args'_v41 = v54 
                #endif
#else
                let v57 : Ref<Str> = v40 |> unbox<Ref<Str>>
                let _run_target_args'_v41 = v57 
                #endif
                let v60 : Ref<Str> = _run_target_args'_v41 
                (* run_target_args'
                let v65 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v66 : string = "String::from($0)"
                let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v66 
                let _run_target_args'_v65 = v67 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v68 : string = "String::from($0)"
                let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v68 
                let _run_target_args'_v65 = v69 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v70 : string = "String::from($0)"
                let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v70 
                let _run_target_args'_v65 = v71 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v72 : std_string_String = v60 |> unbox<std_string_String>
                let _run_target_args'_v65 = v72 
                #endif
#if FABLE_COMPILER_PYTHON
                let v75 : std_string_String = v60 |> unbox<std_string_String>
                let _run_target_args'_v65 = v75 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v78 : std_string_String = v60 |> unbox<std_string_String>
                let _run_target_args'_v65 = v78 
                #endif
#else
                let v81 : std_string_String = v60 |> unbox<std_string_String>
                let _run_target_args'_v65 = v81 
                #endif
                let v84 : std_string_String = _run_target_args'_v65 
                let v89 : string = "dontcare"
                (* run_target_args'
                let v90 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v91 : string = "&*$0"
                let v92 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v89 v91 
                let _run_target_args'_v90 = v92 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v93 : string = "&*$0"
                let v94 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v89 v93 
                let _run_target_args'_v90 = v94 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v95 : string = "&*$0"
                let v96 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v89 v95 
                let _run_target_args'_v90 = v96 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v97 : Ref<Str> = v89 |> unbox<Ref<Str>>
                let _run_target_args'_v90 = v97 
                #endif
#if FABLE_COMPILER_PYTHON
                let v100 : Ref<Str> = v89 |> unbox<Ref<Str>>
                let _run_target_args'_v90 = v100 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v103 : Ref<Str> = v89 |> unbox<Ref<Str>>
                let _run_target_args'_v90 = v103 
                #endif
#else
                let v106 : Ref<Str> = v89 |> unbox<Ref<Str>>
                let _run_target_args'_v90 = v106 
                #endif
                let v109 : Ref<Str> = _run_target_args'_v90 
                (* run_target_args'
                let v114 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v115 : string = "String::from($0)"
                let v116 : std_string_String = Fable.Core.RustInterop.emitRustExpr v109 v115 
                let _run_target_args'_v114 = v116 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v117 : string = "String::from($0)"
                let v118 : std_string_String = Fable.Core.RustInterop.emitRustExpr v109 v117 
                let _run_target_args'_v114 = v118 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v119 : string = "String::from($0)"
                let v120 : std_string_String = Fable.Core.RustInterop.emitRustExpr v109 v119 
                let _run_target_args'_v114 = v120 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v121 : std_string_String = v109 |> unbox<std_string_String>
                let _run_target_args'_v114 = v121 
                #endif
#if FABLE_COMPILER_PYTHON
                let v124 : std_string_String = v109 |> unbox<std_string_String>
                let _run_target_args'_v114 = v124 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v127 : std_string_String = v109 |> unbox<std_string_String>
                let _run_target_args'_v114 = v127 
                #endif
#else
                let v130 : std_string_String = v109 |> unbox<std_string_String>
                let _run_target_args'_v114 = v130 
                #endif
                let v133 : std_string_String = _run_target_args'_v114 
                let v138 : string = "EXPERIMENTAL_tx_status"
                (* run_target_args'
                let v139 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v140 : string = "&*$0"
                let v141 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v138 v140 
                let _run_target_args'_v139 = v141 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v142 : string = "&*$0"
                let v143 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v138 v142 
                let _run_target_args'_v139 = v143 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v144 : string = "&*$0"
                let v145 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v138 v144 
                let _run_target_args'_v139 = v145 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v146 : Ref<Str> = v138 |> unbox<Ref<Str>>
                let _run_target_args'_v139 = v146 
                #endif
#if FABLE_COMPILER_PYTHON
                let v149 : Ref<Str> = v138 |> unbox<Ref<Str>>
                let _run_target_args'_v139 = v149 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v152 : Ref<Str> = v138 |> unbox<Ref<Str>>
                let _run_target_args'_v139 = v152 
                #endif
#else
                let v155 : Ref<Str> = v138 |> unbox<Ref<Str>>
                let _run_target_args'_v139 = v155 
                #endif
                let v158 : Ref<Str> = _run_target_args'_v139 
                (* run_target_args'
                let v163 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v164 : string = "String::from($0)"
                let v165 : std_string_String = Fable.Core.RustInterop.emitRustExpr v158 v164 
                let _run_target_args'_v163 = v165 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v166 : string = "String::from($0)"
                let v167 : std_string_String = Fable.Core.RustInterop.emitRustExpr v158 v166 
                let _run_target_args'_v163 = v167 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v168 : string = "String::from($0)"
                let v169 : std_string_String = Fable.Core.RustInterop.emitRustExpr v158 v168 
                let _run_target_args'_v163 = v169 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v170 : std_string_String = v158 |> unbox<std_string_String>
                let _run_target_args'_v163 = v170 
                #endif
#if FABLE_COMPILER_PYTHON
                let v173 : std_string_String = v158 |> unbox<std_string_String>
                let _run_target_args'_v163 = v173 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v176 : std_string_String = v158 |> unbox<std_string_String>
                let _run_target_args'_v163 = v176 
                #endif
#else
                let v179 : std_string_String = v158 |> unbox<std_string_String>
                let _run_target_args'_v163 = v179 
                #endif
                let v182 : std_string_String = _run_target_args'_v163 
                let v187 : std_string_String = v39.l3
                let v188 : string = "bowen"
                (* run_target_args'
                let v189 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v190 : string = "&*$0"
                let v191 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v188 v190 
                let _run_target_args'_v189 = v191 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v192 : string = "&*$0"
                let v193 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v188 v192 
                let _run_target_args'_v189 = v193 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v194 : string = "&*$0"
                let v195 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v188 v194 
                let _run_target_args'_v189 = v195 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v196 : Ref<Str> = v188 |> unbox<Ref<Str>>
                let _run_target_args'_v189 = v196 
                #endif
#if FABLE_COMPILER_PYTHON
                let v199 : Ref<Str> = v188 |> unbox<Ref<Str>>
                let _run_target_args'_v189 = v199 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v202 : Ref<Str> = v188 |> unbox<Ref<Str>>
                let _run_target_args'_v189 = v202 
                #endif
#else
                let v205 : Ref<Str> = v188 |> unbox<Ref<Str>>
                let _run_target_args'_v189 = v205 
                #endif
                let v208 : Ref<Str> = _run_target_args'_v189 
                (* run_target_args'
                let v213 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v214 : string = "String::from($0)"
                let v215 : std_string_String = Fable.Core.RustInterop.emitRustExpr v208 v214 
                let _run_target_args'_v213 = v215 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v216 : string = "String::from($0)"
                let v217 : std_string_String = Fable.Core.RustInterop.emitRustExpr v208 v216 
                let _run_target_args'_v213 = v217 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v218 : string = "String::from($0)"
                let v219 : std_string_String = Fable.Core.RustInterop.emitRustExpr v208 v218 
                let _run_target_args'_v213 = v219 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v220 : std_string_String = v208 |> unbox<std_string_String>
                let _run_target_args'_v213 = v220 
                #endif
#if FABLE_COMPILER_PYTHON
                let v223 : std_string_String = v208 |> unbox<std_string_String>
                let _run_target_args'_v213 = v223 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v226 : std_string_String = v208 |> unbox<std_string_String>
                let _run_target_args'_v213 = v226 
                #endif
#else
                let v229 : std_string_String = v208 |> unbox<std_string_String>
                let _run_target_args'_v213 = v229 
                #endif
                let v232 : std_string_String = _run_target_args'_v213 
                let v237 : (std_string_String []) = [|v187; v232|]
                let v238 : string = "$0.to_vec()"
                let v239 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v237 v238 
                let v240 : string = "crate::model::near::rpc::RpcInput { jsonrpc: $0, id: $1, method: $2, params: v239 }"
                let v241 : crate_model_near_rpc_RpcInput = Fable.Core.RustInterop.emitRustExpr struct (v84, v133, v182) v240 
                let v242 : string = "serde_json::to_string(&v241)"
                let v243 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v242 
                let v244 : (serde_json_Error -> std_string_String) = method141()
                (* run_target_args'
                let v245 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v246 : string = "$0.map_err(|x| $1(x))"
                let v247 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v243, v244) v246 
                let _run_target_args'_v245 = v247 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v248 : string = "$0.map_err(|x| $1(x))"
                let v249 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v243, v244) v248 
                let _run_target_args'_v245 = v249 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v250 : string = "$0.map_err(|x| $1(x))"
                let v251 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v243, v244) v250 
                let _run_target_args'_v245 = v251 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v252 : Result<std_string_String, std_string_String> = match v243 with Ok x -> Ok x | Error x -> Error (v244 x)
                let _run_target_args'_v245 = v252 
                #endif
#if FABLE_COMPILER_PYTHON
                let v253 : Result<std_string_String, std_string_String> = match v243 with Ok x -> Ok x | Error x -> Error (v244 x)
                let _run_target_args'_v245 = v253 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v254 : Result<std_string_String, std_string_String> = match v243 with Ok x -> Ok x | Error x -> Error (v244 x)
                let _run_target_args'_v245 = v254 
                #endif
#else
                let v255 : Result<std_string_String, std_string_String> = match v243 with Ok x -> Ok x | Error x -> Error (v244 x)
                let _run_target_args'_v245 = v255 
                #endif
                let v256 : Result<std_string_String, std_string_String> = _run_target_args'_v245 
                let v259 : (std_string_String -> string) = method142()
                let v260 : Result<std_string_String, std_string_String> = method143(v256)
                let v261 : string = "v260.map(|x| v259(x))"
                let v262 : Result<string, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v261 
                let v263 : (string -> struct (string * US23 * string * bool * bool)) = method144()
                let v264 : Result<string, std_string_String> = method145(v262)
                let v265 : string = "v264.map(|x| v263(x))"
                let v266 : Result<struct (string * US23 * string * bool * bool), std_string_String> = Fable.Core.RustInterop.emitRustExpr () v265 
                let func1_from_result = v266 //
                let v267 : _ = func1_from_result
                let v268 : string = $"true; $0 /*"
                let v269 : bool = Fable.Core.RustInterop.emitRustExpr v267 v268 
                let v270 : string = $"*/ }}); //"
                let v271 : bool = Fable.Core.RustInterop.emitRustExpr () v270 
                let v272 : string = $"_func1_from_v33"
                let v273 : Func0<struct (string * unativeint * Heap5), Result<struct (string * US23 * string * bool * bool), std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v272 
                let v274 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v275 : (struct (string * unativeint * Heap5) -> Result<struct (string * US23 * string * bool * bool), std_string_String>) = closure114(v273)
                let v276 : Vec<Result<struct (string * US23 * string * bool * bool), std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v32, v275) v274 
                let v277 : string = "v276.into_iter().collect()"
                let v278 : Result<Vec<struct (string * US23 * string * bool * bool)>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v277 
                let v279 : string = "$0?"
                let v280 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v278 v279 
                let v281 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                let v282 : (struct (string * US23 * string * bool * bool) []) = Fable.Core.RustInterop.emitRustExpr v280 v281 
                let v283 : US55 = US55_0(v282)
                US54_0(v283)
            | _ ->
                let v285 : US55 = US55_1
                US54_0(v285)
    let v304 : US56 =
        match v291 with
        | US54_1(v301) -> (* Error *)
            US56_1(v301)
        | US54_0(v292) -> (* Ok *)
            let v299 : (struct (string * US23 * string * bool * bool) []) option =
                match v292 with
                | US55_1 -> (* None *)
                    let v297 : (struct (string * US23 * string * bool * bool) []) option = None
                    v297
                | US55_0(v293) -> (* Some *)
                    let v294 : (struct (string * US23 * string * bool * bool) []) option = Some v293 
                    v294
            US56_0(v299)
    let v310 : Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String> =
        match v304 with
        | US56_1(v307) -> (* Error *)
            let v308 : Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String> = Error v307 
            v308
        | US56_0(v305) -> (* Ok *)
            let v306 : Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String> = Ok v305 
            v306
    let v311 : string = $"%A{v310}"
    let v314 : string = "use_transactions.render (10) / rpc_requests new_arc_memo / result: " + string v311 + ""
    let v315 : int64 = 200L
    let v316 : string = method8(v315, v314)
    let v317 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v318 : bool = Fable.Core.RustInterop.emitRustExpr v316 v317 
    v310
and closure116 () (v0 : (struct (string * US23 * string * bool * bool) []) option) : US56 =
    US56_0(v0)
and method147 () : ((struct (string * US23 * string * bool * bool) []) option -> US56) =
    closure116()
and closure117 () (v0 : std_string_String) : US56 =
    US56_1(v0)
and method148 () : (std_string_String -> US56) =
    closure117()
and closure118 () (v0 : (struct (string * US23 * string * bool * bool) [])) : US55 =
    US55_0(v0)
and method149 () : ((struct (string * US23 * string * bool * bool) []) -> US55) =
    closure118()
and closure115 (v0 : leptos_prelude_ArcMemo<Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String>>) () : Vec<struct (string * US23 * string * bool * bool)> =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : ((struct (string * US23 * string * bool * bool) []) option -> US56) = method147()
    let v4 : (std_string_String -> US56) = method148()
    let v5 : US56 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v28 : US54 =
        match v5 with
        | US56_1(v25) -> (* Error *)
            US54_1(v25)
        | US56_0(v6) -> (* Ok *)
            let v7 : ((struct (string * US23 * string * bool * bool) []) -> US55) = method149()
            let v8 : US55 option = v6 |> Option.map v7 
            let v19 : US55 = US55_1
            let v20 : US55 = v8 |> Option.defaultValue v19 
            US54_0(v20)
    let v34 : (struct (string * US23 * string * bool * bool) []) =
        match v28 with
        | US54_0(v29) -> (* Ok *)
            match v29 with
            | US55_0(v30) -> (* Some *)
                v30
            | _ ->
                [||]
        | _ ->
            [||]
    let v35 : string = "$0.to_vec()"
    let v36 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = $"%A{v36}"
    let v40 : string = "use_transactions.render (11) / rpc_requests' new_arc_memo / result: " + string v37 + ""
    let v41 : int64 = 200L
    let v42 : string = method8(v41, v40)
    let v43 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v44 : bool = Fable.Core.RustInterop.emitRustExpr v42 v43 
    v36
and closure121 () (v0 : crate_model_near_rpc_TransferDetail) : struct (std_string_String * std_string_String option * float option * std_string_String option) =
    let v1 : string = "$0.deposit"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.args"
    let v4 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.gas"
    let v6 : float option = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let v7 : string = "$0.method_name"
    let v8 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v7 
    struct (v2, v4, v6, v8)
and method151 (v0 : Func0<std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>, std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>>) : Func0<std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>, std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>> =
    v0
and closure122 (v0 : Func0<std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>, std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>>) (v1 : std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>) : std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> =
    let v2 : Func0<std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>, std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>> = method151(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method152 (v0 : Func0<crate_model_near_rpc_Receipt, struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)>) : Func0<crate_model_near_rpc_Receipt, struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)> =
    v0
and closure123 (v0 : Func0<crate_model_near_rpc_Receipt, struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)>) (v1 : crate_model_near_rpc_Receipt) : struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) =
    let v2 : Func0<crate_model_near_rpc_Receipt, struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)> = method152(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : std_string_String, v6 : (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []), v7 : std_string_String, v8 : (std_string_String []), v9 : (std_string_String []), v10 : std_string_String, v11 : std_string_String, v12 : std_string_String, v13 : std_string_String) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7, v8, v9, v10, v11, v12, v13)
and method153 (v0 : Func0<crate_model_near_rpc_GasProfile, struct (std_string_String * std_string_String * std_string_String)>) : Func0<crate_model_near_rpc_GasProfile, struct (std_string_String * std_string_String * std_string_String)> =
    v0
and closure124 (v0 : Func0<crate_model_near_rpc_GasProfile, struct (std_string_String * std_string_String * std_string_String)>) (v1 : crate_model_near_rpc_GasProfile) : struct (std_string_String * std_string_String * std_string_String) =
    let v2 : Func0<crate_model_near_rpc_GasProfile, struct (std_string_String * std_string_String * std_string_String)> = method153(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : std_string_String, v6 : std_string_String, v7 : std_string_String) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7)
and method155 (v0 : Func0<crate_model_near_rpc_Proof, struct (std_string_String * std_string_String)>) : Func0<crate_model_near_rpc_Proof, struct (std_string_String * std_string_String)> =
    v0
and closure126 (v0 : Func0<crate_model_near_rpc_Proof, struct (std_string_String * std_string_String)>) (v1 : crate_model_near_rpc_Proof) : struct (std_string_String * std_string_String) =
    let v2 : Func0<crate_model_near_rpc_Proof, struct (std_string_String * std_string_String)> = method155(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : std_string_String, v6 : std_string_String) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6)
and closure125 () (v0 : Vec<crate_model_near_rpc_Proof>) : (struct (std_string_String * std_string_String) []) =
    let v1 : unit = ()
    let v2 : string = $"true; let _func1_from_v1 = Func1::from(move |value| {{ //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = $"value"
    let v5 : crate_model_near_rpc_Proof = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "$0.direction"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "$0.hash"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v8 
    let func1_from_result = struct (v7, v9) //
    let v10 : _ = func1_from_result
    let v11 : string = $"true; $0 /*"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = $"*/ }}); //"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = $"_func1_from_v1"
    let v16 : Func0<crate_model_near_rpc_Proof, struct (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v18 : (crate_model_near_rpc_Proof -> struct (std_string_String * std_string_String)) = closure126(v16)
    let v19 : Vec<struct (std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v0, v18) v17 
    let v20 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v21 : (struct (std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v19 v20 
    v21
and method154 () : (Vec<crate_model_near_rpc_Proof> -> (struct (std_string_String * std_string_String) [])) =
    closure125()
and method156 (v0 : Func0<crate_model_near_rpc_ReceiptsOutcome, struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))>) : Func0<crate_model_near_rpc_ReceiptsOutcome, struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))> =
    v0
and closure127 (v0 : Func0<crate_model_near_rpc_ReceiptsOutcome, struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))>) (v1 : crate_model_near_rpc_ReceiptsOutcome) : struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) =
    let v2 : Func0<crate_model_near_rpc_ReceiptsOutcome, struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))> = method156(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : std_string_String, v6 : std_string_String, v7 : std_string_String, v8 : uint64, v9 : (std_string_String []), v10 : (struct (std_string_String * std_string_String * std_string_String) []), v11 : uint8, v12 : (std_string_String []), v13 : std_collections_HashMap<std_string_String, std_string_String>, v14 : std_string_String option, v15 : (struct (std_string_String * std_string_String) [])) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)
and closure120 () (v0 : crate_model_near_rpc_TransactionStatus) : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) =
    let v1 : string = "$0.receipts"
    let v2 : Vec<crate_model_near_rpc_Receipt> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : unit = ()
    let v4 : string = $"true; let _func1_from_v3 = Func1::from(move |value| {{ //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = $"value"
    let v7 : crate_model_near_rpc_Receipt = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : string = "$0.predecessor_id"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : string = "$0.receipt"
    let v11 : crate_model_near_rpc_ReceiptDetail = Fable.Core.RustInterop.emitRustExpr v7 v10 
    let v12 : string = "$0.action"
    let v13 : crate_model_near_rpc_ActionDetail = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : string = "$0.actions"
    let v15 : Vec<std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>> = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : unit = ()
    let v17 : string = $"true; let _func1_from_v16 = Func1::from(move |value| {{ //"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = $"value"
    let v20 : std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.into_iter().map(|(k, v)| (k, $1(v))).collect()"
    let v22 : (crate_model_near_rpc_TransferDetail -> struct (std_string_String * std_string_String option * float option * std_string_String option)) = closure121()
    let v23 : std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr struct (v20, v22) v21 
    let func1_from_result = v23 //
    let v24 : _ = func1_from_result
    let v25 : string = $"true; $0 /*"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let v27 : string = $"*/ }}); //"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = $"_func1_from_v16"
    let v30 : Func0<std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail>, std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v32 : (std_collections_HashMap<std_string_String, crate_model_near_rpc_TransferDetail> -> std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>) = closure122(v30)
    let v33 : Vec<std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)>> = Fable.Core.RustInterop.emitRustExpr struct (v15, v32) v31 
    let v34 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v35 : (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let v36 : string = "$0.gas_price"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v36 
    let v38 : string = "$0.input_data_ids"
    let v39 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v13 v38 
    let v40 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v41 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "$0.output_data_receivers"
    let v43 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v13 v42 
    let v44 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v45 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let v46 : string = "$0.signer_id"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v46 
    let v48 : string = "$0.signer_public_key"
    let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v13 v48 
    let v50 : string = "$0.receipt_id"
    let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v50 
    let v52 : string = "$0.receiver_id"
    let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v7 v52 
    let func1_from_result = struct (v9, v35, v37, v41, v45, v47, v49, v51, v53) //
    let v54 : _ = func1_from_result
    let v55 : string = $"true; $0 /*"
    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
    let v57 : string = $"*/ }}); //"
    let v58 : bool = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = $"_func1_from_v3"
    let v60 : Func0<crate_model_near_rpc_Receipt, struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v62 : (crate_model_near_rpc_Receipt -> struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)) = closure123(v60)
    let v63 : Vec<struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v62) v61 
    let v64 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v65 : (struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v63 v64 
    let v66 : string = "$0.receipts_outcome"
    let v67 : Vec<crate_model_near_rpc_ReceiptsOutcome> = Fable.Core.RustInterop.emitRustExpr v0 v66 
    let v68 : unit = ()
    let v69 : string = $"true; let _func1_from_v68 = Func1::from(move |value| {{ //"
    let v70 : bool = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = $"value"
    let v72 : crate_model_near_rpc_ReceiptsOutcome = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "$0.block_hash"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v73 
    let v75 : string = "$0.id"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v72 v75 
    let v77 : string = "$0.outcome"
    let v78 : crate_model_near_rpc_OutcomeDetail = Fable.Core.RustInterop.emitRustExpr v72 v77 
    let v79 : string = "$0.executor_id"
    let v80 : std_string_String = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "$0.gas_burnt"
    let v82 : uint64 = Fable.Core.RustInterop.emitRustExpr v78 v81 
    let v83 : string = "$0.logs"
    let v84 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v78 v83 
    let v85 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v86 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v84 v85 
    let v87 : string = "$0.metadata"
    let v88 : crate_model_near_rpc_Metadata = Fable.Core.RustInterop.emitRustExpr v78 v87 
    let v89 : string = "$0.gas_profile"
    let v90 : Vec<crate_model_near_rpc_GasProfile> = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : unit = ()
    let v92 : string = $"true; let _func1_from_v91 = Func1::from(move |value| {{ //"
    let v93 : bool = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = $"value"
    let v95 : crate_model_near_rpc_GasProfile = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "$0.cost"
    let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "$0.cost_category"
    let v99 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v98 
    let v100 : string = "$0.gas_used"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v95 v100 
    let func1_from_result = struct (v97, v99, v101) //
    let v102 : _ = func1_from_result
    let v103 : string = $"true; $0 /*"
    let v104 : bool = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : string = $"*/ }}); //"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr () v105 
    let v107 : string = $"_func1_from_v91"
    let v108 : Func0<crate_model_near_rpc_GasProfile, struct (std_string_String * std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v107 
    let v109 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v110 : (crate_model_near_rpc_GasProfile -> struct (std_string_String * std_string_String * std_string_String)) = closure124(v108)
    let v111 : Vec<struct (std_string_String * std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v90, v110) v109 
    let v112 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v113 : (struct (std_string_String * std_string_String * std_string_String) []) = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "$0.version"
    let v115 : uint8 = Fable.Core.RustInterop.emitRustExpr v88 v114 
    let v116 : string = "$0.receipt_ids"
    let v117 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v78 v116 
    let v118 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v119 : (std_string_String []) = Fable.Core.RustInterop.emitRustExpr v117 v118 
    let v120 : string = "$0.status"
    let v121 : std_collections_HashMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr v78 v120 
    let v122 : string = "$0.tokens_burnt"
    let v123 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v78 v122 
    let v124 : string = "$0.proof"
    let v125 : Vec<crate_model_near_rpc_Proof> option = Fable.Core.RustInterop.emitRustExpr v72 v124 
    let v126 : (Vec<crate_model_near_rpc_Proof> -> (struct (std_string_String * std_string_String) [])) = method154()
    let v127 : (struct (std_string_String * std_string_String) []) option = v125 |> Option.map v126 
    let v158 : (struct (std_string_String * std_string_String) []) = [||]
    let v159 : (struct (std_string_String * std_string_String) []) = v127 |> Option.defaultValue v158 
    let func1_from_result = struct (v74, v76, v80, v82, v86, v113, v115, v119, v121, v123, v159) //
    let v162 : _ = func1_from_result
    let v163 : string = $"true; $0 /*"
    let v164 : bool = Fable.Core.RustInterop.emitRustExpr v162 v163 
    let v165 : string = $"*/ }}); //"
    let v166 : bool = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = $"_func1_from_v68"
    let v168 : Func0<crate_model_near_rpc_ReceiptsOutcome, struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))> = Fable.Core.RustInterop.emitRustExpr () v167 
    let v169 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v170 : (crate_model_near_rpc_ReceiptsOutcome -> struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))) = closure127(v168)
    let v171 : Vec<struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) []))> = Fable.Core.RustInterop.emitRustExpr struct (v67, v170) v169 
    let v172 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v173 : (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []) = Fable.Core.RustInterop.emitRustExpr v171 v172 
    struct (v65, v173)
and method150 () : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) =
    closure120()
and closure129 () (v0 : crate_model_near_rpc_ErrorCauseInfo) : struct (std_string_String option * std_string_String option) =
    let v1 : string = "$0.error_message"
    let v2 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.requested_transaction_hash"
    let v4 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    struct (v2, v4)
and method158 () : (crate_model_near_rpc_ErrorCauseInfo -> struct (std_string_String option * std_string_String option)) =
    closure129()
and closure128 () (v0 : crate_model_near_rpc_RpcError) : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) =
    let v1 : string = "$0.name"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.cause"
    let v4 : crate_model_near_rpc_ErrorCause = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : string = "$0.name"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "$0.info"
    let v8 : crate_model_near_rpc_ErrorCauseInfo option = Fable.Core.RustInterop.emitRustExpr v4 v7 
    let v9 : (crate_model_near_rpc_ErrorCauseInfo -> struct (std_string_String option * std_string_String option)) = method158()
    let v10 : struct (std_string_String option * std_string_String option) option = v8 |> Option.map v9 
    let v24 : string = "$0.code"
    let v25 : int32 = Fable.Core.RustInterop.emitRustExpr v0 v24 
    let v26 : string = "$0.message"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v26 
    let v28 : string = "$0.data"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v28 
    struct (v2, v6, v10, v25, v27, v29)
and method157 () : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) =
    closure128()
and closure119 () (v0 : crate_model_near_rpc_RpcResponse) : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) =
    let v1 : string = "$0.jsonrpc"
    let v2 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "$0.result"
    let v4 : crate_model_near_rpc_TransactionStatus option = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) = method150()
    let v6 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option = v4 |> Option.map v5 
    let v189 : string = "$0.error"
    let v190 : crate_model_near_rpc_RpcError option = Fable.Core.RustInterop.emitRustExpr v0 v189 
    let v191 : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) = method157()
    let v192 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option = v190 |> Option.map v191 
    let v231 : string = "$0.id"
    let v232 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v0 v231 
    struct (v2, v6, v192, v232)
and closure133 () (v0 : crate_model_near_rpc_RpcResponse) : crate_model_near_rpc_RpcResponse option =
    let v1 : crate_model_near_rpc_RpcResponse option = Some v0 
    v1
and method161 () : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) =
    closure133()
and method162 (v0 : Result<crate_model_near_rpc_RpcResponse, std_string_String>) : Result<crate_model_near_rpc_RpcResponse, std_string_String> =
    v0
and closure132 (v0 : US35, v1 : US41, v2 : int32) struct (v3 : string, v4 : US23, v5 : string, v6 : bool, v7 : bool) : Result<crate_model_near_rpc_RpcResponse option, std_string_String> =
    let v51 : US29 =
        match v0 with
        | US35_1 -> (* None *)
            US29_1
        | US35_0(v8) -> (* Some *)
            let v47 : US30 =
                match v8 with
                | US36_1(v44) -> (* Error *)
                    US30_1(v44)
                | US36_0(v9) -> (* Ok *)
                    let v10 : US25 option = v9 |> Array.tryItem v2 
                    let v11 : (US25 -> US32) = method87()
                    let v12 : US32 option = v10 |> Option.map v11 
                    let v23 : US32 = US32_1
                    let v24 : US32 = v12 |> Option.defaultValue v23 
                    let v34 : US25 =
                        match v24 with
                        | US32_0(v28) -> (* Some *)
                            match v28 with
                            | US25_0(v29) -> (* Some *)
                                US25_0(v29)
                            | _ ->
                                US25_1
                        | _ ->
                            US25_1
                    let v42 : US31 =
                        match v34 with
                        | US25_1 -> (* None *)
                            US31_1
                        | US25_0(v35) -> (* Some *)
                            let v36 : std_string_String = v35.l0
                            let v37 : string = "fable_library_rust::String_::fromString($0)"
                            let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
                            US31_0(v38)
                    US30_0(v42)
            US29_0(v47)
    let v52 : string = $"%A{struct (v3, v4, v5, v6, v7)}"
    let v55 : int64 = 400L
    let v56 : string = method8(v55, v52)
    let v57 : string = $"%A{v51}"
    let v60 : int64 = 400L
    let v61 : string = method8(v60, v57)
    let v62 : string = "state_core.use_request (15) / result memo / request: " + string v56 + " / state_data: " + string v61 + ""
    let v63 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v64 : bool = Fable.Core.RustInterop.emitRustExpr v62 v63 
    let v65 : string = $"%A{v1}"
    let v68 : int64 = 400L
    let v69 : string = method8(v68, v65)
    let v70 : string = "state_core.use_request (16) / effect / json: " + string v69 + ""
    let v71 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v72 : bool = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v104 : US31 =
        match v1 with
        | US41_1(v101) -> (* Error *)
            US31_1
        | US41_0(v73) -> (* Ok *)
            let v74 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
            let v75 : (US31 []) = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : US31 option = v75 |> Array.tryItem v2 
            let v77 : (US31 -> US42) = method108()
            let v78 : US42 option = v76 |> Option.map v77 
            let v89 : US42 = US42_1
            let v90 : US42 = v78 |> Option.defaultValue v89 
            match v90 with
            | US42_0(v94) -> (* Some *)
                match v94 with
                | US31_0(v95) -> (* Some *)
                    US31_0(v95)
                | _ ->
                    US31_1
            | _ ->
                US31_1
    match v104 with
    | US31_0(v105) -> (* Some *)
        let v106 : string = method41(v105)
        (* run_target_args'
        let v107 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v108 : string = "&*$0"
        let v109 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v108 
        let _run_target_args'_v107 = v109 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v110 : string = "&*$0"
        let v111 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v110 
        let _run_target_args'_v107 = v111 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v112 : string = "&*$0"
        let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v106 v112 
        let _run_target_args'_v107 = v113 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _run_target_args'_v107 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _run_target_args'_v107 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _run_target_args'_v107 = v120 
        #endif
#else
        let v123 : Ref<Str> = v106 |> unbox<Ref<Str>>
        let _run_target_args'_v107 = v123 
        #endif
        let v126 : Ref<Str> = _run_target_args'_v107 
        let v131 : string = "serde_json::from_str(&$0)"
        let v132 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v126 v131 
        let v133 : (serde_json_Error -> std_string_String) = method42()
        (* run_target_args'
        let v134 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v135 : string = "$0.map_err(|x| $1(x))"
        let v136 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v135 
        let _run_target_args'_v134 = v136 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v137 : string = "$0.map_err(|x| $1(x))"
        let v138 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v137 
        let _run_target_args'_v134 = v138 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v139 : string = "$0.map_err(|x| $1(x))"
        let v140 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v132, v133) v139 
        let _run_target_args'_v134 = v140 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v141 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _run_target_args'_v134 = v141 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _run_target_args'_v134 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v143 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _run_target_args'_v134 = v143 
        #endif
#else
        let v144 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v132 with Ok x -> Ok x | Error x -> Error (v133 x)
        let _run_target_args'_v134 = v144 
        #endif
        let v145 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _run_target_args'_v134 
        let v148 : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) = method161()
        let v149 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = method162(v145)
        let v150 : string = "v149.map(|x| v148(x))"
        let v151 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v150 
        v151
    | _ ->
        match v51 with
        | US29_0(v152) -> (* Some *)
            match v152 with
            | US30_0(v153) -> (* Ok *)
                match v153 with
                | US31_0(v154) -> (* Some *)
                    let v155 : string = method41(v154)
                    (* run_target_args'
                    let v156 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
                    let _run_target_args'_v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
                    let _run_target_args'_v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
                    let _run_target_args'_v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v163 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v166 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v169 
                    #endif
#else
                    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v172 
                    #endif
                    let v175 : Ref<Str> = _run_target_args'_v156 
                    let v180 : string = "serde_json::from_str(&$0)"
                    let v181 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v175 v180 
                    let v182 : (serde_json_Error -> std_string_String) = method42()
                    (* run_target_args'
                    let v183 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v184 : string = "$0.map_err(|x| $1(x))"
                    let v185 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v184 
                    let _run_target_args'_v183 = v185 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v186 : string = "$0.map_err(|x| $1(x))"
                    let v187 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v186 
                    let _run_target_args'_v183 = v187 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v188 : string = "$0.map_err(|x| $1(x))"
                    let v189 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v181, v182) v188 
                    let _run_target_args'_v183 = v189 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v190 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _run_target_args'_v183 = v190 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v191 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _run_target_args'_v183 = v191 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v192 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _run_target_args'_v183 = v192 
                    #endif
#else
                    let v193 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v181 with Ok x -> Ok x | Error x -> Error (v182 x)
                    let _run_target_args'_v183 = v193 
                    #endif
                    let v194 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _run_target_args'_v183 
                    let v197 : (crate_model_near_rpc_RpcResponse -> crate_model_near_rpc_RpcResponse option) = method161()
                    let v198 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = method162(v194)
                    let v199 : string = "v198.map(|x| v197(x))"
                    let v200 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v199 
                    v200
                | _ ->
                    let v201 : string = $"%A{struct (v104, v51)}"
                    let v204 : string = "state_core.use_request (17) / json Error / value: " + string v201 + ""
                    let v205 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                    let v206 : bool = Fable.Core.RustInterop.emitRustExpr v204 v205 
                    let v207 : crate_model_near_rpc_RpcResponse option = None
                    let v208 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v207 
                    v208
            | _ ->
                let v210 : string = $"%A{struct (v104, v51)}"
                let v213 : string = "state_core.use_request (17) / json Error / value: " + string v210 + ""
                let v214 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v215 : bool = Fable.Core.RustInterop.emitRustExpr v213 v214 
                let v216 : crate_model_near_rpc_RpcResponse option = None
                let v217 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v216 
                v217
        | _ ->
            let v219 : string = $"%A{struct (v104, v51)}"
            let v222 : string = "state_core.use_request (17) / json Error / value: " + string v219 + ""
            let v223 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v224 : bool = Fable.Core.RustInterop.emitRustExpr v222 v223 
            let v225 : crate_model_near_rpc_RpcResponse option = None
            let v226 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Ok v225 
            v226
and closure131 (v0 : US35, v1 : US41) (v2 : int32) : (struct (string * US23 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>) =
    closure132(v0, v1, v2)
and method160 (v0 : US35, v1 : US41) : (int32 -> (struct (string * US23 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>)) =
    closure131(v0, v1)
and closure130 (v0 : leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>>, v1 : leptos_prelude_ArcMemo<Result<Vec<Heap4 option>, std_string_String> option>, v2 : leptos_prelude_ArcLocalResource<Result<Vec<string option>, std_string_String>>, v3 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>>) () : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) =
    let v4 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v5 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = $"%A{v5}"
    let v9 : string = "state_core.use_requests (13) / result memo / requests: " + string v6 + ""
    let v10 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v13 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (Result<Vec<Heap4 option>, std_string_String> -> US26) = method82()
    let v15 : US26 option = v13 |> Option.map v14 
    let v26 : US26 = US26_1
    let v27 : US26 = v15 |> Option.defaultValue v26 
    let v71 : US35 =
        match v27 with
        | US26_1 -> (* None *)
            US35_1
        | US26_0(v31) -> (* Some *)
            let v32 : (Vec<Heap4 option> -> US24) = method83()
            let v33 : (std_string_String -> US24) = method84()
            let v34 : US24 = match v31 with Ok x -> v32 x | Error x -> v33 x
            let v67 : US36 =
                match v34 with
                | US24_1(v64) -> (* Error *)
                    US36_1(v64)
                | US24_0(v35) -> (* Ok *)
                    let v36 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v37 : bool = Fable.Core.RustInterop.emitRustExpr v35 v36 
                    let v38 : string = "x"
                    let v39 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v38 
                    let v40 : (Heap4 -> US25) = method85()
                    let v41 : US25 option = v39 |> Option.map v40 
                    let v52 : US25 = US25_1
                    let v53 : US25 = v41 |> Option.defaultValue v52 
                    let v57 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v58 : bool = Fable.Core.RustInterop.emitRustExpr v53 v57 
                    let v59 : string = "_vec_map"
                    let v60 : Vec<US25> = Fable.Core.RustInterop.emitRustExpr () v59 
                    let v61 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v62 : (US25 []) = Fable.Core.RustInterop.emitRustExpr v60 v61 
                    US36_0(v62)
            US35_0(v67)
    let v72 : string = $"%A{v71}"
    let v75 : int64 = 400L
    let v76 : string = method8(v75, v72)
    let v77 : string = "state_core.use_request (14) / result_memo / state_data: " + string v76 + ""
    let v78 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v79 : bool = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v81 : Result<Vec<string option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v80 
    let v82 : (Result<Vec<string option>, std_string_String> -> US37) = method103()
    let v83 : US37 option = v81 |> Option.map v82 
    let v94 : US37 = US37_1
    let v95 : US37 = v83 |> Option.defaultValue v94 
    let v106 : US38 =
        match v95 with
        | US37_1 -> (* None *)
            US38_1
        | US37_0(v99) -> (* Some *)
            let v100 : (Vec<string option> -> US39) = method104()
            let v101 : (std_string_String -> US39) = method105()
            let v102 : US39 = match v99 with Ok x -> v100 x | Error x -> v101 x
            US38_0(v102)
    let v142 : US40 =
        match v106 with
        | US38_1 -> (* None *)
            US40_1
        | US38_0(v107) -> (* Some *)
            let v138 : US41 =
                match v107 with
                | US39_1(v135) -> (* Error *)
                    US41_1(v135)
                | US39_0(v108) -> (* Ok *)
                    let v109 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v110 : bool = Fable.Core.RustInterop.emitRustExpr v108 v109 
                    let v111 : string = "x"
                    let v112 : string option = Fable.Core.RustInterop.emitRustExpr () v111 
                    let v113 : (string -> US31) = method106()
                    let v114 : US31 option = v112 |> Option.map v113 
                    let v125 : US31 = US31_1
                    let v126 : US31 = v114 |> Option.defaultValue v125 
                    let v130 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v126 v130 
                    let v132 : string = "_vec_map"
                    let v133 : Vec<US31> = Fable.Core.RustInterop.emitRustExpr () v132 
                    US41_0(v133)
            US40_0(v138)
    let v143 : (US31 []) = [||]
    let v144 : string = "$0.to_vec()"
    let v145 : Vec<US31> = Fable.Core.RustInterop.emitRustExpr v143 v144 
    let v149 : US41 =
        match v142 with
        | US40_1 -> (* None *)
            US41_0(v145)
        | US40_0(v146) -> (* Some *)
            v146
    let v214 : bool =
        match v149 with
        | US41_1(v212) -> (* Error *)
            false
        | US41_0(v150) -> (* Ok *)
            let v151 : string = "true; $0.into_iter().for_each(|x| { //"
            let v152 : bool = Fable.Core.RustInterop.emitRustExpr v150 v151 
            let v153 : string = "x"
            let v154 : US31 = Fable.Core.RustInterop.emitRustExpr () v153 
            let v207 : bool =
                match v154 with
                | US31_0(v155) -> (* Some *)
                    (* run_target_args'
                    let v156 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v157 : string = "&*$0"
                    let v158 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v157 
                    let _run_target_args'_v156 = v158 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159 : string = "&*$0"
                    let v160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v159 
                    let _run_target_args'_v156 = v160 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161 : string = "&*$0"
                    let v162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v155 v161 
                    let _run_target_args'_v156 = v162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v163 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v163 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v166 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v166 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v169 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v169 
                    #endif
#else
                    let v172 : Ref<Str> = v155 |> unbox<Ref<Str>>
                    let _run_target_args'_v156 = v172 
                    #endif
                    let v175 : Ref<Str> = _run_target_args'_v156 
                    (* run_target_args'
                    let v180 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v181 : string = "String::from($0)"
                    let v182 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v181 
                    let _run_target_args'_v180 = v182 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v183 : string = "String::from($0)"
                    let v184 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v183 
                    let _run_target_args'_v180 = v184 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v185 : string = "String::from($0)"
                    let v186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v175 v185 
                    let _run_target_args'_v180 = v186 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v187 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v180 = v187 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v190 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v180 = v190 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v193 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v180 = v193 
                    #endif
#else
                    let v196 : std_string_String = v175 |> unbox<std_string_String>
                    let _run_target_args'_v180 = v196 
                    #endif
                    let v199 : std_string_String = _run_target_args'_v180 
                    let v204 : Heap4 = {l0 = v199} : Heap4
                    let v205 : string = "true; leptos::prelude::Action::dispatch(&$0, $1.clone())"
                    let v206 : bool = Fable.Core.RustInterop.emitRustExpr struct (v3, v204) v205 
                    true
                | _ ->
                    false
            let v208 : string = $"true"
            let v209 : bool = Fable.Core.RustInterop.emitRustExpr () v208 
            let v210 : string = "true; }); //"
            let v211 : bool = Fable.Core.RustInterop.emitRustExpr () v210 
            false
    let v215 : (int32 -> (struct (string * US23 * string * bool * bool) -> Result<crate_model_near_rpc_RpcResponse option, std_string_String>)) = method160(v71, v149)
    let v216 : Vec<struct (string * US23 * string * bool * bool)> = method96(v5)
    let v217 : string = "v216.iter().enumerate().map(|(i, x)| v215(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v218 : Vec<Result<crate_model_near_rpc_RpcResponse option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v217 
    let v219 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v220 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v218 v219 
    let v221 : string = $"%A{v220}"
    let v224 : string = "state_core.use_requests (18) / result_func func0 / result: " + string v221 + ""
    let v225 : int64 = 200L
    let v226 : string = method8(v225, v224)
    let v227 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v228 : bool = Fable.Core.RustInterop.emitRustExpr v226 v227 
    v220
and method164 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) =
    v0
and closure135 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) (v1 : crate_model_near_rpc_RpcResponse option) : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option =
    let v2 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = method164(v0)
    let v3 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = v1 |> Option.map v2 
    v3
and method163 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : (crate_model_near_rpc_RpcResponse option -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) =
    closure135(v0)
and method165 (v0 : Result<crate_model_near_rpc_RpcResponse option, std_string_String>) : Result<crate_model_near_rpc_RpcResponse option, std_string_String> =
    v0
and method166 (v0 : Func0<Result<crate_model_near_rpc_RpcResponse option, std_string_String>, Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) : Func0<Result<crate_model_near_rpc_RpcResponse option, std_string_String>, Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> =
    v0
and closure136 (v0 : Func0<Result<crate_model_near_rpc_RpcResponse option, std_string_String>, Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) (v1 : Result<crate_model_near_rpc_RpcResponse option, std_string_String>) : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
    let v2 : Func0<Result<crate_model_near_rpc_RpcResponse option, std_string_String>, Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = method166(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and closure134 (v0 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)), v1 : leptos_prelude_ArcLocalResource<std_sync_Arc<rexie_Rexie>>, v2 : leptos_prelude_ArcLocalResource<Result<Vec<Heap4 option>, std_string_String>>, v3 : leptos_prelude_ArcMemo<(Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])>) () : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> =
    let v4 : string = $"leptos::prelude::Submission::pending(&$0.into()).into()"
    let v5 : leptos_prelude_ArcSignal<bool> = Fable.Core.RustInterop.emitRustExpr v1 v4 
    let v6 : string = $"leptos::prelude::ArcSignal::get(&$0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = $"leptos::prelude::Submission::pending(&$0.into()).into()"
    let v9 : leptos_prelude_ArcSignal<bool> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = $"leptos::prelude::ArcSignal::get(&$0)"
    let v11 : bool = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v13 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v1 v12 
    let v14 : (std_sync_Arc<rexie_Rexie> -> US2) = method9()
    let v15 : US2 option = v13 |> Option.map v14 
    let v26 : US2 = US2_1
    let v27 : US2 = v15 |> Option.defaultValue v26 
    let v31 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v32 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v31 
    let v33 : (Result<Vec<Heap4 option>, std_string_String> -> US26) = method82()
    let v34 : US26 option = v32 |> Option.map v33 
    let v45 : US26 = US26_1
    let v46 : US26 = v34 |> Option.defaultValue v45 
    let v90 : US35 =
        match v46 with
        | US26_1 -> (* None *)
            US35_1
        | US26_0(v50) -> (* Some *)
            let v51 : (Vec<Heap4 option> -> US24) = method83()
            let v52 : (std_string_String -> US24) = method84()
            let v53 : US24 = match v50 with Ok x -> v51 x | Error x -> v52 x
            let v86 : US36 =
                match v53 with
                | US24_1(v83) -> (* Error *)
                    US36_1(v83)
                | US24_0(v54) -> (* Ok *)
                    let v55 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v56 : bool = Fable.Core.RustInterop.emitRustExpr v54 v55 
                    let v57 : string = "x"
                    let v58 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v57 
                    let v59 : (Heap4 -> US25) = method85()
                    let v60 : US25 option = v58 |> Option.map v59 
                    let v71 : US25 = US25_1
                    let v72 : US25 = v60 |> Option.defaultValue v71 
                    let v76 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v72 v76 
                    let v78 : string = "_vec_map"
                    let v79 : Vec<US25> = Fable.Core.RustInterop.emitRustExpr () v78 
                    let v80 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v81 : (US25 []) = Fable.Core.RustInterop.emitRustExpr v79 v80 
                    US36_0(v81)
            US35_0(v86)
    let v91 : string = $"%A{v27}"
    let v94 : int64 = 400L
    let v95 : string = method8(v94, v91)
    let v96 : string = $"%A{v90}"
    let v99 : int64 = 400L
    let v100 : string = method8(v99, v96)
    let v101 : string = "state_core.use_request (19) / result move / database: " + string v95 + " / database_loading: " + string v7 + " / state_data: " + string v100 + " / state_data_loading: " + string v11 + ""
    let v102 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let v104 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v105 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v3 v104 
    let v106 : string = "$0.to_vec()"
    let v107 : Vec<Result<crate_model_near_rpc_RpcResponse option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let v108 : unit = ()
    let v109 : string = $"true; let _func1_from_v108 = Func1::from(move |value| {{ //"
    let v110 : bool = Fable.Core.RustInterop.emitRustExpr () v109 
    let v111 : string = $"value"
    let v112 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v111 
    let v113 : (crate_model_near_rpc_RpcResponse option -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) = method163(v0)
    let v114 : Result<crate_model_near_rpc_RpcResponse option, std_string_String> = method165(v112)
    let v115 : string = "v114.map(|x| v113(x))"
    let v116 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v115 
    let func1_from_result = v116 //
    let v117 : _ = func1_from_result
    let v118 : string = $"true; $0 /*"
    let v119 : bool = Fable.Core.RustInterop.emitRustExpr v117 v118 
    let v120 : string = $"*/ }}); //"
    let v121 : bool = Fable.Core.RustInterop.emitRustExpr () v120 
    let v122 : string = $"_func1_from_v108"
    let v123 : Func0<Result<crate_model_near_rpc_RpcResponse option, std_string_String>, Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v122 
    let v124 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v125 : (Result<crate_model_near_rpc_RpcResponse option, std_string_String> -> Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) = closure136(v123)
    let v126 : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v107, v125) v124 
    let v127 : string = $"%A{v126}"
    let v130 : string = "state_core.use_requests (20) / result func0 / result: " + string v127 + ""
    let v131 : int64 = 200L
    let v132 : string = method8(v131, v130)
    let v133 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v134 : bool = Fable.Core.RustInterop.emitRustExpr v132 v133 
    v126
and method159 (v0 : leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>>, v1 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option))) : leptos_prelude_ArcMemo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> =
    let v2 : string = "state_core.use_requests (1)"
    let v3 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "state_core.use_database (1)"
    let v6 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v7 : bool = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : unit = ()
    let v9 : string = $"true; let _func0_from_v8 = Func0::from(move || {{ //"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : string = "true; let __future_init = Box::pin(/*"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = "*/ async move { /*"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "*/ //"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "state_core.use_database (2) / database new_local_resource"
    let v18 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = "state_core.build_database ()"
    let v21 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "true; let __future_init = Box::pin(/*"
    let v24 : bool = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : string = "*/ async { /*"
    let v26 : bool = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : string = "*/ //"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())"
    let v30 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v29 
    let v31 : string = "v30.await"
    let v32 : Result<rexie_Rexie, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : (rexie_Error -> std_string_String) = method6()
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "$0.map_err(|x| $1(x))"
    let v36 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v32, v33) v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "$0.map_err(|x| $1(x))"
    let v38 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v32, v33) v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "$0.map_err(|x| $1(x))"
    let v40 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v32, v33) v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : Result<rexie_Rexie, std_string_String> = match v32 with Ok x -> Ok x | Error x -> Error (v33 x)
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : Result<rexie_Rexie, std_string_String> = match v32 with Ok x -> Ok x | Error x -> Error (v33 x)
    let _run_target_args'_v34 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v43 : Result<rexie_Rexie, std_string_String> = match v32 with Ok x -> Ok x | Error x -> Error (v33 x)
    let _run_target_args'_v34 = v43 
    #endif
#else
    let v44 : Result<rexie_Rexie, std_string_String> = match v32 with Ok x -> Ok x | Error x -> Error (v33 x)
    let _run_target_args'_v34 = v44 
    #endif
    let v45 : Result<rexie_Rexie, std_string_String> = _run_target_args'_v34 
    let v48 : string = ""
    let v49 : string = "}"
    let v50 : string = v48 + v49 
    let x = v45 //
    let v51 : _ = x
    let v52 : unit = ()
    (* run_target_args'
    let v53 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v54 : string = $"true; let _fix_closure_v52 = $0"
    let v55 : bool = Fable.Core.RustInterop.emitRustExpr v51 v54 
    let _run_target_args'_v53 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v56 : string = $"true; let _fix_closure_v52 = $0"
    let v57 : bool = Fable.Core.RustInterop.emitRustExpr v51 v56 
    let _run_target_args'_v53 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v58 : string = $"true; let _fix_closure_v52 = $0"
    let v59 : bool = Fable.Core.RustInterop.emitRustExpr v51 v58 
    let _run_target_args'_v53 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v53 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v53 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v53 = false 
    #endif
#else
    let _run_target_args'_v53 = false 
    #endif
    let v60 : bool = _run_target_args'_v53 
    let v62 : string = $"true; _fix_closure_v52 " + v50 + "); " + v48 + " // rust.fix_closure'"
    let v63 : bool = Fable.Core.RustInterop.emitRustExpr () v62 
    let v64 : string = "__future_init"
    let v65 : _ = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = "v65"
    let v67 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = "v67.await"
    let v69 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v68 
    (* run_target_args'
    let v70 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v71 : string = "$0.unwrap()"
    let v72 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v69 v71 
    let _run_target_args'_v70 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "$0.unwrap()"
    let v74 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v69 v73 
    let _run_target_args'_v70 = v74 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v75 : string = "$0.unwrap()"
    let v76 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v69 v75 
    let _run_target_args'_v70 = v76 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v77 : rexie_Rexie = match v69 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v70 = v77 
    #endif
#if FABLE_COMPILER_PYTHON
    let v78 : rexie_Rexie = match v69 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v70 = v78 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : rexie_Rexie = match v69 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v70 = v79 
    #endif
#else
    let v80 : rexie_Rexie = match v69 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v70 = v80 
    #endif
    let v81 : rexie_Rexie = _run_target_args'_v70 
    let v84 : (rexie_Rexie -> rexie_Rexie) = method7()
    let v85 : rexie_Rexie = v84 v81
    let v86 : string = "std::sync::Arc::new(v85)"
    let v87 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = $"%A{v87}"
    let v91 : string = "state_core.use_database (3) / database new_local_resource / result: " + string v88 + ""
    let v92 : int64 = 200L
    let v93 : string = method8(v92, v91)
    let v94 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v95 : bool = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = v48 + v49 
    let x = v87 //
    let v97 : _ = x
    let v98 : unit = ()
    (* run_target_args'
    let v99 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v100 : string = $"true; let _fix_closure_v98 = $0"
    let v101 : bool = Fable.Core.RustInterop.emitRustExpr v97 v100 
    let _run_target_args'_v99 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = $"true; let _fix_closure_v98 = $0"
    let v103 : bool = Fable.Core.RustInterop.emitRustExpr v97 v102 
    let _run_target_args'_v99 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = $"true; let _fix_closure_v98 = $0"
    let v105 : bool = Fable.Core.RustInterop.emitRustExpr v97 v104 
    let _run_target_args'_v99 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v99 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v99 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v99 = false 
    #endif
#else
    let _run_target_args'_v99 = false 
    #endif
    let v106 : bool = _run_target_args'_v99 
    let v108 : string = $"true; _fix_closure_v98 " + v96 + "); " + v48 + " // rust.fix_closure'"
    let v109 : bool = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = "__future_init"
    let v111 : _ = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : string = "v111"
    let v113 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> = Fable.Core.RustInterop.emitRustExpr () v112 
    let v114 : string = $"true; $0 /*"
    let v115 : bool = Fable.Core.RustInterop.emitRustExpr v113 v114 
    let v116 : string = $"*/ }}); //"
    let v117 : bool = Fable.Core.RustInterop.emitRustExpr () v116 
    let v118 : string = $"_func0_from_v8"
    let v119 : Func0<std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>>> = Fable.Core.RustInterop.emitRustExpr () v118 
    let v120 : string = "leptos::prelude::ArcLocalResource::new(|| async move { $0().await })"
    let v121 : leptos_prelude_ArcLocalResource<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v119 v120 
    let v122 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v123 : (unit -> PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option) = closure64(v121)
    let v124 : leptos_prelude_ArcMemo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option> = Fable.Core.RustInterop.emitRustExpr v123 v122 
    let v125 : unit = ()
    let v126 : string = $"true; let _func0_from_v125 = Func0::from(move || {{ //"
    let v127 : bool = Fable.Core.RustInterop.emitRustExpr () v126 
    let v128 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v129 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v121 v128 
    let v130 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v129 v130 
    let v132 : string = "x"
    let v133 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v132 
    let v134 : (unit -> unit) = closure8()
    let _v134 = true
    let v135 : string = "PartialEqWrapper($0)"
    let v136 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v133 v135 
    let v137 : string = "true; $0 })"
    let v138 : bool = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "_optionm_map_"
    let v140 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v139 
    let v141 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v142 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v141 
    let v143 : string = "true; let __future_init = Box::pin(/*"
    let v144 : bool = Fable.Core.RustInterop.emitRustExpr () v143 
    let v145 : string = "*/ async move { /*"
    let v146 : bool = Fable.Core.RustInterop.emitRustExpr () v145 
    let v147 : string = "*/ //"
    let v148 : bool = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : string = $"%A{v140}"
    let v152 : string = $"%A{v142}"
    let v155 : int64 = 400L
    let v156 : string = method8(v155, v152)
    let v157 : string = "state_core.use_requests (3) / state_data_resource new_local_resource / request : " + string v156 + " / database: " + string v149 + ""
    let v158 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v159 : bool = Fable.Core.RustInterop.emitRustExpr v157 v158 
    let v160 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v161 : bool = Fable.Core.RustInterop.emitRustExpr v140 v160 
    let v162 : string = "x"
    let v163 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v162 
    let v164 : string = "$0.0"
    let v165 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v163 v164 
    let v166 : string = "true; $0 })"
    let v167 : bool = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : string = "_optionm_map_"
    let v169 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v168 
    let v170 : (std_sync_Arc<rexie_Rexie> -> US2) = method9()
    let v171 : US2 option = v169 |> Option.map v170 
    let v182 : US2 = US2_1
    let v183 : US2 = v171 |> Option.defaultValue v182 
    let v594 : US24 =
        match v183 with
        | US2_0(v187) -> (* Some *)
            let v188 : unit = ()
            let v189 : string = $"true; let _func1_from_v188 = Func1::from(move |value| {{ //"
            let v190 : bool = Fable.Core.RustInterop.emitRustExpr () v189 
            let v191 : string = $"value"
            let struct (v192 : string, v193 : US23, v194 : string, v195 : bool, v196 : bool) = Fable.Core.RustInterop.emitRustExpr () v191 
            let v197 : string = "url[" + v192 + "](" + $"%A{v194}" + ")"
            let v198 : string = "state_core.get_data () / id: " + v197 + ""
            let v199 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v200 : bool = Fable.Core.RustInterop.emitRustExpr v198 v199 
            let v201 : string = "true; let __future_init = Box::pin(/*"
            let v202 : bool = Fable.Core.RustInterop.emitRustExpr () v201 
            let v203 : string = "*/ async { /*"
            let v204 : bool = Fable.Core.RustInterop.emitRustExpr () v203 
            let v205 : string = "*/ //"
            let v206 : bool = Fable.Core.RustInterop.emitRustExpr () v205 
            let v207 : string = "store"
            let v208 : (string []) = [|v207|]
            let v209 : string = "$0.to_vec()"
            let v210 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v208 v209 
            let v211 : unit = ()
            let v212 : string = $"true; let _func1_from_v211 = Func1::from(move |value| {{ //"
            let v213 : bool = Fable.Core.RustInterop.emitRustExpr () v212 
            let v214 : string = $"value"
            let v215 : string = Fable.Core.RustInterop.emitRustExpr () v214 
            (* run_target_args'
            let v216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v217 : string = "&*$0"
            let v218 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v217 
            let _run_target_args'_v216 = v218 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v219 : string = "&*$0"
            let v220 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v219 
            let _run_target_args'_v216 = v220 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v221 : string = "&*$0"
            let v222 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v215 v221 
            let _run_target_args'_v216 = v222 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v223 : Ref<Str> = v215 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v223 
            #endif
#if FABLE_COMPILER_PYTHON
            let v226 : Ref<Str> = v215 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v226 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v229 : Ref<Str> = v215 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v229 
            #endif
#else
            let v232 : Ref<Str> = v215 |> unbox<Ref<Str>>
            let _run_target_args'_v216 = v232 
            #endif
            let v235 : Ref<Str> = _run_target_args'_v216 
            (* run_target_args'
            let v240 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v241 : string = "String::from($0)"
            let v242 : std_string_String = Fable.Core.RustInterop.emitRustExpr v235 v241 
            let _run_target_args'_v240 = v242 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v243 : string = "String::from($0)"
            let v244 : std_string_String = Fable.Core.RustInterop.emitRustExpr v235 v243 
            let _run_target_args'_v240 = v244 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v245 : string = "String::from($0)"
            let v246 : std_string_String = Fable.Core.RustInterop.emitRustExpr v235 v245 
            let _run_target_args'_v240 = v246 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v247 : std_string_String = v235 |> unbox<std_string_String>
            let _run_target_args'_v240 = v247 
            #endif
#if FABLE_COMPILER_PYTHON
            let v250 : std_string_String = v235 |> unbox<std_string_String>
            let _run_target_args'_v240 = v250 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v253 : std_string_String = v235 |> unbox<std_string_String>
            let _run_target_args'_v240 = v253 
            #endif
#else
            let v256 : std_string_String = v235 |> unbox<std_string_String>
            let _run_target_args'_v240 = v256 
            #endif
            let v259 : std_string_String = _run_target_args'_v240 
            let func1_from_result = v259 //
            let v264 : _ = func1_from_result
            let v265 : string = $"true; $0 /*"
            let v266 : bool = Fable.Core.RustInterop.emitRustExpr v264 v265 
            let v267 : string = $"*/ }}); //"
            let v268 : bool = Fable.Core.RustInterop.emitRustExpr () v267 
            let v269 : string = $"_func1_from_v211"
            let v270 : Func0<string, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v269 
            let v271 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v272 : (string -> std_string_String) = closure10(v270)
            let v273 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v210, v272) v271 
            let v274 : std_sync_Arc<rexie_Rexie> = method11(v187)
            let v275 : string = "$0.transaction(&v273, rexie::TransactionMode::ReadOnly)"
            let v276 : Result<rexie_Transaction, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v274 v275 
            let v277 : (rexie_Error -> std_string_String) = method12()
            (* run_target_args'
            let v278 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v279 : string = "$0.map_err(|x| $1(x))"
            let v280 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v276, v277) v279 
            let _run_target_args'_v278 = v280 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v281 : string = "$0.map_err(|x| $1(x))"
            let v282 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v276, v277) v281 
            let _run_target_args'_v278 = v282 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v283 : string = "$0.map_err(|x| $1(x))"
            let v284 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v276, v277) v283 
            let _run_target_args'_v278 = v284 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v285 : Result<rexie_Transaction, std_string_String> = match v276 with Ok x -> Ok x | Error x -> Error (v277 x)
            let _run_target_args'_v278 = v285 
            #endif
#if FABLE_COMPILER_PYTHON
            let v286 : Result<rexie_Transaction, std_string_String> = match v276 with Ok x -> Ok x | Error x -> Error (v277 x)
            let _run_target_args'_v278 = v286 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v287 : Result<rexie_Transaction, std_string_String> = match v276 with Ok x -> Ok x | Error x -> Error (v277 x)
            let _run_target_args'_v278 = v287 
            #endif
#else
            let v288 : Result<rexie_Transaction, std_string_String> = match v276 with Ok x -> Ok x | Error x -> Error (v277 x)
            let _run_target_args'_v278 = v288 
            #endif
            let v289 : Result<rexie_Transaction, std_string_String> = _run_target_args'_v278 
            let v292 : string = "$0?"
            let v293 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v289 v292 
            let v294 : string = method13()
            (* run_target_args'
            let v295 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v296 : string = "&*$0"
            let v297 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v296 
            let _run_target_args'_v295 = v297 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v298 : string = "&*$0"
            let v299 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v298 
            let _run_target_args'_v295 = v299 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v300 : string = "&*$0"
            let v301 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v294 v300 
            let _run_target_args'_v295 = v301 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v302 : Ref<Str> = v294 |> unbox<Ref<Str>>
            let _run_target_args'_v295 = v302 
            #endif
#if FABLE_COMPILER_PYTHON
            let v305 : Ref<Str> = v294 |> unbox<Ref<Str>>
            let _run_target_args'_v295 = v305 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v308 : Ref<Str> = v294 |> unbox<Ref<Str>>
            let _run_target_args'_v295 = v308 
            #endif
#else
            let v311 : Ref<Str> = v294 |> unbox<Ref<Str>>
            let _run_target_args'_v295 = v311 
            #endif
            let v314 : Ref<Str> = _run_target_args'_v295 
            let v319 : string = "v293.store($0)"
            let v320 : Result<rexie_Store, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v314 v319 
            let v321 : (rexie_Error -> std_string_String) = method14()
            (* run_target_args'
            let v322 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v323 : string = "$0.map_err(|x| $1(x))"
            let v324 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v320, v321) v323 
            let _run_target_args'_v322 = v324 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v325 : string = "$0.map_err(|x| $1(x))"
            let v326 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v320, v321) v325 
            let _run_target_args'_v322 = v326 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v327 : string = "$0.map_err(|x| $1(x))"
            let v328 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v320, v321) v327 
            let _run_target_args'_v322 = v328 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v329 : Result<rexie_Store, std_string_String> = match v320 with Ok x -> Ok x | Error x -> Error (v321 x)
            let _run_target_args'_v322 = v329 
            #endif
#if FABLE_COMPILER_PYTHON
            let v330 : Result<rexie_Store, std_string_String> = match v320 with Ok x -> Ok x | Error x -> Error (v321 x)
            let _run_target_args'_v322 = v330 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v331 : Result<rexie_Store, std_string_String> = match v320 with Ok x -> Ok x | Error x -> Error (v321 x)
            let _run_target_args'_v322 = v331 
            #endif
#else
            let v332 : Result<rexie_Store, std_string_String> = match v320 with Ok x -> Ok x | Error x -> Error (v321 x)
            let _run_target_args'_v322 = v332 
            #endif
            let v333 : Result<rexie_Store, std_string_String> = _run_target_args'_v322 
            let v336 : string = "$0?"
            let v337 : rexie_Store = Fable.Core.RustInterop.emitRustExpr v333 v336 
            let v338 : string = method79(v197)
            (* run_target_args'
            let v339 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v340 : string = "&*$0"
            let v341 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v338 v340 
            let _run_target_args'_v339 = v341 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v342 : string = "&*$0"
            let v343 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v338 v342 
            let _run_target_args'_v339 = v343 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v344 : string = "&*$0"
            let v345 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v338 v344 
            let _run_target_args'_v339 = v345 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v346 : Ref<Str> = v338 |> unbox<Ref<Str>>
            let _run_target_args'_v339 = v346 
            #endif
#if FABLE_COMPILER_PYTHON
            let v349 : Ref<Str> = v338 |> unbox<Ref<Str>>
            let _run_target_args'_v339 = v349 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v352 : Ref<Str> = v338 |> unbox<Ref<Str>>
            let _run_target_args'_v339 = v352 
            #endif
#else
            let v355 : Ref<Str> = v338 |> unbox<Ref<Str>>
            let _run_target_args'_v339 = v355 
            #endif
            let v358 : Ref<Str> = _run_target_args'_v339 
            let v363 : string = "wasm_bindgen::JsValue::from_str($0)"
            let v364 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr v358 v363 
            let v365 : string = $"Box::pin(rexie::Store::get(&v337, v364))"
            let v366 : std_pin_Pin<Box<Dyn<std_future_Future<Result<wasm_bindgen_JsValue option, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v365 
            let v367 : string = "v366.await"
            let v368 : Result<wasm_bindgen_JsValue option, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v367 
            let v369 : (rexie_Error -> std_string_String) = method16()
            (* run_target_args'
            let v370 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v371 : string = "$0.map_err(|x| $1(x))"
            let v372 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v368, v369) v371 
            let _run_target_args'_v370 = v372 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v373 : string = "$0.map_err(|x| $1(x))"
            let v374 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v368, v369) v373 
            let _run_target_args'_v370 = v374 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v375 : string = "$0.map_err(|x| $1(x))"
            let v376 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v368, v369) v375 
            let _run_target_args'_v370 = v376 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v377 : Result<wasm_bindgen_JsValue option, std_string_String> = match v368 with Ok x -> Ok x | Error x -> Error (v369 x)
            let _run_target_args'_v370 = v377 
            #endif
#if FABLE_COMPILER_PYTHON
            let v378 : Result<wasm_bindgen_JsValue option, std_string_String> = match v368 with Ok x -> Ok x | Error x -> Error (v369 x)
            let _run_target_args'_v370 = v378 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v379 : Result<wasm_bindgen_JsValue option, std_string_String> = match v368 with Ok x -> Ok x | Error x -> Error (v369 x)
            let _run_target_args'_v370 = v379 
            #endif
#else
            let v380 : Result<wasm_bindgen_JsValue option, std_string_String> = match v368 with Ok x -> Ok x | Error x -> Error (v369 x)
            let _run_target_args'_v370 = v380 
            #endif
            let v381 : Result<wasm_bindgen_JsValue option, std_string_String> = _run_target_args'_v370 
            let v384 : string = "$0?"
            let v385 : wasm_bindgen_JsValue option = Fable.Core.RustInterop.emitRustExpr v381 v384 
            let v386 : (wasm_bindgen_JsValue -> US4) = method17()
            let v387 : US4 option = v385 |> Option.map v386 
            let v398 : US4 = US4_1
            let v399 : US4 = v387 |> Option.defaultValue v398 
            let v499 : US25 =
                match v399 with
                | US4_1 -> (* None *)
                    US25_1
                | US4_0(v403) -> (* Some *)
                    let v404 : wasm_bindgen_JsValue = method18(v403)
                    let v405 : string = "serde_wasm_bindgen::from_value(v404)"
                    let v406 : Result<serde_json_Value option, serde_wasm_bindgen_Error> = Fable.Core.RustInterop.emitRustExpr () v405 
                    let v407 : (serde_wasm_bindgen_Error -> std_string_String) = method19()
                    (* run_target_args'
                    let v408 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v409 : string = "$0.map_err(|x| $1(x))"
                    let v410 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v406, v407) v409 
                    let _run_target_args'_v408 = v410 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v411 : string = "$0.map_err(|x| $1(x))"
                    let v412 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v406, v407) v411 
                    let _run_target_args'_v408 = v412 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v413 : string = "$0.map_err(|x| $1(x))"
                    let v414 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v406, v407) v413 
                    let _run_target_args'_v408 = v414 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v415 : Result<serde_json_Value option, std_string_String> = match v406 with Ok x -> Ok x | Error x -> Error (v407 x)
                    let _run_target_args'_v408 = v415 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v416 : Result<serde_json_Value option, std_string_String> = match v406 with Ok x -> Ok x | Error x -> Error (v407 x)
                    let _run_target_args'_v408 = v416 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v417 : Result<serde_json_Value option, std_string_String> = match v406 with Ok x -> Ok x | Error x -> Error (v407 x)
                    let _run_target_args'_v408 = v417 
                    #endif
#else
                    let v418 : Result<serde_json_Value option, std_string_String> = match v406 with Ok x -> Ok x | Error x -> Error (v407 x)
                    let _run_target_args'_v408 = v418 
                    #endif
                    let v419 : Result<serde_json_Value option, std_string_String> = _run_target_args'_v408 
                    let v422 : string = "$0?"
                    let v423 : serde_json_Value option = Fable.Core.RustInterop.emitRustExpr v419 v422 
                    let v424 : (serde_json_Value -> US5) = method20()
                    let v425 : US5 option = v423 |> Option.map v424 
                    let v436 : US5 = US5_1
                    let v437 : US5 = v425 |> Option.defaultValue v436 
                    match v437 with
                    | US5_1 -> (* None *)
                        US25_1
                    | US5_0(v441) -> (* Some *)
                        let v442 : serde_json_Value = method21(v441)
                        let v443 : string = "serde_json::from_value(v442)"
                        let v444 : Result<Vec<uint8>, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v443 
                        let v445 : (serde_json_Error -> std_string_String) = method22()
                        (* run_target_args'
                        let v446 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v447 : string = "$0.map_err(|x| $1(x))"
                        let v448 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v444, v445) v447 
                        let _run_target_args'_v446 = v448 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v449 : string = "$0.map_err(|x| $1(x))"
                        let v450 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v444, v445) v449 
                        let _run_target_args'_v446 = v450 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v451 : string = "$0.map_err(|x| $1(x))"
                        let v452 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v444, v445) v451 
                        let _run_target_args'_v446 = v452 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v453 : Result<Vec<uint8>, std_string_String> = match v444 with Ok x -> Ok x | Error x -> Error (v445 x)
                        let _run_target_args'_v446 = v453 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v454 : Result<Vec<uint8>, std_string_String> = match v444 with Ok x -> Ok x | Error x -> Error (v445 x)
                        let _run_target_args'_v446 = v454 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v455 : Result<Vec<uint8>, std_string_String> = match v444 with Ok x -> Ok x | Error x -> Error (v445 x)
                        let _run_target_args'_v446 = v455 
                        #endif
#else
                        let v456 : Result<Vec<uint8>, std_string_String> = match v444 with Ok x -> Ok x | Error x -> Error (v445 x)
                        let _run_target_args'_v446 = v456 
                        #endif
                        let v457 : Result<Vec<uint8>, std_string_String> = _run_target_args'_v446 
                        let v460 : string = "$0?"
                        let v461 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v457 v460 
                        let v462 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                        let v463 : (uint8 []) = Fable.Core.RustInterop.emitRustExpr v461 v462 
                        let v464 : int32 = v463.Length
                        let v465 : string = "state_core.get_data () / data_len: " + string v464 + ""
                        let v466 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v467 : bool = Fable.Core.RustInterop.emitRustExpr v465 v466 
                        let v468 : string = "$0.to_vec()"
                        let v469 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v463 v468 
                        let v470 : string = "v469.as_slice()"
                        let v471 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v470 
                        let v472 : string = "true; let mut v471 = v471"
                        let v473 : bool = Fable.Core.RustInterop.emitRustExpr () v472 
                        let v474 : string = "borsh::BorshDeserialize::deserialize(&mut v471)"
                        let v475 : Result<Heap4, borsh_io_Error> = Fable.Core.RustInterop.emitRustExpr () v474 
                        let v476 : (borsh_io_Error -> std_string_String) = method23()
                        (* run_target_args'
                        let v477 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v478 : string = "$0.map_err(|x| $1(x))"
                        let v479 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v475, v476) v478 
                        let _run_target_args'_v477 = v479 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v480 : string = "$0.map_err(|x| $1(x))"
                        let v481 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v475, v476) v480 
                        let _run_target_args'_v477 = v481 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v482 : string = "$0.map_err(|x| $1(x))"
                        let v483 : Result<Heap4, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v475, v476) v482 
                        let _run_target_args'_v477 = v483 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v484 : Result<Heap4, std_string_String> = match v475 with Ok x -> Ok x | Error x -> Error (v476 x)
                        let _run_target_args'_v477 = v484 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v485 : Result<Heap4, std_string_String> = match v475 with Ok x -> Ok x | Error x -> Error (v476 x)
                        let _run_target_args'_v477 = v485 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v486 : Result<Heap4, std_string_String> = match v475 with Ok x -> Ok x | Error x -> Error (v476 x)
                        let _run_target_args'_v477 = v486 
                        #endif
#else
                        let v487 : Result<Heap4, std_string_String> = match v475 with Ok x -> Ok x | Error x -> Error (v476 x)
                        let _run_target_args'_v477 = v487 
                        #endif
                        let v488 : Result<Heap4, std_string_String> = _run_target_args'_v477 
                        let v491 : string = "$0?"
                        let v492 : Heap4 = Fable.Core.RustInterop.emitRustExpr v488 v491 
                        US25_0(v492)
            let v506 : Heap4 option =
                match v499 with
                | US25_1 -> (* None *)
                    let v504 : Heap4 option = None
                    v504
                | US25_0(v500) -> (* Some *)
                    let v501 : Heap4 option = Some v500 
                    v501
            let v507 : Result<Heap4 option, std_string_String> = Ok v506 
            let v508 : string = v48 + v49 
            let x = v507 //
            let v509 : _ = x
            let v510 : unit = ()
            (* run_target_args'
            let v511 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v512 : string = $"true; let _fix_closure_v510 = $0"
            let v513 : bool = Fable.Core.RustInterop.emitRustExpr v509 v512 
            let _run_target_args'_v511 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v514 : string = $"true; let _fix_closure_v510 = $0"
            let v515 : bool = Fable.Core.RustInterop.emitRustExpr v509 v514 
            let _run_target_args'_v511 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v516 : string = $"true; let _fix_closure_v510 = $0"
            let v517 : bool = Fable.Core.RustInterop.emitRustExpr v509 v516 
            let _run_target_args'_v511 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v511 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v511 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v511 = false 
            #endif
#else
            let _run_target_args'_v511 = false 
            #endif
            let v518 : bool = _run_target_args'_v511 
            let v520 : string = $"true; _fix_closure_v510 " + v508 + "); " + v48 + " // rust.fix_closure'"
            let v521 : bool = Fable.Core.RustInterop.emitRustExpr () v520 
            let v522 : string = "__future_init"
            let v523 : _ = Fable.Core.RustInterop.emitRustExpr () v522 
            let v524 : string = "v523"
            let v525 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v524 
            let func1_from_result = v525 //
            let v526 : _ = func1_from_result
            let v527 : string = $"true; $0 /*"
            let v528 : bool = Fable.Core.RustInterop.emitRustExpr v526 v527 
            let v529 : string = $"*/ }}); //"
            let v530 : bool = Fable.Core.RustInterop.emitRustExpr () v529 
            let v531 : string = $"_func1_from_v188"
            let v532 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v531 
            let v533 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v534 : (struct (string * US23 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>) = closure65(v532)
            let v535 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v142, v534) v533 
            let v536 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = method81(v535)
            let v537 : string = "futures::future::try_join_all(v536)"
            let v538 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap4 option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v537 
            let v539 : string = "v538.await"
            let v540 : Result<Vec<Heap4 option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v539 
            let v541 : string = "$0?"
            let v542 : Vec<Heap4 option> = Fable.Core.RustInterop.emitRustExpr v540 v541 
            US24_0(v542)
        | _ ->
            let v544 : string = "database=None"
            (* run_target_args'
            let v545 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v546 : string = "&*$0"
            let v547 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v544 v546 
            let _run_target_args'_v545 = v547 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v548 : string = "&*$0"
            let v549 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v544 v548 
            let _run_target_args'_v545 = v549 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v550 : string = "&*$0"
            let v551 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v544 v550 
            let _run_target_args'_v545 = v551 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v552 : Ref<Str> = v544 |> unbox<Ref<Str>>
            let _run_target_args'_v545 = v552 
            #endif
#if FABLE_COMPILER_PYTHON
            let v555 : Ref<Str> = v544 |> unbox<Ref<Str>>
            let _run_target_args'_v545 = v555 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v558 : Ref<Str> = v544 |> unbox<Ref<Str>>
            let _run_target_args'_v545 = v558 
            #endif
#else
            let v561 : Ref<Str> = v544 |> unbox<Ref<Str>>
            let _run_target_args'_v545 = v561 
            #endif
            let v564 : Ref<Str> = _run_target_args'_v545 
            (* run_target_args'
            let v569 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v570 : string = "String::from($0)"
            let v571 : std_string_String = Fable.Core.RustInterop.emitRustExpr v564 v570 
            let _run_target_args'_v569 = v571 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v572 : string = "String::from($0)"
            let v573 : std_string_String = Fable.Core.RustInterop.emitRustExpr v564 v572 
            let _run_target_args'_v569 = v573 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v574 : string = "String::from($0)"
            let v575 : std_string_String = Fable.Core.RustInterop.emitRustExpr v564 v574 
            let _run_target_args'_v569 = v575 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v576 : std_string_String = v564 |> unbox<std_string_String>
            let _run_target_args'_v569 = v576 
            #endif
#if FABLE_COMPILER_PYTHON
            let v579 : std_string_String = v564 |> unbox<std_string_String>
            let _run_target_args'_v569 = v579 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v582 : std_string_String = v564 |> unbox<std_string_String>
            let _run_target_args'_v569 = v582 
            #endif
#else
            let v585 : std_string_String = v564 |> unbox<std_string_String>
            let _run_target_args'_v569 = v585 
            #endif
            let v588 : std_string_String = _run_target_args'_v569 
            US24_1(v588)
    let v600 : Result<Vec<Heap4 option>, std_string_String> =
        match v594 with
        | US24_1(v597) -> (* Error *)
            let v598 : Result<Vec<Heap4 option>, std_string_String> = Error v597 
            v598
        | US24_0(v595) -> (* Ok *)
            let v596 : Result<Vec<Heap4 option>, std_string_String> = Ok v595 
            v596
    let v601 : string = $"%A{v600}"
    let v604 : string = "state_core.use_requests (4) / state_data_resource new_local_resource / result: " + string v601 + ""
    let v605 : int64 = 200L
    let v606 : string = method8(v605, v604)
    let v607 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v608 : bool = Fable.Core.RustInterop.emitRustExpr v606 v607 
    let v609 : string = v48 + v49 
    let x = v600 //
    let v610 : _ = x
    let v611 : unit = ()
    (* run_target_args'
    let v612 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v613 : string = $"true; let _fix_closure_v611 = $0"
    let v614 : bool = Fable.Core.RustInterop.emitRustExpr v610 v613 
    let _run_target_args'_v612 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v615 : string = $"true; let _fix_closure_v611 = $0"
    let v616 : bool = Fable.Core.RustInterop.emitRustExpr v610 v615 
    let _run_target_args'_v612 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v617 : string = $"true; let _fix_closure_v611 = $0"
    let v618 : bool = Fable.Core.RustInterop.emitRustExpr v610 v617 
    let _run_target_args'_v612 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v612 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v612 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v612 = false 
    #endif
#else
    let _run_target_args'_v612 = false 
    #endif
    let v619 : bool = _run_target_args'_v612 
    let v621 : string = $"true; _fix_closure_v611 " + v609 + "); " + v48 + " // rust.fix_closure'"
    let v622 : bool = Fable.Core.RustInterop.emitRustExpr () v621 
    let v623 : string = "__future_init"
    let v624 : _ = Fable.Core.RustInterop.emitRustExpr () v623 
    let v625 : string = "v624"
    let v626 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v625 
    let v627 : string = $"true; $0 /*"
    let v628 : bool = Fable.Core.RustInterop.emitRustExpr v626 v627 
    let v629 : string = $"*/ }}); //"
    let v630 : bool = Fable.Core.RustInterop.emitRustExpr () v629 
    let v631 : string = $"_func0_from_v125"
    let v632 : Func0<std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<Heap4 option>, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v631 
    let v633 : string = "leptos::prelude::ArcLocalResource::new(|| async move { $0().await })"
    let v634 : leptos_prelude_ArcLocalResource<Result<Vec<Heap4 option>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v632 v633 
    let v635 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v636 : (unit -> Result<Vec<Heap4 option>, std_string_String> option) = closure66(v634)
    let v637 : leptos_prelude_ArcMemo<Result<Vec<Heap4 option>, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr v636 v635 
    let v638 : unit = ()
    let v639 : string = $"true; let _func0_from_v638 = Func0::from(move || {{ //"
    let v640 : bool = Fable.Core.RustInterop.emitRustExpr () v639 
    let v641 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v642 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v0 v641 
    let v643 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v644 : Result<Vec<Heap4 option>, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v637 v643 
    let v645 : string = $"%A{v642}"
    let v648 : int64 = 400L
    let v649 : string = method8(v648, v645)
    let v650 : string = "state_core.use_requests (7) / json new_local_resource / requests: " + string v649 + ""
    let v651 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v652 : bool = Fable.Core.RustInterop.emitRustExpr v650 v651 
    let v653 : string = "true; let __future_init = Box::pin(/*"
    let v654 : bool = Fable.Core.RustInterop.emitRustExpr () v653 
    let v655 : string = "*/ async move { /*"
    let v656 : bool = Fable.Core.RustInterop.emitRustExpr () v655 
    let v657 : string = "*/ //"
    let v658 : bool = Fable.Core.RustInterop.emitRustExpr () v657 
    let v659 : (Result<Vec<Heap4 option>, std_string_String> -> US26) = method82()
    let v660 : US26 option = v644 |> Option.map v659 
    let v671 : US26 = US26_1
    let v672 : US26 = v660 |> Option.defaultValue v671 
    let v714 : US27 =
        match v672 with
        | US26_1 -> (* None *)
            US27_1
        | US26_0(v676) -> (* Some *)
            let v677 : (Vec<Heap4 option> -> US24) = method83()
            let v678 : (std_string_String -> US24) = method84()
            let v679 : US24 = match v676 with Ok x -> v677 x | Error x -> v678 x
            let v710 : US28 =
                match v679 with
                | US24_1(v707) -> (* Error *)
                    US28_1(v707)
                | US24_0(v680) -> (* Ok *)
                    let v681 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v682 : bool = Fable.Core.RustInterop.emitRustExpr v680 v681 
                    let v683 : string = "x"
                    let v684 : Heap4 option = Fable.Core.RustInterop.emitRustExpr () v683 
                    let v685 : (Heap4 -> US25) = method85()
                    let v686 : US25 option = v684 |> Option.map v685 
                    let v697 : US25 = US25_1
                    let v698 : US25 = v686 |> Option.defaultValue v697 
                    let v702 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v703 : bool = Fable.Core.RustInterop.emitRustExpr v698 v702 
                    let v704 : string = "_vec_map"
                    let v705 : Vec<US25> = Fable.Core.RustInterop.emitRustExpr () v704 
                    US28_0(v705)
            US27_0(v710)
    let v715 : string = $"%A{v714}"
    let v718 : int64 = 400L
    let v719 : string = method8(v718, v715)
    let v720 : string = "state_core.use_requests (8) / result_memo / state_data: " + string v719 + ""
    let v721 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v722 : bool = Fable.Core.RustInterop.emitRustExpr v720 v721 
    let v723 : (int32 -> (struct (string * US23 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>)) = method86(v714)
    let v724 : Vec<struct (string * US23 * string * bool * bool)> = method96(v642)
    let v725 : string = "v724.iter().enumerate().map(|(i, x)| v723(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v726 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v725 
    let v727 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = method97(v726)
    let v728 : string = "futures::future::try_join_all(v727)"
    let v729 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<string option, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v728 
    let v730 : string = "v729.await"
    let v731 : Result<Vec<string option>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v730 
    let v732 : string = "$0?"
    let v733 : Vec<string option> = Fable.Core.RustInterop.emitRustExpr v731 v732 
    let v734 : Result<Vec<string option>, std_string_String> = Ok v733 
    let v735 : string = v48 + v49 
    let x = v734 //
    let v736 : _ = x
    let v737 : unit = ()
    (* run_target_args'
    let v738 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v739 : string = $"true; let _fix_closure_v737 = $0"
    let v740 : bool = Fable.Core.RustInterop.emitRustExpr v736 v739 
    let _run_target_args'_v738 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v741 : string = $"true; let _fix_closure_v737 = $0"
    let v742 : bool = Fable.Core.RustInterop.emitRustExpr v736 v741 
    let _run_target_args'_v738 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v743 : string = $"true; let _fix_closure_v737 = $0"
    let v744 : bool = Fable.Core.RustInterop.emitRustExpr v736 v743 
    let _run_target_args'_v738 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v738 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v738 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v738 = false 
    #endif
#else
    let _run_target_args'_v738 = false 
    #endif
    let v745 : bool = _run_target_args'_v738 
    let v747 : string = $"true; _fix_closure_v737 " + v735 + "); " + v48 + " // rust.fix_closure'"
    let v748 : bool = Fable.Core.RustInterop.emitRustExpr () v747 
    let v749 : string = "__future_init"
    let v750 : _ = Fable.Core.RustInterop.emitRustExpr () v749 
    let v751 : string = "v750"
    let v752 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v751 
    let v753 : string = $"true; $0 /*"
    let v754 : bool = Fable.Core.RustInterop.emitRustExpr v752 v753 
    let v755 : string = $"*/ }}); //"
    let v756 : bool = Fable.Core.RustInterop.emitRustExpr () v755 
    let v757 : string = $"_func0_from_v638"
    let v758 : Func0<std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<string option>, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v757 
    let v759 : string = "leptos::prelude::ArcLocalResource::new(|| async move { $0().await })"
    let v760 : leptos_prelude_ArcLocalResource<Result<Vec<string option>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v758 v759 
    let v761 : unit = ()
    let v762 : string = $"true; let _func1_from_v761 = Func1::from(move |value| {{ //"
    let v763 : bool = Fable.Core.RustInterop.emitRustExpr () v762 
    let v764 : string = $"value"
    let v765 : Heap4 = Fable.Core.RustInterop.emitRustExpr () v764 
    let v766 : string = $"%A{v765}"
    let v769 : int64 = System.Convert.ToInt64 v766.Length
    let v770 : string = "state_core.use_requests (10) / set_state_data_action / value_len: " + string v769 + ""
    let v771 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v772 : bool = Fable.Core.RustInterop.emitRustExpr v770 v771 
    let v773 : string = "true; let __future_init = Box::pin(/*"
    let v774 : bool = Fable.Core.RustInterop.emitRustExpr () v773 
    let v775 : string = "*/ async move { /*"
    let v776 : bool = Fable.Core.RustInterop.emitRustExpr () v775 
    let v777 : string = "*/ //"
    let v778 : bool = Fable.Core.RustInterop.emitRustExpr () v777 
    let v779 : string = "Box::pin($0)"
    let v780 : std_pin_Pin<Box<leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>>>> = Fable.Core.RustInterop.emitRustExpr v0 v779 
    let v781 : string = $"leptos::prelude::ArcMemo::get_untracked(&$0)"
    let v782 : Vec<struct (string * US23 * string * bool * bool)> = Fable.Core.RustInterop.emitRustExpr v780 v781 
    let v783 : string = "Box::pin($0)"
    let v784 : std_pin_Pin<Box<leptos_prelude_ArcMemo<PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option>>> = Fable.Core.RustInterop.emitRustExpr v124 v783 
    let v785 : string = $"leptos::prelude::ArcMemo::get_untracked(&$0)"
    let v786 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr v784 v785 
    let v787 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v788 : bool = Fable.Core.RustInterop.emitRustExpr v786 v787 
    let v789 : string = "x"
    let v790 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v789 
    let v791 : string = "$0.0"
    let v792 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v790 v791 
    let v793 : string = "true; $0 })"
    let v794 : bool = Fable.Core.RustInterop.emitRustExpr v792 v793 
    let v795 : string = "_optionm_map_"
    let v796 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v795 
    let v797 : (std_sync_Arc<rexie_Rexie> -> US2) = method9()
    let v798 : US2 option = v796 |> Option.map v797 
    let v809 : US2 = US2_1
    let v810 : US2 = v798 |> Option.defaultValue v809 
    let v970 : US34 =
        match v810 with
        | US2_0(v814) -> (* Some *)
            let v815 : unit = ()
            let v816 : string = $"true; let _func1_from_v815 = Func1::from(move |value| {{ //"
            let v817 : bool = Fable.Core.RustInterop.emitRustExpr () v816 
            let v818 : string = $"value"
            let struct (v819 : string, v820 : US23, v821 : string, v822 : bool, v823 : bool) = Fable.Core.RustInterop.emitRustExpr () v818 
            let v824 : string = "true; let __future_init = Box::pin(/*"
            let v825 : bool = Fable.Core.RustInterop.emitRustExpr () v824 
            let v826 : string = "*/ async move { /*"
            let v827 : bool = Fable.Core.RustInterop.emitRustExpr () v826 
            let v828 : string = "*/ //"
            let v829 : bool = Fable.Core.RustInterop.emitRustExpr () v828 
            let v830 : string = "state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: " + v819 + ""
            let v831 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v832 : bool = Fable.Core.RustInterop.emitRustExpr v830 v831 
            let v833 : string = "url[" + v819 + "](" + $"%A{v821}" + ")"
            let v834 : string = $"%A{v765}"
            let v837 : int64 = System.Convert.ToInt64 v834.Length
            let v838 : string = "state_core.set_data () / data_len: " + string v837 + ""
            let v839 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v840 : bool = Fable.Core.RustInterop.emitRustExpr v838 v839 
            let v841 : string = "true; let __future_init = Box::pin(/*"
            let v842 : bool = Fable.Core.RustInterop.emitRustExpr () v841 
            let v843 : string = "*/ async move { /*"
            let v844 : bool = Fable.Core.RustInterop.emitRustExpr () v843 
            let v845 : string = "*/ //"
            let v846 : bool = Fable.Core.RustInterop.emitRustExpr () v845 
            let v847 : string = "true; let mut data = Vec::new()"
            let v848 : bool = Fable.Core.RustInterop.emitRustExpr () v847 
            let v849 : string = "true; borsh::BorshSerialize::serialize(&$0, &mut data).unwrap()"
            let v850 : bool = Fable.Core.RustInterop.emitRustExpr v765 v849 
            let v851 : string = "data"
            let v852 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v851 
            let v853 : string = "serde_wasm_bindgen::to_value(&v852).unwrap()"
            let v854 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr () v853 
            let v855 : string = method98(v833)
            (* run_target_args'
            let v856 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v857 : string = "&*$0"
            let v858 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v855 v857 
            let _run_target_args'_v856 = v858 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v859 : string = "&*$0"
            let v860 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v855 v859 
            let _run_target_args'_v856 = v860 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v861 : string = "&*$0"
            let v862 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v855 v861 
            let _run_target_args'_v856 = v862 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v863 : Ref<Str> = v855 |> unbox<Ref<Str>>
            let _run_target_args'_v856 = v863 
            #endif
#if FABLE_COMPILER_PYTHON
            let v866 : Ref<Str> = v855 |> unbox<Ref<Str>>
            let _run_target_args'_v856 = v866 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v869 : Ref<Str> = v855 |> unbox<Ref<Str>>
            let _run_target_args'_v856 = v869 
            #endif
#else
            let v872 : Ref<Str> = v855 |> unbox<Ref<Str>>
            let _run_target_args'_v856 = v872 
            #endif
            let v875 : Ref<Str> = _run_target_args'_v856 
            let v880 : string = "$0.transaction(&[\"store\"], rexie::TransactionMode::ReadWrite)?"
            let v881 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v814 v880 
            let v882 : string = "v881.store(\"store\")?"
            let v883 : rexie_Store = Fable.Core.RustInterop.emitRustExpr () v882 
            let v884 : string = "true; v883.put(&v854, Some(&$0.into())).await?"
            let v885 : bool = Fable.Core.RustInterop.emitRustExpr v875 v884 
            let v886 : string = "true; v881.done().await?"
            let v887 : bool = Fable.Core.RustInterop.emitRustExpr () v886 
            let v888 : Result<unit, rexie_Error> = Ok () 
            let v889 : string = v48 + v49 
            let x = v888 //
            let v890 : _ = x
            let v891 : unit = ()
            (* run_target_args'
            let v892 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v893 : string = $"true; let _fix_closure_v891 = $0"
            let v894 : bool = Fable.Core.RustInterop.emitRustExpr v890 v893 
            let _run_target_args'_v892 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v895 : string = $"true; let _fix_closure_v891 = $0"
            let v896 : bool = Fable.Core.RustInterop.emitRustExpr v890 v895 
            let _run_target_args'_v892 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v897 : string = $"true; let _fix_closure_v891 = $0"
            let v898 : bool = Fable.Core.RustInterop.emitRustExpr v890 v897 
            let _run_target_args'_v892 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v892 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v892 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v892 = false 
            #endif
#else
            let _run_target_args'_v892 = false 
            #endif
            let v899 : bool = _run_target_args'_v892 
            let v901 : string = $"true; _fix_closure_v891 " + v889 + "); " + v48 + " // rust.fix_closure'"
            let v902 : bool = Fable.Core.RustInterop.emitRustExpr () v901 
            let v903 : string = "__future_init"
            let v904 : _ = Fable.Core.RustInterop.emitRustExpr () v903 
            let v905 : string = "v904"
            let v906 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v905 
            let v907 : string = "v906.await"
            let v908 : Result<unit, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v907 
            let v909 : (rexie_Error -> std_string_String) = method99()
            (* run_target_args'
            let v910 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v911 : string = "$0.map_err(|x| $1(x))"
            let v912 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v908, v909) v911 
            let _run_target_args'_v910 = v912 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v913 : string = "$0.map_err(|x| $1(x))"
            let v914 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v908, v909) v913 
            let _run_target_args'_v910 = v914 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v915 : string = "$0.map_err(|x| $1(x))"
            let v916 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v908, v909) v915 
            let _run_target_args'_v910 = v916 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v917 : Result<unit, std_string_String> = match v908 with Ok x -> Ok x | Error x -> Error (v909 x)
            let _run_target_args'_v910 = v917 
            #endif
#if FABLE_COMPILER_PYTHON
            let v918 : Result<unit, std_string_String> = match v908 with Ok x -> Ok x | Error x -> Error (v909 x)
            let _run_target_args'_v910 = v918 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v919 : Result<unit, std_string_String> = match v908 with Ok x -> Ok x | Error x -> Error (v909 x)
            let _run_target_args'_v910 = v919 
            #endif
#else
            let v920 : Result<unit, std_string_String> = match v908 with Ok x -> Ok x | Error x -> Error (v909 x)
            let _run_target_args'_v910 = v920 
            #endif
            let v921 : Result<unit, std_string_String> = _run_target_args'_v910 
            let v924 : string = "true; $0?"
            let v925 : bool = Fable.Core.RustInterop.emitRustExpr v921 v924 
            
            let v926 : Result<unit, std_string_String> = Ok () 
            let v927 : string = v48 + v49 
            let x = v926 //
            let v928 : _ = x
            let v929 : unit = ()
            (* run_target_args'
            let v930 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v931 : string = $"true; let _fix_closure_v929 = $0"
            let v932 : bool = Fable.Core.RustInterop.emitRustExpr v928 v931 
            let _run_target_args'_v930 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v933 : string = $"true; let _fix_closure_v929 = $0"
            let v934 : bool = Fable.Core.RustInterop.emitRustExpr v928 v933 
            let _run_target_args'_v930 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v935 : string = $"true; let _fix_closure_v929 = $0"
            let v936 : bool = Fable.Core.RustInterop.emitRustExpr v928 v935 
            let _run_target_args'_v930 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v930 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v930 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v930 = false 
            #endif
#else
            let _run_target_args'_v930 = false 
            #endif
            let v937 : bool = _run_target_args'_v930 
            let v939 : string = $"true; _fix_closure_v929 " + v927 + "); " + v48 + " // rust.fix_closure'"
            let v940 : bool = Fable.Core.RustInterop.emitRustExpr () v939 
            let v941 : string = "__future_init"
            let v942 : _ = Fable.Core.RustInterop.emitRustExpr () v941 
            let v943 : string = "v942"
            let v944 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v943 
            let func1_from_result = v944 //
            let v945 : _ = func1_from_result
            let v946 : string = $"true; $0 /*"
            let v947 : bool = Fable.Core.RustInterop.emitRustExpr v945 v946 
            let v948 : string = $"*/ }}); //"
            let v949 : bool = Fable.Core.RustInterop.emitRustExpr () v948 
            let v950 : string = $"_func1_from_v815"
            let v951 : Func0<struct (string * US23 * string * bool * bool), std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v950 
            let v952 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v953 : (struct (string * US23 * string * bool * bool) -> std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>) = closure76(v951)
            let v954 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr struct (v782, v953) v952 
            let v955 : Vec<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = method101(v954)
            let v956 : string = "futures::future::try_join_all(v955)"
            let v957 : futures_future_TryJoinAll<std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v956 
            let v958 : string = "v957.await"
            let v959 : Result<Vec<unit>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v958 
            let v960 : string = "$0?"
            let v961 : Vec<unit> = Fable.Core.RustInterop.emitRustExpr v959 v960 
            US34_0(v961)
        | _ ->
            let v963 : string = "state_core.use_requests (12) / set_state_data_action / database,request=None"
            let v964 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v965 : bool = Fable.Core.RustInterop.emitRustExpr v963 v964 
            let v966 : (unit []) = [||]
            let v967 : string = "$0.to_vec()"
            let v968 : Vec<unit> = Fable.Core.RustInterop.emitRustExpr v966 v967 
            US34_0(v968)
    let v976 : Result<Vec<unit>, std_string_String> =
        match v970 with
        | US34_1(v973) -> (* Error *)
            let v974 : Result<Vec<unit>, std_string_String> = Error v973 
            v974
        | US34_0(v971) -> (* Ok *)
            let v972 : Result<Vec<unit>, std_string_String> = Ok v971 
            v972
    let v977 : string = v48 + v49 
    let x = v976 //
    let v978 : _ = x
    let v979 : unit = ()
    (* run_target_args'
    let v980 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v981 : string = $"true; let _fix_closure_v979 = $0"
    let v982 : bool = Fable.Core.RustInterop.emitRustExpr v978 v981 
    let _run_target_args'_v980 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v983 : string = $"true; let _fix_closure_v979 = $0"
    let v984 : bool = Fable.Core.RustInterop.emitRustExpr v978 v983 
    let _run_target_args'_v980 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v985 : string = $"true; let _fix_closure_v979 = $0"
    let v986 : bool = Fable.Core.RustInterop.emitRustExpr v978 v985 
    let _run_target_args'_v980 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v980 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v980 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v980 = false 
    #endif
#else
    let _run_target_args'_v980 = false 
    #endif
    let v987 : bool = _run_target_args'_v980 
    let v989 : string = $"true; _fix_closure_v979 " + v977 + "); " + v48 + " // rust.fix_closure'"
    let v990 : bool = Fable.Core.RustInterop.emitRustExpr () v989 
    let v991 : string = "__future_init"
    let v992 : _ = Fable.Core.RustInterop.emitRustExpr () v991 
    let v993 : string = "v992"
    let v994 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v993 
    let func1_from_result = v994 //
    let v995 : _ = func1_from_result
    let v996 : string = $"true; $0 /*"
    let v997 : bool = Fable.Core.RustInterop.emitRustExpr v995 v996 
    let v998 : string = $"*/ }}); //"
    let v999 : bool = Fable.Core.RustInterop.emitRustExpr () v998 
    let v1000 : string = $"_func1_from_v761"
    let v1001 : Func0<Heap4, std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v1000 
    let v1002 : string = "leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone()))"
    let v1003 : (Heap4 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<Vec<unit>, std_string_String>>>>>) = closure77(v1001)
    let v1004 : leptos_prelude_Action<Heap4, Result<Vec<unit>, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1003 v1002 
    let v1005 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v1006 : (unit -> (Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])) = closure130(v0, v637, v760, v1004)
    let v1007 : leptos_prelude_ArcMemo<(Result<crate_model_near_rpc_RpcResponse option, std_string_String> [])> = Fable.Core.RustInterop.emitRustExpr v1006 v1005 
    let v1008 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v1009 : (unit -> Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) = closure134(v1, v121, v634, v1007)
    let v1010 : leptos_prelude_ArcMemo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1009 v1008 
    v1010
and method167 () : string =
    let v0 : string = "https://rpc.mainnet.near.org"
    v0
and closure137 () (v0 : US14) : US57 =
    US57_0(v0)
and method168 () : (US14 -> US57) =
    closure137()
and closure138 () (v0 : std_string_String) : US57 =
    US57_1(v0)
and method169 () : (std_string_String -> US57) =
    closure138()
and closure139 () (v0 : crate_model_near_rpc_RpcResponse) : US60 =
    US60_0(v0)
and method170 () : (crate_model_near_rpc_RpcResponse -> US60) =
    closure139()
and closure140 () (v0 : std_string_String) : US60 =
    US60_1(v0)
and method171 () : (std_string_String -> US60) =
    closure140()
and method172 (v0 : Func0<Heap6, std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>>>) : Func0<Heap6, std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>>> =
    v0
and closure141 (v0 : Func0<Heap6, std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>>>) (v1 : Heap6) : std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>> =
    let v2 : Func0<Heap6, std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>>> = method172(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and closure144 () (v0 : US59) : US58 =
    US58_0(v0)
and method174 () : (US59 -> US58) =
    closure144()
and closure145 () (v0 : std_string_String) : US58 =
    US58_1(v0)
and method175 () : (std_string_String -> US58) =
    closure145()
and closure143 () (v0 : Result<US59, std_string_String>) : US58 =
    let v1 : (US59 -> US58) = method174()
    let v2 : (std_string_String -> US58) = method175()
    let v3 : US58 = match v0 with Ok x -> v1 x | Error x -> v2 x
    v3
and method173 () : (Result<US59, std_string_String> -> US58) =
    closure143()
and closure146 () (v0 : US58) : US62 =
    US62_0(v0)
and method176 () : (US58 -> US62) =
    closure146()
and closure142 (v0 : leptos_prelude_ArcAction<Heap6, Result<US59, std_string_String>>) () : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
    let v1 : string = "leptos::prelude::ArcAction::value(&$0)"
    let v2 : leptos_prelude_ArcRwSignal<Result<US59, std_string_String> option> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v4 : Result<US59, std_string_String> option = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (Result<US59, std_string_String> -> US58) = method173()
    let v6 : US58 option = v4 |> Option.map v5 
    let v19 : (US58 -> US62) = method176()
    let v20 : US62 option = v6 |> Option.map v19 
    let v31 : US62 = US62_1
    let v32 : US62 = v20 |> Option.defaultValue v31 
    let v53 : US58 =
        match v32 with
        | US62_0(v36) -> (* Some *)
            match v36 with
            | US58_1(v37) -> (* Error *)
                US58_1(v37)
            | US58_0(v39) -> (* Ok *)
                match v39 with
                | US59_0(v40, v41, v42, v43) -> (* Some *)
                    let v44 : US59 = US59_0(v40, v41, v42, v43)
                    US58_0(v44)
                | _ ->
                    let v46 : US59 = US59_1
                    US58_0(v46)
        | _ ->
            let v51 : US59 = US59_1
            US58_0(v51)
    let v69 : US63 =
        match v53 with
        | US58_1(v66) -> (* Error *)
            US63_1(v66)
        | US58_0(v54) -> (* Ok *)
            let v64 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option =
                match v54 with
                | US59_1 -> (* None *)
                    let v62 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = None
                    v62
                | US59_0(v55, v56, v57, v58) -> (* Some *)
                    let v59 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option = Some struct (v55, v56, v57, v58) 
                    v59
            US63_0(v64)
    let v75 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> =
        match v69 with
        | US63_1(v72) -> (* Error *)
            let v73 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Error v72 
            v73
        | US63_0(v70) -> (* Ok *)
            let v71 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Ok v70 
            v71
    let v76 : string = $"%A{v75}"
    let v79 : string = "dice_view.render (x) / roll new_arc_memo / result: " + string v76 + ""
    let v80 : int64 = 200L
    let v81 : string = method8(v80, v79)
    let v82 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v83 : bool = Fable.Core.RustInterop.emitRustExpr v81 v82 
    v75
and closure148 () (v0 : struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option) : US63 =
    US63_0(v0)
and method177 () : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US63) =
    closure148()
and closure149 () (v0 : std_string_String) : US63 =
    US63_1(v0)
and method178 () : (std_string_String -> US63) =
    closure149()
and closure150 () struct (v0 : std_string_String, v1 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option, v2 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option, v3 : std_string_String option) : US59 =
    US59_0(v0, v1, v2, v3)
and method179 () : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US59) =
    closure150()
and closure151 () struct (v0 : std_string_String, v1 : std_string_String, v2 : struct (std_string_String option * std_string_String option) option, v3 : int32, v4 : std_string_String, v5 : std_string_String) : US64 =
    US64_0(v0, v1, v2, v3, v4, v5)
and method180 () : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US64) =
    closure151()
and closure147 (v0 : leptos_prelude_ArcMemo<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>) () : string option =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US63) = method177()
    let v4 : (std_string_String -> US63) = method178()
    let v5 : US63 = match v2 with Ok x -> v3 x | Error x -> v4 x
    let v31 : US58 =
        match v5 with
        | US63_1(v28) -> (* Error *)
            US58_1(v28)
        | US63_0(v6) -> (* Ok *)
            let v7 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US59) = method179()
            let v8 : US59 option = v6 |> Option.map v7 
            let v22 : US59 = US59_1
            let v23 : US59 = v8 |> Option.defaultValue v22 
            US58_0(v23)
    let v72 : US31 =
        match v31 with
        | US58_0(v32) -> (* Ok *)
            match v32 with
            | US59_0(v33, v34, v35, v36) -> (* Some *)
                let v37 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US64) = method180()
                let v38 : US64 option = v35 |> Option.map v37 
                let v54 : US64 = US64_1
                let v55 : US64 = v38 |> Option.defaultValue v54 
                match v55 with
                | US64_0(v59, v60, v61, v62, v63, v64) -> (* Some *)
                    let v65 : string = string v59 + ": " + string v63 + " - " + string v64 + " (" + string v60 + ")"
                    US31_0(v65)
                | _ ->
                    US31_1
            | _ ->
                US31_1
        | _ ->
            US31_1
    let v79 : string option =
        match v72 with
        | US31_1 -> (* None *)
            let v77 : string option = None
            v77
        | US31_0(v73) -> (* Some *)
            let v74 : string option = Some v73 
            v74
    let v80 : string = $"%A{v79}"
    let v83 : string = "dice_view.render (x) / error_message new_arc_memo / result: " + string v80 + ""
    let v84 : int64 = 200L
    let v85 : string = method8(v84, v83)
    let v86 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v87 : bool = Fable.Core.RustInterop.emitRustExpr v85 v86 
    v79
and closure152 (v0 : Heap2) () : US31 =
    let v1 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v2 : string = "Box::pin($0)"
    let v3 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_ArcRwSignal<Heap0> = v5.l3
    let v7 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v8 : Heap0 = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : std_string_String option = v8.l1
    let v10 : (std_string_String -> US14) = method39()
    let v11 : US14 option = v9 |> Option.map v10 
    let v22 : US14 = US14_1
    let v23 : US14 = v11 |> Option.defaultValue v22 
    match v23 with
    | US14_1 -> (* None *)
        US31_1
    | US14_0(v27) -> (* Some *)
        let v28 : string = "fable_library_rust::String_::fromString($0)"
        let v29 : string = Fable.Core.RustInterop.emitRustExpr v27 v28 
        US31_0(v29)
and method181 (v0 : Func0<(bool * std_string_String), struct (bool * std_string_String)>) : Func0<(bool * std_string_String), struct (bool * std_string_String)> =
    v0
and closure154 (v0 : Func0<(bool * std_string_String), struct (bool * std_string_String)>) (v1 : (bool * std_string_String)) : struct (bool * std_string_String) =
    let v2 : Func0<(bool * std_string_String), struct (bool * std_string_String)> = method181(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : bool, v6 : std_string_String) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6)
and method182 (v0 : Func0<struct (bool * std_string_String), std_string_String>) : Func0<struct (bool * std_string_String), std_string_String> =
    v0
and closure155 (v0 : Func0<struct (bool * std_string_String), std_string_String>) struct (v1 : bool, v2 : std_string_String) : std_string_String =
    let v3 : Func0<struct (bool * std_string_String), std_string_String> = method182(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and closure157 (v0 : int32) (v1 : std_string_String) : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) =
    let v2 : string = $"leptos::prelude::signal($0)"
    let struct (v3 : leptos_prelude_ReadSignal<std_string_String>, v4 : leptos_prelude_WriteSignal<std_string_String>) = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v5 : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) = v0, struct (v3, v4) 
    v5
and closure156 () (v0 : int32) : (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))) =
    closure157(v0)
and method183 () : (int32 -> (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)))) =
    closure156()
and method184 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and closure153 (v0 : Heap2) () : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> =
    let v1 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v2 : string = "Box::pin($0)"
    let v3 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_ArcRwSignal<Heap0> = v5.l3
    let v7 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v8 : Heap0 = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : Vec<(bool * std_string_String)> = v8.l0
    let v10 : unit = ()
    let v11 : string = $"true; let _func1_from_v10 = Func1::from(move |value| {{ //"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = $"value"
    let v14 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr () v13 
    let (a, b) = v14 
    let v15 : bool = a
    let v16 : std_string_String = b
    let func1_from_result = struct (v15, v16) //
    let v21 : _ = func1_from_result
    let v22 : string = $"true; $0 /*"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = $"*/ }}); //"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = $"_func1_from_v10"
    let v27 : Func0<(bool * std_string_String), struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v29 : ((bool * std_string_String) -> struct (bool * std_string_String)) = closure154(v27)
    let v30 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v9, v29) v28 
    let v31 : (struct (bool * std_string_String) -> bool) = method55()
    let v32 : Vec<struct (bool * std_string_String)> = method56(v30)
    let v33 : string = "v32.into_iter().filter(|x| v31(x.clone().clone())).collect::<Vec<_>>()"
    let v34 : Vec<struct (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v33 
    let v35 : unit = ()
    let v36 : string = $"true; let _func1_from_v35 = Func1::from(move |value| {{ //"
    let v37 : bool = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : string = $"value"
    let struct (v39 : bool, v40 : std_string_String) = Fable.Core.RustInterop.emitRustExpr () v38 
    let func1_from_result = v40 //
    let v41 : _ = func1_from_result
    let v42 : string = $"true; $0 /*"
    let v43 : bool = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = $"*/ }}); //"
    let v45 : bool = Fable.Core.RustInterop.emitRustExpr () v44 
    let v46 : string = $"_func1_from_v35"
    let v47 : Func0<struct (bool * std_string_String), std_string_String> = Fable.Core.RustInterop.emitRustExpr () v46 
    let v48 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v49 : (struct (bool * std_string_String) -> std_string_String) = closure155(v47)
    let v50 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v34, v49) v48 
    let v51 : (int32 -> (std_string_String -> (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)))) = method183()
    let v52 : Vec<std_string_String> = method184(v50)
    let v53 : string = "v52.iter().enumerate().map(|(i, x)| v51(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v54 : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> = Fable.Core.RustInterop.emitRustExpr () v53 
    v54
and method185 (v0 : Func0<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)), struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)>) : Func0<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)), struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)> =
    v0
and closure159 (v0 : Func0<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)), struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)>) (v1 : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))) : struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>) =
    let v2 : Func0<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)), struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)> = method185(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : int32, v6 : leptos_prelude_ReadSignal<std_string_String>, v7 : leptos_prelude_WriteSignal<std_string_String>) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7)
and method186 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>), struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>) : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>), struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> =
    v0
and closure160 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>), struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>) struct (v1 : int32, v2 : leptos_prelude_ReadSignal<std_string_String>, v3 : leptos_prelude_WriteSignal<std_string_String>) : struct (int32 * leptos_prelude_ReadSignal<std_string_String>) =
    let v4 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>), struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = method186(v0)
    let func1_move_x = struct (v1, v2, v3) //
    let v5 : _ = func1_move_x
    let v6 : string = "(move |x| v4(x))($0)"
    let struct (v7 : int32, v8 : leptos_prelude_ReadSignal<std_string_String>) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    struct (v7, v8)
and closure158 (v0 : leptos_prelude_ArcMemo<Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>>) () : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : unit = ()
    let v4 : string = $"true; let _func1_from_v3 = Func1::from(move |value| {{ //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = $"value"
    let v7 : (int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) = Fable.Core.RustInterop.emitRustExpr () v6 
    let (a, b) = v7 
    let v8 : int32 = a
    let struct (v9 : leptos_prelude_ReadSignal<std_string_String>, v10 : leptos_prelude_WriteSignal<std_string_String>) = b
    let func1_from_result = struct (v8, v9, v10) //
    let v17 : _ = func1_from_result
    let v18 : string = $"true; $0 /*"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr v17 v18 
    let v20 : string = $"*/ }}); //"
    let v21 : bool = Fable.Core.RustInterop.emitRustExpr () v20 
    let v22 : string = $"_func1_from_v3"
    let v23 : Func0<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)), struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr () v22 
    let v24 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v25 : ((int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) -> struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)) = closure159(v23)
    let v26 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr struct (v2, v25) v24 
    let v27 : unit = ()
    let v28 : string = $"true; let _func1_from_v27 = Func1::from(move |value| {{ //"
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = $"value"
    let struct (v31 : int32, v32 : leptos_prelude_ReadSignal<std_string_String>, v33 : leptos_prelude_WriteSignal<std_string_String>) = Fable.Core.RustInterop.emitRustExpr () v30 
    let func1_from_result = struct (v31, v32) //
    let v34 : _ = func1_from_result
    let v35 : string = $"true; $0 /*"
    let v36 : bool = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = $"*/ }}); //"
    let v38 : bool = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = $"_func1_from_v27"
    let v40 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>), struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v42 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>) -> struct (int32 * leptos_prelude_ReadSignal<std_string_String>)) = closure160(v40)
    let v43 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr struct (v26, v42) v41 
    v43
and closure161 () () : string =
    let v0 : string = ""
    v0
and closure162 () () : bool =
    true
and closure163 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure164 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure165 () () : string =
    let v0 : string = "Roll"
    v0
and method187 () : (unit -> string) =
    closure165()
and closure166 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure168 () () : string =
    let v0 : string = "[align-self:flex-start]"
    v0
and closure169 () () : bool =
    false
and closure170 () () : string =
    let v0 : string = "py-[4px]"
    v0
and closure171 (v0 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_ArcMemo<US31> option, v2 : Heap2) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v3 : string = ""
    let v4 : string = "r#\"" + v3 + "\"#"
    let v5 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v4 
    v5
and closure173 () (v0 : leptos_prelude_ArcMemo<US31>) : US65 =
    US65_0(v0)
and method189 () : (leptos_prelude_ArcMemo<US31> -> US65) =
    closure173()
and closure172 (v0 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_ArcMemo<US31> option, v2 : Heap2) () : string =
    let v3 : (leptos_prelude_ArcMemo<US31> -> US65) = method189()
    let v4 : US65 option = v1 |> Option.map v3 
    let v15 : US65 = US65_1
    let v16 : US65 = v4 |> Option.defaultValue v15 
    let v26 : US42 =
        match v16 with
        | US65_1 -> (* None *)
            US42_1
        | US65_0(v20) -> (* Some *)
            let v21 : string = $"leptos::prelude::ArcMemo::get(&$0)"
            let v22 : US31 = Fable.Core.RustInterop.emitRustExpr v20 v21 
            US42_0(v22)
    let v33 : US31 =
        match v26 with
        | US42_0(v27) -> (* Some *)
            match v27 with
            | US31_0(v28) -> (* Some *)
                US31_0(v28)
            | _ ->
                US31_1
        | _ ->
            US31_1
    match v33 with
    | US31_1 -> (* None *)
        let v35 : string = "Select..."
        v35
    | US31_0(v34) -> (* Some *)
        v34
and method188 (v0 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_ArcMemo<US31> option, v2 : Heap2) : (unit -> string) =
    closure172(v0, v1, v2)
and closure175 () (v0 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) : US66 =
    US66_0(v0)
and method190 () : (leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US66) =
    closure175()
and method192 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), int32>) : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), int32> =
    v0
and closure176 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), int32>) struct (v1 : int32, v2 : leptos_prelude_ReadSignal<std_string_String>) : int32 =
    let v3 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), int32> = method192(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : int32 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and method191 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), int32>) : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> int32) =
    closure176(v0)
and method193 (v0 : std_string_String) : std_string_String =
    v0
and closure177 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and method194 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), leptos_prelude_AnyView_>) : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), leptos_prelude_AnyView_> =
    v0
and closure178 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), leptos_prelude_AnyView_>) struct (v1 : int32, v2 : leptos_prelude_ReadSignal<std_string_String>) : leptos_prelude_AnyView_ =
    let v3 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), leptos_prelude_AnyView_> = method194(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let v6 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4 v5 
    v6
and closure174 (v0 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option, v1 : leptos_prelude_ArcMemo<US31> option, v2 : Heap2) () : leptos_dom_Fragment =
    let v3 : string = "class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\""
    let v4 : string = ""
    let v5 : string = " " + v3 + v4 + ""
    let v6 : (leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US66) = method190()
    let v7 : US66 option = v0 |> Option.map v6 
    let v18 : US66 = US66_1
    let v19 : US66 = v7 |> Option.defaultValue v18 
    let v29 : US67 =
        match v19 with
        | US66_1 -> (* None *)
            US67_1
        | US66_0(v23) -> (* Some *)
            let v24 : string = $"leptos::prelude::ArcMemo::get(&$0)"
            let v25 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr v23 v24 
            US67_0(v25)
    let v30 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) []) = [||]
    let v31 : string = "$0.to_vec()"
    let v32 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v35 : Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)> =
        match v29 with
        | US67_1 -> (* None *)
            v32
        | US67_0(v33) -> (* Some *)
            v33
    let v36 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v37 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) []) = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let v38 : uint64 = System.Convert.ToUInt64 v37.Length
    let v39 : bool = v38 = 0UL
    let v716 : leptos_dom_Fragment =
        if v39 then
            let v40 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v41 : string = " " + v40 + v4 + ""
            let v42 : string = "class=\"[height:17px]\""
            let v43 : string = " " + v42 + v4 + ""
            let v44 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v45 : string = "fill=\"none\""
            let v46 : string = "height=\"100%\""
            let v47 : string = "viewBox=\"0 0 24 24\""
            let v48 : string = "stroke-width=\"1.5\""
            let v49 : string = "stroke=\"currentColor\""
            let v50 : string = "class=\"text-red-700\""
            let v51 : string = " " + v44 + v4 + ""
            let v52 : string = " " + v45 + v51 + ""
            let v53 : string = " " + v46 + v52 + ""
            let v54 : string = " " + v47 + v53 + ""
            let v55 : string = " " + v48 + v54 + ""
            let v56 : string = " " + v49 + v55 + ""
            let v57 : string = " " + v50 + v56 + ""
            let v58 : string = "stroke-linecap=\"round\""
            let v59 : string = "stroke-linejoin=\"round\""
            let v60 : string = "d=\"M6 18L18 6M6 6l12 12\""
            let v61 : string = " " + v58 + v4 + ""
            let v62 : string = " " + v59 + v61 + ""
            let v63 : string = " " + v60 + v62 + ""
            let v64 : string = "vec![" + v4 + "]"
            let v65 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v64 
            let v66 : string = "leptos::prelude::Fragment::new($0)"
            let v67 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v65 v66 
            let v68 : string = "leptos::prelude::AnyView::from($0)"
            let v69 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v67 v68 
            let v70 : string = "path"
            let v71 : string = "<" + v70 + " " + v63 + ">move || { v69 }</" + v70 + ">"
            let v72 : string = "leptos::prelude::view! { " + v71 + " }"
            let v73 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v72 
            let v74 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v73 |> unbox
            let v75 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v76 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v74 v75 
            let v77 : string = "v76"
            let v78 : string = v77 + v4 
            let v79 : string = v78 + v4 
            let v80 : string = "vec![" + v79 + "]"
            let v81 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v80 
            let v82 : string = "leptos::prelude::Fragment::new($0)"
            let v83 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v81 v82 
            let v84 : string = "leptos::prelude::AnyView::from($0)"
            let v85 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v83 v84 
            let v86 : string = "svg"
            let v87 : string = "<" + v86 + " " + v57 + ">move || { v85 }</" + v86 + ">"
            let v88 : string = "leptos::prelude::view! { " + v87 + " }"
            let v89 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v88 
            let v90 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v89 |> unbox
            let v91 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v92 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : string = "v92"
            let v94 : string = v93 + v4 
            let v95 : string = v94 + v4 
            let v96 : string = "vec![" + v95 + "]"
            let v97 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v96 
            let v98 : string = "leptos::prelude::Fragment::new($0)"
            let v99 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v97 v98 
            let v100 : string = "leptos::prelude::AnyView::from($0)"
            let v101 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v99 v100 
            let v102 : string = "span"
            let v103 : string = "<" + v102 + " " + v43 + ">move || { v101 }</" + v102 + ">"
            let v104 : string = "leptos::prelude::view! { " + v103 + " }"
            let v105 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v104 
            let v106 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v105 |> unbox
            let v107 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v106 v107 
            let v109 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
            let v110 : string = " " + v109 + v4 + ""
            let v111 : string = "No data"
            (* run_target_args'
            let v112 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v113 : string = "&*$0"
            let v114 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v111 v113 
            let _run_target_args'_v112 = v114 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v115 : string = "&*$0"
            let v116 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v111 v115 
            let _run_target_args'_v112 = v116 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v117 : string = "&*$0"
            let v118 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v111 v117 
            let _run_target_args'_v112 = v118 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v119 : Ref<Str> = v111 |> unbox<Ref<Str>>
            let _run_target_args'_v112 = v119 
            #endif
#if FABLE_COMPILER_PYTHON
            let v122 : Ref<Str> = v111 |> unbox<Ref<Str>>
            let _run_target_args'_v112 = v122 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v125 : Ref<Str> = v111 |> unbox<Ref<Str>>
            let _run_target_args'_v112 = v125 
            #endif
#else
            let v128 : Ref<Str> = v111 |> unbox<Ref<Str>>
            let _run_target_args'_v112 = v128 
            #endif
            let v131 : Ref<Str> = _run_target_args'_v112 
            (* run_target_args'
            let v136 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v137 : string = "String::from($0)"
            let v138 : std_string_String = Fable.Core.RustInterop.emitRustExpr v131 v137 
            let _run_target_args'_v136 = v138 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v139 : string = "String::from($0)"
            let v140 : std_string_String = Fable.Core.RustInterop.emitRustExpr v131 v139 
            let _run_target_args'_v136 = v140 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v141 : string = "String::from($0)"
            let v142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v131 v141 
            let _run_target_args'_v136 = v142 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v143 : std_string_String = v131 |> unbox<std_string_String>
            let _run_target_args'_v136 = v143 
            #endif
#if FABLE_COMPILER_PYTHON
            let v146 : std_string_String = v131 |> unbox<std_string_String>
            let _run_target_args'_v136 = v146 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v149 : std_string_String = v131 |> unbox<std_string_String>
            let _run_target_args'_v136 = v149 
            #endif
#else
            let v152 : std_string_String = v131 |> unbox<std_string_String>
            let _run_target_args'_v136 = v152 
            #endif
            let v155 : std_string_String = _run_target_args'_v136 
            let v160 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v161 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v155 v160 
            let v162 : string = "v161"
            let v163 : string = v162 + v4 
            let v164 : string = v163 + v4 
            let v165 : string = "vec![" + v164 + "]"
            let v166 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v165 
            let v167 : string = "leptos::prelude::Fragment::new($0)"
            let v168 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v166 v167 
            let v169 : string = "leptos::prelude::AnyView::from($0)"
            let v170 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v168 v169 
            let v171 : string = "pre"
            let v172 : string = "<" + v171 + " " + v110 + ">move || { v170 }</" + v171 + ">"
            let v173 : string = "leptos::prelude::view! { " + v172 + " }"
            let v174 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v173 
            let v175 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v174 |> unbox
            let v176 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v177 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v175 v176 
            let v178 : string = "v177"
            let v179 : string = v178 + v4 
            let v180 : string = v179 + v4 
            let v181 : string = "v108"
            let v182 : string = ", "
            let v183 : string = v181 + v182 
            let v184 : string = v183 + v180 
            let v185 : string = "vec![" + v184 + "]"
            let v186 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v185 
            let v187 : string = "leptos::prelude::Fragment::new($0)"
            let v188 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v186 v187 
            let v189 : string = "leptos::prelude::AnyView::from($0)"
            let v190 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v188 v189 
            let v191 : string = "div"
            let v192 : string = "<" + v191 + " " + v41 + ">move || { v190 }</" + v191 + ">"
            let v193 : string = "leptos::prelude::view! { " + v192 + " }"
            let v194 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v193 
            let v195 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v194 |> unbox
            let v196 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v197 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v195 v196 
            let v198 : string = "v197"
            let v199 : string = v198 + v4 
            let v200 : string = v199 + v4 
            let v201 : string = "vec![" + v200 + "]"
            let v202 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v201 
            let v203 : string = "leptos::prelude::Fragment::new($0)"
            let v204 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v202 v203 
            v204
        else
            let v205 : (leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> -> US66) = method190()
            let v206 : US66 option = v0 |> Option.map v205 
            let v217 : US66 = US66_1
            let v218 : US66 = v206 |> Option.defaultValue v217 
            match v218 with
            | US66_1 -> (* None *)
                let v710 : string = "vec![" + v4 + "]"
                let v711 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v710 
                let v712 : string = "leptos::prelude::Fragment::new($0)"
                let v713 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v711 v712 
                v713
            | US66_0(v222) -> (* Some *)
                let v223 : string = "$0"
                let v224 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> = Fable.Core.RustInterop.emitRustExpr v222 v223 
                let v225 : unit = ()
                let v226 : string = $"true; let _func1_from_v225 = Func1::from(move |value| {{ //"
                let v227 : bool = Fable.Core.RustInterop.emitRustExpr () v226 
                let v228 : string = $"value"
                let struct (v229 : int32, v230 : leptos_prelude_ReadSignal<std_string_String>) = Fable.Core.RustInterop.emitRustExpr () v228 
                let func1_from_result = v229 //
                let v231 : _ = func1_from_result
                let v232 : string = $"true; $0 /*"
                let v233 : bool = Fable.Core.RustInterop.emitRustExpr v231 v232 
                let v234 : string = $"*/ }}); //"
                let v235 : bool = Fable.Core.RustInterop.emitRustExpr () v234 
                let v236 : string = $"_func1_from_v225"
                let v237 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), int32> = Fable.Core.RustInterop.emitRustExpr () v236 
                let v238 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> int32) = method191(v237)
                let v239 : unit = ()
                let v240 : string = $"true; let _func1_from_v239 = Func1::from(move |value| {{ //"
                let v241 : bool = Fable.Core.RustInterop.emitRustExpr () v240 
                let v242 : string = $"value"
                let struct (v243 : int32, v244 : leptos_prelude_ReadSignal<std_string_String>) = Fable.Core.RustInterop.emitRustExpr () v242 
                let v245 : string = $"leptos::prelude::ReadSignal::get(&$0)"
                let v246 : std_string_String = Fable.Core.RustInterop.emitRustExpr v244 v245 
                let v247 : std_string_String = method193(v246)
                let v248 : unit = ()
                let v249 : string = $"true; let _func0_from_v248 = Func0::from(move || {{ //"
                let v250 : bool = Fable.Core.RustInterop.emitRustExpr () v249 
                let v251 : string = "fable_library_rust::String_::fromString($0)"
                let v252 : string = Fable.Core.RustInterop.emitRustExpr v246 v251 
                let v253 : leptos_prelude_ArcRwSignal<Heap1> = v2.l0
                let v254 : string = "Box::pin($0)"
                let v255 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v253 v254 
                let v256 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                let v257 : Heap1 = Fable.Core.RustInterop.emitRustExpr v255 v256 
                let v258 : leptos_prelude_ArcRwSignal<Heap0> = v257.l3
                let v259 : string = "Box::pin($0)"
                let v260 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap0>>> = Fable.Core.RustInterop.emitRustExpr v258 v259 
                let v261 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                let v262 : Heap0 = Fable.Core.RustInterop.emitRustExpr v260 v261 
                let v263 : Vec<(bool * std_string_String)> = v262.l0
                let v264 : std_string_String option = v262.l1
                let v265 : int32 = v262.l2
                let v266 : int32 = v262.l3
                let v267 : US1 = v262.l4
                let v268 : leptos_prelude_ArcRwSignal<Heap1> = v2.l0
                let v269 : string = "Box::pin($0)"
                let v270 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v268 v269 
                let v271 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                let v272 : Heap1 = Fable.Core.RustInterop.emitRustExpr v270 v271 
                let v273 : leptos_prelude_ArcRwSignal<Heap0> = v272.l3
                (* run_target_args'
                let v274 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v275 : string = "&*$0"
                let v276 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v275 
                let _run_target_args'_v274 = v276 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v277 : string = "&*$0"
                let v278 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v277 
                let _run_target_args'_v274 = v278 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v279 : string = "&*$0"
                let v280 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v252 v279 
                let _run_target_args'_v274 = v280 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v281 : Ref<Str> = v252 |> unbox<Ref<Str>>
                let _run_target_args'_v274 = v281 
                #endif
#if FABLE_COMPILER_PYTHON
                let v284 : Ref<Str> = v252 |> unbox<Ref<Str>>
                let _run_target_args'_v274 = v284 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v287 : Ref<Str> = v252 |> unbox<Ref<Str>>
                let _run_target_args'_v274 = v287 
                #endif
#else
                let v290 : Ref<Str> = v252 |> unbox<Ref<Str>>
                let _run_target_args'_v274 = v290 
                #endif
                let v293 : Ref<Str> = _run_target_args'_v274 
                (* run_target_args'
                let v298 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v299 : string = "String::from($0)"
                let v300 : std_string_String = Fable.Core.RustInterop.emitRustExpr v293 v299 
                let _run_target_args'_v298 = v300 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v301 : string = "String::from($0)"
                let v302 : std_string_String = Fable.Core.RustInterop.emitRustExpr v293 v301 
                let _run_target_args'_v298 = v302 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v303 : string = "String::from($0)"
                let v304 : std_string_String = Fable.Core.RustInterop.emitRustExpr v293 v303 
                let _run_target_args'_v298 = v304 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v305 : std_string_String = v293 |> unbox<std_string_String>
                let _run_target_args'_v298 = v305 
                #endif
#if FABLE_COMPILER_PYTHON
                let v308 : std_string_String = v293 |> unbox<std_string_String>
                let _run_target_args'_v298 = v308 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v311 : std_string_String = v293 |> unbox<std_string_String>
                let _run_target_args'_v298 = v311 
                #endif
#else
                let v314 : std_string_String = v293 |> unbox<std_string_String>
                let _run_target_args'_v298 = v314 
                #endif
                let v317 : std_string_String = _run_target_args'_v298 
                let v322 : std_string_String option = Some v317 
                let v325 : Heap0 = {l0 = v263; l1 = v322; l2 = v265; l3 = v266; l4 = v267} : Heap0
                let v326 : string = $"true; leptos::prelude::ArcRwSignal::set(&$0, $1); //"
                let v327 : bool = Fable.Core.RustInterop.emitRustExpr struct (v273, v325) v326 
                // rust.func0_from / is_unit
                let v328 : string = $"true; /*"
                let v329 : bool = Fable.Core.RustInterop.emitRustExpr () v328 
                let v330 : string = $"*/ }}); //"
                let v331 : bool = Fable.Core.RustInterop.emitRustExpr () v330 
                let v332 : string = $"_func0_from_v248"
                let v333 : Func0<unit> = Fable.Core.RustInterop.emitRustExpr () v332 
                let v334 : string = "flex"
                let v335 : string = "flex-1"
                let v336 : string = "gap-[10px]"
                let v337 : string = "[align-items:center]"
                let v338 : string = "[justify-content:center]"
                let v339 : string = "inline-block"
                let v340 : string = "rounded"
                let v341 : string = "border"
                let v342 : string = "border-gray-400"
                let v343 : string = "hover:bg-gray-100"
                let v344 : string = "px-[22px]"
                let v345 : string = "py-1"
                let v346 : string = "text-sm"
                let v347 : string = "text-gray-900"
                let v348 : string = "bg-gray-200"
                let v349 : string = "hover:text-gray-600"
                let v350 : string = "focus:outline-none"
                let v351 : string = "focus:ring"
                let v352 : string = "active:text-gray-500"
                let v353 : string list = []
                let v354 : string list = v352 :: v353 
                let v357 : string list = v351 :: v354 
                let v360 : string list = v350 :: v357 
                let v363 : string list = v349 :: v360 
                let v366 : string list = v348 :: v363 
                let v369 : string list = v347 :: v366 
                let v372 : string list = v346 :: v369 
                let v375 : string list = v345 :: v372 
                let v378 : string list = v344 :: v375 
                let v381 : string list = v343 :: v378 
                let v384 : string list = v342 :: v381 
                let v387 : string list = v341 :: v384 
                let v390 : string list = v340 :: v387 
                let v393 : string list = v339 :: v390 
                let v396 : string list = v338 :: v393 
                let v399 : string list = v337 :: v396 
                let v402 : string list = v336 :: v399 
                let v405 : string list = v335 :: v402 
                let v408 : string list = v334 :: v405 
                let v411 : unit = ()
                let _let'_v411 =
                    seq {
                        yield! v408 
                        (* indent
                        ()
                    indent *)
                    }
                    (* indent
                    ()
                indent *)
                let v414 : string seq = _let'_v411 
                let v420 : (string -> (string seq -> string)) = String.concat
                let v421 : string = " "
                let v422 : (string seq -> string) = v420 v421
                let v423 : string = v422 v414
                (* run_target_args'
                let v426 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v427 : string = "&*$0"
                let v428 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v423 v427 
                let _run_target_args'_v426 = v428 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v429 : string = "&*$0"
                let v430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v423 v429 
                let _run_target_args'_v426 = v430 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v431 : string = "&*$0"
                let v432 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v423 v431 
                let _run_target_args'_v426 = v432 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v433 : Ref<Str> = v423 |> unbox<Ref<Str>>
                let _run_target_args'_v426 = v433 
                #endif
#if FABLE_COMPILER_PYTHON
                let v436 : Ref<Str> = v423 |> unbox<Ref<Str>>
                let _run_target_args'_v426 = v436 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v439 : Ref<Str> = v423 |> unbox<Ref<Str>>
                let _run_target_args'_v426 = v439 
                #endif
#else
                let v442 : Ref<Str> = v423 |> unbox<Ref<Str>>
                let _run_target_args'_v426 = v442 
                #endif
                let v445 : Ref<Str> = _run_target_args'_v426 
                (* run_target_args'
                let v450 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v451 : string = "String::from($0)"
                let v452 : std_string_String = Fable.Core.RustInterop.emitRustExpr v445 v451 
                let _run_target_args'_v450 = v452 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v453 : string = "String::from($0)"
                let v454 : std_string_String = Fable.Core.RustInterop.emitRustExpr v445 v453 
                let _run_target_args'_v450 = v454 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v455 : string = "String::from($0)"
                let v456 : std_string_String = Fable.Core.RustInterop.emitRustExpr v445 v455 
                let _run_target_args'_v450 = v456 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v457 : std_string_String = v445 |> unbox<std_string_String>
                let _run_target_args'_v450 = v457 
                #endif
#if FABLE_COMPILER_PYTHON
                let v460 : std_string_String = v445 |> unbox<std_string_String>
                let _run_target_args'_v450 = v460 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v463 : std_string_String = v445 |> unbox<std_string_String>
                let _run_target_args'_v450 = v463 
                #endif
#else
                let v466 : std_string_String = v445 |> unbox<std_string_String>
                let _run_target_args'_v450 = v466 
                #endif
                let v469 : std_string_String = _run_target_args'_v450 
                let v474 : string = "$0"
                let v475 : std_string_String = Fable.Core.RustInterop.emitRustExpr v469 v474 
                let v476 : string = "class=v475"
                let v477 : string = "on:click=move |_| v333()"
                let v478 : string = "aria-label=v247"
                let v479 : string = " " + v476 + v4 + ""
                let v480 : string = " " + v477 + v479 + ""
                let v481 : string = " " + v478 + v480 + ""
                let v482 : string = "fable_library_rust::String_::fromString($0)"
                let v483 : string = Fable.Core.RustInterop.emitRustExpr v246 v482 
                let v484 : (leptos_prelude_ArcMemo<US31> -> US65) = method189()
                let v485 : US65 option = v1 |> Option.map v484 
                let v496 : US65 = US65_1
                let v497 : US65 = v485 |> Option.defaultValue v496 
                let v507 : US42 =
                    match v497 with
                    | US65_1 -> (* None *)
                        US42_1
                    | US65_0(v501) -> (* Some *)
                        let v502 : string = $"leptos::prelude::ArcMemo::get(&$0)"
                        let v503 : US31 = Fable.Core.RustInterop.emitRustExpr v501 v502 
                        US42_0(v503)
                let v514 : US31 =
                    match v507 with
                    | US42_0(v508) -> (* Some *)
                        match v508 with
                        | US31_0(v509) -> (* Some *)
                            US31_0(v509)
                        | _ ->
                            US31_1
                    | _ ->
                        US31_1
                let v603 : leptos_prelude_AnyView_ =
                    match v514 with
                    | US31_0(v515) -> (* Some *)
                        let v516 : bool = v483 = v515
                        if v516 then
                            let v517 : string = "$0"
                            let v518 : (unit -> string) = closure177()
                            let v519 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v518 v517 
                            let v520 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                            let v521 : string = "fill=\"none\""
                            let v522 : string = "viewBox=\"0 0 24 24\""
                            let v523 : string = "stroke-width=\"1.5\""
                            let v524 : string = "stroke=\"currentColor\""
                            let v525 : string = "class=move || \" \".to_owned() + &v519(())"
                            let v526 : string = " " + v520 + v4 + ""
                            let v527 : string = " " + v521 + v526 + ""
                            let v528 : string = " " + v522 + v527 + ""
                            let v529 : string = " " + v523 + v528 + ""
                            let v530 : string = " " + v524 + v529 + ""
                            let v531 : string = " " + v525 + v530 + ""
                            let v532 : string = "cx=\"12\""
                            let v533 : string = "cy=\"12\""
                            let v534 : string = "r=\"9\""
                            let v535 : string = "stroke-linecap=\"round\""
                            let v536 : string = "stroke-linejoin=\"round\""
                            let v537 : string = " " + v532 + v4 + ""
                            let v538 : string = " " + v533 + v537 + ""
                            let v539 : string = " " + v534 + v538 + ""
                            let v540 : string = " " + v535 + v539 + ""
                            let v541 : string = " " + v536 + v540 + ""
                            let v542 : string = "vec![" + v4 + "]"
                            let v543 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v542 
                            let v544 : string = "leptos::prelude::Fragment::new($0)"
                            let v545 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v543 v544 
                            let v546 : string = "leptos::prelude::AnyView::from($0)"
                            let v547 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v545 v546 
                            let v548 : string = "circle"
                            let v549 : string = "<" + v548 + " " + v541 + ">move || { v547 }</" + v548 + ">"
                            let v550 : string = "leptos::prelude::view! { " + v549 + " }"
                            let v551 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v550 
                            let v552 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v551 |> unbox
                            let v553 : string = "leptos::prelude::IntoAny::into_any($0)"
                            let v554 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v552 v553 
                            let v555 : string = "stroke-linecap=\"round\""
                            let v556 : string = "stroke-linejoin=\"round\""
                            let v557 : string = "d=\"M9 12l2 2l4 -4\""
                            let v558 : string = " " + v555 + v4 + ""
                            let v559 : string = " " + v556 + v558 + ""
                            let v560 : string = " " + v557 + v559 + ""
                            let v561 : string = "vec![" + v4 + "]"
                            let v562 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v561 
                            let v563 : string = "leptos::prelude::Fragment::new($0)"
                            let v564 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v562 v563 
                            let v565 : string = "leptos::prelude::AnyView::from($0)"
                            let v566 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v564 v565 
                            let v567 : string = "path"
                            let v568 : string = "<" + v567 + " " + v560 + ">move || { v566 }</" + v567 + ">"
                            let v569 : string = "leptos::prelude::view! { " + v568 + " }"
                            let v570 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v569 
                            let v571 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v570 |> unbox
                            let v572 : string = "leptos::prelude::IntoAny::into_any($0)"
                            let v573 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v571 v572 
                            let v574 : string = "v573"
                            let v575 : string = v574 + v4 
                            let v576 : string = v575 + v4 
                            let v577 : string = "v554"
                            let v578 : string = ", "
                            let v579 : string = v577 + v578 
                            let v580 : string = v579 + v576 
                            let v581 : string = "vec![" + v580 + "]"
                            let v582 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v581 
                            let v583 : string = "leptos::prelude::Fragment::new($0)"
                            let v584 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v582 v583 
                            let v585 : string = "leptos::prelude::AnyView::from($0)"
                            let v586 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v584 v585 
                            let v587 : string = "svg"
                            let v588 : string = "<" + v587 + " " + v531 + ">move || { v586 }</" + v587 + ">"
                            let v589 : string = "leptos::prelude::view! { " + v588 + " }"
                            let v590 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v589 
                            let v591 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v590 |> unbox
                            let v592 : string = "leptos::prelude::IntoAny::into_any($0)"
                            let v593 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v591 v592 
                            v593
                        else
                            let v594 : string = "vec![" + v4 + "]"
                            let v595 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v594 
                            let v596 : string = "leptos::prelude::IntoAny::into_any($0)"
                            let v597 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v595 v596 
                            v597
                    | _ ->
                        let v599 : string = "vec![" + v4 + "]"
                        let v600 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v599 
                        let v601 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v602 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v600 v601 
                        v602
                (* run_target_args'
                let v604 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v605 : string = "&*$0"
                let v606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v483 v605 
                let _run_target_args'_v604 = v606 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v607 : string = "&*$0"
                let v608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v483 v607 
                let _run_target_args'_v604 = v608 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v609 : string = "&*$0"
                let v610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v483 v609 
                let _run_target_args'_v604 = v610 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v611 : Ref<Str> = v483 |> unbox<Ref<Str>>
                let _run_target_args'_v604 = v611 
                #endif
#if FABLE_COMPILER_PYTHON
                let v614 : Ref<Str> = v483 |> unbox<Ref<Str>>
                let _run_target_args'_v604 = v614 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v617 : Ref<Str> = v483 |> unbox<Ref<Str>>
                let _run_target_args'_v604 = v617 
                #endif
#else
                let v620 : Ref<Str> = v483 |> unbox<Ref<Str>>
                let _run_target_args'_v604 = v620 
                #endif
                let v623 : Ref<Str> = _run_target_args'_v604 
                (* run_target_args'
                let v628 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v629 : string = "String::from($0)"
                let v630 : std_string_String = Fable.Core.RustInterop.emitRustExpr v623 v629 
                let _run_target_args'_v628 = v630 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v631 : string = "String::from($0)"
                let v632 : std_string_String = Fable.Core.RustInterop.emitRustExpr v623 v631 
                let _run_target_args'_v628 = v632 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v633 : string = "String::from($0)"
                let v634 : std_string_String = Fable.Core.RustInterop.emitRustExpr v623 v633 
                let _run_target_args'_v628 = v634 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v635 : std_string_String = v623 |> unbox<std_string_String>
                let _run_target_args'_v628 = v635 
                #endif
#if FABLE_COMPILER_PYTHON
                let v638 : std_string_String = v623 |> unbox<std_string_String>
                let _run_target_args'_v628 = v638 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v641 : std_string_String = v623 |> unbox<std_string_String>
                let _run_target_args'_v628 = v641 
                #endif
#else
                let v644 : std_string_String = v623 |> unbox<std_string_String>
                let _run_target_args'_v628 = v644 
                #endif
                let v647 : std_string_String = _run_target_args'_v628 
                let v652 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                let v653 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v647 v652 
                let v654 : string = "v653"
                let v655 : string = v654 + v4 
                let v656 : string = v655 + v4 
                let v657 : string = "v603"
                let v658 : string = ", "
                let v659 : string = v657 + v658 
                let v660 : string = v659 + v656 
                let v661 : string = "vec![" + v660 + "]"
                let v662 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v661 
                let v663 : string = "leptos::prelude::Fragment::new($0)"
                let v664 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v662 v663 
                let v665 : string = "leptos::prelude::AnyView::from($0)"
                let v666 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v664 v665 
                let v667 : string = "button"
                let v668 : string = "<" + v667 + " " + v481 + ">move || { v666 }</" + v667 + ">"
                let v669 : string = "leptos::prelude::view! { " + v668 + " }"
                let v670 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v669 
                let v671 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v670 |> unbox
                let v672 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v673 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v671 v672 
                let v674 : string = "v673"
                let v675 : string = v674 + v4 
                let v676 : string = v675 + v4 
                let v677 : string = "vec![" + v676 + "]"
                let v678 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v677 
                let v679 : string = "leptos::prelude::Fragment::new($0)"
                let v680 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v678 v679 
                let v681 : string = "leptos::prelude::AnyView::from($0)"
                let v682 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v680 v681 
                let func1_from_result = v682 //
                let v683 : _ = func1_from_result
                let v684 : string = $"true; $0 /*"
                let v685 : bool = Fable.Core.RustInterop.emitRustExpr v683 v684 
                let v686 : string = $"*/ }}); //"
                let v687 : bool = Fable.Core.RustInterop.emitRustExpr () v686 
                let v688 : string = $"_func1_from_v239"
                let v689 : Func0<struct (int32 * leptos_prelude_ReadSignal<std_string_String>), leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v688 
                let v690 : string = "each=v224"
                let v691 : string = "key=move |x| v238(x.to_owned())"
                let v692 : string = "let:x"
                let v693 : (struct (int32 * leptos_prelude_ReadSignal<std_string_String>) -> leptos_prelude_AnyView_) = closure178(v689)
                let v694 : string = "children=move |x| v693(x)"
                let v695 : string = " " + v690 + v4 + ""
                let v696 : string = " " + v691 + v695 + ""
                let v697 : string = " " + v692 + v696 + ""
                let v698 : string = " " + v694 + v697 + ""
                let v699 : string = "leptos::prelude::For"
                let v700 : string = "<" + v699 + " " + v698 + " />"
                let v701 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { " + v700 + " })"
                let v702 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v701 
                let v703 : string = "v702"
                let v704 : string = v703 + v4 
                let v705 : string = v704 + v4 
                let v706 : string = "vec![" + v705 + "]"
                let v707 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v706 
                let v708 : string = "leptos::prelude::Fragment::new($0)"
                let v709 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v707 v708 
                v709
    let v717 : string = "leptos::prelude::AnyView::from($0)"
    let v718 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v716 v717 
    let v719 : string = "div"
    let v720 : string = "<" + v719 + " " + v5 + ">move || { v718 }</" + v719 + ">"
    let v721 : string = "leptos::prelude::view! { " + v720 + " }"
    let v722 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v721 
    let v723 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v722 |> unbox
    let v724 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v725 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v723 v724 
    let v726 : string = "v725"
    let v727 : string = v726 + v4 
    let v728 : string = v727 + v4 
    let v729 : string = "vec![" + v728 + "]"
    let v730 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v729 
    let v731 : string = "leptos::prelude::Fragment::new($0)"
    let v732 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v730 v731 
    v732
and method195 (v0 : Func0<leptos_dom_Fragment>) : Func0<leptos_dom_Fragment> =
    v0
and closure179 () () : string =
    let v0 : string = ""
    v0
and method196 (v0 : Func0<std_string_String, unit>) : Func0<std_string_String, unit> =
    v0
and closure180 (v0 : Func0<std_string_String, unit>) (v1 : std_string_String) : unit =
    let v2 : Func0<std_string_String, unit> = method196(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    Fable.Core.RustInterop.emitRustExpr v3 v4 
    ()
and closure181 (v0 : leptos_prelude_ArcAction<Heap6, Result<US59, std_string_String>>) () : bool =
    let v1 : string = "leptos::prelude::ArcAction::pending(&$0)"
    let v2 : leptos_prelude_ArcMemo<bool> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr v2 v3 
    v4
and method197 (v0 : Func0<bool>) : Func0<bool> =
    v0
and closure182 () () : string =
    let v0 : string = "[width:15px] [height:14px]"
    v0
and closure167 (v0 : Heap2, v1 : leptos_prelude_ArcAction<Heap6, Result<US59, std_string_String>>, v2 : leptos_prelude_ArcMemo<string option>, v3 : leptos_prelude_ArcMemo<US31>, v4 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>>) () : leptos_dom_Fragment =
    let v5 : string = "class=\"flex flex-col p-[10px] gap-[11px]\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : string = "class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\""
    let v9 : string = " " + v8 + v6 + ""
    let v10 : string = "Account"
    (* run_target_args'
    let v11 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v12 : string = "&*$0"
    let v13 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10 v12 
    let _run_target_args'_v11 = v13 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10 v14 
    let _run_target_args'_v11 = v15 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v10 v16 
    let _run_target_args'_v11 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v18 : Ref<Str> = v10 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v18 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : Ref<Str> = v10 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v21 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v10 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v24 
    #endif
#else
    let v27 : Ref<Str> = v10 |> unbox<Ref<Str>>
    let _run_target_args'_v11 = v27 
    #endif
    let v30 : Ref<Str> = _run_target_args'_v11 
    (* run_target_args'
    let v35 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v36 : string = "String::from($0)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v36 
    let _run_target_args'_v35 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "String::from($0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v38 
    let _run_target_args'_v35 = v39 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v30 v40 
    let _run_target_args'_v35 = v41 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v42 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v35 = v42 
    #endif
#if FABLE_COMPILER_PYTHON
    let v45 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v35 = v45 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v35 = v48 
    #endif
#else
    let v51 : std_string_String = v30 |> unbox<std_string_String>
    let _run_target_args'_v35 = v51 
    #endif
    let v54 : std_string_String = _run_target_args'_v35 
    let v59 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v60 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v54 v59 
    let v61 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option = None
    let v62 : leptos_prelude_ArcMemo<US31> option = None
    let v63 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> option = Some v4 
    let v66 : leptos_prelude_ArcMemo<US31> option = Some v3 
    let v69 : string = "vec![" + v6 + "]"
    let v70 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : string = "class=\"flex flex-col [position:relative]\""
    let v74 : string = " " + v73 + v6 + ""
    let v75 : string = "$0"
    let v76 : (unit -> string) = closure168()
    let v77 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v76 v75 
    let v78 : string = "$0"
    let v79 : (unit -> bool) = closure169()
    let v80 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v79 v78 
    let v81 : string = "class=\"[position:absolute] [right:0] [top:0]\""
    let v82 : string = " " + v81 + v6 + ""
    let v83 : string = "v72"
    let v84 : string = v83 + v6 
    let v85 : string = v84 + v6 
    let v86 : string = "vec![" + v85 + "]"
    let v87 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v86 
    let v88 : string = "leptos::prelude::Fragment::new($0)"
    let v89 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "leptos::prelude::AnyView::from($0)"
    let v91 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "div"
    let v93 : string = "<" + v92 + " " + v82 + ">move || { v91 }</" + v92 + ">"
    let v94 : string = "leptos::prelude::view! { " + v93 + " }"
    let v95 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v95 |> unbox
    let v97 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v98 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v77(())"
    let v100 : string = "open=move || v80(())"
    let v101 : string = " " + v99 + v6 + ""
    let v102 : string = " " + v100 + v101 + ""
    let v103 : string = "$0"
    let v104 : (unit -> string) = closure170()
    let v105 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v104 v103 
    let v106 : string = "$0"
    let v107 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure171(v63, v66, v0)
    let v108 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v107 v106 
    let v109 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v108(()) + \" \" + &v105(())"
    let v110 : string = " " + v109 + v6 + ""
    let v111 : string = "class=\"flex items-center gap-2\""
    let v112 : string = " " + v111 + v6 + ""
    let v113 : (unit -> string) = method188(v63, v66, v0)
    let v114 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
    let v115 : string = " " + v114 + v6 + ""
    let v116 : string = v113 ()
    (* run_target_args'
    let v117 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v118 : string = "&*$0"
    let v119 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v116 v118 
    let _run_target_args'_v117 = v119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v120 : string = "&*$0"
    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v116 v120 
    let _run_target_args'_v117 = v121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v122 : string = "&*$0"
    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v116 v122 
    let _run_target_args'_v117 = v123 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v124 : Ref<Str> = v116 |> unbox<Ref<Str>>
    let _run_target_args'_v117 = v124 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : Ref<Str> = v116 |> unbox<Ref<Str>>
    let _run_target_args'_v117 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v130 : Ref<Str> = v116 |> unbox<Ref<Str>>
    let _run_target_args'_v117 = v130 
    #endif
#else
    let v133 : Ref<Str> = v116 |> unbox<Ref<Str>>
    let _run_target_args'_v117 = v133 
    #endif
    let v136 : Ref<Str> = _run_target_args'_v117 
    (* run_target_args'
    let v141 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v142 : string = "String::from($0)"
    let v143 : std_string_String = Fable.Core.RustInterop.emitRustExpr v136 v142 
    let _run_target_args'_v141 = v143 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v144 : string = "String::from($0)"
    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v136 v144 
    let _run_target_args'_v141 = v145 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v146 : string = "String::from($0)"
    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v136 v146 
    let _run_target_args'_v141 = v147 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v148 : std_string_String = v136 |> unbox<std_string_String>
    let _run_target_args'_v141 = v148 
    #endif
#if FABLE_COMPILER_PYTHON
    let v151 : std_string_String = v136 |> unbox<std_string_String>
    let _run_target_args'_v141 = v151 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v154 : std_string_String = v136 |> unbox<std_string_String>
    let _run_target_args'_v141 = v154 
    #endif
#else
    let v157 : std_string_String = v136 |> unbox<std_string_String>
    let _run_target_args'_v141 = v157 
    #endif
    let v160 : std_string_String = _run_target_args'_v141 
    let v165 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v166 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v160 v165 
    let v167 : string = "v166"
    let v168 : string = v167 + v6 
    let v169 : string = v168 + v6 
    let v170 : string = "vec![" + v169 + "]"
    let v171 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v170 
    let v172 : string = "leptos::prelude::Fragment::new($0)"
    let v173 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v171 v172 
    let v174 : string = "leptos::prelude::AnyView::from($0)"
    let v175 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v173 v174 
    let v176 : string = "span"
    let v177 : string = "<" + v176 + " " + v115 + ">move || { v175 }</" + v176 + ">"
    let v178 : string = "leptos::prelude::view! { " + v177 + " }"
    let v179 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v178 
    let v180 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v179 |> unbox
    let v181 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v182 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v180 v181 
    let v183 : string = "v182"
    let v184 : string = v183 + v6 
    let v185 : string = v184 + v6 
    let v186 : string = "vec![" + v185 + "]"
    let v187 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v186 
    let v188 : string = "leptos::prelude::Fragment::new($0)"
    let v189 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v187 v188 
    let v190 : string = "leptos::prelude::AnyView::from($0)"
    let v191 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v189 v190 
    let v192 : string = "<" + v92 + " " + v112 + ">move || { v191 }</" + v92 + ">"
    let v193 : string = "leptos::prelude::view! { " + v192 + " }"
    let v194 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v193 
    let v195 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v194 |> unbox
    let v196 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v197 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let v198 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
    let v199 : string = " " + v198 + v6 + ""
    let v200 : string = "$0"
    let v201 : (unit -> string) = closure166()
    let v202 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v201 v200 
    let v203 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v204 : string = "viewBox=\"0 0 20 20\""
    let v205 : string = "fill=\"currentColor\""
    let v206 : string = "class=move || \" \".to_owned() + &v202(())"
    let v207 : string = " " + v203 + v6 + ""
    let v208 : string = " " + v204 + v207 + ""
    let v209 : string = " " + v205 + v208 + ""
    let v210 : string = " " + v206 + v209 + ""
    let v211 : string = "fill-rule=\"evenodd\""
    let v212 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
    let v213 : string = "clip-rule=\"evenodd\""
    let v214 : string = " " + v211 + v6 + ""
    let v215 : string = " " + v212 + v214 + ""
    let v216 : string = " " + v213 + v215 + ""
    let v217 : string = "vec![" + v6 + "]"
    let v218 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v217 
    let v219 : string = "leptos::prelude::Fragment::new($0)"
    let v220 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v218 v219 
    let v221 : string = "leptos::prelude::AnyView::from($0)"
    let v222 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v220 v221 
    let v223 : string = "path"
    let v224 : string = "<" + v223 + " " + v216 + ">move || { v222 }</" + v223 + ">"
    let v225 : string = "leptos::prelude::view! { " + v224 + " }"
    let v226 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v225 
    let v227 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v226 |> unbox
    let v228 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v229 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v227 v228 
    let v230 : string = "v229"
    let v231 : string = v230 + v6 
    let v232 : string = v231 + v6 
    let v233 : string = "vec![" + v232 + "]"
    let v234 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v233 
    let v235 : string = "leptos::prelude::Fragment::new($0)"
    let v236 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v234 v235 
    let v237 : string = "leptos::prelude::AnyView::from($0)"
    let v238 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v236 v237 
    let v239 : string = "svg"
    let v240 : string = "<" + v239 + " " + v210 + ">move || { v238 }</" + v239 + ">"
    let v241 : string = "leptos::prelude::view! { " + v240 + " }"
    let v242 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v241 
    let v243 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v242 |> unbox
    let v244 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v245 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v243 v244 
    let v246 : string = "v245"
    let v247 : string = v246 + v6 
    let v248 : string = v247 + v6 
    let v249 : string = "vec![" + v248 + "]"
    let v250 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v249 
    let v251 : string = "leptos::prelude::Fragment::new($0)"
    let v252 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v250 v251 
    let v253 : string = "leptos::prelude::AnyView::from($0)"
    let v254 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v252 v253 
    let v255 : string = "<" + v176 + " " + v199 + ">move || { v254 }</" + v176 + ">"
    let v256 : string = "leptos::prelude::view! { " + v255 + " }"
    let v257 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v256 
    let v258 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v257 |> unbox
    let v259 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v260 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v258 v259 
    let v261 : string = "v260"
    let v262 : string = v261 + v6 
    let v263 : string = v262 + v6 
    let v264 : string = "v197"
    let v265 : string = ", "
    let v266 : string = v264 + v265 
    let v267 : string = v266 + v263 
    let v268 : string = "vec![" + v267 + "]"
    let v269 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v268 
    let v270 : string = "leptos::prelude::Fragment::new($0)"
    let v271 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v269 v270 
    let v272 : string = "leptos::prelude::AnyView::from($0)"
    let v273 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v271 v272 
    let v274 : string = "summary"
    let v275 : string = "<" + v274 + " " + v110 + ">move || { v273 }</" + v274 + ">"
    let v276 : string = "leptos::prelude::view! { " + v275 + " }"
    let v277 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v276 
    let v278 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v277 |> unbox
    let v279 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v280 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v278 v279 
    let v281 : string = "class=\"flex flex-1 flex-col\""
    let v282 : string = " " + v281 + v6 + ""
    let v283 : string = "Func0::new(move || $0())"
    let v284 : (unit -> leptos_dom_Fragment) = closure174(v63, v66, v0)
    let v285 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v284 v283 
    let v286 : Func0<leptos_dom_Fragment> = method195(v285)
    let v287 : string = "(move || v286())()"
    let v288 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v287 
    let v289 : string = "leptos::prelude::AnyView::from($0)"
    let v290 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v288 v289 
    let v291 : string = "<" + v92 + " " + v282 + ">move || { v290 }</" + v92 + ">"
    let v292 : string = "leptos::prelude::view! { " + v291 + " }"
    let v293 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v292 
    let v294 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v293 |> unbox
    let v295 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v296 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v294 v295 
    let v297 : string = "v296"
    let v298 : string = v297 + v6 
    let v299 : string = v298 + v6 
    let v300 : string = "v280"
    let v301 : string = v300 + v265 
    let v302 : string = v301 + v299 
    let v303 : string = "vec![" + v302 + "]"
    let v304 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v303 
    let v305 : string = "leptos::prelude::Fragment::new($0)"
    let v306 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v304 v305 
    let v307 : string = "leptos::prelude::AnyView::from($0)"
    let v308 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v306 v307 
    let v309 : string = "details"
    let v310 : string = "<" + v309 + " " + v102 + ">move || { v308 }</" + v309 + ">"
    let v311 : string = "leptos::prelude::view! { " + v310 + " }"
    let v312 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v311 
    let v313 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v312 |> unbox
    let v314 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v315 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v313 v314 
    let v316 : string = "v315"
    let v317 : string = v316 + v6 
    let v318 : string = v317 + v6 
    let v319 : string = "v98"
    let v320 : string = v319 + v265 
    let v321 : string = v320 + v318 
    let v322 : string = "vec![" + v321 + "]"
    let v323 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v322 
    let v324 : string = "leptos::prelude::Fragment::new($0)"
    let v325 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v323 v324 
    let v326 : string = "leptos::prelude::AnyView::from($0)"
    let v327 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v325 v326 
    let v328 : string = "<" + v92 + " " + v74 + ">move || { v327 }</" + v92 + ">"
    let v329 : string = "leptos::prelude::view! { " + v328 + " }"
    let v330 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v329 
    let v331 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v330 |> unbox
    let v332 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v333 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v331 v332 
    let v334 : string = "v333"
    let v335 : string = v334 + v6 
    let v336 : string = v335 + v6 
    let v337 : string = "v60"
    let v338 : string = v337 + v265 
    let v339 : string = v338 + v336 
    let v340 : string = "vec![" + v339 + "]"
    let v341 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v340 
    let v342 : string = "leptos::prelude::Fragment::new($0)"
    let v343 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v341 v342 
    let v344 : string = "leptos::prelude::AnyView::from($0)"
    let v345 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v343 v344 
    let v346 : string = "<" + v92 + " " + v9 + ">move || { v345 }</" + v92 + ">"
    let v347 : string = "leptos::prelude::view! { " + v346 + " }"
    let v348 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v347 
    let v349 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v348 |> unbox
    let v350 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v351 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v349 v350 
    let v352 : string = "class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\""
    let v353 : string = " " + v352 + v6 + ""
    let v354 : string = "Max"
    (* run_target_args'
    let v355 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v356 : string = "&*$0"
    let v357 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v354 v356 
    let _run_target_args'_v355 = v357 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v358 : string = "&*$0"
    let v359 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v354 v358 
    let _run_target_args'_v355 = v359 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v360 : string = "&*$0"
    let v361 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v354 v360 
    let _run_target_args'_v355 = v361 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v362 : Ref<Str> = v354 |> unbox<Ref<Str>>
    let _run_target_args'_v355 = v362 
    #endif
#if FABLE_COMPILER_PYTHON
    let v365 : Ref<Str> = v354 |> unbox<Ref<Str>>
    let _run_target_args'_v355 = v365 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v368 : Ref<Str> = v354 |> unbox<Ref<Str>>
    let _run_target_args'_v355 = v368 
    #endif
#else
    let v371 : Ref<Str> = v354 |> unbox<Ref<Str>>
    let _run_target_args'_v355 = v371 
    #endif
    let v374 : Ref<Str> = _run_target_args'_v355 
    (* run_target_args'
    let v379 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v380 : string = "String::from($0)"
    let v381 : std_string_String = Fable.Core.RustInterop.emitRustExpr v374 v380 
    let _run_target_args'_v379 = v381 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v382 : string = "String::from($0)"
    let v383 : std_string_String = Fable.Core.RustInterop.emitRustExpr v374 v382 
    let _run_target_args'_v379 = v383 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v384 : string = "String::from($0)"
    let v385 : std_string_String = Fable.Core.RustInterop.emitRustExpr v374 v384 
    let _run_target_args'_v379 = v385 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v386 : std_string_String = v374 |> unbox<std_string_String>
    let _run_target_args'_v379 = v386 
    #endif
#if FABLE_COMPILER_PYTHON
    let v389 : std_string_String = v374 |> unbox<std_string_String>
    let _run_target_args'_v379 = v389 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v392 : std_string_String = v374 |> unbox<std_string_String>
    let _run_target_args'_v379 = v392 
    #endif
#else
    let v395 : std_string_String = v374 |> unbox<std_string_String>
    let _run_target_args'_v379 = v395 
    #endif
    let v398 : std_string_String = _run_target_args'_v379 
    let v403 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v404 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v398 v403 
    let v405 : unit = ()
    let v406 : string = $"true; let _func0_from_v405 = Func0::from(move || {{ //"
    let v407 : bool = Fable.Core.RustInterop.emitRustExpr () v406 
    let v408 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v409 : string = "Box::pin($0)"
    let v410 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v408 v409 
    let v411 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v412 : Heap1 = Fable.Core.RustInterop.emitRustExpr v410 v411 
    let v413 : leptos_prelude_ArcRwSignal<Heap0> = v412.l3
    let v414 : string = "Box::pin($0)"
    let v415 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap0>>> = Fable.Core.RustInterop.emitRustExpr v413 v414 
    let v416 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v417 : Heap0 = Fable.Core.RustInterop.emitRustExpr v415 v416 
    let v418 : int32 = v417.l2
    let v419 : string = $"true; $0 /*"
    let v420 : bool = Fable.Core.RustInterop.emitRustExpr v418 v419 
    let v421 : string = $"*/ }}); //"
    let v422 : bool = Fable.Core.RustInterop.emitRustExpr () v421 
    let v423 : string = $"_func0_from_v405"
    let v424 : Func0<int32> = Fable.Core.RustInterop.emitRustExpr () v423 
    let v425 : unit = ()
    let v426 : string = $"true; let _func1_from_v425 = Func0::from(move || {{ //"
    let v427 : bool = Fable.Core.RustInterop.emitRustExpr () v426 
    let v428 : string = $"value"
    let v429 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v428 
    let v430 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v431 : string = "Box::pin($0)"
    let v432 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v430 v431 
    let v433 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v434 : Heap1 = Fable.Core.RustInterop.emitRustExpr v432 v433 
    let v435 : leptos_prelude_ArcRwSignal<Heap0> = v434.l3
    let v436 : string = "Box::pin($0)"
    let v437 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap0>>> = Fable.Core.RustInterop.emitRustExpr v435 v436 
    let v438 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v439 : Heap0 = Fable.Core.RustInterop.emitRustExpr v437 v438 
    let v440 : Vec<(bool * std_string_String)> = v439.l0
    let v441 : std_string_String option = v439.l1
    let v442 : int32 = v439.l2
    let v443 : int32 = v439.l3
    let v444 : US1 = v439.l4
    let v445 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v446 : string = "Box::pin($0)"
    let v447 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v445 v446 
    let v448 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v449 : Heap1 = Fable.Core.RustInterop.emitRustExpr v447 v448 
    let v450 : leptos_prelude_ArcRwSignal<Heap0> = v449.l3
    let v451 : (std_string_String -> string) = _.ToString()
    let v452 : string = v451 v429
    let v455 : bool = "" = v452
    let v463 : int32 =
        if v455 then
            1
        else
            let v456 : int32 = v452 |> int32 
            v456
    let v464 : Heap0 = {l0 = v440; l1 = v441; l2 = v463; l3 = v443; l4 = v444} : Heap0
    let v465 : string = $"true; leptos::prelude::ArcRwSignal::set(&$0, $1); //"
    let v466 : bool = Fable.Core.RustInterop.emitRustExpr struct (v450, v464) v465 
    let v467 : string = $"true; /*"
    let v468 : bool = Fable.Core.RustInterop.emitRustExpr () v467 
    let v469 : string = $"*/ }}); //"
    let v470 : bool = Fable.Core.RustInterop.emitRustExpr () v469 
    let v471 : string = $"_func1_from_v425"
    let v472 : Func0<std_string_String, unit> = Fable.Core.RustInterop.emitRustExpr () v471 
    let v473 : string = "$0"
    let v474 : (unit -> string) = closure179()
    let v475 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v474 v473 
    let v476 : string = "class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v475(())"
    let v477 : string = "prop:value=move || v424()"
    let v478 : (std_string_String -> unit) = closure180(v472)
    let v479 : string = "on:keyup=move |event: web_sys::KeyboardEvent| v478(leptos::prelude::event_target_value(&event))"
    let v480 : string = " " + v476 + v6 + ""
    let v481 : string = " " + v477 + v480 + ""
    let v482 : string = " " + v479 + v481 + ""
    let v483 : string = "input"
    let v484 : string = "<" + v483 + " " + v482 + " />"
    let v485 : string = "leptos::prelude::view! { " + v484 + " }"
    let v486 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v485 
    let v487 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v486 |> unbox
    let v488 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v489 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v487 v488 
    let v490 : string = "v489"
    let v491 : string = v490 + v6 
    let v492 : string = v491 + v6 
    let v493 : string = "v404"
    let v494 : string = v493 + v265 
    let v495 : string = v494 + v492 
    let v496 : string = "vec![" + v495 + "]"
    let v497 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v496 
    let v498 : string = "leptos::prelude::Fragment::new($0)"
    let v499 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v497 v498 
    let v500 : string = "leptos::prelude::AnyView::from($0)"
    let v501 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v499 v500 
    let v502 : string = "<" + v92 + " " + v353 + ">move || { v501 }</" + v92 + ">"
    let v503 : string = "leptos::prelude::view! { " + v502 + " }"
    let v504 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v503 
    let v505 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v504 |> unbox
    let v506 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v507 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v505 v506 
    let v508 : string = "class=\"flex\""
    let v509 : string = " " + v508 + v6 + ""
    let v510 : string = "Func0::new(move || $0())"
    let v511 : (unit -> bool) = closure181(v1)
    let v512 : Func0<bool> = Fable.Core.RustInterop.emitRustExpr v511 v510 
    let v513 : Func0<bool> = method197(v512)
    let v514 : unit = ()
    let v515 : string = $"true; let _func0_from_v514 = Func0::from(move || {{ //"
    let v516 : bool = Fable.Core.RustInterop.emitRustExpr () v515 
    let v517 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v518 : string = "Box::pin($0)"
    let v519 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v517 v518 
    let v520 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v521 : Heap1 = Fable.Core.RustInterop.emitRustExpr v519 v520 
    let v522 : leptos_prelude_ArcRwSignal<Heap0> = v521.l3
    let v523 : string = "Box::pin($0)"
    let v524 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap0>>> = Fable.Core.RustInterop.emitRustExpr v522 v523 
    let v525 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v526 : Heap0 = Fable.Core.RustInterop.emitRustExpr v524 v525 
    let v527 : int32 = v526.l2
    let v528 : Heap6 = {l0 = v527} : Heap6
    let v529 : string = "true; leptos::prelude::ArcAction::dispatch(&$0, $1.clone())"
    let v530 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1, v528) v529 
    // rust.func0_from / is_unit
    let v531 : string = $"true; /*"
    let v532 : bool = Fable.Core.RustInterop.emitRustExpr () v531 
    let v533 : string = $"*/ }}); //"
    let v534 : bool = Fable.Core.RustInterop.emitRustExpr () v533 
    let v535 : string = $"_func0_from_v514"
    let v536 : Func0<unit> = Fable.Core.RustInterop.emitRustExpr () v535 
    let v537 : string = "flex"
    let v538 : string = "gap-[10px]"
    let v539 : string = "[align-items:center]"
    let v540 : string = "inline-block"
    let v541 : string = "rounded"
    let v542 : string = "border"
    let v543 : string = "border-gray-400"
    let v544 : string = "hover:bg-gray-400"
    let v545 : string = "px-4"
    let v546 : string = "py-1"
    let v547 : string = "text-sm"
    let v548 : string = "font-medium"
    let v549 : string = "text-gray-900"
    let v550 : string = "bg-transparent"
    let v551 : string = "hover:text-gray-600"
    let v552 : string = "focus:outline-none"
    let v553 : string = "focus:ring"
    let v554 : string = "active:text-gray-500"
    let v555 : string list = []
    let v556 : string list = v554 :: v555 
    let v559 : string list = v553 :: v556 
    let v562 : string list = v552 :: v559 
    let v565 : string list = v551 :: v562 
    let v568 : string list = v550 :: v565 
    let v571 : string list = v549 :: v568 
    let v574 : string list = v548 :: v571 
    let v577 : string list = v547 :: v574 
    let v580 : string list = v546 :: v577 
    let v583 : string list = v545 :: v580 
    let v586 : string list = v544 :: v583 
    let v589 : string list = v543 :: v586 
    let v592 : string list = v542 :: v589 
    let v595 : string list = v541 :: v592 
    let v598 : string list = v540 :: v595 
    let v601 : string list = v539 :: v598 
    let v604 : string list = v538 :: v601 
    let v607 : string list = v537 :: v604 
    let v610 : unit = ()
    let _let'_v610 =
        seq {
            yield! v607 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v613 : string seq = _let'_v610 
    let v619 : (string -> (string seq -> string)) = String.concat
    let v620 : string = " "
    let v621 : (string seq -> string) = v619 v620
    let v622 : string = v621 v613
    (* run_target_args'
    let v625 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v626 : string = "&*$0"
    let v627 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v622 v626 
    let _run_target_args'_v625 = v627 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v628 : string = "&*$0"
    let v629 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v622 v628 
    let _run_target_args'_v625 = v629 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v630 : string = "&*$0"
    let v631 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v622 v630 
    let _run_target_args'_v625 = v631 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v632 : Ref<Str> = v622 |> unbox<Ref<Str>>
    let _run_target_args'_v625 = v632 
    #endif
#if FABLE_COMPILER_PYTHON
    let v635 : Ref<Str> = v622 |> unbox<Ref<Str>>
    let _run_target_args'_v625 = v635 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v638 : Ref<Str> = v622 |> unbox<Ref<Str>>
    let _run_target_args'_v625 = v638 
    #endif
#else
    let v641 : Ref<Str> = v622 |> unbox<Ref<Str>>
    let _run_target_args'_v625 = v641 
    #endif
    let v644 : Ref<Str> = _run_target_args'_v625 
    (* run_target_args'
    let v649 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v650 : string = "String::from($0)"
    let v651 : std_string_String = Fable.Core.RustInterop.emitRustExpr v644 v650 
    let _run_target_args'_v649 = v651 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v652 : string = "String::from($0)"
    let v653 : std_string_String = Fable.Core.RustInterop.emitRustExpr v644 v652 
    let _run_target_args'_v649 = v653 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v654 : string = "String::from($0)"
    let v655 : std_string_String = Fable.Core.RustInterop.emitRustExpr v644 v654 
    let _run_target_args'_v649 = v655 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v656 : std_string_String = v644 |> unbox<std_string_String>
    let _run_target_args'_v649 = v656 
    #endif
#if FABLE_COMPILER_PYTHON
    let v659 : std_string_String = v644 |> unbox<std_string_String>
    let _run_target_args'_v649 = v659 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v662 : std_string_String = v644 |> unbox<std_string_String>
    let _run_target_args'_v649 = v662 
    #endif
#else
    let v665 : std_string_String = v644 |> unbox<std_string_String>
    let _run_target_args'_v649 = v665 
    #endif
    let v668 : std_string_String = _run_target_args'_v649 
    let v673 : string = "$0"
    let v674 : std_string_String = Fable.Core.RustInterop.emitRustExpr v668 v673 
    let v675 : string = "class=v674"
    let v676 : string = "prop:disabled=move || v513()"
    let v677 : string = "on:click=move |_| v536()"
    let v678 : string = " " + v675 + v6 + ""
    let v679 : string = " " + v676 + v678 + ""
    let v680 : string = " " + v677 + v679 + ""
    let v681 : string = "Roll"
    (* run_target_args'
    let v682 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v683 : string = "&*$0"
    let v684 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v681 v683 
    let _run_target_args'_v682 = v684 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v685 : string = "&*$0"
    let v686 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v681 v685 
    let _run_target_args'_v682 = v686 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v687 : string = "&*$0"
    let v688 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v681 v687 
    let _run_target_args'_v682 = v688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v689 : Ref<Str> = v681 |> unbox<Ref<Str>>
    let _run_target_args'_v682 = v689 
    #endif
#if FABLE_COMPILER_PYTHON
    let v692 : Ref<Str> = v681 |> unbox<Ref<Str>>
    let _run_target_args'_v682 = v692 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v695 : Ref<Str> = v681 |> unbox<Ref<Str>>
    let _run_target_args'_v682 = v695 
    #endif
#else
    let v698 : Ref<Str> = v681 |> unbox<Ref<Str>>
    let _run_target_args'_v682 = v698 
    #endif
    let v701 : Ref<Str> = _run_target_args'_v682 
    (* run_target_args'
    let v706 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v707 : string = "String::from($0)"
    let v708 : std_string_String = Fable.Core.RustInterop.emitRustExpr v701 v707 
    let _run_target_args'_v706 = v708 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v709 : string = "String::from($0)"
    let v710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v701 v709 
    let _run_target_args'_v706 = v710 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v711 : string = "String::from($0)"
    let v712 : std_string_String = Fable.Core.RustInterop.emitRustExpr v701 v711 
    let _run_target_args'_v706 = v712 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v713 : std_string_String = v701 |> unbox<std_string_String>
    let _run_target_args'_v706 = v713 
    #endif
#if FABLE_COMPILER_PYTHON
    let v716 : std_string_String = v701 |> unbox<std_string_String>
    let _run_target_args'_v706 = v716 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v719 : std_string_String = v701 |> unbox<std_string_String>
    let _run_target_args'_v706 = v719 
    #endif
#else
    let v722 : std_string_String = v701 |> unbox<std_string_String>
    let _run_target_args'_v706 = v722 
    #endif
    let v725 : std_string_String = _run_target_args'_v706 
    let v730 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v731 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v725 v730 
    let v732 : string = "$0()"
    let v733 : bool = Fable.Core.RustInterop.emitRustExpr v512 v732 
    let v1097 : leptos_prelude_AnyView_ =
        if v733 then
            let v734 : string = "$0"
            let v735 : (unit -> string) = closure182()
            let v736 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v735 v734 
            let v737 : string = "version=\"1.1\""
            let v738 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v739 : string = "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
            let v740 : string = "x=\"0px\""
            let v741 : string = "y=\"0px\""
            let v742 : string = "viewBox=\"0 0 24 30\""
            let v743 : string = "style=\"enable-background:new 0 0 50 50;\""
            let v744 : string = "xml:space=\"preserve\""
            let v745 : string = "class=move || \" \".to_owned() + &v736(())"
            let v746 : string = " " + v737 + v6 + ""
            let v747 : string = " " + v738 + v746 + ""
            let v748 : string = " " + v739 + v747 + ""
            let v749 : string = " " + v740 + v748 + ""
            let v750 : string = " " + v741 + v749 + ""
            let v751 : string = " " + v742 + v750 + ""
            let v752 : string = " " + v743 + v751 + ""
            let v753 : string = " " + v744 + v752 + ""
            let v754 : string = " " + v745 + v753 + ""
            let v755 : string = "x=\"0\""
            let v756 : string = "y=\"10\""
            let v757 : string = "width=\"4\""
            let v758 : string = "height=\"10\""
            let v759 : string = "fill=\"#333\""
            let v760 : string = "opacity=\"0.2\""
            let v761 : string = " " + v755 + v6 + ""
            let v762 : string = " " + v756 + v761 + ""
            let v763 : string = " " + v757 + v762 + ""
            let v764 : string = " " + v758 + v763 + ""
            let v765 : string = " " + v759 + v764 + ""
            let v766 : string = " " + v760 + v765 + ""
            let v767 : string = "attributeName=\"opacity\""
            let v768 : string = "attributeType=\"XML\""
            let v769 : string = "values=\"0.2; 1; .2\""
            let v770 : string = "begin=\"0s\""
            let v771 : string = "dur=\"0.6s\""
            let v772 : string = "repeatCount=\"indefinite\""
            let v773 : string = " " + v767 + v6 + ""
            let v774 : string = " " + v768 + v773 + ""
            let v775 : string = " " + v769 + v774 + ""
            let v776 : string = " " + v770 + v775 + ""
            let v777 : string = " " + v771 + v776 + ""
            let v778 : string = " " + v772 + v777 + ""
            let v779 : string = "vec![" + v6 + "]"
            let v780 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v779 
            let v781 : string = "leptos::prelude::Fragment::new($0)"
            let v782 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v780 v781 
            let v783 : string = "leptos::prelude::AnyView::from($0)"
            let v784 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v782 v783 
            let v785 : string = "animate"
            let v786 : string = "<" + v785 + " " + v778 + ">move || { v784 }</" + v785 + ">"
            let v787 : string = "leptos::prelude::view! { " + v786 + " }"
            let v788 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v787 
            let v789 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v788 |> unbox
            let v790 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v791 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v789 v790 
            let v792 : string = "attributeName=\"height\""
            let v793 : string = "attributeType=\"XML\""
            let v794 : string = "values=\"10; 20; 10\""
            let v795 : string = "begin=\"0s\""
            let v796 : string = "dur=\"0.6s\""
            let v797 : string = "repeatCount=\"indefinite\""
            let v798 : string = " " + v792 + v6 + ""
            let v799 : string = " " + v793 + v798 + ""
            let v800 : string = " " + v794 + v799 + ""
            let v801 : string = " " + v795 + v800 + ""
            let v802 : string = " " + v796 + v801 + ""
            let v803 : string = " " + v797 + v802 + ""
            let v804 : string = "vec![" + v6 + "]"
            let v805 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v804 
            let v806 : string = "leptos::prelude::Fragment::new($0)"
            let v807 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v805 v806 
            let v808 : string = "leptos::prelude::AnyView::from($0)"
            let v809 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v807 v808 
            let v810 : string = "<" + v785 + " " + v803 + ">move || { v809 }</" + v785 + ">"
            let v811 : string = "leptos::prelude::view! { " + v810 + " }"
            let v812 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v811 
            let v813 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v812 |> unbox
            let v814 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v815 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v813 v814 
            let v816 : string = "attributeName=\"y\""
            let v817 : string = "attributeType=\"XML\""
            let v818 : string = "values=\"10; 5; 10\""
            let v819 : string = "begin=\"0s\""
            let v820 : string = "dur=\"0.6s\""
            let v821 : string = "repeatCount=\"indefinite\""
            let v822 : string = " " + v816 + v6 + ""
            let v823 : string = " " + v817 + v822 + ""
            let v824 : string = " " + v818 + v823 + ""
            let v825 : string = " " + v819 + v824 + ""
            let v826 : string = " " + v820 + v825 + ""
            let v827 : string = " " + v821 + v826 + ""
            let v828 : string = "vec![" + v6 + "]"
            let v829 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v828 
            let v830 : string = "leptos::prelude::Fragment::new($0)"
            let v831 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v829 v830 
            let v832 : string = "leptos::prelude::AnyView::from($0)"
            let v833 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v831 v832 
            let v834 : string = "<" + v785 + " " + v827 + ">move || { v833 }</" + v785 + ">"
            let v835 : string = "leptos::prelude::view! { " + v834 + " }"
            let v836 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v835 
            let v837 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v836 |> unbox
            let v838 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v839 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v837 v838 
            let v840 : string = "v839"
            let v841 : string = v840 + v6 
            let v842 : string = v841 + v6 
            let v843 : string = "v815"
            let v844 : string = v843 + v265 
            let v845 : string = v844 + v842 
            let v846 : string = "v791"
            let v847 : string = v846 + v265 
            let v848 : string = v847 + v845 
            let v849 : string = "vec![" + v848 + "]"
            let v850 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v849 
            let v851 : string = "leptos::prelude::Fragment::new($0)"
            let v852 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v850 v851 
            let v853 : string = "leptos::prelude::AnyView::from($0)"
            let v854 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v852 v853 
            let v855 : string = "rect"
            let v856 : string = "<" + v855 + " " + v766 + ">move || { v854 }</" + v855 + ">"
            let v857 : string = "leptos::prelude::view! { " + v856 + " }"
            let v858 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v857 
            let v859 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v858 |> unbox
            let v860 : string = "x=\"8\""
            let v861 : string = "y=\"10\""
            let v862 : string = "width=\"4\""
            let v863 : string = "height=\"10\""
            let v864 : string = "fill=\"#333\""
            let v865 : string = "opacity=\"0.2\""
            let v866 : string = " " + v860 + v6 + ""
            let v867 : string = " " + v861 + v866 + ""
            let v868 : string = " " + v862 + v867 + ""
            let v869 : string = " " + v863 + v868 + ""
            let v870 : string = " " + v864 + v869 + ""
            let v871 : string = " " + v865 + v870 + ""
            let v872 : string = "attributeName=\"opacity\""
            let v873 : string = "attributeType=\"XML\""
            let v874 : string = "values=\"0.2; 1; .2\""
            let v875 : string = "begin=\"0.15s\""
            let v876 : string = "dur=\"0.6s\""
            let v877 : string = "repeatCount=\"indefinite\""
            let v878 : string = " " + v872 + v6 + ""
            let v879 : string = " " + v873 + v878 + ""
            let v880 : string = " " + v874 + v879 + ""
            let v881 : string = " " + v875 + v880 + ""
            let v882 : string = " " + v876 + v881 + ""
            let v883 : string = " " + v877 + v882 + ""
            let v884 : string = "vec![" + v6 + "]"
            let v885 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v884 
            let v886 : string = "leptos::prelude::Fragment::new($0)"
            let v887 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v885 v886 
            let v888 : string = "leptos::prelude::AnyView::from($0)"
            let v889 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v887 v888 
            let v890 : string = "<" + v785 + " " + v883 + ">move || { v889 }</" + v785 + ">"
            let v891 : string = "leptos::prelude::view! { " + v890 + " }"
            let v892 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v891 
            let v893 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v892 |> unbox
            let v894 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v895 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v893 v894 
            let v896 : string = "attributeName=\"opacity\""
            let v897 : string = "attributeType=\"XML\""
            let v898 : string = "values=\"10; 20; 10\""
            let v899 : string = "begin=\"0.15s\""
            let v900 : string = "dur=\"0.6s\""
            let v901 : string = "repeatCount=\"indefinite\""
            let v902 : string = " " + v896 + v6 + ""
            let v903 : string = " " + v897 + v902 + ""
            let v904 : string = " " + v898 + v903 + ""
            let v905 : string = " " + v899 + v904 + ""
            let v906 : string = " " + v900 + v905 + ""
            let v907 : string = " " + v901 + v906 + ""
            let v908 : string = "vec![" + v6 + "]"
            let v909 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v908 
            let v910 : string = "leptos::prelude::Fragment::new($0)"
            let v911 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v909 v910 
            let v912 : string = "leptos::prelude::AnyView::from($0)"
            let v913 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v911 v912 
            let v914 : string = "<" + v785 + " " + v907 + ">move || { v913 }</" + v785 + ">"
            let v915 : string = "leptos::prelude::view! { " + v914 + " }"
            let v916 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v915 
            let v917 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v916 |> unbox
            let v918 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v919 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v917 v918 
            let v920 : string = "attributeName=\"y\""
            let v921 : string = "attributeType=\"XML\""
            let v922 : string = "values=\"10; 5; 10\""
            let v923 : string = "begin=\"0.15s\""
            let v924 : string = "dur=\"0.6s\""
            let v925 : string = "repeatCount=\"indefinite\""
            let v926 : string = " " + v920 + v6 + ""
            let v927 : string = " " + v921 + v926 + ""
            let v928 : string = " " + v922 + v927 + ""
            let v929 : string = " " + v923 + v928 + ""
            let v930 : string = " " + v924 + v929 + ""
            let v931 : string = " " + v925 + v930 + ""
            let v932 : string = "vec![" + v6 + "]"
            let v933 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v932 
            let v934 : string = "leptos::prelude::Fragment::new($0)"
            let v935 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v933 v934 
            let v936 : string = "leptos::prelude::AnyView::from($0)"
            let v937 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v935 v936 
            let v938 : string = "<" + v785 + " " + v931 + ">move || { v937 }</" + v785 + ">"
            let v939 : string = "leptos::prelude::view! { " + v938 + " }"
            let v940 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v939 
            let v941 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v940 |> unbox
            let v942 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v943 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v941 v942 
            let v944 : string = "v943"
            let v945 : string = v944 + v6 
            let v946 : string = v945 + v6 
            let v947 : string = "v919"
            let v948 : string = v947 + v265 
            let v949 : string = v948 + v946 
            let v950 : string = "v895"
            let v951 : string = v950 + v265 
            let v952 : string = v951 + v949 
            let v953 : string = "vec![" + v952 + "]"
            let v954 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v953 
            let v955 : string = "leptos::prelude::Fragment::new($0)"
            let v956 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v954 v955 
            let v957 : string = "leptos::prelude::AnyView::from($0)"
            let v958 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v956 v957 
            let v959 : string = "<" + v855 + " " + v871 + ">move || { v958 }</" + v855 + ">"
            let v960 : string = "leptos::prelude::view! { " + v959 + " }"
            let v961 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v960 
            let v962 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v961 |> unbox
            let v963 : string = "x=\"16\""
            let v964 : string = "y=\"10\""
            let v965 : string = "width=\"4\""
            let v966 : string = "height=\"10\""
            let v967 : string = "fill=\"#333\""
            let v968 : string = "opacity=\"0.2\""
            let v969 : string = " " + v963 + v6 + ""
            let v970 : string = " " + v964 + v969 + ""
            let v971 : string = " " + v965 + v970 + ""
            let v972 : string = " " + v966 + v971 + ""
            let v973 : string = " " + v967 + v972 + ""
            let v974 : string = " " + v968 + v973 + ""
            let v975 : string = "attributeName=\"opacity\""
            let v976 : string = "attributeType=\"XML\""
            let v977 : string = "values=\"0.2; 1; .2\""
            let v978 : string = "begin=\"0.3s\""
            let v979 : string = "dur=\"0.6s\""
            let v980 : string = "repeatCount=\"indefinite\""
            let v981 : string = " " + v975 + v6 + ""
            let v982 : string = " " + v976 + v981 + ""
            let v983 : string = " " + v977 + v982 + ""
            let v984 : string = " " + v978 + v983 + ""
            let v985 : string = " " + v979 + v984 + ""
            let v986 : string = " " + v980 + v985 + ""
            let v987 : string = "vec![" + v6 + "]"
            let v988 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v987 
            let v989 : string = "leptos::prelude::Fragment::new($0)"
            let v990 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v988 v989 
            let v991 : string = "leptos::prelude::AnyView::from($0)"
            let v992 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v990 v991 
            let v993 : string = "<" + v785 + " " + v986 + ">move || { v992 }</" + v785 + ">"
            let v994 : string = "leptos::prelude::view! { " + v993 + " }"
            let v995 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v994 
            let v996 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v995 |> unbox
            let v997 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v998 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v996 v997 
            let v999 : string = "attributeName=\"height\""
            let v1000 : string = "attributeType=\"XML\""
            let v1001 : string = "values=\"10; 20; 10\""
            let v1002 : string = "begin=\"0.3s\""
            let v1003 : string = "dur=\"0.6s\""
            let v1004 : string = "repeatCount=\"indefinite\""
            let v1005 : string = " " + v999 + v6 + ""
            let v1006 : string = " " + v1000 + v1005 + ""
            let v1007 : string = " " + v1001 + v1006 + ""
            let v1008 : string = " " + v1002 + v1007 + ""
            let v1009 : string = " " + v1003 + v1008 + ""
            let v1010 : string = " " + v1004 + v1009 + ""
            let v1011 : string = "vec![" + v6 + "]"
            let v1012 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1011 
            let v1013 : string = "leptos::prelude::Fragment::new($0)"
            let v1014 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1012 v1013 
            let v1015 : string = "leptos::prelude::AnyView::from($0)"
            let v1016 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1014 v1015 
            let v1017 : string = "<" + v785 + " " + v1010 + ">move || { v1016 }</" + v785 + ">"
            let v1018 : string = "leptos::prelude::view! { " + v1017 + " }"
            let v1019 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1018 
            let v1020 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1019 |> unbox
            let v1021 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1022 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1020 v1021 
            let v1023 : string = "attributeName=\"y\""
            let v1024 : string = "attributeType=\"XML\""
            let v1025 : string = "values=\"10; 5; 10\""
            let v1026 : string = "begin=\"0.3s\""
            let v1027 : string = "dur=\"0.6s\""
            let v1028 : string = "repeatCount=\"indefinite\""
            let v1029 : string = " " + v1023 + v6 + ""
            let v1030 : string = " " + v1024 + v1029 + ""
            let v1031 : string = " " + v1025 + v1030 + ""
            let v1032 : string = " " + v1026 + v1031 + ""
            let v1033 : string = " " + v1027 + v1032 + ""
            let v1034 : string = " " + v1028 + v1033 + ""
            let v1035 : string = "vec![" + v6 + "]"
            let v1036 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1035 
            let v1037 : string = "leptos::prelude::Fragment::new($0)"
            let v1038 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1036 v1037 
            let v1039 : string = "leptos::prelude::AnyView::from($0)"
            let v1040 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1038 v1039 
            let v1041 : string = "<" + v785 + " " + v1034 + ">move || { v1040 }</" + v785 + ">"
            let v1042 : string = "leptos::prelude::view! { " + v1041 + " }"
            let v1043 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1042 
            let v1044 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1043 |> unbox
            let v1045 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1046 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1044 v1045 
            let v1047 : string = "v1046"
            let v1048 : string = v1047 + v6 
            let v1049 : string = v1048 + v6 
            let v1050 : string = "v1022"
            let v1051 : string = v1050 + v265 
            let v1052 : string = v1051 + v1049 
            let v1053 : string = "v998"
            let v1054 : string = v1053 + v265 
            let v1055 : string = v1054 + v1052 
            let v1056 : string = "vec![" + v1055 + "]"
            let v1057 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1056 
            let v1058 : string = "leptos::prelude::Fragment::new($0)"
            let v1059 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1057 v1058 
            let v1060 : string = "leptos::prelude::AnyView::from($0)"
            let v1061 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1059 v1060 
            let v1062 : string = "<" + v855 + " " + v974 + ">move || { v1061 }</" + v855 + ">"
            let v1063 : string = "leptos::prelude::view! { " + v1062 + " }"
            let v1064 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1063 
            let v1065 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v1064 |> unbox
            let v1066 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1067 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1065 v1066 
            let v1068 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1069 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v962 v1068 
            let v1070 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1071 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v859 v1070 
            let v1072 : string = "v1067"
            let v1073 : string = v1072 + v6 
            let v1074 : string = v1073 + v6 
            let v1075 : string = "v1069"
            let v1076 : string = v1075 + v265 
            let v1077 : string = v1076 + v1074 
            let v1078 : string = "v1071"
            let v1079 : string = v1078 + v265 
            let v1080 : string = v1079 + v1077 
            let v1081 : string = "vec![" + v1080 + "]"
            let v1082 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1081 
            let v1083 : string = "leptos::prelude::Fragment::new($0)"
            let v1084 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1082 v1083 
            let v1085 : string = "leptos::prelude::AnyView::from($0)"
            let v1086 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1084 v1085 
            let v1087 : string = "<" + v239 + " " + v754 + ">move || { v1086 }</" + v239 + ">"
            let v1088 : string = "leptos::prelude::view! { " + v1087 + " }"
            let v1089 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1088 
            let v1090 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1089 |> unbox
            let v1091 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1092 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1090 v1091 
            v1092
        else
            let v1093 : string = "vec![" + v6 + "]"
            let v1094 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1093 
            let v1095 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1096 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1094 v1095 
            v1096
    let v1098 : string = "v1097"
    let v1099 : string = v1098 + v6 
    let v1100 : string = v1099 + v6 
    let v1101 : string = "v731"
    let v1102 : string = v1101 + v265 
    let v1103 : string = v1102 + v1100 
    let v1104 : string = "vec![" + v1103 + "]"
    let v1105 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1104 
    let v1106 : string = "leptos::prelude::Fragment::new($0)"
    let v1107 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1105 v1106 
    let v1108 : string = "leptos::prelude::AnyView::from($0)"
    let v1109 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1107 v1108 
    let v1110 : string = "button"
    let v1111 : string = "<" + v1110 + " " + v680 + ">move || { v1109 }</" + v1110 + ">"
    let v1112 : string = "leptos::prelude::view! { " + v1111 + " }"
    let v1113 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1112 
    let v1114 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v1113 |> unbox
    let v1115 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v1116 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1114 v1115 
    let v1117 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v1118 : string option = Fable.Core.RustInterop.emitRustExpr v2 v1117 
    let v1119 : (string -> US31) = method106()
    let v1120 : US31 option = v1118 |> Option.map v1119 
    let v1131 : US31 = US31_1
    let v1132 : US31 = v1120 |> Option.defaultValue v1131 
    let v1293 : leptos_prelude_AnyView_ =
        match v1132 with
        | US31_0(v1136) -> (* Some *)
            let v1137 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v1138 : string = " " + v1137 + v6 + ""
            let v1139 : string = "class=\"[height:17px]\""
            let v1140 : string = " " + v1139 + v6 + ""
            let v1141 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v1142 : string = "fill=\"none\""
            let v1143 : string = "height=\"100%\""
            let v1144 : string = "viewBox=\"0 0 24 24\""
            let v1145 : string = "stroke-width=\"1.5\""
            let v1146 : string = "stroke=\"currentColor\""
            let v1147 : string = "class=\"text-red-700\""
            let v1148 : string = " " + v1141 + v6 + ""
            let v1149 : string = " " + v1142 + v1148 + ""
            let v1150 : string = " " + v1143 + v1149 + ""
            let v1151 : string = " " + v1144 + v1150 + ""
            let v1152 : string = " " + v1145 + v1151 + ""
            let v1153 : string = " " + v1146 + v1152 + ""
            let v1154 : string = " " + v1147 + v1153 + ""
            let v1155 : string = "stroke-linecap=\"round\""
            let v1156 : string = "stroke-linejoin=\"round\""
            let v1157 : string = "d=\"M6 18L18 6M6 6l12 12\""
            let v1158 : string = " " + v1155 + v6 + ""
            let v1159 : string = " " + v1156 + v1158 + ""
            let v1160 : string = " " + v1157 + v1159 + ""
            let v1161 : string = "vec![" + v6 + "]"
            let v1162 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1161 
            let v1163 : string = "leptos::prelude::Fragment::new($0)"
            let v1164 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1162 v1163 
            let v1165 : string = "leptos::prelude::AnyView::from($0)"
            let v1166 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1164 v1165 
            let v1167 : string = "<" + v223 + " " + v1160 + ">move || { v1166 }</" + v223 + ">"
            let v1168 : string = "leptos::prelude::view! { " + v1167 + " }"
            let v1169 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1168 
            let v1170 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v1169 |> unbox
            let v1171 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1172 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1170 v1171 
            let v1173 : string = "v1172"
            let v1174 : string = v1173 + v6 
            let v1175 : string = v1174 + v6 
            let v1176 : string = "vec![" + v1175 + "]"
            let v1177 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1176 
            let v1178 : string = "leptos::prelude::Fragment::new($0)"
            let v1179 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1177 v1178 
            let v1180 : string = "leptos::prelude::AnyView::from($0)"
            let v1181 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1179 v1180 
            let v1182 : string = "<" + v239 + " " + v1154 + ">move || { v1181 }</" + v239 + ">"
            let v1183 : string = "leptos::prelude::view! { " + v1182 + " }"
            let v1184 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1183 
            let v1185 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1184 |> unbox
            let v1186 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1187 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1185 v1186 
            let v1188 : string = "v1187"
            let v1189 : string = v1188 + v6 
            let v1190 : string = v1189 + v6 
            let v1191 : string = "vec![" + v1190 + "]"
            let v1192 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1191 
            let v1193 : string = "leptos::prelude::Fragment::new($0)"
            let v1194 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1192 v1193 
            let v1195 : string = "leptos::prelude::AnyView::from($0)"
            let v1196 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1194 v1195 
            let v1197 : string = "<" + v176 + " " + v1140 + ">move || { v1196 }</" + v176 + ">"
            let v1198 : string = "leptos::prelude::view! { " + v1197 + " }"
            let v1199 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1198 
            let v1200 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1199 |> unbox
            let v1201 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1202 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1200 v1201 
            let v1203 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
            let v1204 : string = " " + v1203 + v6 + ""
            (* run_target_args'
            let v1205 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1206 : string = "&*$0"
            let v1207 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1136 v1206 
            let _run_target_args'_v1205 = v1207 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1208 : string = "&*$0"
            let v1209 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1136 v1208 
            let _run_target_args'_v1205 = v1209 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1210 : string = "&*$0"
            let v1211 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1136 v1210 
            let _run_target_args'_v1205 = v1211 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1212 : Ref<Str> = v1136 |> unbox<Ref<Str>>
            let _run_target_args'_v1205 = v1212 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1215 : Ref<Str> = v1136 |> unbox<Ref<Str>>
            let _run_target_args'_v1205 = v1215 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1218 : Ref<Str> = v1136 |> unbox<Ref<Str>>
            let _run_target_args'_v1205 = v1218 
            #endif
#else
            let v1221 : Ref<Str> = v1136 |> unbox<Ref<Str>>
            let _run_target_args'_v1205 = v1221 
            #endif
            let v1224 : Ref<Str> = _run_target_args'_v1205 
            (* run_target_args'
            let v1229 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1230 : string = "String::from($0)"
            let v1231 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1224 v1230 
            let _run_target_args'_v1229 = v1231 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1232 : string = "String::from($0)"
            let v1233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1224 v1232 
            let _run_target_args'_v1229 = v1233 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1234 : string = "String::from($0)"
            let v1235 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1224 v1234 
            let _run_target_args'_v1229 = v1235 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1236 : std_string_String = v1224 |> unbox<std_string_String>
            let _run_target_args'_v1229 = v1236 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1239 : std_string_String = v1224 |> unbox<std_string_String>
            let _run_target_args'_v1229 = v1239 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1242 : std_string_String = v1224 |> unbox<std_string_String>
            let _run_target_args'_v1229 = v1242 
            #endif
#else
            let v1245 : std_string_String = v1224 |> unbox<std_string_String>
            let _run_target_args'_v1229 = v1245 
            #endif
            let v1248 : std_string_String = _run_target_args'_v1229 
            let v1253 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v1254 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1248 v1253 
            let v1255 : string = "v1254"
            let v1256 : string = v1255 + v6 
            let v1257 : string = v1256 + v6 
            let v1258 : string = "vec![" + v1257 + "]"
            let v1259 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1258 
            let v1260 : string = "leptos::prelude::Fragment::new($0)"
            let v1261 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1259 v1260 
            let v1262 : string = "leptos::prelude::AnyView::from($0)"
            let v1263 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1261 v1262 
            let v1264 : string = "pre"
            let v1265 : string = "<" + v1264 + " " + v1204 + ">move || { v1263 }</" + v1264 + ">"
            let v1266 : string = "leptos::prelude::view! { " + v1265 + " }"
            let v1267 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1266 
            let v1268 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v1267 |> unbox
            let v1269 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1270 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1268 v1269 
            let v1271 : string = "v1270"
            let v1272 : string = v1271 + v6 
            let v1273 : string = v1272 + v6 
            let v1274 : string = "v1202"
            let v1275 : string = v1274 + v265 
            let v1276 : string = v1275 + v1273 
            let v1277 : string = "vec![" + v1276 + "]"
            let v1278 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1277 
            let v1279 : string = "leptos::prelude::Fragment::new($0)"
            let v1280 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1278 v1279 
            let v1281 : string = "leptos::prelude::AnyView::from($0)"
            let v1282 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1280 v1281 
            let v1283 : string = "<" + v92 + " " + v1138 + ">move || { v1282 }</" + v92 + ">"
            let v1284 : string = "leptos::prelude::view! { " + v1283 + " }"
            let v1285 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1284 
            let v1286 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1285 |> unbox
            let v1287 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1288 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1286 v1287 
            v1288
        | _ ->
            let v1289 : string = "vec![" + v6 + "]"
            let v1290 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1289 
            let v1291 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v1292 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1290 v1291 
            v1292
    let v1294 : string = "v1293"
    let v1295 : string = v1294 + v6 
    let v1296 : string = v1295 + v6 
    let v1297 : string = "v1116"
    let v1298 : string = v1297 + v265 
    let v1299 : string = v1298 + v1296 
    let v1300 : string = "vec![" + v1299 + "]"
    let v1301 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1300 
    let v1302 : string = "leptos::prelude::Fragment::new($0)"
    let v1303 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1301 v1302 
    let v1304 : string = "leptos::prelude::AnyView::from($0)"
    let v1305 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1303 v1304 
    let v1306 : string = "<" + v92 + " " + v509 + ">move || { v1305 }</" + v92 + ">"
    let v1307 : string = "leptos::prelude::view! { " + v1306 + " }"
    let v1308 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1307 
    let v1309 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1308 |> unbox
    let v1310 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v1311 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1309 v1310 
    let v1312 : string = "v1311"
    let v1313 : string = v1312 + v6 
    let v1314 : string = v1313 + v6 
    let v1315 : string = "v507"
    let v1316 : string = v1315 + v265 
    let v1317 : string = v1316 + v1314 
    let v1318 : string = "v351"
    let v1319 : string = v1318 + v265 
    let v1320 : string = v1319 + v1317 
    let v1321 : string = "vec![" + v1320 + "]"
    let v1322 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1321 
    let v1323 : string = "leptos::prelude::Fragment::new($0)"
    let v1324 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1322 v1323 
    let v1325 : string = "leptos::prelude::AnyView::from($0)"
    let v1326 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1324 v1325 
    let v1327 : string = "<" + v92 + " " + v7 + ">move || { v1326 }</" + v92 + ">"
    let v1328 : string = "leptos::prelude::view! { " + v1327 + " }"
    let v1329 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1328 
    let v1330 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1329 |> unbox
    let v1331 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v1332 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1330 v1331 
    let v1333 : string = "v1332"
    let v1334 : string = v1333 + v6 
    let v1335 : string = v1334 + v6 
    let v1336 : string = "vec![" + v1335 + "]"
    let v1337 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1336 
    let v1338 : string = "leptos::prelude::Fragment::new($0)"
    let v1339 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1337 v1338 
    v1339
and closure183 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure184 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure185 () () : string =
    let v0 : string = "History"
    v0
and method198 () : (unit -> string) =
    closure185()
and method200 (v0 : Func0<struct (std_string_String * std_string_String option), struct (string * US31)>) : Func0<struct (std_string_String * std_string_String option), struct (string * US31)> =
    v0
and closure188 (v0 : Func0<struct (std_string_String * std_string_String option), struct (string * US31)>) struct (v1 : std_string_String, v2 : std_string_String option) : struct (string * US31) =
    let v3 : Func0<struct (std_string_String * std_string_String option), struct (string * US31)> = method200(v0)
    let func1_move_x = struct (v1, v2) //
    let v4 : _ = func1_move_x
    let v5 : string = "(move |x| v3(x))($0)"
    let struct (v6 : string, v7 : US31) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    struct (v6, v7)
and closure189 () struct (v0 : string, v1 : US31) : bool =
    let v2 : bool = "FUNCTION_CALL" = v0
    if v2 then
        match v1 with
        | US31_0(v3) -> (* Some *)
            let v4 : bool = "generate_random_number" = v3
            v4
        | _ ->
            false
    else
        false
and method201 () : (struct (string * US31) -> bool) =
    closure189()
and method202 (v0 : Vec<struct (string * US31)>) : Vec<struct (string * US31)> =
    v0
and closure187 () struct (v0 : string, v1 : unativeint, v2 : Heap5) : bool =
    let v3 : (struct (std_string_String * std_string_String option) []) = v2.l7
    let v4 : string = "$0.to_vec()"
    let v5 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : unit = ()
    let v7 : string = $"true; let _func1_from_v6 = Func1::from(move |value| {{ //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = $"value"
    let struct (v10 : std_string_String, v11 : std_string_String option) = Fable.Core.RustInterop.emitRustExpr () v9 
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v10 v12 
    let v14 : (std_string_String -> US14) = method39()
    let v15 : US14 option = v11 |> Option.map v14 
    let v26 : US14 = US14_1
    let v27 : US14 = v15 |> Option.defaultValue v26 
    let v37 : US31 =
        match v27 with
        | US14_1 -> (* None *)
            US31_1
        | US14_0(v31) -> (* Some *)
            let v32 : string = "fable_library_rust::String_::fromString($0)"
            let v33 : string = Fable.Core.RustInterop.emitRustExpr v31 v32 
            US31_0(v33)
    let func1_from_result = struct (v13, v37) //
    let v38 : _ = func1_from_result
    let v39 : string = $"true; $0 /*"
    let v40 : bool = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = $"*/ }}); //"
    let v42 : bool = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = $"_func1_from_v6"
    let v44 : Func0<struct (std_string_String * std_string_String option), struct (string * US31)> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v46 : (struct (std_string_String * std_string_String option) -> struct (string * US31)) = closure188(v44)
    let v47 : Vec<struct (string * US31)> = Fable.Core.RustInterop.emitRustExpr struct (v5, v46) v45 
    let v48 : (struct (string * US31) -> bool) = method201()
    let v49 : Vec<struct (string * US31)> = method202(v47)
    let v50 : string = "v49.into_iter().filter(|x| v48(x.clone().clone())).collect::<Vec<_>>()"
    let v51 : Vec<struct (string * US31)> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v53 : (struct (string * US31) []) = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : int32 = v53.Length
    let v55 : bool = v54 > 0
    let v56 : std_string_String = v2.l2
    let v57 : string = "fable_library_rust::String_::fromString($0)"
    let v58 : string = Fable.Core.RustInterop.emitRustExpr v56 v57 
    let v59 : bool = v0 = v58
    let v60 : bool = v55 && v59
    v60
and method199 () : (struct (string * unativeint * Heap5) -> bool) =
    closure187()
and method203 (v0 : Vec<struct (string * unativeint * Heap5)>) : Vec<struct (string * unativeint * Heap5)> =
    v0
and method204 (v0 : int64) : int64 =
    v0
and closure190 () (v0 : chrono_DateTime<chrono_Utc>) : US68 =
    US68_0(v0)
and method205 () : (chrono_DateTime<chrono_Utc> -> US68) =
    closure190()
and method206 (v0 : int32, v1 : Mut2) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure191 () () : string =
    let v0 : string = "[width:24px] [height:30px]"
    v0
and closure186 (v0 : leptos_prelude_ArcMemo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>>, v1 : leptos_prelude_ArcMemo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>, v2 : leptos_prelude_ArcMemo<Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)>>) () : leptos_dom_Fragment =
    let v3 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v4 : Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v6 : (struct (string * Vec<struct (string * US23 * string * bool * bool)>) []) = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : uint64 = System.Convert.ToUInt64 v6.Length
    let v8 : bool = v7 = 0UL
    let v2077 : leptos_prelude_AnyView_ =
        if v8 then
            let v9 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v10 : string = ""
            let v11 : string = " " + v9 + v10 + ""
            let v12 : string = "class=\"[height:17px]\""
            let v13 : string = " " + v12 + v10 + ""
            let v14 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v15 : string = "fill=\"none\""
            let v16 : string = "height=\"100%\""
            let v17 : string = "viewBox=\"0 0 24 24\""
            let v18 : string = "stroke-width=\"1.5\""
            let v19 : string = "stroke=\"currentColor\""
            let v20 : string = "class=\"text-red-700\""
            let v21 : string = " " + v14 + v10 + ""
            let v22 : string = " " + v15 + v21 + ""
            let v23 : string = " " + v16 + v22 + ""
            let v24 : string = " " + v17 + v23 + ""
            let v25 : string = " " + v18 + v24 + ""
            let v26 : string = " " + v19 + v25 + ""
            let v27 : string = " " + v20 + v26 + ""
            let v28 : string = "stroke-linecap=\"round\""
            let v29 : string = "stroke-linejoin=\"round\""
            let v30 : string = "d=\"M6 18L18 6M6 6l12 12\""
            let v31 : string = " " + v28 + v10 + ""
            let v32 : string = " " + v29 + v31 + ""
            let v33 : string = " " + v30 + v32 + ""
            let v34 : string = "vec![" + v10 + "]"
            let v35 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v34 
            let v36 : string = "leptos::prelude::Fragment::new($0)"
            let v37 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v35 v36 
            let v38 : string = "leptos::prelude::AnyView::from($0)"
            let v39 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v37 v38 
            let v40 : string = "path"
            let v41 : string = "<" + v40 + " " + v33 + ">move || { v39 }</" + v40 + ">"
            let v42 : string = "leptos::prelude::view! { " + v41 + " }"
            let v43 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v42 
            let v44 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v43 |> unbox
            let v45 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v46 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v45 
            let v47 : string = "v46"
            let v48 : string = v47 + v10 
            let v49 : string = v48 + v10 
            let v50 : string = "vec![" + v49 + "]"
            let v51 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v50 
            let v52 : string = "leptos::prelude::Fragment::new($0)"
            let v53 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v51 v52 
            let v54 : string = "leptos::prelude::AnyView::from($0)"
            let v55 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v53 v54 
            let v56 : string = "svg"
            let v57 : string = "<" + v56 + " " + v27 + ">move || { v55 }</" + v56 + ">"
            let v58 : string = "leptos::prelude::view! { " + v57 + " }"
            let v59 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v58 
            let v60 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v59 |> unbox
            let v61 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v62 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v60 v61 
            let v63 : string = "v62"
            let v64 : string = v63 + v10 
            let v65 : string = v64 + v10 
            let v66 : string = "vec![" + v65 + "]"
            let v67 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v66 
            let v68 : string = "leptos::prelude::Fragment::new($0)"
            let v69 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v67 v68 
            let v70 : string = "leptos::prelude::AnyView::from($0)"
            let v71 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v69 v70 
            let v72 : string = "span"
            let v73 : string = "<" + v72 + " " + v13 + ">move || { v71 }</" + v72 + ">"
            let v74 : string = "leptos::prelude::view! { " + v73 + " }"
            let v75 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v74 
            let v76 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v75 |> unbox
            let v77 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v78 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v76 v77 
            let v79 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
            let v80 : string = " " + v79 + v10 + ""
            let v81 : string = "No account selected"
            (* run_target_args'
            let v82 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v83 : string = "&*$0"
            let v84 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v81 v83 
            let _run_target_args'_v82 = v84 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v85 : string = "&*$0"
            let v86 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v81 v85 
            let _run_target_args'_v82 = v86 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v87 : string = "&*$0"
            let v88 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v81 v87 
            let _run_target_args'_v82 = v88 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v89 : Ref<Str> = v81 |> unbox<Ref<Str>>
            let _run_target_args'_v82 = v89 
            #endif
#if FABLE_COMPILER_PYTHON
            let v92 : Ref<Str> = v81 |> unbox<Ref<Str>>
            let _run_target_args'_v82 = v92 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v95 : Ref<Str> = v81 |> unbox<Ref<Str>>
            let _run_target_args'_v82 = v95 
            #endif
#else
            let v98 : Ref<Str> = v81 |> unbox<Ref<Str>>
            let _run_target_args'_v82 = v98 
            #endif
            let v101 : Ref<Str> = _run_target_args'_v82 
            (* run_target_args'
            let v106 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v107 : string = "String::from($0)"
            let v108 : std_string_String = Fable.Core.RustInterop.emitRustExpr v101 v107 
            let _run_target_args'_v106 = v108 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v109 : string = "String::from($0)"
            let v110 : std_string_String = Fable.Core.RustInterop.emitRustExpr v101 v109 
            let _run_target_args'_v106 = v110 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v111 : string = "String::from($0)"
            let v112 : std_string_String = Fable.Core.RustInterop.emitRustExpr v101 v111 
            let _run_target_args'_v106 = v112 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v113 : std_string_String = v101 |> unbox<std_string_String>
            let _run_target_args'_v106 = v113 
            #endif
#if FABLE_COMPILER_PYTHON
            let v116 : std_string_String = v101 |> unbox<std_string_String>
            let _run_target_args'_v106 = v116 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v119 : std_string_String = v101 |> unbox<std_string_String>
            let _run_target_args'_v106 = v119 
            #endif
#else
            let v122 : std_string_String = v101 |> unbox<std_string_String>
            let _run_target_args'_v106 = v122 
            #endif
            let v125 : std_string_String = _run_target_args'_v106 
            let v130 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v131 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v125 v130 
            let v132 : string = "v131"
            let v133 : string = v132 + v10 
            let v134 : string = v133 + v10 
            let v135 : string = "vec![" + v134 + "]"
            let v136 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v135 
            let v137 : string = "leptos::prelude::Fragment::new($0)"
            let v138 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v136 v137 
            let v139 : string = "leptos::prelude::AnyView::from($0)"
            let v140 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v138 v139 
            let v141 : string = "pre"
            let v142 : string = "<" + v141 + " " + v80 + ">move || { v140 }</" + v141 + ">"
            let v143 : string = "leptos::prelude::view! { " + v142 + " }"
            let v144 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v143 
            let v145 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v144 |> unbox
            let v146 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v147 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v145 v146 
            let v148 : string = "v147"
            let v149 : string = v148 + v10 
            let v150 : string = v149 + v10 
            let v151 : string = "v78"
            let v152 : string = ", "
            let v153 : string = v151 + v152 
            let v154 : string = v153 + v150 
            let v155 : string = "vec![" + v154 + "]"
            let v156 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v155 
            let v157 : string = "leptos::prelude::Fragment::new($0)"
            let v158 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v156 v157 
            let v159 : string = "leptos::prelude::AnyView::from($0)"
            let v160 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v158 v159 
            let v161 : string = "div"
            let v162 : string = "<" + v161 + " " + v11 + ">move || { v160 }</" + v161 + ">"
            let v163 : string = "leptos::prelude::view! { " + v162 + " }"
            let v164 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v163 
            let v165 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v164 |> unbox
            let v166 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v167 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v165 v166 
            v167
        else
            let v168 : string = $"leptos::prelude::ArcMemo::get(&$0)"
            let v169 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v1 v168 
            let v170 : ((struct (string * unativeint * Heap5) []) option -> US53) = method138()
            let v171 : (std_string_String -> US53) = method139()
            let v172 : US53 = match v169 with Ok x -> v170 x | Error x -> v171 x
            let v195 : US46 =
                match v172 with
                | US53_1(v192) -> (* Error *)
                    US46_1(v192)
                | US53_0(v173) -> (* Ok *)
                    let v174 : ((struct (string * unativeint * Heap5) []) -> US47) = method140()
                    let v175 : US47 option = v173 |> Option.map v174 
                    let v186 : US47 = US47_1
                    let v187 : US47 = v175 |> Option.defaultValue v186 
                    US46_0(v187)
            match v195 with
            | US46_1(v1914) -> (* Error *)
                let v1915 : string = "fable_library_rust::String_::fromString($0)"
                let v1916 : string = Fable.Core.RustInterop.emitRustExpr v1914 v1915 
                let v1917 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
                let v1918 : string = ""
                let v1919 : string = " " + v1917 + v1918 + ""
                let v1920 : string = "class=\"[height:17px]\""
                let v1921 : string = " " + v1920 + v1918 + ""
                let v1922 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                let v1923 : string = "fill=\"none\""
                let v1924 : string = "height=\"100%\""
                let v1925 : string = "viewBox=\"0 0 24 24\""
                let v1926 : string = "stroke-width=\"1.5\""
                let v1927 : string = "stroke=\"currentColor\""
                let v1928 : string = "class=\"text-red-700\""
                let v1929 : string = " " + v1922 + v1918 + ""
                let v1930 : string = " " + v1923 + v1929 + ""
                let v1931 : string = " " + v1924 + v1930 + ""
                let v1932 : string = " " + v1925 + v1931 + ""
                let v1933 : string = " " + v1926 + v1932 + ""
                let v1934 : string = " " + v1927 + v1933 + ""
                let v1935 : string = " " + v1928 + v1934 + ""
                let v1936 : string = "stroke-linecap=\"round\""
                let v1937 : string = "stroke-linejoin=\"round\""
                let v1938 : string = "d=\"M6 18L18 6M6 6l12 12\""
                let v1939 : string = " " + v1936 + v1918 + ""
                let v1940 : string = " " + v1937 + v1939 + ""
                let v1941 : string = " " + v1938 + v1940 + ""
                let v1942 : string = "vec![" + v1918 + "]"
                let v1943 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1942 
                let v1944 : string = "leptos::prelude::Fragment::new($0)"
                let v1945 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1943 v1944 
                let v1946 : string = "leptos::prelude::AnyView::from($0)"
                let v1947 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1945 v1946 
                let v1948 : string = "path"
                let v1949 : string = "<" + v1948 + " " + v1941 + ">move || { v1947 }</" + v1948 + ">"
                let v1950 : string = "leptos::prelude::view! { " + v1949 + " }"
                let v1951 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1950 
                let v1952 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v1951 |> unbox
                let v1953 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v1954 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1952 v1953 
                let v1955 : string = "v1954"
                let v1956 : string = v1955 + v1918 
                let v1957 : string = v1956 + v1918 
                let v1958 : string = "vec![" + v1957 + "]"
                let v1959 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1958 
                let v1960 : string = "leptos::prelude::Fragment::new($0)"
                let v1961 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1959 v1960 
                let v1962 : string = "leptos::prelude::AnyView::from($0)"
                let v1963 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1961 v1962 
                let v1964 : string = "svg"
                let v1965 : string = "<" + v1964 + " " + v1935 + ">move || { v1963 }</" + v1964 + ">"
                let v1966 : string = "leptos::prelude::view! { " + v1965 + " }"
                let v1967 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1966 
                let v1968 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1967 |> unbox
                let v1969 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v1970 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1968 v1969 
                let v1971 : string = "v1970"
                let v1972 : string = v1971 + v1918 
                let v1973 : string = v1972 + v1918 
                let v1974 : string = "vec![" + v1973 + "]"
                let v1975 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1974 
                let v1976 : string = "leptos::prelude::Fragment::new($0)"
                let v1977 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1975 v1976 
                let v1978 : string = "leptos::prelude::AnyView::from($0)"
                let v1979 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1977 v1978 
                let v1980 : string = "span"
                let v1981 : string = "<" + v1980 + " " + v1921 + ">move || { v1979 }</" + v1980 + ">"
                let v1982 : string = "leptos::prelude::view! { " + v1981 + " }"
                let v1983 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1982 
                let v1984 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v1983 |> unbox
                let v1985 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v1986 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1984 v1985 
                let v1987 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
                let v1988 : string = " " + v1987 + v1918 + ""
                (* run_target_args'
                let v1989 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1990 : string = "&*$0"
                let v1991 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1916 v1990 
                let _run_target_args'_v1989 = v1991 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1992 : string = "&*$0"
                let v1993 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1916 v1992 
                let _run_target_args'_v1989 = v1993 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1994 : string = "&*$0"
                let v1995 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1916 v1994 
                let _run_target_args'_v1989 = v1995 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1996 : Ref<Str> = v1916 |> unbox<Ref<Str>>
                let _run_target_args'_v1989 = v1996 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1999 : Ref<Str> = v1916 |> unbox<Ref<Str>>
                let _run_target_args'_v1989 = v1999 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2002 : Ref<Str> = v1916 |> unbox<Ref<Str>>
                let _run_target_args'_v1989 = v2002 
                #endif
#else
                let v2005 : Ref<Str> = v1916 |> unbox<Ref<Str>>
                let _run_target_args'_v1989 = v2005 
                #endif
                let v2008 : Ref<Str> = _run_target_args'_v1989 
                (* run_target_args'
                let v2013 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v2014 : string = "String::from($0)"
                let v2015 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2008 v2014 
                let _run_target_args'_v2013 = v2015 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v2016 : string = "String::from($0)"
                let v2017 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2008 v2016 
                let _run_target_args'_v2013 = v2017 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v2018 : string = "String::from($0)"
                let v2019 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2008 v2018 
                let _run_target_args'_v2013 = v2019 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v2020 : std_string_String = v2008 |> unbox<std_string_String>
                let _run_target_args'_v2013 = v2020 
                #endif
#if FABLE_COMPILER_PYTHON
                let v2023 : std_string_String = v2008 |> unbox<std_string_String>
                let _run_target_args'_v2013 = v2023 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v2026 : std_string_String = v2008 |> unbox<std_string_String>
                let _run_target_args'_v2013 = v2026 
                #endif
#else
                let v2029 : std_string_String = v2008 |> unbox<std_string_String>
                let _run_target_args'_v2013 = v2029 
                #endif
                let v2032 : std_string_String = _run_target_args'_v2013 
                let v2037 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                let v2038 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2032 v2037 
                let v2039 : string = "v2038"
                let v2040 : string = v2039 + v1918 
                let v2041 : string = v2040 + v1918 
                let v2042 : string = "vec![" + v2041 + "]"
                let v2043 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2042 
                let v2044 : string = "leptos::prelude::Fragment::new($0)"
                let v2045 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2043 v2044 
                let v2046 : string = "leptos::prelude::AnyView::from($0)"
                let v2047 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2045 v2046 
                let v2048 : string = "pre"
                let v2049 : string = "<" + v2048 + " " + v1988 + ">move || { v2047 }</" + v2048 + ">"
                let v2050 : string = "leptos::prelude::view! { " + v2049 + " }"
                let v2051 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2050 
                let v2052 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v2051 |> unbox
                let v2053 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v2054 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2052 v2053 
                let v2055 : string = "v2054"
                let v2056 : string = v2055 + v1918 
                let v2057 : string = v2056 + v1918 
                let v2058 : string = "v1986"
                let v2059 : string = ", "
                let v2060 : string = v2058 + v2059 
                let v2061 : string = v2060 + v2057 
                let v2062 : string = "vec![" + v2061 + "]"
                let v2063 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2062 
                let v2064 : string = "leptos::prelude::Fragment::new($0)"
                let v2065 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2063 v2064 
                let v2066 : string = "leptos::prelude::AnyView::from($0)"
                let v2067 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2065 v2066 
                let v2068 : string = "div"
                let v2069 : string = "<" + v2068 + " " + v1919 + ">move || { v2067 }</" + v2068 + ">"
                let v2070 : string = "leptos::prelude::view! { " + v2069 + " }"
                let v2071 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2070 
                let v2072 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2071 |> unbox
                let v2073 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v2074 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2072 v2073 
                v2074
            | US46_0(v196) -> (* Ok *)
                match v196 with
                | US47_0(v197) -> (* Some *)
                    let v198 : string = "$0.to_vec()"
                    let v199 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v197 v198 
                    let v200 : (struct (string * unativeint * Heap5) -> bool) = method199()
                    let v201 : Vec<struct (string * unativeint * Heap5)> = method203(v199)
                    let v202 : string = "v201.into_iter().filter(|x| v200(x.clone().clone())).collect::<Vec<_>>()"
                    let v203 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr () v202 
                    let v204 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v205 : string = ""
                    let v206 : string = " " + v204 + v205 + ""
                    let v207 : string = "Block Timestamp"
                    (* run_target_args'
                    let v208 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v209 : string = "&*$0"
                    let v210 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v207 v209 
                    let _run_target_args'_v208 = v210 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v211 : string = "&*$0"
                    let v212 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v207 v211 
                    let _run_target_args'_v208 = v212 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v213 : string = "&*$0"
                    let v214 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v207 v213 
                    let _run_target_args'_v208 = v214 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v215 : Ref<Str> = v207 |> unbox<Ref<Str>>
                    let _run_target_args'_v208 = v215 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v218 : Ref<Str> = v207 |> unbox<Ref<Str>>
                    let _run_target_args'_v208 = v218 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : Ref<Str> = v207 |> unbox<Ref<Str>>
                    let _run_target_args'_v208 = v221 
                    #endif
#else
                    let v224 : Ref<Str> = v207 |> unbox<Ref<Str>>
                    let _run_target_args'_v208 = v224 
                    #endif
                    let v227 : Ref<Str> = _run_target_args'_v208 
                    (* run_target_args'
                    let v232 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v233 : string = "String::from($0)"
                    let v234 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v233 
                    let _run_target_args'_v232 = v234 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v235 : string = "String::from($0)"
                    let v236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v235 
                    let _run_target_args'_v232 = v236 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v237 : string = "String::from($0)"
                    let v238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v227 v237 
                    let _run_target_args'_v232 = v238 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v239 : std_string_String = v227 |> unbox<std_string_String>
                    let _run_target_args'_v232 = v239 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v242 : std_string_String = v227 |> unbox<std_string_String>
                    let _run_target_args'_v232 = v242 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v245 : std_string_String = v227 |> unbox<std_string_String>
                    let _run_target_args'_v232 = v245 
                    #endif
#else
                    let v248 : std_string_String = v227 |> unbox<std_string_String>
                    let _run_target_args'_v232 = v248 
                    #endif
                    let v251 : std_string_String = _run_target_args'_v232 
                    let v256 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v257 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v251 v256 
                    let v258 : string = "v257"
                    let v259 : string = v258 + v205 
                    let v260 : string = v259 + v205 
                    let v261 : string = "vec![" + v260 + "]"
                    let v262 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v261 
                    let v263 : string = "leptos::prelude::Fragment::new($0)"
                    let v264 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v262 v263 
                    let v265 : string = "leptos::prelude::AnyView::from($0)"
                    let v266 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v264 v265 
                    let v267 : string = "th"
                    let v268 : string = "<" + v267 + " " + v206 + ">move || { v266 }</" + v267 + ">"
                    let v269 : string = "leptos::prelude::view! { " + v268 + " }"
                    let v270 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v269 
                    let v271 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v270 |> unbox
                    let v272 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v273 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v271 v272 
                    let v274 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v275 : string = " " + v274 + v205 + ""
                    let v276 : string = "Predecessor"
                    (* run_target_args'
                    let v277 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v278 : string = "&*$0"
                    let v279 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v276 v278 
                    let _run_target_args'_v277 = v279 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v280 : string = "&*$0"
                    let v281 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v276 v280 
                    let _run_target_args'_v277 = v281 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v282 : string = "&*$0"
                    let v283 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v276 v282 
                    let _run_target_args'_v277 = v283 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v284 : Ref<Str> = v276 |> unbox<Ref<Str>>
                    let _run_target_args'_v277 = v284 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v287 : Ref<Str> = v276 |> unbox<Ref<Str>>
                    let _run_target_args'_v277 = v287 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v290 : Ref<Str> = v276 |> unbox<Ref<Str>>
                    let _run_target_args'_v277 = v290 
                    #endif
#else
                    let v293 : Ref<Str> = v276 |> unbox<Ref<Str>>
                    let _run_target_args'_v277 = v293 
                    #endif
                    let v296 : Ref<Str> = _run_target_args'_v277 
                    (* run_target_args'
                    let v301 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v302 : string = "String::from($0)"
                    let v303 : std_string_String = Fable.Core.RustInterop.emitRustExpr v296 v302 
                    let _run_target_args'_v301 = v303 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v304 : string = "String::from($0)"
                    let v305 : std_string_String = Fable.Core.RustInterop.emitRustExpr v296 v304 
                    let _run_target_args'_v301 = v305 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v306 : string = "String::from($0)"
                    let v307 : std_string_String = Fable.Core.RustInterop.emitRustExpr v296 v306 
                    let _run_target_args'_v301 = v307 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v308 : std_string_String = v296 |> unbox<std_string_String>
                    let _run_target_args'_v301 = v308 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v311 : std_string_String = v296 |> unbox<std_string_String>
                    let _run_target_args'_v301 = v311 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v314 : std_string_String = v296 |> unbox<std_string_String>
                    let _run_target_args'_v301 = v314 
                    #endif
#else
                    let v317 : std_string_String = v296 |> unbox<std_string_String>
                    let _run_target_args'_v301 = v317 
                    #endif
                    let v320 : std_string_String = _run_target_args'_v301 
                    let v325 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v326 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v320 v325 
                    let v327 : string = "v326"
                    let v328 : string = v327 + v205 
                    let v329 : string = v328 + v205 
                    let v330 : string = "vec![" + v329 + "]"
                    let v331 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v330 
                    let v332 : string = "leptos::prelude::Fragment::new($0)"
                    let v333 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v331 v332 
                    let v334 : string = "leptos::prelude::AnyView::from($0)"
                    let v335 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v333 v334 
                    let v336 : string = "<" + v267 + " " + v275 + ">move || { v335 }</" + v267 + ">"
                    let v337 : string = "leptos::prelude::view! { " + v336 + " }"
                    let v338 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v337 
                    let v339 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v338 |> unbox
                    let v340 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v341 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v339 v340 
                    let v342 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v343 : string = " " + v342 + v205 + ""
                    let v344 : string = "Receiver"
                    (* run_target_args'
                    let v345 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v346 : string = "&*$0"
                    let v347 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v344 v346 
                    let _run_target_args'_v345 = v347 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v348 : string = "&*$0"
                    let v349 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v344 v348 
                    let _run_target_args'_v345 = v349 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v350 : string = "&*$0"
                    let v351 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v344 v350 
                    let _run_target_args'_v345 = v351 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v352 : Ref<Str> = v344 |> unbox<Ref<Str>>
                    let _run_target_args'_v345 = v352 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v355 : Ref<Str> = v344 |> unbox<Ref<Str>>
                    let _run_target_args'_v345 = v355 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v358 : Ref<Str> = v344 |> unbox<Ref<Str>>
                    let _run_target_args'_v345 = v358 
                    #endif
#else
                    let v361 : Ref<Str> = v344 |> unbox<Ref<Str>>
                    let _run_target_args'_v345 = v361 
                    #endif
                    let v364 : Ref<Str> = _run_target_args'_v345 
                    (* run_target_args'
                    let v369 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v370 : string = "String::from($0)"
                    let v371 : std_string_String = Fable.Core.RustInterop.emitRustExpr v364 v370 
                    let _run_target_args'_v369 = v371 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v372 : string = "String::from($0)"
                    let v373 : std_string_String = Fable.Core.RustInterop.emitRustExpr v364 v372 
                    let _run_target_args'_v369 = v373 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v374 : string = "String::from($0)"
                    let v375 : std_string_String = Fable.Core.RustInterop.emitRustExpr v364 v374 
                    let _run_target_args'_v369 = v375 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v376 : std_string_String = v364 |> unbox<std_string_String>
                    let _run_target_args'_v369 = v376 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v379 : std_string_String = v364 |> unbox<std_string_String>
                    let _run_target_args'_v369 = v379 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v382 : std_string_String = v364 |> unbox<std_string_String>
                    let _run_target_args'_v369 = v382 
                    #endif
#else
                    let v385 : std_string_String = v364 |> unbox<std_string_String>
                    let _run_target_args'_v369 = v385 
                    #endif
                    let v388 : std_string_String = _run_target_args'_v369 
                    let v393 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v394 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v388 v393 
                    let v395 : string = "v394"
                    let v396 : string = v395 + v205 
                    let v397 : string = v396 + v205 
                    let v398 : string = "vec![" + v397 + "]"
                    let v399 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v398 
                    let v400 : string = "leptos::prelude::Fragment::new($0)"
                    let v401 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v399 v400 
                    let v402 : string = "leptos::prelude::AnyView::from($0)"
                    let v403 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v401 v402 
                    let v404 : string = "<" + v267 + " " + v343 + ">move || { v403 }</" + v267 + ">"
                    let v405 : string = "leptos::prelude::view! { " + v404 + " }"
                    let v406 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v405 
                    let v407 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v406 |> unbox
                    let v408 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v409 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v407 v408 
                    let v410 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v411 : string = " " + v410 + v205 + ""
                    let v412 : string = "Fee"
                    (* run_target_args'
                    let v413 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v414 : string = "&*$0"
                    let v415 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v412 v414 
                    let _run_target_args'_v413 = v415 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v416 : string = "&*$0"
                    let v417 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v412 v416 
                    let _run_target_args'_v413 = v417 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v418 : string = "&*$0"
                    let v419 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v412 v418 
                    let _run_target_args'_v413 = v419 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v420 : Ref<Str> = v412 |> unbox<Ref<Str>>
                    let _run_target_args'_v413 = v420 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v423 : Ref<Str> = v412 |> unbox<Ref<Str>>
                    let _run_target_args'_v413 = v423 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v426 : Ref<Str> = v412 |> unbox<Ref<Str>>
                    let _run_target_args'_v413 = v426 
                    #endif
#else
                    let v429 : Ref<Str> = v412 |> unbox<Ref<Str>>
                    let _run_target_args'_v413 = v429 
                    #endif
                    let v432 : Ref<Str> = _run_target_args'_v413 
                    (* run_target_args'
                    let v437 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v438 : string = "String::from($0)"
                    let v439 : std_string_String = Fable.Core.RustInterop.emitRustExpr v432 v438 
                    let _run_target_args'_v437 = v439 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v440 : string = "String::from($0)"
                    let v441 : std_string_String = Fable.Core.RustInterop.emitRustExpr v432 v440 
                    let _run_target_args'_v437 = v441 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v442 : string = "String::from($0)"
                    let v443 : std_string_String = Fable.Core.RustInterop.emitRustExpr v432 v442 
                    let _run_target_args'_v437 = v443 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v444 : std_string_String = v432 |> unbox<std_string_String>
                    let _run_target_args'_v437 = v444 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v447 : std_string_String = v432 |> unbox<std_string_String>
                    let _run_target_args'_v437 = v447 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v450 : std_string_String = v432 |> unbox<std_string_String>
                    let _run_target_args'_v437 = v450 
                    #endif
#else
                    let v453 : std_string_String = v432 |> unbox<std_string_String>
                    let _run_target_args'_v437 = v453 
                    #endif
                    let v456 : std_string_String = _run_target_args'_v437 
                    let v461 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v462 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v456 v461 
                    let v463 : string = "v462"
                    let v464 : string = v463 + v205 
                    let v465 : string = v464 + v205 
                    let v466 : string = "vec![" + v465 + "]"
                    let v467 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v466 
                    let v468 : string = "leptos::prelude::Fragment::new($0)"
                    let v469 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v467 v468 
                    let v470 : string = "leptos::prelude::AnyView::from($0)"
                    let v471 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v469 v470 
                    let v472 : string = "<" + v267 + " " + v411 + ">move || { v471 }</" + v267 + ">"
                    let v473 : string = "leptos::prelude::view! { " + v472 + " }"
                    let v474 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v473 
                    let v475 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v474 |> unbox
                    let v476 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v477 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v475 v476 
                    let v478 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v479 : string = " " + v478 + v205 + ""
                    let v480 : string = "Result"
                    (* run_target_args'
                    let v481 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v482 : string = "&*$0"
                    let v483 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v480 v482 
                    let _run_target_args'_v481 = v483 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v484 : string = "&*$0"
                    let v485 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v480 v484 
                    let _run_target_args'_v481 = v485 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v486 : string = "&*$0"
                    let v487 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v480 v486 
                    let _run_target_args'_v481 = v487 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v488 : Ref<Str> = v480 |> unbox<Ref<Str>>
                    let _run_target_args'_v481 = v488 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v491 : Ref<Str> = v480 |> unbox<Ref<Str>>
                    let _run_target_args'_v481 = v491 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v494 : Ref<Str> = v480 |> unbox<Ref<Str>>
                    let _run_target_args'_v481 = v494 
                    #endif
#else
                    let v497 : Ref<Str> = v480 |> unbox<Ref<Str>>
                    let _run_target_args'_v481 = v497 
                    #endif
                    let v500 : Ref<Str> = _run_target_args'_v481 
                    (* run_target_args'
                    let v505 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v506 : string = "String::from($0)"
                    let v507 : std_string_String = Fable.Core.RustInterop.emitRustExpr v500 v506 
                    let _run_target_args'_v505 = v507 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v508 : string = "String::from($0)"
                    let v509 : std_string_String = Fable.Core.RustInterop.emitRustExpr v500 v508 
                    let _run_target_args'_v505 = v509 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v510 : string = "String::from($0)"
                    let v511 : std_string_String = Fable.Core.RustInterop.emitRustExpr v500 v510 
                    let _run_target_args'_v505 = v511 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v512 : std_string_String = v500 |> unbox<std_string_String>
                    let _run_target_args'_v505 = v512 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v515 : std_string_String = v500 |> unbox<std_string_String>
                    let _run_target_args'_v505 = v515 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v518 : std_string_String = v500 |> unbox<std_string_String>
                    let _run_target_args'_v505 = v518 
                    #endif
#else
                    let v521 : std_string_String = v500 |> unbox<std_string_String>
                    let _run_target_args'_v505 = v521 
                    #endif
                    let v524 : std_string_String = _run_target_args'_v505 
                    let v529 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v530 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v524 v529 
                    let v531 : string = "v530"
                    let v532 : string = v531 + v205 
                    let v533 : string = v532 + v205 
                    let v534 : string = "vec![" + v533 + "]"
                    let v535 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v534 
                    let v536 : string = "leptos::prelude::Fragment::new($0)"
                    let v537 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v535 v536 
                    let v538 : string = "leptos::prelude::AnyView::from($0)"
                    let v539 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v537 v538 
                    let v540 : string = "<" + v267 + " " + v479 + ">move || { v539 }</" + v267 + ">"
                    let v541 : string = "leptos::prelude::view! { " + v540 + " }"
                    let v542 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v541 
                    let v543 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v542 |> unbox
                    let v544 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v545 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v543 v544 
                    let v546 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                    let v547 : string = " " + v546 + v205 + ""
                    let v548 : string = "Status"
                    (* run_target_args'
                    let v549 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v550 : string = "&*$0"
                    let v551 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v548 v550 
                    let _run_target_args'_v549 = v551 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v552 : string = "&*$0"
                    let v553 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v548 v552 
                    let _run_target_args'_v549 = v553 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v554 : string = "&*$0"
                    let v555 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v548 v554 
                    let _run_target_args'_v549 = v555 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v556 : Ref<Str> = v548 |> unbox<Ref<Str>>
                    let _run_target_args'_v549 = v556 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v559 : Ref<Str> = v548 |> unbox<Ref<Str>>
                    let _run_target_args'_v549 = v559 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v562 : Ref<Str> = v548 |> unbox<Ref<Str>>
                    let _run_target_args'_v549 = v562 
                    #endif
#else
                    let v565 : Ref<Str> = v548 |> unbox<Ref<Str>>
                    let _run_target_args'_v549 = v565 
                    #endif
                    let v568 : Ref<Str> = _run_target_args'_v549 
                    (* run_target_args'
                    let v573 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v574 : string = "String::from($0)"
                    let v575 : std_string_String = Fable.Core.RustInterop.emitRustExpr v568 v574 
                    let _run_target_args'_v573 = v575 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v576 : string = "String::from($0)"
                    let v577 : std_string_String = Fable.Core.RustInterop.emitRustExpr v568 v576 
                    let _run_target_args'_v573 = v577 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v578 : string = "String::from($0)"
                    let v579 : std_string_String = Fable.Core.RustInterop.emitRustExpr v568 v578 
                    let _run_target_args'_v573 = v579 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v580 : std_string_String = v568 |> unbox<std_string_String>
                    let _run_target_args'_v573 = v580 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v583 : std_string_String = v568 |> unbox<std_string_String>
                    let _run_target_args'_v573 = v583 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v586 : std_string_String = v568 |> unbox<std_string_String>
                    let _run_target_args'_v573 = v586 
                    #endif
#else
                    let v589 : std_string_String = v568 |> unbox<std_string_String>
                    let _run_target_args'_v573 = v589 
                    #endif
                    let v592 : std_string_String = _run_target_args'_v573 
                    let v597 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v598 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v592 v597 
                    let v599 : string = "v598"
                    let v600 : string = v599 + v205 
                    let v601 : string = v600 + v205 
                    let v602 : string = "vec![" + v601 + "]"
                    let v603 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v602 
                    let v604 : string = "leptos::prelude::Fragment::new($0)"
                    let v605 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v603 v604 
                    let v606 : string = "leptos::prelude::AnyView::from($0)"
                    let v607 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v605 v606 
                    let v608 : string = "<" + v267 + " " + v547 + ">move || { v607 }</" + v267 + ">"
                    let v609 : string = "leptos::prelude::view! { " + v608 + " }"
                    let v610 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v609 
                    let v611 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v610 |> unbox
                    let v612 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v613 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v611 v612 
                    let v614 : string = "v613"
                    let v615 : string = v614 + v205 
                    let v616 : string = v615 + v205 
                    let v617 : string = "v545"
                    let v618 : string = ", "
                    let v619 : string = v617 + v618 
                    let v620 : string = v619 + v616 
                    let v621 : string = "v477"
                    let v622 : string = v621 + v618 
                    let v623 : string = v622 + v620 
                    let v624 : string = "v409"
                    let v625 : string = v624 + v618 
                    let v626 : string = v625 + v623 
                    let v627 : string = "v341"
                    let v628 : string = v627 + v618 
                    let v629 : string = v628 + v626 
                    let v630 : string = "v273"
                    let v631 : string = v630 + v618 
                    let v632 : string = v631 + v629 
                    let v633 : string = "vec![" + v632 + "]"
                    let v634 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v633 
                    let v635 : string = "leptos::prelude::Fragment::new($0)"
                    let v636 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v634 v635 
                    let v637 : string = "leptos::prelude::AnyView::from($0)"
                    let v638 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v636 v637 
                    let v639 : string = "tr"
                    let v640 : string = "<" + v639 + " " + v205 + ">move || { v638 }</" + v639 + ">"
                    let v641 : string = "leptos::prelude::view! { " + v640 + " }"
                    let v642 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v641 
                    let v643 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v642 |> unbox
                    let v644 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v645 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v643 v644 
                    let v646 : string = "v645"
                    let v647 : string = v646 + v205 
                    let v648 : string = v647 + v205 
                    let v649 : string = "vec![" + v648 + "]"
                    let v650 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v649 
                    let v651 : string = "leptos::prelude::Fragment::new($0)"
                    let v652 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v650 v651 
                    let v653 : string = $"leptos::prelude::ArcMemo::get(&$0)"
                    let v654 : Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v0 v653 
                    let v655 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                    let v656 : bool = Fable.Core.RustInterop.emitRustExpr v203 v655 
                    let v657 : string = "x"
                    let struct (v658 : string, v659 : unativeint, v660 : Heap5) = Fable.Core.RustInterop.emitRustExpr () v657 
                    let v661 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                    let v662 : (Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> []) = Fable.Core.RustInterop.emitRustExpr v654 v661 
                    let v663 : int32 = v659 |> int32 
                    let v670 : Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String> = v662.[int v663]
                    let v673 : string = "class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\""
                    let v674 : string = " " + v673 + v205 + ""
                    let v675 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v676 : string = " " + v675 + v205 + ""
                    let v677 : std_string_String = v660.l5
                    let v678 : string = "fable_library_rust::String_::fromString($0)"
                    let v679 : string = Fable.Core.RustInterop.emitRustExpr v677 v678 
                    let v680 : (string -> int64) = int64
                    let v681 : int64 = v680 v679
                    let v684 : int64 = method204(v681)
                    let v685 : int64 = v684 / 1000L
                    let v686 : string = "chrono::DateTime::from_timestamp_micros($0)"
                    let v687 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v685 v686 
                    let v688 : (chrono_DateTime<chrono_Utc> -> US68) = method205()
                    let v689 : US68 option = v687 |> Option.map v688 
                    let v700 : US68 = US68_1
                    let v701 : US68 = v689 |> Option.defaultValue v700 
                    let v720 : US31 =
                        match v701 with
                        | US68_1 -> (* None *)
                            US31_1
                        | US68_0(v705) -> (* Some *)
                            let v706 : string = "$0.naive_utc()"
                            let v707 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v705 v706 
                            let v708 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
                            let v709 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v707 v708 
                            let v710 : string = "%Y-%m-%d %H:%M:%S"
                            let v711 : string = "r#\"" + v710 + "\"#"
                            let v712 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v711 
                            let v713 : string = "$0.format($1).to_string()"
                            let v714 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v709, v712) v713 
                            let v715 : string = "fable_library_rust::String_::fromString($0)"
                            let v716 : string = Fable.Core.RustInterop.emitRustExpr v714 v715 
                            US31_0(v716)
                    let v726 : US69 =
                        match v720 with
                        | US31_1 -> (* None *)
                            let v723 : string = "resultm.from_option / Option does not have a value."
                            US69_1(v723)
                        | US31_0(v721) -> (* Some *)
                            US69_0(v721)
                    let v731 : string =
                        match v726 with
                        | US69_1(v728) -> (* Error *)
                            let v729 : string = "sm'.to_string result / Error: " + v728 + ""
                            v729
                        | US69_0(v727) -> (* Ok *)
                            v727
                    (* run_target_args'
                    let v732 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v733 : string = "&*$0"
                    let v734 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v731 v733 
                    let _run_target_args'_v732 = v734 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v735 : string = "&*$0"
                    let v736 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v731 v735 
                    let _run_target_args'_v732 = v736 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v737 : string = "&*$0"
                    let v738 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v731 v737 
                    let _run_target_args'_v732 = v738 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v739 : Ref<Str> = v731 |> unbox<Ref<Str>>
                    let _run_target_args'_v732 = v739 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v742 : Ref<Str> = v731 |> unbox<Ref<Str>>
                    let _run_target_args'_v732 = v742 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v745 : Ref<Str> = v731 |> unbox<Ref<Str>>
                    let _run_target_args'_v732 = v745 
                    #endif
#else
                    let v748 : Ref<Str> = v731 |> unbox<Ref<Str>>
                    let _run_target_args'_v732 = v748 
                    #endif
                    let v751 : Ref<Str> = _run_target_args'_v732 
                    (* run_target_args'
                    let v756 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v757 : string = "String::from($0)"
                    let v758 : std_string_String = Fable.Core.RustInterop.emitRustExpr v751 v757 
                    let _run_target_args'_v756 = v758 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v759 : string = "String::from($0)"
                    let v760 : std_string_String = Fable.Core.RustInterop.emitRustExpr v751 v759 
                    let _run_target_args'_v756 = v760 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v761 : string = "String::from($0)"
                    let v762 : std_string_String = Fable.Core.RustInterop.emitRustExpr v751 v761 
                    let _run_target_args'_v756 = v762 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v763 : std_string_String = v751 |> unbox<std_string_String>
                    let _run_target_args'_v756 = v763 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v766 : std_string_String = v751 |> unbox<std_string_String>
                    let _run_target_args'_v756 = v766 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v769 : std_string_String = v751 |> unbox<std_string_String>
                    let _run_target_args'_v756 = v769 
                    #endif
#else
                    let v772 : std_string_String = v751 |> unbox<std_string_String>
                    let _run_target_args'_v756 = v772 
                    #endif
                    let v775 : std_string_String = _run_target_args'_v756 
                    let v780 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v781 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v775 v780 
                    let v782 : string = "v781"
                    let v783 : string = v782 + v205 
                    let v784 : string = v783 + v205 
                    let v785 : string = "vec![" + v784 + "]"
                    let v786 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v785 
                    let v787 : string = "leptos::prelude::Fragment::new($0)"
                    let v788 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v786 v787 
                    let v789 : string = "leptos::prelude::AnyView::from($0)"
                    let v790 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v788 v789 
                    let v791 : string = "td"
                    let v792 : string = "<" + v791 + " " + v676 + ">move || { v790 }</" + v791 + ">"
                    let v793 : string = "leptos::prelude::view! { " + v792 + " }"
                    let v794 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v793 
                    let v795 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v794 |> unbox
                    let v796 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v797 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v795 v796 
                    let v798 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v799 : string = " " + v798 + v205 + ""
                    let v800 : std_string_String = v660.l1
                    let v801 : string = "fable_library_rust::String_::fromString($0)"
                    let v802 : string = Fable.Core.RustInterop.emitRustExpr v800 v801 
                    (* run_target_args'
                    let v803 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v804 : string = "&*$0"
                    let v805 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v802 v804 
                    let _run_target_args'_v803 = v805 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v806 : string = "&*$0"
                    let v807 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v802 v806 
                    let _run_target_args'_v803 = v807 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v808 : string = "&*$0"
                    let v809 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v802 v808 
                    let _run_target_args'_v803 = v809 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v810 : Ref<Str> = v802 |> unbox<Ref<Str>>
                    let _run_target_args'_v803 = v810 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v813 : Ref<Str> = v802 |> unbox<Ref<Str>>
                    let _run_target_args'_v803 = v813 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v816 : Ref<Str> = v802 |> unbox<Ref<Str>>
                    let _run_target_args'_v803 = v816 
                    #endif
#else
                    let v819 : Ref<Str> = v802 |> unbox<Ref<Str>>
                    let _run_target_args'_v803 = v819 
                    #endif
                    let v822 : Ref<Str> = _run_target_args'_v803 
                    (* run_target_args'
                    let v827 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v828 : string = "String::from($0)"
                    let v829 : std_string_String = Fable.Core.RustInterop.emitRustExpr v822 v828 
                    let _run_target_args'_v827 = v829 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v830 : string = "String::from($0)"
                    let v831 : std_string_String = Fable.Core.RustInterop.emitRustExpr v822 v830 
                    let _run_target_args'_v827 = v831 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v832 : string = "String::from($0)"
                    let v833 : std_string_String = Fable.Core.RustInterop.emitRustExpr v822 v832 
                    let _run_target_args'_v827 = v833 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v834 : std_string_String = v822 |> unbox<std_string_String>
                    let _run_target_args'_v827 = v834 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v837 : std_string_String = v822 |> unbox<std_string_String>
                    let _run_target_args'_v827 = v837 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v840 : std_string_String = v822 |> unbox<std_string_String>
                    let _run_target_args'_v827 = v840 
                    #endif
#else
                    let v843 : std_string_String = v822 |> unbox<std_string_String>
                    let _run_target_args'_v827 = v843 
                    #endif
                    let v846 : std_string_String = _run_target_args'_v827 
                    let v851 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v852 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v846 v851 
                    let v853 : string = "v852"
                    let v854 : string = v853 + v205 
                    let v855 : string = v854 + v205 
                    let v856 : string = "vec![" + v855 + "]"
                    let v857 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v856 
                    let v858 : string = "leptos::prelude::Fragment::new($0)"
                    let v859 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v857 v858 
                    let v860 : string = "leptos::prelude::AnyView::from($0)"
                    let v861 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v859 v860 
                    let v862 : string = "<" + v791 + " " + v799 + ">move || { v861 }</" + v791 + ">"
                    let v863 : string = "leptos::prelude::view! { " + v862 + " }"
                    let v864 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v863 
                    let v865 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v864 |> unbox
                    let v866 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v867 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v865 v866 
                    let v868 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v869 : string = " " + v868 + v205 + ""
                    let v870 : std_string_String = v660.l2
                    let v871 : string = "fable_library_rust::String_::fromString($0)"
                    let v872 : string = Fable.Core.RustInterop.emitRustExpr v870 v871 
                    (* run_target_args'
                    let v873 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v874 : string = "&*$0"
                    let v875 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v872 v874 
                    let _run_target_args'_v873 = v875 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v876 : string = "&*$0"
                    let v877 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v872 v876 
                    let _run_target_args'_v873 = v877 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v878 : string = "&*$0"
                    let v879 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v872 v878 
                    let _run_target_args'_v873 = v879 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v880 : Ref<Str> = v872 |> unbox<Ref<Str>>
                    let _run_target_args'_v873 = v880 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v883 : Ref<Str> = v872 |> unbox<Ref<Str>>
                    let _run_target_args'_v873 = v883 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v886 : Ref<Str> = v872 |> unbox<Ref<Str>>
                    let _run_target_args'_v873 = v886 
                    #endif
#else
                    let v889 : Ref<Str> = v872 |> unbox<Ref<Str>>
                    let _run_target_args'_v873 = v889 
                    #endif
                    let v892 : Ref<Str> = _run_target_args'_v873 
                    (* run_target_args'
                    let v897 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v898 : string = "String::from($0)"
                    let v899 : std_string_String = Fable.Core.RustInterop.emitRustExpr v892 v898 
                    let _run_target_args'_v897 = v899 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v900 : string = "String::from($0)"
                    let v901 : std_string_String = Fable.Core.RustInterop.emitRustExpr v892 v900 
                    let _run_target_args'_v897 = v901 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v902 : string = "String::from($0)"
                    let v903 : std_string_String = Fable.Core.RustInterop.emitRustExpr v892 v902 
                    let _run_target_args'_v897 = v903 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v904 : std_string_String = v892 |> unbox<std_string_String>
                    let _run_target_args'_v897 = v904 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v907 : std_string_String = v892 |> unbox<std_string_String>
                    let _run_target_args'_v897 = v907 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v910 : std_string_String = v892 |> unbox<std_string_String>
                    let _run_target_args'_v897 = v910 
                    #endif
#else
                    let v913 : std_string_String = v892 |> unbox<std_string_String>
                    let _run_target_args'_v897 = v913 
                    #endif
                    let v916 : std_string_String = _run_target_args'_v897 
                    let v921 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v922 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v916 v921 
                    let v923 : string = "v922"
                    let v924 : string = v923 + v205 
                    let v925 : string = v924 + v205 
                    let v926 : string = "vec![" + v925 + "]"
                    let v927 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v926 
                    let v928 : string = "leptos::prelude::Fragment::new($0)"
                    let v929 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v927 v928 
                    let v930 : string = "leptos::prelude::AnyView::from($0)"
                    let v931 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v929 v930 
                    let v932 : string = "<" + v791 + " " + v869 + ">move || { v931 }</" + v791 + ">"
                    let v933 : string = "leptos::prelude::view! { " + v932 + " }"
                    let v934 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v933 
                    let v935 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v934 |> unbox
                    let v936 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v937 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v935 v936 
                    let v938 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v939 : string = " " + v938 + v205 + ""
                    let v940 : float = v660.l10
                    let v941 : (float -> string) = _.ToString()
                    let v942 : string = v941 v940
                    (* run_target_args'
                    let v945 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v946 : string = "&*$0"
                    let v947 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v942 v946 
                    let _run_target_args'_v945 = v947 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v948 : string = "&*$0"
                    let v949 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v942 v948 
                    let _run_target_args'_v945 = v949 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v950 : string = "&*$0"
                    let v951 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v942 v950 
                    let _run_target_args'_v945 = v951 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v952 : Ref<Str> = v942 |> unbox<Ref<Str>>
                    let _run_target_args'_v945 = v952 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v955 : Ref<Str> = v942 |> unbox<Ref<Str>>
                    let _run_target_args'_v945 = v955 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v958 : Ref<Str> = v942 |> unbox<Ref<Str>>
                    let _run_target_args'_v945 = v958 
                    #endif
#else
                    let v961 : Ref<Str> = v942 |> unbox<Ref<Str>>
                    let _run_target_args'_v945 = v961 
                    #endif
                    let v964 : Ref<Str> = _run_target_args'_v945 
                    (* run_target_args'
                    let v969 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v970 : string = "String::from($0)"
                    let v971 : std_string_String = Fable.Core.RustInterop.emitRustExpr v964 v970 
                    let _run_target_args'_v969 = v971 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v972 : string = "String::from($0)"
                    let v973 : std_string_String = Fable.Core.RustInterop.emitRustExpr v964 v972 
                    let _run_target_args'_v969 = v973 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v974 : string = "String::from($0)"
                    let v975 : std_string_String = Fable.Core.RustInterop.emitRustExpr v964 v974 
                    let _run_target_args'_v969 = v975 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v976 : std_string_String = v964 |> unbox<std_string_String>
                    let _run_target_args'_v969 = v976 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v979 : std_string_String = v964 |> unbox<std_string_String>
                    let _run_target_args'_v969 = v979 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v982 : std_string_String = v964 |> unbox<std_string_String>
                    let _run_target_args'_v969 = v982 
                    #endif
#else
                    let v985 : std_string_String = v964 |> unbox<std_string_String>
                    let _run_target_args'_v969 = v985 
                    #endif
                    let v988 : std_string_String = _run_target_args'_v969 
                    let v993 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v994 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v988 v993 
                    let v995 : string = "v994"
                    let v996 : string = v995 + v205 
                    let v997 : string = v996 + v205 
                    let v998 : string = "vec![" + v997 + "]"
                    let v999 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v998 
                    let v1000 : string = "leptos::prelude::Fragment::new($0)"
                    let v1001 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v999 v1000 
                    let v1002 : string = "leptos::prelude::AnyView::from($0)"
                    let v1003 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1001 v1002 
                    let v1004 : string = "<" + v791 + " " + v939 + ">move || { v1003 }</" + v791 + ">"
                    let v1005 : string = "leptos::prelude::view! { " + v1004 + " }"
                    let v1006 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1005 
                    let v1007 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1006 |> unbox
                    let v1008 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1009 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1007 v1008 
                    let v1010 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v1011 : string = " " + v1010 + v205 + ""
                    let v1012 : (std_string_String []) = v660.l11
                    let v1013 : uint64 = System.Convert.ToUInt64 v1012.Length
                    let v1014 : bool = v1013 = 0UL
                    let v1159 : leptos_dom_Fragment =
                        if v1014 then
                            (* run_target_args'
                            let v1015 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1016 : string = "&*$0"
                            let v1017 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v1016 
                            let _run_target_args'_v1015 = v1017 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1018 : string = "&*$0"
                            let v1019 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v1018 
                            let _run_target_args'_v1015 = v1019 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1020 : string = "&*$0"
                            let v1021 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v205 v1020 
                            let _run_target_args'_v1015 = v1021 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1022 : Ref<Str> = v205 |> unbox<Ref<Str>>
                            let _run_target_args'_v1015 = v1022 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v1025 : Ref<Str> = v205 |> unbox<Ref<Str>>
                            let _run_target_args'_v1015 = v1025 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v1028 : Ref<Str> = v205 |> unbox<Ref<Str>>
                            let _run_target_args'_v1015 = v1028 
                            #endif
#else
                            let v1031 : Ref<Str> = v205 |> unbox<Ref<Str>>
                            let _run_target_args'_v1015 = v1031 
                            #endif
                            let v1034 : Ref<Str> = _run_target_args'_v1015 
                            (* run_target_args'
                            let v1039 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1040 : string = "String::from($0)"
                            let v1041 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1034 v1040 
                            let _run_target_args'_v1039 = v1041 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1042 : string = "String::from($0)"
                            let v1043 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1034 v1042 
                            let _run_target_args'_v1039 = v1043 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1044 : string = "String::from($0)"
                            let v1045 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1034 v1044 
                            let _run_target_args'_v1039 = v1045 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1046 : std_string_String = v1034 |> unbox<std_string_String>
                            let _run_target_args'_v1039 = v1046 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v1049 : std_string_String = v1034 |> unbox<std_string_String>
                            let _run_target_args'_v1039 = v1049 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v1052 : std_string_String = v1034 |> unbox<std_string_String>
                            let _run_target_args'_v1039 = v1052 
                            #endif
#else
                            let v1055 : std_string_String = v1034 |> unbox<std_string_String>
                            let _run_target_args'_v1039 = v1055 
                            #endif
                            let v1058 : std_string_String = _run_target_args'_v1039 
                            let v1063 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                            let v1064 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1058 v1063 
                            let v1065 : string = "v1064"
                            let v1066 : string = v1065 + v205 
                            let v1067 : string = v1066 + v205 
                            let v1068 : string = "vec![" + v1067 + "]"
                            let v1069 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1068 
                            let v1070 : string = "leptos::prelude::Fragment::new($0)"
                            let v1071 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1069 v1070 
                            v1071
                        else
                            let v1072 : (std_string_String []) = v660.l11
                            let v1073 : int32 = v1072.Length
                            let v1074 : US31 = US31_1
                            let v1075 : Mut2 = {l0 = 0; l1 = v1074} : Mut2
                            while method206(v1073, v1075) do
                                let v1077 : int32 = v1075.l0
                                let v1078 : int32 =  -v1077
                                let v1079 : int32 = v1078 + v1073
                                let v1080 : int32 = v1079 - 1
                                let v1081 : US31 = v1075.l1
                                let v1082 : std_string_String = v1072.[int v1080]
                                let v1083 : string = "fable_library_rust::String_::fromString($0)"
                                let v1084 : string = Fable.Core.RustInterop.emitRustExpr v1082 v1083 
                                let v1085 : string = " / result: "
                                let v1086 : (string []) = v1084.Split v1085 
                                let v1095 : US31 =
                                    match v1081 with
                                    | US31_1 -> (* None *)
                                        let v1089 : uint64 = System.Convert.ToUInt64 v1086.Length
                                        let v1090 : bool = v1089 = 2UL
                                        if v1090 then
                                            let v1091 : string = v1086.[int 0]
                                            let v1092 : string = v1086.[int 1]
                                            US31_0(v1092)
                                        else
                                            v1081
                                    | _ ->
                                        v1081
                                let v1096 : int32 = v1077 + 1
                                v1075.l0 <- v1096
                                v1075.l1 <- v1095
                                ()
                            let v1097 : US31 = v1075.l1
                            let v1101 : string =
                                match v1097 with
                                | US31_1 -> (* None *)
                                    let v1099 : string = "?"
                                    v1099
                                | US31_0(v1098) -> (* Some *)
                                    v1098
                            (* run_target_args'
                            let v1102 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1103 : string = "&*$0"
                            let v1104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1101 v1103 
                            let _run_target_args'_v1102 = v1104 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1105 : string = "&*$0"
                            let v1106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1101 v1105 
                            let _run_target_args'_v1102 = v1106 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1107 : string = "&*$0"
                            let v1108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1101 v1107 
                            let _run_target_args'_v1102 = v1108 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1109 : Ref<Str> = v1101 |> unbox<Ref<Str>>
                            let _run_target_args'_v1102 = v1109 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v1112 : Ref<Str> = v1101 |> unbox<Ref<Str>>
                            let _run_target_args'_v1102 = v1112 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v1115 : Ref<Str> = v1101 |> unbox<Ref<Str>>
                            let _run_target_args'_v1102 = v1115 
                            #endif
#else
                            let v1118 : Ref<Str> = v1101 |> unbox<Ref<Str>>
                            let _run_target_args'_v1102 = v1118 
                            #endif
                            let v1121 : Ref<Str> = _run_target_args'_v1102 
                            (* run_target_args'
                            let v1126 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v1127 : string = "String::from($0)"
                            let v1128 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1121 v1127 
                            let _run_target_args'_v1126 = v1128 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v1129 : string = "String::from($0)"
                            let v1130 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1121 v1129 
                            let _run_target_args'_v1126 = v1130 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v1131 : string = "String::from($0)"
                            let v1132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1121 v1131 
                            let _run_target_args'_v1126 = v1132 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v1133 : std_string_String = v1121 |> unbox<std_string_String>
                            let _run_target_args'_v1126 = v1133 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v1136 : std_string_String = v1121 |> unbox<std_string_String>
                            let _run_target_args'_v1126 = v1136 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v1139 : std_string_String = v1121 |> unbox<std_string_String>
                            let _run_target_args'_v1126 = v1139 
                            #endif
#else
                            let v1142 : std_string_String = v1121 |> unbox<std_string_String>
                            let _run_target_args'_v1126 = v1142 
                            #endif
                            let v1145 : std_string_String = _run_target_args'_v1126 
                            let v1150 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                            let v1151 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1145 v1150 
                            let v1152 : string = "v1151"
                            let v1153 : string = v1152 + v205 
                            let v1154 : string = v1153 + v205 
                            let v1155 : string = "vec![" + v1154 + "]"
                            let v1156 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1155 
                            let v1157 : string = "leptos::prelude::Fragment::new($0)"
                            let v1158 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1156 v1157 
                            v1158
                    let v1160 : string = "leptos::prelude::AnyView::from($0)"
                    let v1161 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1159 v1160 
                    let v1162 : string = "<" + v791 + " " + v1011 + ">move || { v1161 }</" + v791 + ">"
                    let v1163 : string = "leptos::prelude::view! { " + v1162 + " }"
                    let v1164 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1163 
                    let v1165 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1164 |> unbox
                    let v1166 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1167 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1165 v1166 
                    let v1168 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                    let v1169 : string = " " + v1168 + v205 + ""
                    let v1170 : bool = v660.l9
                    let v1173 : string =
                        if v1170 then
                            let v1171 : string = "Ok"
                            v1171
                        else
                            let v1172 : string = "Outcome Error"
                            v1172
                    let v1174 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option -> US63) = method177()
                    let v1175 : (std_string_String -> US63) = method178()
                    let v1176 : US63 = match v670 with Ok x -> v1174 x | Error x -> v1175 x
                    let v1202 : US58 =
                        match v1176 with
                        | US63_1(v1199) -> (* Error *)
                            US58_1(v1199)
                        | US63_0(v1177) -> (* Ok *)
                            let v1178 : (struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) -> US59) = method179()
                            let v1179 : US59 option = v1177 |> Option.map v1178 
                            let v1193 : US59 = US59_1
                            let v1194 : US59 = v1179 |> Option.defaultValue v1193 
                            US58_0(v1194)
                    let v1298 : US69 =
                        match v1202 with
                        | US58_1(v1293) -> (* Error *)
                            let v1294 : string = "fable_library_rust::String_::fromString($0)"
                            let v1295 : string = Fable.Core.RustInterop.emitRustExpr v1293 v1294 
                            US69_1(v1295)
                        | US58_0(v1203) -> (* Ok *)
                            match v1203 with
                            | US59_0(v1204, v1205, v1206, v1207) -> (* Some *)
                                let v1208 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US64) = method180()
                                let v1209 : US64 option = v1206 |> Option.map v1208 
                                let v1225 : US64 = US64_1
                                let v1226 : US64 = v1209 |> Option.defaultValue v1225 
                                match v1226 with
                                | US64_1 -> (* None *)
                                    let v1277 : string = $"%A{struct (v1204, v1205, v1206, v1207)}"
                                    let v1280 : int64 = 400L
                                    let v1281 : string = method8(v1280, v1277)
                                    US69_0(v1281)
                                | US64_0(v1230, v1231, v1232, v1233, v1234, v1235) -> (* Some *)
                                    let v1236 : (struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) -> US64) = method180()
                                    let v1237 : US64 option = v1206 |> Option.map v1236 
                                    let v1253 : US64 = US64_1
                                    let v1254 : US64 = v1237 |> Option.defaultValue v1253 
                                    let v1267 : US31 =
                                        match v1254 with
                                        | US64_0(v1258, v1259, v1260, v1261, v1262, v1263) -> (* Some *)
                                            let v1264 : string = string v1258 + ": " + string v1262 + " - " + string v1263 + " (" + string v1259 + ")"
                                            US31_0(v1264)
                                        | _ ->
                                            US31_1
                                    let v1275 : string =
                                        match v1267 with
                                        | US31_1 -> (* None *)
                                            let v1269 : string = $"%A{()}"
                                            let v1272 : int64 = 400L
                                            method8(v1272, v1269)
                                        | US31_0(v1268) -> (* Some *)
                                            v1268
                                    US69_1(v1275)
                            | _ ->
                                let v1285 : string = $"%A{v1202}"
                                let v1288 : int64 = 400L
                                let v1289 : string = method8(v1288, v1285)
                                let v1290 : string = $"RPC Response: {v1289}"
                                US69_1(v1290)
                    let v1309 : string =
                        match v1298 with
                        | US69_1(v1306) -> (* Error *)
                            let v1307 : string = $"Error: {v1306}"
                            v1307
                        | US69_0(v1299) -> (* Ok *)
                            let v1300 : string = $"%A{v1299}"
                            let v1303 : int64 = 400L
                            let v1304 : string = method8(v1303, v1300)
                            let v1305 : string = $"RPC Response: {v1304}"
                            v1305
                    let v1310 : string = $"{v1173} / {v1309}"
                    (* run_target_args'
                    let v1311 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1312 : string = "&*$0"
                    let v1313 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1310 v1312 
                    let _run_target_args'_v1311 = v1313 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1314 : string = "&*$0"
                    let v1315 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1310 v1314 
                    let _run_target_args'_v1311 = v1315 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1316 : string = "&*$0"
                    let v1317 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1310 v1316 
                    let _run_target_args'_v1311 = v1317 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1318 : Ref<Str> = v1310 |> unbox<Ref<Str>>
                    let _run_target_args'_v1311 = v1318 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1321 : Ref<Str> = v1310 |> unbox<Ref<Str>>
                    let _run_target_args'_v1311 = v1321 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1324 : Ref<Str> = v1310 |> unbox<Ref<Str>>
                    let _run_target_args'_v1311 = v1324 
                    #endif
#else
                    let v1327 : Ref<Str> = v1310 |> unbox<Ref<Str>>
                    let _run_target_args'_v1311 = v1327 
                    #endif
                    let v1330 : Ref<Str> = _run_target_args'_v1311 
                    (* run_target_args'
                    let v1335 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1336 : string = "String::from($0)"
                    let v1337 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1330 v1336 
                    let _run_target_args'_v1335 = v1337 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1338 : string = "String::from($0)"
                    let v1339 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1330 v1338 
                    let _run_target_args'_v1335 = v1339 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1340 : string = "String::from($0)"
                    let v1341 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1330 v1340 
                    let _run_target_args'_v1335 = v1341 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1342 : std_string_String = v1330 |> unbox<std_string_String>
                    let _run_target_args'_v1335 = v1342 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1345 : std_string_String = v1330 |> unbox<std_string_String>
                    let _run_target_args'_v1335 = v1345 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1348 : std_string_String = v1330 |> unbox<std_string_String>
                    let _run_target_args'_v1335 = v1348 
                    #endif
#else
                    let v1351 : std_string_String = v1330 |> unbox<std_string_String>
                    let _run_target_args'_v1335 = v1351 
                    #endif
                    let v1354 : std_string_String = _run_target_args'_v1335 
                    let v1359 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v1360 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1354 v1359 
                    let v1361 : string = "v1360"
                    let v1362 : string = v1361 + v205 
                    let v1363 : string = v1362 + v205 
                    let v1364 : string = "vec![" + v1363 + "]"
                    let v1365 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1364 
                    let v1366 : string = "leptos::prelude::Fragment::new($0)"
                    let v1367 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1365 v1366 
                    let v1368 : string = "leptos::prelude::AnyView::from($0)"
                    let v1369 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1367 v1368 
                    let v1370 : string = "<" + v791 + " " + v1169 + ">move || { v1369 }</" + v791 + ">"
                    let v1371 : string = "leptos::prelude::view! { " + v1370 + " }"
                    let v1372 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1371 
                    let v1373 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1372 |> unbox
                    let v1374 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1375 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1373 v1374 
                    let v1376 : string = "v1375"
                    let v1377 : string = v1376 + v205 
                    let v1378 : string = v1377 + v205 
                    let v1379 : string = "v1167"
                    let v1380 : string = v1379 + v618 
                    let v1381 : string = v1380 + v1378 
                    let v1382 : string = "v1009"
                    let v1383 : string = v1382 + v618 
                    let v1384 : string = v1383 + v1381 
                    let v1385 : string = "v937"
                    let v1386 : string = v1385 + v618 
                    let v1387 : string = v1386 + v1384 
                    let v1388 : string = "v867"
                    let v1389 : string = v1388 + v618 
                    let v1390 : string = v1389 + v1387 
                    let v1391 : string = "v797"
                    let v1392 : string = v1391 + v618 
                    let v1393 : string = v1392 + v1390 
                    let v1394 : string = "vec![" + v1393 + "]"
                    let v1395 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1394 
                    let v1396 : string = "leptos::prelude::Fragment::new($0)"
                    let v1397 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1395 v1396 
                    let v1398 : string = "leptos::prelude::AnyView::from($0)"
                    let v1399 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1397 v1398 
                    let v1400 : string = "<" + v639 + " " + v674 + ">move || { v1399 }</" + v639 + ">"
                    let v1401 : string = "leptos::prelude::view! { " + v1400 + " }"
                    let v1402 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1401 
                    let v1403 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v1402 |> unbox
                    let v1404 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1405 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1403 v1404 
                    let v1406 : string = "true; $0 }).collect::<Vec<_>>()"
                    let v1407 : bool = Fable.Core.RustInterop.emitRustExpr v1405 v1406 
                    let v1408 : string = "_vec_map"
                    let v1409 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1408 
                    let v1410 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1411 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1409 v1410 
                    let v1412 : string = "v1411"
                    let v1413 : string = v1412 + v205 
                    let v1414 : string = v1413 + v205 
                    let v1415 : string = "vec![" + v1414 + "]"
                    let v1416 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1415 
                    let v1417 : string = "leptos::prelude::Fragment::new($0)"
                    let v1418 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1416 v1417 
                    let v1419 : string = "class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\""
                    let v1420 : string = " " + v1419 + v205 + ""
                    let v1421 : string = "class=\"ltr:text-left rtl:text-right\""
                    let v1422 : string = " " + v1421 + v205 + ""
                    let v1423 : string = "leptos::prelude::AnyView::from($0)"
                    let v1424 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v652 v1423 
                    let v1425 : string = "thead"
                    let v1426 : string = "<" + v1425 + " " + v1422 + ">move || { v1424 }</" + v1425 + ">"
                    let v1427 : string = "leptos::prelude::view! { " + v1426 + " }"
                    let v1428 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1427 
                    let v1429 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Thead>> = v1428 |> unbox
                    let v1430 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1431 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1429 v1430 
                    let v1432 : string = "class=\"divide-y divide-gray-200 dark:divide-gray-700\""
                    let v1433 : string = " " + v1432 + v205 + ""
                    let v1434 : string = "leptos::prelude::AnyView::from($0)"
                    let v1435 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1418 v1434 
                    let v1436 : string = "tbody"
                    let v1437 : string = "<" + v1436 + " " + v1433 + ">move || { v1435 }</" + v1436 + ">"
                    let v1438 : string = "leptos::prelude::view! { " + v1437 + " }"
                    let v1439 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1438 
                    let v1440 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tbody>> = v1439 |> unbox
                    let v1441 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1442 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1440 v1441 
                    let v1443 : string = "v1442"
                    let v1444 : string = v1443 + v205 
                    let v1445 : string = v1444 + v205 
                    let v1446 : string = "v1431"
                    let v1447 : string = v1446 + v618 
                    let v1448 : string = v1447 + v1445 
                    let v1449 : string = "vec![" + v1448 + "]"
                    let v1450 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1449 
                    let v1451 : string = "leptos::prelude::Fragment::new($0)"
                    let v1452 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1450 v1451 
                    let v1453 : string = "leptos::prelude::AnyView::from($0)"
                    let v1454 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1452 v1453 
                    let v1455 : string = "table"
                    let v1456 : string = "<" + v1455 + " " + v1420 + ">move || { v1454 }</" + v1455 + ">"
                    let v1457 : string = "leptos::prelude::view! { " + v1456 + " }"
                    let v1458 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1457 
                    let v1459 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Table>> = v1458 |> unbox
                    let v1460 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1461 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1459 v1460 
                    v1461
                | _ ->
                    let v1462 : string = "class=\"grid place-content-center py-[10vh]\""
                    let v1463 : string = ""
                    let v1464 : string = " " + v1462 + v1463 + ""
                    let v1465 : string = "class=\"flex flex-1 [gap:4px] items-center\""
                    let v1466 : string = " " + v1465 + v1463 + ""
                    let v1467 : string = "$0"
                    let v1468 : (unit -> string) = closure191()
                    let v1469 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1468 v1467 
                    let v1470 : string = "version=\"1.1\""
                    let v1471 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                    let v1472 : string = "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
                    let v1473 : string = "x=\"0px\""
                    let v1474 : string = "y=\"0px\""
                    let v1475 : string = "viewBox=\"0 0 24 30\""
                    let v1476 : string = "style=\"enable-background:new 0 0 50 50;\""
                    let v1477 : string = "xml:space=\"preserve\""
                    let v1478 : string = "class=move || \" \".to_owned() + &v1469(())"
                    let v1479 : string = " " + v1470 + v1463 + ""
                    let v1480 : string = " " + v1471 + v1479 + ""
                    let v1481 : string = " " + v1472 + v1480 + ""
                    let v1482 : string = " " + v1473 + v1481 + ""
                    let v1483 : string = " " + v1474 + v1482 + ""
                    let v1484 : string = " " + v1475 + v1483 + ""
                    let v1485 : string = " " + v1476 + v1484 + ""
                    let v1486 : string = " " + v1477 + v1485 + ""
                    let v1487 : string = " " + v1478 + v1486 + ""
                    let v1488 : string = "x=\"0\""
                    let v1489 : string = "y=\"10\""
                    let v1490 : string = "width=\"4\""
                    let v1491 : string = "height=\"10\""
                    let v1492 : string = "fill=\"#333\""
                    let v1493 : string = "opacity=\"0.2\""
                    let v1494 : string = " " + v1488 + v1463 + ""
                    let v1495 : string = " " + v1489 + v1494 + ""
                    let v1496 : string = " " + v1490 + v1495 + ""
                    let v1497 : string = " " + v1491 + v1496 + ""
                    let v1498 : string = " " + v1492 + v1497 + ""
                    let v1499 : string = " " + v1493 + v1498 + ""
                    let v1500 : string = "attributeName=\"opacity\""
                    let v1501 : string = "attributeType=\"XML\""
                    let v1502 : string = "values=\"0.2; 1; .2\""
                    let v1503 : string = "begin=\"0s\""
                    let v1504 : string = "dur=\"0.6s\""
                    let v1505 : string = "repeatCount=\"indefinite\""
                    let v1506 : string = " " + v1500 + v1463 + ""
                    let v1507 : string = " " + v1501 + v1506 + ""
                    let v1508 : string = " " + v1502 + v1507 + ""
                    let v1509 : string = " " + v1503 + v1508 + ""
                    let v1510 : string = " " + v1504 + v1509 + ""
                    let v1511 : string = " " + v1505 + v1510 + ""
                    let v1512 : string = "vec![" + v1463 + "]"
                    let v1513 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1512 
                    let v1514 : string = "leptos::prelude::Fragment::new($0)"
                    let v1515 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1513 v1514 
                    let v1516 : string = "leptos::prelude::AnyView::from($0)"
                    let v1517 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1515 v1516 
                    let v1518 : string = "animate"
                    let v1519 : string = "<" + v1518 + " " + v1511 + ">move || { v1517 }</" + v1518 + ">"
                    let v1520 : string = "leptos::prelude::view! { " + v1519 + " }"
                    let v1521 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1520 
                    let v1522 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1521 |> unbox
                    let v1523 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1524 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1522 v1523 
                    let v1525 : string = "attributeName=\"height\""
                    let v1526 : string = "attributeType=\"XML\""
                    let v1527 : string = "values=\"10; 20; 10\""
                    let v1528 : string = "begin=\"0s\""
                    let v1529 : string = "dur=\"0.6s\""
                    let v1530 : string = "repeatCount=\"indefinite\""
                    let v1531 : string = " " + v1525 + v1463 + ""
                    let v1532 : string = " " + v1526 + v1531 + ""
                    let v1533 : string = " " + v1527 + v1532 + ""
                    let v1534 : string = " " + v1528 + v1533 + ""
                    let v1535 : string = " " + v1529 + v1534 + ""
                    let v1536 : string = " " + v1530 + v1535 + ""
                    let v1537 : string = "vec![" + v1463 + "]"
                    let v1538 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1537 
                    let v1539 : string = "leptos::prelude::Fragment::new($0)"
                    let v1540 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1538 v1539 
                    let v1541 : string = "leptos::prelude::AnyView::from($0)"
                    let v1542 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1540 v1541 
                    let v1543 : string = "<" + v1518 + " " + v1536 + ">move || { v1542 }</" + v1518 + ">"
                    let v1544 : string = "leptos::prelude::view! { " + v1543 + " }"
                    let v1545 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1544 
                    let v1546 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1545 |> unbox
                    let v1547 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1548 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1546 v1547 
                    let v1549 : string = "attributeName=\"y\""
                    let v1550 : string = "attributeType=\"XML\""
                    let v1551 : string = "values=\"10; 5; 10\""
                    let v1552 : string = "begin=\"0s\""
                    let v1553 : string = "dur=\"0.6s\""
                    let v1554 : string = "repeatCount=\"indefinite\""
                    let v1555 : string = " " + v1549 + v1463 + ""
                    let v1556 : string = " " + v1550 + v1555 + ""
                    let v1557 : string = " " + v1551 + v1556 + ""
                    let v1558 : string = " " + v1552 + v1557 + ""
                    let v1559 : string = " " + v1553 + v1558 + ""
                    let v1560 : string = " " + v1554 + v1559 + ""
                    let v1561 : string = "vec![" + v1463 + "]"
                    let v1562 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1561 
                    let v1563 : string = "leptos::prelude::Fragment::new($0)"
                    let v1564 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1562 v1563 
                    let v1565 : string = "leptos::prelude::AnyView::from($0)"
                    let v1566 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1564 v1565 
                    let v1567 : string = "<" + v1518 + " " + v1560 + ">move || { v1566 }</" + v1518 + ">"
                    let v1568 : string = "leptos::prelude::view! { " + v1567 + " }"
                    let v1569 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1568 
                    let v1570 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1569 |> unbox
                    let v1571 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1572 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1570 v1571 
                    let v1573 : string = "v1572"
                    let v1574 : string = v1573 + v1463 
                    let v1575 : string = v1574 + v1463 
                    let v1576 : string = "v1548"
                    let v1577 : string = ", "
                    let v1578 : string = v1576 + v1577 
                    let v1579 : string = v1578 + v1575 
                    let v1580 : string = "v1524"
                    let v1581 : string = v1580 + v1577 
                    let v1582 : string = v1581 + v1579 
                    let v1583 : string = "vec![" + v1582 + "]"
                    let v1584 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1583 
                    let v1585 : string = "leptos::prelude::Fragment::new($0)"
                    let v1586 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1584 v1585 
                    let v1587 : string = "leptos::prelude::AnyView::from($0)"
                    let v1588 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1586 v1587 
                    let v1589 : string = "rect"
                    let v1590 : string = "<" + v1589 + " " + v1499 + ">move || { v1588 }</" + v1589 + ">"
                    let v1591 : string = "leptos::prelude::view! { " + v1590 + " }"
                    let v1592 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1591 
                    let v1593 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v1592 |> unbox
                    let v1594 : string = "x=\"8\""
                    let v1595 : string = "y=\"10\""
                    let v1596 : string = "width=\"4\""
                    let v1597 : string = "height=\"10\""
                    let v1598 : string = "fill=\"#333\""
                    let v1599 : string = "opacity=\"0.2\""
                    let v1600 : string = " " + v1594 + v1463 + ""
                    let v1601 : string = " " + v1595 + v1600 + ""
                    let v1602 : string = " " + v1596 + v1601 + ""
                    let v1603 : string = " " + v1597 + v1602 + ""
                    let v1604 : string = " " + v1598 + v1603 + ""
                    let v1605 : string = " " + v1599 + v1604 + ""
                    let v1606 : string = "attributeName=\"opacity\""
                    let v1607 : string = "attributeType=\"XML\""
                    let v1608 : string = "values=\"0.2; 1; .2\""
                    let v1609 : string = "begin=\"0.15s\""
                    let v1610 : string = "dur=\"0.6s\""
                    let v1611 : string = "repeatCount=\"indefinite\""
                    let v1612 : string = " " + v1606 + v1463 + ""
                    let v1613 : string = " " + v1607 + v1612 + ""
                    let v1614 : string = " " + v1608 + v1613 + ""
                    let v1615 : string = " " + v1609 + v1614 + ""
                    let v1616 : string = " " + v1610 + v1615 + ""
                    let v1617 : string = " " + v1611 + v1616 + ""
                    let v1618 : string = "vec![" + v1463 + "]"
                    let v1619 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1618 
                    let v1620 : string = "leptos::prelude::Fragment::new($0)"
                    let v1621 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1619 v1620 
                    let v1622 : string = "leptos::prelude::AnyView::from($0)"
                    let v1623 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1621 v1622 
                    let v1624 : string = "<" + v1518 + " " + v1617 + ">move || { v1623 }</" + v1518 + ">"
                    let v1625 : string = "leptos::prelude::view! { " + v1624 + " }"
                    let v1626 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1625 
                    let v1627 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1626 |> unbox
                    let v1628 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1629 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1627 v1628 
                    let v1630 : string = "attributeName=\"opacity\""
                    let v1631 : string = "attributeType=\"XML\""
                    let v1632 : string = "values=\"10; 20; 10\""
                    let v1633 : string = "begin=\"0.15s\""
                    let v1634 : string = "dur=\"0.6s\""
                    let v1635 : string = "repeatCount=\"indefinite\""
                    let v1636 : string = " " + v1630 + v1463 + ""
                    let v1637 : string = " " + v1631 + v1636 + ""
                    let v1638 : string = " " + v1632 + v1637 + ""
                    let v1639 : string = " " + v1633 + v1638 + ""
                    let v1640 : string = " " + v1634 + v1639 + ""
                    let v1641 : string = " " + v1635 + v1640 + ""
                    let v1642 : string = "vec![" + v1463 + "]"
                    let v1643 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1642 
                    let v1644 : string = "leptos::prelude::Fragment::new($0)"
                    let v1645 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1643 v1644 
                    let v1646 : string = "leptos::prelude::AnyView::from($0)"
                    let v1647 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1645 v1646 
                    let v1648 : string = "<" + v1518 + " " + v1641 + ">move || { v1647 }</" + v1518 + ">"
                    let v1649 : string = "leptos::prelude::view! { " + v1648 + " }"
                    let v1650 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1649 
                    let v1651 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1650 |> unbox
                    let v1652 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1653 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1651 v1652 
                    let v1654 : string = "attributeName=\"y\""
                    let v1655 : string = "attributeType=\"XML\""
                    let v1656 : string = "values=\"10; 5; 10\""
                    let v1657 : string = "begin=\"0.15s\""
                    let v1658 : string = "dur=\"0.6s\""
                    let v1659 : string = "repeatCount=\"indefinite\""
                    let v1660 : string = " " + v1654 + v1463 + ""
                    let v1661 : string = " " + v1655 + v1660 + ""
                    let v1662 : string = " " + v1656 + v1661 + ""
                    let v1663 : string = " " + v1657 + v1662 + ""
                    let v1664 : string = " " + v1658 + v1663 + ""
                    let v1665 : string = " " + v1659 + v1664 + ""
                    let v1666 : string = "vec![" + v1463 + "]"
                    let v1667 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1666 
                    let v1668 : string = "leptos::prelude::Fragment::new($0)"
                    let v1669 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1667 v1668 
                    let v1670 : string = "leptos::prelude::AnyView::from($0)"
                    let v1671 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1669 v1670 
                    let v1672 : string = "<" + v1518 + " " + v1665 + ">move || { v1671 }</" + v1518 + ">"
                    let v1673 : string = "leptos::prelude::view! { " + v1672 + " }"
                    let v1674 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1673 
                    let v1675 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1674 |> unbox
                    let v1676 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1677 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1675 v1676 
                    let v1678 : string = "v1677"
                    let v1679 : string = v1678 + v1463 
                    let v1680 : string = v1679 + v1463 
                    let v1681 : string = "v1653"
                    let v1682 : string = v1681 + v1577 
                    let v1683 : string = v1682 + v1680 
                    let v1684 : string = "v1629"
                    let v1685 : string = v1684 + v1577 
                    let v1686 : string = v1685 + v1683 
                    let v1687 : string = "vec![" + v1686 + "]"
                    let v1688 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1687 
                    let v1689 : string = "leptos::prelude::Fragment::new($0)"
                    let v1690 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1688 v1689 
                    let v1691 : string = "leptos::prelude::AnyView::from($0)"
                    let v1692 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1690 v1691 
                    let v1693 : string = "<" + v1589 + " " + v1605 + ">move || { v1692 }</" + v1589 + ">"
                    let v1694 : string = "leptos::prelude::view! { " + v1693 + " }"
                    let v1695 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1694 
                    let v1696 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v1695 |> unbox
                    let v1697 : string = "x=\"16\""
                    let v1698 : string = "y=\"10\""
                    let v1699 : string = "width=\"4\""
                    let v1700 : string = "height=\"10\""
                    let v1701 : string = "fill=\"#333\""
                    let v1702 : string = "opacity=\"0.2\""
                    let v1703 : string = " " + v1697 + v1463 + ""
                    let v1704 : string = " " + v1698 + v1703 + ""
                    let v1705 : string = " " + v1699 + v1704 + ""
                    let v1706 : string = " " + v1700 + v1705 + ""
                    let v1707 : string = " " + v1701 + v1706 + ""
                    let v1708 : string = " " + v1702 + v1707 + ""
                    let v1709 : string = "attributeName=\"opacity\""
                    let v1710 : string = "attributeType=\"XML\""
                    let v1711 : string = "values=\"0.2; 1; .2\""
                    let v1712 : string = "begin=\"0.3s\""
                    let v1713 : string = "dur=\"0.6s\""
                    let v1714 : string = "repeatCount=\"indefinite\""
                    let v1715 : string = " " + v1709 + v1463 + ""
                    let v1716 : string = " " + v1710 + v1715 + ""
                    let v1717 : string = " " + v1711 + v1716 + ""
                    let v1718 : string = " " + v1712 + v1717 + ""
                    let v1719 : string = " " + v1713 + v1718 + ""
                    let v1720 : string = " " + v1714 + v1719 + ""
                    let v1721 : string = "vec![" + v1463 + "]"
                    let v1722 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1721 
                    let v1723 : string = "leptos::prelude::Fragment::new($0)"
                    let v1724 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1722 v1723 
                    let v1725 : string = "leptos::prelude::AnyView::from($0)"
                    let v1726 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1724 v1725 
                    let v1727 : string = "<" + v1518 + " " + v1720 + ">move || { v1726 }</" + v1518 + ">"
                    let v1728 : string = "leptos::prelude::view! { " + v1727 + " }"
                    let v1729 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1728 
                    let v1730 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1729 |> unbox
                    let v1731 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1732 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1730 v1731 
                    let v1733 : string = "attributeName=\"height\""
                    let v1734 : string = "attributeType=\"XML\""
                    let v1735 : string = "values=\"10; 20; 10\""
                    let v1736 : string = "begin=\"0.3s\""
                    let v1737 : string = "dur=\"0.6s\""
                    let v1738 : string = "repeatCount=\"indefinite\""
                    let v1739 : string = " " + v1733 + v1463 + ""
                    let v1740 : string = " " + v1734 + v1739 + ""
                    let v1741 : string = " " + v1735 + v1740 + ""
                    let v1742 : string = " " + v1736 + v1741 + ""
                    let v1743 : string = " " + v1737 + v1742 + ""
                    let v1744 : string = " " + v1738 + v1743 + ""
                    let v1745 : string = "vec![" + v1463 + "]"
                    let v1746 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1745 
                    let v1747 : string = "leptos::prelude::Fragment::new($0)"
                    let v1748 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1746 v1747 
                    let v1749 : string = "leptos::prelude::AnyView::from($0)"
                    let v1750 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1748 v1749 
                    let v1751 : string = "<" + v1518 + " " + v1744 + ">move || { v1750 }</" + v1518 + ">"
                    let v1752 : string = "leptos::prelude::view! { " + v1751 + " }"
                    let v1753 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1752 
                    let v1754 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1753 |> unbox
                    let v1755 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1756 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1754 v1755 
                    let v1757 : string = "attributeName=\"y\""
                    let v1758 : string = "attributeType=\"XML\""
                    let v1759 : string = "values=\"10; 5; 10\""
                    let v1760 : string = "begin=\"0.3s\""
                    let v1761 : string = "dur=\"0.6s\""
                    let v1762 : string = "repeatCount=\"indefinite\""
                    let v1763 : string = " " + v1757 + v1463 + ""
                    let v1764 : string = " " + v1758 + v1763 + ""
                    let v1765 : string = " " + v1759 + v1764 + ""
                    let v1766 : string = " " + v1760 + v1765 + ""
                    let v1767 : string = " " + v1761 + v1766 + ""
                    let v1768 : string = " " + v1762 + v1767 + ""
                    let v1769 : string = "vec![" + v1463 + "]"
                    let v1770 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1769 
                    let v1771 : string = "leptos::prelude::Fragment::new($0)"
                    let v1772 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1770 v1771 
                    let v1773 : string = "leptos::prelude::AnyView::from($0)"
                    let v1774 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1772 v1773 
                    let v1775 : string = "<" + v1518 + " " + v1768 + ">move || { v1774 }</" + v1518 + ">"
                    let v1776 : string = "leptos::prelude::view! { " + v1775 + " }"
                    let v1777 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1776 
                    let v1778 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v1777 |> unbox
                    let v1779 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1780 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1778 v1779 
                    let v1781 : string = "v1780"
                    let v1782 : string = v1781 + v1463 
                    let v1783 : string = v1782 + v1463 
                    let v1784 : string = "v1756"
                    let v1785 : string = v1784 + v1577 
                    let v1786 : string = v1785 + v1783 
                    let v1787 : string = "v1732"
                    let v1788 : string = v1787 + v1577 
                    let v1789 : string = v1788 + v1786 
                    let v1790 : string = "vec![" + v1789 + "]"
                    let v1791 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1790 
                    let v1792 : string = "leptos::prelude::Fragment::new($0)"
                    let v1793 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1791 v1792 
                    let v1794 : string = "leptos::prelude::AnyView::from($0)"
                    let v1795 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1793 v1794 
                    let v1796 : string = "<" + v1589 + " " + v1708 + ">move || { v1795 }</" + v1589 + ">"
                    let v1797 : string = "leptos::prelude::view! { " + v1796 + " }"
                    let v1798 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1797 
                    let v1799 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v1798 |> unbox
                    let v1800 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1801 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1799 v1800 
                    let v1802 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1803 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1696 v1802 
                    let v1804 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1805 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1593 v1804 
                    let v1806 : string = "v1801"
                    let v1807 : string = v1806 + v1463 
                    let v1808 : string = v1807 + v1463 
                    let v1809 : string = "v1803"
                    let v1810 : string = v1809 + v1577 
                    let v1811 : string = v1810 + v1808 
                    let v1812 : string = "v1805"
                    let v1813 : string = v1812 + v1577 
                    let v1814 : string = v1813 + v1811 
                    let v1815 : string = "vec![" + v1814 + "]"
                    let v1816 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1815 
                    let v1817 : string = "leptos::prelude::Fragment::new($0)"
                    let v1818 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1816 v1817 
                    let v1819 : string = "leptos::prelude::AnyView::from($0)"
                    let v1820 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1818 v1819 
                    let v1821 : string = "svg"
                    let v1822 : string = "<" + v1821 + " " + v1487 + ">move || { v1820 }</" + v1821 + ">"
                    let v1823 : string = "leptos::prelude::view! { " + v1822 + " }"
                    let v1824 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1823 
                    let v1825 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v1824 |> unbox
                    let v1826 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1827 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1825 v1826 
                    let v1828 : string = "Loading..."
                    (* run_target_args'
                    let v1829 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1830 : string = "&*$0"
                    let v1831 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1828 v1830 
                    let _run_target_args'_v1829 = v1831 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1832 : string = "&*$0"
                    let v1833 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1828 v1832 
                    let _run_target_args'_v1829 = v1833 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1834 : string = "&*$0"
                    let v1835 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1828 v1834 
                    let _run_target_args'_v1829 = v1835 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1836 : Ref<Str> = v1828 |> unbox<Ref<Str>>
                    let _run_target_args'_v1829 = v1836 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1839 : Ref<Str> = v1828 |> unbox<Ref<Str>>
                    let _run_target_args'_v1829 = v1839 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1842 : Ref<Str> = v1828 |> unbox<Ref<Str>>
                    let _run_target_args'_v1829 = v1842 
                    #endif
#else
                    let v1845 : Ref<Str> = v1828 |> unbox<Ref<Str>>
                    let _run_target_args'_v1829 = v1845 
                    #endif
                    let v1848 : Ref<Str> = _run_target_args'_v1829 
                    (* run_target_args'
                    let v1853 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1854 : string = "String::from($0)"
                    let v1855 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1848 v1854 
                    let _run_target_args'_v1853 = v1855 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1856 : string = "String::from($0)"
                    let v1857 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1848 v1856 
                    let _run_target_args'_v1853 = v1857 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1858 : string = "String::from($0)"
                    let v1859 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1848 v1858 
                    let _run_target_args'_v1853 = v1859 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1860 : std_string_String = v1848 |> unbox<std_string_String>
                    let _run_target_args'_v1853 = v1860 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1863 : std_string_String = v1848 |> unbox<std_string_String>
                    let _run_target_args'_v1853 = v1863 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1866 : std_string_String = v1848 |> unbox<std_string_String>
                    let _run_target_args'_v1853 = v1866 
                    #endif
#else
                    let v1869 : std_string_String = v1848 |> unbox<std_string_String>
                    let _run_target_args'_v1853 = v1869 
                    #endif
                    let v1872 : std_string_String = _run_target_args'_v1853 
                    let v1877 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v1878 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1872 v1877 
                    let v1879 : string = "v1878"
                    let v1880 : string = v1879 + v1463 
                    let v1881 : string = v1880 + v1463 
                    let v1882 : string = "v1827"
                    let v1883 : string = v1882 + v1577 
                    let v1884 : string = v1883 + v1881 
                    let v1885 : string = "vec![" + v1884 + "]"
                    let v1886 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1885 
                    let v1887 : string = "leptos::prelude::Fragment::new($0)"
                    let v1888 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1886 v1887 
                    let v1889 : string = "leptos::prelude::AnyView::from($0)"
                    let v1890 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1888 v1889 
                    let v1891 : string = "div"
                    let v1892 : string = "<" + v1891 + " " + v1466 + ">move || { v1890 }</" + v1891 + ">"
                    let v1893 : string = "leptos::prelude::view! { " + v1892 + " }"
                    let v1894 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1893 
                    let v1895 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1894 |> unbox
                    let v1896 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1897 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1895 v1896 
                    let v1898 : string = "v1897"
                    let v1899 : string = v1898 + v1463 
                    let v1900 : string = v1899 + v1463 
                    let v1901 : string = "vec![" + v1900 + "]"
                    let v1902 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1901 
                    let v1903 : string = "leptos::prelude::Fragment::new($0)"
                    let v1904 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1902 v1903 
                    let v1905 : string = "leptos::prelude::AnyView::from($0)"
                    let v1906 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1904 v1905 
                    let v1907 : string = "<" + v1891 + " " + v1464 + ">move || { v1906 }</" + v1891 + ">"
                    let v1908 : string = "leptos::prelude::view! { " + v1907 + " }"
                    let v1909 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1908 
                    let v1910 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1909 |> unbox
                    let v1911 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v1912 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1910 v1911 
                    v1912
    let v2078 : string = "v2077"
    let v2079 : string = ""
    let v2080 : string = v2078 + v2079 
    let v2081 : string = v2080 + v2079 
    let v2082 : string = "vec![" + v2081 + "]"
    let v2083 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2082 
    let v2084 : string = "leptos::prelude::Fragment::new($0)"
    let v2085 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2083 v2084 
    v2085
and closure194 (v0 : int32) (v1 : (bool * std_string_String)) : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) =
    let v2 : string = $"leptos::prelude::signal($0)"
    let struct (v3 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v4 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v5 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = v0, struct (v3, v4) 
    v5
and closure193 () (v0 : int32) : ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) =
    closure194(v0)
and method207 () : (int32 -> ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)))) =
    closure193()
and method208 (v0 : Vec<(bool * std_string_String)>) : Vec<(bool * std_string_String)> =
    v0
and closure192 (v0 : Heap2) () : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    let v1 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v2 : string = "Box::pin($0)"
    let v3 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_ArcRwSignal<Heap0> = v5.l3
    let v7 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v8 : Heap0 = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : Vec<(bool * std_string_String)> = v8.l0
    let v10 : (int32 -> ((bool * std_string_String) -> (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)))) = method207()
    let v11 : Vec<(bool * std_string_String)> = method208(v9)
    let v12 : string = "v11.iter().enumerate().map(|(i, x)| v10(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v13 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v12 
    v13
and method209 (v0 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)>) : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)> =
    v0
and closure196 (v0 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)>) (v1 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>) =
    let v2 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)> = method209(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let struct (v5 : int32, v6 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v7 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    struct (v5, v6, v7)
and method210 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>), struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>) : Func0<struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>), struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> =
    v0
and closure197 (v0 : Func0<struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>), struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>) struct (v1 : int32, v2 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v3 : leptos_prelude_WriteSignal<(bool * std_string_String)>) : struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) =
    let v4 : Func0<struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>), struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> = method210(v0)
    let func1_move_x = struct (v1, v2, v3) //
    let v5 : _ = func1_move_x
    let v6 : string = "(move |x| v4(x))($0)"
    let struct (v7 : int32, v8 : int32, v9 : leptos_prelude_ReadSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    struct (v7, v8, v9)
and closure195 (v0 : leptos_prelude_ArcMemo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v1 : leptos_prelude_ReadSignal<int32>) () : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> =
    let v2 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v3 : int32 = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v5 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : unit = ()
    let v7 : string = $"true; let _func1_from_v6 = Func1::from(move |value| {{ //"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = $"value"
    let v10 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = Fable.Core.RustInterop.emitRustExpr () v9 
    let (a, b) = v10 
    let v11 : int32 = a
    let struct (v12 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v13 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    let func1_from_result = struct (v11, v12, v13) //
    let v20 : _ = func1_from_result
    let v21 : string = $"true; $0 /*"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = $"*/ }}); //"
    let v24 : bool = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : string = $"_func1_from_v6"
    let v26 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v28 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = closure196(v26)
    let v29 : Vec<struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr struct (v5, v28) v27 
    let v30 : unit = ()
    let v31 : string = $"true; let _func1_from_v30 = Func1::from(move |value| {{ //"
    let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
    let v33 : string = $"value"
    let struct (v34 : int32, v35 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v36 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr () v33 
    let func1_from_result = struct (v3, v34, v35) //
    let v37 : _ = func1_from_result
    let v38 : string = $"true; $0 /*"
    let v39 : bool = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let v40 : string = $"*/ }}); //"
    let v41 : bool = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : string = $"_func1_from_v30"
    let v43 : Func0<struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>), struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr () v42 
    let v44 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v45 : (struct (int32 * leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>) -> struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)) = closure197(v43)
    let v46 : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr struct (v29, v45) v44 
    v46
and closure198 (v0 : leptos_prelude_ArcMemo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>) () : int32 =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v4 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) []) = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : int32 = v4.Length
    v5
and method211 (v0 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) =
    v0
and method212 (v0 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    v0
and method213 (v0 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), (bool * std_string_String)>) : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), (bool * std_string_String)> =
    v0
and closure200 (v0 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), (bool * std_string_String)>) (v1 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : (bool * std_string_String) =
    let v2 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), (bool * std_string_String)> = method213(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and closure199 (v0 : leptos_prelude_ArcMemo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>) (v1 : Heap0) : Heap0 =
    let v2 : Vec<(bool * std_string_String)> = v1.l0
    let v3 : std_string_String option = v1.l1
    let v4 : int32 = v1.l2
    let v5 : int32 = v1.l3
    let v6 : US1 = v1.l4
    let v7 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v8 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let v9 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v10 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) []) = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : int32 = v10.Length
    let v12 : string = ""
    (* run_target_args'
    let v13 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v14 : string = "&*$0"
    let v15 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v14 
    let _run_target_args'_v13 = v15 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v16 : string = "&*$0"
    let v17 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v16 
    let _run_target_args'_v13 = v17 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v18 : string = "&*$0"
    let v19 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v12 v18 
    let _run_target_args'_v13 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _run_target_args'_v13 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _run_target_args'_v13 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _run_target_args'_v13 = v26 
    #endif
#else
    let v29 : Ref<Str> = v12 |> unbox<Ref<Str>>
    let _run_target_args'_v13 = v29 
    #endif
    let v32 : Ref<Str> = _run_target_args'_v13 
    (* run_target_args'
    let v37 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : string = "String::from($0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v38 
    let _run_target_args'_v37 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "String::from($0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v40 
    let _run_target_args'_v37 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "String::from($0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v32 v42 
    let _run_target_args'_v37 = v43 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : std_string_String = v32 |> unbox<std_string_String>
    let _run_target_args'_v37 = v44 
    #endif
#if FABLE_COMPILER_PYTHON
    let v47 : std_string_String = v32 |> unbox<std_string_String>
    let _run_target_args'_v37 = v47 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v32 |> unbox<std_string_String>
    let _run_target_args'_v37 = v50 
    #endif
#else
    let v53 : std_string_String = v32 |> unbox<std_string_String>
    let _run_target_args'_v37 = v53 
    #endif
    let v56 : std_string_String = _run_target_args'_v37 
    let v61 : (bool * std_string_String) = false, v56 
    let v62 : string = $"leptos::prelude::signal($0)"
    let struct (v63 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v64 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v65 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = v11, struct (v63, v64) 
    let v66 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = method211(v65)
    let v67 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = method212(v8)
    let v68 : string = "true; let mut v67 = v67"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "true; v67.push(v66)"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "v67"
    let v73 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    let v75 : string = $"true; let _func1_from_v74 = Func1::from(move |value| {{ //"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr () v75 
    let v77 : string = $"value"
    let v78 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = Fable.Core.RustInterop.emitRustExpr () v77 
    let (a, b) = v78 
    let v79 : int32 = a
    let struct (v80 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v81 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    let v88 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v89 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v80 v88 
    let func1_from_result = v89 //
    let v90 : _ = func1_from_result
    let v91 : string = $"true; $0 /*"
    let v92 : bool = Fable.Core.RustInterop.emitRustExpr v90 v91 
    let v93 : string = $"*/ }}); //"
    let v94 : bool = Fable.Core.RustInterop.emitRustExpr () v93 
    let v95 : string = $"_func1_from_v74"
    let v96 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v95 
    let v97 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v98 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> (bool * std_string_String)) = closure200(v96)
    let v99 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v73, v98) v97 
    {l0 = v99; l1 = v3; l2 = v4; l3 = v5; l4 = v6} : Heap0
and closure201 () (v0 : int32) : int32 =
    let v1 : int32 = 1 + v0
    v1
and closure202 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure203 () () : std_string_String =
    let v0 : string = " bg-gray-300 hover:bg-gray-200"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    v44
and closure204 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure205 (v0 : leptos_prelude_AnyView_) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = "[margin-right:40px]"
    let v2 : string = "r#\"" + v1 + "\"#"
    let v3 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v2 
    v3
and closure206 () () : string =
    let v0 : string = "Accounts"
    v0
and method214 (v0 : leptos_prelude_AnyView_) : (unit -> string) =
    closure206()
and method216 (v0 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), (int32 * int32)>) : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), (int32 * int32)> =
    v0
and closure208 (v0 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), (int32 * int32)>) struct (v1 : int32, v2 : int32, v3 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : (int32 * int32) =
    let v4 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), (int32 * int32)> = method216(v0)
    let func1_move_x = struct (v1, v2, v3) //
    let v5 : _ = func1_move_x
    let v6 : string = "(move |x| v4(x))($0)"
    let v7 : (int32 * int32) = Fable.Core.RustInterop.emitRustExpr v5 v6 
    v7
and method215 (v0 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), (int32 * int32)>) : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> (int32 * int32)) =
    closure208(v0)
and method217 (v0 : int32) : int32 =
    v0
and method219 (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure211 (v0 : int32, v1 : int32) (v2 : (bool * std_string_String)) : (bool * std_string_String) =
    let v3 : bool = v1 = v0
    let v4 : bool = method219(v3)
    if v4 then
        v2
    else
        let (a, b) = v2 
        let v5 : bool = a
        let v6 : std_string_String = b
        let v11 : bool = v5 = false
        let v12 : (bool * std_string_String) = v11, v6 
        v12
and closure210 (v0 : int32) (v1 : int32) : ((bool * std_string_String) -> (bool * std_string_String)) =
    closure211(v0, v1)
and method218 (v0 : int32) : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) =
    closure210(v0)
and closure209 (v0 : Heap2, v1 : int32) (v2 : leptos_ev_Event) : unit =
    let v3 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v4 : string = "Box::pin($0)"
    let v5 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v7 : Heap1 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : leptos_prelude_ArcRwSignal<Heap0> = v7.l3
    let v9 : string = "Box::pin($0)"
    let v10 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap0>>> = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v12 : Heap0 = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : Vec<(bool * std_string_String)> = v12.l0
    let v14 : std_string_String option = v12.l1
    let v15 : int32 = v12.l2
    let v16 : int32 = v12.l3
    let v17 : US1 = v12.l4
    let v18 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v19 : string = "Box::pin($0)"
    let v20 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v22 : Heap1 = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : leptos_prelude_ArcRwSignal<Heap0> = v22.l3
    let v24 : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) = method218(v1)
    let v25 : Vec<(bool * std_string_String)> = method208(v13)
    let v26 : string = "v25.iter().enumerate().map(|(i, x)| v24(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v27 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : Heap0 = {l0 = v27; l1 = v14; l2 = v15; l3 = v16; l4 = v17} : Heap0
    let v29 : string = $"true; leptos::prelude::ArcRwSignal::set(&$0, $1); //"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr struct (v23, v28) v29 
    ()
and closure212 (v0 : leptos_prelude_ReadSignal<(bool * std_string_String)>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let (a, b) = v2 
    let v3 : bool = a
    let v4 : std_string_String = b
    v3
and method220 (v0 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : (unit -> bool) =
    closure212(v0)
and closure213 (v0 : int32) () : std_string_String =
    let v1 : string = "account-" + string v0 + ""
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    v45
and method221 (v0 : int32) : (unit -> std_string_String) =
    closure213(v0)
and method223 (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure215 (v0 : int32, v1 : std_string_String, v2 : int32) (v3 : (bool * std_string_String)) : (bool * std_string_String) =
    let v4 : bool = v2 = v0
    let v5 : bool = method223(v4)
    if v5 then
        v3
    else
        let (a, b) = v3 
        let v6 : bool = a
        let v7 : std_string_String = b
        let v12 : (bool * std_string_String) = v6, v1 
        v12
and closure214 (v0 : int32, v1 : std_string_String) (v2 : int32) : ((bool * std_string_String) -> (bool * std_string_String)) =
    closure215(v0, v1, v2)
and method222 (v0 : int32, v1 : std_string_String) : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) =
    closure214(v0, v1)
and closure216 () () : string =
    let v0 : string = "flex-1"
    v0
and method224 (v0 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> =
    v0
and closure219 () (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and method226 () : (bool -> bool) =
    closure219()
and closure218 (v0 : int32) (v1 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))) : bool =
    let (a, b) = v1 
    let v2 : int32 = a
    let struct (v3 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v4 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    let v11 : bool = v2 = v0
    let v12 : (bool -> bool) = method226()
    v12 v11
and method225 (v0 : int32) : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> bool) =
    closure218(v0)
and closure217 (v0 : leptos_prelude_ArcMemo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v1 : int32) (v2 : Heap0) : Heap0 =
    let v3 : Vec<(bool * std_string_String)> = v2.l0
    let v4 : std_string_String option = v2.l1
    let v5 : int32 = v2.l2
    let v6 : int32 = v2.l3
    let v7 : US1 = v2.l4
    let v8 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v9 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = method224(v9)
    let v11 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> bool) = method225(v1)
    let v12 : string = "true; let mut v10 = v10"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "true; v10.retain(|x| v11(x.clone()))"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "v10"
    let v17 : Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))> = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : unit = ()
    let v19 : string = $"true; let _func1_from_v18 = Func1::from(move |value| {{ //"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = $"value"
    let v22 : (int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) = Fable.Core.RustInterop.emitRustExpr () v21 
    let (a, b) = v22 
    let v23 : int32 = a
    let struct (v24 : leptos_prelude_ReadSignal<(bool * std_string_String)>, v25 : leptos_prelude_WriteSignal<(bool * std_string_String)>) = b
    let v32 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v33 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let func1_from_result = v33 //
    let v34 : _ = func1_from_result
    let v35 : string = $"true; $0 /*"
    let v36 : bool = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = $"*/ }}); //"
    let v38 : bool = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = $"_func1_from_v18"
    let v40 : Func0<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)), (bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v42 : ((int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>)) -> (bool * std_string_String)) = closure200(v40)
    let v43 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v17, v42) v41 
    {l0 = v43; l1 = v4; l2 = v5; l3 = v6; l4 = v7} : Heap0
and closure220 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure221 () () : std_string_String =
    let v0 : string = " pr-[7px] pl-[5px]"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    v44
and method227 (v0 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), leptos_prelude_AnyView_>) : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), leptos_prelude_AnyView_> =
    v0
and closure222 (v0 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), leptos_prelude_AnyView_>) struct (v1 : int32, v2 : int32, v3 : leptos_prelude_ReadSignal<(bool * std_string_String)>) : leptos_prelude_AnyView_ =
    let v4 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), leptos_prelude_AnyView_> = method227(v0)
    let func1_move_x = struct (v1, v2, v3) //
    let v5 : _ = func1_move_x
    let v6 : string = "(move |x| v4(x))($0)"
    let v7 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5 v6 
    v7
and closure207 (v0 : Heap2, v1 : leptos_prelude_ArcMemo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>>, v2 : leptos_prelude_ArcMemo<int32>, v3 : leptos_prelude_ArcMemo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>>, v4 : leptos_prelude_WriteSignal<int32>) () : leptos_dom_Fragment =
    let v5 : string = "class=\"flex flex-1 flex-col p-[8px] gap-[8px]\""
    let v6 : string = ""
    let v7 : string = " " + v5 + v6 + ""
    let v8 : string = "$0"
    let v9 : leptos_prelude_ArcMemo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>> = Fable.Core.RustInterop.emitRustExpr v1 v8 
    let v10 : unit = ()
    let v11 : string = $"true; let _func1_from_v10 = Func1::from(move |value| {{ //"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let v13 : string = $"value"
    let struct (v14 : int32, v15 : int32, v16 : leptos_prelude_ReadSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr () v13 
    let v17 : (int32 * int32) = v14, v15 
    let func1_from_result = v17 //
    let v18 : _ = func1_from_result
    let v19 : string = $"true; $0 /*"
    let v20 : bool = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let v21 : string = $"*/ }}); //"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr () v21 
    let v23 : string = $"_func1_from_v10"
    let v24 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), (int32 * int32)> = Fable.Core.RustInterop.emitRustExpr () v23 
    let v25 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> (int32 * int32)) = method215(v24)
    let v26 : unit = ()
    let v27 : string = $"true; let _func1_from_v26 = Func1::from(move |value| {{ //"
    let v28 : bool = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : string = $"value"
    let struct (v30 : int32, v31 : int32, v32 : leptos_prelude_ReadSignal<(bool * std_string_String)>) = Fable.Core.RustInterop.emitRustExpr () v29 
    let v33 : string = "class=\"flex gap-[8px] [align-items:center]\""
    let v34 : string = " " + v33 + v6 + ""
    let v35 : int32 = method217(v31)
    let v36 : unit = ()
    let v37 : string = $"true; let _func0_from_v36 = Func0::from(move || {{ //"
    let v38 : bool = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : string = "account-" + string v35 + ""
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "&*$0"
    let v42 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v41 
    let _run_target_args'_v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v39 v45 
    let _run_target_args'_v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _run_target_args'_v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _run_target_args'_v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _run_target_args'_v40 = v53 
    #endif
#else
    let v56 : Ref<Str> = v39 |> unbox<Ref<Str>>
    let _run_target_args'_v40 = v56 
    #endif
    let v59 : Ref<Str> = _run_target_args'_v40 
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "String::from($0)"
    let v66 : std_string_String = Fable.Core.RustInterop.emitRustExpr v59 v65 
    let _run_target_args'_v64 = v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v67 : string = "String::from($0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v59 v67 
    let _run_target_args'_v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v59 v69 
    let _run_target_args'_v64 = v70 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v71 : std_string_String = v59 |> unbox<std_string_String>
    let _run_target_args'_v64 = v71 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : std_string_String = v59 |> unbox<std_string_String>
    let _run_target_args'_v64 = v74 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : std_string_String = v59 |> unbox<std_string_String>
    let _run_target_args'_v64 = v77 
    #endif
#else
    let v80 : std_string_String = v59 |> unbox<std_string_String>
    let _run_target_args'_v64 = v80 
    #endif
    let v83 : std_string_String = _run_target_args'_v64 
    let v88 : string = $"true; $0 /*"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr v83 v88 
    let v90 : string = $"*/ }}); //"
    let v91 : bool = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = $"_func0_from_v36"
    let v93 : Func0<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "block"
    let v95 : string = "relative"
    let v96 : string = "h-8"
    let v97 : string = "w-14"
    let v98 : string = "cursor-pointer"
    let v99 : string = "[-webkit-tap-highlight-color:_transparent]"
    let v100 : string list = []
    let v101 : string list = v99 :: v100 
    let v104 : string list = v98 :: v101 
    let v107 : string list = v97 :: v104 
    let v110 : string list = v96 :: v107 
    let v113 : string list = v95 :: v110 
    let v116 : string list = v94 :: v113 
    let v119 : unit = ()
    let _let'_v119 =
        seq {
            yield! v116 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v122 : string seq = _let'_v119 
    let v128 : (string -> (string seq -> string)) = String.concat
    let v129 : string = " "
    let v130 : (string seq -> string) = v128 v129
    let v131 : string = v130 v122
    (* run_target_args'
    let v134 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v135 : string = "&*$0"
    let v136 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v131 v135 
    let _run_target_args'_v134 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : string = "&*$0"
    let v138 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v131 v137 
    let _run_target_args'_v134 = v138 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v139 : string = "&*$0"
    let v140 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v131 v139 
    let _run_target_args'_v134 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v141 : Ref<Str> = v131 |> unbox<Ref<Str>>
    let _run_target_args'_v134 = v141 
    #endif
#if FABLE_COMPILER_PYTHON
    let v144 : Ref<Str> = v131 |> unbox<Ref<Str>>
    let _run_target_args'_v134 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v147 : Ref<Str> = v131 |> unbox<Ref<Str>>
    let _run_target_args'_v134 = v147 
    #endif
#else
    let v150 : Ref<Str> = v131 |> unbox<Ref<Str>>
    let _run_target_args'_v134 = v150 
    #endif
    let v153 : Ref<Str> = _run_target_args'_v134 
    (* run_target_args'
    let v158 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v159 : string = "String::from($0)"
    let v160 : std_string_String = Fable.Core.RustInterop.emitRustExpr v153 v159 
    let _run_target_args'_v158 = v160 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v161 : string = "String::from($0)"
    let v162 : std_string_String = Fable.Core.RustInterop.emitRustExpr v153 v161 
    let _run_target_args'_v158 = v162 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v163 : string = "String::from($0)"
    let v164 : std_string_String = Fable.Core.RustInterop.emitRustExpr v153 v163 
    let _run_target_args'_v158 = v164 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v165 : std_string_String = v153 |> unbox<std_string_String>
    let _run_target_args'_v158 = v165 
    #endif
#if FABLE_COMPILER_PYTHON
    let v168 : std_string_String = v153 |> unbox<std_string_String>
    let _run_target_args'_v158 = v168 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v171 : std_string_String = v153 |> unbox<std_string_String>
    let _run_target_args'_v158 = v171 
    #endif
#else
    let v174 : std_string_String = v153 |> unbox<std_string_String>
    let _run_target_args'_v158 = v174 
    #endif
    let v177 : std_string_String = _run_target_args'_v158 
    let v182 : string = "$0"
    let v183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v177 v182 
    let v184 : string = "for=move || v93()"
    let v185 : string = "class=v183"
    let v186 : string = " " + v184 + v6 + ""
    let v187 : string = " " + v185 + v186 + ""
    let v188 : (leptos_ev_Event -> unit) = closure209(v0, v35)
    let v189 : string = "true; let v188 = $0; //"
    let v190 : bool = Fable.Core.RustInterop.emitRustExpr v188 v189 
    let v191 : (unit -> bool) = method220(v32)
    let v192 : (unit -> std_string_String) = method221(v35)
    let v193 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v194 : string = "type=\"checkbox\""
    let v195 : string = "id=move || v192()"
    let v196 : string = "on:change=move |event| v188(event)"
    let v197 : string = "prop:checked=move || v191()"
    let v198 : string = " " + v193 + v6 + ""
    let v199 : string = " " + v194 + v198 + ""
    let v200 : string = " " + v195 + v199 + ""
    let v201 : string = " " + v196 + v200 + ""
    let v202 : string = " " + v197 + v201 + ""
    let v203 : string = "input"
    let v204 : string = "<" + v203 + " " + v202 + " />"
    let v205 : string = "leptos::prelude::view! { " + v204 + " }"
    let v206 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v205 
    let v207 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v206 |> unbox
    let v208 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v209 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v207 v208 
    let v210 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v211 : string = " " + v210 + v6 + ""
    let v212 : string = "data-unchecked-icon"
    let v213 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v214 : string = "class=\"h-4 w-4\""
    let v215 : string = "viewBox=\"0 0 20 20\""
    let v216 : string = "fill=\"currentColor\""
    let v217 : string = " " + v212 + v6 + ""
    let v218 : string = " " + v213 + v217 + ""
    let v219 : string = " " + v214 + v218 + ""
    let v220 : string = " " + v215 + v219 + ""
    let v221 : string = " " + v216 + v220 + ""
    let v222 : string = "fill-rule=\"evenodd\""
    let v223 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v224 : string = "clip-rule=\"evenodd\""
    let v225 : string = " " + v222 + v6 + ""
    let v226 : string = " " + v223 + v225 + ""
    let v227 : string = " " + v224 + v226 + ""
    let v228 : string = "vec![" + v6 + "]"
    let v229 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v228 
    let v230 : string = "leptos::prelude::Fragment::new($0)"
    let v231 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v229 v230 
    let v232 : string = "leptos::prelude::AnyView::from($0)"
    let v233 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v231 v232 
    let v234 : string = "path"
    let v235 : string = "<" + v234 + " " + v227 + ">move || { v233 }</" + v234 + ">"
    let v236 : string = "leptos::prelude::view! { " + v235 + " }"
    let v237 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v236 
    let v238 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v237 |> unbox
    let v239 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v240 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v238 v239 
    let v241 : string = "v240"
    let v242 : string = v241 + v6 
    let v243 : string = v242 + v6 
    let v244 : string = "vec![" + v243 + "]"
    let v245 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v244 
    let v246 : string = "leptos::prelude::Fragment::new($0)"
    let v247 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v245 v246 
    let v248 : string = "leptos::prelude::AnyView::from($0)"
    let v249 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v247 v248 
    let v250 : string = "svg"
    let v251 : string = "<" + v250 + " " + v221 + ">move || { v249 }</" + v250 + ">"
    let v252 : string = "leptos::prelude::view! { " + v251 + " }"
    let v253 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v252 
    let v254 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v253 |> unbox
    let v255 : string = "data-checked-icon"
    let v256 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v257 : string = "class=\"hidden h-4 w-4\""
    let v258 : string = "viewBox=\"0 0 20 20\""
    let v259 : string = "fill=\"currentColor\""
    let v260 : string = " " + v255 + v6 + ""
    let v261 : string = " " + v256 + v260 + ""
    let v262 : string = " " + v257 + v261 + ""
    let v263 : string = " " + v258 + v262 + ""
    let v264 : string = " " + v259 + v263 + ""
    let v265 : string = "fill-rule=\"evenodd\""
    let v266 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v267 : string = "clip-rule=\"evenodd\""
    let v268 : string = " " + v265 + v6 + ""
    let v269 : string = " " + v266 + v268 + ""
    let v270 : string = " " + v267 + v269 + ""
    let v271 : string = "vec![" + v6 + "]"
    let v272 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : string = "leptos::prelude::Fragment::new($0)"
    let v274 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v272 v273 
    let v275 : string = "leptos::prelude::AnyView::from($0)"
    let v276 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v274 v275 
    let v277 : string = "<" + v234 + " " + v270 + ">move || { v276 }</" + v234 + ">"
    let v278 : string = "leptos::prelude::view! { " + v277 + " }"
    let v279 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v278 
    let v280 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v279 |> unbox
    let v281 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v282 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v280 v281 
    let v283 : string = "v282"
    let v284 : string = v283 + v6 
    let v285 : string = v284 + v6 
    let v286 : string = "vec![" + v285 + "]"
    let v287 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v286 
    let v288 : string = "leptos::prelude::Fragment::new($0)"
    let v289 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v287 v288 
    let v290 : string = "leptos::prelude::AnyView::from($0)"
    let v291 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v289 v290 
    let v292 : string = "<" + v250 + " " + v264 + ">move || { v291 }</" + v250 + ">"
    let v293 : string = "leptos::prelude::view! { " + v292 + " }"
    let v294 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v293 
    let v295 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v294 |> unbox
    let v296 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v297 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v295 v296 
    let v298 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v299 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v254 v298 
    let v300 : string = "v297"
    let v301 : string = v300 + v6 
    let v302 : string = v301 + v6 
    let v303 : string = "v299"
    let v304 : string = ", "
    let v305 : string = v303 + v304 
    let v306 : string = v305 + v302 
    let v307 : string = "vec![" + v306 + "]"
    let v308 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v307 
    let v309 : string = "leptos::prelude::Fragment::new($0)"
    let v310 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v308 v309 
    let v311 : string = "leptos::prelude::AnyView::from($0)"
    let v312 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v310 v311 
    let v313 : string = "span"
    let v314 : string = "<" + v313 + " " + v211 + ">move || { v312 }</" + v313 + ">"
    let v315 : string = "leptos::prelude::view! { " + v314 + " }"
    let v316 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v315 
    let v317 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v316 |> unbox
    let v318 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v319 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v317 v318 
    let v320 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v321 : string = " " + v320 + v6 + ""
    let v322 : string = "vec![" + v6 + "]"
    let v323 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v322 
    let v324 : string = "leptos::prelude::Fragment::new($0)"
    let v325 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v323 v324 
    let v326 : string = "leptos::prelude::AnyView::from($0)"
    let v327 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v325 v326 
    let v328 : string = "<" + v313 + " " + v321 + ">move || { v327 }</" + v313 + ">"
    let v329 : string = "leptos::prelude::view! { " + v328 + " }"
    let v330 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v329 
    let v331 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v330 |> unbox
    let v332 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v333 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v331 v332 
    let v334 : string = "v333"
    let v335 : string = v334 + v6 
    let v336 : string = v335 + v6 
    let v337 : string = "v319"
    let v338 : string = v337 + v304 
    let v339 : string = v338 + v336 
    let v340 : string = "v209"
    let v341 : string = v340 + v304 
    let v342 : string = v341 + v339 
    let v343 : string = "vec![" + v342 + "]"
    let v344 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v343 
    let v345 : string = "leptos::prelude::Fragment::new($0)"
    let v346 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v344 v345 
    let v347 : string = "leptos::prelude::AnyView::from($0)"
    let v348 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v346 v347 
    let v349 : string = "label"
    let v350 : string = "<" + v349 + " " + v187 + ">move || { v348 }</" + v349 + ">"
    let v351 : string = "leptos::prelude::view! { " + v350 + " }"
    let v352 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v351 
    let v353 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v352 |> unbox
    let v354 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v355 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v353 v354 
    let v356 : unit = ()
    let v357 : string = $"true; let _func0_from_v356 = Func0::from(move || {{ //"
    let v358 : bool = Fable.Core.RustInterop.emitRustExpr () v357 
    let v359 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v360 : (bool * std_string_String) = Fable.Core.RustInterop.emitRustExpr v32 v359 
    let (a, b) = v360 
    let v361 : bool = a
    let v362 : std_string_String = b
    let v367 : string = $"true; $0 /*"
    let v368 : bool = Fable.Core.RustInterop.emitRustExpr v362 v367 
    let v369 : string = $"*/ }}); //"
    let v370 : bool = Fable.Core.RustInterop.emitRustExpr () v369 
    let v371 : string = $"_func0_from_v356"
    let v372 : Func0<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v371 
    let v373 : unit = ()
    let v374 : string = $"true; let _func1_from_v373 = Func0::from(move || {{ //"
    let v375 : bool = Fable.Core.RustInterop.emitRustExpr () v374 
    let v376 : string = $"value"
    let v377 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v376 
    let v378 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v379 : string = "Box::pin($0)"
    let v380 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v378 v379 
    let v381 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v382 : Heap1 = Fable.Core.RustInterop.emitRustExpr v380 v381 
    let v383 : leptos_prelude_ArcRwSignal<Heap0> = v382.l3
    let v384 : string = "Box::pin($0)"
    let v385 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap0>>> = Fable.Core.RustInterop.emitRustExpr v383 v384 
    let v386 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v387 : Heap0 = Fable.Core.RustInterop.emitRustExpr v385 v386 
    let v388 : Vec<(bool * std_string_String)> = v387.l0
    let v389 : std_string_String option = v387.l1
    let v390 : int32 = v387.l2
    let v391 : int32 = v387.l3
    let v392 : US1 = v387.l4
    let v393 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v394 : string = "Box::pin($0)"
    let v395 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v393 v394 
    let v396 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v397 : Heap1 = Fable.Core.RustInterop.emitRustExpr v395 v396 
    let v398 : leptos_prelude_ArcRwSignal<Heap0> = v397.l3
    let v399 : (int32 -> ((bool * std_string_String) -> (bool * std_string_String))) = method222(v35, v377)
    let v400 : Vec<(bool * std_string_String)> = method208(v388)
    let v401 : string = "v400.iter().enumerate().map(|(i, x)| v399(i.try_into().unwrap())(x.clone())).collect::<Vec<_>>()"
    let v402 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr () v401 
    let v403 : Heap0 = {l0 = v402; l1 = v389; l2 = v390; l3 = v391; l4 = v392} : Heap0
    let v404 : string = $"true; leptos::prelude::ArcRwSignal::set(&$0, $1); //"
    let v405 : bool = Fable.Core.RustInterop.emitRustExpr struct (v398, v403) v404 
    let v406 : string = $"true; /*"
    let v407 : bool = Fable.Core.RustInterop.emitRustExpr () v406 
    let v408 : string = $"*/ }}); //"
    let v409 : bool = Fable.Core.RustInterop.emitRustExpr () v408 
    let v410 : string = $"_func1_from_v373"
    let v411 : Func0<std_string_String, unit> = Fable.Core.RustInterop.emitRustExpr () v410 
    let v412 : string = "$0"
    let v413 : (unit -> string) = closure216()
    let v414 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v413 v412 
    let v415 : string = "class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v414(())"
    let v416 : string = "prop:value=move || v372()"
    let v417 : (std_string_String -> unit) = closure180(v411)
    let v418 : string = "on:keyup=move |event: web_sys::KeyboardEvent| v417(leptos::prelude::event_target_value(&event))"
    let v419 : string = " " + v415 + v6 + ""
    let v420 : string = " " + v416 + v419 + ""
    let v421 : string = " " + v418 + v420 + ""
    let v422 : string = "<" + v203 + " " + v421 + " />"
    let v423 : string = "leptos::prelude::view! { " + v422 + " }"
    let v424 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v423 
    let v425 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v424 |> unbox
    let v426 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v427 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v425 v426 
    let v428 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v429 : int32 = Fable.Core.RustInterop.emitRustExpr v2 v428 
    let v430 : bool = v429 = 1
    let v539 : leptos_prelude_AnyView_ =
        if v430 then
            let v431 : string = "vec![" + v6 + "]"
            let v432 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v431 
            let v433 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v434 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v432 v433 
            v434
        else
            let v435 : unit = ()
            let v436 : string = $"true; let _func0_from_v435 = Func0::from(move || {{ //"
            let v437 : bool = Fable.Core.RustInterop.emitRustExpr () v436 
            let v438 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
            let v439 : string = "Box::pin($0)"
            let v440 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v438 v439 
            let v441 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
            let v442 : Heap1 = Fable.Core.RustInterop.emitRustExpr v440 v441 
            let v443 : leptos_prelude_ArcRwSignal<Heap0> = v442.l3
            let v444 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
            let v445 : bool = Fable.Core.RustInterop.emitRustExpr v443 v444 
            let v446 : TypeEmit<Heap0> = null |> unbox<TypeEmit<Heap0>>
            let v449 : string = "*/ | { *x = $0(x.clone()) }); //"
            let v450 : (Heap0 -> Heap0) = closure217(v3, v35)
            let v451 : bool = Fable.Core.RustInterop.emitRustExpr v450 v449 
            let v452 : string = $"true; leptos::prelude::WriteSignal::update(&$0, |x: &mut /*"
            let v453 : bool = Fable.Core.RustInterop.emitRustExpr v4 v452 
            let v454 : TypeEmit<int32> = null |> unbox<TypeEmit<int32>>
            let v457 : string = "*/ | { *x = $0(x.clone()) }); //"
            let v458 : (int32 -> int32) = closure201()
            let v459 : bool = Fable.Core.RustInterop.emitRustExpr v458 v457 
            // rust.func0_from / is_unit
            let v460 : string = $"true; /*"
            let v461 : bool = Fable.Core.RustInterop.emitRustExpr () v460 
            let v462 : string = $"*/ }}); //"
            let v463 : bool = Fable.Core.RustInterop.emitRustExpr () v462 
            let v464 : string = $"_func0_from_v435"
            let v465 : Func0<unit> = Fable.Core.RustInterop.emitRustExpr () v464 
            let v466 : string = "$0"
            let v467 : (unit -> string) = closure220()
            let v468 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v467 v466 
            let v469 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v470 : string = "fill=\"none\""
            let v471 : string = "viewBox=\"0 0 24 24\""
            let v472 : string = "stroke-width=\"1.5\""
            let v473 : string = "stroke=\"currentColor\""
            let v474 : string = "class=move || \" \".to_owned() + &v468(())"
            let v475 : string = " " + v469 + v6 + ""
            let v476 : string = " " + v470 + v475 + ""
            let v477 : string = " " + v471 + v476 + ""
            let v478 : string = " " + v472 + v477 + ""
            let v479 : string = " " + v473 + v478 + ""
            let v480 : string = " " + v474 + v479 + ""
            let v481 : string = "stroke-linecap=\"round\""
            let v482 : string = "stroke-linejoin=\"round\""
            let v483 : string = "d=\"M6 6l12 12m0-12L6 18\""
            let v484 : string = " " + v481 + v6 + ""
            let v485 : string = " " + v482 + v484 + ""
            let v486 : string = " " + v483 + v485 + ""
            let v487 : string = "vec![" + v6 + "]"
            let v488 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v487 
            let v489 : string = "leptos::prelude::Fragment::new($0)"
            let v490 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v488 v489 
            let v491 : string = "leptos::prelude::AnyView::from($0)"
            let v492 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v490 v491 
            let v493 : string = "<" + v234 + " " + v486 + ">move || { v492 }</" + v234 + ">"
            let v494 : string = "leptos::prelude::view! { " + v493 + " }"
            let v495 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v494 
            let v496 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v495 |> unbox
            let v497 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v498 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v496 v497 
            let v499 : string = "v498"
            let v500 : string = v499 + v6 
            let v501 : string = v500 + v6 
            let v502 : string = "vec![" + v501 + "]"
            let v503 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v502 
            let v504 : string = "leptos::prelude::Fragment::new($0)"
            let v505 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v503 v504 
            let v506 : string = "leptos::prelude::AnyView::from($0)"
            let v507 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v505 v506 
            let v508 : string = "<" + v250 + " " + v480 + ">move || { v507 }</" + v250 + ">"
            let v509 : string = "leptos::prelude::view! { " + v508 + " }"
            let v510 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v509 
            let v511 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v510 |> unbox
            let v512 : string = "on:click=move |_| v465()"
            let v513 : string = "aria-label=\"Delete\""
            let v514 : string = "$0"
            let v515 : (unit -> std_string_String) = closure221()
            let v516 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v515 v514 
            let v517 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v516(())"
            let v518 : string = " " + v517 + v6 + ""
            let v519 : string = " " + v512 + v518 + ""
            let v520 : string = " " + v513 + v519 + ""
            let v521 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v522 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v511 v521 
            let v523 : string = "v522"
            let v524 : string = v523 + v6 
            let v525 : string = v524 + v6 
            let v526 : string = "vec![" + v525 + "]"
            let v527 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v526 
            let v528 : string = "leptos::prelude::Fragment::new($0)"
            let v529 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v527 v528 
            let v530 : string = "leptos::prelude::AnyView::from($0)"
            let v531 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v529 v530 
            let v532 : string = "button"
            let v533 : string = "<" + v532 + " " + v520 + ">move || { v531 }</" + v532 + ">"
            let v534 : string = "leptos::prelude::view! { " + v533 + " }"
            let v535 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v534 
            let v536 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v535 |> unbox
            let v537 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v538 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v536 v537 
            v538
    let v540 : string = "v539"
    let v541 : string = v540 + v6 
    let v542 : string = v541 + v6 
    let v543 : string = "v427"
    let v544 : string = v543 + v304 
    let v545 : string = v544 + v542 
    let v546 : string = "v355"
    let v547 : string = v546 + v304 
    let v548 : string = v547 + v545 
    let v549 : string = "vec![" + v548 + "]"
    let v550 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v549 
    let v551 : string = "leptos::prelude::Fragment::new($0)"
    let v552 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v550 v551 
    let v553 : string = "leptos::prelude::AnyView::from($0)"
    let v554 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v552 v553 
    let v555 : string = "div"
    let v556 : string = "<" + v555 + " " + v34 + ">move || { v554 }</" + v555 + ">"
    let v557 : string = "leptos::prelude::view! { " + v556 + " }"
    let v558 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v557 
    let v559 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v558 |> unbox
    let v560 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v561 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v559 v560 
    let v562 : string = "v561"
    let v563 : string = v562 + v6 
    let v564 : string = v563 + v6 
    let v565 : string = "vec![" + v564 + "]"
    let v566 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v565 
    let v567 : string = "leptos::prelude::Fragment::new($0)"
    let v568 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v566 v567 
    let v569 : string = "leptos::prelude::AnyView::from($0)"
    let v570 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v568 v569 
    let func1_from_result = v570 //
    let v571 : _ = func1_from_result
    let v572 : string = $"true; $0 /*"
    let v573 : bool = Fable.Core.RustInterop.emitRustExpr v571 v572 
    let v574 : string = $"*/ }}); //"
    let v575 : bool = Fable.Core.RustInterop.emitRustExpr () v574 
    let v576 : string = $"_func1_from_v26"
    let v577 : Func0<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>), leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v576 
    let v578 : string = "each=v9"
    let v579 : string = "key=move |x| v25(x.to_owned())"
    let v580 : string = "let:x"
    let v581 : (struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>) -> leptos_prelude_AnyView_) = closure222(v577)
    let v582 : string = "children=move |x| v581(x)"
    let v583 : string = " " + v578 + v6 + ""
    let v584 : string = " " + v579 + v583 + ""
    let v585 : string = " " + v580 + v584 + ""
    let v586 : string = " " + v582 + v585 + ""
    let v587 : string = "leptos::prelude::For"
    let v588 : string = "<" + v587 + " " + v586 + " />"
    let v589 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { " + v588 + " })"
    let v590 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr () v589 
    let v591 : string = "v590"
    let v592 : string = v591 + v6 
    let v593 : string = v592 + v6 
    let v594 : string = "vec![" + v593 + "]"
    let v595 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v594 
    let v596 : string = "leptos::prelude::Fragment::new($0)"
    let v597 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v595 v596 
    let v598 : string = "leptos::prelude::AnyView::from($0)"
    let v599 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v597 v598 
    let v600 : string = "<" + v555 + " " + v7 + ">move || { v599 }</" + v555 + ">"
    let v601 : string = "leptos::prelude::view! { " + v600 + " }"
    let v602 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v601 
    let v603 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v602 |> unbox
    let v604 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v605 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v603 v604 
    let v606 : string = "v605"
    let v607 : string = v606 + v6 
    let v608 : string = v607 + v6 
    let v609 : string = "vec![" + v608 + "]"
    let v610 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v609 
    let v611 : string = "leptos::prelude::Fragment::new($0)"
    let v612 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v610 v611 
    v612
and closure223 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure224 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure225 () () : string =
    let v0 : string = "View"
    v0
and method228 () : (unit -> string) =
    closure225()
and closure227 () () : leptos_dom_Fragment =
    let v0 : string = "Dark Mode"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method229 () : (unit -> leptos_dom_Fragment) =
    closure227()
and closure230 () (v0 : bool) : bool =
    let v1 : bool = v0 = false
    v1
and closure229 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v3 : string = "Box::pin($0)"
    let v4 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v6 : Heap1 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : leptos_prelude_ArcRwSignal<bool> = v6.l0
    let v8 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
    let v13 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v14 : (bool -> bool) = closure230()
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v14 v13 
    ()
and closure231 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v2 : string = "Box::pin($0)"
    let v3 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_ArcRwSignal<bool> = v5.l0
    let v7 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method231 (v0 : Heap2) : (unit -> bool) =
    closure231(v0)
and closure232 () () : std_string_String =
    let v0 : string = "dark-mode"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    v44
and method232 () : (unit -> std_string_String) =
    closure232()
and closure228 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : unit = ()
    let v2 : string = $"true; let _func0_from_v1 = Func0::from(move || {{ //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "dark-mode"
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v21 
    #endif
    let v24 : Ref<Str> = _run_target_args'_v5 
    (* run_target_args'
    let v29 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _run_target_args'_v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _run_target_args'_v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _run_target_args'_v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v45 
    #endif
    let v48 : std_string_String = _run_target_args'_v29 
    let v53 : string = $"true; $0 /*"
    let v54 : bool = Fable.Core.RustInterop.emitRustExpr v48 v53 
    let v55 : string = $"*/ }}); //"
    let v56 : bool = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = $"_func0_from_v1"
    let v58 : Func0<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "block"
    let v60 : string = "relative"
    let v61 : string = "h-8"
    let v62 : string = "w-14"
    let v63 : string = "cursor-pointer"
    let v64 : string = "[-webkit-tap-highlight-color:_transparent]"
    let v65 : string list = []
    let v66 : string list = v64 :: v65 
    let v69 : string list = v63 :: v66 
    let v72 : string list = v62 :: v69 
    let v75 : string list = v61 :: v72 
    let v78 : string list = v60 :: v75 
    let v81 : string list = v59 :: v78 
    let v84 : unit = ()
    let _let'_v84 =
        seq {
            yield! v81 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v87 : string seq = _let'_v84 
    let v93 : (string -> (string seq -> string)) = String.concat
    let v94 : string = " "
    let v95 : (string seq -> string) = v93 v94
    let v96 : string = v95 v87
    (* run_target_args'
    let v99 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v100 : string = "&*$0"
    let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v100 
    let _run_target_args'_v99 = v101 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v102 
    let _run_target_args'_v99 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v104 
    let _run_target_args'_v99 = v105 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v112 
    #endif
#else
    let v115 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v115 
    #endif
    let v118 : Ref<Str> = _run_target_args'_v99 
    (* run_target_args'
    let v123 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v124 
    let _run_target_args'_v123 = v125 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v126 
    let _run_target_args'_v123 = v127 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v128 : string = "String::from($0)"
    let v129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v128 
    let _run_target_args'_v123 = v129 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v130 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v136 
    #endif
#else
    let v139 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v139 
    #endif
    let v142 : std_string_String = _run_target_args'_v123 
    let v147 : string = "$0"
    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v147 
    let v149 : string = "for=move || v58()"
    let v150 : string = "class=v148"
    let v151 : string = ""
    let v152 : string = " " + v149 + v151 + ""
    let v153 : string = " " + v150 + v152 + ""
    let v154 : (leptos_ev_Event -> unit) = closure229(v0)
    let v155 : string = "true; let v154 = $0; //"
    let v156 : bool = Fable.Core.RustInterop.emitRustExpr v154 v155 
    let v157 : (unit -> bool) = method231(v0)
    let v158 : (unit -> std_string_String) = method232()
    let v159 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v160 : string = "type=\"checkbox\""
    let v161 : string = "id=move || v158()"
    let v162 : string = "on:change=move |event| v154(event)"
    let v163 : string = "prop:checked=move || v157()"
    let v164 : string = " " + v159 + v151 + ""
    let v165 : string = " " + v160 + v164 + ""
    let v166 : string = " " + v161 + v165 + ""
    let v167 : string = " " + v162 + v166 + ""
    let v168 : string = " " + v163 + v167 + ""
    let v169 : string = "input"
    let v170 : string = "<" + v169 + " " + v168 + " />"
    let v171 : string = "leptos::prelude::view! { " + v170 + " }"
    let v172 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v172 |> unbox
    let v174 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v175 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v173 v174 
    let v176 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v177 : string = " " + v176 + v151 + ""
    let v178 : string = "data-unchecked-icon"
    let v179 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v180 : string = "class=\"h-4 w-4\""
    let v181 : string = "viewBox=\"0 0 20 20\""
    let v182 : string = "fill=\"currentColor\""
    let v183 : string = " " + v178 + v151 + ""
    let v184 : string = " " + v179 + v183 + ""
    let v185 : string = " " + v180 + v184 + ""
    let v186 : string = " " + v181 + v185 + ""
    let v187 : string = " " + v182 + v186 + ""
    let v188 : string = "fill-rule=\"evenodd\""
    let v189 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v190 : string = "clip-rule=\"evenodd\""
    let v191 : string = " " + v188 + v151 + ""
    let v192 : string = " " + v189 + v191 + ""
    let v193 : string = " " + v190 + v192 + ""
    let v194 : string = "vec![" + v151 + "]"
    let v195 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "leptos::prelude::Fragment::new($0)"
    let v197 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let v198 : string = "leptos::prelude::AnyView::from($0)"
    let v199 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v197 v198 
    let v200 : string = "path"
    let v201 : string = "<" + v200 + " " + v193 + ">move || { v199 }</" + v200 + ">"
    let v202 : string = "leptos::prelude::view! { " + v201 + " }"
    let v203 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v202 
    let v204 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v203 |> unbox
    let v205 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v206 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v204 v205 
    let v207 : string = "v206"
    let v208 : string = v207 + v151 
    let v209 : string = v208 + v151 
    let v210 : string = "vec![" + v209 + "]"
    let v211 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v210 
    let v212 : string = "leptos::prelude::Fragment::new($0)"
    let v213 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v211 v212 
    let v214 : string = "leptos::prelude::AnyView::from($0)"
    let v215 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v213 v214 
    let v216 : string = "svg"
    let v217 : string = "<" + v216 + " " + v187 + ">move || { v215 }</" + v216 + ">"
    let v218 : string = "leptos::prelude::view! { " + v217 + " }"
    let v219 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v218 
    let v220 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v219 |> unbox
    let v221 : string = "data-checked-icon"
    let v222 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v223 : string = "class=\"hidden h-4 w-4\""
    let v224 : string = "viewBox=\"0 0 20 20\""
    let v225 : string = "fill=\"currentColor\""
    let v226 : string = " " + v221 + v151 + ""
    let v227 : string = " " + v222 + v226 + ""
    let v228 : string = " " + v223 + v227 + ""
    let v229 : string = " " + v224 + v228 + ""
    let v230 : string = " " + v225 + v229 + ""
    let v231 : string = "fill-rule=\"evenodd\""
    let v232 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v233 : string = "clip-rule=\"evenodd\""
    let v234 : string = " " + v231 + v151 + ""
    let v235 : string = " " + v232 + v234 + ""
    let v236 : string = " " + v233 + v235 + ""
    let v237 : string = "vec![" + v151 + "]"
    let v238 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "leptos::prelude::Fragment::new($0)"
    let v240 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v238 v239 
    let v241 : string = "leptos::prelude::AnyView::from($0)"
    let v242 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v240 v241 
    let v243 : string = "<" + v200 + " " + v236 + ">move || { v242 }</" + v200 + ">"
    let v244 : string = "leptos::prelude::view! { " + v243 + " }"
    let v245 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v244 
    let v246 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v245 |> unbox
    let v247 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v248 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v246 v247 
    let v249 : string = "v248"
    let v250 : string = v249 + v151 
    let v251 : string = v250 + v151 
    let v252 : string = "vec![" + v251 + "]"
    let v253 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v252 
    let v254 : string = "leptos::prelude::Fragment::new($0)"
    let v255 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v253 v254 
    let v256 : string = "leptos::prelude::AnyView::from($0)"
    let v257 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v255 v256 
    let v258 : string = "<" + v216 + " " + v230 + ">move || { v257 }</" + v216 + ">"
    let v259 : string = "leptos::prelude::view! { " + v258 + " }"
    let v260 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v259 
    let v261 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v260 |> unbox
    let v262 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v263 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v261 v262 
    let v264 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v265 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v220 v264 
    let v266 : string = "v263"
    let v267 : string = v266 + v151 
    let v268 : string = v267 + v151 
    let v269 : string = "v265"
    let v270 : string = ", "
    let v271 : string = v269 + v270 
    let v272 : string = v271 + v268 
    let v273 : string = "vec![" + v272 + "]"
    let v274 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v273 
    let v275 : string = "leptos::prelude::Fragment::new($0)"
    let v276 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v274 v275 
    let v277 : string = "leptos::prelude::AnyView::from($0)"
    let v278 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v276 v277 
    let v279 : string = "span"
    let v280 : string = "<" + v279 + " " + v177 + ">move || { v278 }</" + v279 + ">"
    let v281 : string = "leptos::prelude::view! { " + v280 + " }"
    let v282 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v281 
    let v283 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v282 |> unbox
    let v284 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v285 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v283 v284 
    let v286 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v287 : string = " " + v286 + v151 + ""
    let v288 : string = "vec![" + v151 + "]"
    let v289 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v288 
    let v290 : string = "leptos::prelude::Fragment::new($0)"
    let v291 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v289 v290 
    let v292 : string = "leptos::prelude::AnyView::from($0)"
    let v293 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v291 v292 
    let v294 : string = "<" + v279 + " " + v287 + ">move || { v293 }</" + v279 + ">"
    let v295 : string = "leptos::prelude::view! { " + v294 + " }"
    let v296 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v295 
    let v297 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v296 |> unbox
    let v298 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v299 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v297 v298 
    let v300 : string = "v299"
    let v301 : string = v300 + v151 
    let v302 : string = v301 + v151 
    let v303 : string = "v285"
    let v304 : string = v303 + v270 
    let v305 : string = v304 + v302 
    let v306 : string = "v175"
    let v307 : string = v306 + v270 
    let v308 : string = v307 + v305 
    let v309 : string = "vec![" + v308 + "]"
    let v310 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v309 
    let v311 : string = "leptos::prelude::Fragment::new($0)"
    let v312 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v310 v311 
    let v313 : string = "leptos::prelude::AnyView::from($0)"
    let v314 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let v315 : string = "label"
    let v316 : string = "<" + v315 + " " + v153 + ">move || { v314 }</" + v315 + ">"
    let v317 : string = "leptos::prelude::view! { " + v316 + " }"
    let v318 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v317 
    let v319 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v318 |> unbox
    let v320 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v321 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v319 v320 
    let v322 : string = "v321"
    let v323 : string = v322 + v151 
    let v324 : string = v323 + v151 
    let v325 : string = "vec![" + v324 + "]"
    let v326 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v325 
    let v327 : string = "leptos::prelude::Fragment::new($0)"
    let v328 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v326 v327 
    v328
and method230 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure228(v0)
and closure233 () () : string =
    let v0 : string = "items-center p-0"
    v0
and closure234 () () : string =
    let v0 : string = "pt-[9px] pr-[10px] pb-[11px] pl-[10px]"
    v0
and closure235 () () : string =
    let v0 : string = "sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]"
    v0
and closure236 () () : string =
    let v0 : string = "[overflow:auto]"
    v0
and closure237 () () : leptos_dom_Fragment =
    let v0 : string = "Debug"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method233 () : (unit -> leptos_dom_Fragment) =
    closure237()
and closure239 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v3 : string = "Box::pin($0)"
    let v4 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v6 : Heap1 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : leptos_prelude_ArcRwSignal<bool> = v6.l1
    let v8 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
    let v13 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v14 : (bool -> bool) = closure230()
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v14 v13 
    ()
and closure240 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v2 : string = "Box::pin($0)"
    let v3 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_ArcRwSignal<bool> = v5.l1
    let v7 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr v6 v7 
    v8
and method235 (v0 : Heap2) : (unit -> bool) =
    closure240(v0)
and closure241 () () : std_string_String =
    let v0 : string = "debug"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    v44
and method236 () : (unit -> std_string_String) =
    closure241()
and closure238 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : unit = ()
    let v2 : string = $"true; let _func0_from_v1 = Func0::from(move || {{ //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "debug"
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v21 
    #endif
    let v24 : Ref<Str> = _run_target_args'_v5 
    (* run_target_args'
    let v29 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _run_target_args'_v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _run_target_args'_v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _run_target_args'_v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v45 
    #endif
    let v48 : std_string_String = _run_target_args'_v29 
    let v53 : string = $"true; $0 /*"
    let v54 : bool = Fable.Core.RustInterop.emitRustExpr v48 v53 
    let v55 : string = $"*/ }}); //"
    let v56 : bool = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = $"_func0_from_v1"
    let v58 : Func0<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "block"
    let v60 : string = "relative"
    let v61 : string = "h-8"
    let v62 : string = "w-14"
    let v63 : string = "cursor-pointer"
    let v64 : string = "[-webkit-tap-highlight-color:_transparent]"
    let v65 : string list = []
    let v66 : string list = v64 :: v65 
    let v69 : string list = v63 :: v66 
    let v72 : string list = v62 :: v69 
    let v75 : string list = v61 :: v72 
    let v78 : string list = v60 :: v75 
    let v81 : string list = v59 :: v78 
    let v84 : unit = ()
    let _let'_v84 =
        seq {
            yield! v81 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v87 : string seq = _let'_v84 
    let v93 : (string -> (string seq -> string)) = String.concat
    let v94 : string = " "
    let v95 : (string seq -> string) = v93 v94
    let v96 : string = v95 v87
    (* run_target_args'
    let v99 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v100 : string = "&*$0"
    let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v100 
    let _run_target_args'_v99 = v101 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v102 
    let _run_target_args'_v99 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v104 
    let _run_target_args'_v99 = v105 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v112 
    #endif
#else
    let v115 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v115 
    #endif
    let v118 : Ref<Str> = _run_target_args'_v99 
    (* run_target_args'
    let v123 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v124 
    let _run_target_args'_v123 = v125 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v126 
    let _run_target_args'_v123 = v127 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v128 : string = "String::from($0)"
    let v129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v128 
    let _run_target_args'_v123 = v129 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v130 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v136 
    #endif
#else
    let v139 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v139 
    #endif
    let v142 : std_string_String = _run_target_args'_v123 
    let v147 : string = "$0"
    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v147 
    let v149 : string = "for=move || v58()"
    let v150 : string = "class=v148"
    let v151 : string = ""
    let v152 : string = " " + v149 + v151 + ""
    let v153 : string = " " + v150 + v152 + ""
    let v154 : (leptos_ev_Event -> unit) = closure239(v0)
    let v155 : string = "true; let v154 = $0; //"
    let v156 : bool = Fable.Core.RustInterop.emitRustExpr v154 v155 
    let v157 : (unit -> bool) = method235(v0)
    let v158 : (unit -> std_string_String) = method236()
    let v159 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v160 : string = "type=\"checkbox\""
    let v161 : string = "id=move || v158()"
    let v162 : string = "on:change=move |event| v154(event)"
    let v163 : string = "prop:checked=move || v157()"
    let v164 : string = " " + v159 + v151 + ""
    let v165 : string = " " + v160 + v164 + ""
    let v166 : string = " " + v161 + v165 + ""
    let v167 : string = " " + v162 + v166 + ""
    let v168 : string = " " + v163 + v167 + ""
    let v169 : string = "input"
    let v170 : string = "<" + v169 + " " + v168 + " />"
    let v171 : string = "leptos::prelude::view! { " + v170 + " }"
    let v172 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v172 |> unbox
    let v174 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v175 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v173 v174 
    let v176 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v177 : string = " " + v176 + v151 + ""
    let v178 : string = "data-unchecked-icon"
    let v179 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v180 : string = "class=\"h-4 w-4\""
    let v181 : string = "viewBox=\"0 0 20 20\""
    let v182 : string = "fill=\"currentColor\""
    let v183 : string = " " + v178 + v151 + ""
    let v184 : string = " " + v179 + v183 + ""
    let v185 : string = " " + v180 + v184 + ""
    let v186 : string = " " + v181 + v185 + ""
    let v187 : string = " " + v182 + v186 + ""
    let v188 : string = "fill-rule=\"evenodd\""
    let v189 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v190 : string = "clip-rule=\"evenodd\""
    let v191 : string = " " + v188 + v151 + ""
    let v192 : string = " " + v189 + v191 + ""
    let v193 : string = " " + v190 + v192 + ""
    let v194 : string = "vec![" + v151 + "]"
    let v195 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "leptos::prelude::Fragment::new($0)"
    let v197 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let v198 : string = "leptos::prelude::AnyView::from($0)"
    let v199 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v197 v198 
    let v200 : string = "path"
    let v201 : string = "<" + v200 + " " + v193 + ">move || { v199 }</" + v200 + ">"
    let v202 : string = "leptos::prelude::view! { " + v201 + " }"
    let v203 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v202 
    let v204 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v203 |> unbox
    let v205 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v206 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v204 v205 
    let v207 : string = "v206"
    let v208 : string = v207 + v151 
    let v209 : string = v208 + v151 
    let v210 : string = "vec![" + v209 + "]"
    let v211 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v210 
    let v212 : string = "leptos::prelude::Fragment::new($0)"
    let v213 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v211 v212 
    let v214 : string = "leptos::prelude::AnyView::from($0)"
    let v215 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v213 v214 
    let v216 : string = "svg"
    let v217 : string = "<" + v216 + " " + v187 + ">move || { v215 }</" + v216 + ">"
    let v218 : string = "leptos::prelude::view! { " + v217 + " }"
    let v219 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v218 
    let v220 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v219 |> unbox
    let v221 : string = "data-checked-icon"
    let v222 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v223 : string = "class=\"hidden h-4 w-4\""
    let v224 : string = "viewBox=\"0 0 20 20\""
    let v225 : string = "fill=\"currentColor\""
    let v226 : string = " " + v221 + v151 + ""
    let v227 : string = " " + v222 + v226 + ""
    let v228 : string = " " + v223 + v227 + ""
    let v229 : string = " " + v224 + v228 + ""
    let v230 : string = " " + v225 + v229 + ""
    let v231 : string = "fill-rule=\"evenodd\""
    let v232 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v233 : string = "clip-rule=\"evenodd\""
    let v234 : string = " " + v231 + v151 + ""
    let v235 : string = " " + v232 + v234 + ""
    let v236 : string = " " + v233 + v235 + ""
    let v237 : string = "vec![" + v151 + "]"
    let v238 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "leptos::prelude::Fragment::new($0)"
    let v240 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v238 v239 
    let v241 : string = "leptos::prelude::AnyView::from($0)"
    let v242 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v240 v241 
    let v243 : string = "<" + v200 + " " + v236 + ">move || { v242 }</" + v200 + ">"
    let v244 : string = "leptos::prelude::view! { " + v243 + " }"
    let v245 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v244 
    let v246 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v245 |> unbox
    let v247 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v248 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v246 v247 
    let v249 : string = "v248"
    let v250 : string = v249 + v151 
    let v251 : string = v250 + v151 
    let v252 : string = "vec![" + v251 + "]"
    let v253 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v252 
    let v254 : string = "leptos::prelude::Fragment::new($0)"
    let v255 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v253 v254 
    let v256 : string = "leptos::prelude::AnyView::from($0)"
    let v257 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v255 v256 
    let v258 : string = "<" + v216 + " " + v230 + ">move || { v257 }</" + v216 + ">"
    let v259 : string = "leptos::prelude::view! { " + v258 + " }"
    let v260 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v259 
    let v261 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v260 |> unbox
    let v262 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v263 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v261 v262 
    let v264 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v265 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v220 v264 
    let v266 : string = "v263"
    let v267 : string = v266 + v151 
    let v268 : string = v267 + v151 
    let v269 : string = "v265"
    let v270 : string = ", "
    let v271 : string = v269 + v270 
    let v272 : string = v271 + v268 
    let v273 : string = "vec![" + v272 + "]"
    let v274 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v273 
    let v275 : string = "leptos::prelude::Fragment::new($0)"
    let v276 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v274 v275 
    let v277 : string = "leptos::prelude::AnyView::from($0)"
    let v278 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v276 v277 
    let v279 : string = "span"
    let v280 : string = "<" + v279 + " " + v177 + ">move || { v278 }</" + v279 + ">"
    let v281 : string = "leptos::prelude::view! { " + v280 + " }"
    let v282 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v281 
    let v283 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v282 |> unbox
    let v284 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v285 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v283 v284 
    let v286 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v287 : string = " " + v286 + v151 + ""
    let v288 : string = "vec![" + v151 + "]"
    let v289 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v288 
    let v290 : string = "leptos::prelude::Fragment::new($0)"
    let v291 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v289 v290 
    let v292 : string = "leptos::prelude::AnyView::from($0)"
    let v293 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v291 v292 
    let v294 : string = "<" + v279 + " " + v287 + ">move || { v293 }</" + v279 + ">"
    let v295 : string = "leptos::prelude::view! { " + v294 + " }"
    let v296 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v295 
    let v297 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v296 |> unbox
    let v298 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v299 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v297 v298 
    let v300 : string = "v299"
    let v301 : string = v300 + v151 
    let v302 : string = v301 + v151 
    let v303 : string = "v285"
    let v304 : string = v303 + v270 
    let v305 : string = v304 + v302 
    let v306 : string = "v175"
    let v307 : string = v306 + v270 
    let v308 : string = v307 + v305 
    let v309 : string = "vec![" + v308 + "]"
    let v310 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v309 
    let v311 : string = "leptos::prelude::Fragment::new($0)"
    let v312 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v310 v311 
    let v313 : string = "leptos::prelude::AnyView::from($0)"
    let v314 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let v315 : string = "label"
    let v316 : string = "<" + v315 + " " + v153 + ">move || { v314 }</" + v315 + ">"
    let v317 : string = "leptos::prelude::view! { " + v316 + " }"
    let v318 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v317 
    let v319 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v318 |> unbox
    let v320 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v321 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v319 v320 
    let v322 : string = "v321"
    let v323 : string = v322 + v151 
    let v324 : string = v323 + v151 
    let v325 : string = "vec![" + v324 + "]"
    let v326 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v325 
    let v327 : string = "leptos::prelude::Fragment::new($0)"
    let v328 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v326 v327 
    v328
and method234 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure238(v0)
and closure242 () () : string =
    let v0 : string = "items-center p-0"
    v0
and closure226 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : string = "class=\"flex flex-1 flex-col p-[11px] gap-[11px]\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_dom_Fragment) = method229()
    let v5 : (unit -> leptos_dom_Fragment) = method230(v0)
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure233()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure234()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "$0"
    let v13 : (unit -> string) = closure235()
    let v14 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v13 v12 
    let v15 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())"
    let v16 : string = " " + v15 + v2 + ""
    let v17 : string = "$0"
    let v18 : (unit -> string) = closure236()
    let v19 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v18 v17 
    let v20 : string = "class=\"[font-size:12px] text-gray-400\""
    let v21 : string = " " + v20 + v2 + ""
    let v22 : leptos_dom_Fragment = v4 ()
    let v23 : string = "leptos::prelude::AnyView::from($0)"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "dt"
    let v26 : string = "<" + v25 + " " + v21 + ">move || { v24 }</" + v25 + ">"
    let v27 : string = "leptos::prelude::view! { " + v26 + " }"
    let v28 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v28 |> unbox
    let v30 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v31 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())"
    let v33 : string = " " + v32 + v2 + ""
    let v34 : leptos_dom_Fragment = v5 ()
    let v35 : string = "leptos::prelude::AnyView::from($0)"
    let v36 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "dd"
    let v38 : string = "<" + v37 + " " + v33 + ">move || { v36 }</" + v37 + ">"
    let v39 : string = "leptos::prelude::view! { " + v38 + " }"
    let v40 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v40 |> unbox
    let v42 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v43 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "v43"
    let v45 : string = v44 + v2 
    let v46 : string = v45 + v2 
    let v47 : string = "v31"
    let v48 : string = ", "
    let v49 : string = v47 + v48 
    let v50 : string = v49 + v46 
    let v51 : string = "vec![" + v50 + "]"
    let v52 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : string = "leptos::prelude::Fragment::new($0)"
    let v54 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let v55 : string = "leptos::prelude::AnyView::from($0)"
    let v56 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v54 v55 
    let v57 : string = "dl"
    let v58 : string = "<" + v57 + " " + v16 + ">move || { v56 }</" + v57 + ">"
    let v59 : string = "leptos::prelude::view! { " + v58 + " }"
    let v60 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v60 |> unbox
    let v62 : (unit -> leptos_dom_Fragment) = method233()
    let v63 : (unit -> leptos_dom_Fragment) = method234(v0)
    let v64 : string = "$0"
    let v65 : (unit -> string) = closure242()
    let v66 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v65 v64 
    let v67 : string = "$0"
    let v68 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v67 
    let v69 : string = "$0"
    let v70 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v13 v69 
    let v71 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v70(()) + \" \" + &v68(()) + \" \" + &v66(())"
    let v72 : string = " " + v71 + v2 + ""
    let v73 : string = "$0"
    let v74 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v18 v73 
    let v75 : string = "class=\"[font-size:12px] text-gray-400\""
    let v76 : string = " " + v75 + v2 + ""
    let v77 : leptos_dom_Fragment = v62 ()
    let v78 : string = "leptos::prelude::AnyView::from($0)"
    let v79 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "<" + v25 + " " + v76 + ">move || { v79 }</" + v25 + ">"
    let v81 : string = "leptos::prelude::view! { " + v80 + " }"
    let v82 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v82 |> unbox
    let v84 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v85 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v74(())"
    let v87 : string = " " + v86 + v2 + ""
    let v88 : leptos_dom_Fragment = v63 ()
    let v89 : string = "leptos::prelude::AnyView::from($0)"
    let v90 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v88 v89 
    let v91 : string = "<" + v37 + " " + v87 + ">move || { v90 }</" + v37 + ">"
    let v92 : string = "leptos::prelude::view! { " + v91 + " }"
    let v93 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v93 |> unbox
    let v95 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v96 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v94 v95 
    let v97 : string = "v96"
    let v98 : string = v97 + v2 
    let v99 : string = v98 + v2 
    let v100 : string = "v85"
    let v101 : string = v100 + v48 
    let v102 : string = v101 + v99 
    let v103 : string = "vec![" + v102 + "]"
    let v104 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v103 
    let v105 : string = "leptos::prelude::Fragment::new($0)"
    let v106 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v104 v105 
    let v107 : string = "leptos::prelude::AnyView::from($0)"
    let v108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "<" + v57 + " " + v72 + ">move || { v108 }</" + v57 + ">"
    let v110 : string = "leptos::prelude::view! { " + v109 + " }"
    let v111 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v110 
    let v112 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v111 |> unbox
    let v113 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v114 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v112 v113 
    let v115 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v116 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v115 
    let v117 : string = "v114"
    let v118 : string = v117 + v2 
    let v119 : string = v118 + v2 
    let v120 : string = "v116"
    let v121 : string = v120 + v48 
    let v122 : string = v121 + v119 
    let v123 : string = "vec![" + v122 + "]"
    let v124 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v123 
    let v125 : string = "leptos::prelude::Fragment::new($0)"
    let v126 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v124 v125 
    let v127 : string = "leptos::prelude::AnyView::from($0)"
    let v128 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v126 v127 
    let v129 : string = "div"
    let v130 : string = "<" + v129 + " " + v3 + ">move || { v128 }</" + v129 + ">"
    let v131 : string = "leptos::prelude::view! { " + v130 + " }"
    let v132 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v131 
    let v133 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v132 |> unbox
    let v134 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v135 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v133 v134 
    let v136 : string = "v135"
    let v137 : string = v136 + v2 
    let v138 : string = v137 + v2 
    let v139 : string = "vec![" + v138 + "]"
    let v140 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v139 
    let v141 : string = "leptos::prelude::Fragment::new($0)"
    let v142 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v140 v141 
    v142
and closure243 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure244 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure245 () () : string =
    let v0 : string = "Debug"
    v0
and method237 () : (unit -> string) =
    closure245()
and closure247 () () : leptos_dom_Fragment =
    let v0 : string = "Global State"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method238 () : (unit -> leptos_dom_Fragment) =
    closure247()
and closure250 () (v0 : std_string_String) : US70 =
    US70_0(v0)
and method240 () : (std_string_String -> US70) =
    closure250()
and closure251 () (v0 : std_string_String) : US70 =
    US70_1(v0)
and method241 () : (std_string_String -> US70) =
    closure251()
and closure249 (v0 : Heap2) () : string =
    let v1 : string = "settings_view.global_state_log_render () / global_state_json memo"
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "$0.clone()"
    let v5 : Heap2 = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "serde_json::to_string_pretty(&v5).map_err(|x| x.to_string())"
    let v7 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : (std_string_String -> US70) = method240()
    let v9 : (std_string_String -> US70) = method241()
    let v10 : US70 = match v7 with Ok x -> v8 x | Error x -> v9 x
    match v10 with
    | US70_1(v14) -> (* Error *)
        let v15 : string = "Error: " + string v14 + ""
        v15
    | US70_0(v11) -> (* Ok *)
        let v12 : string = "fable_library_rust::String_::fromString($0)"
        let v13 : string = Fable.Core.RustInterop.emitRustExpr v11 v12 
        v13
and closure252 () () : string =
    let v0 : string = ""
    v0
and closure248 () () : leptos_dom_Fragment =
    let v0 : string = "settings_view.global_state_log_render ()"
    let v1 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v4 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = "$0.unwrap()"
    let v6 : Heap2 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v8 : (unit -> string) = closure249(v6)
    let v9 : leptos_prelude_ArcMemo<string> = Fable.Core.RustInterop.emitRustExpr v8 v7 
    let v10 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "$0"
    let v13 : (unit -> string) = closure252()
    let v14 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v13 v12 
    let v15 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v14(())"
    let v16 : string = ""
    let v17 : string = " " + v15 + v16 + ""
    (* run_target_args'
    let v18 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v19 
    let _run_target_args'_v18 = v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v21 
    let _run_target_args'_v18 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : string = "&*$0"
    let v24 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v23 
    let _run_target_args'_v18 = v24 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v25 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _run_target_args'_v18 = v25 
    #endif
#if FABLE_COMPILER_PYTHON
    let v28 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _run_target_args'_v18 = v28 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v31 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _run_target_args'_v18 = v31 
    #endif
#else
    let v34 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _run_target_args'_v18 = v34 
    #endif
    let v37 : Ref<Str> = _run_target_args'_v18 
    (* run_target_args'
    let v42 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v43 
    let _run_target_args'_v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v45 
    let _run_target_args'_v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "String::from($0)"
    let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v47 
    let _run_target_args'_v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : std_string_String = v37 |> unbox<std_string_String>
    let _run_target_args'_v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : std_string_String = v37 |> unbox<std_string_String>
    let _run_target_args'_v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : std_string_String = v37 |> unbox<std_string_String>
    let _run_target_args'_v42 = v55 
    #endif
#else
    let v58 : std_string_String = v37 |> unbox<std_string_String>
    let _run_target_args'_v42 = v58 
    #endif
    let v61 : std_string_String = _run_target_args'_v42 
    let v66 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v67 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v66 
    let v68 : string = "v67"
    let v69 : string = v68 + v16 
    let v70 : string = v69 + v16 
    let v71 : string = "vec![" + v70 + "]"
    let v72 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v71 
    let v73 : string = "leptos::prelude::Fragment::new($0)"
    let v74 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v72 v73 
    let v75 : string = "leptos::prelude::AnyView::from($0)"
    let v76 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "pre"
    let v78 : string = "<" + v77 + " " + v17 + ">move || { v76 }</" + v77 + ">"
    let v79 : string = "leptos::prelude::view! { " + v78 + " }"
    let v80 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v79 
    let v81 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v80 |> unbox
    let v82 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v83 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "v83"
    let v85 : string = v84 + v16 
    let v86 : string = v85 + v16 
    let v87 : string = "vec![" + v86 + "]"
    let v88 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v87 
    let v89 : string = "leptos::prelude::Fragment::new($0)"
    let v90 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v88 v89 
    v90
and method239 () : (unit -> leptos_dom_Fragment) =
    closure248()
and closure253 () () : string =
    let v0 : string = ""
    v0
and closure246 () () : leptos_dom_Fragment =
    let v0 : (unit -> leptos_dom_Fragment) = method238()
    let v1 : (unit -> leptos_dom_Fragment) = method239()
    let v2 : string = "$0"
    let v3 : (unit -> string) = closure253()
    let v4 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3 v2 
    let v5 : string = "$0"
    let v6 : (unit -> string) = closure234()
    let v7 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v6 v5 
    let v8 : string = "$0"
    let v9 : (unit -> string) = closure235()
    let v10 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v9 v8 
    let v11 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())"
    let v12 : string = ""
    let v13 : string = " " + v11 + v12 + ""
    let v14 : string = "$0"
    let v15 : (unit -> string) = closure236()
    let v16 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v15 v14 
    let v17 : string = "class=\"[font-size:12px] text-gray-400\""
    let v18 : string = " " + v17 + v12 + ""
    let v19 : leptos_dom_Fragment = v0 ()
    let v20 : string = "leptos::prelude::AnyView::from($0)"
    let v21 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : string = "dt"
    let v23 : string = "<" + v22 + " " + v18 + ">move || { v21 }</" + v22 + ">"
    let v24 : string = "leptos::prelude::view! { " + v23 + " }"
    let v25 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v25 |> unbox
    let v27 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v28 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v26 v27 
    let v29 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())"
    let v30 : string = " " + v29 + v12 + ""
    let v31 : leptos_dom_Fragment = v1 ()
    let v32 : string = "leptos::prelude::AnyView::from($0)"
    let v33 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "dd"
    let v35 : string = "<" + v34 + " " + v30 + ">move || { v33 }</" + v34 + ">"
    let v36 : string = "leptos::prelude::view! { " + v35 + " }"
    let v37 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v37 |> unbox
    let v39 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v40 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "v40"
    let v42 : string = v41 + v12 
    let v43 : string = v42 + v12 
    let v44 : string = "v28"
    let v45 : string = ", "
    let v46 : string = v44 + v45 
    let v47 : string = v46 + v43 
    let v48 : string = "vec![" + v47 + "]"
    let v49 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v48 
    let v50 : string = "leptos::prelude::Fragment::new($0)"
    let v51 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v49 v50 
    let v52 : string = "leptos::prelude::AnyView::from($0)"
    let v53 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "dl"
    let v55 : string = "<" + v54 + " " + v13 + ">move || { v53 }</" + v54 + ">"
    let v56 : string = "leptos::prelude::view! { " + v55 + " }"
    let v57 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v57 |> unbox
    let v59 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v60 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v58 v59 
    let v61 : string = "v60"
    let v62 : string = v61 + v12 
    let v63 : string = v62 + v12 
    let v64 : string = "vec![" + v63 + "]"
    let v65 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : string = "leptos::prelude::Fragment::new($0)"
    let v67 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v65 v66 
    v67
and closure254 (v0 : leptos_prelude_WriteSignal<bool>) () : unit =
    let v1 : string = $"true; leptos::prelude::WriteSignal::update(&$0, |x: &mut /*"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
    let v6 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v7 : (bool -> bool) = closure230()
    let v8 : bool = Fable.Core.RustInterop.emitRustExpr v7 v6 
    ()
and closure255 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and method242 (v0 : Ref<Lifetime<StaticLifetime, Str>>) : Ref<Lifetime<StaticLifetime, Str>> =
    v0
and closure256 (v0 : leptos_prelude_ReadSignal<bool>) () : std_string_String =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v9 : Ref<Lifetime<StaticLifetime, Str>> =
        if v2 then
            let v3 : string = ""
            let v4 : string = "r#\"" + v3 + "\"#"
            let v5 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v4 
            v5
        else
            let v6 : string = "bg-gray-300 hover:bg-gray-200"
            let v7 : string = "r#\"" + v6 + "\"#"
            let v8 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v7 
            v8
    let v10 : Ref<Lifetime<StaticLifetime, Str>> = method242(v9)
    let v11 : string = "v10.to_owned() + \" hover:bg-gray-200\""
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v11 
    v12
and closure257 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure258 (v0 : leptos_prelude_AnyView_) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = "[margin-right:40px]"
    let v2 : string = "r#\"" + v1 + "\"#"
    let v3 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v2 
    v3
and closure259 () () : string =
    let v0 : string = "Transactions"
    v0
and method243 (v0 : leptos_prelude_AnyView_) : (unit -> string) =
    closure259()
and closure261 () () : leptos_dom_Fragment =
    let v0 : string = "Settings"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and closure262 () () : leptos_dom_Fragment =
    let v0 : string = "Table View"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method244 () : (unit -> leptos_dom_Fragment) =
    closure262()
and closure265 () (v0 : Heap0) : Heap0 =
    let v1 : Vec<(bool * std_string_String)> = v0.l0
    let v2 : std_string_String option = v0.l1
    let v3 : int32 = v0.l2
    let v4 : int32 = v0.l3
    let v5 : US1 = v0.l4
    let v6 : bool =
        match v5 with
        | US1_1 -> (* Table *)
            true
        | _ ->
            false
    let v9 : US1 =
        if v6 then
            US1_0
        else
            US1_1
    {l0 = v1; l1 = v2; l2 = v3; l3 = v4; l4 = v9} : Heap0
and closure264 (v0 : Heap2) (v1 : leptos_ev_Event) : unit =
    let v2 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v3 : string = "Box::pin($0)"
    let v4 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v6 : Heap1 = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : leptos_prelude_ArcRwSignal<Heap0> = v6.l3
    let v8 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
    let v9 : bool = Fable.Core.RustInterop.emitRustExpr v7 v8 
    let v10 : TypeEmit<Heap0> = null |> unbox<TypeEmit<Heap0>>
    let v13 : string = "*/ | { *x = $0(x.clone()) }); //"
    let v14 : (Heap0 -> Heap0) = closure265()
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v14 v13 
    ()
and closure266 (v0 : Heap2) () : bool =
    let v1 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
    let v2 : string = "Box::pin($0)"
    let v3 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v5 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v6 : leptos_prelude_ArcRwSignal<Heap0> = v5.l3
    let v7 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v8 : Heap0 = Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v9 : US1 = v8.l4
    match v9 with
    | US1_1 -> (* Table *)
        true
    | _ ->
        false
and method246 (v0 : Heap2) : (unit -> bool) =
    closure266(v0)
and closure267 () () : std_string_String =
    let v0 : string = "table-view"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    v44
and method247 () : (unit -> std_string_String) =
    closure267()
and closure263 (v0 : Heap2) () : leptos_dom_Fragment =
    let v1 : unit = ()
    let v2 : string = $"true; let _func0_from_v1 = Func0::from(move || {{ //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "table-view"
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v21 
    #endif
    let v24 : Ref<Str> = _run_target_args'_v5 
    (* run_target_args'
    let v29 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _run_target_args'_v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _run_target_args'_v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _run_target_args'_v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v45 
    #endif
    let v48 : std_string_String = _run_target_args'_v29 
    let v53 : string = $"true; $0 /*"
    let v54 : bool = Fable.Core.RustInterop.emitRustExpr v48 v53 
    let v55 : string = $"*/ }}); //"
    let v56 : bool = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = $"_func0_from_v1"
    let v58 : Func0<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : string = "block"
    let v60 : string = "relative"
    let v61 : string = "h-8"
    let v62 : string = "w-14"
    let v63 : string = "cursor-pointer"
    let v64 : string = "[-webkit-tap-highlight-color:_transparent]"
    let v65 : string list = []
    let v66 : string list = v64 :: v65 
    let v69 : string list = v63 :: v66 
    let v72 : string list = v62 :: v69 
    let v75 : string list = v61 :: v72 
    let v78 : string list = v60 :: v75 
    let v81 : string list = v59 :: v78 
    let v84 : unit = ()
    let _let'_v84 =
        seq {
            yield! v81 
            (* indent
            ()
        indent *)
        }
        (* indent
        ()
    indent *)
    let v87 : string seq = _let'_v84 
    let v93 : (string -> (string seq -> string)) = String.concat
    let v94 : string = " "
    let v95 : (string seq -> string) = v93 v94
    let v96 : string = v95 v87
    (* run_target_args'
    let v99 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v100 : string = "&*$0"
    let v101 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v100 
    let _run_target_args'_v99 = v101 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = "&*$0"
    let v103 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v102 
    let _run_target_args'_v99 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "&*$0"
    let v105 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v96 v104 
    let _run_target_args'_v99 = v105 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v112 
    #endif
#else
    let v115 : Ref<Str> = v96 |> unbox<Ref<Str>>
    let _run_target_args'_v99 = v115 
    #endif
    let v118 : Ref<Str> = _run_target_args'_v99 
    (* run_target_args'
    let v123 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v124 : string = "String::from($0)"
    let v125 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v124 
    let _run_target_args'_v123 = v125 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v126 : string = "String::from($0)"
    let v127 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v126 
    let _run_target_args'_v123 = v127 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v128 : string = "String::from($0)"
    let v129 : std_string_String = Fable.Core.RustInterop.emitRustExpr v118 v128 
    let _run_target_args'_v123 = v129 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v130 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v130 
    #endif
#if FABLE_COMPILER_PYTHON
    let v133 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v133 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v136 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v136 
    #endif
#else
    let v139 : std_string_String = v118 |> unbox<std_string_String>
    let _run_target_args'_v123 = v139 
    #endif
    let v142 : std_string_String = _run_target_args'_v123 
    let v147 : string = "$0"
    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v142 v147 
    let v149 : string = "for=move || v58()"
    let v150 : string = "class=v148"
    let v151 : string = ""
    let v152 : string = " " + v149 + v151 + ""
    let v153 : string = " " + v150 + v152 + ""
    let v154 : (leptos_ev_Event -> unit) = closure264(v0)
    let v155 : string = "true; let v154 = $0; //"
    let v156 : bool = Fable.Core.RustInterop.emitRustExpr v154 v155 
    let v157 : (unit -> bool) = method246(v0)
    let v158 : (unit -> std_string_String) = method247()
    let v159 : string = "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\""
    let v160 : string = "type=\"checkbox\""
    let v161 : string = "id=move || v158()"
    let v162 : string = "on:change=move |event| v154(event)"
    let v163 : string = "prop:checked=move || v157()"
    let v164 : string = " " + v159 + v151 + ""
    let v165 : string = " " + v160 + v164 + ""
    let v166 : string = " " + v161 + v165 + ""
    let v167 : string = " " + v162 + v166 + ""
    let v168 : string = " " + v163 + v167 + ""
    let v169 : string = "input"
    let v170 : string = "<" + v169 + " " + v168 + " />"
    let v171 : string = "leptos::prelude::view! { " + v170 + " }"
    let v172 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Input>> = v172 |> unbox
    let v174 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v175 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v173 v174 
    let v176 : string = "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\""
    let v177 : string = " " + v176 + v151 + ""
    let v178 : string = "data-unchecked-icon"
    let v179 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v180 : string = "class=\"h-4 w-4\""
    let v181 : string = "viewBox=\"0 0 20 20\""
    let v182 : string = "fill=\"currentColor\""
    let v183 : string = " " + v178 + v151 + ""
    let v184 : string = " " + v179 + v183 + ""
    let v185 : string = " " + v180 + v184 + ""
    let v186 : string = " " + v181 + v185 + ""
    let v187 : string = " " + v182 + v186 + ""
    let v188 : string = "fill-rule=\"evenodd\""
    let v189 : string = "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\""
    let v190 : string = "clip-rule=\"evenodd\""
    let v191 : string = " " + v188 + v151 + ""
    let v192 : string = " " + v189 + v191 + ""
    let v193 : string = " " + v190 + v192 + ""
    let v194 : string = "vec![" + v151 + "]"
    let v195 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "leptos::prelude::Fragment::new($0)"
    let v197 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let v198 : string = "leptos::prelude::AnyView::from($0)"
    let v199 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v197 v198 
    let v200 : string = "path"
    let v201 : string = "<" + v200 + " " + v193 + ">move || { v199 }</" + v200 + ">"
    let v202 : string = "leptos::prelude::view! { " + v201 + " }"
    let v203 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v202 
    let v204 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v203 |> unbox
    let v205 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v206 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v204 v205 
    let v207 : string = "v206"
    let v208 : string = v207 + v151 
    let v209 : string = v208 + v151 
    let v210 : string = "vec![" + v209 + "]"
    let v211 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v210 
    let v212 : string = "leptos::prelude::Fragment::new($0)"
    let v213 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v211 v212 
    let v214 : string = "leptos::prelude::AnyView::from($0)"
    let v215 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v213 v214 
    let v216 : string = "svg"
    let v217 : string = "<" + v216 + " " + v187 + ">move || { v215 }</" + v216 + ">"
    let v218 : string = "leptos::prelude::view! { " + v217 + " }"
    let v219 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v218 
    let v220 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v219 |> unbox
    let v221 : string = "data-checked-icon"
    let v222 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v223 : string = "class=\"hidden h-4 w-4\""
    let v224 : string = "viewBox=\"0 0 20 20\""
    let v225 : string = "fill=\"currentColor\""
    let v226 : string = " " + v221 + v151 + ""
    let v227 : string = " " + v222 + v226 + ""
    let v228 : string = " " + v223 + v227 + ""
    let v229 : string = " " + v224 + v228 + ""
    let v230 : string = " " + v225 + v229 + ""
    let v231 : string = "fill-rule=\"evenodd\""
    let v232 : string = "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\""
    let v233 : string = "clip-rule=\"evenodd\""
    let v234 : string = " " + v231 + v151 + ""
    let v235 : string = " " + v232 + v234 + ""
    let v236 : string = " " + v233 + v235 + ""
    let v237 : string = "vec![" + v151 + "]"
    let v238 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v237 
    let v239 : string = "leptos::prelude::Fragment::new($0)"
    let v240 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v238 v239 
    let v241 : string = "leptos::prelude::AnyView::from($0)"
    let v242 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v240 v241 
    let v243 : string = "<" + v200 + " " + v236 + ">move || { v242 }</" + v200 + ">"
    let v244 : string = "leptos::prelude::view! { " + v243 + " }"
    let v245 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v244 
    let v246 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v245 |> unbox
    let v247 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v248 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v246 v247 
    let v249 : string = "v248"
    let v250 : string = v249 + v151 
    let v251 : string = v250 + v151 
    let v252 : string = "vec![" + v251 + "]"
    let v253 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v252 
    let v254 : string = "leptos::prelude::Fragment::new($0)"
    let v255 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v253 v254 
    let v256 : string = "leptos::prelude::AnyView::from($0)"
    let v257 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v255 v256 
    let v258 : string = "<" + v216 + " " + v230 + ">move || { v257 }</" + v216 + ">"
    let v259 : string = "leptos::prelude::view! { " + v258 + " }"
    let v260 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v259 
    let v261 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v260 |> unbox
    let v262 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v263 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v261 v262 
    let v264 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v265 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v220 v264 
    let v266 : string = "v263"
    let v267 : string = v266 + v151 
    let v268 : string = v267 + v151 
    let v269 : string = "v265"
    let v270 : string = ", "
    let v271 : string = v269 + v270 
    let v272 : string = v271 + v268 
    let v273 : string = "vec![" + v272 + "]"
    let v274 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v273 
    let v275 : string = "leptos::prelude::Fragment::new($0)"
    let v276 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v274 v275 
    let v277 : string = "leptos::prelude::AnyView::from($0)"
    let v278 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v276 v277 
    let v279 : string = "span"
    let v280 : string = "<" + v279 + " " + v177 + ">move || { v278 }</" + v279 + ">"
    let v281 : string = "leptos::prelude::view! { " + v280 + " }"
    let v282 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v281 
    let v283 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v282 |> unbox
    let v284 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v285 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v283 v284 
    let v286 : string = "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\""
    let v287 : string = " " + v286 + v151 + ""
    let v288 : string = "vec![" + v151 + "]"
    let v289 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v288 
    let v290 : string = "leptos::prelude::Fragment::new($0)"
    let v291 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v289 v290 
    let v292 : string = "leptos::prelude::AnyView::from($0)"
    let v293 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v291 v292 
    let v294 : string = "<" + v279 + " " + v287 + ">move || { v293 }</" + v279 + ">"
    let v295 : string = "leptos::prelude::view! { " + v294 + " }"
    let v296 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v295 
    let v297 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v296 |> unbox
    let v298 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v299 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v297 v298 
    let v300 : string = "v299"
    let v301 : string = v300 + v151 
    let v302 : string = v301 + v151 
    let v303 : string = "v285"
    let v304 : string = v303 + v270 
    let v305 : string = v304 + v302 
    let v306 : string = "v175"
    let v307 : string = v306 + v270 
    let v308 : string = v307 + v305 
    let v309 : string = "vec![" + v308 + "]"
    let v310 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v309 
    let v311 : string = "leptos::prelude::Fragment::new($0)"
    let v312 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v310 v311 
    let v313 : string = "leptos::prelude::AnyView::from($0)"
    let v314 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v312 v313 
    let v315 : string = "label"
    let v316 : string = "<" + v315 + " " + v153 + ">move || { v314 }</" + v315 + ">"
    let v317 : string = "leptos::prelude::view! { " + v316 + " }"
    let v318 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v317 
    let v319 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v318 |> unbox
    let v320 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v321 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v319 v320 
    let v322 : string = "v321"
    let v323 : string = v322 + v151 
    let v324 : string = v323 + v151 
    let v325 : string = "vec![" + v324 + "]"
    let v326 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v325 
    let v327 : string = "leptos::prelude::Fragment::new($0)"
    let v328 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v326 v327 
    v328
and method245 (v0 : Heap2) : (unit -> leptos_dom_Fragment) =
    closure263(v0)
and closure268 () () : string =
    let v0 : string = "items-center"
    v0
and closure269 (v0 : int64) () : leptos_dom_Fragment =
    let v1 : string = "Transaction " + string (v0 + 1L) + ""
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    let v50 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v51 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v50 
    let v52 : string = "v51"
    let v53 : string = ""
    let v54 : string = v52 + v53 
    let v55 : string = v54 + v53 
    let v56 : string = "vec![" + v55 + "]"
    let v57 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "leptos::prelude::Fragment::new($0)"
    let v59 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v57 v58 
    v59
and closure270 () () : leptos_dom_Fragment =
    let v0 : string = "Account"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method248 () : (unit -> leptos_dom_Fragment) =
    closure270()
and closure271 (v0 : string) () : leptos_dom_Fragment =
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method249 (v0 : string) : (unit -> leptos_dom_Fragment) =
    closure271(v0)
and closure272 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure273 () () : string =
    let v0 : string = ""
    v0
and closure274 () () : leptos_dom_Fragment =
    let v0 : string = "Block Timestamp"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method250 () : (unit -> leptos_dom_Fragment) =
    closure274()
and closure275 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v5 v12 
    let v14 : (string -> int64) = int64
    let v15 : int64 = v14 v13
    let v18 : int64 = method204(v15)
    let v19 : int64 = v18 / 1000L
    let v20 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v21 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v19 v20 
    let v22 : (chrono_DateTime<chrono_Utc> -> US68) = method205()
    let v23 : US68 option = v21 |> Option.map v22 
    let v34 : US68 = US68_1
    let v35 : US68 = v23 |> Option.defaultValue v34 
    let v54 : US31 =
        match v35 with
        | US68_1 -> (* None *)
            US31_1
        | US68_0(v39) -> (* Some *)
            let v40 : string = "$0.naive_utc()"
            let v41 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v39 v40 
            let v42 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v43 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v41 v42 
            let v44 : string = "%Y-%m-%d %H:%M:%S"
            let v45 : string = "r#\"" + v44 + "\"#"
            let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v45 
            let v47 : string = "$0.format($1).to_string()"
            let v48 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v43, v46) v47 
            let v49 : string = "fable_library_rust::String_::fromString($0)"
            let v50 : string = Fable.Core.RustInterop.emitRustExpr v48 v49 
            US31_0(v50)
    let v60 : US69 =
        match v54 with
        | US31_1 -> (* None *)
            let v57 : string = "resultm.from_option / Option does not have a value."
            US69_1(v57)
        | US31_0(v55) -> (* Some *)
            US69_0(v55)
    let v65 : string =
        match v60 with
        | US69_1(v62) -> (* Error *)
            let v63 : string = "sm'.to_string result / Error: " + v62 + ""
            v63
        | US69_0(v61) -> (* Ok *)
            v61
    (* run_target_args'
    let v66 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "&*$0"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v67 
    let _run_target_args'_v66 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "&*$0"
    let v70 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v69 
    let _run_target_args'_v66 = v70 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v71 : string = "&*$0"
    let v72 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v65 v71 
    let _run_target_args'_v66 = v72 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _run_target_args'_v66 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v76 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _run_target_args'_v66 = v76 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _run_target_args'_v66 = v79 
    #endif
#else
    let v82 : Ref<Str> = v65 |> unbox<Ref<Str>>
    let _run_target_args'_v66 = v82 
    #endif
    let v85 : Ref<Str> = _run_target_args'_v66 
    (* run_target_args'
    let v90 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _run_target_args'_v90 = v92 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v93 
    let _run_target_args'_v90 = v94 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v95 : string = "String::from($0)"
    let v96 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v95 
    let _run_target_args'_v90 = v96 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v97 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v90 = v97 
    #endif
#if FABLE_COMPILER_PYTHON
    let v100 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v90 = v100 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v103 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v90 = v103 
    #endif
#else
    let v106 : std_string_String = v85 |> unbox<std_string_String>
    let _run_target_args'_v90 = v106 
    #endif
    let v109 : std_string_String = _run_target_args'_v90 
    let v114 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v115 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v109 v114 
    let v116 : string = "v115"
    let v117 : string = ""
    let v118 : string = v116 + v117 
    let v119 : string = v118 + v117 
    let v120 : string = "vec![" + v119 + "]"
    let v121 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v120 
    let v122 : string = "leptos::prelude::Fragment::new($0)"
    let v123 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v121 v122 
    v123
and method251 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure275(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure276 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure277 () () : string =
    let v0 : string = ""
    v0
and closure278 () () : leptos_dom_Fragment =
    let v0 : string = "Predecessor"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method252 () : (unit -> leptos_dom_Fragment) =
    closure278()
and closure279 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v1 v12 
    (* run_target_args'
    let v14 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _run_target_args'_v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v14 
    (* run_target_args'
    let v38 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _run_target_args'_v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _run_target_args'_v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _run_target_args'_v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v54 
    #endif
    let v57 : std_string_String = _run_target_args'_v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : string = "v63"
    let v65 : string = ""
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v65 
    let v68 : string = "vec![" + v67 + "]"
    let v69 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "leptos::prelude::Fragment::new($0)"
    let v71 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v69 v70 
    v71
and method253 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure279(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure280 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure281 () () : string =
    let v0 : string = ""
    v0
and closure282 () () : leptos_dom_Fragment =
    let v0 : string = "Receiver"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method254 () : (unit -> leptos_dom_Fragment) =
    closure282()
and closure283 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v2 v12 
    (* run_target_args'
    let v14 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _run_target_args'_v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v14 
    (* run_target_args'
    let v38 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _run_target_args'_v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _run_target_args'_v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _run_target_args'_v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v54 
    #endif
    let v57 : std_string_String = _run_target_args'_v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : string = "v63"
    let v65 : string = ""
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v65 
    let v68 : string = "vec![" + v67 + "]"
    let v69 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "leptos::prelude::Fragment::new($0)"
    let v71 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v69 v70 
    v71
and method255 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure283(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure284 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure285 () () : string =
    let v0 : string = ""
    v0
and closure286 () () : leptos_dom_Fragment =
    let v0 : string = "Actions"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method256 () : (unit -> leptos_dom_Fragment) =
    closure286()
and closure288 (v0 : std_string_String) () : leptos_dom_Fragment =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool = "FUNCTION_CALL" = v2
    let v11 : string =
        if v3 then
            let v4 : string = "Function Call:"
            v4
        else
            let v5 : bool = "DEPLOY_CONTRACT" = v2
            if v5 then
                let v6 : string = "Contract Deploy:"
                v6
            else
                let v7 : bool = "TRANSFER" = v2
                if v7 then
                    let v8 : string = "Transfer:"
                    v8
                else
                    v2
    (* run_target_args'
    let v12 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v13 
    let _run_target_args'_v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v15 
    let _run_target_args'_v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v11 v17 
    let _run_target_args'_v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _run_target_args'_v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v22 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _run_target_args'_v12 = v22 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v25 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _run_target_args'_v12 = v25 
    #endif
#else
    let v28 : Ref<Str> = v11 |> unbox<Ref<Str>>
    let _run_target_args'_v12 = v28 
    #endif
    let v31 : Ref<Str> = _run_target_args'_v12 
    (* run_target_args'
    let v36 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v37 : string = "String::from($0)"
    let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v37 
    let _run_target_args'_v36 = v38 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v39 
    let _run_target_args'_v36 = v40 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v31 v41 
    let _run_target_args'_v36 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : std_string_String = v31 |> unbox<std_string_String>
    let _run_target_args'_v36 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : std_string_String = v31 |> unbox<std_string_String>
    let _run_target_args'_v36 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : std_string_String = v31 |> unbox<std_string_String>
    let _run_target_args'_v36 = v49 
    #endif
#else
    let v52 : std_string_String = v31 |> unbox<std_string_String>
    let _run_target_args'_v36 = v52 
    #endif
    let v55 : std_string_String = _run_target_args'_v36 
    let v60 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v61 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v55 v60 
    let v62 : string = "v61"
    let v63 : string = ""
    let v64 : string = v62 + v63 
    let v65 : string = v64 + v63 
    let v66 : string = "vec![" + v65 + "]"
    let v67 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = "leptos::prelude::Fragment::new($0)"
    let v69 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v67 v68 
    v69
and method258 (v0 : std_string_String) : (unit -> leptos_dom_Fragment) =
    closure288(v0)
and closure290 () () : leptos_dom_Fragment =
    let v0 : string = "Method"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method260 () : (unit -> leptos_dom_Fragment) =
    closure290()
and closure291 (v0 : std_string_String option) () : leptos_dom_Fragment =
    let v1 : (std_string_String -> US14) = method39()
    let v2 : US14 option = v0 |> Option.map v1 
    let v13 : US14 = US14_1
    let v14 : US14 = v2 |> Option.defaultValue v13 
    match v14 with
    | US14_1 -> (* None *)
        let v79 : string = "None"
        (* run_target_args'
        let v80 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v81 : string = "&*$0"
        let v82 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v79 v81 
        let _run_target_args'_v80 = v82 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v83 : string = "&*$0"
        let v84 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v79 v83 
        let _run_target_args'_v80 = v84 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v85 : string = "&*$0"
        let v86 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v79 v85 
        let _run_target_args'_v80 = v86 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v87 : Ref<Str> = v79 |> unbox<Ref<Str>>
        let _run_target_args'_v80 = v87 
        #endif
#if FABLE_COMPILER_PYTHON
        let v90 : Ref<Str> = v79 |> unbox<Ref<Str>>
        let _run_target_args'_v80 = v90 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v93 : Ref<Str> = v79 |> unbox<Ref<Str>>
        let _run_target_args'_v80 = v93 
        #endif
#else
        let v96 : Ref<Str> = v79 |> unbox<Ref<Str>>
        let _run_target_args'_v80 = v96 
        #endif
        let v99 : Ref<Str> = _run_target_args'_v80 
        (* run_target_args'
        let v104 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : string = "String::from($0)"
        let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v105 
        let _run_target_args'_v104 = v106 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v107 : string = "String::from($0)"
        let v108 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v107 
        let _run_target_args'_v104 = v108 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v109 : string = "String::from($0)"
        let v110 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v109 
        let _run_target_args'_v104 = v110 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v111 : std_string_String = v99 |> unbox<std_string_String>
        let _run_target_args'_v104 = v111 
        #endif
#if FABLE_COMPILER_PYTHON
        let v114 : std_string_String = v99 |> unbox<std_string_String>
        let _run_target_args'_v104 = v114 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v117 : std_string_String = v99 |> unbox<std_string_String>
        let _run_target_args'_v104 = v117 
        #endif
#else
        let v120 : std_string_String = v99 |> unbox<std_string_String>
        let _run_target_args'_v104 = v120 
        #endif
        let v123 : std_string_String = _run_target_args'_v104 
        let v128 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
        let v129 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v123 v128 
        let v130 : string = "v129"
        let v131 : string = ""
        let v132 : string = v130 + v131 
        let v133 : string = v132 + v131 
        let v134 : string = "vec![" + v133 + "]"
        let v135 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v134 
        let v136 : string = "leptos::prelude::Fragment::new($0)"
        let v137 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v135 v136 
        v137
    | US14_0(v18) -> (* Some *)
        let v19 : string = "fable_library_rust::String_::fromString($0)"
        let v20 : string = Fable.Core.RustInterop.emitRustExpr v18 v19 
        (* run_target_args'
        let v21 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v22 : string = "&*$0"
        let v23 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v22 
        let _run_target_args'_v21 = v23 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v24 : string = "&*$0"
        let v25 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v24 
        let _run_target_args'_v21 = v25 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v26 : string = "&*$0"
        let v27 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v20 v26 
        let _run_target_args'_v21 = v27 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v28 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _run_target_args'_v21 = v28 
        #endif
#if FABLE_COMPILER_PYTHON
        let v31 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _run_target_args'_v21 = v31 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v34 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _run_target_args'_v21 = v34 
        #endif
#else
        let v37 : Ref<Str> = v20 |> unbox<Ref<Str>>
        let _run_target_args'_v21 = v37 
        #endif
        let v40 : Ref<Str> = _run_target_args'_v21 
        (* run_target_args'
        let v45 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v46 : string = "String::from($0)"
        let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v46 
        let _run_target_args'_v45 = v47 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v48 : string = "String::from($0)"
        let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v48 
        let _run_target_args'_v45 = v49 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v50 : string = "String::from($0)"
        let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v40 v50 
        let _run_target_args'_v45 = v51 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v52 : std_string_String = v40 |> unbox<std_string_String>
        let _run_target_args'_v45 = v52 
        #endif
#if FABLE_COMPILER_PYTHON
        let v55 : std_string_String = v40 |> unbox<std_string_String>
        let _run_target_args'_v45 = v55 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v58 : std_string_String = v40 |> unbox<std_string_String>
        let _run_target_args'_v45 = v58 
        #endif
#else
        let v61 : std_string_String = v40 |> unbox<std_string_String>
        let _run_target_args'_v45 = v61 
        #endif
        let v64 : std_string_String = _run_target_args'_v45 
        let v69 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
        let v70 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v64 v69 
        let v71 : string = "v70"
        let v72 : string = ""
        let v73 : string = v71 + v72 
        let v74 : string = v73 + v72 
        let v75 : string = "vec![" + v74 + "]"
        let v76 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v75 
        let v77 : string = "leptos::prelude::Fragment::new($0)"
        let v78 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v76 v77 
        v78
and method261 (v0 : std_string_String option) : (unit -> leptos_dom_Fragment) =
    closure291(v0)
and closure292 () () : string =
    let v0 : string = ""
    v0
and closure293 () () : string =
    let v0 : string = ""
    v0
and closure294 () () : string =
    let v0 : string = ""
    v0
and closure289 (v0 : std_string_String option) () : leptos_dom_Fragment =
    let v1 : string = "class=\"flex flex-1 flex-col\""
    let v2 : string = ""
    let v3 : string = " " + v1 + v2 + ""
    let v4 : (unit -> leptos_dom_Fragment) = method260()
    let v5 : (unit -> leptos_dom_Fragment) = method261(v0)
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure292()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure293()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "$0"
    let v13 : (unit -> string) = closure235()
    let v14 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v13 v12 
    let v15 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())"
    let v16 : string = " " + v15 + v2 + ""
    let v17 : string = "$0"
    let v18 : (unit -> string) = closure294()
    let v19 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v18 v17 
    let v20 : string = "class=\"[font-size:12px] text-gray-400\""
    let v21 : string = " " + v20 + v2 + ""
    let v22 : leptos_dom_Fragment = v4 ()
    let v23 : string = "leptos::prelude::AnyView::from($0)"
    let v24 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "dt"
    let v26 : string = "<" + v25 + " " + v21 + ">move || { v24 }</" + v25 + ">"
    let v27 : string = "leptos::prelude::view! { " + v26 + " }"
    let v28 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v27 
    let v29 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v28 |> unbox
    let v30 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v31 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v29 v30 
    let v32 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())"
    let v33 : string = " " + v32 + v2 + ""
    let v34 : leptos_dom_Fragment = v5 ()
    let v35 : string = "leptos::prelude::AnyView::from($0)"
    let v36 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "dd"
    let v38 : string = "<" + v37 + " " + v33 + ">move || { v36 }</" + v37 + ">"
    let v39 : string = "leptos::prelude::view! { " + v38 + " }"
    let v40 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v40 |> unbox
    let v42 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v43 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let v44 : string = "v43"
    let v45 : string = v44 + v2 
    let v46 : string = v45 + v2 
    let v47 : string = "v31"
    let v48 : string = ", "
    let v49 : string = v47 + v48 
    let v50 : string = v49 + v46 
    let v51 : string = "vec![" + v50 + "]"
    let v52 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v51 
    let v53 : string = "leptos::prelude::Fragment::new($0)"
    let v54 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let v55 : string = "leptos::prelude::AnyView::from($0)"
    let v56 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v54 v55 
    let v57 : string = "dl"
    let v58 : string = "<" + v57 + " " + v16 + ">move || { v56 }</" + v57 + ">"
    let v59 : string = "leptos::prelude::view! { " + v58 + " }"
    let v60 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v59 
    let v61 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v60 |> unbox
    let v62 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : string = "v63"
    let v65 : string = v64 + v2 
    let v66 : string = v65 + v2 
    let v67 : string = "vec![" + v66 + "]"
    let v68 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "leptos::prelude::Fragment::new($0)"
    let v70 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "leptos::prelude::AnyView::from($0)"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : string = "div"
    let v74 : string = "<" + v73 + " " + v3 + ">move || { v72 }</" + v73 + ">"
    let v75 : string = "leptos::prelude::view! { " + v74 + " }"
    let v76 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v75 
    let v77 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v76 |> unbox
    let v78 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v79 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "v79"
    let v81 : string = v80 + v2 
    let v82 : string = v81 + v2 
    let v83 : string = "vec![" + v82 + "]"
    let v84 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v83 
    let v85 : string = "leptos::prelude::Fragment::new($0)"
    let v86 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v84 v85 
    v86
and method259 (v0 : std_string_String option) : (unit -> leptos_dom_Fragment) =
    closure289(v0)
and closure295 () () : string =
    let v0 : string = ""
    v0
and closure296 () () : string =
    let v0 : string = "items-center"
    v0
and closure297 () () : string =
    let v0 : string = ""
    v0
and closure298 () () : string =
    let v0 : string = ""
    v0
and closure287 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "$0.to_vec()"
    let v13 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v7 v12 
    let v14 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let v16 : string = "x"
    let struct (v17 : std_string_String, v18 : std_string_String option) = Fable.Core.RustInterop.emitRustExpr () v16 
    let v19 : (unit -> leptos_dom_Fragment) = method258(v17)
    let v20 : (unit -> leptos_dom_Fragment) = method259(v18)
    let v21 : string = "$0"
    let v22 : (unit -> string) = closure295()
    let v23 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v22 v21 
    let v24 : string = "$0"
    let v25 : (unit -> string) = closure296()
    let v26 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v25 v24 
    let v27 : string = "$0"
    let v28 : (unit -> string) = closure297()
    let v29 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v28 v27 
    let v30 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())"
    let v31 : string = ""
    let v32 : string = " " + v30 + v31 + ""
    let v33 : string = "$0"
    let v34 : (unit -> string) = closure298()
    let v35 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v34 v33 
    let v36 : string = "class=\"[font-size:12px] text-gray-400\""
    let v37 : string = " " + v36 + v31 + ""
    let v38 : leptos_dom_Fragment = v19 ()
    let v39 : string = "leptos::prelude::AnyView::from($0)"
    let v40 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v38 v39 
    let v41 : string = "dt"
    let v42 : string = "<" + v41 + " " + v37 + ">move || { v40 }</" + v41 + ">"
    let v43 : string = "leptos::prelude::view! { " + v42 + " }"
    let v44 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v43 
    let v45 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v44 |> unbox
    let v46 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v47 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v45 v46 
    let v48 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())"
    let v49 : string = " " + v48 + v31 + ""
    let v50 : leptos_dom_Fragment = v20 ()
    let v51 : string = "leptos::prelude::AnyView::from($0)"
    let v52 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let v53 : string = "dd"
    let v54 : string = "<" + v53 + " " + v49 + ">move || { v52 }</" + v53 + ">"
    let v55 : string = "leptos::prelude::view! { " + v54 + " }"
    let v56 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v56 |> unbox
    let v58 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v59 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "v59"
    let v61 : string = v60 + v31 
    let v62 : string = v61 + v31 
    let v63 : string = "v47"
    let v64 : string = ", "
    let v65 : string = v63 + v64 
    let v66 : string = v65 + v62 
    let v67 : string = "vec![" + v66 + "]"
    let v68 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "leptos::prelude::Fragment::new($0)"
    let v70 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v68 v69 
    let v71 : string = "leptos::prelude::AnyView::from($0)"
    let v72 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let v73 : string = "dl"
    let v74 : string = "<" + v73 + " " + v32 + ">move || { v72 }</" + v73 + ">"
    let v75 : string = "leptos::prelude::view! { " + v74 + " }"
    let v76 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v75 
    let v77 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v76 |> unbox
    let v78 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v79 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "true; $0 }).collect::<Vec<_>>()"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "_vec_map"
    let v83 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v85 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "v85"
    let v87 : string = v86 + v31 
    let v88 : string = v87 + v31 
    let v89 : string = "vec![" + v88 + "]"
    let v90 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = "leptos::prelude::Fragment::new($0)"
    let v92 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v90 v91 
    v92
and method257 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure287(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure299 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure300 () () : string =
    let v0 : string = "sm:pr-[10px]"
    v0
and closure301 () () : string =
    let v0 : string = "[flex-direction:column]"
    v0
and closure302 () () : leptos_dom_Fragment =
    let v0 : string = "Deposit"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method262 () : (unit -> leptos_dom_Fragment) =
    closure302()
and closure303 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (float -> string) = _.ToString()
    let v13 : string = v12 v8
    (* run_target_args'
    let v16 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _run_target_args'_v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v32 
    #endif
    let v35 : Ref<Str> = _run_target_args'_v16 
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _run_target_args'_v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _run_target_args'_v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v56 
    #endif
    let v59 : std_string_String = _run_target_args'_v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : string = "v65"
    let v67 : string = ""
    let v68 : string = v66 + v67 
    let v69 : string = v68 + v67 
    let v70 : string = "vec![" + v69 + "]"
    let v71 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "leptos::prelude::Fragment::new($0)"
    let v73 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v71 v72 
    v73
and method263 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure303(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure304 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure305 () () : string =
    let v0 : string = ""
    v0
and closure306 () () : leptos_dom_Fragment =
    let v0 : string = "Outcome Status"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method264 () : (unit -> leptos_dom_Fragment) =
    closure306()
and closure307 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (bool -> string) = _.ToString()
    let v13 : string = v12 v9
    (* run_target_args'
    let v16 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _run_target_args'_v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v32 
    #endif
    let v35 : Ref<Str> = _run_target_args'_v16 
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _run_target_args'_v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _run_target_args'_v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v56 
    #endif
    let v59 : std_string_String = _run_target_args'_v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : string = "v65"
    let v67 : string = ""
    let v68 : string = v66 + v67 
    let v69 : string = v68 + v67 
    let v70 : string = "vec![" + v69 + "]"
    let v71 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "leptos::prelude::Fragment::new($0)"
    let v73 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v71 v72 
    v73
and method265 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure307(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure308 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure309 () () : string =
    let v0 : string = ""
    v0
and closure310 () () : leptos_dom_Fragment =
    let v0 : string = "Fee"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method266 () : (unit -> leptos_dom_Fragment) =
    closure310()
and closure311 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (float -> string) = _.ToString()
    let v13 : string = v12 v10
    (* run_target_args'
    let v16 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _run_target_args'_v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v32 
    #endif
    let v35 : Ref<Str> = _run_target_args'_v16 
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _run_target_args'_v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _run_target_args'_v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v56 
    #endif
    let v59 : std_string_String = _run_target_args'_v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : string = "v65"
    let v67 : string = ""
    let v68 : string = v66 + v67 
    let v69 : string = v68 + v67 
    let v70 : string = "vec![" + v69 + "]"
    let v71 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "leptos::prelude::Fragment::new($0)"
    let v73 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v71 v72 
    v73
and method267 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure311(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure312 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure313 () () : string =
    let v0 : string = ""
    v0
and closure314 () () : leptos_dom_Fragment =
    let v0 : string = "Block Height"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method268 () : (unit -> leptos_dom_Fragment) =
    closure314()
and closure315 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : (uint32 -> string) = _.ToString()
    let v13 : string = v12 v6
    (* run_target_args'
    let v16 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v16 = v18 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v16 = v20 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v21 : string = "&*$0"
    let v22 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v21 
    let _run_target_args'_v16 = v22 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v23 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v23 
    #endif
#if FABLE_COMPILER_PYTHON
    let v26 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v26 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v29 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v29 
    #endif
#else
    let v32 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v16 = v32 
    #endif
    let v35 : Ref<Str> = _run_target_args'_v16 
    (* run_target_args'
    let v40 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v41 
    let _run_target_args'_v40 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v43 
    let _run_target_args'_v40 = v44 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v45 : string = "String::from($0)"
    let v46 : std_string_String = Fable.Core.RustInterop.emitRustExpr v35 v45 
    let _run_target_args'_v40 = v46 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v47 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v47 
    #endif
#if FABLE_COMPILER_PYTHON
    let v50 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v50 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v53 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v53 
    #endif
#else
    let v56 : std_string_String = v35 |> unbox<std_string_String>
    let _run_target_args'_v40 = v56 
    #endif
    let v59 : std_string_String = _run_target_args'_v40 
    let v64 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v65 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v64 
    let v66 : string = "v65"
    let v67 : string = ""
    let v68 : string = v66 + v67 
    let v69 : string = v68 + v67 
    let v70 : string = "vec![" + v69 + "]"
    let v71 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "leptos::prelude::Fragment::new($0)"
    let v73 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v71 v72 
    v73
and method269 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure315(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure316 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure317 () () : string =
    let v0 : string = ""
    v0
and closure318 () () : leptos_dom_Fragment =
    let v0 : string = "Hash"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method270 () : (unit -> leptos_dom_Fragment) =
    closure318()
and closure319 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v3 v12 
    (* run_target_args'
    let v14 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _run_target_args'_v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v14 
    (* run_target_args'
    let v38 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _run_target_args'_v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _run_target_args'_v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _run_target_args'_v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v54 
    #endif
    let v57 : std_string_String = _run_target_args'_v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : string = "v63"
    let v65 : string = ""
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v65 
    let v68 : string = "vec![" + v67 + "]"
    let v69 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "leptos::prelude::Fragment::new($0)"
    let v71 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v69 v70 
    v71
and method271 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure319(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure320 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure321 () () : string =
    let v0 : string = ""
    v0
and closure322 () () : leptos_dom_Fragment =
    let v0 : string = "Block Hash"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method272 () : (unit -> leptos_dom_Fragment) =
    closure322()
and closure323 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v4 v12 
    (* run_target_args'
    let v14 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _run_target_args'_v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v14 
    (* run_target_args'
    let v38 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _run_target_args'_v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _run_target_args'_v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _run_target_args'_v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v54 
    #endif
    let v57 : std_string_String = _run_target_args'_v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : string = "v63"
    let v65 : string = ""
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v65 
    let v68 : string = "vec![" + v67 + "]"
    let v69 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "leptos::prelude::Fragment::new($0)"
    let v71 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v69 v70 
    v71
and method273 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure323(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure324 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure325 () () : string =
    let v0 : string = ""
    v0
and closure326 () () : leptos_dom_Fragment =
    let v0 : string = "Receipt ID"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method274 () : (unit -> leptos_dom_Fragment) =
    closure326()
and closure327 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "fable_library_rust::String_::fromString($0)"
    let v13 : string = Fable.Core.RustInterop.emitRustExpr v0 v12 
    (* run_target_args'
    let v14 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v15 
    let _run_target_args'_v14 = v16 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v17 : string = "&*$0"
    let v18 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v17 
    let _run_target_args'_v14 = v18 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v19 : string = "&*$0"
    let v20 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v13 v19 
    let _run_target_args'_v14 = v20 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v21 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v21 
    #endif
#if FABLE_COMPILER_PYTHON
    let v24 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v27 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v27 
    #endif
#else
    let v30 : Ref<Str> = v13 |> unbox<Ref<Str>>
    let _run_target_args'_v14 = v30 
    #endif
    let v33 : Ref<Str> = _run_target_args'_v14 
    (* run_target_args'
    let v38 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v39 
    let _run_target_args'_v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v41 
    let _run_target_args'_v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v33 v43 
    let _run_target_args'_v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v51 
    #endif
#else
    let v54 : std_string_String = v33 |> unbox<std_string_String>
    let _run_target_args'_v38 = v54 
    #endif
    let v57 : std_string_String = _run_target_args'_v38 
    let v62 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let v64 : string = "v63"
    let v65 : string = ""
    let v66 : string = v64 + v65 
    let v67 : string = v66 + v65 
    let v68 : string = "vec![" + v67 + "]"
    let v69 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "leptos::prelude::Fragment::new($0)"
    let v71 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v69 v70 
    v71
and method275 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure327(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure328 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure329 () () : string =
    let v0 : string = ""
    v0
and closure330 () () : leptos_dom_Fragment =
    let v0 : string = "Logs"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method276 () : (unit -> leptos_dom_Fragment) =
    closure330()
and method278 (v0 : Func0<std_string_String, string>) : Func0<std_string_String, string> =
    v0
and closure332 (v0 : Func0<std_string_String, string>) (v1 : std_string_String) : string =
    let v2 : Func0<std_string_String, string> = method278(v0)
    let func1_move_x = v1 //
    let v3 : _ = func1_move_x
    let v4 : string = "(move |x| v2(x))($0)"
    let v5 : string = Fable.Core.RustInterop.emitRustExpr v3 v4 
    v5
and method279 () : string =
    let v0 : string = "\n"
    v0
and closure333 () () : string =
    let v0 : string = "[max-height:20vh]"
    v0
and closure331 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) () : leptos_dom_Fragment =
    let v12 : string = "$0.to_vec()"
    let v13 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v11 v12 
    let v14 : unit = ()
    let v15 : string = $"true; let _func1_from_v14 = Func1::from(move |value| {{ //"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = $"value"
    let v18 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : string = "fable_library_rust::String_::fromString($0)"
    let v20 : string = Fable.Core.RustInterop.emitRustExpr v18 v19 
    let func1_from_result = v20 //
    let v21 : _ = func1_from_result
    let v22 : string = $"true; $0 /*"
    let v23 : bool = Fable.Core.RustInterop.emitRustExpr v21 v22 
    let v24 : string = $"*/ }}); //"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = $"_func1_from_v14"
    let v27 : Func0<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v29 : (std_string_String -> string) = closure332(v27)
    let v30 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v13, v29) v28 
    let v31 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v32 : (string []) = Fable.Core.RustInterop.emitRustExpr v30 v31 
    let v33 : string seq = v32 |> Seq.ofArray
    let v36 : string = method279()
    let v37 : (string -> (string seq -> string)) = String.concat
    let v38 : (string seq -> string) = v37 v36
    let v39 : string = v38 v33
    let v43 : string = "\\n"
    let v44 : string = "\n"
    let v45 : string = v39.Replace (v43, v44)
    let v46 : string = "$0"
    let v47 : (unit -> string) = closure333()
    let v48 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v47 v46 
    let v49 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v48(())"
    let v50 : string = ""
    let v51 : string = " " + v49 + v50 + ""
    (* run_target_args'
    let v52 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v53 : string = "&*$0"
    let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _run_target_args'_v52 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _run_target_args'_v52 = v56 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v45 v57 
    let _run_target_args'_v52 = v58 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v59 : Ref<Str> = v45 |> unbox<Ref<Str>>
    let _run_target_args'_v52 = v59 
    #endif
#if FABLE_COMPILER_PYTHON
    let v62 : Ref<Str> = v45 |> unbox<Ref<Str>>
    let _run_target_args'_v52 = v62 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v65 : Ref<Str> = v45 |> unbox<Ref<Str>>
    let _run_target_args'_v52 = v65 
    #endif
#else
    let v68 : Ref<Str> = v45 |> unbox<Ref<Str>>
    let _run_target_args'_v52 = v68 
    #endif
    let v71 : Ref<Str> = _run_target_args'_v52 
    (* run_target_args'
    let v76 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v77 : string = "String::from($0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v71 v77 
    let _run_target_args'_v76 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : string = "String::from($0)"
    let v80 : std_string_String = Fable.Core.RustInterop.emitRustExpr v71 v79 
    let _run_target_args'_v76 = v80 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v81 : string = "String::from($0)"
    let v82 : std_string_String = Fable.Core.RustInterop.emitRustExpr v71 v81 
    let _run_target_args'_v76 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v83 : std_string_String = v71 |> unbox<std_string_String>
    let _run_target_args'_v76 = v83 
    #endif
#if FABLE_COMPILER_PYTHON
    let v86 : std_string_String = v71 |> unbox<std_string_String>
    let _run_target_args'_v76 = v86 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v89 : std_string_String = v71 |> unbox<std_string_String>
    let _run_target_args'_v76 = v89 
    #endif
#else
    let v92 : std_string_String = v71 |> unbox<std_string_String>
    let _run_target_args'_v76 = v92 
    #endif
    let v95 : std_string_String = _run_target_args'_v76 
    let v100 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v101 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v95 v100 
    let v102 : string = "v101"
    let v103 : string = v102 + v50 
    let v104 : string = v103 + v50 
    let v105 : string = "vec![" + v104 + "]"
    let v106 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v105 
    let v107 : string = "leptos::prelude::Fragment::new($0)"
    let v108 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v106 v107 
    let v109 : string = "leptos::prelude::AnyView::from($0)"
    let v110 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v108 v109 
    let v111 : string = "pre"
    let v112 : string = "<" + v111 + " " + v51 + ">move || { v110 }</" + v111 + ">"
    let v113 : string = "leptos::prelude::view! { " + v112 + " }"
    let v114 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v113 
    let v115 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v114 |> unbox
    let v116 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v117 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v115 v116 
    let v118 : string = "v117"
    let v119 : string = v118 + v50 
    let v120 : string = v119 + v50 
    let v121 : string = "vec![" + v120 + "]"
    let v122 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : string = "leptos::prelude::Fragment::new($0)"
    let v124 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v122 v123 
    v124
and method277 (v0 : std_string_String, v1 : std_string_String, v2 : std_string_String, v3 : std_string_String, v4 : std_string_String, v5 : std_string_String, v6 : uint32, v7 : (struct (std_string_String * std_string_String option) []), v8 : float, v9 : bool, v10 : float, v11 : (std_string_String [])) : (unit -> leptos_dom_Fragment) =
    closure331(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)
and closure334 () () : string =
    let v0 : string = "items-center py-[4px]"
    v0
and closure335 () () : string =
    let v0 : string = ""
    v0
and closure336 () () : string =
    let v0 : string = "[max-height:20vh] [width:100vw] [max-width:100vw]"
    v0
and method281 (v0 : (std_string_String []), v1 : int32) : bool =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 < v2
    if v3 then
        let v4 : std_string_String = v0.[int v1]
        let v5 : string = "fable_library_rust::String_::fromString($0)"
        let v6 : string = Fable.Core.RustInterop.emitRustExpr v4 v5 
        let v7 : int32 = v6.Length
        let v8 : bool = v7 > 0
        if v8 then
            true
        else
            let v9 : int32 = v1 + 1
            method281(v0, v9)
    else
        false
and method280 (v0 : (struct (string * unativeint * Heap5) []), v1 : int32) : bool =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 < v2
    if v3 then
        let struct (v4 : string, v5 : unativeint, v6 : Heap5) = v0.[int v1]
        let v7 : (std_string_String []) = v6.l11
        let v8 : int32 = 0
        let v9 : bool = method281(v7, v8)
        if v9 then
            true
        else
            let v10 : int32 = v1 + 1
            method280(v0, v10)
    else
        false
and closure260 (v0 : Heap2, v1 : leptos_prelude_ArcMemo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>, v2 : leptos_prelude_ArcMemo<Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)>>, v3 : leptos_prelude_ReadSignal<bool>) () : leptos_dom_Fragment =
    let v4 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr v3 v4 
    let v144 : leptos_prelude_AnyView_ =
        if v5 then
            let v6 : string = "class=\"px-[12px] py-[10px]\""
            let v7 : string = ""
            let v8 : string = " " + v6 + v7 + ""
            let v9 : string = "class=\"flex items-center pb-[6px]\""
            let v10 : string = " " + v9 + v7 + ""
            let v11 : string = "class=\"pr-[15px] [font-size:13px]\""
            let v12 : string = " " + v11 + v7 + ""
            let v13 : string = "Func0::new(move || $0())"
            let v14 : (unit -> leptos_dom_Fragment) = closure261()
            let v15 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v14 v13 
            let v16 : Func0<leptos_dom_Fragment> = method195(v15)
            let v17 : string = "(move || v16())()"
            let v18 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v17 
            let v19 : string = "leptos::prelude::AnyView::from($0)"
            let v20 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v18 v19 
            let v21 : string = "span"
            let v22 : string = "<" + v21 + " " + v12 + ">move || { v20 }</" + v21 + ">"
            let v23 : string = "leptos::prelude::view! { " + v22 + " }"
            let v24 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v23 
            let v25 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v24 |> unbox
            let v26 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v27 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v25 v26 
            let v28 : string = "class=\"h-px flex-1 bg-gray-300\""
            let v29 : string = " " + v28 + v7 + ""
            let v30 : string = "vec![" + v7 + "]"
            let v31 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v30 
            let v32 : string = "leptos::prelude::Fragment::new($0)"
            let v33 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v31 v32 
            let v34 : string = "leptos::prelude::AnyView::from($0)"
            let v35 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v33 v34 
            let v36 : string = "<" + v21 + " " + v29 + ">move || { v35 }</" + v21 + ">"
            let v37 : string = "leptos::prelude::view! { " + v36 + " }"
            let v38 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v37 
            let v39 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v38 |> unbox
            let v40 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v41 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v39 v40 
            let v42 : string = "v41"
            let v43 : string = v42 + v7 
            let v44 : string = v43 + v7 
            let v45 : string = "v27"
            let v46 : string = ", "
            let v47 : string = v45 + v46 
            let v48 : string = v47 + v44 
            let v49 : string = "vec![" + v48 + "]"
            let v50 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v49 
            let v51 : string = "leptos::prelude::Fragment::new($0)"
            let v52 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v50 v51 
            let v53 : string = "leptos::prelude::AnyView::from($0)"
            let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v52 v53 
            let v55 : string = "<" + v21 + " " + v10 + ">move || { v54 }</" + v21 + ">"
            let v56 : string = "leptos::prelude::view! { " + v55 + " }"
            let v57 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v56 
            let v58 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v57 |> unbox
            let v59 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v60 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : (unit -> leptos_dom_Fragment) = method244()
            let v62 : (unit -> leptos_dom_Fragment) = method245(v0)
            let v63 : string = "$0"
            let v64 : (unit -> string) = closure268()
            let v65 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v64 v63 
            let v66 : string = "$0"
            let v67 : (unit -> string) = closure234()
            let v68 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v67 v66 
            let v69 : string = "$0"
            let v70 : (unit -> string) = closure235()
            let v71 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v70 v69 
            let v72 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v71(()) + \" \" + &v68(()) + \" \" + &v65(())"
            let v73 : string = " " + v72 + v7 + ""
            let v74 : string = "$0"
            let v75 : (unit -> string) = closure236()
            let v76 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v75 v74 
            let v77 : string = "class=\"[font-size:12px] text-gray-400\""
            let v78 : string = " " + v77 + v7 + ""
            let v79 : leptos_dom_Fragment = v61 ()
            let v80 : string = "leptos::prelude::AnyView::from($0)"
            let v81 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v79 v80 
            let v82 : string = "dt"
            let v83 : string = "<" + v82 + " " + v78 + ">move || { v81 }</" + v82 + ">"
            let v84 : string = "leptos::prelude::view! { " + v83 + " }"
            let v85 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v84 
            let v86 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v85 |> unbox
            let v87 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v88 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v86 v87 
            let v89 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v76(())"
            let v90 : string = " " + v89 + v7 + ""
            let v91 : leptos_dom_Fragment = v62 ()
            let v92 : string = "leptos::prelude::AnyView::from($0)"
            let v93 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v91 v92 
            let v94 : string = "dd"
            let v95 : string = "<" + v94 + " " + v90 + ">move || { v93 }</" + v94 + ">"
            let v96 : string = "leptos::prelude::view! { " + v95 + " }"
            let v97 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v96 
            let v98 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v97 |> unbox
            let v99 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v100 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v98 v99 
            let v101 : string = "v100"
            let v102 : string = v101 + v7 
            let v103 : string = v102 + v7 
            let v104 : string = "v88"
            let v105 : string = v104 + v46 
            let v106 : string = v105 + v103 
            let v107 : string = "vec![" + v106 + "]"
            let v108 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v107 
            let v109 : string = "leptos::prelude::Fragment::new($0)"
            let v110 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v108 v109 
            let v111 : string = "leptos::prelude::AnyView::from($0)"
            let v112 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v110 v111 
            let v113 : string = "dl"
            let v114 : string = "<" + v113 + " " + v73 + ">move || { v112 }</" + v113 + ">"
            let v115 : string = "leptos::prelude::view! { " + v114 + " }"
            let v116 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v115 
            let v117 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v116 |> unbox
            let v118 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v119 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v117 v118 
            let v120 : string = "v119"
            let v121 : string = v120 + v7 
            let v122 : string = v121 + v7 
            let v123 : string = "v60"
            let v124 : string = v123 + v46 
            let v125 : string = v124 + v122 
            let v126 : string = "vec![" + v125 + "]"
            let v127 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v126 
            let v128 : string = "leptos::prelude::Fragment::new($0)"
            let v129 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v127 v128 
            let v130 : string = "leptos::prelude::AnyView::from($0)"
            let v131 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v129 v130 
            let v132 : string = "div"
            let v133 : string = "<" + v132 + " " + v8 + ">move || { v131 }</" + v132 + ">"
            let v134 : string = "leptos::prelude::view! { " + v133 + " }"
            let v135 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v134 
            let v136 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v135 |> unbox
            let v137 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v138 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v136 v137 
            v138
        else
            let v139 : string = ""
            let v140 : string = "vec![" + v139 + "]"
            let v141 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v140 
            let v142 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v143 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v141 v142 
            v143
    let v145 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v146 : Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)> = Fable.Core.RustInterop.emitRustExpr v2 v145 
    let v147 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
    let v148 : (struct (string * Vec<struct (string * US23 * string * bool * bool)>) []) = Fable.Core.RustInterop.emitRustExpr v146 v147 
    let v149 : uint64 = System.Convert.ToUInt64 v148.Length
    let v150 : bool = v149 = 0UL
    let v4045 : leptos_prelude_AnyView_ =
        if v150 then
            let v151 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
            let v152 : string = ""
            let v153 : string = " " + v151 + v152 + ""
            let v154 : string = "class=\"[height:17px]\""
            let v155 : string = " " + v154 + v152 + ""
            let v156 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v157 : string = "fill=\"none\""
            let v158 : string = "height=\"100%\""
            let v159 : string = "viewBox=\"0 0 24 24\""
            let v160 : string = "stroke-width=\"1.5\""
            let v161 : string = "stroke=\"currentColor\""
            let v162 : string = "class=\"text-red-700\""
            let v163 : string = " " + v156 + v152 + ""
            let v164 : string = " " + v157 + v163 + ""
            let v165 : string = " " + v158 + v164 + ""
            let v166 : string = " " + v159 + v165 + ""
            let v167 : string = " " + v160 + v166 + ""
            let v168 : string = " " + v161 + v167 + ""
            let v169 : string = " " + v162 + v168 + ""
            let v170 : string = "stroke-linecap=\"round\""
            let v171 : string = "stroke-linejoin=\"round\""
            let v172 : string = "d=\"M6 18L18 6M6 6l12 12\""
            let v173 : string = " " + v170 + v152 + ""
            let v174 : string = " " + v171 + v173 + ""
            let v175 : string = " " + v172 + v174 + ""
            let v176 : string = "vec![" + v152 + "]"
            let v177 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v176 
            let v178 : string = "leptos::prelude::Fragment::new($0)"
            let v179 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v177 v178 
            let v180 : string = "leptos::prelude::AnyView::from($0)"
            let v181 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v179 v180 
            let v182 : string = "path"
            let v183 : string = "<" + v182 + " " + v175 + ">move || { v181 }</" + v182 + ">"
            let v184 : string = "leptos::prelude::view! { " + v183 + " }"
            let v185 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v184 
            let v186 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v185 |> unbox
            let v187 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v188 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v186 v187 
            let v189 : string = "v188"
            let v190 : string = v189 + v152 
            let v191 : string = v190 + v152 
            let v192 : string = "vec![" + v191 + "]"
            let v193 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v192 
            let v194 : string = "leptos::prelude::Fragment::new($0)"
            let v195 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v193 v194 
            let v196 : string = "leptos::prelude::AnyView::from($0)"
            let v197 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v195 v196 
            let v198 : string = "svg"
            let v199 : string = "<" + v198 + " " + v169 + ">move || { v197 }</" + v198 + ">"
            let v200 : string = "leptos::prelude::view! { " + v199 + " }"
            let v201 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v200 
            let v202 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v201 |> unbox
            let v203 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v204 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v202 v203 
            let v205 : string = "v204"
            let v206 : string = v205 + v152 
            let v207 : string = v206 + v152 
            let v208 : string = "vec![" + v207 + "]"
            let v209 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v208 
            let v210 : string = "leptos::prelude::Fragment::new($0)"
            let v211 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v209 v210 
            let v212 : string = "leptos::prelude::AnyView::from($0)"
            let v213 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v211 v212 
            let v214 : string = "span"
            let v215 : string = "<" + v214 + " " + v155 + ">move || { v213 }</" + v214 + ">"
            let v216 : string = "leptos::prelude::view! { " + v215 + " }"
            let v217 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v216 
            let v218 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v217 |> unbox
            let v219 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v220 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v218 v219 
            let v221 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
            let v222 : string = " " + v221 + v152 + ""
            let v223 : string = "No account selected"
            (* run_target_args'
            let v224 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v225 : string = "&*$0"
            let v226 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v223 v225 
            let _run_target_args'_v224 = v226 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v227 : string = "&*$0"
            let v228 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v223 v227 
            let _run_target_args'_v224 = v228 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v229 : string = "&*$0"
            let v230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v223 v229 
            let _run_target_args'_v224 = v230 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v231 : Ref<Str> = v223 |> unbox<Ref<Str>>
            let _run_target_args'_v224 = v231 
            #endif
#if FABLE_COMPILER_PYTHON
            let v234 : Ref<Str> = v223 |> unbox<Ref<Str>>
            let _run_target_args'_v224 = v234 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v237 : Ref<Str> = v223 |> unbox<Ref<Str>>
            let _run_target_args'_v224 = v237 
            #endif
#else
            let v240 : Ref<Str> = v223 |> unbox<Ref<Str>>
            let _run_target_args'_v224 = v240 
            #endif
            let v243 : Ref<Str> = _run_target_args'_v224 
            (* run_target_args'
            let v248 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v249 : string = "String::from($0)"
            let v250 : std_string_String = Fable.Core.RustInterop.emitRustExpr v243 v249 
            let _run_target_args'_v248 = v250 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v251 : string = "String::from($0)"
            let v252 : std_string_String = Fable.Core.RustInterop.emitRustExpr v243 v251 
            let _run_target_args'_v248 = v252 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v253 : string = "String::from($0)"
            let v254 : std_string_String = Fable.Core.RustInterop.emitRustExpr v243 v253 
            let _run_target_args'_v248 = v254 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v255 : std_string_String = v243 |> unbox<std_string_String>
            let _run_target_args'_v248 = v255 
            #endif
#if FABLE_COMPILER_PYTHON
            let v258 : std_string_String = v243 |> unbox<std_string_String>
            let _run_target_args'_v248 = v258 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v261 : std_string_String = v243 |> unbox<std_string_String>
            let _run_target_args'_v248 = v261 
            #endif
#else
            let v264 : std_string_String = v243 |> unbox<std_string_String>
            let _run_target_args'_v248 = v264 
            #endif
            let v267 : std_string_String = _run_target_args'_v248 
            let v272 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v273 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v267 v272 
            let v274 : string = "v273"
            let v275 : string = v274 + v152 
            let v276 : string = v275 + v152 
            let v277 : string = "vec![" + v276 + "]"
            let v278 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v277 
            let v279 : string = "leptos::prelude::Fragment::new($0)"
            let v280 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v278 v279 
            let v281 : string = "leptos::prelude::AnyView::from($0)"
            let v282 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v280 v281 
            let v283 : string = "pre"
            let v284 : string = "<" + v283 + " " + v222 + ">move || { v282 }</" + v283 + ">"
            let v285 : string = "leptos::prelude::view! { " + v284 + " }"
            let v286 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v285 
            let v287 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v286 |> unbox
            let v288 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v289 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v287 v288 
            let v290 : string = "v289"
            let v291 : string = v290 + v152 
            let v292 : string = v291 + v152 
            let v293 : string = "v220"
            let v294 : string = ", "
            let v295 : string = v293 + v294 
            let v296 : string = v295 + v292 
            let v297 : string = "vec![" + v296 + "]"
            let v298 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v297 
            let v299 : string = "leptos::prelude::Fragment::new($0)"
            let v300 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v298 v299 
            let v301 : string = "leptos::prelude::AnyView::from($0)"
            let v302 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v300 v301 
            let v303 : string = "div"
            let v304 : string = "<" + v303 + " " + v153 + ">move || { v302 }</" + v303 + ">"
            let v305 : string = "leptos::prelude::view! { " + v304 + " }"
            let v306 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v305 
            let v307 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v306 |> unbox
            let v308 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v309 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v307 v308 
            v309
        else
            let v310 : string = $"leptos::prelude::ArcMemo::get(&$0)"
            let v311 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v1 v310 
            let v312 : ((struct (string * unativeint * Heap5) []) option -> US53) = method138()
            let v313 : (std_string_String -> US53) = method139()
            let v314 : US53 = match v311 with Ok x -> v312 x | Error x -> v313 x
            let v337 : US46 =
                match v314 with
                | US53_1(v334) -> (* Error *)
                    US46_1(v334)
                | US53_0(v315) -> (* Ok *)
                    let v316 : ((struct (string * unativeint * Heap5) []) -> US47) = method140()
                    let v317 : US47 option = v315 |> Option.map v316 
                    let v328 : US47 = US47_1
                    let v329 : US47 = v317 |> Option.defaultValue v328 
                    US46_0(v329)
            match v337 with
            | US46_1(v3882) -> (* Error *)
                let v3883 : string = "fable_library_rust::String_::fromString($0)"
                let v3884 : string = Fable.Core.RustInterop.emitRustExpr v3882 v3883 
                let v3885 : string = "class=\"flex flex-1 items-center [gap:4px] [padding:5px]\""
                let v3886 : string = ""
                let v3887 : string = " " + v3885 + v3886 + ""
                let v3888 : string = "class=\"[height:17px]\""
                let v3889 : string = " " + v3888 + v3886 + ""
                let v3890 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                let v3891 : string = "fill=\"none\""
                let v3892 : string = "height=\"100%\""
                let v3893 : string = "viewBox=\"0 0 24 24\""
                let v3894 : string = "stroke-width=\"1.5\""
                let v3895 : string = "stroke=\"currentColor\""
                let v3896 : string = "class=\"text-red-700\""
                let v3897 : string = " " + v3890 + v3886 + ""
                let v3898 : string = " " + v3891 + v3897 + ""
                let v3899 : string = " " + v3892 + v3898 + ""
                let v3900 : string = " " + v3893 + v3899 + ""
                let v3901 : string = " " + v3894 + v3900 + ""
                let v3902 : string = " " + v3895 + v3901 + ""
                let v3903 : string = " " + v3896 + v3902 + ""
                let v3904 : string = "stroke-linecap=\"round\""
                let v3905 : string = "stroke-linejoin=\"round\""
                let v3906 : string = "d=\"M6 18L18 6M6 6l12 12\""
                let v3907 : string = " " + v3904 + v3886 + ""
                let v3908 : string = " " + v3905 + v3907 + ""
                let v3909 : string = " " + v3906 + v3908 + ""
                let v3910 : string = "vec![" + v3886 + "]"
                let v3911 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3910 
                let v3912 : string = "leptos::prelude::Fragment::new($0)"
                let v3913 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3911 v3912 
                let v3914 : string = "leptos::prelude::AnyView::from($0)"
                let v3915 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3913 v3914 
                let v3916 : string = "path"
                let v3917 : string = "<" + v3916 + " " + v3909 + ">move || { v3915 }</" + v3916 + ">"
                let v3918 : string = "leptos::prelude::view! { " + v3917 + " }"
                let v3919 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3918 
                let v3920 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v3919 |> unbox
                let v3921 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v3922 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3920 v3921 
                let v3923 : string = "v3922"
                let v3924 : string = v3923 + v3886 
                let v3925 : string = v3924 + v3886 
                let v3926 : string = "vec![" + v3925 + "]"
                let v3927 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3926 
                let v3928 : string = "leptos::prelude::Fragment::new($0)"
                let v3929 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3927 v3928 
                let v3930 : string = "leptos::prelude::AnyView::from($0)"
                let v3931 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3929 v3930 
                let v3932 : string = "svg"
                let v3933 : string = "<" + v3932 + " " + v3903 + ">move || { v3931 }</" + v3932 + ">"
                let v3934 : string = "leptos::prelude::view! { " + v3933 + " }"
                let v3935 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3934 
                let v3936 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3935 |> unbox
                let v3937 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v3938 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3936 v3937 
                let v3939 : string = "v3938"
                let v3940 : string = v3939 + v3886 
                let v3941 : string = v3940 + v3886 
                let v3942 : string = "vec![" + v3941 + "]"
                let v3943 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3942 
                let v3944 : string = "leptos::prelude::Fragment::new($0)"
                let v3945 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3943 v3944 
                let v3946 : string = "leptos::prelude::AnyView::from($0)"
                let v3947 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3945 v3946 
                let v3948 : string = "span"
                let v3949 : string = "<" + v3948 + " " + v3889 + ">move || { v3947 }</" + v3948 + ">"
                let v3950 : string = "leptos::prelude::view! { " + v3949 + " }"
                let v3951 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3950 
                let v3952 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v3951 |> unbox
                let v3953 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v3954 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3952 v3953 
                let v3955 : string = "class=\"[overflow-y:auto] [text-wrap:wrap]\""
                let v3956 : string = " " + v3955 + v3886 + ""
                (* run_target_args'
                let v3957 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3958 : string = "&*$0"
                let v3959 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3884 v3958 
                let _run_target_args'_v3957 = v3959 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3960 : string = "&*$0"
                let v3961 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3884 v3960 
                let _run_target_args'_v3957 = v3961 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3962 : string = "&*$0"
                let v3963 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3884 v3962 
                let _run_target_args'_v3957 = v3963 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3964 : Ref<Str> = v3884 |> unbox<Ref<Str>>
                let _run_target_args'_v3957 = v3964 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3967 : Ref<Str> = v3884 |> unbox<Ref<Str>>
                let _run_target_args'_v3957 = v3967 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3970 : Ref<Str> = v3884 |> unbox<Ref<Str>>
                let _run_target_args'_v3957 = v3970 
                #endif
#else
                let v3973 : Ref<Str> = v3884 |> unbox<Ref<Str>>
                let _run_target_args'_v3957 = v3973 
                #endif
                let v3976 : Ref<Str> = _run_target_args'_v3957 
                (* run_target_args'
                let v3981 : unit = ()
                run_target_args' *)
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3982 : string = "String::from($0)"
                let v3983 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3976 v3982 
                let _run_target_args'_v3981 = v3983 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3984 : string = "String::from($0)"
                let v3985 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3976 v3984 
                let _run_target_args'_v3981 = v3985 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3986 : string = "String::from($0)"
                let v3987 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3976 v3986 
                let _run_target_args'_v3981 = v3987 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3988 : std_string_String = v3976 |> unbox<std_string_String>
                let _run_target_args'_v3981 = v3988 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3991 : std_string_String = v3976 |> unbox<std_string_String>
                let _run_target_args'_v3981 = v3991 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3994 : std_string_String = v3976 |> unbox<std_string_String>
                let _run_target_args'_v3981 = v3994 
                #endif
#else
                let v3997 : std_string_String = v3976 |> unbox<std_string_String>
                let _run_target_args'_v3981 = v3997 
                #endif
                let v4000 : std_string_String = _run_target_args'_v3981 
                let v4005 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                let v4006 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4000 v4005 
                let v4007 : string = "v4006"
                let v4008 : string = v4007 + v3886 
                let v4009 : string = v4008 + v3886 
                let v4010 : string = "vec![" + v4009 + "]"
                let v4011 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4010 
                let v4012 : string = "leptos::prelude::Fragment::new($0)"
                let v4013 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4011 v4012 
                let v4014 : string = "leptos::prelude::AnyView::from($0)"
                let v4015 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4013 v4014 
                let v4016 : string = "pre"
                let v4017 : string = "<" + v4016 + " " + v3956 + ">move || { v4015 }</" + v4016 + ">"
                let v4018 : string = "leptos::prelude::view! { " + v4017 + " }"
                let v4019 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4018 
                let v4020 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v4019 |> unbox
                let v4021 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v4022 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4020 v4021 
                let v4023 : string = "v4022"
                let v4024 : string = v4023 + v3886 
                let v4025 : string = v4024 + v3886 
                let v4026 : string = "v3954"
                let v4027 : string = ", "
                let v4028 : string = v4026 + v4027 
                let v4029 : string = v4028 + v4025 
                let v4030 : string = "vec![" + v4029 + "]"
                let v4031 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4030 
                let v4032 : string = "leptos::prelude::Fragment::new($0)"
                let v4033 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4031 v4032 
                let v4034 : string = "leptos::prelude::AnyView::from($0)"
                let v4035 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4033 v4034 
                let v4036 : string = "div"
                let v4037 : string = "<" + v4036 + " " + v3887 + ">move || { v4035 }</" + v4036 + ">"
                let v4038 : string = "leptos::prelude::view! { " + v4037 + " }"
                let v4039 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4038 
                let v4040 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4039 |> unbox
                let v4041 : string = "leptos::prelude::IntoAny::into_any($0)"
                let v4042 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4040 v4041 
                v4042
            | US46_0(v338) -> (* Ok *)
                match v338 with
                | US47_0(v339) -> (* Some *)
                    let v340 : leptos_prelude_ArcRwSignal<Heap1> = v0.l0
                    let v341 : string = "Box::pin($0)"
                    let v342 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v340 v341 
                    let v343 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                    let v344 : Heap1 = Fable.Core.RustInterop.emitRustExpr v342 v343 
                    let v345 : leptos_prelude_ArcRwSignal<Heap0> = v344.l3
                    let v346 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
                    let v347 : Heap0 = Fable.Core.RustInterop.emitRustExpr v345 v346 
                    let v348 : US1 = v347.l4
                    let v349 : bool =
                        match v348 with
                        | US1_0 -> (* Details *)
                            true
                        | _ ->
                            false
                    if v349 then
                        let v350 : string = "class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\""
                        let v351 : string = ""
                        let v352 : string = " " + v350 + v351 + ""
                        let v353 : string = "$0.to_vec()"
                        let v354 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v339 v353 
                        let v355 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                        let v356 : bool = Fable.Core.RustInterop.emitRustExpr v354 v355 
                        let v357 : string = "x"
                        let struct (v358 : string, v359 : unativeint, v360 : Heap5) = Fable.Core.RustInterop.emitRustExpr () v357 
                        let v361 : std_string_String = v360.l0
                        let v362 : std_string_String = v360.l1
                        let v363 : std_string_String = v360.l2
                        let v364 : std_string_String = v360.l3
                        let v365 : std_string_String = v360.l4
                        let v366 : std_string_String = v360.l5
                        let v367 : uint32 = v360.l6
                        let v368 : (struct (std_string_String * std_string_String option) []) = v360.l7
                        let v369 : float = v360.l8
                        let v370 : bool = v360.l9
                        let v371 : float = v360.l10
                        let v372 : (std_string_String []) = v360.l11
                        let v373 : (unativeint -> int64) = int64
                        let v374 : int64 = v373 v359
                        let v377 : string = "transaction.render (1)"
                        let v378 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v379 : bool = Fable.Core.RustInterop.emitRustExpr v377 v378 
                        let v380 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
                        let v381 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v380 
                        let v382 : string = "$0.unwrap()"
                        let v383 : Heap2 = Fable.Core.RustInterop.emitRustExpr v381 v382 
                        let v384 : string = "class=\"flex flex-1 flex-col overflow-x-auto\""
                        let v385 : string = " " + v384 + v351 + ""
                        let v386 : string = "class=\"flex items-center pb-[6px]\""
                        let v387 : string = " " + v386 + v351 + ""
                        let v388 : string = "class=\"pr-[15px] [font-size:13px]\""
                        let v389 : string = " " + v388 + v351 + ""
                        let v390 : string = "Func0::new(move || $0())"
                        let v391 : (unit -> leptos_dom_Fragment) = closure269(v374)
                        let v392 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v391 v390 
                        let v393 : Func0<leptos_dom_Fragment> = method195(v392)
                        let v394 : string = "(move || v393())()"
                        let v395 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v394 
                        let v396 : string = "leptos::prelude::AnyView::from($0)"
                        let v397 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v395 v396 
                        let v398 : string = "span"
                        let v399 : string = "<" + v398 + " " + v389 + ">move || { v397 }</" + v398 + ">"
                        let v400 : string = "leptos::prelude::view! { " + v399 + " }"
                        let v401 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v400 
                        let v402 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v401 |> unbox
                        let v403 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v404 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v402 v403 
                        let v405 : string = "class=\"h-px flex-1 bg-gray-300\""
                        let v406 : string = " " + v405 + v351 + ""
                        let v407 : string = "vec![" + v351 + "]"
                        let v408 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v407 
                        let v409 : string = "leptos::prelude::Fragment::new($0)"
                        let v410 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v408 v409 
                        let v411 : string = "leptos::prelude::AnyView::from($0)"
                        let v412 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v410 v411 
                        let v413 : string = "<" + v398 + " " + v406 + ">move || { v412 }</" + v398 + ">"
                        let v414 : string = "leptos::prelude::view! { " + v413 + " }"
                        let v415 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v414 
                        let v416 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v415 |> unbox
                        let v417 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v418 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v416 v417 
                        let v419 : string = "v418"
                        let v420 : string = v419 + v351 
                        let v421 : string = v420 + v351 
                        let v422 : string = "v404"
                        let v423 : string = ", "
                        let v424 : string = v422 + v423 
                        let v425 : string = v424 + v421 
                        let v426 : string = "vec![" + v425 + "]"
                        let v427 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v426 
                        let v428 : string = "leptos::prelude::Fragment::new($0)"
                        let v429 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v427 v428 
                        let v430 : string = "leptos::prelude::AnyView::from($0)"
                        let v431 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v429 v430 
                        let v432 : string = "<" + v398 + " " + v387 + ">move || { v431 }</" + v398 + ">"
                        let v433 : string = "leptos::prelude::view! { " + v432 + " }"
                        let v434 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v433 
                        let v435 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v434 |> unbox
                        let v436 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v437 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v435 v436 
                        let v438 : string = "class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\""
                        let v439 : string = " " + v438 + v351 + ""
                        let v440 : (unit -> leptos_dom_Fragment) = method248()
                        let v441 : (unit -> leptos_dom_Fragment) = method249(v358)
                        let v442 : string = "$0"
                        let v443 : (unit -> string) = closure272()
                        let v444 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v443 v442 
                        let v445 : string = "$0"
                        let v446 : (unit -> string) = closure273()
                        let v447 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v446 v445 
                        let v448 : string = "$0"
                        let v449 : (unit -> string) = closure235()
                        let v450 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v448 
                        let v451 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v450(()) + \" \" + &v447(()) + \" \" + &v444(())"
                        let v452 : string = " " + v451 + v351 + ""
                        let v453 : string = "$0"
                        let v454 : (unit -> string) = closure236()
                        let v455 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v453 
                        let v456 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v457 : string = " " + v456 + v351 + ""
                        let v458 : leptos_dom_Fragment = v440 ()
                        let v459 : string = "leptos::prelude::AnyView::from($0)"
                        let v460 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v458 v459 
                        let v461 : string = "dt"
                        let v462 : string = "<" + v461 + " " + v457 + ">move || { v460 }</" + v461 + ">"
                        let v463 : string = "leptos::prelude::view! { " + v462 + " }"
                        let v464 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v463 
                        let v465 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v464 |> unbox
                        let v466 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v467 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v465 v466 
                        let v468 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v455(())"
                        let v469 : string = " " + v468 + v351 + ""
                        let v470 : leptos_dom_Fragment = v441 ()
                        let v471 : string = "leptos::prelude::AnyView::from($0)"
                        let v472 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v470 v471 
                        let v473 : string = "dd"
                        let v474 : string = "<" + v473 + " " + v469 + ">move || { v472 }</" + v473 + ">"
                        let v475 : string = "leptos::prelude::view! { " + v474 + " }"
                        let v476 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v475 
                        let v477 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v476 |> unbox
                        let v478 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v479 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v477 v478 
                        let v480 : string = "v479"
                        let v481 : string = v480 + v351 
                        let v482 : string = v481 + v351 
                        let v483 : string = "v467"
                        let v484 : string = v483 + v423 
                        let v485 : string = v484 + v482 
                        let v486 : string = "vec![" + v485 + "]"
                        let v487 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v486 
                        let v488 : string = "leptos::prelude::Fragment::new($0)"
                        let v489 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v487 v488 
                        let v490 : string = "leptos::prelude::AnyView::from($0)"
                        let v491 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v489 v490 
                        let v492 : string = "dl"
                        let v493 : string = "<" + v492 + " " + v452 + ">move || { v491 }</" + v492 + ">"
                        let v494 : string = "leptos::prelude::view! { " + v493 + " }"
                        let v495 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v494 
                        let v496 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v495 |> unbox
                        let v497 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v498 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v496 v497 
                        let v499 : (unit -> leptos_dom_Fragment) = method250()
                        let v500 : (unit -> leptos_dom_Fragment) = method251(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v501 : string = "$0"
                        let v502 : (unit -> string) = closure276()
                        let v503 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v502 v501 
                        let v504 : string = "$0"
                        let v505 : (unit -> string) = closure277()
                        let v506 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v505 v504 
                        let v507 : string = "$0"
                        let v508 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v507 
                        let v509 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v508(()) + \" \" + &v506(()) + \" \" + &v503(())"
                        let v510 : string = " " + v509 + v351 + ""
                        let v511 : string = "$0"
                        let v512 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v511 
                        let v513 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v514 : string = " " + v513 + v351 + ""
                        let v515 : leptos_dom_Fragment = v499 ()
                        let v516 : string = "leptos::prelude::AnyView::from($0)"
                        let v517 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v515 v516 
                        let v518 : string = "<" + v461 + " " + v514 + ">move || { v517 }</" + v461 + ">"
                        let v519 : string = "leptos::prelude::view! { " + v518 + " }"
                        let v520 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v519 
                        let v521 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v520 |> unbox
                        let v522 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v523 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v521 v522 
                        let v524 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v512(())"
                        let v525 : string = " " + v524 + v351 + ""
                        let v526 : leptos_dom_Fragment = v500 ()
                        let v527 : string = "leptos::prelude::AnyView::from($0)"
                        let v528 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v526 v527 
                        let v529 : string = "<" + v473 + " " + v525 + ">move || { v528 }</" + v473 + ">"
                        let v530 : string = "leptos::prelude::view! { " + v529 + " }"
                        let v531 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v530 
                        let v532 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v531 |> unbox
                        let v533 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v534 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v532 v533 
                        let v535 : string = "v534"
                        let v536 : string = v535 + v351 
                        let v537 : string = v536 + v351 
                        let v538 : string = "v523"
                        let v539 : string = v538 + v423 
                        let v540 : string = v539 + v537 
                        let v541 : string = "vec![" + v540 + "]"
                        let v542 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v541 
                        let v543 : string = "leptos::prelude::Fragment::new($0)"
                        let v544 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v542 v543 
                        let v545 : string = "leptos::prelude::AnyView::from($0)"
                        let v546 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v544 v545 
                        let v547 : string = "<" + v492 + " " + v510 + ">move || { v546 }</" + v492 + ">"
                        let v548 : string = "leptos::prelude::view! { " + v547 + " }"
                        let v549 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v548 
                        let v550 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v549 |> unbox
                        let v551 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v552 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v550 v551 
                        let v553 : (unit -> leptos_dom_Fragment) = method252()
                        let v554 : (unit -> leptos_dom_Fragment) = method253(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v555 : string = "$0"
                        let v556 : (unit -> string) = closure280()
                        let v557 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v556 v555 
                        let v558 : string = "$0"
                        let v559 : (unit -> string) = closure281()
                        let v560 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v559 v558 
                        let v561 : string = "$0"
                        let v562 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v561 
                        let v563 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v562(()) + \" \" + &v560(()) + \" \" + &v557(())"
                        let v564 : string = " " + v563 + v351 + ""
                        let v565 : string = "$0"
                        let v566 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v565 
                        let v567 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v568 : string = " " + v567 + v351 + ""
                        let v569 : leptos_dom_Fragment = v553 ()
                        let v570 : string = "leptos::prelude::AnyView::from($0)"
                        let v571 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v569 v570 
                        let v572 : string = "<" + v461 + " " + v568 + ">move || { v571 }</" + v461 + ">"
                        let v573 : string = "leptos::prelude::view! { " + v572 + " }"
                        let v574 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v573 
                        let v575 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v574 |> unbox
                        let v576 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v577 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v575 v576 
                        let v578 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v566(())"
                        let v579 : string = " " + v578 + v351 + ""
                        let v580 : leptos_dom_Fragment = v554 ()
                        let v581 : string = "leptos::prelude::AnyView::from($0)"
                        let v582 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v580 v581 
                        let v583 : string = "<" + v473 + " " + v579 + ">move || { v582 }</" + v473 + ">"
                        let v584 : string = "leptos::prelude::view! { " + v583 + " }"
                        let v585 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v584 
                        let v586 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v585 |> unbox
                        let v587 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v588 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v586 v587 
                        let v589 : string = "v588"
                        let v590 : string = v589 + v351 
                        let v591 : string = v590 + v351 
                        let v592 : string = "v577"
                        let v593 : string = v592 + v423 
                        let v594 : string = v593 + v591 
                        let v595 : string = "vec![" + v594 + "]"
                        let v596 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v595 
                        let v597 : string = "leptos::prelude::Fragment::new($0)"
                        let v598 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v596 v597 
                        let v599 : string = "leptos::prelude::AnyView::from($0)"
                        let v600 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v598 v599 
                        let v601 : string = "<" + v492 + " " + v564 + ">move || { v600 }</" + v492 + ">"
                        let v602 : string = "leptos::prelude::view! { " + v601 + " }"
                        let v603 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v602 
                        let v604 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v603 |> unbox
                        let v605 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v606 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v604 v605 
                        let v607 : (unit -> leptos_dom_Fragment) = method254()
                        let v608 : (unit -> leptos_dom_Fragment) = method255(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v609 : string = "$0"
                        let v610 : (unit -> string) = closure284()
                        let v611 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v610 v609 
                        let v612 : string = "$0"
                        let v613 : (unit -> string) = closure285()
                        let v614 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v613 v612 
                        let v615 : string = "$0"
                        let v616 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v615 
                        let v617 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v616(()) + \" \" + &v614(()) + \" \" + &v611(())"
                        let v618 : string = " " + v617 + v351 + ""
                        let v619 : string = "$0"
                        let v620 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v619 
                        let v621 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v622 : string = " " + v621 + v351 + ""
                        let v623 : leptos_dom_Fragment = v607 ()
                        let v624 : string = "leptos::prelude::AnyView::from($0)"
                        let v625 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v623 v624 
                        let v626 : string = "<" + v461 + " " + v622 + ">move || { v625 }</" + v461 + ">"
                        let v627 : string = "leptos::prelude::view! { " + v626 + " }"
                        let v628 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v627 
                        let v629 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v628 |> unbox
                        let v630 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v631 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v629 v630 
                        let v632 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v620(())"
                        let v633 : string = " " + v632 + v351 + ""
                        let v634 : leptos_dom_Fragment = v608 ()
                        let v635 : string = "leptos::prelude::AnyView::from($0)"
                        let v636 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v634 v635 
                        let v637 : string = "<" + v473 + " " + v633 + ">move || { v636 }</" + v473 + ">"
                        let v638 : string = "leptos::prelude::view! { " + v637 + " }"
                        let v639 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v638 
                        let v640 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v639 |> unbox
                        let v641 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v642 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v640 v641 
                        let v643 : string = "v642"
                        let v644 : string = v643 + v351 
                        let v645 : string = v644 + v351 
                        let v646 : string = "v631"
                        let v647 : string = v646 + v423 
                        let v648 : string = v647 + v645 
                        let v649 : string = "vec![" + v648 + "]"
                        let v650 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v649 
                        let v651 : string = "leptos::prelude::Fragment::new($0)"
                        let v652 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v650 v651 
                        let v653 : string = "leptos::prelude::AnyView::from($0)"
                        let v654 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v652 v653 
                        let v655 : string = "<" + v492 + " " + v618 + ">move || { v654 }</" + v492 + ">"
                        let v656 : string = "leptos::prelude::view! { " + v655 + " }"
                        let v657 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v656 
                        let v658 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v657 |> unbox
                        let v659 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v660 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v658 v659 
                        let v661 : (unit -> leptos_dom_Fragment) = method256()
                        let v662 : (unit -> leptos_dom_Fragment) = method257(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v663 : string = "$0"
                        let v664 : (unit -> string) = closure299()
                        let v665 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v664 v663 
                        let v666 : string = "$0"
                        let v667 : (unit -> string) = closure300()
                        let v668 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v667 v666 
                        let v669 : string = "$0"
                        let v670 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v669 
                        let v671 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v670(()) + \" \" + &v668(()) + \" \" + &v665(())"
                        let v672 : string = " " + v671 + v351 + ""
                        let v673 : string = "$0"
                        let v674 : (unit -> string) = closure301()
                        let v675 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v674 v673 
                        let v676 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v677 : string = " " + v676 + v351 + ""
                        let v678 : leptos_dom_Fragment = v661 ()
                        let v679 : string = "leptos::prelude::AnyView::from($0)"
                        let v680 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v678 v679 
                        let v681 : string = "<" + v461 + " " + v677 + ">move || { v680 }</" + v461 + ">"
                        let v682 : string = "leptos::prelude::view! { " + v681 + " }"
                        let v683 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v682 
                        let v684 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v683 |> unbox
                        let v685 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v686 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v684 v685 
                        let v687 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v675(())"
                        let v688 : string = " " + v687 + v351 + ""
                        let v689 : leptos_dom_Fragment = v662 ()
                        let v690 : string = "leptos::prelude::AnyView::from($0)"
                        let v691 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v689 v690 
                        let v692 : string = "<" + v473 + " " + v688 + ">move || { v691 }</" + v473 + ">"
                        let v693 : string = "leptos::prelude::view! { " + v692 + " }"
                        let v694 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v693 
                        let v695 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v694 |> unbox
                        let v696 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v697 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v695 v696 
                        let v698 : string = "v697"
                        let v699 : string = v698 + v351 
                        let v700 : string = v699 + v351 
                        let v701 : string = "v686"
                        let v702 : string = v701 + v423 
                        let v703 : string = v702 + v700 
                        let v704 : string = "vec![" + v703 + "]"
                        let v705 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v704 
                        let v706 : string = "leptos::prelude::Fragment::new($0)"
                        let v707 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v705 v706 
                        let v708 : string = "leptos::prelude::AnyView::from($0)"
                        let v709 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v707 v708 
                        let v710 : string = "<" + v492 + " " + v672 + ">move || { v709 }</" + v492 + ">"
                        let v711 : string = "leptos::prelude::view! { " + v710 + " }"
                        let v712 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v711 
                        let v713 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v712 |> unbox
                        let v714 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v715 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v713 v714 
                        let v716 : (unit -> leptos_dom_Fragment) = method262()
                        let v717 : (unit -> leptos_dom_Fragment) = method263(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v718 : string = "$0"
                        let v719 : (unit -> string) = closure304()
                        let v720 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v719 v718 
                        let v721 : string = "$0"
                        let v722 : (unit -> string) = closure305()
                        let v723 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v722 v721 
                        let v724 : string = "$0"
                        let v725 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v724 
                        let v726 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v725(()) + \" \" + &v723(()) + \" \" + &v720(())"
                        let v727 : string = " " + v726 + v351 + ""
                        let v728 : string = "$0"
                        let v729 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v728 
                        let v730 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v731 : string = " " + v730 + v351 + ""
                        let v732 : leptos_dom_Fragment = v716 ()
                        let v733 : string = "leptos::prelude::AnyView::from($0)"
                        let v734 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v732 v733 
                        let v735 : string = "<" + v461 + " " + v731 + ">move || { v734 }</" + v461 + ">"
                        let v736 : string = "leptos::prelude::view! { " + v735 + " }"
                        let v737 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v736 
                        let v738 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v737 |> unbox
                        let v739 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v740 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v738 v739 
                        let v741 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v729(())"
                        let v742 : string = " " + v741 + v351 + ""
                        let v743 : leptos_dom_Fragment = v717 ()
                        let v744 : string = "leptos::prelude::AnyView::from($0)"
                        let v745 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v743 v744 
                        let v746 : string = "<" + v473 + " " + v742 + ">move || { v745 }</" + v473 + ">"
                        let v747 : string = "leptos::prelude::view! { " + v746 + " }"
                        let v748 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v747 
                        let v749 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v748 |> unbox
                        let v750 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v751 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v749 v750 
                        let v752 : string = "v751"
                        let v753 : string = v752 + v351 
                        let v754 : string = v753 + v351 
                        let v755 : string = "v740"
                        let v756 : string = v755 + v423 
                        let v757 : string = v756 + v754 
                        let v758 : string = "vec![" + v757 + "]"
                        let v759 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v758 
                        let v760 : string = "leptos::prelude::Fragment::new($0)"
                        let v761 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v759 v760 
                        let v762 : string = "leptos::prelude::AnyView::from($0)"
                        let v763 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v761 v762 
                        let v764 : string = "<" + v492 + " " + v727 + ">move || { v763 }</" + v492 + ">"
                        let v765 : string = "leptos::prelude::view! { " + v764 + " }"
                        let v766 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v765 
                        let v767 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v766 |> unbox
                        let v768 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v769 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v767 v768 
                        let v770 : (unit -> leptos_dom_Fragment) = method264()
                        let v771 : (unit -> leptos_dom_Fragment) = method265(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v772 : string = "$0"
                        let v773 : (unit -> string) = closure308()
                        let v774 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v773 v772 
                        let v775 : string = "$0"
                        let v776 : (unit -> string) = closure309()
                        let v777 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v776 v775 
                        let v778 : string = "$0"
                        let v779 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v778 
                        let v780 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v779(()) + \" \" + &v777(()) + \" \" + &v774(())"
                        let v781 : string = " " + v780 + v351 + ""
                        let v782 : string = "$0"
                        let v783 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v782 
                        let v784 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v785 : string = " " + v784 + v351 + ""
                        let v786 : leptos_dom_Fragment = v770 ()
                        let v787 : string = "leptos::prelude::AnyView::from($0)"
                        let v788 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v786 v787 
                        let v789 : string = "<" + v461 + " " + v785 + ">move || { v788 }</" + v461 + ">"
                        let v790 : string = "leptos::prelude::view! { " + v789 + " }"
                        let v791 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v790 
                        let v792 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v791 |> unbox
                        let v793 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v794 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v792 v793 
                        let v795 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v783(())"
                        let v796 : string = " " + v795 + v351 + ""
                        let v797 : leptos_dom_Fragment = v771 ()
                        let v798 : string = "leptos::prelude::AnyView::from($0)"
                        let v799 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v797 v798 
                        let v800 : string = "<" + v473 + " " + v796 + ">move || { v799 }</" + v473 + ">"
                        let v801 : string = "leptos::prelude::view! { " + v800 + " }"
                        let v802 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v801 
                        let v803 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v802 |> unbox
                        let v804 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v805 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v803 v804 
                        let v806 : string = "v805"
                        let v807 : string = v806 + v351 
                        let v808 : string = v807 + v351 
                        let v809 : string = "v794"
                        let v810 : string = v809 + v423 
                        let v811 : string = v810 + v808 
                        let v812 : string = "vec![" + v811 + "]"
                        let v813 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v812 
                        let v814 : string = "leptos::prelude::Fragment::new($0)"
                        let v815 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v813 v814 
                        let v816 : string = "leptos::prelude::AnyView::from($0)"
                        let v817 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v815 v816 
                        let v818 : string = "<" + v492 + " " + v781 + ">move || { v817 }</" + v492 + ">"
                        let v819 : string = "leptos::prelude::view! { " + v818 + " }"
                        let v820 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v819 
                        let v821 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v820 |> unbox
                        let v822 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v823 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v821 v822 
                        let v824 : (unit -> leptos_dom_Fragment) = method266()
                        let v825 : (unit -> leptos_dom_Fragment) = method267(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v826 : string = "$0"
                        let v827 : (unit -> string) = closure312()
                        let v828 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v827 v826 
                        let v829 : string = "$0"
                        let v830 : (unit -> string) = closure313()
                        let v831 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v830 v829 
                        let v832 : string = "$0"
                        let v833 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v832 
                        let v834 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v833(()) + \" \" + &v831(()) + \" \" + &v828(())"
                        let v835 : string = " " + v834 + v351 + ""
                        let v836 : string = "$0"
                        let v837 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v836 
                        let v838 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v839 : string = " " + v838 + v351 + ""
                        let v840 : leptos_dom_Fragment = v824 ()
                        let v841 : string = "leptos::prelude::AnyView::from($0)"
                        let v842 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v840 v841 
                        let v843 : string = "<" + v461 + " " + v839 + ">move || { v842 }</" + v461 + ">"
                        let v844 : string = "leptos::prelude::view! { " + v843 + " }"
                        let v845 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v844 
                        let v846 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v845 |> unbox
                        let v847 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v848 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v846 v847 
                        let v849 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v837(())"
                        let v850 : string = " " + v849 + v351 + ""
                        let v851 : leptos_dom_Fragment = v825 ()
                        let v852 : string = "leptos::prelude::AnyView::from($0)"
                        let v853 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v851 v852 
                        let v854 : string = "<" + v473 + " " + v850 + ">move || { v853 }</" + v473 + ">"
                        let v855 : string = "leptos::prelude::view! { " + v854 + " }"
                        let v856 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v855 
                        let v857 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v856 |> unbox
                        let v858 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v859 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v857 v858 
                        let v860 : string = "v859"
                        let v861 : string = v860 + v351 
                        let v862 : string = v861 + v351 
                        let v863 : string = "v848"
                        let v864 : string = v863 + v423 
                        let v865 : string = v864 + v862 
                        let v866 : string = "vec![" + v865 + "]"
                        let v867 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v866 
                        let v868 : string = "leptos::prelude::Fragment::new($0)"
                        let v869 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v867 v868 
                        let v870 : string = "leptos::prelude::AnyView::from($0)"
                        let v871 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v869 v870 
                        let v872 : string = "<" + v492 + " " + v835 + ">move || { v871 }</" + v492 + ">"
                        let v873 : string = "leptos::prelude::view! { " + v872 + " }"
                        let v874 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v873 
                        let v875 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v874 |> unbox
                        let v876 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v877 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v875 v876 
                        let v878 : (unit -> leptos_dom_Fragment) = method268()
                        let v879 : (unit -> leptos_dom_Fragment) = method269(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v880 : string = "$0"
                        let v881 : (unit -> string) = closure316()
                        let v882 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v881 v880 
                        let v883 : string = "$0"
                        let v884 : (unit -> string) = closure317()
                        let v885 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v884 v883 
                        let v886 : string = "$0"
                        let v887 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v886 
                        let v888 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v887(()) + \" \" + &v885(()) + \" \" + &v882(())"
                        let v889 : string = " " + v888 + v351 + ""
                        let v890 : string = "$0"
                        let v891 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v890 
                        let v892 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v893 : string = " " + v892 + v351 + ""
                        let v894 : leptos_dom_Fragment = v878 ()
                        let v895 : string = "leptos::prelude::AnyView::from($0)"
                        let v896 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v894 v895 
                        let v897 : string = "<" + v461 + " " + v893 + ">move || { v896 }</" + v461 + ">"
                        let v898 : string = "leptos::prelude::view! { " + v897 + " }"
                        let v899 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v898 
                        let v900 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v899 |> unbox
                        let v901 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v902 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v900 v901 
                        let v903 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v891(())"
                        let v904 : string = " " + v903 + v351 + ""
                        let v905 : leptos_dom_Fragment = v879 ()
                        let v906 : string = "leptos::prelude::AnyView::from($0)"
                        let v907 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v905 v906 
                        let v908 : string = "<" + v473 + " " + v904 + ">move || { v907 }</" + v473 + ">"
                        let v909 : string = "leptos::prelude::view! { " + v908 + " }"
                        let v910 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v909 
                        let v911 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v910 |> unbox
                        let v912 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v913 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v911 v912 
                        let v914 : string = "v913"
                        let v915 : string = v914 + v351 
                        let v916 : string = v915 + v351 
                        let v917 : string = "v902"
                        let v918 : string = v917 + v423 
                        let v919 : string = v918 + v916 
                        let v920 : string = "vec![" + v919 + "]"
                        let v921 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v920 
                        let v922 : string = "leptos::prelude::Fragment::new($0)"
                        let v923 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v921 v922 
                        let v924 : string = "leptos::prelude::AnyView::from($0)"
                        let v925 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v923 v924 
                        let v926 : string = "<" + v492 + " " + v889 + ">move || { v925 }</" + v492 + ">"
                        let v927 : string = "leptos::prelude::view! { " + v926 + " }"
                        let v928 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v927 
                        let v929 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v928 |> unbox
                        let v930 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v931 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v929 v930 
                        let v932 : (unit -> leptos_dom_Fragment) = method270()
                        let v933 : (unit -> leptos_dom_Fragment) = method271(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v934 : string = "$0"
                        let v935 : (unit -> string) = closure320()
                        let v936 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v935 v934 
                        let v937 : string = "$0"
                        let v938 : (unit -> string) = closure321()
                        let v939 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v938 v937 
                        let v940 : string = "$0"
                        let v941 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v940 
                        let v942 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v941(()) + \" \" + &v939(()) + \" \" + &v936(())"
                        let v943 : string = " " + v942 + v351 + ""
                        let v944 : string = "$0"
                        let v945 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v944 
                        let v946 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v947 : string = " " + v946 + v351 + ""
                        let v948 : leptos_dom_Fragment = v932 ()
                        let v949 : string = "leptos::prelude::AnyView::from($0)"
                        let v950 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v948 v949 
                        let v951 : string = "<" + v461 + " " + v947 + ">move || { v950 }</" + v461 + ">"
                        let v952 : string = "leptos::prelude::view! { " + v951 + " }"
                        let v953 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v952 
                        let v954 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v953 |> unbox
                        let v955 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v956 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v954 v955 
                        let v957 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v945(())"
                        let v958 : string = " " + v957 + v351 + ""
                        let v959 : leptos_dom_Fragment = v933 ()
                        let v960 : string = "leptos::prelude::AnyView::from($0)"
                        let v961 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v959 v960 
                        let v962 : string = "<" + v473 + " " + v958 + ">move || { v961 }</" + v473 + ">"
                        let v963 : string = "leptos::prelude::view! { " + v962 + " }"
                        let v964 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v963 
                        let v965 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v964 |> unbox
                        let v966 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v967 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v965 v966 
                        let v968 : string = "v967"
                        let v969 : string = v968 + v351 
                        let v970 : string = v969 + v351 
                        let v971 : string = "v956"
                        let v972 : string = v971 + v423 
                        let v973 : string = v972 + v970 
                        let v974 : string = "vec![" + v973 + "]"
                        let v975 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v974 
                        let v976 : string = "leptos::prelude::Fragment::new($0)"
                        let v977 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v975 v976 
                        let v978 : string = "leptos::prelude::AnyView::from($0)"
                        let v979 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v977 v978 
                        let v980 : string = "<" + v492 + " " + v943 + ">move || { v979 }</" + v492 + ">"
                        let v981 : string = "leptos::prelude::view! { " + v980 + " }"
                        let v982 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v981 
                        let v983 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v982 |> unbox
                        let v984 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v985 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v983 v984 
                        let v986 : (unit -> leptos_dom_Fragment) = method272()
                        let v987 : (unit -> leptos_dom_Fragment) = method273(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v988 : string = "$0"
                        let v989 : (unit -> string) = closure324()
                        let v990 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v989 v988 
                        let v991 : string = "$0"
                        let v992 : (unit -> string) = closure325()
                        let v993 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v992 v991 
                        let v994 : string = "$0"
                        let v995 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v994 
                        let v996 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v995(()) + \" \" + &v993(()) + \" \" + &v990(())"
                        let v997 : string = " " + v996 + v351 + ""
                        let v998 : string = "$0"
                        let v999 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v998 
                        let v1000 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v1001 : string = " " + v1000 + v351 + ""
                        let v1002 : leptos_dom_Fragment = v986 ()
                        let v1003 : string = "leptos::prelude::AnyView::from($0)"
                        let v1004 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1002 v1003 
                        let v1005 : string = "<" + v461 + " " + v1001 + ">move || { v1004 }</" + v461 + ">"
                        let v1006 : string = "leptos::prelude::view! { " + v1005 + " }"
                        let v1007 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1006 
                        let v1008 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v1007 |> unbox
                        let v1009 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1010 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1008 v1009 
                        let v1011 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v999(())"
                        let v1012 : string = " " + v1011 + v351 + ""
                        let v1013 : leptos_dom_Fragment = v987 ()
                        let v1014 : string = "leptos::prelude::AnyView::from($0)"
                        let v1015 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1013 v1014 
                        let v1016 : string = "<" + v473 + " " + v1012 + ">move || { v1015 }</" + v473 + ">"
                        let v1017 : string = "leptos::prelude::view! { " + v1016 + " }"
                        let v1018 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1017 
                        let v1019 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v1018 |> unbox
                        let v1020 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1021 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1019 v1020 
                        let v1022 : string = "v1021"
                        let v1023 : string = v1022 + v351 
                        let v1024 : string = v1023 + v351 
                        let v1025 : string = "v1010"
                        let v1026 : string = v1025 + v423 
                        let v1027 : string = v1026 + v1024 
                        let v1028 : string = "vec![" + v1027 + "]"
                        let v1029 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1028 
                        let v1030 : string = "leptos::prelude::Fragment::new($0)"
                        let v1031 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1029 v1030 
                        let v1032 : string = "leptos::prelude::AnyView::from($0)"
                        let v1033 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1031 v1032 
                        let v1034 : string = "<" + v492 + " " + v997 + ">move || { v1033 }</" + v492 + ">"
                        let v1035 : string = "leptos::prelude::view! { " + v1034 + " }"
                        let v1036 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1035 
                        let v1037 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v1036 |> unbox
                        let v1038 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1039 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1037 v1038 
                        let v1040 : (unit -> leptos_dom_Fragment) = method274()
                        let v1041 : (unit -> leptos_dom_Fragment) = method275(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                        let v1042 : string = "$0"
                        let v1043 : (unit -> string) = closure328()
                        let v1044 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1043 v1042 
                        let v1045 : string = "$0"
                        let v1046 : (unit -> string) = closure329()
                        let v1047 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1046 v1045 
                        let v1048 : string = "$0"
                        let v1049 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v1048 
                        let v1050 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1049(()) + \" \" + &v1047(()) + \" \" + &v1044(())"
                        let v1051 : string = " " + v1050 + v351 + ""
                        let v1052 : string = "$0"
                        let v1053 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v1052 
                        let v1054 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v1055 : string = " " + v1054 + v351 + ""
                        let v1056 : leptos_dom_Fragment = v1040 ()
                        let v1057 : string = "leptos::prelude::AnyView::from($0)"
                        let v1058 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1056 v1057 
                        let v1059 : string = "<" + v461 + " " + v1055 + ">move || { v1058 }</" + v461 + ">"
                        let v1060 : string = "leptos::prelude::view! { " + v1059 + " }"
                        let v1061 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1060 
                        let v1062 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v1061 |> unbox
                        let v1063 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1064 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1062 v1063 
                        let v1065 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1053(())"
                        let v1066 : string = " " + v1065 + v351 + ""
                        let v1067 : leptos_dom_Fragment = v1041 ()
                        let v1068 : string = "leptos::prelude::AnyView::from($0)"
                        let v1069 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1067 v1068 
                        let v1070 : string = "<" + v473 + " " + v1066 + ">move || { v1069 }</" + v473 + ">"
                        let v1071 : string = "leptos::prelude::view! { " + v1070 + " }"
                        let v1072 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1071 
                        let v1073 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v1072 |> unbox
                        let v1074 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1075 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1073 v1074 
                        let v1076 : string = "v1075"
                        let v1077 : string = v1076 + v351 
                        let v1078 : string = v1077 + v351 
                        let v1079 : string = "v1064"
                        let v1080 : string = v1079 + v423 
                        let v1081 : string = v1080 + v1078 
                        let v1082 : string = "vec![" + v1081 + "]"
                        let v1083 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1082 
                        let v1084 : string = "leptos::prelude::Fragment::new($0)"
                        let v1085 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1083 v1084 
                        let v1086 : string = "leptos::prelude::AnyView::from($0)"
                        let v1087 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1085 v1086 
                        let v1088 : string = "<" + v492 + " " + v1051 + ">move || { v1087 }</" + v492 + ">"
                        let v1089 : string = "leptos::prelude::view! { " + v1088 + " }"
                        let v1090 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1089 
                        let v1091 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v1090 |> unbox
                        let v1092 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1093 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1091 v1092 
                        let v1094 : uint64 = System.Convert.ToUInt64 v372.Length
                        let v1095 : bool = v1094 = 0UL
                        let v1154 : leptos_prelude_AnyView_ =
                            if v1095 then
                                let v1096 : string = "vec![" + v351 + "]"
                                let v1097 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1096 
                                let v1098 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v1099 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1097 v1098 
                                v1099
                            else
                                let v1100 : (unit -> leptos_dom_Fragment) = method276()
                                let v1101 : (unit -> leptos_dom_Fragment) = method277(v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372)
                                let v1102 : string = "$0"
                                let v1103 : (unit -> string) = closure334()
                                let v1104 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1103 v1102 
                                let v1105 : string = "$0"
                                let v1106 : (unit -> string) = closure335()
                                let v1107 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1106 v1105 
                                let v1108 : string = "$0"
                                let v1109 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v449 v1108 
                                let v1110 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1109(()) + \" \" + &v1107(()) + \" \" + &v1104(())"
                                let v1111 : string = " " + v1110 + v351 + ""
                                let v1112 : string = "$0"
                                let v1113 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v454 v1112 
                                let v1114 : string = "class=\"[font-size:12px] text-gray-400\""
                                let v1115 : string = " " + v1114 + v351 + ""
                                let v1116 : leptos_dom_Fragment = v1100 ()
                                let v1117 : string = "leptos::prelude::AnyView::from($0)"
                                let v1118 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1116 v1117 
                                let v1119 : string = "<" + v461 + " " + v1115 + ">move || { v1118 }</" + v461 + ">"
                                let v1120 : string = "leptos::prelude::view! { " + v1119 + " }"
                                let v1121 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1120 
                                let v1122 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v1121 |> unbox
                                let v1123 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v1124 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1122 v1123 
                                let v1125 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1113(())"
                                let v1126 : string = " " + v1125 + v351 + ""
                                let v1127 : leptos_dom_Fragment = v1101 ()
                                let v1128 : string = "leptos::prelude::AnyView::from($0)"
                                let v1129 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1127 v1128 
                                let v1130 : string = "<" + v473 + " " + v1126 + ">move || { v1129 }</" + v473 + ">"
                                let v1131 : string = "leptos::prelude::view! { " + v1130 + " }"
                                let v1132 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1131 
                                let v1133 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v1132 |> unbox
                                let v1134 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v1135 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1133 v1134 
                                let v1136 : string = "v1135"
                                let v1137 : string = v1136 + v351 
                                let v1138 : string = v1137 + v351 
                                let v1139 : string = "v1124"
                                let v1140 : string = v1139 + v423 
                                let v1141 : string = v1140 + v1138 
                                let v1142 : string = "vec![" + v1141 + "]"
                                let v1143 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1142 
                                let v1144 : string = "leptos::prelude::Fragment::new($0)"
                                let v1145 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1143 v1144 
                                let v1146 : string = "leptos::prelude::AnyView::from($0)"
                                let v1147 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1145 v1146 
                                let v1148 : string = "<" + v492 + " " + v1111 + ">move || { v1147 }</" + v492 + ">"
                                let v1149 : string = "leptos::prelude::view! { " + v1148 + " }"
                                let v1150 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1149 
                                let v1151 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v1150 |> unbox
                                let v1152 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v1153 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1151 v1152 
                                v1153
                        let v1155 : string = "v1154"
                        let v1156 : string = v1155 + v351 
                        let v1157 : string = v1156 + v351 
                        let v1158 : string = "v1093"
                        let v1159 : string = v1158 + v423 
                        let v1160 : string = v1159 + v1157 
                        let v1161 : string = "v1039"
                        let v1162 : string = v1161 + v423 
                        let v1163 : string = v1162 + v1160 
                        let v1164 : string = "v985"
                        let v1165 : string = v1164 + v423 
                        let v1166 : string = v1165 + v1163 
                        let v1167 : string = "v931"
                        let v1168 : string = v1167 + v423 
                        let v1169 : string = v1168 + v1166 
                        let v1170 : string = "v877"
                        let v1171 : string = v1170 + v423 
                        let v1172 : string = v1171 + v1169 
                        let v1173 : string = "v823"
                        let v1174 : string = v1173 + v423 
                        let v1175 : string = v1174 + v1172 
                        let v1176 : string = "v769"
                        let v1177 : string = v1176 + v423 
                        let v1178 : string = v1177 + v1175 
                        let v1179 : string = "v715"
                        let v1180 : string = v1179 + v423 
                        let v1181 : string = v1180 + v1178 
                        let v1182 : string = "v660"
                        let v1183 : string = v1182 + v423 
                        let v1184 : string = v1183 + v1181 
                        let v1185 : string = "v606"
                        let v1186 : string = v1185 + v423 
                        let v1187 : string = v1186 + v1184 
                        let v1188 : string = "v552"
                        let v1189 : string = v1188 + v423 
                        let v1190 : string = v1189 + v1187 
                        let v1191 : string = "v498"
                        let v1192 : string = v1191 + v423 
                        let v1193 : string = v1192 + v1190 
                        let v1194 : string = "vec![" + v1193 + "]"
                        let v1195 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1194 
                        let v1196 : string = "leptos::prelude::Fragment::new($0)"
                        let v1197 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1195 v1196 
                        let v1198 : string = "leptos::prelude::AnyView::from($0)"
                        let v1199 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1197 v1198 
                        let v1200 : string = "div"
                        let v1201 : string = "<" + v1200 + " " + v439 + ">move || { v1199 }</" + v1200 + ">"
                        let v1202 : string = "leptos::prelude::view! { " + v1201 + " }"
                        let v1203 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1202 
                        let v1204 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1203 |> unbox
                        let v1205 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1206 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1204 v1205 
                        let v1207 : string = "v1206"
                        let v1208 : string = v1207 + v351 
                        let v1209 : string = v1208 + v351 
                        let v1210 : string = "v437"
                        let v1211 : string = v1210 + v423 
                        let v1212 : string = v1211 + v1209 
                        let v1213 : string = "vec![" + v1212 + "]"
                        let v1214 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1213 
                        let v1215 : string = "leptos::prelude::Fragment::new($0)"
                        let v1216 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1214 v1215 
                        let v1217 : string = "leptos::prelude::AnyView::from($0)"
                        let v1218 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1216 v1217 
                        let v1219 : string = "<" + v1200 + " " + v385 + ">move || { v1218 }</" + v1200 + ">"
                        let v1220 : string = "leptos::prelude::view! { " + v1219 + " }"
                        let v1221 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1220 
                        let v1222 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1221 |> unbox
                        let v1223 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1224 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1222 v1223 
                        let v1225 : string = "true; $0 }).collect::<Vec<_>>()"
                        let v1226 : bool = Fable.Core.RustInterop.emitRustExpr v1224 v1225 
                        let v1227 : string = "_vec_map"
                        let v1228 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1227 
                        let v1229 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1230 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1228 v1229 
                        let v1231 : string = "v1230"
                        let v1232 : string = v1231 + v351 
                        let v1233 : string = v1232 + v351 
                        let v1234 : string = "vec![" + v1233 + "]"
                        let v1235 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1234 
                        let v1236 : string = "leptos::prelude::Fragment::new($0)"
                        let v1237 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1235 v1236 
                        let v1238 : string = "leptos::prelude::AnyView::from($0)"
                        let v1239 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1237 v1238 
                        let v1240 : string = "<" + v1200 + " " + v352 + ">move || { v1239 }</" + v1200 + ">"
                        let v1241 : string = "leptos::prelude::view! { " + v1240 + " }"
                        let v1242 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1241 
                        let v1243 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v1242 |> unbox
                        let v1244 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1245 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1243 v1244 
                        v1245
                    else
                        let v1246 : string = "$0.to_vec()"
                        let v1247 : Vec<struct (string * unativeint * Heap5)> = Fable.Core.RustInterop.emitRustExpr v339 v1246 
                        let v1248 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                        let v1249 : bool = Fable.Core.RustInterop.emitRustExpr v1247 v1248 
                        let v1250 : string = "x"
                        let struct (v1251 : string, v1252 : unativeint, v1253 : Heap5) = Fable.Core.RustInterop.emitRustExpr () v1250 
                        let v1254 : string = "transaction.tr_render (1)"
                        let v1255 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v1256 : bool = Fable.Core.RustInterop.emitRustExpr v1254 v1255 
                        let v1257 : string = "class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\""
                        let v1258 : string = ""
                        let v1259 : string = " " + v1257 + v1258 + ""
                        let v1260 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1261 : string = " " + v1260 + v1258 + ""
                        (* run_target_args'
                        let v1262 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1263 : string = "&*$0"
                        let v1264 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1251 v1263 
                        let _run_target_args'_v1262 = v1264 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1265 : string = "&*$0"
                        let v1266 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1251 v1265 
                        let _run_target_args'_v1262 = v1266 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1267 : string = "&*$0"
                        let v1268 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1251 v1267 
                        let _run_target_args'_v1262 = v1268 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1269 : Ref<Str> = v1251 |> unbox<Ref<Str>>
                        let _run_target_args'_v1262 = v1269 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1272 : Ref<Str> = v1251 |> unbox<Ref<Str>>
                        let _run_target_args'_v1262 = v1272 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1275 : Ref<Str> = v1251 |> unbox<Ref<Str>>
                        let _run_target_args'_v1262 = v1275 
                        #endif
#else
                        let v1278 : Ref<Str> = v1251 |> unbox<Ref<Str>>
                        let _run_target_args'_v1262 = v1278 
                        #endif
                        let v1281 : Ref<Str> = _run_target_args'_v1262 
                        (* run_target_args'
                        let v1286 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1287 : string = "String::from($0)"
                        let v1288 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1281 v1287 
                        let _run_target_args'_v1286 = v1288 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1289 : string = "String::from($0)"
                        let v1290 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1281 v1289 
                        let _run_target_args'_v1286 = v1290 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1291 : string = "String::from($0)"
                        let v1292 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1281 v1291 
                        let _run_target_args'_v1286 = v1292 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1293 : std_string_String = v1281 |> unbox<std_string_String>
                        let _run_target_args'_v1286 = v1293 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1296 : std_string_String = v1281 |> unbox<std_string_String>
                        let _run_target_args'_v1286 = v1296 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1299 : std_string_String = v1281 |> unbox<std_string_String>
                        let _run_target_args'_v1286 = v1299 
                        #endif
#else
                        let v1302 : std_string_String = v1281 |> unbox<std_string_String>
                        let _run_target_args'_v1286 = v1302 
                        #endif
                        let v1305 : std_string_String = _run_target_args'_v1286 
                        let v1310 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1311 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1305 v1310 
                        let v1312 : string = "v1311"
                        let v1313 : string = v1312 + v1258 
                        let v1314 : string = v1313 + v1258 
                        let v1315 : string = "vec![" + v1314 + "]"
                        let v1316 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1315 
                        let v1317 : string = "leptos::prelude::Fragment::new($0)"
                        let v1318 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1316 v1317 
                        let v1319 : string = "leptos::prelude::AnyView::from($0)"
                        let v1320 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1318 v1319 
                        let v1321 : string = "td"
                        let v1322 : string = "<" + v1321 + " " + v1261 + ">move || { v1320 }</" + v1321 + ">"
                        let v1323 : string = "leptos::prelude::view! { " + v1322 + " }"
                        let v1324 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1323 
                        let v1325 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1324 |> unbox
                        let v1326 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1327 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1325 v1326 
                        let v1328 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1329 : string = " " + v1328 + v1258 + ""
                        let v1330 : std_string_String = v1253.l5
                        let v1331 : string = "fable_library_rust::String_::fromString($0)"
                        let v1332 : string = Fable.Core.RustInterop.emitRustExpr v1330 v1331 
                        let v1333 : (string -> int64) = int64
                        let v1334 : int64 = v1333 v1332
                        let v1337 : int64 = method204(v1334)
                        let v1338 : int64 = v1337 / 1000L
                        let v1339 : string = "chrono::DateTime::from_timestamp_micros($0)"
                        let v1340 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v1338 v1339 
                        let v1341 : (chrono_DateTime<chrono_Utc> -> US68) = method205()
                        let v1342 : US68 option = v1340 |> Option.map v1341 
                        let v1353 : US68 = US68_1
                        let v1354 : US68 = v1342 |> Option.defaultValue v1353 
                        let v1373 : US31 =
                            match v1354 with
                            | US68_1 -> (* None *)
                                US31_1
                            | US68_0(v1358) -> (* Some *)
                                let v1359 : string = "$0.naive_utc()"
                                let v1360 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v1358 v1359 
                                let v1361 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
                                let v1362 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v1360 v1361 
                                let v1363 : string = "%Y-%m-%d %H:%M:%S"
                                let v1364 : string = "r#\"" + v1363 + "\"#"
                                let v1365 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1364 
                                let v1366 : string = "$0.format($1).to_string()"
                                let v1367 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v1362, v1365) v1366 
                                let v1368 : string = "fable_library_rust::String_::fromString($0)"
                                let v1369 : string = Fable.Core.RustInterop.emitRustExpr v1367 v1368 
                                US31_0(v1369)
                        let v1379 : US69 =
                            match v1373 with
                            | US31_1 -> (* None *)
                                let v1376 : string = "resultm.from_option / Option does not have a value."
                                US69_1(v1376)
                            | US31_0(v1374) -> (* Some *)
                                US69_0(v1374)
                        let v1384 : string =
                            match v1379 with
                            | US69_1(v1381) -> (* Error *)
                                let v1382 : string = "sm'.to_string result / Error: " + v1381 + ""
                                v1382
                            | US69_0(v1380) -> (* Ok *)
                                v1380
                        (* run_target_args'
                        let v1385 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1386 : string = "&*$0"
                        let v1387 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1384 v1386 
                        let _run_target_args'_v1385 = v1387 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1388 : string = "&*$0"
                        let v1389 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1384 v1388 
                        let _run_target_args'_v1385 = v1389 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1390 : string = "&*$0"
                        let v1391 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1384 v1390 
                        let _run_target_args'_v1385 = v1391 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1392 : Ref<Str> = v1384 |> unbox<Ref<Str>>
                        let _run_target_args'_v1385 = v1392 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1395 : Ref<Str> = v1384 |> unbox<Ref<Str>>
                        let _run_target_args'_v1385 = v1395 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1398 : Ref<Str> = v1384 |> unbox<Ref<Str>>
                        let _run_target_args'_v1385 = v1398 
                        #endif
#else
                        let v1401 : Ref<Str> = v1384 |> unbox<Ref<Str>>
                        let _run_target_args'_v1385 = v1401 
                        #endif
                        let v1404 : Ref<Str> = _run_target_args'_v1385 
                        (* run_target_args'
                        let v1409 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1410 : string = "String::from($0)"
                        let v1411 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1404 v1410 
                        let _run_target_args'_v1409 = v1411 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1412 : string = "String::from($0)"
                        let v1413 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1404 v1412 
                        let _run_target_args'_v1409 = v1413 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1414 : string = "String::from($0)"
                        let v1415 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1404 v1414 
                        let _run_target_args'_v1409 = v1415 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1416 : std_string_String = v1404 |> unbox<std_string_String>
                        let _run_target_args'_v1409 = v1416 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1419 : std_string_String = v1404 |> unbox<std_string_String>
                        let _run_target_args'_v1409 = v1419 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1422 : std_string_String = v1404 |> unbox<std_string_String>
                        let _run_target_args'_v1409 = v1422 
                        #endif
#else
                        let v1425 : std_string_String = v1404 |> unbox<std_string_String>
                        let _run_target_args'_v1409 = v1425 
                        #endif
                        let v1428 : std_string_String = _run_target_args'_v1409 
                        let v1433 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1434 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1428 v1433 
                        let v1435 : string = "v1434"
                        let v1436 : string = v1435 + v1258 
                        let v1437 : string = v1436 + v1258 
                        let v1438 : string = "vec![" + v1437 + "]"
                        let v1439 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1438 
                        let v1440 : string = "leptos::prelude::Fragment::new($0)"
                        let v1441 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1439 v1440 
                        let v1442 : string = "leptos::prelude::AnyView::from($0)"
                        let v1443 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1441 v1442 
                        let v1444 : string = "<" + v1321 + " " + v1329 + ">move || { v1443 }</" + v1321 + ">"
                        let v1445 : string = "leptos::prelude::view! { " + v1444 + " }"
                        let v1446 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1445 
                        let v1447 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1446 |> unbox
                        let v1448 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1449 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1447 v1448 
                        let v1450 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1451 : string = " " + v1450 + v1258 + ""
                        let v1452 : std_string_String = v1253.l1
                        let v1453 : string = "fable_library_rust::String_::fromString($0)"
                        let v1454 : string = Fable.Core.RustInterop.emitRustExpr v1452 v1453 
                        (* run_target_args'
                        let v1455 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1456 : string = "&*$0"
                        let v1457 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1454 v1456 
                        let _run_target_args'_v1455 = v1457 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1458 : string = "&*$0"
                        let v1459 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1454 v1458 
                        let _run_target_args'_v1455 = v1459 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1460 : string = "&*$0"
                        let v1461 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1454 v1460 
                        let _run_target_args'_v1455 = v1461 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1462 : Ref<Str> = v1454 |> unbox<Ref<Str>>
                        let _run_target_args'_v1455 = v1462 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1465 : Ref<Str> = v1454 |> unbox<Ref<Str>>
                        let _run_target_args'_v1455 = v1465 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1468 : Ref<Str> = v1454 |> unbox<Ref<Str>>
                        let _run_target_args'_v1455 = v1468 
                        #endif
#else
                        let v1471 : Ref<Str> = v1454 |> unbox<Ref<Str>>
                        let _run_target_args'_v1455 = v1471 
                        #endif
                        let v1474 : Ref<Str> = _run_target_args'_v1455 
                        (* run_target_args'
                        let v1479 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1480 : string = "String::from($0)"
                        let v1481 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1474 v1480 
                        let _run_target_args'_v1479 = v1481 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1482 : string = "String::from($0)"
                        let v1483 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1474 v1482 
                        let _run_target_args'_v1479 = v1483 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1484 : string = "String::from($0)"
                        let v1485 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1474 v1484 
                        let _run_target_args'_v1479 = v1485 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1486 : std_string_String = v1474 |> unbox<std_string_String>
                        let _run_target_args'_v1479 = v1486 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1489 : std_string_String = v1474 |> unbox<std_string_String>
                        let _run_target_args'_v1479 = v1489 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1492 : std_string_String = v1474 |> unbox<std_string_String>
                        let _run_target_args'_v1479 = v1492 
                        #endif
#else
                        let v1495 : std_string_String = v1474 |> unbox<std_string_String>
                        let _run_target_args'_v1479 = v1495 
                        #endif
                        let v1498 : std_string_String = _run_target_args'_v1479 
                        let v1503 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1504 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1498 v1503 
                        let v1505 : string = "v1504"
                        let v1506 : string = v1505 + v1258 
                        let v1507 : string = v1506 + v1258 
                        let v1508 : string = "vec![" + v1507 + "]"
                        let v1509 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1508 
                        let v1510 : string = "leptos::prelude::Fragment::new($0)"
                        let v1511 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1509 v1510 
                        let v1512 : string = "leptos::prelude::AnyView::from($0)"
                        let v1513 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1511 v1512 
                        let v1514 : string = "<" + v1321 + " " + v1451 + ">move || { v1513 }</" + v1321 + ">"
                        let v1515 : string = "leptos::prelude::view! { " + v1514 + " }"
                        let v1516 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1515 
                        let v1517 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1516 |> unbox
                        let v1518 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1519 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1517 v1518 
                        let v1520 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1521 : string = " " + v1520 + v1258 + ""
                        let v1522 : std_string_String = v1253.l2
                        let v1523 : string = "fable_library_rust::String_::fromString($0)"
                        let v1524 : string = Fable.Core.RustInterop.emitRustExpr v1522 v1523 
                        (* run_target_args'
                        let v1525 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1526 : string = "&*$0"
                        let v1527 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1524 v1526 
                        let _run_target_args'_v1525 = v1527 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1528 : string = "&*$0"
                        let v1529 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1524 v1528 
                        let _run_target_args'_v1525 = v1529 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1530 : string = "&*$0"
                        let v1531 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1524 v1530 
                        let _run_target_args'_v1525 = v1531 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1532 : Ref<Str> = v1524 |> unbox<Ref<Str>>
                        let _run_target_args'_v1525 = v1532 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1535 : Ref<Str> = v1524 |> unbox<Ref<Str>>
                        let _run_target_args'_v1525 = v1535 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1538 : Ref<Str> = v1524 |> unbox<Ref<Str>>
                        let _run_target_args'_v1525 = v1538 
                        #endif
#else
                        let v1541 : Ref<Str> = v1524 |> unbox<Ref<Str>>
                        let _run_target_args'_v1525 = v1541 
                        #endif
                        let v1544 : Ref<Str> = _run_target_args'_v1525 
                        (* run_target_args'
                        let v1549 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1550 : string = "String::from($0)"
                        let v1551 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1544 v1550 
                        let _run_target_args'_v1549 = v1551 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1552 : string = "String::from($0)"
                        let v1553 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1544 v1552 
                        let _run_target_args'_v1549 = v1553 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1554 : string = "String::from($0)"
                        let v1555 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1544 v1554 
                        let _run_target_args'_v1549 = v1555 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1556 : std_string_String = v1544 |> unbox<std_string_String>
                        let _run_target_args'_v1549 = v1556 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1559 : std_string_String = v1544 |> unbox<std_string_String>
                        let _run_target_args'_v1549 = v1559 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1562 : std_string_String = v1544 |> unbox<std_string_String>
                        let _run_target_args'_v1549 = v1562 
                        #endif
#else
                        let v1565 : std_string_String = v1544 |> unbox<std_string_String>
                        let _run_target_args'_v1549 = v1565 
                        #endif
                        let v1568 : std_string_String = _run_target_args'_v1549 
                        let v1573 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1574 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1568 v1573 
                        let v1575 : string = "v1574"
                        let v1576 : string = v1575 + v1258 
                        let v1577 : string = v1576 + v1258 
                        let v1578 : string = "vec![" + v1577 + "]"
                        let v1579 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1578 
                        let v1580 : string = "leptos::prelude::Fragment::new($0)"
                        let v1581 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1579 v1580 
                        let v1582 : string = "leptos::prelude::AnyView::from($0)"
                        let v1583 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1581 v1582 
                        let v1584 : string = "<" + v1321 + " " + v1521 + ">move || { v1583 }</" + v1321 + ">"
                        let v1585 : string = "leptos::prelude::view! { " + v1584 + " }"
                        let v1586 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1585 
                        let v1587 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1586 |> unbox
                        let v1588 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1589 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1587 v1588 
                        let v1590 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1591 : string = " " + v1590 + v1258 + ""
                        let v1592 : (struct (std_string_String * std_string_String option) []) = v1253.l7
                        let v1593 : string = "$0.to_vec()"
                        let v1594 : Vec<struct (std_string_String * std_string_String option)> = Fable.Core.RustInterop.emitRustExpr v1592 v1593 
                        let v1595 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                        let v1596 : bool = Fable.Core.RustInterop.emitRustExpr v1594 v1595 
                        let v1597 : string = "x"
                        let struct (v1598 : std_string_String, v1599 : std_string_String option) = Fable.Core.RustInterop.emitRustExpr () v1597 
                        let v1600 : (unit -> leptos_dom_Fragment) = method258(v1598)
                        let v1601 : (unit -> leptos_dom_Fragment) = method259(v1599)
                        let v1602 : string = "$0"
                        let v1603 : (unit -> string) = closure295()
                        let v1604 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1603 v1602 
                        let v1605 : string = "$0"
                        let v1606 : (unit -> string) = closure296()
                        let v1607 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1606 v1605 
                        let v1608 : string = "$0"
                        let v1609 : (unit -> string) = closure297()
                        let v1610 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1609 v1608 
                        let v1611 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1610(()) + \" \" + &v1607(()) + \" \" + &v1604(())"
                        let v1612 : string = " " + v1611 + v1258 + ""
                        let v1613 : string = "$0"
                        let v1614 : (unit -> string) = closure298()
                        let v1615 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1614 v1613 
                        let v1616 : string = "class=\"[font-size:12px] text-gray-400\""
                        let v1617 : string = " " + v1616 + v1258 + ""
                        let v1618 : leptos_dom_Fragment = v1600 ()
                        let v1619 : string = "leptos::prelude::AnyView::from($0)"
                        let v1620 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1618 v1619 
                        let v1621 : string = "dt"
                        let v1622 : string = "<" + v1621 + " " + v1617 + ">move || { v1620 }</" + v1621 + ">"
                        let v1623 : string = "leptos::prelude::view! { " + v1622 + " }"
                        let v1624 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1623 
                        let v1625 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v1624 |> unbox
                        let v1626 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1627 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1625 v1626 
                        let v1628 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1615(())"
                        let v1629 : string = " " + v1628 + v1258 + ""
                        let v1630 : leptos_dom_Fragment = v1601 ()
                        let v1631 : string = "leptos::prelude::AnyView::from($0)"
                        let v1632 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1630 v1631 
                        let v1633 : string = "dd"
                        let v1634 : string = "<" + v1633 + " " + v1629 + ">move || { v1632 }</" + v1633 + ">"
                        let v1635 : string = "leptos::prelude::view! { " + v1634 + " }"
                        let v1636 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1635 
                        let v1637 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v1636 |> unbox
                        let v1638 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1639 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1637 v1638 
                        let v1640 : string = "v1639"
                        let v1641 : string = v1640 + v1258 
                        let v1642 : string = v1641 + v1258 
                        let v1643 : string = "v1627"
                        let v1644 : string = ", "
                        let v1645 : string = v1643 + v1644 
                        let v1646 : string = v1645 + v1642 
                        let v1647 : string = "vec![" + v1646 + "]"
                        let v1648 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1647 
                        let v1649 : string = "leptos::prelude::Fragment::new($0)"
                        let v1650 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1648 v1649 
                        let v1651 : string = "leptos::prelude::AnyView::from($0)"
                        let v1652 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1650 v1651 
                        let v1653 : string = "dl"
                        let v1654 : string = "<" + v1653 + " " + v1612 + ">move || { v1652 }</" + v1653 + ">"
                        let v1655 : string = "leptos::prelude::view! { " + v1654 + " }"
                        let v1656 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1655 
                        let v1657 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v1656 |> unbox
                        let v1658 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1659 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1657 v1658 
                        let v1660 : string = "true; $0 }).collect::<Vec<_>>()"
                        let v1661 : bool = Fable.Core.RustInterop.emitRustExpr v1659 v1660 
                        let v1662 : string = "_vec_map"
                        let v1663 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1662 
                        let v1664 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1665 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1663 v1664 
                        let v1666 : string = "v1665"
                        let v1667 : string = v1666 + v1258 
                        let v1668 : string = v1667 + v1258 
                        let v1669 : string = "vec![" + v1668 + "]"
                        let v1670 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1669 
                        let v1671 : string = "leptos::prelude::Fragment::new($0)"
                        let v1672 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1670 v1671 
                        let v1673 : string = "leptos::prelude::AnyView::from($0)"
                        let v1674 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1672 v1673 
                        let v1675 : string = "<" + v1321 + " " + v1591 + ">move || { v1674 }</" + v1321 + ">"
                        let v1676 : string = "leptos::prelude::view! { " + v1675 + " }"
                        let v1677 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1676 
                        let v1678 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1677 |> unbox
                        let v1679 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1680 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1678 v1679 
                        let v1681 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1682 : string = " " + v1681 + v1258 + ""
                        let v1683 : float = v1253.l8
                        let v1684 : (float -> string) = _.ToString()
                        let v1685 : string = v1684 v1683
                        (* run_target_args'
                        let v1688 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1689 : string = "&*$0"
                        let v1690 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1685 v1689 
                        let _run_target_args'_v1688 = v1690 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1691 : string = "&*$0"
                        let v1692 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1685 v1691 
                        let _run_target_args'_v1688 = v1692 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1693 : string = "&*$0"
                        let v1694 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1685 v1693 
                        let _run_target_args'_v1688 = v1694 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1695 : Ref<Str> = v1685 |> unbox<Ref<Str>>
                        let _run_target_args'_v1688 = v1695 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1698 : Ref<Str> = v1685 |> unbox<Ref<Str>>
                        let _run_target_args'_v1688 = v1698 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1701 : Ref<Str> = v1685 |> unbox<Ref<Str>>
                        let _run_target_args'_v1688 = v1701 
                        #endif
#else
                        let v1704 : Ref<Str> = v1685 |> unbox<Ref<Str>>
                        let _run_target_args'_v1688 = v1704 
                        #endif
                        let v1707 : Ref<Str> = _run_target_args'_v1688 
                        (* run_target_args'
                        let v1712 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1713 : string = "String::from($0)"
                        let v1714 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1707 v1713 
                        let _run_target_args'_v1712 = v1714 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1715 : string = "String::from($0)"
                        let v1716 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1707 v1715 
                        let _run_target_args'_v1712 = v1716 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1717 : string = "String::from($0)"
                        let v1718 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1707 v1717 
                        let _run_target_args'_v1712 = v1718 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1719 : std_string_String = v1707 |> unbox<std_string_String>
                        let _run_target_args'_v1712 = v1719 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1722 : std_string_String = v1707 |> unbox<std_string_String>
                        let _run_target_args'_v1712 = v1722 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1725 : std_string_String = v1707 |> unbox<std_string_String>
                        let _run_target_args'_v1712 = v1725 
                        #endif
#else
                        let v1728 : std_string_String = v1707 |> unbox<std_string_String>
                        let _run_target_args'_v1712 = v1728 
                        #endif
                        let v1731 : std_string_String = _run_target_args'_v1712 
                        let v1736 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1737 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1731 v1736 
                        let v1738 : string = "v1737"
                        let v1739 : string = v1738 + v1258 
                        let v1740 : string = v1739 + v1258 
                        let v1741 : string = "vec![" + v1740 + "]"
                        let v1742 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1741 
                        let v1743 : string = "leptos::prelude::Fragment::new($0)"
                        let v1744 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1742 v1743 
                        let v1745 : string = "leptos::prelude::AnyView::from($0)"
                        let v1746 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1744 v1745 
                        let v1747 : string = "<" + v1321 + " " + v1682 + ">move || { v1746 }</" + v1321 + ">"
                        let v1748 : string = "leptos::prelude::view! { " + v1747 + " }"
                        let v1749 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1748 
                        let v1750 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1749 |> unbox
                        let v1751 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1752 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1750 v1751 
                        let v1753 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1754 : string = " " + v1753 + v1258 + ""
                        let v1755 : float = v1253.l10
                        let v1756 : (float -> string) = _.ToString()
                        let v1757 : string = v1756 v1755
                        (* run_target_args'
                        let v1760 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1761 : string = "&*$0"
                        let v1762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1757 v1761 
                        let _run_target_args'_v1760 = v1762 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1763 : string = "&*$0"
                        let v1764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1757 v1763 
                        let _run_target_args'_v1760 = v1764 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1765 : string = "&*$0"
                        let v1766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1757 v1765 
                        let _run_target_args'_v1760 = v1766 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1767 : Ref<Str> = v1757 |> unbox<Ref<Str>>
                        let _run_target_args'_v1760 = v1767 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1770 : Ref<Str> = v1757 |> unbox<Ref<Str>>
                        let _run_target_args'_v1760 = v1770 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1773 : Ref<Str> = v1757 |> unbox<Ref<Str>>
                        let _run_target_args'_v1760 = v1773 
                        #endif
#else
                        let v1776 : Ref<Str> = v1757 |> unbox<Ref<Str>>
                        let _run_target_args'_v1760 = v1776 
                        #endif
                        let v1779 : Ref<Str> = _run_target_args'_v1760 
                        (* run_target_args'
                        let v1784 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1785 : string = "String::from($0)"
                        let v1786 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1779 v1785 
                        let _run_target_args'_v1784 = v1786 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1787 : string = "String::from($0)"
                        let v1788 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1779 v1787 
                        let _run_target_args'_v1784 = v1788 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1789 : string = "String::from($0)"
                        let v1790 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1779 v1789 
                        let _run_target_args'_v1784 = v1790 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1791 : std_string_String = v1779 |> unbox<std_string_String>
                        let _run_target_args'_v1784 = v1791 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1794 : std_string_String = v1779 |> unbox<std_string_String>
                        let _run_target_args'_v1784 = v1794 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1797 : std_string_String = v1779 |> unbox<std_string_String>
                        let _run_target_args'_v1784 = v1797 
                        #endif
#else
                        let v1800 : std_string_String = v1779 |> unbox<std_string_String>
                        let _run_target_args'_v1784 = v1800 
                        #endif
                        let v1803 : std_string_String = _run_target_args'_v1784 
                        let v1808 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1809 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1803 v1808 
                        let v1810 : string = "v1809"
                        let v1811 : string = v1810 + v1258 
                        let v1812 : string = v1811 + v1258 
                        let v1813 : string = "vec![" + v1812 + "]"
                        let v1814 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1813 
                        let v1815 : string = "leptos::prelude::Fragment::new($0)"
                        let v1816 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1814 v1815 
                        let v1817 : string = "leptos::prelude::AnyView::from($0)"
                        let v1818 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1816 v1817 
                        let v1819 : string = "<" + v1321 + " " + v1754 + ">move || { v1818 }</" + v1321 + ">"
                        let v1820 : string = "leptos::prelude::view! { " + v1819 + " }"
                        let v1821 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1820 
                        let v1822 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1821 |> unbox
                        let v1823 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1824 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1822 v1823 
                        let v1825 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v1826 : string = " " + v1825 + v1258 + ""
                        let v1827 : uint32 = v1253.l6
                        let v1828 : (uint32 -> string) = _.ToString()
                        let v1829 : string = v1828 v1827
                        (* run_target_args'
                        let v1832 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1833 : string = "&*$0"
                        let v1834 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1829 v1833 
                        let _run_target_args'_v1832 = v1834 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1835 : string = "&*$0"
                        let v1836 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1829 v1835 
                        let _run_target_args'_v1832 = v1836 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1837 : string = "&*$0"
                        let v1838 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1829 v1837 
                        let _run_target_args'_v1832 = v1838 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1839 : Ref<Str> = v1829 |> unbox<Ref<Str>>
                        let _run_target_args'_v1832 = v1839 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1842 : Ref<Str> = v1829 |> unbox<Ref<Str>>
                        let _run_target_args'_v1832 = v1842 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1845 : Ref<Str> = v1829 |> unbox<Ref<Str>>
                        let _run_target_args'_v1832 = v1845 
                        #endif
#else
                        let v1848 : Ref<Str> = v1829 |> unbox<Ref<Str>>
                        let _run_target_args'_v1832 = v1848 
                        #endif
                        let v1851 : Ref<Str> = _run_target_args'_v1832 
                        (* run_target_args'
                        let v1856 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1857 : string = "String::from($0)"
                        let v1858 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1851 v1857 
                        let _run_target_args'_v1856 = v1858 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1859 : string = "String::from($0)"
                        let v1860 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1851 v1859 
                        let _run_target_args'_v1856 = v1860 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1861 : string = "String::from($0)"
                        let v1862 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1851 v1861 
                        let _run_target_args'_v1856 = v1862 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1863 : std_string_String = v1851 |> unbox<std_string_String>
                        let _run_target_args'_v1856 = v1863 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1866 : std_string_String = v1851 |> unbox<std_string_String>
                        let _run_target_args'_v1856 = v1866 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1869 : std_string_String = v1851 |> unbox<std_string_String>
                        let _run_target_args'_v1856 = v1869 
                        #endif
#else
                        let v1872 : std_string_String = v1851 |> unbox<std_string_String>
                        let _run_target_args'_v1856 = v1872 
                        #endif
                        let v1875 : std_string_String = _run_target_args'_v1856 
                        let v1880 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v1881 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1875 v1880 
                        let v1882 : string = "v1881"
                        let v1883 : string = v1882 + v1258 
                        let v1884 : string = v1883 + v1258 
                        let v1885 : string = "vec![" + v1884 + "]"
                        let v1886 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1885 
                        let v1887 : string = "leptos::prelude::Fragment::new($0)"
                        let v1888 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1886 v1887 
                        let v1889 : string = "leptos::prelude::AnyView::from($0)"
                        let v1890 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1888 v1889 
                        let v1891 : string = "<" + v1321 + " " + v1826 + ">move || { v1890 }</" + v1321 + ">"
                        let v1892 : string = "leptos::prelude::view! { " + v1891 + " }"
                        let v1893 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v1892 
                        let v1894 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v1893 |> unbox
                        let v1895 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v1896 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1894 v1895 
                        let v1897 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\""
                        let v1898 : string = " " + v1897 + v1258 + ""
                        let v1899 : (std_string_String []) = v1253.l11
                        let v1900 : uint64 = System.Convert.ToUInt64 v1899.Length
                        let v1901 : bool = v1900 = 0UL
                        let v2072 : leptos_dom_Fragment =
                            if v1901 then
                                (* run_target_args'
                                let v1902 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1903 : string = "&*$0"
                                let v1904 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1258 v1903 
                                let _run_target_args'_v1902 = v1904 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1905 : string = "&*$0"
                                let v1906 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1258 v1905 
                                let _run_target_args'_v1902 = v1906 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1907 : string = "&*$0"
                                let v1908 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1258 v1907 
                                let _run_target_args'_v1902 = v1908 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1909 : Ref<Str> = v1258 |> unbox<Ref<Str>>
                                let _run_target_args'_v1902 = v1909 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1912 : Ref<Str> = v1258 |> unbox<Ref<Str>>
                                let _run_target_args'_v1902 = v1912 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1915 : Ref<Str> = v1258 |> unbox<Ref<Str>>
                                let _run_target_args'_v1902 = v1915 
                                #endif
#else
                                let v1918 : Ref<Str> = v1258 |> unbox<Ref<Str>>
                                let _run_target_args'_v1902 = v1918 
                                #endif
                                let v1921 : Ref<Str> = _run_target_args'_v1902 
                                (* run_target_args'
                                let v1926 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1927 : string = "String::from($0)"
                                let v1928 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1921 v1927 
                                let _run_target_args'_v1926 = v1928 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1929 : string = "String::from($0)"
                                let v1930 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1921 v1929 
                                let _run_target_args'_v1926 = v1930 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1931 : string = "String::from($0)"
                                let v1932 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1921 v1931 
                                let _run_target_args'_v1926 = v1932 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1933 : std_string_String = v1921 |> unbox<std_string_String>
                                let _run_target_args'_v1926 = v1933 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1936 : std_string_String = v1921 |> unbox<std_string_String>
                                let _run_target_args'_v1926 = v1936 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1939 : std_string_String = v1921 |> unbox<std_string_String>
                                let _run_target_args'_v1926 = v1939 
                                #endif
#else
                                let v1942 : std_string_String = v1921 |> unbox<std_string_String>
                                let _run_target_args'_v1926 = v1942 
                                #endif
                                let v1945 : std_string_String = _run_target_args'_v1926 
                                let v1950 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                                let v1951 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1945 v1950 
                                let v1952 : string = "v1951"
                                let v1953 : string = v1952 + v1258 
                                let v1954 : string = v1953 + v1258 
                                let v1955 : string = "vec![" + v1954 + "]"
                                let v1956 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1955 
                                let v1957 : string = "leptos::prelude::Fragment::new($0)"
                                let v1958 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v1956 v1957 
                                v1958
                            else
                                let v1959 : (std_string_String []) = v1253.l11
                                let v1960 : string = "$0.to_vec()"
                                let v1961 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1959 v1960 
                                let v1962 : unit = ()
                                let v1963 : string = $"true; let _func1_from_v1962 = Func1::from(move |value| {{ //"
                                let v1964 : bool = Fable.Core.RustInterop.emitRustExpr () v1963 
                                let v1965 : string = $"value"
                                let v1966 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1965 
                                let v1967 : string = "fable_library_rust::String_::fromString($0)"
                                let v1968 : string = Fable.Core.RustInterop.emitRustExpr v1966 v1967 
                                let func1_from_result = v1968 //
                                let v1969 : _ = func1_from_result
                                let v1970 : string = $"true; $0 /*"
                                let v1971 : bool = Fable.Core.RustInterop.emitRustExpr v1969 v1970 
                                let v1972 : string = $"*/ }}); //"
                                let v1973 : bool = Fable.Core.RustInterop.emitRustExpr () v1972 
                                let v1974 : string = $"_func1_from_v1962"
                                let v1975 : Func0<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr () v1974 
                                let v1976 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                                let v1977 : (std_string_String -> string) = closure332(v1975)
                                let v1978 : Vec<string> = Fable.Core.RustInterop.emitRustExpr struct (v1961, v1977) v1976 
                                let v1979 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                                let v1980 : (string []) = Fable.Core.RustInterop.emitRustExpr v1978 v1979 
                                let v1981 : string seq = v1980 |> Seq.ofArray
                                let v1984 : string = method279()
                                let v1985 : (string -> (string seq -> string)) = String.concat
                                let v1986 : (string seq -> string) = v1985 v1984
                                let v1987 : string = v1986 v1981
                                let v1991 : string = "\\n"
                                let v1992 : string = "\n"
                                let v1993 : string = v1987.Replace (v1991, v1992)
                                let v1994 : string = "$0"
                                let v1995 : (unit -> string) = closure336()
                                let v1996 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v1995 v1994 
                                let v1997 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v1996(())"
                                let v1998 : string = " " + v1997 + v1258 + ""
                                (* run_target_args'
                                let v1999 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2000 : string = "&*$0"
                                let v2001 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1993 v2000 
                                let _run_target_args'_v1999 = v2001 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2002 : string = "&*$0"
                                let v2003 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1993 v2002 
                                let _run_target_args'_v1999 = v2003 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2004 : string = "&*$0"
                                let v2005 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1993 v2004 
                                let _run_target_args'_v1999 = v2005 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2006 : Ref<Str> = v1993 |> unbox<Ref<Str>>
                                let _run_target_args'_v1999 = v2006 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2009 : Ref<Str> = v1993 |> unbox<Ref<Str>>
                                let _run_target_args'_v1999 = v2009 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2012 : Ref<Str> = v1993 |> unbox<Ref<Str>>
                                let _run_target_args'_v1999 = v2012 
                                #endif
#else
                                let v2015 : Ref<Str> = v1993 |> unbox<Ref<Str>>
                                let _run_target_args'_v1999 = v2015 
                                #endif
                                let v2018 : Ref<Str> = _run_target_args'_v1999 
                                (* run_target_args'
                                let v2023 : unit = ()
                                run_target_args' *)
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v2024 : string = "String::from($0)"
                                let v2025 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2018 v2024 
                                let _run_target_args'_v2023 = v2025 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v2026 : string = "String::from($0)"
                                let v2027 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2018 v2026 
                                let _run_target_args'_v2023 = v2027 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v2028 : string = "String::from($0)"
                                let v2029 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2018 v2028 
                                let _run_target_args'_v2023 = v2029 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v2030 : std_string_String = v2018 |> unbox<std_string_String>
                                let _run_target_args'_v2023 = v2030 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v2033 : std_string_String = v2018 |> unbox<std_string_String>
                                let _run_target_args'_v2023 = v2033 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v2036 : std_string_String = v2018 |> unbox<std_string_String>
                                let _run_target_args'_v2023 = v2036 
                                #endif
#else
                                let v2039 : std_string_String = v2018 |> unbox<std_string_String>
                                let _run_target_args'_v2023 = v2039 
                                #endif
                                let v2042 : std_string_String = _run_target_args'_v2023 
                                let v2047 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                                let v2048 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2042 v2047 
                                let v2049 : string = "v2048"
                                let v2050 : string = v2049 + v1258 
                                let v2051 : string = v2050 + v1258 
                                let v2052 : string = "vec![" + v2051 + "]"
                                let v2053 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2052 
                                let v2054 : string = "leptos::prelude::Fragment::new($0)"
                                let v2055 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2053 v2054 
                                let v2056 : string = "leptos::prelude::AnyView::from($0)"
                                let v2057 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2055 v2056 
                                let v2058 : string = "pre"
                                let v2059 : string = "<" + v2058 + " " + v1998 + ">move || { v2057 }</" + v2058 + ">"
                                let v2060 : string = "leptos::prelude::view! { " + v2059 + " }"
                                let v2061 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2060 
                                let v2062 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v2061 |> unbox
                                let v2063 : string = "leptos::prelude::IntoAny::into_any($0)"
                                let v2064 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2062 v2063 
                                let v2065 : string = "v2064"
                                let v2066 : string = v2065 + v1258 
                                let v2067 : string = v2066 + v1258 
                                let v2068 : string = "vec![" + v2067 + "]"
                                let v2069 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2068 
                                let v2070 : string = "leptos::prelude::Fragment::new($0)"
                                let v2071 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2069 v2070 
                                v2071
                        let v2073 : string = "leptos::prelude::AnyView::from($0)"
                        let v2074 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2072 v2073 
                        let v2075 : string = "<" + v1321 + " " + v1898 + ">move || { v2074 }</" + v1321 + ">"
                        let v2076 : string = "leptos::prelude::view! { " + v2075 + " }"
                        let v2077 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2076 
                        let v2078 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v2077 |> unbox
                        let v2079 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2080 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2078 v2079 
                        let v2081 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v2082 : string = " " + v2081 + v1258 + ""
                        let v2083 : bool = v1253.l9
                        let v2084 : (bool -> string) = _.ToString()
                        let v2085 : string = v2084 v2083
                        (* run_target_args'
                        let v2088 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2089 : string = "&*$0"
                        let v2090 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2085 v2089 
                        let _run_target_args'_v2088 = v2090 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2091 : string = "&*$0"
                        let v2092 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2085 v2091 
                        let _run_target_args'_v2088 = v2092 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2093 : string = "&*$0"
                        let v2094 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2085 v2093 
                        let _run_target_args'_v2088 = v2094 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2095 : Ref<Str> = v2085 |> unbox<Ref<Str>>
                        let _run_target_args'_v2088 = v2095 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2098 : Ref<Str> = v2085 |> unbox<Ref<Str>>
                        let _run_target_args'_v2088 = v2098 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2101 : Ref<Str> = v2085 |> unbox<Ref<Str>>
                        let _run_target_args'_v2088 = v2101 
                        #endif
#else
                        let v2104 : Ref<Str> = v2085 |> unbox<Ref<Str>>
                        let _run_target_args'_v2088 = v2104 
                        #endif
                        let v2107 : Ref<Str> = _run_target_args'_v2088 
                        (* run_target_args'
                        let v2112 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2113 : string = "String::from($0)"
                        let v2114 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2107 v2113 
                        let _run_target_args'_v2112 = v2114 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2115 : string = "String::from($0)"
                        let v2116 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2107 v2115 
                        let _run_target_args'_v2112 = v2116 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2117 : string = "String::from($0)"
                        let v2118 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2107 v2117 
                        let _run_target_args'_v2112 = v2118 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2119 : std_string_String = v2107 |> unbox<std_string_String>
                        let _run_target_args'_v2112 = v2119 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2122 : std_string_String = v2107 |> unbox<std_string_String>
                        let _run_target_args'_v2112 = v2122 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2125 : std_string_String = v2107 |> unbox<std_string_String>
                        let _run_target_args'_v2112 = v2125 
                        #endif
#else
                        let v2128 : std_string_String = v2107 |> unbox<std_string_String>
                        let _run_target_args'_v2112 = v2128 
                        #endif
                        let v2131 : std_string_String = _run_target_args'_v2112 
                        let v2136 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2137 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2131 v2136 
                        let v2138 : string = "v2137"
                        let v2139 : string = v2138 + v1258 
                        let v2140 : string = v2139 + v1258 
                        let v2141 : string = "vec![" + v2140 + "]"
                        let v2142 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2141 
                        let v2143 : string = "leptos::prelude::Fragment::new($0)"
                        let v2144 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2142 v2143 
                        let v2145 : string = "leptos::prelude::AnyView::from($0)"
                        let v2146 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2144 v2145 
                        let v2147 : string = "<" + v1321 + " " + v2082 + ">move || { v2146 }</" + v1321 + ">"
                        let v2148 : string = "leptos::prelude::view! { " + v2147 + " }"
                        let v2149 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2148 
                        let v2150 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v2149 |> unbox
                        let v2151 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2152 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2150 v2151 
                        let v2153 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v2154 : string = " " + v2153 + v1258 + ""
                        let v2155 : std_string_String = v1253.l3
                        let v2156 : string = "fable_library_rust::String_::fromString($0)"
                        let v2157 : string = Fable.Core.RustInterop.emitRustExpr v2155 v2156 
                        (* run_target_args'
                        let v2158 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2159 : string = "&*$0"
                        let v2160 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2157 v2159 
                        let _run_target_args'_v2158 = v2160 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2161 : string = "&*$0"
                        let v2162 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2157 v2161 
                        let _run_target_args'_v2158 = v2162 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2163 : string = "&*$0"
                        let v2164 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2157 v2163 
                        let _run_target_args'_v2158 = v2164 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2165 : Ref<Str> = v2157 |> unbox<Ref<Str>>
                        let _run_target_args'_v2158 = v2165 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2168 : Ref<Str> = v2157 |> unbox<Ref<Str>>
                        let _run_target_args'_v2158 = v2168 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2171 : Ref<Str> = v2157 |> unbox<Ref<Str>>
                        let _run_target_args'_v2158 = v2171 
                        #endif
#else
                        let v2174 : Ref<Str> = v2157 |> unbox<Ref<Str>>
                        let _run_target_args'_v2158 = v2174 
                        #endif
                        let v2177 : Ref<Str> = _run_target_args'_v2158 
                        (* run_target_args'
                        let v2182 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2183 : string = "String::from($0)"
                        let v2184 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2177 v2183 
                        let _run_target_args'_v2182 = v2184 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2185 : string = "String::from($0)"
                        let v2186 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2177 v2185 
                        let _run_target_args'_v2182 = v2186 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2187 : string = "String::from($0)"
                        let v2188 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2177 v2187 
                        let _run_target_args'_v2182 = v2188 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2189 : std_string_String = v2177 |> unbox<std_string_String>
                        let _run_target_args'_v2182 = v2189 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2192 : std_string_String = v2177 |> unbox<std_string_String>
                        let _run_target_args'_v2182 = v2192 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2195 : std_string_String = v2177 |> unbox<std_string_String>
                        let _run_target_args'_v2182 = v2195 
                        #endif
#else
                        let v2198 : std_string_String = v2177 |> unbox<std_string_String>
                        let _run_target_args'_v2182 = v2198 
                        #endif
                        let v2201 : std_string_String = _run_target_args'_v2182 
                        let v2206 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2207 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2201 v2206 
                        let v2208 : string = "v2207"
                        let v2209 : string = v2208 + v1258 
                        let v2210 : string = v2209 + v1258 
                        let v2211 : string = "vec![" + v2210 + "]"
                        let v2212 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2211 
                        let v2213 : string = "leptos::prelude::Fragment::new($0)"
                        let v2214 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2212 v2213 
                        let v2215 : string = "leptos::prelude::AnyView::from($0)"
                        let v2216 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2214 v2215 
                        let v2217 : string = "<" + v1321 + " " + v2154 + ">move || { v2216 }</" + v1321 + ">"
                        let v2218 : string = "leptos::prelude::view! { " + v2217 + " }"
                        let v2219 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2218 
                        let v2220 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v2219 |> unbox
                        let v2221 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2222 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2220 v2221 
                        let v2223 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v2224 : string = " " + v2223 + v1258 + ""
                        let v2225 : std_string_String = v1253.l4
                        let v2226 : string = "fable_library_rust::String_::fromString($0)"
                        let v2227 : string = Fable.Core.RustInterop.emitRustExpr v2225 v2226 
                        (* run_target_args'
                        let v2228 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2229 : string = "&*$0"
                        let v2230 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2227 v2229 
                        let _run_target_args'_v2228 = v2230 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2231 : string = "&*$0"
                        let v2232 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2227 v2231 
                        let _run_target_args'_v2228 = v2232 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2233 : string = "&*$0"
                        let v2234 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2227 v2233 
                        let _run_target_args'_v2228 = v2234 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2235 : Ref<Str> = v2227 |> unbox<Ref<Str>>
                        let _run_target_args'_v2228 = v2235 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2238 : Ref<Str> = v2227 |> unbox<Ref<Str>>
                        let _run_target_args'_v2228 = v2238 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2241 : Ref<Str> = v2227 |> unbox<Ref<Str>>
                        let _run_target_args'_v2228 = v2241 
                        #endif
#else
                        let v2244 : Ref<Str> = v2227 |> unbox<Ref<Str>>
                        let _run_target_args'_v2228 = v2244 
                        #endif
                        let v2247 : Ref<Str> = _run_target_args'_v2228 
                        (* run_target_args'
                        let v2252 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2253 : string = "String::from($0)"
                        let v2254 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2247 v2253 
                        let _run_target_args'_v2252 = v2254 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2255 : string = "String::from($0)"
                        let v2256 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2247 v2255 
                        let _run_target_args'_v2252 = v2256 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2257 : string = "String::from($0)"
                        let v2258 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2247 v2257 
                        let _run_target_args'_v2252 = v2258 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2259 : std_string_String = v2247 |> unbox<std_string_String>
                        let _run_target_args'_v2252 = v2259 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2262 : std_string_String = v2247 |> unbox<std_string_String>
                        let _run_target_args'_v2252 = v2262 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2265 : std_string_String = v2247 |> unbox<std_string_String>
                        let _run_target_args'_v2252 = v2265 
                        #endif
#else
                        let v2268 : std_string_String = v2247 |> unbox<std_string_String>
                        let _run_target_args'_v2252 = v2268 
                        #endif
                        let v2271 : std_string_String = _run_target_args'_v2252 
                        let v2276 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2277 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2271 v2276 
                        let v2278 : string = "v2277"
                        let v2279 : string = v2278 + v1258 
                        let v2280 : string = v2279 + v1258 
                        let v2281 : string = "vec![" + v2280 + "]"
                        let v2282 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2281 
                        let v2283 : string = "leptos::prelude::Fragment::new($0)"
                        let v2284 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2282 v2283 
                        let v2285 : string = "leptos::prelude::AnyView::from($0)"
                        let v2286 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2284 v2285 
                        let v2287 : string = "<" + v1321 + " " + v2224 + ">move || { v2286 }</" + v1321 + ">"
                        let v2288 : string = "leptos::prelude::view! { " + v2287 + " }"
                        let v2289 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2288 
                        let v2290 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v2289 |> unbox
                        let v2291 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2292 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2290 v2291 
                        let v2293 : string = "class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\""
                        let v2294 : string = " " + v2293 + v1258 + ""
                        let v2295 : std_string_String = v1253.l0
                        let v2296 : string = "fable_library_rust::String_::fromString($0)"
                        let v2297 : string = Fable.Core.RustInterop.emitRustExpr v2295 v2296 
                        (* run_target_args'
                        let v2298 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2299 : string = "&*$0"
                        let v2300 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2297 v2299 
                        let _run_target_args'_v2298 = v2300 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2301 : string = "&*$0"
                        let v2302 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2297 v2301 
                        let _run_target_args'_v2298 = v2302 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2303 : string = "&*$0"
                        let v2304 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2297 v2303 
                        let _run_target_args'_v2298 = v2304 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2305 : Ref<Str> = v2297 |> unbox<Ref<Str>>
                        let _run_target_args'_v2298 = v2305 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2308 : Ref<Str> = v2297 |> unbox<Ref<Str>>
                        let _run_target_args'_v2298 = v2308 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2311 : Ref<Str> = v2297 |> unbox<Ref<Str>>
                        let _run_target_args'_v2298 = v2311 
                        #endif
#else
                        let v2314 : Ref<Str> = v2297 |> unbox<Ref<Str>>
                        let _run_target_args'_v2298 = v2314 
                        #endif
                        let v2317 : Ref<Str> = _run_target_args'_v2298 
                        (* run_target_args'
                        let v2322 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2323 : string = "String::from($0)"
                        let v2324 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2317 v2323 
                        let _run_target_args'_v2322 = v2324 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2325 : string = "String::from($0)"
                        let v2326 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2317 v2325 
                        let _run_target_args'_v2322 = v2326 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2327 : string = "String::from($0)"
                        let v2328 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2317 v2327 
                        let _run_target_args'_v2322 = v2328 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2329 : std_string_String = v2317 |> unbox<std_string_String>
                        let _run_target_args'_v2322 = v2329 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2332 : std_string_String = v2317 |> unbox<std_string_String>
                        let _run_target_args'_v2322 = v2332 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2335 : std_string_String = v2317 |> unbox<std_string_String>
                        let _run_target_args'_v2322 = v2335 
                        #endif
#else
                        let v2338 : std_string_String = v2317 |> unbox<std_string_String>
                        let _run_target_args'_v2322 = v2338 
                        #endif
                        let v2341 : std_string_String = _run_target_args'_v2322 
                        let v2346 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2347 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2341 v2346 
                        let v2348 : string = "v2347"
                        let v2349 : string = v2348 + v1258 
                        let v2350 : string = v2349 + v1258 
                        let v2351 : string = "vec![" + v2350 + "]"
                        let v2352 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2351 
                        let v2353 : string = "leptos::prelude::Fragment::new($0)"
                        let v2354 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2352 v2353 
                        let v2355 : string = "leptos::prelude::AnyView::from($0)"
                        let v2356 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2354 v2355 
                        let v2357 : string = "<" + v1321 + " " + v2294 + ">move || { v2356 }</" + v1321 + ">"
                        let v2358 : string = "leptos::prelude::view! { " + v2357 + " }"
                        let v2359 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2358 
                        let v2360 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Td>> = v2359 |> unbox
                        let v2361 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2362 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2360 v2361 
                        let v2363 : string = "v2362"
                        let v2364 : string = v2363 + v1258 
                        let v2365 : string = v2364 + v1258 
                        let v2366 : string = "v2292"
                        let v2367 : string = v2366 + v1644 
                        let v2368 : string = v2367 + v2365 
                        let v2369 : string = "v2222"
                        let v2370 : string = v2369 + v1644 
                        let v2371 : string = v2370 + v2368 
                        let v2372 : string = "v2152"
                        let v2373 : string = v2372 + v1644 
                        let v2374 : string = v2373 + v2371 
                        let v2375 : string = "v2080"
                        let v2376 : string = v2375 + v1644 
                        let v2377 : string = v2376 + v2374 
                        let v2378 : string = "v1896"
                        let v2379 : string = v2378 + v1644 
                        let v2380 : string = v2379 + v2377 
                        let v2381 : string = "v1824"
                        let v2382 : string = v2381 + v1644 
                        let v2383 : string = v2382 + v2380 
                        let v2384 : string = "v1752"
                        let v2385 : string = v2384 + v1644 
                        let v2386 : string = v2385 + v2383 
                        let v2387 : string = "v1680"
                        let v2388 : string = v2387 + v1644 
                        let v2389 : string = v2388 + v2386 
                        let v2390 : string = "v1589"
                        let v2391 : string = v2390 + v1644 
                        let v2392 : string = v2391 + v2389 
                        let v2393 : string = "v1519"
                        let v2394 : string = v2393 + v1644 
                        let v2395 : string = v2394 + v2392 
                        let v2396 : string = "v1449"
                        let v2397 : string = v2396 + v1644 
                        let v2398 : string = v2397 + v2395 
                        let v2399 : string = "v1327"
                        let v2400 : string = v2399 + v1644 
                        let v2401 : string = v2400 + v2398 
                        let v2402 : string = "vec![" + v2401 + "]"
                        let v2403 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2402 
                        let v2404 : string = "leptos::prelude::Fragment::new($0)"
                        let v2405 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2403 v2404 
                        let v2406 : string = "leptos::prelude::AnyView::from($0)"
                        let v2407 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2405 v2406 
                        let v2408 : string = "tr"
                        let v2409 : string = "<" + v2408 + " " + v1259 + ">move || { v2407 }</" + v2408 + ">"
                        let v2410 : string = "leptos::prelude::view! { " + v2409 + " }"
                        let v2411 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2410 
                        let v2412 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v2411 |> unbox
                        let v2413 : string = "true; $0 }).collect::<Vec<_>>()"
                        let v2414 : bool = Fable.Core.RustInterop.emitRustExpr v2412 v2413 
                        let v2415 : string = "_vec_map"
                        let v2416 : Vec<leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>>> = Fable.Core.RustInterop.emitRustExpr () v2415 
                        let v2417 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                        let v2418 : bool = Fable.Core.RustInterop.emitRustExpr v2416 v2417 
                        let v2419 : string = "x"
                        let v2420 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = Fable.Core.RustInterop.emitRustExpr () v2419 
                        let v2421 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2422 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2420 v2421 
                        let v2423 : string = "true; $0 }).collect::<Vec<_>>()"
                        let v2424 : bool = Fable.Core.RustInterop.emitRustExpr v2422 v2423 
                        let v2425 : string = "_vec_map"
                        let v2426 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2425 
                        let v2427 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2428 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2426 v2427 
                        let v2429 : string = "v2428"
                        let v2430 : string = v2429 + v1258 
                        let v2431 : string = v2430 + v1258 
                        let v2432 : string = "vec![" + v2431 + "]"
                        let v2433 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2432 
                        let v2434 : string = "leptos::prelude::Fragment::new($0)"
                        let v2435 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2433 v2434 
                        let v2436 : string = "transaction.tr_head_render (1)"
                        let v2437 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v2438 : bool = Fable.Core.RustInterop.emitRustExpr v2436 v2437 
                        let v2439 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2440 : string = " " + v2439 + v1258 + ""
                        let v2441 : string = "Account"
                        (* run_target_args'
                        let v2442 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2443 : string = "&*$0"
                        let v2444 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2441 v2443 
                        let _run_target_args'_v2442 = v2444 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2445 : string = "&*$0"
                        let v2446 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2441 v2445 
                        let _run_target_args'_v2442 = v2446 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2447 : string = "&*$0"
                        let v2448 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2441 v2447 
                        let _run_target_args'_v2442 = v2448 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2449 : Ref<Str> = v2441 |> unbox<Ref<Str>>
                        let _run_target_args'_v2442 = v2449 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2452 : Ref<Str> = v2441 |> unbox<Ref<Str>>
                        let _run_target_args'_v2442 = v2452 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2455 : Ref<Str> = v2441 |> unbox<Ref<Str>>
                        let _run_target_args'_v2442 = v2455 
                        #endif
#else
                        let v2458 : Ref<Str> = v2441 |> unbox<Ref<Str>>
                        let _run_target_args'_v2442 = v2458 
                        #endif
                        let v2461 : Ref<Str> = _run_target_args'_v2442 
                        (* run_target_args'
                        let v2466 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2467 : string = "String::from($0)"
                        let v2468 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2461 v2467 
                        let _run_target_args'_v2466 = v2468 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2469 : string = "String::from($0)"
                        let v2470 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2461 v2469 
                        let _run_target_args'_v2466 = v2470 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2471 : string = "String::from($0)"
                        let v2472 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2461 v2471 
                        let _run_target_args'_v2466 = v2472 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2473 : std_string_String = v2461 |> unbox<std_string_String>
                        let _run_target_args'_v2466 = v2473 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2476 : std_string_String = v2461 |> unbox<std_string_String>
                        let _run_target_args'_v2466 = v2476 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2479 : std_string_String = v2461 |> unbox<std_string_String>
                        let _run_target_args'_v2466 = v2479 
                        #endif
#else
                        let v2482 : std_string_String = v2461 |> unbox<std_string_String>
                        let _run_target_args'_v2466 = v2482 
                        #endif
                        let v2485 : std_string_String = _run_target_args'_v2466 
                        let v2490 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2491 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2485 v2490 
                        let v2492 : string = "v2491"
                        let v2493 : string = v2492 + v1258 
                        let v2494 : string = v2493 + v1258 
                        let v2495 : string = "vec![" + v2494 + "]"
                        let v2496 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2495 
                        let v2497 : string = "leptos::prelude::Fragment::new($0)"
                        let v2498 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2496 v2497 
                        let v2499 : string = "leptos::prelude::AnyView::from($0)"
                        let v2500 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2498 v2499 
                        let v2501 : string = "th"
                        let v2502 : string = "<" + v2501 + " " + v2440 + ">move || { v2500 }</" + v2501 + ">"
                        let v2503 : string = "leptos::prelude::view! { " + v2502 + " }"
                        let v2504 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2503 
                        let v2505 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2504 |> unbox
                        let v2506 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2507 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2505 v2506 
                        let v2508 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2509 : string = " " + v2508 + v1258 + ""
                        let v2510 : string = "Block Timestamp"
                        (* run_target_args'
                        let v2511 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2512 : string = "&*$0"
                        let v2513 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2510 v2512 
                        let _run_target_args'_v2511 = v2513 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2514 : string = "&*$0"
                        let v2515 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2510 v2514 
                        let _run_target_args'_v2511 = v2515 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2516 : string = "&*$0"
                        let v2517 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2510 v2516 
                        let _run_target_args'_v2511 = v2517 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2518 : Ref<Str> = v2510 |> unbox<Ref<Str>>
                        let _run_target_args'_v2511 = v2518 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2521 : Ref<Str> = v2510 |> unbox<Ref<Str>>
                        let _run_target_args'_v2511 = v2521 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2524 : Ref<Str> = v2510 |> unbox<Ref<Str>>
                        let _run_target_args'_v2511 = v2524 
                        #endif
#else
                        let v2527 : Ref<Str> = v2510 |> unbox<Ref<Str>>
                        let _run_target_args'_v2511 = v2527 
                        #endif
                        let v2530 : Ref<Str> = _run_target_args'_v2511 
                        (* run_target_args'
                        let v2535 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2536 : string = "String::from($0)"
                        let v2537 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2530 v2536 
                        let _run_target_args'_v2535 = v2537 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2538 : string = "String::from($0)"
                        let v2539 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2530 v2538 
                        let _run_target_args'_v2535 = v2539 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2540 : string = "String::from($0)"
                        let v2541 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2530 v2540 
                        let _run_target_args'_v2535 = v2541 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2542 : std_string_String = v2530 |> unbox<std_string_String>
                        let _run_target_args'_v2535 = v2542 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2545 : std_string_String = v2530 |> unbox<std_string_String>
                        let _run_target_args'_v2535 = v2545 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2548 : std_string_String = v2530 |> unbox<std_string_String>
                        let _run_target_args'_v2535 = v2548 
                        #endif
#else
                        let v2551 : std_string_String = v2530 |> unbox<std_string_String>
                        let _run_target_args'_v2535 = v2551 
                        #endif
                        let v2554 : std_string_String = _run_target_args'_v2535 
                        let v2559 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2560 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2554 v2559 
                        let v2561 : string = "v2560"
                        let v2562 : string = v2561 + v1258 
                        let v2563 : string = v2562 + v1258 
                        let v2564 : string = "vec![" + v2563 + "]"
                        let v2565 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2564 
                        let v2566 : string = "leptos::prelude::Fragment::new($0)"
                        let v2567 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2565 v2566 
                        let v2568 : string = "leptos::prelude::AnyView::from($0)"
                        let v2569 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2567 v2568 
                        let v2570 : string = "<" + v2501 + " " + v2509 + ">move || { v2569 }</" + v2501 + ">"
                        let v2571 : string = "leptos::prelude::view! { " + v2570 + " }"
                        let v2572 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2571 
                        let v2573 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2572 |> unbox
                        let v2574 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2575 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2573 v2574 
                        let v2576 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2577 : string = " " + v2576 + v1258 + ""
                        let v2578 : string = "Predecessor"
                        (* run_target_args'
                        let v2579 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2580 : string = "&*$0"
                        let v2581 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2578 v2580 
                        let _run_target_args'_v2579 = v2581 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2582 : string = "&*$0"
                        let v2583 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2578 v2582 
                        let _run_target_args'_v2579 = v2583 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2584 : string = "&*$0"
                        let v2585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2578 v2584 
                        let _run_target_args'_v2579 = v2585 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2586 : Ref<Str> = v2578 |> unbox<Ref<Str>>
                        let _run_target_args'_v2579 = v2586 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2589 : Ref<Str> = v2578 |> unbox<Ref<Str>>
                        let _run_target_args'_v2579 = v2589 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2592 : Ref<Str> = v2578 |> unbox<Ref<Str>>
                        let _run_target_args'_v2579 = v2592 
                        #endif
#else
                        let v2595 : Ref<Str> = v2578 |> unbox<Ref<Str>>
                        let _run_target_args'_v2579 = v2595 
                        #endif
                        let v2598 : Ref<Str> = _run_target_args'_v2579 
                        (* run_target_args'
                        let v2603 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2604 : string = "String::from($0)"
                        let v2605 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2598 v2604 
                        let _run_target_args'_v2603 = v2605 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2606 : string = "String::from($0)"
                        let v2607 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2598 v2606 
                        let _run_target_args'_v2603 = v2607 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2608 : string = "String::from($0)"
                        let v2609 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2598 v2608 
                        let _run_target_args'_v2603 = v2609 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2610 : std_string_String = v2598 |> unbox<std_string_String>
                        let _run_target_args'_v2603 = v2610 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2613 : std_string_String = v2598 |> unbox<std_string_String>
                        let _run_target_args'_v2603 = v2613 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2616 : std_string_String = v2598 |> unbox<std_string_String>
                        let _run_target_args'_v2603 = v2616 
                        #endif
#else
                        let v2619 : std_string_String = v2598 |> unbox<std_string_String>
                        let _run_target_args'_v2603 = v2619 
                        #endif
                        let v2622 : std_string_String = _run_target_args'_v2603 
                        let v2627 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2628 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2622 v2627 
                        let v2629 : string = "v2628"
                        let v2630 : string = v2629 + v1258 
                        let v2631 : string = v2630 + v1258 
                        let v2632 : string = "vec![" + v2631 + "]"
                        let v2633 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2632 
                        let v2634 : string = "leptos::prelude::Fragment::new($0)"
                        let v2635 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2633 v2634 
                        let v2636 : string = "leptos::prelude::AnyView::from($0)"
                        let v2637 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2635 v2636 
                        let v2638 : string = "<" + v2501 + " " + v2577 + ">move || { v2637 }</" + v2501 + ">"
                        let v2639 : string = "leptos::prelude::view! { " + v2638 + " }"
                        let v2640 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2639 
                        let v2641 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2640 |> unbox
                        let v2642 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2643 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2641 v2642 
                        let v2644 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2645 : string = " " + v2644 + v1258 + ""
                        let v2646 : string = "Receiver"
                        (* run_target_args'
                        let v2647 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2648 : string = "&*$0"
                        let v2649 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2646 v2648 
                        let _run_target_args'_v2647 = v2649 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2650 : string = "&*$0"
                        let v2651 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2646 v2650 
                        let _run_target_args'_v2647 = v2651 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2652 : string = "&*$0"
                        let v2653 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2646 v2652 
                        let _run_target_args'_v2647 = v2653 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2654 : Ref<Str> = v2646 |> unbox<Ref<Str>>
                        let _run_target_args'_v2647 = v2654 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2657 : Ref<Str> = v2646 |> unbox<Ref<Str>>
                        let _run_target_args'_v2647 = v2657 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2660 : Ref<Str> = v2646 |> unbox<Ref<Str>>
                        let _run_target_args'_v2647 = v2660 
                        #endif
#else
                        let v2663 : Ref<Str> = v2646 |> unbox<Ref<Str>>
                        let _run_target_args'_v2647 = v2663 
                        #endif
                        let v2666 : Ref<Str> = _run_target_args'_v2647 
                        (* run_target_args'
                        let v2671 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2672 : string = "String::from($0)"
                        let v2673 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2666 v2672 
                        let _run_target_args'_v2671 = v2673 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2674 : string = "String::from($0)"
                        let v2675 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2666 v2674 
                        let _run_target_args'_v2671 = v2675 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2676 : string = "String::from($0)"
                        let v2677 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2666 v2676 
                        let _run_target_args'_v2671 = v2677 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2678 : std_string_String = v2666 |> unbox<std_string_String>
                        let _run_target_args'_v2671 = v2678 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2681 : std_string_String = v2666 |> unbox<std_string_String>
                        let _run_target_args'_v2671 = v2681 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2684 : std_string_String = v2666 |> unbox<std_string_String>
                        let _run_target_args'_v2671 = v2684 
                        #endif
#else
                        let v2687 : std_string_String = v2666 |> unbox<std_string_String>
                        let _run_target_args'_v2671 = v2687 
                        #endif
                        let v2690 : std_string_String = _run_target_args'_v2671 
                        let v2695 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2696 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2690 v2695 
                        let v2697 : string = "v2696"
                        let v2698 : string = v2697 + v1258 
                        let v2699 : string = v2698 + v1258 
                        let v2700 : string = "vec![" + v2699 + "]"
                        let v2701 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2700 
                        let v2702 : string = "leptos::prelude::Fragment::new($0)"
                        let v2703 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2701 v2702 
                        let v2704 : string = "leptos::prelude::AnyView::from($0)"
                        let v2705 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2703 v2704 
                        let v2706 : string = "<" + v2501 + " " + v2645 + ">move || { v2705 }</" + v2501 + ">"
                        let v2707 : string = "leptos::prelude::view! { " + v2706 + " }"
                        let v2708 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2707 
                        let v2709 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2708 |> unbox
                        let v2710 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2711 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2709 v2710 
                        let v2712 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2713 : string = " " + v2712 + v1258 + ""
                        let v2714 : string = "Action"
                        (* run_target_args'
                        let v2715 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2716 : string = "&*$0"
                        let v2717 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2714 v2716 
                        let _run_target_args'_v2715 = v2717 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2718 : string = "&*$0"
                        let v2719 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2714 v2718 
                        let _run_target_args'_v2715 = v2719 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2720 : string = "&*$0"
                        let v2721 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2714 v2720 
                        let _run_target_args'_v2715 = v2721 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2722 : Ref<Str> = v2714 |> unbox<Ref<Str>>
                        let _run_target_args'_v2715 = v2722 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2725 : Ref<Str> = v2714 |> unbox<Ref<Str>>
                        let _run_target_args'_v2715 = v2725 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2728 : Ref<Str> = v2714 |> unbox<Ref<Str>>
                        let _run_target_args'_v2715 = v2728 
                        #endif
#else
                        let v2731 : Ref<Str> = v2714 |> unbox<Ref<Str>>
                        let _run_target_args'_v2715 = v2731 
                        #endif
                        let v2734 : Ref<Str> = _run_target_args'_v2715 
                        (* run_target_args'
                        let v2739 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2740 : string = "String::from($0)"
                        let v2741 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2734 v2740 
                        let _run_target_args'_v2739 = v2741 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2742 : string = "String::from($0)"
                        let v2743 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2734 v2742 
                        let _run_target_args'_v2739 = v2743 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2744 : string = "String::from($0)"
                        let v2745 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2734 v2744 
                        let _run_target_args'_v2739 = v2745 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2746 : std_string_String = v2734 |> unbox<std_string_String>
                        let _run_target_args'_v2739 = v2746 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2749 : std_string_String = v2734 |> unbox<std_string_String>
                        let _run_target_args'_v2739 = v2749 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2752 : std_string_String = v2734 |> unbox<std_string_String>
                        let _run_target_args'_v2739 = v2752 
                        #endif
#else
                        let v2755 : std_string_String = v2734 |> unbox<std_string_String>
                        let _run_target_args'_v2739 = v2755 
                        #endif
                        let v2758 : std_string_String = _run_target_args'_v2739 
                        let v2763 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2764 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2758 v2763 
                        let v2765 : string = "v2764"
                        let v2766 : string = v2765 + v1258 
                        let v2767 : string = v2766 + v1258 
                        let v2768 : string = "vec![" + v2767 + "]"
                        let v2769 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2768 
                        let v2770 : string = "leptos::prelude::Fragment::new($0)"
                        let v2771 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2769 v2770 
                        let v2772 : string = "leptos::prelude::AnyView::from($0)"
                        let v2773 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2771 v2772 
                        let v2774 : string = "<" + v2501 + " " + v2713 + ">move || { v2773 }</" + v2501 + ">"
                        let v2775 : string = "leptos::prelude::view! { " + v2774 + " }"
                        let v2776 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2775 
                        let v2777 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2776 |> unbox
                        let v2778 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2779 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2777 v2778 
                        let v2780 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2781 : string = " " + v2780 + v1258 + ""
                        let v2782 : string = "Deposit"
                        (* run_target_args'
                        let v2783 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2784 : string = "&*$0"
                        let v2785 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2782 v2784 
                        let _run_target_args'_v2783 = v2785 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2786 : string = "&*$0"
                        let v2787 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2782 v2786 
                        let _run_target_args'_v2783 = v2787 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2788 : string = "&*$0"
                        let v2789 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2782 v2788 
                        let _run_target_args'_v2783 = v2789 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2790 : Ref<Str> = v2782 |> unbox<Ref<Str>>
                        let _run_target_args'_v2783 = v2790 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2793 : Ref<Str> = v2782 |> unbox<Ref<Str>>
                        let _run_target_args'_v2783 = v2793 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2796 : Ref<Str> = v2782 |> unbox<Ref<Str>>
                        let _run_target_args'_v2783 = v2796 
                        #endif
#else
                        let v2799 : Ref<Str> = v2782 |> unbox<Ref<Str>>
                        let _run_target_args'_v2783 = v2799 
                        #endif
                        let v2802 : Ref<Str> = _run_target_args'_v2783 
                        (* run_target_args'
                        let v2807 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2808 : string = "String::from($0)"
                        let v2809 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2802 v2808 
                        let _run_target_args'_v2807 = v2809 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2810 : string = "String::from($0)"
                        let v2811 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2802 v2810 
                        let _run_target_args'_v2807 = v2811 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2812 : string = "String::from($0)"
                        let v2813 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2802 v2812 
                        let _run_target_args'_v2807 = v2813 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2814 : std_string_String = v2802 |> unbox<std_string_String>
                        let _run_target_args'_v2807 = v2814 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2817 : std_string_String = v2802 |> unbox<std_string_String>
                        let _run_target_args'_v2807 = v2817 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2820 : std_string_String = v2802 |> unbox<std_string_String>
                        let _run_target_args'_v2807 = v2820 
                        #endif
#else
                        let v2823 : std_string_String = v2802 |> unbox<std_string_String>
                        let _run_target_args'_v2807 = v2823 
                        #endif
                        let v2826 : std_string_String = _run_target_args'_v2807 
                        let v2831 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2832 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2826 v2831 
                        let v2833 : string = "v2832"
                        let v2834 : string = v2833 + v1258 
                        let v2835 : string = v2834 + v1258 
                        let v2836 : string = "vec![" + v2835 + "]"
                        let v2837 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2836 
                        let v2838 : string = "leptos::prelude::Fragment::new($0)"
                        let v2839 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2837 v2838 
                        let v2840 : string = "leptos::prelude::AnyView::from($0)"
                        let v2841 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2839 v2840 
                        let v2842 : string = "<" + v2501 + " " + v2781 + ">move || { v2841 }</" + v2501 + ">"
                        let v2843 : string = "leptos::prelude::view! { " + v2842 + " }"
                        let v2844 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2843 
                        let v2845 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2844 |> unbox
                        let v2846 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2847 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2845 v2846 
                        let v2848 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2849 : string = " " + v2848 + v1258 + ""
                        let v2850 : string = "Fee"
                        (* run_target_args'
                        let v2851 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2852 : string = "&*$0"
                        let v2853 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2850 v2852 
                        let _run_target_args'_v2851 = v2853 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2854 : string = "&*$0"
                        let v2855 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2850 v2854 
                        let _run_target_args'_v2851 = v2855 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2856 : string = "&*$0"
                        let v2857 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2850 v2856 
                        let _run_target_args'_v2851 = v2857 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2858 : Ref<Str> = v2850 |> unbox<Ref<Str>>
                        let _run_target_args'_v2851 = v2858 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2861 : Ref<Str> = v2850 |> unbox<Ref<Str>>
                        let _run_target_args'_v2851 = v2861 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2864 : Ref<Str> = v2850 |> unbox<Ref<Str>>
                        let _run_target_args'_v2851 = v2864 
                        #endif
#else
                        let v2867 : Ref<Str> = v2850 |> unbox<Ref<Str>>
                        let _run_target_args'_v2851 = v2867 
                        #endif
                        let v2870 : Ref<Str> = _run_target_args'_v2851 
                        (* run_target_args'
                        let v2875 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2876 : string = "String::from($0)"
                        let v2877 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2870 v2876 
                        let _run_target_args'_v2875 = v2877 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2878 : string = "String::from($0)"
                        let v2879 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2870 v2878 
                        let _run_target_args'_v2875 = v2879 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2880 : string = "String::from($0)"
                        let v2881 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2870 v2880 
                        let _run_target_args'_v2875 = v2881 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2882 : std_string_String = v2870 |> unbox<std_string_String>
                        let _run_target_args'_v2875 = v2882 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2885 : std_string_String = v2870 |> unbox<std_string_String>
                        let _run_target_args'_v2875 = v2885 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2888 : std_string_String = v2870 |> unbox<std_string_String>
                        let _run_target_args'_v2875 = v2888 
                        #endif
#else
                        let v2891 : std_string_String = v2870 |> unbox<std_string_String>
                        let _run_target_args'_v2875 = v2891 
                        #endif
                        let v2894 : std_string_String = _run_target_args'_v2875 
                        let v2899 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2900 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2894 v2899 
                        let v2901 : string = "v2900"
                        let v2902 : string = v2901 + v1258 
                        let v2903 : string = v2902 + v1258 
                        let v2904 : string = "vec![" + v2903 + "]"
                        let v2905 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2904 
                        let v2906 : string = "leptos::prelude::Fragment::new($0)"
                        let v2907 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2905 v2906 
                        let v2908 : string = "leptos::prelude::AnyView::from($0)"
                        let v2909 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2907 v2908 
                        let v2910 : string = "<" + v2501 + " " + v2849 + ">move || { v2909 }</" + v2501 + ">"
                        let v2911 : string = "leptos::prelude::view! { " + v2910 + " }"
                        let v2912 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2911 
                        let v2913 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2912 |> unbox
                        let v2914 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2915 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2913 v2914 
                        let v2916 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2917 : string = " " + v2916 + v1258 + ""
                        let v2918 : string = "Block Height"
                        (* run_target_args'
                        let v2919 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2920 : string = "&*$0"
                        let v2921 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2918 v2920 
                        let _run_target_args'_v2919 = v2921 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2922 : string = "&*$0"
                        let v2923 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2918 v2922 
                        let _run_target_args'_v2919 = v2923 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2924 : string = "&*$0"
                        let v2925 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2918 v2924 
                        let _run_target_args'_v2919 = v2925 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2926 : Ref<Str> = v2918 |> unbox<Ref<Str>>
                        let _run_target_args'_v2919 = v2926 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2929 : Ref<Str> = v2918 |> unbox<Ref<Str>>
                        let _run_target_args'_v2919 = v2929 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2932 : Ref<Str> = v2918 |> unbox<Ref<Str>>
                        let _run_target_args'_v2919 = v2932 
                        #endif
#else
                        let v2935 : Ref<Str> = v2918 |> unbox<Ref<Str>>
                        let _run_target_args'_v2919 = v2935 
                        #endif
                        let v2938 : Ref<Str> = _run_target_args'_v2919 
                        (* run_target_args'
                        let v2943 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2944 : string = "String::from($0)"
                        let v2945 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2938 v2944 
                        let _run_target_args'_v2943 = v2945 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2946 : string = "String::from($0)"
                        let v2947 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2938 v2946 
                        let _run_target_args'_v2943 = v2947 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2948 : string = "String::from($0)"
                        let v2949 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2938 v2948 
                        let _run_target_args'_v2943 = v2949 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2950 : std_string_String = v2938 |> unbox<std_string_String>
                        let _run_target_args'_v2943 = v2950 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2953 : std_string_String = v2938 |> unbox<std_string_String>
                        let _run_target_args'_v2943 = v2953 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2956 : std_string_String = v2938 |> unbox<std_string_String>
                        let _run_target_args'_v2943 = v2956 
                        #endif
#else
                        let v2959 : std_string_String = v2938 |> unbox<std_string_String>
                        let _run_target_args'_v2943 = v2959 
                        #endif
                        let v2962 : std_string_String = _run_target_args'_v2943 
                        let v2967 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v2968 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2962 v2967 
                        let v2969 : string = "v2968"
                        let v2970 : string = v2969 + v1258 
                        let v2971 : string = v2970 + v1258 
                        let v2972 : string = "vec![" + v2971 + "]"
                        let v2973 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2972 
                        let v2974 : string = "leptos::prelude::Fragment::new($0)"
                        let v2975 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2973 v2974 
                        let v2976 : string = "leptos::prelude::AnyView::from($0)"
                        let v2977 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2975 v2976 
                        let v2978 : string = "<" + v2501 + " " + v2917 + ">move || { v2977 }</" + v2501 + ">"
                        let v2979 : string = "leptos::prelude::view! { " + v2978 + " }"
                        let v2980 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2979 
                        let v2981 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v2980 |> unbox
                        let v2982 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v2983 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2981 v2982 
                        let v2984 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v2985 : string = " " + v2984 + v1258 + ""
                        let v2986 : int32 = 0
                        let v2987 : bool = method280(v339, v2986)
                        let v2988 : bool = false = v2987
                        let v2990 : string =
                            if v2988 then
                                v1258
                            else
                                let v2989 : string = "Logs"
                                v2989
                        (* run_target_args'
                        let v2991 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2992 : string = "&*$0"
                        let v2993 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2990 v2992 
                        let _run_target_args'_v2991 = v2993 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2994 : string = "&*$0"
                        let v2995 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2990 v2994 
                        let _run_target_args'_v2991 = v2995 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2996 : string = "&*$0"
                        let v2997 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2990 v2996 
                        let _run_target_args'_v2991 = v2997 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2998 : Ref<Str> = v2990 |> unbox<Ref<Str>>
                        let _run_target_args'_v2991 = v2998 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3001 : Ref<Str> = v2990 |> unbox<Ref<Str>>
                        let _run_target_args'_v2991 = v3001 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3004 : Ref<Str> = v2990 |> unbox<Ref<Str>>
                        let _run_target_args'_v2991 = v3004 
                        #endif
#else
                        let v3007 : Ref<Str> = v2990 |> unbox<Ref<Str>>
                        let _run_target_args'_v2991 = v3007 
                        #endif
                        let v3010 : Ref<Str> = _run_target_args'_v2991 
                        (* run_target_args'
                        let v3015 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3016 : string = "String::from($0)"
                        let v3017 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3010 v3016 
                        let _run_target_args'_v3015 = v3017 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3018 : string = "String::from($0)"
                        let v3019 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3010 v3018 
                        let _run_target_args'_v3015 = v3019 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3020 : string = "String::from($0)"
                        let v3021 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3010 v3020 
                        let _run_target_args'_v3015 = v3021 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3022 : std_string_String = v3010 |> unbox<std_string_String>
                        let _run_target_args'_v3015 = v3022 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3025 : std_string_String = v3010 |> unbox<std_string_String>
                        let _run_target_args'_v3015 = v3025 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3028 : std_string_String = v3010 |> unbox<std_string_String>
                        let _run_target_args'_v3015 = v3028 
                        #endif
#else
                        let v3031 : std_string_String = v3010 |> unbox<std_string_String>
                        let _run_target_args'_v3015 = v3031 
                        #endif
                        let v3034 : std_string_String = _run_target_args'_v3015 
                        let v3039 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v3040 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3034 v3039 
                        let v3041 : string = "v3040"
                        let v3042 : string = v3041 + v1258 
                        let v3043 : string = v3042 + v1258 
                        let v3044 : string = "vec![" + v3043 + "]"
                        let v3045 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3044 
                        let v3046 : string = "leptos::prelude::Fragment::new($0)"
                        let v3047 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3045 v3046 
                        let v3048 : string = "leptos::prelude::AnyView::from($0)"
                        let v3049 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3047 v3048 
                        let v3050 : string = "<" + v2501 + " " + v2985 + ">move || { v3049 }</" + v2501 + ">"
                        let v3051 : string = "leptos::prelude::view! { " + v3050 + " }"
                        let v3052 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3051 
                        let v3053 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v3052 |> unbox
                        let v3054 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3055 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3053 v3054 
                        let v3056 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v3057 : string = " " + v3056 + v1258 + ""
                        let v3058 : string = "Outcome Status"
                        (* run_target_args'
                        let v3059 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3060 : string = "&*$0"
                        let v3061 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3058 v3060 
                        let _run_target_args'_v3059 = v3061 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3062 : string = "&*$0"
                        let v3063 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3058 v3062 
                        let _run_target_args'_v3059 = v3063 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3064 : string = "&*$0"
                        let v3065 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3058 v3064 
                        let _run_target_args'_v3059 = v3065 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3066 : Ref<Str> = v3058 |> unbox<Ref<Str>>
                        let _run_target_args'_v3059 = v3066 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3069 : Ref<Str> = v3058 |> unbox<Ref<Str>>
                        let _run_target_args'_v3059 = v3069 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3072 : Ref<Str> = v3058 |> unbox<Ref<Str>>
                        let _run_target_args'_v3059 = v3072 
                        #endif
#else
                        let v3075 : Ref<Str> = v3058 |> unbox<Ref<Str>>
                        let _run_target_args'_v3059 = v3075 
                        #endif
                        let v3078 : Ref<Str> = _run_target_args'_v3059 
                        (* run_target_args'
                        let v3083 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3084 : string = "String::from($0)"
                        let v3085 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3078 v3084 
                        let _run_target_args'_v3083 = v3085 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3086 : string = "String::from($0)"
                        let v3087 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3078 v3086 
                        let _run_target_args'_v3083 = v3087 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3088 : string = "String::from($0)"
                        let v3089 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3078 v3088 
                        let _run_target_args'_v3083 = v3089 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3090 : std_string_String = v3078 |> unbox<std_string_String>
                        let _run_target_args'_v3083 = v3090 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3093 : std_string_String = v3078 |> unbox<std_string_String>
                        let _run_target_args'_v3083 = v3093 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3096 : std_string_String = v3078 |> unbox<std_string_String>
                        let _run_target_args'_v3083 = v3096 
                        #endif
#else
                        let v3099 : std_string_String = v3078 |> unbox<std_string_String>
                        let _run_target_args'_v3083 = v3099 
                        #endif
                        let v3102 : std_string_String = _run_target_args'_v3083 
                        let v3107 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v3108 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3102 v3107 
                        let v3109 : string = "v3108"
                        let v3110 : string = v3109 + v1258 
                        let v3111 : string = v3110 + v1258 
                        let v3112 : string = "vec![" + v3111 + "]"
                        let v3113 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3112 
                        let v3114 : string = "leptos::prelude::Fragment::new($0)"
                        let v3115 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3113 v3114 
                        let v3116 : string = "leptos::prelude::AnyView::from($0)"
                        let v3117 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3115 v3116 
                        let v3118 : string = "<" + v2501 + " " + v3057 + ">move || { v3117 }</" + v2501 + ">"
                        let v3119 : string = "leptos::prelude::view! { " + v3118 + " }"
                        let v3120 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3119 
                        let v3121 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v3120 |> unbox
                        let v3122 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3123 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3121 v3122 
                        let v3124 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v3125 : string = " " + v3124 + v1258 + ""
                        let v3126 : string = "Hash"
                        (* run_target_args'
                        let v3127 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3128 : string = "&*$0"
                        let v3129 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3126 v3128 
                        let _run_target_args'_v3127 = v3129 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3130 : string = "&*$0"
                        let v3131 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3126 v3130 
                        let _run_target_args'_v3127 = v3131 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3132 : string = "&*$0"
                        let v3133 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3126 v3132 
                        let _run_target_args'_v3127 = v3133 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3134 : Ref<Str> = v3126 |> unbox<Ref<Str>>
                        let _run_target_args'_v3127 = v3134 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3137 : Ref<Str> = v3126 |> unbox<Ref<Str>>
                        let _run_target_args'_v3127 = v3137 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3140 : Ref<Str> = v3126 |> unbox<Ref<Str>>
                        let _run_target_args'_v3127 = v3140 
                        #endif
#else
                        let v3143 : Ref<Str> = v3126 |> unbox<Ref<Str>>
                        let _run_target_args'_v3127 = v3143 
                        #endif
                        let v3146 : Ref<Str> = _run_target_args'_v3127 
                        (* run_target_args'
                        let v3151 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3152 : string = "String::from($0)"
                        let v3153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3146 v3152 
                        let _run_target_args'_v3151 = v3153 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3154 : string = "String::from($0)"
                        let v3155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3146 v3154 
                        let _run_target_args'_v3151 = v3155 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3156 : string = "String::from($0)"
                        let v3157 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3146 v3156 
                        let _run_target_args'_v3151 = v3157 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3158 : std_string_String = v3146 |> unbox<std_string_String>
                        let _run_target_args'_v3151 = v3158 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3161 : std_string_String = v3146 |> unbox<std_string_String>
                        let _run_target_args'_v3151 = v3161 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3164 : std_string_String = v3146 |> unbox<std_string_String>
                        let _run_target_args'_v3151 = v3164 
                        #endif
#else
                        let v3167 : std_string_String = v3146 |> unbox<std_string_String>
                        let _run_target_args'_v3151 = v3167 
                        #endif
                        let v3170 : std_string_String = _run_target_args'_v3151 
                        let v3175 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v3176 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3170 v3175 
                        let v3177 : string = "v3176"
                        let v3178 : string = v3177 + v1258 
                        let v3179 : string = v3178 + v1258 
                        let v3180 : string = "vec![" + v3179 + "]"
                        let v3181 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3180 
                        let v3182 : string = "leptos::prelude::Fragment::new($0)"
                        let v3183 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3181 v3182 
                        let v3184 : string = "leptos::prelude::AnyView::from($0)"
                        let v3185 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3183 v3184 
                        let v3186 : string = "<" + v2501 + " " + v3125 + ">move || { v3185 }</" + v2501 + ">"
                        let v3187 : string = "leptos::prelude::view! { " + v3186 + " }"
                        let v3188 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3187 
                        let v3189 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v3188 |> unbox
                        let v3190 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3191 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3189 v3190 
                        let v3192 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v3193 : string = " " + v3192 + v1258 + ""
                        let v3194 : string = "Block Hash"
                        (* run_target_args'
                        let v3195 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3196 : string = "&*$0"
                        let v3197 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3194 v3196 
                        let _run_target_args'_v3195 = v3197 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3198 : string = "&*$0"
                        let v3199 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3194 v3198 
                        let _run_target_args'_v3195 = v3199 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3200 : string = "&*$0"
                        let v3201 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3194 v3200 
                        let _run_target_args'_v3195 = v3201 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3202 : Ref<Str> = v3194 |> unbox<Ref<Str>>
                        let _run_target_args'_v3195 = v3202 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3205 : Ref<Str> = v3194 |> unbox<Ref<Str>>
                        let _run_target_args'_v3195 = v3205 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3208 : Ref<Str> = v3194 |> unbox<Ref<Str>>
                        let _run_target_args'_v3195 = v3208 
                        #endif
#else
                        let v3211 : Ref<Str> = v3194 |> unbox<Ref<Str>>
                        let _run_target_args'_v3195 = v3211 
                        #endif
                        let v3214 : Ref<Str> = _run_target_args'_v3195 
                        (* run_target_args'
                        let v3219 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3220 : string = "String::from($0)"
                        let v3221 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3214 v3220 
                        let _run_target_args'_v3219 = v3221 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3222 : string = "String::from($0)"
                        let v3223 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3214 v3222 
                        let _run_target_args'_v3219 = v3223 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3224 : string = "String::from($0)"
                        let v3225 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3214 v3224 
                        let _run_target_args'_v3219 = v3225 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3226 : std_string_String = v3214 |> unbox<std_string_String>
                        let _run_target_args'_v3219 = v3226 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3229 : std_string_String = v3214 |> unbox<std_string_String>
                        let _run_target_args'_v3219 = v3229 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3232 : std_string_String = v3214 |> unbox<std_string_String>
                        let _run_target_args'_v3219 = v3232 
                        #endif
#else
                        let v3235 : std_string_String = v3214 |> unbox<std_string_String>
                        let _run_target_args'_v3219 = v3235 
                        #endif
                        let v3238 : std_string_String = _run_target_args'_v3219 
                        let v3243 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v3244 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3238 v3243 
                        let v3245 : string = "v3244"
                        let v3246 : string = v3245 + v1258 
                        let v3247 : string = v3246 + v1258 
                        let v3248 : string = "vec![" + v3247 + "]"
                        let v3249 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3248 
                        let v3250 : string = "leptos::prelude::Fragment::new($0)"
                        let v3251 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3249 v3250 
                        let v3252 : string = "leptos::prelude::AnyView::from($0)"
                        let v3253 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3251 v3252 
                        let v3254 : string = "<" + v2501 + " " + v3193 + ">move || { v3253 }</" + v2501 + ">"
                        let v3255 : string = "leptos::prelude::view! { " + v3254 + " }"
                        let v3256 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3255 
                        let v3257 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v3256 |> unbox
                        let v3258 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3259 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3257 v3258 
                        let v3260 : string = "class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\""
                        let v3261 : string = " " + v3260 + v1258 + ""
                        let v3262 : string = "Receipt ID"
                        (* run_target_args'
                        let v3263 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3264 : string = "&*$0"
                        let v3265 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3262 v3264 
                        let _run_target_args'_v3263 = v3265 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3266 : string = "&*$0"
                        let v3267 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3262 v3266 
                        let _run_target_args'_v3263 = v3267 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3268 : string = "&*$0"
                        let v3269 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3262 v3268 
                        let _run_target_args'_v3263 = v3269 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3270 : Ref<Str> = v3262 |> unbox<Ref<Str>>
                        let _run_target_args'_v3263 = v3270 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3273 : Ref<Str> = v3262 |> unbox<Ref<Str>>
                        let _run_target_args'_v3263 = v3273 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3276 : Ref<Str> = v3262 |> unbox<Ref<Str>>
                        let _run_target_args'_v3263 = v3276 
                        #endif
#else
                        let v3279 : Ref<Str> = v3262 |> unbox<Ref<Str>>
                        let _run_target_args'_v3263 = v3279 
                        #endif
                        let v3282 : Ref<Str> = _run_target_args'_v3263 
                        (* run_target_args'
                        let v3287 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3288 : string = "String::from($0)"
                        let v3289 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3282 v3288 
                        let _run_target_args'_v3287 = v3289 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3290 : string = "String::from($0)"
                        let v3291 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3282 v3290 
                        let _run_target_args'_v3287 = v3291 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3292 : string = "String::from($0)"
                        let v3293 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3282 v3292 
                        let _run_target_args'_v3287 = v3293 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3294 : std_string_String = v3282 |> unbox<std_string_String>
                        let _run_target_args'_v3287 = v3294 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3297 : std_string_String = v3282 |> unbox<std_string_String>
                        let _run_target_args'_v3287 = v3297 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3300 : std_string_String = v3282 |> unbox<std_string_String>
                        let _run_target_args'_v3287 = v3300 
                        #endif
#else
                        let v3303 : std_string_String = v3282 |> unbox<std_string_String>
                        let _run_target_args'_v3287 = v3303 
                        #endif
                        let v3306 : std_string_String = _run_target_args'_v3287 
                        let v3311 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                        let v3312 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3306 v3311 
                        let v3313 : string = "v3312"
                        let v3314 : string = v3313 + v1258 
                        let v3315 : string = v3314 + v1258 
                        let v3316 : string = "vec![" + v3315 + "]"
                        let v3317 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3316 
                        let v3318 : string = "leptos::prelude::Fragment::new($0)"
                        let v3319 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3317 v3318 
                        let v3320 : string = "leptos::prelude::AnyView::from($0)"
                        let v3321 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3319 v3320 
                        let v3322 : string = "<" + v2501 + " " + v3261 + ">move || { v3321 }</" + v2501 + ">"
                        let v3323 : string = "leptos::prelude::view! { " + v3322 + " }"
                        let v3324 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3323 
                        let v3325 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Th>> = v3324 |> unbox
                        let v3326 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3327 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3325 v3326 
                        let v3328 : string = "v3327"
                        let v3329 : string = v3328 + v1258 
                        let v3330 : string = v3329 + v1258 
                        let v3331 : string = "v3259"
                        let v3332 : string = v3331 + v1644 
                        let v3333 : string = v3332 + v3330 
                        let v3334 : string = "v3191"
                        let v3335 : string = v3334 + v1644 
                        let v3336 : string = v3335 + v3333 
                        let v3337 : string = "v3123"
                        let v3338 : string = v3337 + v1644 
                        let v3339 : string = v3338 + v3336 
                        let v3340 : string = "v3055"
                        let v3341 : string = v3340 + v1644 
                        let v3342 : string = v3341 + v3339 
                        let v3343 : string = "v2983"
                        let v3344 : string = v3343 + v1644 
                        let v3345 : string = v3344 + v3342 
                        let v3346 : string = "v2915"
                        let v3347 : string = v3346 + v1644 
                        let v3348 : string = v3347 + v3345 
                        let v3349 : string = "v2847"
                        let v3350 : string = v3349 + v1644 
                        let v3351 : string = v3350 + v3348 
                        let v3352 : string = "v2779"
                        let v3353 : string = v3352 + v1644 
                        let v3354 : string = v3353 + v3351 
                        let v3355 : string = "v2711"
                        let v3356 : string = v3355 + v1644 
                        let v3357 : string = v3356 + v3354 
                        let v3358 : string = "v2643"
                        let v3359 : string = v3358 + v1644 
                        let v3360 : string = v3359 + v3357 
                        let v3361 : string = "v2575"
                        let v3362 : string = v3361 + v1644 
                        let v3363 : string = v3362 + v3360 
                        let v3364 : string = "v2507"
                        let v3365 : string = v3364 + v1644 
                        let v3366 : string = v3365 + v3363 
                        let v3367 : string = "vec![" + v3366 + "]"
                        let v3368 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3367 
                        let v3369 : string = "leptos::prelude::Fragment::new($0)"
                        let v3370 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3368 v3369 
                        let v3371 : string = "leptos::prelude::AnyView::from($0)"
                        let v3372 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3370 v3371 
                        let v3373 : string = "<" + v2408 + " " + v1258 + ">move || { v3372 }</" + v2408 + ">"
                        let v3374 : string = "leptos::prelude::view! { " + v3373 + " }"
                        let v3375 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3374 
                        let v3376 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tr>> = v3375 |> unbox
                        let v3377 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3378 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3376 v3377 
                        let v3379 : string = "v3378"
                        let v3380 : string = v3379 + v1258 
                        let v3381 : string = v3380 + v1258 
                        let v3382 : string = "vec![" + v3381 + "]"
                        let v3383 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3382 
                        let v3384 : string = "leptos::prelude::Fragment::new($0)"
                        let v3385 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3383 v3384 
                        let v3386 : string = "class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\""
                        let v3387 : string = " " + v3386 + v1258 + ""
                        let v3388 : string = "class=\"ltr:text-left rtl:text-right\""
                        let v3389 : string = " " + v3388 + v1258 + ""
                        let v3390 : string = "leptos::prelude::AnyView::from($0)"
                        let v3391 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3385 v3390 
                        let v3392 : string = "thead"
                        let v3393 : string = "<" + v3392 + " " + v3389 + ">move || { v3391 }</" + v3392 + ">"
                        let v3394 : string = "leptos::prelude::view! { " + v3393 + " }"
                        let v3395 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3394 
                        let v3396 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Thead>> = v3395 |> unbox
                        let v3397 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3398 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3396 v3397 
                        let v3399 : string = "class=\"divide-y divide-gray-200 dark:divide-gray-700\""
                        let v3400 : string = " " + v3399 + v1258 + ""
                        let v3401 : string = "leptos::prelude::AnyView::from($0)"
                        let v3402 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2435 v3401 
                        let v3403 : string = "tbody"
                        let v3404 : string = "<" + v3403 + " " + v3400 + ">move || { v3402 }</" + v3403 + ">"
                        let v3405 : string = "leptos::prelude::view! { " + v3404 + " }"
                        let v3406 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3405 
                        let v3407 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Tbody>> = v3406 |> unbox
                        let v3408 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3409 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3407 v3408 
                        let v3410 : string = "v3409"
                        let v3411 : string = v3410 + v1258 
                        let v3412 : string = v3411 + v1258 
                        let v3413 : string = "v3398"
                        let v3414 : string = v3413 + v1644 
                        let v3415 : string = v3414 + v3412 
                        let v3416 : string = "vec![" + v3415 + "]"
                        let v3417 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3416 
                        let v3418 : string = "leptos::prelude::Fragment::new($0)"
                        let v3419 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3417 v3418 
                        let v3420 : string = "leptos::prelude::AnyView::from($0)"
                        let v3421 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3419 v3420 
                        let v3422 : string = "table"
                        let v3423 : string = "<" + v3422 + " " + v3387 + ">move || { v3421 }</" + v3422 + ">"
                        let v3424 : string = "leptos::prelude::view! { " + v3423 + " }"
                        let v3425 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3424 
                        let v3426 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Table>> = v3425 |> unbox
                        let v3427 : string = "leptos::prelude::IntoAny::into_any($0)"
                        let v3428 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3426 v3427 
                        v3428
                | _ ->
                    let v3430 : string = "class=\"grid place-content-center py-[10vh]\""
                    let v3431 : string = ""
                    let v3432 : string = " " + v3430 + v3431 + ""
                    let v3433 : string = "class=\"flex flex-1 [gap:4px] items-center\""
                    let v3434 : string = " " + v3433 + v3431 + ""
                    let v3435 : string = "$0"
                    let v3436 : (unit -> string) = closure191()
                    let v3437 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3436 v3435 
                    let v3438 : string = "version=\"1.1\""
                    let v3439 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                    let v3440 : string = "xmlns:xlink=\"http://www.w3.org/1999/xlink\""
                    let v3441 : string = "x=\"0px\""
                    let v3442 : string = "y=\"0px\""
                    let v3443 : string = "viewBox=\"0 0 24 30\""
                    let v3444 : string = "style=\"enable-background:new 0 0 50 50;\""
                    let v3445 : string = "xml:space=\"preserve\""
                    let v3446 : string = "class=move || \" \".to_owned() + &v3437(())"
                    let v3447 : string = " " + v3438 + v3431 + ""
                    let v3448 : string = " " + v3439 + v3447 + ""
                    let v3449 : string = " " + v3440 + v3448 + ""
                    let v3450 : string = " " + v3441 + v3449 + ""
                    let v3451 : string = " " + v3442 + v3450 + ""
                    let v3452 : string = " " + v3443 + v3451 + ""
                    let v3453 : string = " " + v3444 + v3452 + ""
                    let v3454 : string = " " + v3445 + v3453 + ""
                    let v3455 : string = " " + v3446 + v3454 + ""
                    let v3456 : string = "x=\"0\""
                    let v3457 : string = "y=\"10\""
                    let v3458 : string = "width=\"4\""
                    let v3459 : string = "height=\"10\""
                    let v3460 : string = "fill=\"#333\""
                    let v3461 : string = "opacity=\"0.2\""
                    let v3462 : string = " " + v3456 + v3431 + ""
                    let v3463 : string = " " + v3457 + v3462 + ""
                    let v3464 : string = " " + v3458 + v3463 + ""
                    let v3465 : string = " " + v3459 + v3464 + ""
                    let v3466 : string = " " + v3460 + v3465 + ""
                    let v3467 : string = " " + v3461 + v3466 + ""
                    let v3468 : string = "attributeName=\"opacity\""
                    let v3469 : string = "attributeType=\"XML\""
                    let v3470 : string = "values=\"0.2; 1; .2\""
                    let v3471 : string = "begin=\"0s\""
                    let v3472 : string = "dur=\"0.6s\""
                    let v3473 : string = "repeatCount=\"indefinite\""
                    let v3474 : string = " " + v3468 + v3431 + ""
                    let v3475 : string = " " + v3469 + v3474 + ""
                    let v3476 : string = " " + v3470 + v3475 + ""
                    let v3477 : string = " " + v3471 + v3476 + ""
                    let v3478 : string = " " + v3472 + v3477 + ""
                    let v3479 : string = " " + v3473 + v3478 + ""
                    let v3480 : string = "vec![" + v3431 + "]"
                    let v3481 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3480 
                    let v3482 : string = "leptos::prelude::Fragment::new($0)"
                    let v3483 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3481 v3482 
                    let v3484 : string = "leptos::prelude::AnyView::from($0)"
                    let v3485 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3483 v3484 
                    let v3486 : string = "animate"
                    let v3487 : string = "<" + v3486 + " " + v3479 + ">move || { v3485 }</" + v3486 + ">"
                    let v3488 : string = "leptos::prelude::view! { " + v3487 + " }"
                    let v3489 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3488 
                    let v3490 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3489 |> unbox
                    let v3491 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3492 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3490 v3491 
                    let v3493 : string = "attributeName=\"height\""
                    let v3494 : string = "attributeType=\"XML\""
                    let v3495 : string = "values=\"10; 20; 10\""
                    let v3496 : string = "begin=\"0s\""
                    let v3497 : string = "dur=\"0.6s\""
                    let v3498 : string = "repeatCount=\"indefinite\""
                    let v3499 : string = " " + v3493 + v3431 + ""
                    let v3500 : string = " " + v3494 + v3499 + ""
                    let v3501 : string = " " + v3495 + v3500 + ""
                    let v3502 : string = " " + v3496 + v3501 + ""
                    let v3503 : string = " " + v3497 + v3502 + ""
                    let v3504 : string = " " + v3498 + v3503 + ""
                    let v3505 : string = "vec![" + v3431 + "]"
                    let v3506 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3505 
                    let v3507 : string = "leptos::prelude::Fragment::new($0)"
                    let v3508 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3506 v3507 
                    let v3509 : string = "leptos::prelude::AnyView::from($0)"
                    let v3510 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3508 v3509 
                    let v3511 : string = "<" + v3486 + " " + v3504 + ">move || { v3510 }</" + v3486 + ">"
                    let v3512 : string = "leptos::prelude::view! { " + v3511 + " }"
                    let v3513 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3512 
                    let v3514 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3513 |> unbox
                    let v3515 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3516 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3514 v3515 
                    let v3517 : string = "attributeName=\"y\""
                    let v3518 : string = "attributeType=\"XML\""
                    let v3519 : string = "values=\"10; 5; 10\""
                    let v3520 : string = "begin=\"0s\""
                    let v3521 : string = "dur=\"0.6s\""
                    let v3522 : string = "repeatCount=\"indefinite\""
                    let v3523 : string = " " + v3517 + v3431 + ""
                    let v3524 : string = " " + v3518 + v3523 + ""
                    let v3525 : string = " " + v3519 + v3524 + ""
                    let v3526 : string = " " + v3520 + v3525 + ""
                    let v3527 : string = " " + v3521 + v3526 + ""
                    let v3528 : string = " " + v3522 + v3527 + ""
                    let v3529 : string = "vec![" + v3431 + "]"
                    let v3530 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3529 
                    let v3531 : string = "leptos::prelude::Fragment::new($0)"
                    let v3532 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3530 v3531 
                    let v3533 : string = "leptos::prelude::AnyView::from($0)"
                    let v3534 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3532 v3533 
                    let v3535 : string = "<" + v3486 + " " + v3528 + ">move || { v3534 }</" + v3486 + ">"
                    let v3536 : string = "leptos::prelude::view! { " + v3535 + " }"
                    let v3537 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3536 
                    let v3538 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3537 |> unbox
                    let v3539 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3540 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3538 v3539 
                    let v3541 : string = "v3540"
                    let v3542 : string = v3541 + v3431 
                    let v3543 : string = v3542 + v3431 
                    let v3544 : string = "v3516"
                    let v3545 : string = ", "
                    let v3546 : string = v3544 + v3545 
                    let v3547 : string = v3546 + v3543 
                    let v3548 : string = "v3492"
                    let v3549 : string = v3548 + v3545 
                    let v3550 : string = v3549 + v3547 
                    let v3551 : string = "vec![" + v3550 + "]"
                    let v3552 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3551 
                    let v3553 : string = "leptos::prelude::Fragment::new($0)"
                    let v3554 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3552 v3553 
                    let v3555 : string = "leptos::prelude::AnyView::from($0)"
                    let v3556 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3554 v3555 
                    let v3557 : string = "rect"
                    let v3558 : string = "<" + v3557 + " " + v3467 + ">move || { v3556 }</" + v3557 + ">"
                    let v3559 : string = "leptos::prelude::view! { " + v3558 + " }"
                    let v3560 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3559 
                    let v3561 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v3560 |> unbox
                    let v3562 : string = "x=\"8\""
                    let v3563 : string = "y=\"10\""
                    let v3564 : string = "width=\"4\""
                    let v3565 : string = "height=\"10\""
                    let v3566 : string = "fill=\"#333\""
                    let v3567 : string = "opacity=\"0.2\""
                    let v3568 : string = " " + v3562 + v3431 + ""
                    let v3569 : string = " " + v3563 + v3568 + ""
                    let v3570 : string = " " + v3564 + v3569 + ""
                    let v3571 : string = " " + v3565 + v3570 + ""
                    let v3572 : string = " " + v3566 + v3571 + ""
                    let v3573 : string = " " + v3567 + v3572 + ""
                    let v3574 : string = "attributeName=\"opacity\""
                    let v3575 : string = "attributeType=\"XML\""
                    let v3576 : string = "values=\"0.2; 1; .2\""
                    let v3577 : string = "begin=\"0.15s\""
                    let v3578 : string = "dur=\"0.6s\""
                    let v3579 : string = "repeatCount=\"indefinite\""
                    let v3580 : string = " " + v3574 + v3431 + ""
                    let v3581 : string = " " + v3575 + v3580 + ""
                    let v3582 : string = " " + v3576 + v3581 + ""
                    let v3583 : string = " " + v3577 + v3582 + ""
                    let v3584 : string = " " + v3578 + v3583 + ""
                    let v3585 : string = " " + v3579 + v3584 + ""
                    let v3586 : string = "vec![" + v3431 + "]"
                    let v3587 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3586 
                    let v3588 : string = "leptos::prelude::Fragment::new($0)"
                    let v3589 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3587 v3588 
                    let v3590 : string = "leptos::prelude::AnyView::from($0)"
                    let v3591 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3589 v3590 
                    let v3592 : string = "<" + v3486 + " " + v3585 + ">move || { v3591 }</" + v3486 + ">"
                    let v3593 : string = "leptos::prelude::view! { " + v3592 + " }"
                    let v3594 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3593 
                    let v3595 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3594 |> unbox
                    let v3596 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3597 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3595 v3596 
                    let v3598 : string = "attributeName=\"opacity\""
                    let v3599 : string = "attributeType=\"XML\""
                    let v3600 : string = "values=\"10; 20; 10\""
                    let v3601 : string = "begin=\"0.15s\""
                    let v3602 : string = "dur=\"0.6s\""
                    let v3603 : string = "repeatCount=\"indefinite\""
                    let v3604 : string = " " + v3598 + v3431 + ""
                    let v3605 : string = " " + v3599 + v3604 + ""
                    let v3606 : string = " " + v3600 + v3605 + ""
                    let v3607 : string = " " + v3601 + v3606 + ""
                    let v3608 : string = " " + v3602 + v3607 + ""
                    let v3609 : string = " " + v3603 + v3608 + ""
                    let v3610 : string = "vec![" + v3431 + "]"
                    let v3611 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3610 
                    let v3612 : string = "leptos::prelude::Fragment::new($0)"
                    let v3613 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3611 v3612 
                    let v3614 : string = "leptos::prelude::AnyView::from($0)"
                    let v3615 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3613 v3614 
                    let v3616 : string = "<" + v3486 + " " + v3609 + ">move || { v3615 }</" + v3486 + ">"
                    let v3617 : string = "leptos::prelude::view! { " + v3616 + " }"
                    let v3618 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3617 
                    let v3619 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3618 |> unbox
                    let v3620 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3621 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3619 v3620 
                    let v3622 : string = "attributeName=\"y\""
                    let v3623 : string = "attributeType=\"XML\""
                    let v3624 : string = "values=\"10; 5; 10\""
                    let v3625 : string = "begin=\"0.15s\""
                    let v3626 : string = "dur=\"0.6s\""
                    let v3627 : string = "repeatCount=\"indefinite\""
                    let v3628 : string = " " + v3622 + v3431 + ""
                    let v3629 : string = " " + v3623 + v3628 + ""
                    let v3630 : string = " " + v3624 + v3629 + ""
                    let v3631 : string = " " + v3625 + v3630 + ""
                    let v3632 : string = " " + v3626 + v3631 + ""
                    let v3633 : string = " " + v3627 + v3632 + ""
                    let v3634 : string = "vec![" + v3431 + "]"
                    let v3635 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3634 
                    let v3636 : string = "leptos::prelude::Fragment::new($0)"
                    let v3637 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3635 v3636 
                    let v3638 : string = "leptos::prelude::AnyView::from($0)"
                    let v3639 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3637 v3638 
                    let v3640 : string = "<" + v3486 + " " + v3633 + ">move || { v3639 }</" + v3486 + ">"
                    let v3641 : string = "leptos::prelude::view! { " + v3640 + " }"
                    let v3642 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3641 
                    let v3643 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3642 |> unbox
                    let v3644 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3645 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3643 v3644 
                    let v3646 : string = "v3645"
                    let v3647 : string = v3646 + v3431 
                    let v3648 : string = v3647 + v3431 
                    let v3649 : string = "v3621"
                    let v3650 : string = v3649 + v3545 
                    let v3651 : string = v3650 + v3648 
                    let v3652 : string = "v3597"
                    let v3653 : string = v3652 + v3545 
                    let v3654 : string = v3653 + v3651 
                    let v3655 : string = "vec![" + v3654 + "]"
                    let v3656 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3655 
                    let v3657 : string = "leptos::prelude::Fragment::new($0)"
                    let v3658 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3656 v3657 
                    let v3659 : string = "leptos::prelude::AnyView::from($0)"
                    let v3660 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3658 v3659 
                    let v3661 : string = "<" + v3557 + " " + v3573 + ">move || { v3660 }</" + v3557 + ">"
                    let v3662 : string = "leptos::prelude::view! { " + v3661 + " }"
                    let v3663 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3662 
                    let v3664 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v3663 |> unbox
                    let v3665 : string = "x=\"16\""
                    let v3666 : string = "y=\"10\""
                    let v3667 : string = "width=\"4\""
                    let v3668 : string = "height=\"10\""
                    let v3669 : string = "fill=\"#333\""
                    let v3670 : string = "opacity=\"0.2\""
                    let v3671 : string = " " + v3665 + v3431 + ""
                    let v3672 : string = " " + v3666 + v3671 + ""
                    let v3673 : string = " " + v3667 + v3672 + ""
                    let v3674 : string = " " + v3668 + v3673 + ""
                    let v3675 : string = " " + v3669 + v3674 + ""
                    let v3676 : string = " " + v3670 + v3675 + ""
                    let v3677 : string = "attributeName=\"opacity\""
                    let v3678 : string = "attributeType=\"XML\""
                    let v3679 : string = "values=\"0.2; 1; .2\""
                    let v3680 : string = "begin=\"0.3s\""
                    let v3681 : string = "dur=\"0.6s\""
                    let v3682 : string = "repeatCount=\"indefinite\""
                    let v3683 : string = " " + v3677 + v3431 + ""
                    let v3684 : string = " " + v3678 + v3683 + ""
                    let v3685 : string = " " + v3679 + v3684 + ""
                    let v3686 : string = " " + v3680 + v3685 + ""
                    let v3687 : string = " " + v3681 + v3686 + ""
                    let v3688 : string = " " + v3682 + v3687 + ""
                    let v3689 : string = "vec![" + v3431 + "]"
                    let v3690 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3689 
                    let v3691 : string = "leptos::prelude::Fragment::new($0)"
                    let v3692 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3690 v3691 
                    let v3693 : string = "leptos::prelude::AnyView::from($0)"
                    let v3694 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3692 v3693 
                    let v3695 : string = "<" + v3486 + " " + v3688 + ">move || { v3694 }</" + v3486 + ">"
                    let v3696 : string = "leptos::prelude::view! { " + v3695 + " }"
                    let v3697 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3696 
                    let v3698 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3697 |> unbox
                    let v3699 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3700 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3698 v3699 
                    let v3701 : string = "attributeName=\"height\""
                    let v3702 : string = "attributeType=\"XML\""
                    let v3703 : string = "values=\"10; 20; 10\""
                    let v3704 : string = "begin=\"0.3s\""
                    let v3705 : string = "dur=\"0.6s\""
                    let v3706 : string = "repeatCount=\"indefinite\""
                    let v3707 : string = " " + v3701 + v3431 + ""
                    let v3708 : string = " " + v3702 + v3707 + ""
                    let v3709 : string = " " + v3703 + v3708 + ""
                    let v3710 : string = " " + v3704 + v3709 + ""
                    let v3711 : string = " " + v3705 + v3710 + ""
                    let v3712 : string = " " + v3706 + v3711 + ""
                    let v3713 : string = "vec![" + v3431 + "]"
                    let v3714 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3713 
                    let v3715 : string = "leptos::prelude::Fragment::new($0)"
                    let v3716 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3714 v3715 
                    let v3717 : string = "leptos::prelude::AnyView::from($0)"
                    let v3718 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3716 v3717 
                    let v3719 : string = "<" + v3486 + " " + v3712 + ">move || { v3718 }</" + v3486 + ">"
                    let v3720 : string = "leptos::prelude::view! { " + v3719 + " }"
                    let v3721 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3720 
                    let v3722 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3721 |> unbox
                    let v3723 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3724 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3722 v3723 
                    let v3725 : string = "attributeName=\"y\""
                    let v3726 : string = "attributeType=\"XML\""
                    let v3727 : string = "values=\"10; 5; 10\""
                    let v3728 : string = "begin=\"0.3s\""
                    let v3729 : string = "dur=\"0.6s\""
                    let v3730 : string = "repeatCount=\"indefinite\""
                    let v3731 : string = " " + v3725 + v3431 + ""
                    let v3732 : string = " " + v3726 + v3731 + ""
                    let v3733 : string = " " + v3727 + v3732 + ""
                    let v3734 : string = " " + v3728 + v3733 + ""
                    let v3735 : string = " " + v3729 + v3734 + ""
                    let v3736 : string = " " + v3730 + v3735 + ""
                    let v3737 : string = "vec![" + v3431 + "]"
                    let v3738 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3737 
                    let v3739 : string = "leptos::prelude::Fragment::new($0)"
                    let v3740 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3738 v3739 
                    let v3741 : string = "leptos::prelude::AnyView::from($0)"
                    let v3742 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3740 v3741 
                    let v3743 : string = "<" + v3486 + " " + v3736 + ">move || { v3742 }</" + v3486 + ">"
                    let v3744 : string = "leptos::prelude::view! { " + v3743 + " }"
                    let v3745 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3744 
                    let v3746 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Animate>> = v3745 |> unbox
                    let v3747 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3748 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3746 v3747 
                    let v3749 : string = "v3748"
                    let v3750 : string = v3749 + v3431 
                    let v3751 : string = v3750 + v3431 
                    let v3752 : string = "v3724"
                    let v3753 : string = v3752 + v3545 
                    let v3754 : string = v3753 + v3751 
                    let v3755 : string = "v3700"
                    let v3756 : string = v3755 + v3545 
                    let v3757 : string = v3756 + v3754 
                    let v3758 : string = "vec![" + v3757 + "]"
                    let v3759 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3758 
                    let v3760 : string = "leptos::prelude::Fragment::new($0)"
                    let v3761 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3759 v3760 
                    let v3762 : string = "leptos::prelude::AnyView::from($0)"
                    let v3763 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3761 v3762 
                    let v3764 : string = "<" + v3557 + " " + v3676 + ">move || { v3763 }</" + v3557 + ">"
                    let v3765 : string = "leptos::prelude::view! { " + v3764 + " }"
                    let v3766 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3765 
                    let v3767 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v3766 |> unbox
                    let v3768 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3769 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3767 v3768 
                    let v3770 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3771 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3664 v3770 
                    let v3772 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3773 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3561 v3772 
                    let v3774 : string = "v3769"
                    let v3775 : string = v3774 + v3431 
                    let v3776 : string = v3775 + v3431 
                    let v3777 : string = "v3771"
                    let v3778 : string = v3777 + v3545 
                    let v3779 : string = v3778 + v3776 
                    let v3780 : string = "v3773"
                    let v3781 : string = v3780 + v3545 
                    let v3782 : string = v3781 + v3779 
                    let v3783 : string = "vec![" + v3782 + "]"
                    let v3784 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3783 
                    let v3785 : string = "leptos::prelude::Fragment::new($0)"
                    let v3786 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3784 v3785 
                    let v3787 : string = "leptos::prelude::AnyView::from($0)"
                    let v3788 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3786 v3787 
                    let v3789 : string = "svg"
                    let v3790 : string = "<" + v3789 + " " + v3455 + ">move || { v3788 }</" + v3789 + ">"
                    let v3791 : string = "leptos::prelude::view! { " + v3790 + " }"
                    let v3792 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3791 
                    let v3793 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3792 |> unbox
                    let v3794 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3795 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3793 v3794 
                    let v3796 : string = "Loading..."
                    (* run_target_args'
                    let v3797 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3798 : string = "&*$0"
                    let v3799 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3796 v3798 
                    let _run_target_args'_v3797 = v3799 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3800 : string = "&*$0"
                    let v3801 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3796 v3800 
                    let _run_target_args'_v3797 = v3801 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3802 : string = "&*$0"
                    let v3803 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3796 v3802 
                    let _run_target_args'_v3797 = v3803 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3804 : Ref<Str> = v3796 |> unbox<Ref<Str>>
                    let _run_target_args'_v3797 = v3804 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3807 : Ref<Str> = v3796 |> unbox<Ref<Str>>
                    let _run_target_args'_v3797 = v3807 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3810 : Ref<Str> = v3796 |> unbox<Ref<Str>>
                    let _run_target_args'_v3797 = v3810 
                    #endif
#else
                    let v3813 : Ref<Str> = v3796 |> unbox<Ref<Str>>
                    let _run_target_args'_v3797 = v3813 
                    #endif
                    let v3816 : Ref<Str> = _run_target_args'_v3797 
                    (* run_target_args'
                    let v3821 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3822 : string = "String::from($0)"
                    let v3823 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3816 v3822 
                    let _run_target_args'_v3821 = v3823 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3824 : string = "String::from($0)"
                    let v3825 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3816 v3824 
                    let _run_target_args'_v3821 = v3825 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3826 : string = "String::from($0)"
                    let v3827 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3816 v3826 
                    let _run_target_args'_v3821 = v3827 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3828 : std_string_String = v3816 |> unbox<std_string_String>
                    let _run_target_args'_v3821 = v3828 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3831 : std_string_String = v3816 |> unbox<std_string_String>
                    let _run_target_args'_v3821 = v3831 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3834 : std_string_String = v3816 |> unbox<std_string_String>
                    let _run_target_args'_v3821 = v3834 
                    #endif
#else
                    let v3837 : std_string_String = v3816 |> unbox<std_string_String>
                    let _run_target_args'_v3821 = v3837 
                    #endif
                    let v3840 : std_string_String = _run_target_args'_v3821 
                    let v3845 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v3846 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3840 v3845 
                    let v3847 : string = "v3846"
                    let v3848 : string = v3847 + v3431 
                    let v3849 : string = v3848 + v3431 
                    let v3850 : string = "v3795"
                    let v3851 : string = v3850 + v3545 
                    let v3852 : string = v3851 + v3849 
                    let v3853 : string = "vec![" + v3852 + "]"
                    let v3854 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3853 
                    let v3855 : string = "leptos::prelude::Fragment::new($0)"
                    let v3856 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3854 v3855 
                    let v3857 : string = "leptos::prelude::AnyView::from($0)"
                    let v3858 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3856 v3857 
                    let v3859 : string = "div"
                    let v3860 : string = "<" + v3859 + " " + v3434 + ">move || { v3858 }</" + v3859 + ">"
                    let v3861 : string = "leptos::prelude::view! { " + v3860 + " }"
                    let v3862 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3861 
                    let v3863 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3862 |> unbox
                    let v3864 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3865 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3863 v3864 
                    let v3866 : string = "v3865"
                    let v3867 : string = v3866 + v3431 
                    let v3868 : string = v3867 + v3431 
                    let v3869 : string = "vec![" + v3868 + "]"
                    let v3870 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3869 
                    let v3871 : string = "leptos::prelude::Fragment::new($0)"
                    let v3872 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3870 v3871 
                    let v3873 : string = "leptos::prelude::AnyView::from($0)"
                    let v3874 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3872 v3873 
                    let v3875 : string = "<" + v3859 + " " + v3432 + ">move || { v3874 }</" + v3859 + ">"
                    let v3876 : string = "leptos::prelude::view! { " + v3875 + " }"
                    let v3877 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3876 
                    let v3878 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3877 |> unbox
                    let v3879 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3880 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3878 v3879 
                    v3880
    let v4046 : string = "v4045"
    let v4047 : string = ""
    let v4048 : string = v4046 + v4047 
    let v4049 : string = v4048 + v4047 
    let v4050 : string = "v144"
    let v4051 : string = ", "
    let v4052 : string = v4050 + v4051 
    let v4053 : string = v4052 + v4049 
    let v4054 : string = "vec![" + v4053 + "]"
    let v4055 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4054 
    let v4056 : string = "leptos::prelude::Fragment::new($0)"
    let v4057 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4055 v4056 
    v4057
and closure337 () () : string =
    let v0 : string = "py-[7px]"
    v0
and closure338 () () : Ref<Lifetime<StaticLifetime, Str>> =
    let v0 : string = ""
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    v2
and closure339 () () : string =
    let v0 : string = "Debug"
    v0
and method282 () : (unit -> string) =
    closure339()
and closure341 () () : leptos_dom_Fragment =
    let v0 : string = "Transactions"
    (* run_target_args'
    let v1 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "&*$0"
    let v3 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _run_target_args'_v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _run_target_args'_v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _run_target_args'_v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v14 
    #endif
#else
    let v17 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _run_target_args'_v1 = v17 
    #endif
    let v20 : Ref<Str> = _run_target_args'_v1 
    (* run_target_args'
    let v25 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v26 : string = "String::from($0)"
    let v27 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v26 
    let _run_target_args'_v25 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v28 
    let _run_target_args'_v25 = v29 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v20 v30 
    let _run_target_args'_v25 = v31 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v32 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v32 
    #endif
#if FABLE_COMPILER_PYTHON
    let v35 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v35 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v38 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v38 
    #endif
#else
    let v41 : std_string_String = v20 |> unbox<std_string_String>
    let _run_target_args'_v25 = v41 
    #endif
    let v44 : std_string_String = _run_target_args'_v25 
    let v49 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v50 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v44 v49 
    let v51 : string = "v50"
    let v52 : string = ""
    let v53 : string = v51 + v52 
    let v54 : string = v53 + v52 
    let v55 : string = "vec![" + v54 + "]"
    let v56 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : string = "leptos::prelude::Fragment::new($0)"
    let v58 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v56 v57 
    v58
and method283 () : (unit -> leptos_dom_Fragment) =
    closure341()
and closure343 () () : string =
    let v0 : string = "[max-height:70vh]"
    v0
and closure342 (v0 : leptos_prelude_ArcMemo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : leptos_dom_Fragment =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : Result<(struct (string * unativeint * Heap5) []) option, std_string_String> = Fable.Core.RustInterop.emitRustExpr v0 v1 
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let v6 : string = "fable_library_rust::String_::fromString($0)"
    let v7 : string = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let _run_target_args'_v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _run_target_args'_v3 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _run_target_args'_v3 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : string = $"%A{v2}"
    let _run_target_args'_v3 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : string = $"%A{v2}"
    let _run_target_args'_v3 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : string = $"%A{v2}"
    let _run_target_args'_v3 = v22 
    #endif
#else
    let v25 : string = $"%A{v2}"
    let _run_target_args'_v3 = v25 
    #endif
    let v28 : string = _run_target_args'_v3 
    let v33 : string = "$0"
    let v34 : (unit -> string) = closure343()
    let v35 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v34 v33 
    let v36 : string = "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v35(())"
    let v37 : string = ""
    let v38 : string = " " + v36 + v37 + ""
    (* run_target_args'
    let v39 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v40 : string = "&*$0"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v28 v40 
    let _run_target_args'_v39 = v41 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v42 : string = "&*$0"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v28 v42 
    let _run_target_args'_v39 = v43 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = "&*$0"
    let v45 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v28 v44 
    let _run_target_args'_v39 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : Ref<Str> = v28 |> unbox<Ref<Str>>
    let _run_target_args'_v39 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : Ref<Str> = v28 |> unbox<Ref<Str>>
    let _run_target_args'_v39 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v28 |> unbox<Ref<Str>>
    let _run_target_args'_v39 = v52 
    #endif
#else
    let v55 : Ref<Str> = v28 |> unbox<Ref<Str>>
    let _run_target_args'_v39 = v55 
    #endif
    let v58 : Ref<Str> = _run_target_args'_v39 
    (* run_target_args'
    let v63 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v64 : string = "String::from($0)"
    let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v58 v64 
    let _run_target_args'_v63 = v65 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v66 : string = "String::from($0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v58 v66 
    let _run_target_args'_v63 = v67 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v68 : string = "String::from($0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v58 v68 
    let _run_target_args'_v63 = v69 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v70 : std_string_String = v58 |> unbox<std_string_String>
    let _run_target_args'_v63 = v70 
    #endif
#if FABLE_COMPILER_PYTHON
    let v73 : std_string_String = v58 |> unbox<std_string_String>
    let _run_target_args'_v63 = v73 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v58 |> unbox<std_string_String>
    let _run_target_args'_v63 = v76 
    #endif
#else
    let v79 : std_string_String = v58 |> unbox<std_string_String>
    let _run_target_args'_v63 = v79 
    #endif
    let v82 : std_string_String = _run_target_args'_v63 
    let v87 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v88 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v82 v87 
    let v89 : string = "v88"
    let v90 : string = v89 + v37 
    let v91 : string = v90 + v37 
    let v92 : string = "vec![" + v91 + "]"
    let v93 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v92 
    let v94 : string = "leptos::prelude::Fragment::new($0)"
    let v95 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v93 v94 
    let v96 : string = "leptos::prelude::AnyView::from($0)"
    let v97 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : string = "pre"
    let v99 : string = "<" + v98 + " " + v38 + ">move || { v97 }</" + v98 + ">"
    let v100 : string = "leptos::prelude::view! { " + v99 + " }"
    let v101 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v100 
    let v102 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Pre>> = v101 |> unbox
    let v103 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v104 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v102 v103 
    let v105 : string = "v104"
    let v106 : string = v105 + v37 
    let v107 : string = v106 + v37 
    let v108 : string = "vec![" + v107 + "]"
    let v109 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v108 
    let v110 : string = "leptos::prelude::Fragment::new($0)"
    let v111 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v109 v110 
    v111
and method284 (v0 : leptos_prelude_ArcMemo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) : (unit -> leptos_dom_Fragment) =
    closure342(v0)
and closure340 (v0 : leptos_prelude_ArcMemo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>>) () : leptos_dom_Fragment =
    let v1 : (unit -> leptos_dom_Fragment) = method283()
    let v2 : (unit -> leptos_dom_Fragment) = method284(v0)
    let v3 : string = "$0"
    let v4 : (unit -> string) = closure253()
    let v5 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4 v3 
    let v6 : string = "$0"
    let v7 : (unit -> string) = closure234()
    let v8 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v7 v6 
    let v9 : string = "$0"
    let v10 : (unit -> string) = closure235()
    let v11 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v10 v9 
    let v12 : string = "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())"
    let v13 : string = ""
    let v14 : string = " " + v12 + v13 + ""
    let v15 : string = "$0"
    let v16 : (unit -> string) = closure236()
    let v17 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v16 v15 
    let v18 : string = "class=\"[font-size:12px] text-gray-400\""
    let v19 : string = " " + v18 + v13 + ""
    let v20 : leptos_dom_Fragment = v1 ()
    let v21 : string = "leptos::prelude::AnyView::from($0)"
    let v22 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "dt"
    let v24 : string = "<" + v23 + " " + v19 + ">move || { v22 }</" + v23 + ">"
    let v25 : string = "leptos::prelude::view! { " + v24 + " }"
    let v26 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v25 
    let v27 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dt>> = v26 |> unbox
    let v28 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v29 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v27 v28 
    let v30 : string = "class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())"
    let v31 : string = " " + v30 + v13 + ""
    let v32 : leptos_dom_Fragment = v2 ()
    let v33 : string = "leptos::prelude::AnyView::from($0)"
    let v34 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let v35 : string = "dd"
    let v36 : string = "<" + v35 + " " + v31 + ">move || { v34 }</" + v35 + ">"
    let v37 : string = "leptos::prelude::view! { " + v36 + " }"
    let v38 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v37 
    let v39 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dd>> = v38 |> unbox
    let v40 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v41 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let v42 : string = "v41"
    let v43 : string = v42 + v13 
    let v44 : string = v43 + v13 
    let v45 : string = "v29"
    let v46 : string = ", "
    let v47 : string = v45 + v46 
    let v48 : string = v47 + v44 
    let v49 : string = "vec![" + v48 + "]"
    let v50 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v49 
    let v51 : string = "leptos::prelude::Fragment::new($0)"
    let v52 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v50 v51 
    let v53 : string = "leptos::prelude::AnyView::from($0)"
    let v54 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v52 v53 
    let v55 : string = "dl"
    let v56 : string = "<" + v55 + " " + v14 + ">move || { v54 }</" + v55 + ">"
    let v57 : string = "leptos::prelude::view! { " + v56 + " }"
    let v58 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v57 
    let v59 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Dl>> = v58 |> unbox
    let v60 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v61 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v59 v60 
    let v62 : string = "v61"
    let v63 : string = v62 + v13 
    let v64 : string = v63 + v13 
    let v65 : string = "vec![" + v64 + "]"
    let v66 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "leptos::prelude::Fragment::new($0)"
    let v68 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v66 v67 
    v68
and closure344 (v0 : leptos_prelude_ReadSignal<US18>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US18_4 -> (* Settings *)
        true
    | _ ->
        false
and method285 (v0 : leptos_prelude_ReadSignal<US18>) : (unit -> bool) =
    closure344(v0)
and closure345 (v0 : leptos_prelude_ReadSignal<US18>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US18_3 -> (* Transactions *)
        true
    | _ ->
        false
and method286 (v0 : leptos_prelude_ReadSignal<US18>) : (unit -> bool) =
    closure345(v0)
and closure346 (v0 : leptos_prelude_ReadSignal<US18>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US18_2 -> (* Lists *)
        true
    | _ ->
        false
and method287 (v0 : leptos_prelude_ReadSignal<US18>) : (unit -> bool) =
    closure346(v0)
and closure347 (v0 : leptos_prelude_ReadSignal<US18>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US18_1(v3) -> (* Dice *)
        match v3 with
        | US19_0 -> (* Dice' *)
            true
        | _ ->
            false
    | _ ->
        false
and method288 (v0 : leptos_prelude_ReadSignal<US18>) : (unit -> bool) =
    closure347(v0)
and closure348 () () : string =
    let v0 : string = "h-5 w-5"
    v0
and closure349 (v0 : leptos_prelude_ArcMemo<string>) () : std_string_String =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "settings"
    let v4 : string = v2 + "#/" + v3 + ""
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v21 
    #endif
    let v24 : Ref<Str> = _run_target_args'_v5 
    (* run_target_args'
    let v29 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _run_target_args'_v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _run_target_args'_v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _run_target_args'_v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v45 
    #endif
    let v48 : std_string_String = _run_target_args'_v29 
    v48
and closure350 (v0 : leptos_prelude_ReadSignal<US18>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US18_4 -> (* Settings *)
        true
    | _ ->
        false
and closure351 (v0 : leptos_prelude_ReadSignal<US18>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US18_4 -> (* Settings *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and closure352 (v0 : leptos_prelude_ArcMemo<string>) () : std_string_String =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "transactions"
    let v4 : string = v2 + "#/" + v3 + ""
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v21 
    #endif
    let v24 : Ref<Str> = _run_target_args'_v5 
    (* run_target_args'
    let v29 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _run_target_args'_v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _run_target_args'_v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _run_target_args'_v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v45 
    #endif
    let v48 : std_string_String = _run_target_args'_v29 
    v48
and closure353 (v0 : leptos_prelude_ReadSignal<US18>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US18_3 -> (* Transactions *)
        true
    | _ ->
        false
and closure354 (v0 : leptos_prelude_ReadSignal<US18>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US18_3 -> (* Transactions *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and closure355 (v0 : leptos_prelude_ArcMemo<string>) () : std_string_String =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "lists"
    let v4 : string = v2 + "#/" + v3 + ""
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v21 
    #endif
    let v24 : Ref<Str> = _run_target_args'_v5 
    (* run_target_args'
    let v29 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _run_target_args'_v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _run_target_args'_v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _run_target_args'_v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v45 
    #endif
    let v48 : std_string_String = _run_target_args'_v29 
    v48
and closure356 (v0 : leptos_prelude_ReadSignal<US18>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US18_2 -> (* Lists *)
        true
    | _ ->
        false
and closure357 (v0 : leptos_prelude_ReadSignal<US18>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : bool =
        match v2 with
        | US18_2 -> (* Lists *)
            true
        | _ ->
            false
    if v3 then
        let v4 : string = "border-grey-200 text-grey-900"
        let v5 : string = "r#\"" + v4 + "\"#"
        let v6 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v5 
        v6
    else
        let v7 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v8 : string = "r#\"" + v7 + "\"#"
        let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
        v9
and closure358 (v0 : leptos_prelude_ArcMemo<string>) () : std_string_String =
    let v1 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "dice"
    let v4 : string = v2 + "#/" + v3 + ""
    (* run_target_args'
    let v5 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v6 
    let _run_target_args'_v5 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v8 
    let _run_target_args'_v5 = v9 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : string = "&*$0"
    let v11 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4 v10 
    let _run_target_args'_v5 = v11 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v18 
    #endif
#else
    let v21 : Ref<Str> = v4 |> unbox<Ref<Str>>
    let _run_target_args'_v5 = v21 
    #endif
    let v24 : Ref<Str> = _run_target_args'_v5 
    (* run_target_args'
    let v29 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v30 
    let _run_target_args'_v29 = v31 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v32 
    let _run_target_args'_v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : string = "String::from($0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v24 v34 
    let _run_target_args'_v29 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v36 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v39 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v42 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v42 
    #endif
#else
    let v45 : std_string_String = v24 |> unbox<std_string_String>
    let _run_target_args'_v29 = v45 
    #endif
    let v48 : std_string_String = _run_target_args'_v29 
    v48
and closure359 (v0 : leptos_prelude_ReadSignal<US18>) () : bool =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    match v2 with
    | US18_1(v3) -> (* Dice *)
        match v3 with
        | US19_0 -> (* Dice' *)
            true
        | _ ->
            false
    | _ ->
        false
and closure360 (v0 : leptos_prelude_ReadSignal<US18>) () : Ref<Lifetime<StaticLifetime, Str>> =
    let v1 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v2 : US18 = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v5 : bool =
        match v2 with
        | US18_1(v3) -> (* Dice *)
            match v3 with
            | US19_0 -> (* Dice' *)
                true
            | _ ->
                false
        | _ ->
            false
    if v5 then
        let v6 : string = "border-grey-200 text-grey-900"
        let v7 : string = "r#\"" + v6 + "\"#"
        let v8 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v7 
        v8
    else
        let v9 : string = "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"
        let v10 : string = "r#\"" + v9 + "\"#"
        let v11 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v10 
        v11
and closure5 () (v0 : int32) : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> =
    let v1 : string = "home.render () / router: " + string v0 + ""
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v5 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : string = "$0.unwrap()"
    let v7 : Heap2 = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "state_core.use_database (1)"
    let v9 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v10 : bool = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : unit = ()
    let v12 : string = $"true; let _func0_from_v11 = Func0::from(move || {{ //"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "true; let __future_init = Box::pin(/*"
    let v15 : bool = Fable.Core.RustInterop.emitRustExpr () v14 
    let v16 : string = "*/ async move { /*"
    let v17 : bool = Fable.Core.RustInterop.emitRustExpr () v16 
    let v18 : string = "*/ //"
    let v19 : bool = Fable.Core.RustInterop.emitRustExpr () v18 
    let v20 : string = "state_core.use_database (2) / database new_local_resource"
    let v21 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v22 : bool = Fable.Core.RustInterop.emitRustExpr v20 v21 
    let v23 : string = "state_core.build_database ()"
    let v24 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr v23 v24 
    let v26 : string = "true; let __future_init = Box::pin(/*"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "*/ async { /*"
    let v29 : bool = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : string = "*/ //"
    let v31 : bool = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())"
    let v33 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v32 
    let v34 : string = "v33.await"
    let v35 : Result<rexie_Rexie, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : (rexie_Error -> std_string_String) = method6()
    (* run_target_args'
    let v37 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v38 : string = "$0.map_err(|x| $1(x))"
    let v39 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v35, v36) v38 
    let _run_target_args'_v37 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "$0.map_err(|x| $1(x))"
    let v41 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v35, v36) v40 
    let _run_target_args'_v37 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "$0.map_err(|x| $1(x))"
    let v43 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v35, v36) v42 
    let _run_target_args'_v37 = v43 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : Result<rexie_Rexie, std_string_String> = match v35 with Ok x -> Ok x | Error x -> Error (v36 x)
    let _run_target_args'_v37 = v44 
    #endif
#if FABLE_COMPILER_PYTHON
    let v45 : Result<rexie_Rexie, std_string_String> = match v35 with Ok x -> Ok x | Error x -> Error (v36 x)
    let _run_target_args'_v37 = v45 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v46 : Result<rexie_Rexie, std_string_String> = match v35 with Ok x -> Ok x | Error x -> Error (v36 x)
    let _run_target_args'_v37 = v46 
    #endif
#else
    let v47 : Result<rexie_Rexie, std_string_String> = match v35 with Ok x -> Ok x | Error x -> Error (v36 x)
    let _run_target_args'_v37 = v47 
    #endif
    let v48 : Result<rexie_Rexie, std_string_String> = _run_target_args'_v37 
    let v51 : string = ""
    let v52 : string = "}"
    let v53 : string = v51 + v52 
    let x = v48 //
    let v54 : _ = x
    let v55 : unit = ()
    (* run_target_args'
    let v56 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v57 : string = $"true; let _fix_closure_v55 = $0"
    let v58 : bool = Fable.Core.RustInterop.emitRustExpr v54 v57 
    let _run_target_args'_v56 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v59 : string = $"true; let _fix_closure_v55 = $0"
    let v60 : bool = Fable.Core.RustInterop.emitRustExpr v54 v59 
    let _run_target_args'_v56 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : string = $"true; let _fix_closure_v55 = $0"
    let v62 : bool = Fable.Core.RustInterop.emitRustExpr v54 v61 
    let _run_target_args'_v56 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v56 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v56 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v56 = false 
    #endif
#else
    let _run_target_args'_v56 = false 
    #endif
    let v63 : bool = _run_target_args'_v56 
    let v65 : string = $"true; _fix_closure_v55 " + v53 + "); " + v51 + " // rust.fix_closure'"
    let v66 : bool = Fable.Core.RustInterop.emitRustExpr () v65 
    let v67 : string = "__future_init"
    let v68 : _ = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "v68"
    let v70 : std_pin_Pin<Box<Dyn<std_future_Future<Result<rexie_Rexie, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v69 
    let v71 : string = "v70.await"
    let v72 : Result<rexie_Rexie, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v71 
    (* run_target_args'
    let v73 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v74 : string = "$0.unwrap()"
    let v75 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v72 v74 
    let _run_target_args'_v73 = v75 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v76 : string = "$0.unwrap()"
    let v77 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v72 v76 
    let _run_target_args'_v73 = v77 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v78 : string = "$0.unwrap()"
    let v79 : rexie_Rexie = Fable.Core.RustInterop.emitRustExpr v72 v78 
    let _run_target_args'_v73 = v79 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v80 : rexie_Rexie = match v72 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v73 = v80 
    #endif
#if FABLE_COMPILER_PYTHON
    let v81 : rexie_Rexie = match v72 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v73 = v81 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v82 : rexie_Rexie = match v72 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v73 = v82 
    #endif
#else
    let v83 : rexie_Rexie = match v72 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _run_target_args'_v73 = v83 
    #endif
    let v84 : rexie_Rexie = _run_target_args'_v73 
    let v87 : (rexie_Rexie -> rexie_Rexie) = method7()
    let v88 : rexie_Rexie = v87 v84
    let v89 : string = "std::sync::Arc::new(v88)"
    let v90 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v89 
    let v91 : string = $"%A{v90}"
    let v94 : string = "state_core.use_database (3) / database new_local_resource / result: " + string v91 + ""
    let v95 : int64 = 200L
    let v96 : string = method8(v95, v94)
    let v97 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v98 : bool = Fable.Core.RustInterop.emitRustExpr v96 v97 
    let v99 : string = v51 + v52 
    let x = v90 //
    let v100 : _ = x
    let v101 : unit = ()
    (* run_target_args'
    let v102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v103 : string = $"true; let _fix_closure_v101 = $0"
    let v104 : bool = Fable.Core.RustInterop.emitRustExpr v100 v103 
    let _run_target_args'_v102 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v105 : string = $"true; let _fix_closure_v101 = $0"
    let v106 : bool = Fable.Core.RustInterop.emitRustExpr v100 v105 
    let _run_target_args'_v102 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v107 : string = $"true; let _fix_closure_v101 = $0"
    let v108 : bool = Fable.Core.RustInterop.emitRustExpr v100 v107 
    let _run_target_args'_v102 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v102 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v102 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v102 = false 
    #endif
#else
    let _run_target_args'_v102 = false 
    #endif
    let v109 : bool = _run_target_args'_v102 
    let v111 : string = $"true; _fix_closure_v101 " + v99 + "); " + v51 + " // rust.fix_closure'"
    let v112 : bool = Fable.Core.RustInterop.emitRustExpr () v111 
    let v113 : string = "__future_init"
    let v114 : _ = Fable.Core.RustInterop.emitRustExpr () v113 
    let v115 : string = "v114"
    let v116 : std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>> = Fable.Core.RustInterop.emitRustExpr () v115 
    let v117 : string = $"true; $0 /*"
    let v118 : bool = Fable.Core.RustInterop.emitRustExpr v116 v117 
    let v119 : string = $"*/ }}); //"
    let v120 : bool = Fable.Core.RustInterop.emitRustExpr () v119 
    let v121 : string = $"_func0_from_v11"
    let v122 : Func0<std_pin_Pin<Box<Dyn<std_future_Future<std_sync_Arc<rexie_Rexie>>>>>> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : string = "leptos::prelude::ArcLocalResource::new(|| async move { $0().await })"
    let v124 : leptos_prelude_ArcLocalResource<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v122 v123 
    let v125 : string = "state_core.use_core_database (1)"
    let v126 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v127 : bool = Fable.Core.RustInterop.emitRustExpr v125 v126 
    let v128 : unit = ()
    let v129 : string = $"true; let _func0_from_v128 = Func0::from(move || {{ //"
    let v130 : bool = Fable.Core.RustInterop.emitRustExpr () v129 
    let v131 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v132 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v124 v131 
    let v133 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v134 : bool = Fable.Core.RustInterop.emitRustExpr v132 v133 
    let v135 : string = "x"
    let v136 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr () v135 
    let v137 : (unit -> unit) = closure8()
    let _v137 = true
    let v138 : string = "PartialEqWrapper($0)"
    let v139 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr v136 v138 
    let v140 : string = "true; $0 })"
    let v141 : bool = Fable.Core.RustInterop.emitRustExpr v139 v140 
    let v142 : string = "_optionm_map_"
    let v143 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> option = Fable.Core.RustInterop.emitRustExpr () v142 
    let v144 : string = "true; let __future_init = Box::pin(/*"
    let v145 : bool = Fable.Core.RustInterop.emitRustExpr () v144 
    let v146 : string = "*/ async move { /*"
    let v147 : bool = Fable.Core.RustInterop.emitRustExpr () v146 
    let v148 : string = "*/ //"
    let v149 : bool = Fable.Core.RustInterop.emitRustExpr () v148 
    let v150 : string = $"%A{v143}"
    let v153 : string = "state_core.use_core_database (2) / core_state_heap new_local_resource / database: " + v150 + ""
    let v154 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v155 : bool = Fable.Core.RustInterop.emitRustExpr v153 v154 
    let v156 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v157 : bool = Fable.Core.RustInterop.emitRustExpr v143 v156 
    let v158 : string = "x"
    let v159 : PartialEqWrapper<std_sync_Arc<rexie_Rexie>> = Fable.Core.RustInterop.emitRustExpr () v158 
    let v160 : string = "$0.0"
    let v161 : std_sync_Arc<rexie_Rexie> = Fable.Core.RustInterop.emitRustExpr v159 v160 
    let v162 : string = "true; $0 })"
    let v163 : bool = Fable.Core.RustInterop.emitRustExpr v161 v162 
    let v164 : string = "_optionm_map_"
    let v165 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr () v164 
    let v166 : (std_sync_Arc<rexie_Rexie> -> US2) = method9()
    let v167 : US2 option = v165 |> Option.map v166 
    let v178 : US2 = US2_1
    let v179 : US2 = v167 |> Option.defaultValue v178 
    let v545 : US3 =
        match v179 with
        | US2_1 -> (* None *)
            US3_1
        | US2_0(v183) -> (* Some *)
            let v184 : string = "core-state-heap"
            let v185 : string = "state_core.get_data () / id: " + v184 + ""
            let v186 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v187 : bool = Fable.Core.RustInterop.emitRustExpr v185 v186 
            let v188 : string = "true; let __future_init = Box::pin(/*"
            let v189 : bool = Fable.Core.RustInterop.emitRustExpr () v188 
            let v190 : string = "*/ async { /*"
            let v191 : bool = Fable.Core.RustInterop.emitRustExpr () v190 
            let v192 : string = "*/ //"
            let v193 : bool = Fable.Core.RustInterop.emitRustExpr () v192 
            let v194 : string = "store"
            let v195 : (string []) = [|v194|]
            let v196 : string = "$0.to_vec()"
            let v197 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v195 v196 
            let v198 : unit = ()
            let v199 : string = $"true; let _func1_from_v198 = Func1::from(move |value| {{ //"
            let v200 : bool = Fable.Core.RustInterop.emitRustExpr () v199 
            let v201 : string = $"value"
            let v202 : string = Fable.Core.RustInterop.emitRustExpr () v201 
            (* run_target_args'
            let v203 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v204 : string = "&*$0"
            let v205 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v202 v204 
            let _run_target_args'_v203 = v205 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v206 : string = "&*$0"
            let v207 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v202 v206 
            let _run_target_args'_v203 = v207 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v208 : string = "&*$0"
            let v209 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v202 v208 
            let _run_target_args'_v203 = v209 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v210 : Ref<Str> = v202 |> unbox<Ref<Str>>
            let _run_target_args'_v203 = v210 
            #endif
#if FABLE_COMPILER_PYTHON
            let v213 : Ref<Str> = v202 |> unbox<Ref<Str>>
            let _run_target_args'_v203 = v213 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v216 : Ref<Str> = v202 |> unbox<Ref<Str>>
            let _run_target_args'_v203 = v216 
            #endif
#else
            let v219 : Ref<Str> = v202 |> unbox<Ref<Str>>
            let _run_target_args'_v203 = v219 
            #endif
            let v222 : Ref<Str> = _run_target_args'_v203 
            (* run_target_args'
            let v227 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v228 : string = "String::from($0)"
            let v229 : std_string_String = Fable.Core.RustInterop.emitRustExpr v222 v228 
            let _run_target_args'_v227 = v229 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v230 : string = "String::from($0)"
            let v231 : std_string_String = Fable.Core.RustInterop.emitRustExpr v222 v230 
            let _run_target_args'_v227 = v231 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v232 : string = "String::from($0)"
            let v233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v222 v232 
            let _run_target_args'_v227 = v233 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v234 : std_string_String = v222 |> unbox<std_string_String>
            let _run_target_args'_v227 = v234 
            #endif
#if FABLE_COMPILER_PYTHON
            let v237 : std_string_String = v222 |> unbox<std_string_String>
            let _run_target_args'_v227 = v237 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v240 : std_string_String = v222 |> unbox<std_string_String>
            let _run_target_args'_v227 = v240 
            #endif
#else
            let v243 : std_string_String = v222 |> unbox<std_string_String>
            let _run_target_args'_v227 = v243 
            #endif
            let v246 : std_string_String = _run_target_args'_v227 
            let func1_from_result = v246 //
            let v251 : _ = func1_from_result
            let v252 : string = $"true; $0 /*"
            let v253 : bool = Fable.Core.RustInterop.emitRustExpr v251 v252 
            let v254 : string = $"*/ }}); //"
            let v255 : bool = Fable.Core.RustInterop.emitRustExpr () v254 
            let v256 : string = $"_func1_from_v198"
            let v257 : Func0<string, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v256 
            let v258 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
            let v259 : (string -> std_string_String) = closure10(v257)
            let v260 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v197, v259) v258 
            let v261 : std_sync_Arc<rexie_Rexie> = method11(v183)
            let v262 : string = "$0.transaction(&v260, rexie::TransactionMode::ReadOnly)"
            let v263 : Result<rexie_Transaction, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v261 v262 
            let v264 : (rexie_Error -> std_string_String) = method12()
            (* run_target_args'
            let v265 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v266 : string = "$0.map_err(|x| $1(x))"
            let v267 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v263, v264) v266 
            let _run_target_args'_v265 = v267 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v268 : string = "$0.map_err(|x| $1(x))"
            let v269 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v263, v264) v268 
            let _run_target_args'_v265 = v269 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v270 : string = "$0.map_err(|x| $1(x))"
            let v271 : Result<rexie_Transaction, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v263, v264) v270 
            let _run_target_args'_v265 = v271 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v272 : Result<rexie_Transaction, std_string_String> = match v263 with Ok x -> Ok x | Error x -> Error (v264 x)
            let _run_target_args'_v265 = v272 
            #endif
#if FABLE_COMPILER_PYTHON
            let v273 : Result<rexie_Transaction, std_string_String> = match v263 with Ok x -> Ok x | Error x -> Error (v264 x)
            let _run_target_args'_v265 = v273 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v274 : Result<rexie_Transaction, std_string_String> = match v263 with Ok x -> Ok x | Error x -> Error (v264 x)
            let _run_target_args'_v265 = v274 
            #endif
#else
            let v275 : Result<rexie_Transaction, std_string_String> = match v263 with Ok x -> Ok x | Error x -> Error (v264 x)
            let _run_target_args'_v265 = v275 
            #endif
            let v276 : Result<rexie_Transaction, std_string_String> = _run_target_args'_v265 
            let v279 : string = "$0?"
            let v280 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v276 v279 
            let v281 : string = method13()
            (* run_target_args'
            let v282 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v283 : string = "&*$0"
            let v284 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v281 v283 
            let _run_target_args'_v282 = v284 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v285 : string = "&*$0"
            let v286 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v281 v285 
            let _run_target_args'_v282 = v286 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v287 : string = "&*$0"
            let v288 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v281 v287 
            let _run_target_args'_v282 = v288 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v289 : Ref<Str> = v281 |> unbox<Ref<Str>>
            let _run_target_args'_v282 = v289 
            #endif
#if FABLE_COMPILER_PYTHON
            let v292 : Ref<Str> = v281 |> unbox<Ref<Str>>
            let _run_target_args'_v282 = v292 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v295 : Ref<Str> = v281 |> unbox<Ref<Str>>
            let _run_target_args'_v282 = v295 
            #endif
#else
            let v298 : Ref<Str> = v281 |> unbox<Ref<Str>>
            let _run_target_args'_v282 = v298 
            #endif
            let v301 : Ref<Str> = _run_target_args'_v282 
            let v306 : string = "v280.store($0)"
            let v307 : Result<rexie_Store, rexie_Error> = Fable.Core.RustInterop.emitRustExpr v301 v306 
            let v308 : (rexie_Error -> std_string_String) = method14()
            (* run_target_args'
            let v309 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v310 : string = "$0.map_err(|x| $1(x))"
            let v311 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v307, v308) v310 
            let _run_target_args'_v309 = v311 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v312 : string = "$0.map_err(|x| $1(x))"
            let v313 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v307, v308) v312 
            let _run_target_args'_v309 = v313 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v314 : string = "$0.map_err(|x| $1(x))"
            let v315 : Result<rexie_Store, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v307, v308) v314 
            let _run_target_args'_v309 = v315 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v316 : Result<rexie_Store, std_string_String> = match v307 with Ok x -> Ok x | Error x -> Error (v308 x)
            let _run_target_args'_v309 = v316 
            #endif
#if FABLE_COMPILER_PYTHON
            let v317 : Result<rexie_Store, std_string_String> = match v307 with Ok x -> Ok x | Error x -> Error (v308 x)
            let _run_target_args'_v309 = v317 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v318 : Result<rexie_Store, std_string_String> = match v307 with Ok x -> Ok x | Error x -> Error (v308 x)
            let _run_target_args'_v309 = v318 
            #endif
#else
            let v319 : Result<rexie_Store, std_string_String> = match v307 with Ok x -> Ok x | Error x -> Error (v308 x)
            let _run_target_args'_v309 = v319 
            #endif
            let v320 : Result<rexie_Store, std_string_String> = _run_target_args'_v309 
            let v323 : string = "$0?"
            let v324 : rexie_Store = Fable.Core.RustInterop.emitRustExpr v320 v323 
            let v325 : string = method15()
            (* run_target_args'
            let v326 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v327 : string = "&*$0"
            let v328 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v325 v327 
            let _run_target_args'_v326 = v328 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v329 : string = "&*$0"
            let v330 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v325 v329 
            let _run_target_args'_v326 = v330 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v331 : string = "&*$0"
            let v332 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v325 v331 
            let _run_target_args'_v326 = v332 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v333 : Ref<Str> = v325 |> unbox<Ref<Str>>
            let _run_target_args'_v326 = v333 
            #endif
#if FABLE_COMPILER_PYTHON
            let v336 : Ref<Str> = v325 |> unbox<Ref<Str>>
            let _run_target_args'_v326 = v336 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v339 : Ref<Str> = v325 |> unbox<Ref<Str>>
            let _run_target_args'_v326 = v339 
            #endif
#else
            let v342 : Ref<Str> = v325 |> unbox<Ref<Str>>
            let _run_target_args'_v326 = v342 
            #endif
            let v345 : Ref<Str> = _run_target_args'_v326 
            let v350 : string = "wasm_bindgen::JsValue::from_str($0)"
            let v351 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr v345 v350 
            let v352 : string = $"Box::pin(rexie::Store::get(&v324, v351))"
            let v353 : std_pin_Pin<Box<Dyn<std_future_Future<Result<wasm_bindgen_JsValue option, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v352 
            let v354 : string = "v353.await"
            let v355 : Result<wasm_bindgen_JsValue option, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v354 
            let v356 : (rexie_Error -> std_string_String) = method16()
            (* run_target_args'
            let v357 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v358 : string = "$0.map_err(|x| $1(x))"
            let v359 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v355, v356) v358 
            let _run_target_args'_v357 = v359 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v360 : string = "$0.map_err(|x| $1(x))"
            let v361 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v355, v356) v360 
            let _run_target_args'_v357 = v361 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v362 : string = "$0.map_err(|x| $1(x))"
            let v363 : Result<wasm_bindgen_JsValue option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v355, v356) v362 
            let _run_target_args'_v357 = v363 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v364 : Result<wasm_bindgen_JsValue option, std_string_String> = match v355 with Ok x -> Ok x | Error x -> Error (v356 x)
            let _run_target_args'_v357 = v364 
            #endif
#if FABLE_COMPILER_PYTHON
            let v365 : Result<wasm_bindgen_JsValue option, std_string_String> = match v355 with Ok x -> Ok x | Error x -> Error (v356 x)
            let _run_target_args'_v357 = v365 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v366 : Result<wasm_bindgen_JsValue option, std_string_String> = match v355 with Ok x -> Ok x | Error x -> Error (v356 x)
            let _run_target_args'_v357 = v366 
            #endif
#else
            let v367 : Result<wasm_bindgen_JsValue option, std_string_String> = match v355 with Ok x -> Ok x | Error x -> Error (v356 x)
            let _run_target_args'_v357 = v367 
            #endif
            let v368 : Result<wasm_bindgen_JsValue option, std_string_String> = _run_target_args'_v357 
            let v371 : string = "$0?"
            let v372 : wasm_bindgen_JsValue option = Fable.Core.RustInterop.emitRustExpr v368 v371 
            let v373 : (wasm_bindgen_JsValue -> US4) = method17()
            let v374 : US4 option = v372 |> Option.map v373 
            let v385 : US4 = US4_1
            let v386 : US4 = v374 |> Option.defaultValue v385 
            let v486 : US3 =
                match v386 with
                | US4_1 -> (* None *)
                    US3_1
                | US4_0(v390) -> (* Some *)
                    let v391 : wasm_bindgen_JsValue = method18(v390)
                    let v392 : string = "serde_wasm_bindgen::from_value(v391)"
                    let v393 : Result<serde_json_Value option, serde_wasm_bindgen_Error> = Fable.Core.RustInterop.emitRustExpr () v392 
                    let v394 : (serde_wasm_bindgen_Error -> std_string_String) = method19()
                    (* run_target_args'
                    let v395 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v396 : string = "$0.map_err(|x| $1(x))"
                    let v397 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v393, v394) v396 
                    let _run_target_args'_v395 = v397 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v398 : string = "$0.map_err(|x| $1(x))"
                    let v399 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v393, v394) v398 
                    let _run_target_args'_v395 = v399 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v400 : string = "$0.map_err(|x| $1(x))"
                    let v401 : Result<serde_json_Value option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v393, v394) v400 
                    let _run_target_args'_v395 = v401 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v402 : Result<serde_json_Value option, std_string_String> = match v393 with Ok x -> Ok x | Error x -> Error (v394 x)
                    let _run_target_args'_v395 = v402 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v403 : Result<serde_json_Value option, std_string_String> = match v393 with Ok x -> Ok x | Error x -> Error (v394 x)
                    let _run_target_args'_v395 = v403 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v404 : Result<serde_json_Value option, std_string_String> = match v393 with Ok x -> Ok x | Error x -> Error (v394 x)
                    let _run_target_args'_v395 = v404 
                    #endif
#else
                    let v405 : Result<serde_json_Value option, std_string_String> = match v393 with Ok x -> Ok x | Error x -> Error (v394 x)
                    let _run_target_args'_v395 = v405 
                    #endif
                    let v406 : Result<serde_json_Value option, std_string_String> = _run_target_args'_v395 
                    let v409 : string = "$0?"
                    let v410 : serde_json_Value option = Fable.Core.RustInterop.emitRustExpr v406 v409 
                    let v411 : (serde_json_Value -> US5) = method20()
                    let v412 : US5 option = v410 |> Option.map v411 
                    let v423 : US5 = US5_1
                    let v424 : US5 = v412 |> Option.defaultValue v423 
                    match v424 with
                    | US5_1 -> (* None *)
                        US3_1
                    | US5_0(v428) -> (* Some *)
                        let v429 : serde_json_Value = method21(v428)
                        let v430 : string = "serde_json::from_value(v429)"
                        let v431 : Result<Vec<uint8>, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v430 
                        let v432 : (serde_json_Error -> std_string_String) = method22()
                        (* run_target_args'
                        let v433 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v434 : string = "$0.map_err(|x| $1(x))"
                        let v435 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v431, v432) v434 
                        let _run_target_args'_v433 = v435 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v436 : string = "$0.map_err(|x| $1(x))"
                        let v437 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v431, v432) v436 
                        let _run_target_args'_v433 = v437 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v438 : string = "$0.map_err(|x| $1(x))"
                        let v439 : Result<Vec<uint8>, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v431, v432) v438 
                        let _run_target_args'_v433 = v439 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v440 : Result<Vec<uint8>, std_string_String> = match v431 with Ok x -> Ok x | Error x -> Error (v432 x)
                        let _run_target_args'_v433 = v440 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v441 : Result<Vec<uint8>, std_string_String> = match v431 with Ok x -> Ok x | Error x -> Error (v432 x)
                        let _run_target_args'_v433 = v441 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v442 : Result<Vec<uint8>, std_string_String> = match v431 with Ok x -> Ok x | Error x -> Error (v432 x)
                        let _run_target_args'_v433 = v442 
                        #endif
#else
                        let v443 : Result<Vec<uint8>, std_string_String> = match v431 with Ok x -> Ok x | Error x -> Error (v432 x)
                        let _run_target_args'_v433 = v443 
                        #endif
                        let v444 : Result<Vec<uint8>, std_string_String> = _run_target_args'_v433 
                        let v447 : string = "$0?"
                        let v448 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v444 v447 
                        let v449 : string = "fable_library_rust::NativeArray_::array_from($0.clone())"
                        let v450 : (uint8 []) = Fable.Core.RustInterop.emitRustExpr v448 v449 
                        let v451 : int32 = v450.Length
                        let v452 : string = "state_core.get_data () / data_len: " + string v451 + ""
                        let v453 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                        let v454 : bool = Fable.Core.RustInterop.emitRustExpr v452 v453 
                        let v455 : string = "$0.to_vec()"
                        let v456 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v450 v455 
                        let v457 : string = "v456.as_slice()"
                        let v458 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v457 
                        let v459 : string = "true; let mut v458 = v458"
                        let v460 : bool = Fable.Core.RustInterop.emitRustExpr () v459 
                        let v461 : string = "borsh::BorshDeserialize::deserialize(&mut v458)"
                        let v462 : Result<Heap3 option, borsh_io_Error> = Fable.Core.RustInterop.emitRustExpr () v461 
                        let v463 : (borsh_io_Error -> std_string_String) = method23()
                        (* run_target_args'
                        let v464 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v465 : string = "$0.map_err(|x| $1(x))"
                        let v466 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v462, v463) v465 
                        let _run_target_args'_v464 = v466 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v467 : string = "$0.map_err(|x| $1(x))"
                        let v468 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v462, v463) v467 
                        let _run_target_args'_v464 = v468 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v469 : string = "$0.map_err(|x| $1(x))"
                        let v470 : Result<Heap3 option, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v462, v463) v469 
                        let _run_target_args'_v464 = v470 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v471 : Result<Heap3 option, std_string_String> = match v462 with Ok x -> Ok x | Error x -> Error (v463 x)
                        let _run_target_args'_v464 = v471 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v472 : Result<Heap3 option, std_string_String> = match v462 with Ok x -> Ok x | Error x -> Error (v463 x)
                        let _run_target_args'_v464 = v472 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v473 : Result<Heap3 option, std_string_String> = match v462 with Ok x -> Ok x | Error x -> Error (v463 x)
                        let _run_target_args'_v464 = v473 
                        #endif
#else
                        let v474 : Result<Heap3 option, std_string_String> = match v462 with Ok x -> Ok x | Error x -> Error (v463 x)
                        let _run_target_args'_v464 = v474 
                        #endif
                        let v475 : Result<Heap3 option, std_string_String> = _run_target_args'_v464 
                        let v478 : string = "$0?"
                        let v479 : Heap3 option = Fable.Core.RustInterop.emitRustExpr v475 v478 
                        US3_0(v479)
            let v493 : Heap3 option option =
                match v486 with
                | US3_1 -> (* None *)
                    let v491 : Heap3 option option = None
                    v491
                | US3_0(v487) -> (* Some *)
                    let v488 : Heap3 option option = Some v487 
                    v488
            let v494 : Result<Heap3 option option, std_string_String> = Ok v493 
            let v495 : string = v51 + v52 
            let x = v494 //
            let v496 : _ = x
            let v497 : unit = ()
            (* run_target_args'
            let v498 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v499 : string = $"true; let _fix_closure_v497 = $0"
            let v500 : bool = Fable.Core.RustInterop.emitRustExpr v496 v499 
            let _run_target_args'_v498 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v501 : string = $"true; let _fix_closure_v497 = $0"
            let v502 : bool = Fable.Core.RustInterop.emitRustExpr v496 v501 
            let _run_target_args'_v498 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v503 : string = $"true; let _fix_closure_v497 = $0"
            let v504 : bool = Fable.Core.RustInterop.emitRustExpr v496 v503 
            let _run_target_args'_v498 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v498 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v498 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v498 = false 
            #endif
#else
            let _run_target_args'_v498 = false 
            #endif
            let v505 : bool = _run_target_args'_v498 
            let v507 : string = $"true; _fix_closure_v497 " + v495 + "); " + v51 + " // rust.fix_closure'"
            let v508 : bool = Fable.Core.RustInterop.emitRustExpr () v507 
            let v509 : string = "__future_init"
            let v510 : _ = Fable.Core.RustInterop.emitRustExpr () v509 
            let v511 : string = "v510"
            let v512 : std_pin_Pin<Box<Dyn<std_future_Future<Result<Heap3 option option, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v511 
            let v513 : string = "v512.await"
            let v514 : Result<Heap3 option option, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v513 
            let v515 : (Heap3 option option -> US6) = method24()
            let v516 : (std_string_String -> US6) = method25()
            let v517 : US6 = match v514 with Ok x -> v515 x | Error x -> v516 x
            match v517 with
            | US6_1(v536) -> (* Error *)
                let v537 : string = "state_core.use_core_database (3) / error: " + string v536 + ""
                let v538 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v539 : bool = Fable.Core.RustInterop.emitRustExpr v537 v538 
                US3_1
            | US6_0(v518) -> (* Ok *)
                let v519 : (Heap3 option -> US3) = method26()
                let v520 : US3 option = v518 |> Option.map v519 
                let v531 : US3 = US3_1
                let v532 : US3 = v520 |> Option.defaultValue v531 
                v532
    let v567 : US7 =
        match v545 with
        | US3_1 -> (* None *)
            US7_1
        | US3_0(v546) -> (* Some *)
            let v547 : (Heap3 -> US8) = method27()
            let v548 : US8 option = v546 |> Option.map v547 
            let v559 : US8 = US8_1
            let v560 : US8 = v548 |> Option.defaultValue v559 
            US7_0(v560)
    let v574 : US8 =
        match v567 with
        | US7_0(v568) -> (* Some *)
            match v568 with
            | US8_0(v569) -> (* Some *)
                US8_0(v569)
            | _ ->
                US8_1
        | _ ->
            US8_1
    let v575 : string = v51 + v52 
    let x = v574 //
    let v576 : _ = x
    let v577 : unit = ()
    (* run_target_args'
    let v578 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v579 : string = $"true; let _fix_closure_v577 = $0"
    let v580 : bool = Fable.Core.RustInterop.emitRustExpr v576 v579 
    let _run_target_args'_v578 = true 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v581 : string = $"true; let _fix_closure_v577 = $0"
    let v582 : bool = Fable.Core.RustInterop.emitRustExpr v576 v581 
    let _run_target_args'_v578 = true 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v583 : string = $"true; let _fix_closure_v577 = $0"
    let v584 : bool = Fable.Core.RustInterop.emitRustExpr v576 v583 
    let _run_target_args'_v578 = true 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v578 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v578 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v578 = false 
    #endif
#else
    let _run_target_args'_v578 = false 
    #endif
    let v585 : bool = _run_target_args'_v578 
    let v587 : string = $"true; _fix_closure_v577 " + v575 + "); " + v51 + " // rust.fix_closure'"
    let v588 : bool = Fable.Core.RustInterop.emitRustExpr () v587 
    let v589 : string = "__future_init"
    let v590 : _ = Fable.Core.RustInterop.emitRustExpr () v589 
    let v591 : string = "v590"
    let v592 : std_pin_Pin<Box<Dyn<std_future_Future<US8>>>> = Fable.Core.RustInterop.emitRustExpr () v591 
    let v593 : string = $"true; $0 /*"
    let v594 : bool = Fable.Core.RustInterop.emitRustExpr v592 v593 
    let v595 : string = $"*/ }}); //"
    let v596 : bool = Fable.Core.RustInterop.emitRustExpr () v595 
    let v597 : string = $"_func0_from_v128"
    let v598 : Func0<std_pin_Pin<Box<Dyn<std_future_Future<US8>>>>> = Fable.Core.RustInterop.emitRustExpr () v597 
    let v599 : string = "leptos::prelude::ArcLocalResource::new(|| async move { $0().await })"
    let v600 : leptos_prelude_ArcLocalResource<US8> = Fable.Core.RustInterop.emitRustExpr v598 v599 
    let v601 : unit = ()
    let v602 : string = $"true; let _func0_from_v601 = Func0::from(move || {{ //"
    let v603 : bool = Fable.Core.RustInterop.emitRustExpr () v602 
    let v604 : string = "state_core.use_core_database (4) / effect core_state_heap / ##1"
    let v605 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v606 : bool = Fable.Core.RustInterop.emitRustExpr v604 v605 
    let v607 : web_sys_Window = method28()
    let v608 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method29(v607)
    let v609 : (web_sys_Storage option -> US9) = method30()
    let v610 : (wasm_bindgen_JsValue -> US9) = method31()
    let v611 : US9 = match v608 with Ok x -> v609 x | Error x -> v610 x
    let v634 : US10 =
        match v611 with
        | US9_1(v631) -> (* Error *)
            US10_1(v631)
        | US9_0(v612) -> (* Ok *)
            let v613 : (web_sys_Storage -> US11) = method32()
            let v614 : US11 option = v612 |> Option.map v613 
            let v625 : US11 = US11_1
            let v626 : US11 = v614 |> Option.defaultValue v625 
            US10_0(v626)
    let v1106 : bool =
        match v634 with
        | US10_0(v635) -> (* Ok *)
            match v635 with
            | US11_0(v636) -> (* Some *)
                let v637 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
                let v638 : US8 option = Fable.Core.RustInterop.emitRustExpr v600 v637 
                let v639 : (US8 -> US7) = method33()
                let v640 : US7 option = v638 |> Option.map v639 
                let v651 : US7 = US7_1
                let v652 : US7 = v640 |> Option.defaultValue v651 
                let v656 : string = $"%A{v652}"
                let v659 : string = "state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: " + v656 + ""
                let v660 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v661 : bool = Fable.Core.RustInterop.emitRustExpr v659 v660 
                let v1040 : US8 =
                    match v652 with
                    | US7_0(v662) -> (* Some *)
                        match v662 with
                        | US8_0(v663) -> (* Some *)
                            US8_0(v663)
                        | _ ->
                            let v665 : web_sys_Storage = method34(v636)
                            let v666 : string = method35()
                            (* run_target_args'
                            let v667 : unit = ()
                            run_target_args' *)
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v668 : string = "&*$0"
                            let v669 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v666 v668 
                            let _run_target_args'_v667 = v669 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v670 : string = "&*$0"
                            let v671 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v666 v670 
                            let _run_target_args'_v667 = v671 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v672 : string = "&*$0"
                            let v673 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v666 v672 
                            let _run_target_args'_v667 = v673 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v674 : Ref<Str> = v666 |> unbox<Ref<Str>>
                            let _run_target_args'_v667 = v674 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v677 : Ref<Str> = v666 |> unbox<Ref<Str>>
                            let _run_target_args'_v667 = v677 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v680 : Ref<Str> = v666 |> unbox<Ref<Str>>
                            let _run_target_args'_v667 = v680 
                            #endif
#else
                            let v683 : Ref<Str> = v666 |> unbox<Ref<Str>>
                            let _run_target_args'_v667 = v683 
                            #endif
                            let v686 : Ref<Str> = _run_target_args'_v667 
                            let v691 : string = $"web_sys::Storage::get_item(&v665, $0)"
                            let v692 : Result<std_string_String option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v686 v691 
                            let v693 : (std_string_String option -> US12) = method36()
                            let v694 : (wasm_bindgen_JsValue -> US12) = method37()
                            let v695 : US12 = match v692 with Ok x -> v693 x | Error x -> v694 x
                            let v721 : US13 =
                                match v695 with
                                | US12_1(v718) -> (* Error *)
                                    US13_1(v718)
                                | US12_0(v696) -> (* Ok *)
                                    let v697 : std_string_String option = method38(v696)
                                    let v698 : string = "serde_json::from_value(v697.into()).unwrap()"
                                    let v699 : std_string_String option = Fable.Core.RustInterop.emitRustExpr () v698 
                                    let v700 : (std_string_String -> US14) = method39()
                                    let v701 : US14 option = v699 |> Option.map v700 
                                    let v712 : US14 = US14_1
                                    let v713 : US14 = v701 |> Option.defaultValue v712 
                                    US13_0(v713)
                            let v727 : US15 =
                                match v721 with
                                | US13_1(v724) -> (* Error *)
                                    US15_1
                                | US13_0(v722) -> (* Ok *)
                                    US15_0(v722)
                            let v734 : US14 =
                                match v727 with
                                | US15_0(v728) -> (* Some *)
                                    match v728 with
                                    | US14_0(v729) -> (* Some *)
                                        US14_0(v729)
                                    | _ ->
                                        US14_1
                                | _ ->
                                    US14_1
                            let v741 : std_string_String option =
                                match v734 with
                                | US14_1 -> (* None *)
                                    let v739 : std_string_String option = None
                                    v739
                                | US14_0(v735) -> (* Some *)
                                    let v736 : std_string_String option = Some v735 
                                    v736
                            let v742 : (std_string_String -> US8) = method40()
                            let v743 : US8 option = v741 |> Option.map v742 
                            let v828 : (US8 -> US7) = method33()
                            let v829 : US7 option = v743 |> Option.map v828 
                            let v840 : US7 = US7_1
                            let v841 : US7 = v829 |> Option.defaultValue v840 
                            match v841 with
                            | US7_0(v845) -> (* Some *)
                                match v845 with
                                | US8_0(v846) -> (* Some *)
                                    US8_0(v846)
                                | _ ->
                                    US8_1
                            | _ ->
                                US8_1
                    | _ ->
                        let v853 : web_sys_Storage = method34(v636)
                        let v854 : string = method35()
                        (* run_target_args'
                        let v855 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v856 : string = "&*$0"
                        let v857 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v854 v856 
                        let _run_target_args'_v855 = v857 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v858 : string = "&*$0"
                        let v859 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v854 v858 
                        let _run_target_args'_v855 = v859 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v860 : string = "&*$0"
                        let v861 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v854 v860 
                        let _run_target_args'_v855 = v861 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v862 : Ref<Str> = v854 |> unbox<Ref<Str>>
                        let _run_target_args'_v855 = v862 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v865 : Ref<Str> = v854 |> unbox<Ref<Str>>
                        let _run_target_args'_v855 = v865 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v868 : Ref<Str> = v854 |> unbox<Ref<Str>>
                        let _run_target_args'_v855 = v868 
                        #endif
#else
                        let v871 : Ref<Str> = v854 |> unbox<Ref<Str>>
                        let _run_target_args'_v855 = v871 
                        #endif
                        let v874 : Ref<Str> = _run_target_args'_v855 
                        let v879 : string = $"web_sys::Storage::get_item(&v853, $0)"
                        let v880 : Result<std_string_String option, wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr v874 v879 
                        let v881 : (std_string_String option -> US12) = method36()
                        let v882 : (wasm_bindgen_JsValue -> US12) = method37()
                        let v883 : US12 = match v880 with Ok x -> v881 x | Error x -> v882 x
                        let v909 : US13 =
                            match v883 with
                            | US12_1(v906) -> (* Error *)
                                US13_1(v906)
                            | US12_0(v884) -> (* Ok *)
                                let v885 : std_string_String option = method38(v884)
                                let v886 : string = "serde_json::from_value(v885.into()).unwrap()"
                                let v887 : std_string_String option = Fable.Core.RustInterop.emitRustExpr () v886 
                                let v888 : (std_string_String -> US14) = method39()
                                let v889 : US14 option = v887 |> Option.map v888 
                                let v900 : US14 = US14_1
                                let v901 : US14 = v889 |> Option.defaultValue v900 
                                US13_0(v901)
                        let v915 : US15 =
                            match v909 with
                            | US13_1(v912) -> (* Error *)
                                US15_1
                            | US13_0(v910) -> (* Ok *)
                                US15_0(v910)
                        let v922 : US14 =
                            match v915 with
                            | US15_0(v916) -> (* Some *)
                                match v916 with
                                | US14_0(v917) -> (* Some *)
                                    US14_0(v917)
                                | _ ->
                                    US14_1
                            | _ ->
                                US14_1
                        let v929 : std_string_String option =
                            match v922 with
                            | US14_1 -> (* None *)
                                let v927 : std_string_String option = None
                                v927
                            | US14_0(v923) -> (* Some *)
                                let v924 : std_string_String option = Some v923 
                                v924
                        let v930 : (std_string_String -> US8) = method40()
                        let v931 : US8 option = v929 |> Option.map v930 
                        let v1016 : (US8 -> US7) = method33()
                        let v1017 : US7 option = v931 |> Option.map v1016 
                        let v1028 : US7 = US7_1
                        let v1029 : US7 = v1017 |> Option.defaultValue v1028 
                        match v1029 with
                        | US7_0(v1033) -> (* Some *)
                            match v1033 with
                            | US8_0(v1034) -> (* Some *)
                                US8_0(v1034)
                            | _ ->
                                US8_1
                        | _ ->
                            US8_1
                let v1041 : string = $"%A{v1040}"
                let v1044 : string = "state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: " + v1041 + ""
                let v1045 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v1046 : bool = Fable.Core.RustInterop.emitRustExpr v1044 v1045 
                match v1040 with
                | US8_0(v1047) -> (* Some *)
                    let v1048 : leptos_prelude_ArcRwSignal<Heap1> = v7.l0
                    let v1049 : string = "Box::pin($0)"
                    let v1050 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1048 v1049 
                    let v1051 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                    let v1052 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1050 v1051 
                    let v1053 : leptos_prelude_ArcRwSignal<bool> = v1052.l0
                    let v1054 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
                    let v1055 : bool = Fable.Core.RustInterop.emitRustExpr v1053 v1054 
                    let v1056 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
                    let v1059 : string = "*/ | { *x = $0(x.clone()) }); //"
                    let v1060 : (bool -> bool) = closure32(v1047)
                    let v1061 : bool = Fable.Core.RustInterop.emitRustExpr v1060 v1059 
                    let v1062 : leptos_prelude_ArcRwSignal<Heap1> = v7.l0
                    let v1063 : string = "Box::pin($0)"
                    let v1064 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1062 v1063 
                    let v1065 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                    let v1066 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1064 v1065 
                    let v1067 : leptos_prelude_ArcRwSignal<bool> = v1066.l1
                    let v1068 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
                    let v1069 : bool = Fable.Core.RustInterop.emitRustExpr v1067 v1068 
                    let v1070 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
                    let v1073 : string = "*/ | { *x = $0(x.clone()) }); //"
                    let v1074 : (bool -> bool) = closure33(v1047)
                    let v1075 : bool = Fable.Core.RustInterop.emitRustExpr v1074 v1073 
                    let v1076 : leptos_prelude_ArcRwSignal<Heap1> = v7.l0
                    let v1077 : string = "Box::pin($0)"
                    let v1078 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1076 v1077 
                    let v1079 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                    let v1080 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1078 v1079 
                    let v1081 : leptos_prelude_ArcRwSignal<std_string_String> = v1080.l2
                    let v1082 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
                    let v1083 : bool = Fable.Core.RustInterop.emitRustExpr v1081 v1082 
                    let v1084 : TypeEmit<std_string_String> = null |> unbox<TypeEmit<std_string_String>>
                    let v1087 : string = "*/ | { *x = $0(x.clone()) }); //"
                    let v1088 : (std_string_String -> std_string_String) = closure34(v1047)
                    let v1089 : bool = Fable.Core.RustInterop.emitRustExpr v1088 v1087 
                    let v1090 : leptos_prelude_ArcRwSignal<Heap1> = v7.l0
                    let v1091 : string = "Box::pin($0)"
                    let v1092 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1090 v1091 
                    let v1093 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                    let v1094 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1092 v1093 
                    let v1095 : leptos_prelude_ArcRwSignal<Heap0> = v1094.l3
                    let v1096 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
                    let v1097 : bool = Fable.Core.RustInterop.emitRustExpr v1095 v1096 
                    let v1098 : TypeEmit<Heap0> = null |> unbox<TypeEmit<Heap0>>
                    let v1101 : string = "*/ | { *x = $0(x.clone()) }); //"
                    let v1102 : (Heap0 -> Heap0) = closure35(v1047)
                    let v1103 : bool = Fable.Core.RustInterop.emitRustExpr v1102 v1101 
                    true
                | _ ->
                    false
            | _ ->
                false
        | _ ->
            false
    // rust.func0_from / is_unit
    let v1107 : string = $"true; /*"
    let v1108 : bool = Fable.Core.RustInterop.emitRustExpr () v1107 
    let v1109 : string = $"*/ }}); //"
    let v1110 : bool = Fable.Core.RustInterop.emitRustExpr () v1109 
    let v1111 : string = $"_func0_from_v601"
    let v1112 : Func0<unit> = Fable.Core.RustInterop.emitRustExpr () v1111 
    let v1113 : string = "true; leptos::prelude::Effect::new(move |_| { v1112() })"
    let v1114 : bool = Fable.Core.RustInterop.emitRustExpr () v1113 
    let v1115 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v1116 : (unit -> std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>>) = closure36(v7)
    let v1117 : leptos_prelude_ArcMemo<std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>>> = Fable.Core.RustInterop.emitRustExpr v1116 v1115 
    let v1118 : string = $"leptos::prelude::signal($0)"
    let struct (v1119 : leptos_prelude_ReadSignal<bool>, v1120 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v1118 
    let v1121 : unit = ()
    let v1122 : string = $"true; let _func1_from_v1121 = Func1::from(move |value| {{ //"
    let v1123 : bool = Fable.Core.RustInterop.emitRustExpr () v1122 
    let v1124 : string = $"value"
    let v1125 : Heap3 = Fable.Core.RustInterop.emitRustExpr () v1124 
    let v1126 : string = $"%A{v1125}"
    let v1129 : string = $"Option::map(leptos::prelude::ArcLocalResource::get(&$0), |x| x.clone())"
    let v1130 : std_sync_Arc<rexie_Rexie> option = Fable.Core.RustInterop.emitRustExpr v124 v1129 
    let v1131 : (std_sync_Arc<rexie_Rexie> -> US2) = method9()
    let v1132 : US2 option = v1130 |> Option.map v1131 
    let v1143 : US2 = US2_1
    let v1144 : US2 = v1132 |> Option.defaultValue v1143 
    let v1148 : string = "true; let __future_init = Box::pin(/*"
    let v1149 : bool = Fable.Core.RustInterop.emitRustExpr () v1148 
    let v1150 : string = "*/ async move { /*"
    let v1151 : bool = Fable.Core.RustInterop.emitRustExpr () v1150 
    let v1152 : string = "*/ //"
    let v1153 : bool = Fable.Core.RustInterop.emitRustExpr () v1152 
    let v1241 : bool =
        match v1144 with
        | US2_1 -> (* None *)
            let v1237 : string = "state_core.use_core_database (13) / set_core_state_heap_action / database=None"
            let v1238 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1239 : bool = Fable.Core.RustInterop.emitRustExpr v1237 v1238 
            false
        | US2_0(v1154) -> (* Some *)
            let v1155 : string = "state_core.use_core_database (12) / set_core_state_heap_action / value: " + string v1126 + ""
            let v1156 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1157 : bool = Fable.Core.RustInterop.emitRustExpr v1155 v1156 
            let v1158 : string = $"%A{v1125}"
            let v1161 : int64 = System.Convert.ToInt64 v1158.Length
            let v1162 : string = "state_core.set_data () / data_len: " + string v1161 + ""
            let v1163 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1164 : bool = Fable.Core.RustInterop.emitRustExpr v1162 v1163 
            let v1165 : string = "true; let __future_init = Box::pin(/*"
            let v1166 : bool = Fable.Core.RustInterop.emitRustExpr () v1165 
            let v1167 : string = "*/ async move { /*"
            let v1168 : bool = Fable.Core.RustInterop.emitRustExpr () v1167 
            let v1169 : string = "*/ //"
            let v1170 : bool = Fable.Core.RustInterop.emitRustExpr () v1169 
            let v1171 : string = "true; let mut data = Vec::new()"
            let v1172 : bool = Fable.Core.RustInterop.emitRustExpr () v1171 
            let v1173 : string = "true; borsh::BorshSerialize::serialize(&$0, &mut data).unwrap()"
            let v1174 : bool = Fable.Core.RustInterop.emitRustExpr v1125 v1173 
            let v1175 : string = "data"
            let v1176 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr () v1175 
            let v1177 : string = "serde_wasm_bindgen::to_value(&v1176).unwrap()"
            let v1178 : wasm_bindgen_JsValue = Fable.Core.RustInterop.emitRustExpr () v1177 
            let v1179 : string = method43()
            (* run_target_args'
            let v1180 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1181 : string = "&*$0"
            let v1182 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1179 v1181 
            let _run_target_args'_v1180 = v1182 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1183 : string = "&*$0"
            let v1184 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1179 v1183 
            let _run_target_args'_v1180 = v1184 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1185 : string = "&*$0"
            let v1186 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1179 v1185 
            let _run_target_args'_v1180 = v1186 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1187 : Ref<Str> = v1179 |> unbox<Ref<Str>>
            let _run_target_args'_v1180 = v1187 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1190 : Ref<Str> = v1179 |> unbox<Ref<Str>>
            let _run_target_args'_v1180 = v1190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1193 : Ref<Str> = v1179 |> unbox<Ref<Str>>
            let _run_target_args'_v1180 = v1193 
            #endif
#else
            let v1196 : Ref<Str> = v1179 |> unbox<Ref<Str>>
            let _run_target_args'_v1180 = v1196 
            #endif
            let v1199 : Ref<Str> = _run_target_args'_v1180 
            let v1204 : string = "$0.transaction(&[\"store\"], rexie::TransactionMode::ReadWrite)?"
            let v1205 : rexie_Transaction = Fable.Core.RustInterop.emitRustExpr v1154 v1204 
            let v1206 : string = "v1205.store(\"store\")?"
            let v1207 : rexie_Store = Fable.Core.RustInterop.emitRustExpr () v1206 
            let v1208 : string = "true; v1207.put(&v1178, Some(&$0.into())).await?"
            let v1209 : bool = Fable.Core.RustInterop.emitRustExpr v1199 v1208 
            let v1210 : string = "true; v1205.done().await?"
            let v1211 : bool = Fable.Core.RustInterop.emitRustExpr () v1210 
            let v1212 : Result<unit, rexie_Error> = Ok () 
            let v1213 : string = v51 + v52 
            let x = v1212 //
            let v1214 : _ = x
            let v1215 : unit = ()
            (* run_target_args'
            let v1216 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1217 : string = $"true; let _fix_closure_v1215 = $0"
            let v1218 : bool = Fable.Core.RustInterop.emitRustExpr v1214 v1217 
            let _run_target_args'_v1216 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1219 : string = $"true; let _fix_closure_v1215 = $0"
            let v1220 : bool = Fable.Core.RustInterop.emitRustExpr v1214 v1219 
            let _run_target_args'_v1216 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1221 : string = $"true; let _fix_closure_v1215 = $0"
            let v1222 : bool = Fable.Core.RustInterop.emitRustExpr v1214 v1221 
            let _run_target_args'_v1216 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v1216 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v1216 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v1216 = false 
            #endif
#else
            let _run_target_args'_v1216 = false 
            #endif
            let v1223 : bool = _run_target_args'_v1216 
            let v1225 : string = $"true; _fix_closure_v1215 " + v1213 + "); " + v51 + " // rust.fix_closure'"
            let v1226 : bool = Fable.Core.RustInterop.emitRustExpr () v1225 
            let v1227 : string = "__future_init"
            let v1228 : _ = Fable.Core.RustInterop.emitRustExpr () v1227 
            let v1229 : string = "v1228"
            let v1230 : std_pin_Pin<Box<Dyn<std_future_Future<Result<unit, rexie_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v1229 
            let v1231 : string = "v1230.await"
            let v1232 : Result<unit, rexie_Error> = Fable.Core.RustInterop.emitRustExpr () v1231 
            (* run_target_args'
            let v1233 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1234 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1232 v1234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1235 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1232 v1235 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1236 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1232 v1236 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1232 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if FABLE_COMPILER_PYTHON
            match v1232 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1232 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
#else
            match v1232 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            #endif
            // run_target_args' is_unit
            true
    let v1242 : string = v51 + v52 
    let x = () //
    let v1243 : _ = x
    let v1244 : unit = ()
    (* run_target_args'
    let v1245 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let _run_target_args'_v1245 = false 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let _run_target_args'_v1245 = false 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let _run_target_args'_v1245 = false 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _run_target_args'_v1245 = false 
    #endif
#if FABLE_COMPILER_PYTHON
    let _run_target_args'_v1245 = false 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _run_target_args'_v1245 = false 
    #endif
#else
    let _run_target_args'_v1245 = false 
    #endif
    let v1246 : bool = _run_target_args'_v1245 
    let v1248 : string = $"true; _fix_closure_v1244 " + v1242 + "); " + v51 + " // rust.fix_closure'"
    let v1249 : bool = Fable.Core.RustInterop.emitRustExpr () v1248 
    let v1250 : string = "__future_init"
    let v1251 : _ = Fable.Core.RustInterop.emitRustExpr () v1250 
    let v1252 : string = "v1251"
    let v1253 : std_pin_Pin<Box<Dyn<std_future_Future<unit>>>> = Fable.Core.RustInterop.emitRustExpr () v1252 
    let func1_from_result = v1253 //
    let v1254 : _ = func1_from_result
    let v1255 : string = $"true; $0 /*"
    let v1256 : bool = Fable.Core.RustInterop.emitRustExpr v1254 v1255 
    let v1257 : string = $"*/ }}); //"
    let v1258 : bool = Fable.Core.RustInterop.emitRustExpr () v1257 
    let v1259 : string = $"_func1_from_v1121"
    let v1260 : Func0<Heap3, std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>> = Fable.Core.RustInterop.emitRustExpr () v1259 
    let v1261 : string = "leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap3>| $0(value.clone()))"
    let v1262 : (Heap3 -> std_pin_Pin<Box<Dyn<std_future_Future<unit>>>>) = closure37(v1260)
    let v1263 : leptos_prelude_ArcAction<Heap3, unit> = Fable.Core.RustInterop.emitRustExpr v1262 v1261 
    let v1264 : unit = ()
    let v1265 : string = $"true; let _func0_from_v1264 = Func0::from(move || {{ //"
    let v1266 : bool = Fable.Core.RustInterop.emitRustExpr () v1265 
    let v1267 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v1268 : bool = Fable.Core.RustInterop.emitRustExpr v1119 v1267 
    let v1269 : string = "state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: " + string v1268 + ""
    let v1270 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v1271 : bool = Fable.Core.RustInterop.emitRustExpr v1269 v1270 
    let v1272 : leptos_prelude_ArcRwSignal<Heap1> = v7.l0
    let v1273 : string = "Box::pin($0)"
    let v1274 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1272 v1273 
    let v1275 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v1276 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1274 v1275 
    let v1277 : leptos_prelude_ArcRwSignal<bool> = v1276.l0
    let v1278 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v1279 : bool = Fable.Core.RustInterop.emitRustExpr v1277 v1278 
    let v1280 : leptos_prelude_ArcRwSignal<Heap1> = v7.l0
    let v1281 : string = "Box::pin($0)"
    let v1282 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1280 v1281 
    let v1283 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v1284 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1282 v1283 
    let v1285 : leptos_prelude_ArcRwSignal<bool> = v1284.l1
    let v1286 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v1287 : bool = Fable.Core.RustInterop.emitRustExpr v1285 v1286 
    let v1288 : leptos_prelude_ArcRwSignal<Heap1> = v7.l0
    let v1289 : string = "Box::pin($0)"
    let v1290 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1288 v1289 
    let v1291 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v1292 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1290 v1291 
    let v1293 : leptos_prelude_ArcRwSignal<std_string_String> = v1292.l2
    let v1294 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v1295 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1293 v1294 
    let v1296 : leptos_prelude_ArcRwSignal<Heap1> = v7.l0
    let v1297 : string = "Box::pin($0)"
    let v1298 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1296 v1297 
    let v1299 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
    let v1300 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1298 v1299 
    let v1301 : leptos_prelude_ArcRwSignal<Heap0> = v1300.l3
    let v1302 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
    let v1303 : Heap0 = Fable.Core.RustInterop.emitRustExpr v1301 v1302 
    let v1304 : Heap3 = {l0 = v1279; l1 = v1287; l2 = v1295; l3 = v1303} : Heap3
    let v1305 : string = $"%A{v1304}"
    let v1308 : string = "state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: " + string v1305 + ""
    let v1309 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v1310 : bool = Fable.Core.RustInterop.emitRustExpr v1308 v1309 
    let v1311 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v1312 : std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr v1117 v1311 
    let v1313 : string = "dark_mode_key"
    (* run_target_args'
    let v1314 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1315 : string = "&*$0"
    let v1316 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1313 v1315 
    let _run_target_args'_v1314 = v1316 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1317 : string = "&*$0"
    let v1318 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1313 v1317 
    let _run_target_args'_v1314 = v1318 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1319 : string = "&*$0"
    let v1320 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1313 v1319 
    let _run_target_args'_v1314 = v1320 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1321 : Ref<Str> = v1313 |> unbox<Ref<Str>>
    let _run_target_args'_v1314 = v1321 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1324 : Ref<Str> = v1313 |> unbox<Ref<Str>>
    let _run_target_args'_v1314 = v1324 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1327 : Ref<Str> = v1313 |> unbox<Ref<Str>>
    let _run_target_args'_v1314 = v1327 
    #endif
#else
    let v1330 : Ref<Str> = v1313 |> unbox<Ref<Str>>
    let _run_target_args'_v1314 = v1330 
    #endif
    let v1333 : Ref<Str> = _run_target_args'_v1314 
    (* run_target_args'
    let v1338 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1339 : string = "String::from($0)"
    let v1340 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1333 v1339 
    let _run_target_args'_v1338 = v1340 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1341 : string = "String::from($0)"
    let v1342 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1333 v1341 
    let _run_target_args'_v1338 = v1342 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1343 : string = "String::from($0)"
    let v1344 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1333 v1343 
    let _run_target_args'_v1338 = v1344 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1345 : std_string_String = v1333 |> unbox<std_string_String>
    let _run_target_args'_v1338 = v1345 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1348 : std_string_String = v1333 |> unbox<std_string_String>
    let _run_target_args'_v1338 = v1348 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1351 : std_string_String = v1333 |> unbox<std_string_String>
    let _run_target_args'_v1338 = v1351 
    #endif
#else
    let v1354 : std_string_String = v1333 |> unbox<std_string_String>
    let _run_target_args'_v1338 = v1354 
    #endif
    let v1357 : std_string_String = _run_target_args'_v1338 
    let v1362 : std_string_String = method45(v1357)
    let v1363 : string = "std::collections::HashMap::get(&$0, &v1362).map(|x| x).cloned()"
    let v1364 : leptos_prelude_ArcRwSignal<bool> option = Fable.Core.RustInterop.emitRustExpr v1312 v1363 
    let v1365 : (leptos_prelude_ArcRwSignal<bool> -> US16) = method46()
    let v1366 : US16 option = v1364 |> Option.map v1365 
    let v1377 : US16 = US16_1
    let v1378 : US16 = v1366 |> Option.defaultValue v1377 
    let v1388 : US17 =
        match v1378 with
        | US16_1 -> (* None *)
            US17_1
        | US16_0(v1382) -> (* Some *)
            let v1383 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
            let v1384 : bool = Fable.Core.RustInterop.emitRustExpr v1382 v1383 
            US17_0(v1384)
    let v1391 : bool =
        match v1388 with
        | US17_1 -> (* None *)
            false
        | US17_0(v1389) -> (* Some *)
            v1389
    let v1392 : string = "state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: " + string v1391 + ""
    let v1393 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v1394 : bool = Fable.Core.RustInterop.emitRustExpr v1392 v1393 
    let v1395 : bool = v1391 = false
    let v1476 : bool =
        if v1395 then
            let v1396 : bool = v1268 = false
            if v1396 then
                let v1397 : string = $"true; leptos::prelude::WriteSignal::update(&$0, |x: &mut /*"
                let v1398 : bool = Fable.Core.RustInterop.emitRustExpr v1120 v1397 
                let v1399 : TypeEmit<bool> = null |> unbox<TypeEmit<bool>>
                let v1402 : string = "*/ | { *x = $0(x.clone()) }); //"
                let v1403 : (bool -> bool) = closure39()
                let v1404 : bool = Fable.Core.RustInterop.emitRustExpr v1403 v1402 
                true
            else
                let v1405 : string = "state_core.use_core_database (18) / effect new_core_state_heap / ##4"
                let v1406 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v1407 : bool = Fable.Core.RustInterop.emitRustExpr v1405 v1406 
                let v1408 : web_sys_Window = method28()
                let v1409 : Result<web_sys_Storage option, wasm_bindgen_JsValue> = method29(v1408)
                let v1410 : (web_sys_Storage option -> US9) = method30()
                let v1411 : (wasm_bindgen_JsValue -> US9) = method31()
                let v1412 : US9 = match v1409 with Ok x -> v1410 x | Error x -> v1411 x
                let v1435 : US10 =
                    match v1412 with
                    | US9_1(v1432) -> (* Error *)
                        US10_1(v1432)
                    | US9_0(v1413) -> (* Ok *)
                        let v1414 : (web_sys_Storage -> US11) = method32()
                        let v1415 : US11 option = v1413 |> Option.map v1414 
                        let v1426 : US11 = US11_1
                        let v1427 : US11 = v1415 |> Option.defaultValue v1426 
                        US10_0(v1427)
                match v1435 with
                | US10_0(v1436) -> (* Ok *)
                    match v1436 with
                    | US11_0(v1437) -> (* Some *)
                        let v1438 : string = "true; leptos::prelude::ArcAction::dispatch(&$0, $1.clone())"
                        let v1439 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1263, v1304) v1438 
                        let v1440 : web_sys_Storage = method47(v1437)
                        let v1441 : string = method48()
                        (* run_target_args'
                        let v1442 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1443 : string = "&*$0"
                        let v1444 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1441 v1443 
                        let _run_target_args'_v1442 = v1444 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1445 : string = "&*$0"
                        let v1446 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1441 v1445 
                        let _run_target_args'_v1442 = v1446 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1447 : string = "&*$0"
                        let v1448 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1441 v1447 
                        let _run_target_args'_v1442 = v1448 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1449 : Ref<Str> = v1441 |> unbox<Ref<Str>>
                        let _run_target_args'_v1442 = v1449 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1452 : Ref<Str> = v1441 |> unbox<Ref<Str>>
                        let _run_target_args'_v1442 = v1452 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1455 : Ref<Str> = v1441 |> unbox<Ref<Str>>
                        let _run_target_args'_v1442 = v1455 
                        #endif
#else
                        let v1458 : Ref<Str> = v1441 |> unbox<Ref<Str>>
                        let _run_target_args'_v1442 = v1458 
                        #endif
                        let v1461 : Ref<Str> = _run_target_args'_v1442 
                        let v1466 : Heap3 = method49(v1304)
                        let v1467 : string = "serde_json::json!(v1466).to_string()"
                        let v1468 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1467 
                        let v1469 : string = "$0.as_str()"
                        let v1470 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1468 v1469 
                        let v1471 : string = $"true; web_sys::Storage::set(&v1440, $0, v1470).unwrap()"
                        let v1472 : bool = Fable.Core.RustInterop.emitRustExpr v1461 v1471 
                        true
                    | _ ->
                        false
                | _ ->
                    false
        else
            false
    // rust.func0_from / is_unit
    let v1477 : string = $"true; /*"
    let v1478 : bool = Fable.Core.RustInterop.emitRustExpr () v1477 
    let v1479 : string = $"*/ }}); //"
    let v1480 : bool = Fable.Core.RustInterop.emitRustExpr () v1479 
    let v1481 : string = $"_func0_from_v1264"
    let v1482 : Func0<unit> = Fable.Core.RustInterop.emitRustExpr () v1481 
    let v1483 : string = "true; leptos::prelude::Effect::new(move |_| { v1482() })"
    let v1484 : bool = Fable.Core.RustInterop.emitRustExpr () v1483 
    let v1485 : string = "class=\"flex flex-1\""
    let v1486 : (unit -> bool) = method50(v7)
    let v1487 : string = "class:dark"
    let v1488 : string = "" + v1487 + "={move || v1486()}"
    let v1489 : string = " " + v1485 + v51 + ""
    let v1490 : string = " " + v1488 + v1489 + ""
    let v1491 : string = "content.render ()"
    let v1492 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v1493 : bool = Fable.Core.RustInterop.emitRustExpr v1491 v1492 
    let v1494 : string = "leptos_router::hooks::use_location()"
    let v1495 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v1494 
    let v1496 : string = "std::sync::Arc::new(leptos_router::hooks::use_navigate())"
    let v1497 : std_sync_Arc<Dyn<ActionFn2<Ref<Str>, leptos_router_NavigateOptions>>> = Fable.Core.RustInterop.emitRustExpr () v1496 
    let v1498 : string = "leptos_router::hooks::use_location()"
    let v1499 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v1498 
    let v1500 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v1501 : (unit -> string) = closure41(v1499)
    let v1502 : leptos_prelude_ArcMemo<string> = Fable.Core.RustInterop.emitRustExpr v1501 v1500 
    let v1503 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
    let v1504 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v1503 
    let v1505 : string = "$0.unwrap()"
    let v1506 : Heap2 = Fable.Core.RustInterop.emitRustExpr v1504 v1505 
    let v1507 : string = $"leptos::prelude::signal($0)"
    let v1508 : US18 = US18_0
    let struct (v1509 : leptos_prelude_ReadSignal<US18>, v1510 : leptos_prelude_WriteSignal<US18>) = Fable.Core.RustInterop.emitRustExpr v1508 v1507 
    let v1511 : string = $"leptos::prelude::signal($0)"
    let struct (v1512 : leptos_prelude_ReadSignal<bool>, v1513 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v1511 
    let v1514 : unit = ()
    let v1515 : string = $"true; let _func0_from_v1514 = Func0::from(move || {{ //"
    let v1516 : bool = Fable.Core.RustInterop.emitRustExpr () v1515 
    let v1517 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v1518 : bool = Fable.Core.RustInterop.emitRustExpr v1512 v1517 
    let v1519 : string = "$0.hash"
    let v1520 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1495 v1519 
    let v1521 : string = $"leptos::prelude::Memo::get(&$0)"
    let v1522 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1520 v1521 
    let v1523 : string = $"leptos::prelude::ArcMemo::get(&$0)"
    let v1524 : string = Fable.Core.RustInterop.emitRustExpr v1502 v1523 
    let v1525 : string = $"{v1524}{v1522}"
    let v1526 : string = "content.render () / effect 1 / new_url_hash: " + v1525 + " / loaded: " + string v1518 + ""
    let v1527 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v1528 : bool = Fable.Core.RustInterop.emitRustExpr v1526 v1527 
    let v1529 : bool = v1518 = false
    let v1633 : bool =
        if v1529 then
            let v1530 : std_string_String = method51(v1522)
            let v1531 : string = "v1530 == \"\""
            let v1532 : bool = Fable.Core.RustInterop.emitRustExpr () v1531 
            if v1532 then
                let v1533 : leptos_prelude_ArcRwSignal<Heap1> = v1506.l0
                let v1534 : string = "Box::pin($0)"
                let v1535 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1533 v1534 
                let v1536 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
                let v1537 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1535 v1536 
                let v1538 : leptos_prelude_ArcRwSignal<std_string_String> = v1537.l2
                let v1539 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
                let v1540 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1538 v1539 
                let v1541 : string = "fable_library_rust::String_::fromString($0)"
                let v1542 : string = Fable.Core.RustInterop.emitRustExpr v1540 v1541 
                let v1543 : string = "content.render () / effect 1 / url_hash: " + v1542 + ""
                let v1544 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
                let v1545 : bool = Fable.Core.RustInterop.emitRustExpr v1543 v1544 
                let v1546 : string = "#"
                let v1547 : bool = v1542.Contains v1546 
                if v1547 then
                    (* run_target_args'
                    let v1550 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1551 : string = "&*$0"
                    let v1552 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1542 v1551 
                    let _run_target_args'_v1550 = v1552 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1553 : string = "&*$0"
                    let v1554 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1542 v1553 
                    let _run_target_args'_v1550 = v1554 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1555 : string = "&*$0"
                    let v1556 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1542 v1555 
                    let _run_target_args'_v1550 = v1556 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1557 : Ref<Str> = v1542 |> unbox<Ref<Str>>
                    let _run_target_args'_v1550 = v1557 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1560 : Ref<Str> = v1542 |> unbox<Ref<Str>>
                    let _run_target_args'_v1550 = v1560 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1563 : Ref<Str> = v1542 |> unbox<Ref<Str>>
                    let _run_target_args'_v1550 = v1563 
                    #endif
#else
                    let v1566 : Ref<Str> = v1542 |> unbox<Ref<Str>>
                    let _run_target_args'_v1550 = v1566 
                    #endif
                    let v1569 : Ref<Str> = _run_target_args'_v1550 
                    let v1574 : string = "$0($1, Default::default())"
                    Fable.Core.RustInterop.emitRustExpr struct (v1497, v1569) v1574 
                    ()
            let v1575 : string = $"true; leptos::prelude::WriteSignal::set(&$0, $1); //"
            let v1576 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1513, true) v1575 
            true
        else
            let v1577 : leptos_prelude_ArcRwSignal<Heap1> = v1506.l0
            let v1578 : string = "Box::pin($0)"
            let v1579 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v1577 v1578 
            let v1580 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
            let v1581 : Heap1 = Fable.Core.RustInterop.emitRustExpr v1579 v1580 
            let v1582 : leptos_prelude_ArcRwSignal<std_string_String> = v1581.l2
            (* run_target_args'
            let v1583 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1584 : string = "&*$0"
            let v1585 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1584 
            let _run_target_args'_v1583 = v1585 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1586 : string = "&*$0"
            let v1587 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1586 
            let _run_target_args'_v1583 = v1587 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1588 : string = "&*$0"
            let v1589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1588 
            let _run_target_args'_v1583 = v1589 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1590 : Ref<Str> = v1525 |> unbox<Ref<Str>>
            let _run_target_args'_v1583 = v1590 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1593 : Ref<Str> = v1525 |> unbox<Ref<Str>>
            let _run_target_args'_v1583 = v1593 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1596 : Ref<Str> = v1525 |> unbox<Ref<Str>>
            let _run_target_args'_v1583 = v1596 
            #endif
#else
            let v1599 : Ref<Str> = v1525 |> unbox<Ref<Str>>
            let _run_target_args'_v1583 = v1599 
            #endif
            let v1602 : Ref<Str> = _run_target_args'_v1583 
            (* run_target_args'
            let v1607 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1608 : string = "String::from($0)"
            let v1609 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1602 v1608 
            let _run_target_args'_v1607 = v1609 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1610 : string = "String::from($0)"
            let v1611 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1602 v1610 
            let _run_target_args'_v1607 = v1611 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1612 : string = "String::from($0)"
            let v1613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1602 v1612 
            let _run_target_args'_v1607 = v1613 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1614 : std_string_String = v1602 |> unbox<std_string_String>
            let _run_target_args'_v1607 = v1614 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1617 : std_string_String = v1602 |> unbox<std_string_String>
            let _run_target_args'_v1607 = v1617 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1620 : std_string_String = v1602 |> unbox<std_string_String>
            let _run_target_args'_v1607 = v1620 
            #endif
#else
            let v1623 : std_string_String = v1602 |> unbox<std_string_String>
            let _run_target_args'_v1607 = v1623 
            #endif
            let v1626 : std_string_String = _run_target_args'_v1607 
            let v1631 : string = $"true; leptos::prelude::ArcRwSignal::set(&$0, $1); //"
            let v1632 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1582, v1626) v1631 
            false
    // rust.func0_from / is_unit
    let v1634 : string = $"true; /*"
    let v1635 : bool = Fable.Core.RustInterop.emitRustExpr () v1634 
    let v1636 : string = $"*/ }}); //"
    let v1637 : bool = Fable.Core.RustInterop.emitRustExpr () v1636 
    let v1638 : string = $"_func0_from_v1514"
    let v1639 : Func0<unit> = Fable.Core.RustInterop.emitRustExpr () v1638 
    let v1640 : string = "true; leptos::prelude::Effect::new(move |_| { v1639() })"
    let v1641 : bool = Fable.Core.RustInterop.emitRustExpr () v1640 
    let v1642 : unit = ()
    let v1643 : string = $"true; let _func0_from_v1642 = Func0::from(move || {{ //"
    let v1644 : bool = Fable.Core.RustInterop.emitRustExpr () v1643 
    let v1645 : string = "$0.hash"
    let v1646 : leptos_prelude_Memo<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1495 v1645 
    let v1647 : string = $"leptos::prelude::Memo::get(&$0)"
    let v1648 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1646 v1647 
    let v1649 : std_string_String = method52(v1648)
    let v1650 : string = "v1649.strip_prefix('#')"
    let v1651 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr () v1650 
    let v1652 : string = "r#\"" + v51 + "\"#"
    let v1653 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1652 
    let v1654 : string = "v1651.unwrap_or(v1653)"
    let v1655 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v1654 
    let v1656 : string = "leptos_router::location::Url::try_from($0)"
    let v1657 : Result<leptos_router_Url, std_string_String> = Fable.Core.RustInterop.emitRustExpr v1655 v1656 
    let v1658 : (leptos_router_Url -> US20) = method53()
    let v1659 : (std_string_String -> US20) = method54()
    let v1660 : US20 = match v1657 with Ok x -> v1658 x | Error x -> v1659 x
    (* run_target_args'
    let v1661 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1662 : string = "format!(\"{:#?}\", $0)"
    let v1663 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1660 v1662 
    let v1664 : string = "fable_library_rust::String_::fromString($0)"
    let v1665 : string = Fable.Core.RustInterop.emitRustExpr v1663 v1664 
    let _run_target_args'_v1661 = v1665 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1666 : string = "format!(\"{:#?}\", $0)"
    let v1667 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1660 v1666 
    let v1668 : string = "fable_library_rust::String_::fromString($0)"
    let v1669 : string = Fable.Core.RustInterop.emitRustExpr v1667 v1668 
    let _run_target_args'_v1661 = v1669 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1670 : string = "format!(\"{:#?}\", $0)"
    let v1671 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1660 v1670 
    let v1672 : string = "fable_library_rust::String_::fromString($0)"
    let v1673 : string = Fable.Core.RustInterop.emitRustExpr v1671 v1672 
    let _run_target_args'_v1661 = v1673 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1674 : string = $"%A{v1660}"
    let _run_target_args'_v1661 = v1674 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1677 : string = $"%A{v1660}"
    let _run_target_args'_v1661 = v1677 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1680 : string = $"%A{v1660}"
    let _run_target_args'_v1661 = v1680 
    #endif
#else
    let v1683 : string = $"%A{v1660}"
    let _run_target_args'_v1661 = v1683 
    #endif
    let v1686 : string = _run_target_args'_v1661 
    let v1691 : string = "content.render () / effect 2 / hash_url: " + v1686 + ""
    let v1692 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v1693 : bool = Fable.Core.RustInterop.emitRustExpr v1691 v1692 
    let v1805 : bool =
        match v1660 with
        | US20_1(v1800) -> (* Error *)
            let v1801 : string = "content.render () / effect 2 / hash_url error: " + string v1800 + ""
            let v1802 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1803 : bool = Fable.Core.RustInterop.emitRustExpr v1801 v1802 
            false
        | US20_0(v1694) -> (* Ok *)
            let v1695 : string = "$0.pathname"
            let v1696 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1694 v1695 
            let v1697 : string = "fable_library_rust::String_::fromString($0)"
            let v1698 : string = Fable.Core.RustInterop.emitRustExpr v1696 v1697 
            let v1699 : string = "dice"
            let v1700 : string = "/" + v1699 + ""
            let v1701 : bool = v1698.StartsWith (v1700, false, null)
            let v1708 : US21 =
                if v1701 then
                    let v1704 : US19 = US19_0
                    let v1705 : US18 = US18_1(v1704)
                    US21_0(v1705)
                else
                    US21_1
            let v1725 : US21 =
                match v1708 with
                | US21_1 -> (* None *)
                    let v1711 : string = "$0.pathname"
                    let v1712 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1694 v1711 
                    let v1713 : string = "fable_library_rust::String_::fromString($0)"
                    let v1714 : string = Fable.Core.RustInterop.emitRustExpr v1712 v1713 
                    let v1715 : string = "lists"
                    let v1716 : string = "/" + v1715 + ""
                    let v1717 : bool = v1714.StartsWith (v1716, false, null)
                    if v1717 then
                        let v1720 : US18 = US18_2
                        US21_0(v1720)
                    else
                        US21_1
                | US21_0(v1709) -> (* Some *)
                    US21_0(v1709)
            let v1742 : US21 =
                match v1725 with
                | US21_1 -> (* None *)
                    let v1728 : string = "$0.pathname"
                    let v1729 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1694 v1728 
                    let v1730 : string = "fable_library_rust::String_::fromString($0)"
                    let v1731 : string = Fable.Core.RustInterop.emitRustExpr v1729 v1730 
                    let v1732 : string = "transactions"
                    let v1733 : string = "/" + v1732 + ""
                    let v1734 : bool = v1731.StartsWith (v1733, false, null)
                    if v1734 then
                        let v1737 : US18 = US18_3
                        US21_0(v1737)
                    else
                        US21_1
                | US21_0(v1726) -> (* Some *)
                    US21_0(v1726)
            let v1759 : US21 =
                match v1742 with
                | US21_1 -> (* None *)
                    let v1745 : string = "$0.pathname"
                    let v1746 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1694 v1745 
                    let v1747 : string = "fable_library_rust::String_::fromString($0)"
                    let v1748 : string = Fable.Core.RustInterop.emitRustExpr v1746 v1747 
                    let v1749 : string = "settings"
                    let v1750 : string = "/" + v1749 + ""
                    let v1751 : bool = v1748.StartsWith (v1750, false, null)
                    if v1751 then
                        let v1754 : US18 = US18_4
                        US21_0(v1754)
                    else
                        US21_1
                | US21_0(v1743) -> (* Some *)
                    US21_0(v1743)
            let v1764 : US18 =
                match v1759 with
                | US21_1 -> (* None *)
                    let v1761 : US19 = US19_0
                    US18_1(v1761)
                | US21_0(v1760) -> (* Some *)
                    v1760
            (* run_target_args'
            let v1765 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1766 : string = "format!(\"{:#?}\", $0)"
            let v1767 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1764 v1766 
            let v1768 : string = "fable_library_rust::String_::fromString($0)"
            let v1769 : string = Fable.Core.RustInterop.emitRustExpr v1767 v1768 
            let _run_target_args'_v1765 = v1769 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1770 : string = "format!(\"{:#?}\", $0)"
            let v1771 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1764 v1770 
            let v1772 : string = "fable_library_rust::String_::fromString($0)"
            let v1773 : string = Fable.Core.RustInterop.emitRustExpr v1771 v1772 
            let _run_target_args'_v1765 = v1773 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1774 : string = "format!(\"{:#?}\", $0)"
            let v1775 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1764 v1774 
            let v1776 : string = "fable_library_rust::String_::fromString($0)"
            let v1777 : string = Fable.Core.RustInterop.emitRustExpr v1775 v1776 
            let _run_target_args'_v1765 = v1777 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1778 : string = $"%A{v1764}"
            let _run_target_args'_v1765 = v1778 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1781 : string = $"%A{v1764}"
            let _run_target_args'_v1765 = v1781 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1784 : string = $"%A{v1764}"
            let _run_target_args'_v1765 = v1784 
            #endif
#else
            let v1787 : string = $"%A{v1764}"
            let _run_target_args'_v1765 = v1787 
            #endif
            let v1790 : string = _run_target_args'_v1765 
            let v1795 : string = "content.render () / effect 2 / new_tab: " + v1790 + ""
            let v1796 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1797 : bool = Fable.Core.RustInterop.emitRustExpr v1795 v1796 
            let v1798 : string = $"true; leptos::prelude::WriteSignal::set(&$0, $1); //"
            let v1799 : bool = Fable.Core.RustInterop.emitRustExpr struct (v1510, v1764) v1798 
            true
    // rust.func0_from / is_unit
    let v1806 : string = $"true; /*"
    let v1807 : bool = Fable.Core.RustInterop.emitRustExpr () v1806 
    let v1808 : string = $"*/ }}); //"
    let v1809 : bool = Fable.Core.RustInterop.emitRustExpr () v1808 
    let v1810 : string = $"_func0_from_v1642"
    let v1811 : Func0<unit> = Fable.Core.RustInterop.emitRustExpr () v1810 
    let v1812 : string = "true; leptos::prelude::Effect::new(move |_| { v1811() })"
    let v1813 : bool = Fable.Core.RustInterop.emitRustExpr () v1812 
    let v1814 : string = "class=\"flex flex-1 max-[100px]:[overflow-x:auto]\""
    let v1815 : string = " " + v1814 + v51 + ""
    let v1816 : string = "class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\""
    let v1817 : string = " " + v1816 + v51 + ""
    let v1818 : string = "class=\"flex flex-1 flex-col [overflow:hidden]\""
    let v1819 : string = " " + v1818 + v51 + ""
    let v1820 : string = $"leptos::prelude::ReadSignal::get(&$0)"
    let v1821 : US18 = Fable.Core.RustInterop.emitRustExpr v1509 v1820 
    let v4837 : US22 =
        match v1821 with
        | US18_1(v1822) -> (* Dice *)
            let v1823 : string = "dice_view.render (1)"
            let v1824 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1825 : bool = Fable.Core.RustInterop.emitRustExpr v1823 v1824 
            let v1826 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v1827 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v1826 
            let v1828 : string = "$0.unwrap()"
            let v1829 : Heap2 = Fable.Core.RustInterop.emitRustExpr v1827 v1828 
            let v1830 : string = "use_transactions.render (1)"
            let v1831 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1832 : bool = Fable.Core.RustInterop.emitRustExpr v1830 v1831 
            let v1833 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v1834 : (unit -> Vec<string>) = closure44(v1829)
            let v1835 : leptos_prelude_ArcMemo<Vec<string>> = Fable.Core.RustInterop.emitRustExpr v1834 v1833 
            let v1836 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v1837 : (unit -> (struct (string * US23 * string * bool * bool) [])) = closure46(v1835)
            let v1838 : leptos_prelude_ArcMemo<(struct (string * US23 * string * bool * bool) [])> = Fable.Core.RustInterop.emitRustExpr v1837 v1836 
            let v1839 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v1840 : (unit -> Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)>) = closure48(v1829, v1835)
            let v1841 : leptos_prelude_ArcMemo<Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)>> = Fable.Core.RustInterop.emitRustExpr v1840 v1839 
            let v1842 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v1843 : (unit -> Vec<struct (string * US23 * string * bool * bool)>) = closure51(v1841)
            let v1844 : leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr v1843 v1842 
            let v1845 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v1846 : (unit -> (string [])) = closure55(v1841)
            let v1847 : leptos_prelude_ArcMemo<(string [])> = Fable.Core.RustInterop.emitRustExpr v1846 v1845 
            let v1848 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = closure60()
            let v1849 : leptos_prelude_ArcMemo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = method78(v1844, v1848)
            let v1850 : string = $"%A{v1849}"
            let v1853 : string = "use_transactions.render (7) / root func0 / result: " + string v1850 + ""
            let v1854 : int64 = 200L
            let v1855 : string = method8(v1854, v1853)
            let v1856 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1857 : bool = Fable.Core.RustInterop.emitRustExpr v1855 v1856 
            let v1858 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v1859 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = closure90(v1847, v1849)
            let v1860 : leptos_prelude_ArcMemo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1859 v1858 
            let v1861 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v1862 : (unit -> Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String>) = closure107(v1860)
            let v1863 : leptos_prelude_ArcMemo<Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v1862 v1861 
            let v1864 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v1865 : (unit -> Vec<struct (string * US23 * string * bool * bool)>) = closure115(v1863)
            let v1866 : leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr v1865 v1864 
            let v1867 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = closure119()
            let v1868 : leptos_prelude_ArcMemo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = method159(v1866, v1867)
            let v1869 : string = $"%A{v1868}"
            let v1872 : string = "use_transactions.render (12) / rpc_response func0 / result: " + string v1869 + ""
            let v1873 : int64 = 200L
            let v1874 : string = method8(v1873, v1872)
            let v1875 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1876 : bool = Fable.Core.RustInterop.emitRustExpr v1874 v1875 
            let v1877 : unit = ()
            let v1878 : string = $"true; let _func1_from_v1877 = Func1::from(move |value| {{ //"
            let v1879 : bool = Fable.Core.RustInterop.emitRustExpr () v1878 
            let v1880 : string = $"value"
            let v1881 : Heap6 = Fable.Core.RustInterop.emitRustExpr () v1880 
            let v1882 : string = $"%A{v1881}"
            let v1885 : string = "dice_view.render (2) / set_max_action / value: " + string v1882 + ""
            let v1886 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v1887 : bool = Fable.Core.RustInterop.emitRustExpr v1885 v1886 
            let v1888 : string = "true; let __future_init = Box::pin(/*"
            let v1889 : bool = Fable.Core.RustInterop.emitRustExpr () v1888 
            let v1890 : string = "*/ async move { /*"
            let v1891 : bool = Fable.Core.RustInterop.emitRustExpr () v1890 
            let v1892 : string = "*/ //"
            let v1893 : bool = Fable.Core.RustInterop.emitRustExpr () v1892 
            let v1894 : string = "2.0"
            (* run_target_args'
            let v1895 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1896 : string = "&*$0"
            let v1897 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1894 v1896 
            let _run_target_args'_v1895 = v1897 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1898 : string = "&*$0"
            let v1899 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1894 v1898 
            let _run_target_args'_v1895 = v1899 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1900 : string = "&*$0"
            let v1901 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1894 v1900 
            let _run_target_args'_v1895 = v1901 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1902 : Ref<Str> = v1894 |> unbox<Ref<Str>>
            let _run_target_args'_v1895 = v1902 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1905 : Ref<Str> = v1894 |> unbox<Ref<Str>>
            let _run_target_args'_v1895 = v1905 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1908 : Ref<Str> = v1894 |> unbox<Ref<Str>>
            let _run_target_args'_v1895 = v1908 
            #endif
#else
            let v1911 : Ref<Str> = v1894 |> unbox<Ref<Str>>
            let _run_target_args'_v1895 = v1911 
            #endif
            let v1914 : Ref<Str> = _run_target_args'_v1895 
            (* run_target_args'
            let v1919 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1920 : string = "String::from($0)"
            let v1921 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1914 v1920 
            let _run_target_args'_v1919 = v1921 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1922 : string = "String::from($0)"
            let v1923 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1914 v1922 
            let _run_target_args'_v1919 = v1923 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1924 : string = "String::from($0)"
            let v1925 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1914 v1924 
            let _run_target_args'_v1919 = v1925 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1926 : std_string_String = v1914 |> unbox<std_string_String>
            let _run_target_args'_v1919 = v1926 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1929 : std_string_String = v1914 |> unbox<std_string_String>
            let _run_target_args'_v1919 = v1929 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1932 : std_string_String = v1914 |> unbox<std_string_String>
            let _run_target_args'_v1919 = v1932 
            #endif
#else
            let v1935 : std_string_String = v1914 |> unbox<std_string_String>
            let _run_target_args'_v1919 = v1935 
            #endif
            let v1938 : std_string_String = _run_target_args'_v1919 
            let v1943 : string = "dontcare"
            (* run_target_args'
            let v1944 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1945 : string = "&*$0"
            let v1946 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1943 v1945 
            let _run_target_args'_v1944 = v1946 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1947 : string = "&*$0"
            let v1948 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1943 v1947 
            let _run_target_args'_v1944 = v1948 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1949 : string = "&*$0"
            let v1950 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1943 v1949 
            let _run_target_args'_v1944 = v1950 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1951 : Ref<Str> = v1943 |> unbox<Ref<Str>>
            let _run_target_args'_v1944 = v1951 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1954 : Ref<Str> = v1943 |> unbox<Ref<Str>>
            let _run_target_args'_v1944 = v1954 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1957 : Ref<Str> = v1943 |> unbox<Ref<Str>>
            let _run_target_args'_v1944 = v1957 
            #endif
#else
            let v1960 : Ref<Str> = v1943 |> unbox<Ref<Str>>
            let _run_target_args'_v1944 = v1960 
            #endif
            let v1963 : Ref<Str> = _run_target_args'_v1944 
            (* run_target_args'
            let v1968 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1969 : string = "String::from($0)"
            let v1970 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1963 v1969 
            let _run_target_args'_v1968 = v1970 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1971 : string = "String::from($0)"
            let v1972 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1963 v1971 
            let _run_target_args'_v1968 = v1972 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1973 : string = "String::from($0)"
            let v1974 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1963 v1973 
            let _run_target_args'_v1968 = v1974 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1975 : std_string_String = v1963 |> unbox<std_string_String>
            let _run_target_args'_v1968 = v1975 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1978 : std_string_String = v1963 |> unbox<std_string_String>
            let _run_target_args'_v1968 = v1978 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1981 : std_string_String = v1963 |> unbox<std_string_String>
            let _run_target_args'_v1968 = v1981 
            #endif
#else
            let v1984 : std_string_String = v1963 |> unbox<std_string_String>
            let _run_target_args'_v1968 = v1984 
            #endif
            let v1987 : std_string_String = _run_target_args'_v1968 
            let v1992 : string = "EXPERIMENTAL_tx_status"
            (* run_target_args'
            let v1993 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1994 : string = "&*$0"
            let v1995 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1992 v1994 
            let _run_target_args'_v1993 = v1995 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1996 : string = "&*$0"
            let v1997 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1992 v1996 
            let _run_target_args'_v1993 = v1997 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1998 : string = "&*$0"
            let v1999 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1992 v1998 
            let _run_target_args'_v1993 = v1999 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2000 : Ref<Str> = v1992 |> unbox<Ref<Str>>
            let _run_target_args'_v1993 = v2000 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2003 : Ref<Str> = v1992 |> unbox<Ref<Str>>
            let _run_target_args'_v1993 = v2003 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2006 : Ref<Str> = v1992 |> unbox<Ref<Str>>
            let _run_target_args'_v1993 = v2006 
            #endif
#else
            let v2009 : Ref<Str> = v1992 |> unbox<Ref<Str>>
            let _run_target_args'_v1993 = v2009 
            #endif
            let v2012 : Ref<Str> = _run_target_args'_v1993 
            (* run_target_args'
            let v2017 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2018 : string = "String::from($0)"
            let v2019 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2012 v2018 
            let _run_target_args'_v2017 = v2019 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2020 : string = "String::from($0)"
            let v2021 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2012 v2020 
            let _run_target_args'_v2017 = v2021 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2022 : string = "String::from($0)"
            let v2023 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2012 v2022 
            let _run_target_args'_v2017 = v2023 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2024 : std_string_String = v2012 |> unbox<std_string_String>
            let _run_target_args'_v2017 = v2024 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2027 : std_string_String = v2012 |> unbox<std_string_String>
            let _run_target_args'_v2017 = v2027 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2030 : std_string_String = v2012 |> unbox<std_string_String>
            let _run_target_args'_v2017 = v2030 
            #endif
#else
            let v2033 : std_string_String = v2012 |> unbox<std_string_String>
            let _run_target_args'_v2017 = v2033 
            #endif
            let v2036 : std_string_String = _run_target_args'_v2017 
            let v2041 : string = "9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS"
            (* run_target_args'
            let v2042 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2043 : string = "&*$0"
            let v2044 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2041 v2043 
            let _run_target_args'_v2042 = v2044 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2045 : string = "&*$0"
            let v2046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2041 v2045 
            let _run_target_args'_v2042 = v2046 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2047 : string = "&*$0"
            let v2048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2041 v2047 
            let _run_target_args'_v2042 = v2048 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2049 : Ref<Str> = v2041 |> unbox<Ref<Str>>
            let _run_target_args'_v2042 = v2049 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2052 : Ref<Str> = v2041 |> unbox<Ref<Str>>
            let _run_target_args'_v2042 = v2052 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2055 : Ref<Str> = v2041 |> unbox<Ref<Str>>
            let _run_target_args'_v2042 = v2055 
            #endif
#else
            let v2058 : Ref<Str> = v2041 |> unbox<Ref<Str>>
            let _run_target_args'_v2042 = v2058 
            #endif
            let v2061 : Ref<Str> = _run_target_args'_v2042 
            (* run_target_args'
            let v2066 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2067 : string = "String::from($0)"
            let v2068 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2061 v2067 
            let _run_target_args'_v2066 = v2068 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2069 : string = "String::from($0)"
            let v2070 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2061 v2069 
            let _run_target_args'_v2066 = v2070 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2071 : string = "String::from($0)"
            let v2072 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2061 v2071 
            let _run_target_args'_v2066 = v2072 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2073 : std_string_String = v2061 |> unbox<std_string_String>
            let _run_target_args'_v2066 = v2073 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2076 : std_string_String = v2061 |> unbox<std_string_String>
            let _run_target_args'_v2066 = v2076 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2079 : std_string_String = v2061 |> unbox<std_string_String>
            let _run_target_args'_v2066 = v2079 
            #endif
#else
            let v2082 : std_string_String = v2061 |> unbox<std_string_String>
            let _run_target_args'_v2066 = v2082 
            #endif
            let v2085 : std_string_String = _run_target_args'_v2066 
            let v2090 : string = "bowen"
            (* run_target_args'
            let v2091 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2092 : string = "&*$0"
            let v2093 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2090 v2092 
            let _run_target_args'_v2091 = v2093 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2094 : string = "&*$0"
            let v2095 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2090 v2094 
            let _run_target_args'_v2091 = v2095 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2096 : string = "&*$0"
            let v2097 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2090 v2096 
            let _run_target_args'_v2091 = v2097 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2098 : Ref<Str> = v2090 |> unbox<Ref<Str>>
            let _run_target_args'_v2091 = v2098 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2101 : Ref<Str> = v2090 |> unbox<Ref<Str>>
            let _run_target_args'_v2091 = v2101 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2104 : Ref<Str> = v2090 |> unbox<Ref<Str>>
            let _run_target_args'_v2091 = v2104 
            #endif
#else
            let v2107 : Ref<Str> = v2090 |> unbox<Ref<Str>>
            let _run_target_args'_v2091 = v2107 
            #endif
            let v2110 : Ref<Str> = _run_target_args'_v2091 
            (* run_target_args'
            let v2115 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2116 : string = "String::from($0)"
            let v2117 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2110 v2116 
            let _run_target_args'_v2115 = v2117 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2118 : string = "String::from($0)"
            let v2119 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2110 v2118 
            let _run_target_args'_v2115 = v2119 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2120 : string = "String::from($0)"
            let v2121 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2110 v2120 
            let _run_target_args'_v2115 = v2121 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2122 : std_string_String = v2110 |> unbox<std_string_String>
            let _run_target_args'_v2115 = v2122 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2125 : std_string_String = v2110 |> unbox<std_string_String>
            let _run_target_args'_v2115 = v2125 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2128 : std_string_String = v2110 |> unbox<std_string_String>
            let _run_target_args'_v2115 = v2128 
            #endif
#else
            let v2131 : std_string_String = v2110 |> unbox<std_string_String>
            let _run_target_args'_v2115 = v2131 
            #endif
            let v2134 : std_string_String = _run_target_args'_v2115 
            let v2139 : (std_string_String []) = [|v2085; v2134|]
            let v2140 : string = "$0.to_vec()"
            let v2141 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2139 v2140 
            let v2142 : string = "crate::model::near::rpc::RpcInput { jsonrpc: $0, id: $1, method: $2, params: v2141 }"
            let v2143 : crate_model_near_rpc_RpcInput = Fable.Core.RustInterop.emitRustExpr struct (v1938, v1987, v2036) v2142 
            let v2144 : string = method167()
            (* run_target_args'
            let v2145 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2146 : string = "&*$0"
            let v2147 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2144 v2146 
            let _run_target_args'_v2145 = v2147 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2148 : string = "&*$0"
            let v2149 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2144 v2148 
            let _run_target_args'_v2145 = v2149 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2150 : string = "&*$0"
            let v2151 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2144 v2150 
            let _run_target_args'_v2145 = v2151 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2152 : Ref<Str> = v2144 |> unbox<Ref<Str>>
            let _run_target_args'_v2145 = v2152 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2155 : Ref<Str> = v2144 |> unbox<Ref<Str>>
            let _run_target_args'_v2145 = v2155 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2158 : Ref<Str> = v2144 |> unbox<Ref<Str>>
            let _run_target_args'_v2145 = v2158 
            #endif
#else
            let v2161 : Ref<Str> = v2144 |> unbox<Ref<Str>>
            let _run_target_args'_v2145 = v2161 
            #endif
            let v2164 : Ref<Str> = _run_target_args'_v2145 
            (* run_target_args'
            let v2169 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2170 : string = "String::from($0)"
            let v2171 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2164 v2170 
            let _run_target_args'_v2169 = v2171 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2172 : string = "String::from($0)"
            let v2173 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2164 v2172 
            let _run_target_args'_v2169 = v2173 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2174 : string = "String::from($0)"
            let v2175 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2164 v2174 
            let _run_target_args'_v2169 = v2175 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2176 : std_string_String = v2164 |> unbox<std_string_String>
            let _run_target_args'_v2169 = v2176 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2179 : std_string_String = v2164 |> unbox<std_string_String>
            let _run_target_args'_v2169 = v2179 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2182 : std_string_String = v2164 |> unbox<std_string_String>
            let _run_target_args'_v2169 = v2182 
            #endif
#else
            let v2185 : std_string_String = v2164 |> unbox<std_string_String>
            let _run_target_args'_v2169 = v2185 
            #endif
            let v2188 : std_string_String = _run_target_args'_v2169 
            let v2193 : std_string_String = method92(v2188)
            let v2194 : string = "reqwest_wasm::Client::builder().build().map_err(|err| err.to_string())?.post(v2193)"
            let v2195 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v2194 
            let v2196 : string = "reqwest_wasm::RequestBuilder::json(v2195, &v2143)"
            let v2197 : reqwest_RequestBuilder = Fable.Core.RustInterop.emitRustExpr () v2196 
            let v2198 : reqwest_RequestBuilder = method94(v2197)
            let v2199 : string = "Box::pin(reqwest_wasm::RequestBuilder::send(v2198))"
            let v2200 : std_pin_Pin<Box<Dyn<std_future_Future<Result<reqwest_Response, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v2199 
            let v2201 : string = "v2200.await"
            let v2202 : Result<reqwest_Response, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v2201 
            let v2203 : (reqwest_Error -> std_string_String) = method95()
            (* run_target_args'
            let v2204 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2205 : string = "$0.map_err(|x| $1(x))"
            let v2206 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2202, v2203) v2205 
            let _run_target_args'_v2204 = v2206 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2207 : string = "$0.map_err(|x| $1(x))"
            let v2208 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2202, v2203) v2207 
            let _run_target_args'_v2204 = v2208 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2209 : string = "$0.map_err(|x| $1(x))"
            let v2210 : Result<reqwest_Response, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2202, v2203) v2209 
            let _run_target_args'_v2204 = v2210 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2211 : Result<reqwest_Response, std_string_String> = match v2202 with Ok x -> Ok x | Error x -> Error (v2203 x)
            let _run_target_args'_v2204 = v2211 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2212 : Result<reqwest_Response, std_string_String> = match v2202 with Ok x -> Ok x | Error x -> Error (v2203 x)
            let _run_target_args'_v2204 = v2212 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2213 : Result<reqwest_Response, std_string_String> = match v2202 with Ok x -> Ok x | Error x -> Error (v2203 x)
            let _run_target_args'_v2204 = v2213 
            #endif
#else
            let v2214 : Result<reqwest_Response, std_string_String> = match v2202 with Ok x -> Ok x | Error x -> Error (v2203 x)
            let _run_target_args'_v2204 = v2214 
            #endif
            let v2215 : Result<reqwest_Response, std_string_String> = _run_target_args'_v2204 
            let v2218 : string = "$0?"
            let v2219 : reqwest_Response = Fable.Core.RustInterop.emitRustExpr v2215 v2218 
            let v2220 : string = "Box::pin(reqwest_wasm::Response::text(v2219))"
            let v2221 : std_pin_Pin<Box<Dyn<std_future_Future<Result<std_string_String, reqwest_Error>>>>> = Fable.Core.RustInterop.emitRustExpr () v2220 
            let v2222 : string = "v2221.await"
            let v2223 : Result<std_string_String, reqwest_Error> = Fable.Core.RustInterop.emitRustExpr () v2222 
            let v2224 : (reqwest_Error -> std_string_String) = method95()
            (* run_target_args'
            let v2225 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2226 : string = "$0.map_err(|x| $1(x))"
            let v2227 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2223, v2224) v2226 
            let _run_target_args'_v2225 = v2227 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2228 : string = "$0.map_err(|x| $1(x))"
            let v2229 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2223, v2224) v2228 
            let _run_target_args'_v2225 = v2229 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2230 : string = "$0.map_err(|x| $1(x))"
            let v2231 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2223, v2224) v2230 
            let _run_target_args'_v2225 = v2231 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2232 : Result<std_string_String, std_string_String> = match v2223 with Ok x -> Ok x | Error x -> Error (v2224 x)
            let _run_target_args'_v2225 = v2232 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2233 : Result<std_string_String, std_string_String> = match v2223 with Ok x -> Ok x | Error x -> Error (v2224 x)
            let _run_target_args'_v2225 = v2233 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2234 : Result<std_string_String, std_string_String> = match v2223 with Ok x -> Ok x | Error x -> Error (v2224 x)
            let _run_target_args'_v2225 = v2234 
            #endif
#else
            let v2235 : Result<std_string_String, std_string_String> = match v2223 with Ok x -> Ok x | Error x -> Error (v2224 x)
            let _run_target_args'_v2225 = v2235 
            #endif
            let v2236 : Result<std_string_String, std_string_String> = _run_target_args'_v2225 
            let v2239 : string = "$0?"
            let v2240 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2236 v2239 
            let v2241 : US14 = US14_0(v2240)
            let v2242 : Result<US14, std_string_String> = Ok v2241 
            let v2243 : string = $"%A{v2242}"
            let v2246 : string = "dice_view.render (x) / roll_action new_arc_action / result1 / result: " + string v2243 + ""
            let v2247 : int64 = 200L
            let v2248 : string = method8(v2247, v2246)
            let v2249 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v2250 : bool = Fable.Core.RustInterop.emitRustExpr v2248 v2249 
            let v2251 : (US14 -> US57) = method168()
            let v2252 : (std_string_String -> US57) = method169()
            let v2253 : US57 = match v2242 with Ok x -> v2251 x | Error x -> v2252 x
            let v2556 : US58 =
                match v2253 with
                | US57_0(v2254) -> (* Ok *)
                    match v2254 with
                    | US14_0(v2255) -> (* Some *)
                        let v2256 : string = "fable_library_rust::String_::fromString($0)"
                        let v2257 : string = Fable.Core.RustInterop.emitRustExpr v2255 v2256 
                        let v2258 : string = method41(v2257)
                        (* run_target_args'
                        let v2259 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2260 : string = "&*$0"
                        let v2261 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2258 v2260 
                        let _run_target_args'_v2259 = v2261 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2262 : string = "&*$0"
                        let v2263 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2258 v2262 
                        let _run_target_args'_v2259 = v2263 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2264 : string = "&*$0"
                        let v2265 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2258 v2264 
                        let _run_target_args'_v2259 = v2265 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2266 : Ref<Str> = v2258 |> unbox<Ref<Str>>
                        let _run_target_args'_v2259 = v2266 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2269 : Ref<Str> = v2258 |> unbox<Ref<Str>>
                        let _run_target_args'_v2259 = v2269 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2272 : Ref<Str> = v2258 |> unbox<Ref<Str>>
                        let _run_target_args'_v2259 = v2272 
                        #endif
#else
                        let v2275 : Ref<Str> = v2258 |> unbox<Ref<Str>>
                        let _run_target_args'_v2259 = v2275 
                        #endif
                        let v2278 : Ref<Str> = _run_target_args'_v2259 
                        let v2283 : string = "serde_json::from_str(&$0)"
                        let v2284 : Result<crate_model_near_rpc_RpcResponse, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr v2278 v2283 
                        let v2285 : (serde_json_Error -> std_string_String) = method42()
                        (* run_target_args'
                        let v2286 : unit = ()
                        run_target_args' *)
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2287 : string = "$0.map_err(|x| $1(x))"
                        let v2288 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2284, v2285) v2287 
                        let _run_target_args'_v2286 = v2288 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2289 : string = "$0.map_err(|x| $1(x))"
                        let v2290 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2284, v2285) v2289 
                        let _run_target_args'_v2286 = v2290 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2291 : string = "$0.map_err(|x| $1(x))"
                        let v2292 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v2284, v2285) v2291 
                        let _run_target_args'_v2286 = v2292 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2293 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v2284 with Ok x -> Ok x | Error x -> Error (v2285 x)
                        let _run_target_args'_v2286 = v2293 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2294 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v2284 with Ok x -> Ok x | Error x -> Error (v2285 x)
                        let _run_target_args'_v2286 = v2294 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2295 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v2284 with Ok x -> Ok x | Error x -> Error (v2285 x)
                        let _run_target_args'_v2286 = v2295 
                        #endif
#else
                        let v2296 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = match v2284 with Ok x -> Ok x | Error x -> Error (v2285 x)
                        let _run_target_args'_v2286 = v2296 
                        #endif
                        let v2297 : Result<crate_model_near_rpc_RpcResponse, std_string_String> = _run_target_args'_v2286 
                        let v2300 : (crate_model_near_rpc_RpcResponse -> US60) = method170()
                        let v2301 : (std_string_String -> US60) = method171()
                        let v2302 : US60 = match v2297 with Ok x -> v2300 x | Error x -> v2301 x
                        let v2540 : US61 =
                            match v2302 with
                            | US60_1(v2537) -> (* Error *)
                                US61_1(v2537)
                            | US60_0(v2303) -> (* Ok *)
                                let v2304 : string = "$0.jsonrpc"
                                let v2305 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2303 v2304 
                                let v2306 : string = "$0.result"
                                let v2307 : crate_model_near_rpc_TransactionStatus option = Fable.Core.RustInterop.emitRustExpr v2303 v2306 
                                let v2308 : (crate_model_near_rpc_TransactionStatus -> struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) []))) = method150()
                                let v2309 : struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option = v2307 |> Option.map v2308 
                                let v2492 : string = "$0.error"
                                let v2493 : crate_model_near_rpc_RpcError option = Fable.Core.RustInterop.emitRustExpr v2303 v2492 
                                let v2494 : (crate_model_near_rpc_RpcError -> struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String)) = method157()
                                let v2495 : struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option = v2493 |> Option.map v2494 
                                let v2534 : string = "$0.id"
                                let v2535 : std_string_String option = Fable.Core.RustInterop.emitRustExpr v2303 v2534 
                                US61_0(v2305, v2309, v2495, v2535)
                        match v2540 with
                        | US61_1(v2547) -> (* Error *)
                            US58_1(v2547)
                        | US61_0(v2541, v2542, v2543, v2544) -> (* Ok *)
                            let v2545 : US59 = US59_0(v2541, v2542, v2543, v2544)
                            US58_0(v2545)
                    | _ ->
                        let v2551 : US59 = US59_1
                        US58_0(v2551)
                | _ ->
                    let v2554 : US59 = US59_1
                    US58_0(v2554)
            let v2562 : Result<US59, std_string_String> =
                match v2556 with
                | US58_1(v2559) -> (* Error *)
                    let v2560 : Result<US59, std_string_String> = Error v2559 
                    v2560
                | US58_0(v2557) -> (* Ok *)
                    let v2558 : Result<US59, std_string_String> = Ok v2557 
                    v2558
            let v2563 : string = $"%A{v2562}"
            let v2566 : string = "dice_view.render (x) / roll_action new_arc_action / result2 / result: " + string v2563 + ""
            let v2567 : int64 = 200L
            let v2568 : string = method8(v2567, v2566)
            let v2569 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v2570 : bool = Fable.Core.RustInterop.emitRustExpr v2568 v2569 
            let v2571 : string = v51 + v52 
            let x = v2562 //
            let v2572 : _ = x
            let v2573 : unit = ()
            (* run_target_args'
            let v2574 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2575 : string = $"true; let _fix_closure_v2573 = $0"
            let v2576 : bool = Fable.Core.RustInterop.emitRustExpr v2572 v2575 
            let _run_target_args'_v2574 = true 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2577 : string = $"true; let _fix_closure_v2573 = $0"
            let v2578 : bool = Fable.Core.RustInterop.emitRustExpr v2572 v2577 
            let _run_target_args'_v2574 = true 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2579 : string = $"true; let _fix_closure_v2573 = $0"
            let v2580 : bool = Fable.Core.RustInterop.emitRustExpr v2572 v2579 
            let _run_target_args'_v2574 = true 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _run_target_args'_v2574 = false 
            #endif
#if FABLE_COMPILER_PYTHON
            let _run_target_args'_v2574 = false 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _run_target_args'_v2574 = false 
            #endif
#else
            let _run_target_args'_v2574 = false 
            #endif
            let v2581 : bool = _run_target_args'_v2574 
            let v2583 : string = $"true; _fix_closure_v2573 " + v2571 + "); " + v51 + " // rust.fix_closure'"
            let v2584 : bool = Fable.Core.RustInterop.emitRustExpr () v2583 
            let v2585 : string = "__future_init"
            let v2586 : _ = Fable.Core.RustInterop.emitRustExpr () v2585 
            let v2587 : string = "v2586"
            let v2588 : std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v2587 
            let func1_from_result = v2588 //
            let v2589 : _ = func1_from_result
            let v2590 : string = $"true; $0 /*"
            let v2591 : bool = Fable.Core.RustInterop.emitRustExpr v2589 v2590 
            let v2592 : string = $"*/ }}); //"
            let v2593 : bool = Fable.Core.RustInterop.emitRustExpr () v2592 
            let v2594 : string = $"_func1_from_v1877"
            let v2595 : Func0<Heap6, std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>>> = Fable.Core.RustInterop.emitRustExpr () v2594 
            let v2596 : string = "leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap6>| $0(value.clone()))"
            let v2597 : (Heap6 -> std_pin_Pin<Box<Dyn<std_future_Future<Result<US59, std_string_String>>>>>) = closure141(v2595)
            let v2598 : leptos_prelude_ArcAction<Heap6, Result<US59, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2597 v2596 
            let v2599 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v2600 : (unit -> Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>) = closure142(v2598)
            let v2601 : leptos_prelude_ArcMemo<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v2600 v2599 
            let v2602 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v2603 : (unit -> string option) = closure147(v2601)
            let v2604 : leptos_prelude_ArcMemo<string option> = Fable.Core.RustInterop.emitRustExpr v2603 v2602 
            let v2605 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v2606 : (unit -> US31) = closure152(v1829)
            let v2607 : leptos_prelude_ArcMemo<US31> = Fable.Core.RustInterop.emitRustExpr v2606 v2605 
            let v2608 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v2609 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>) = closure153(v1829)
            let v2610 : leptos_prelude_ArcMemo<Vec<(int32 * struct (leptos_prelude_ReadSignal<std_string_String> * leptos_prelude_WriteSignal<std_string_String>))>> = Fable.Core.RustInterop.emitRustExpr v2609 v2608 
            let v2611 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v2612 : (unit -> Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>) = closure158(v2610)
            let v2613 : leptos_prelude_ArcMemo<Vec<struct (int32 * leptos_prelude_ReadSignal<std_string_String>)>> = Fable.Core.RustInterop.emitRustExpr v2612 v2611 
            let v2614 : string = "vec![" + v51 + "]"
            let v2615 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2614 
            let v2616 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2617 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2615 v2616 
            let v2618 : string = "class=\"flex flex-col [position:relative]\""
            let v2619 : string = " " + v2618 + v51 + ""
            let v2620 : string = "$0"
            let v2621 : (unit -> string) = closure161()
            let v2622 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2621 v2620 
            let v2623 : string = "$0"
            let v2624 : (unit -> bool) = closure162()
            let v2625 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v2624 v2623 
            let v2626 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v2627 : string = " " + v2626 + v51 + ""
            let v2628 : string = "v2617"
            let v2629 : string = v2628 + v51 
            let v2630 : string = v2629 + v51 
            let v2631 : string = "vec![" + v2630 + "]"
            let v2632 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2631 
            let v2633 : string = "leptos::prelude::Fragment::new($0)"
            let v2634 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2632 v2633 
            let v2635 : string = "leptos::prelude::AnyView::from($0)"
            let v2636 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2634 v2635 
            let v2637 : string = "div"
            let v2638 : string = "<" + v2637 + " " + v2627 + ">move || { v2636 }</" + v2637 + ">"
            let v2639 : string = "leptos::prelude::view! { " + v2638 + " }"
            let v2640 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2639 
            let v2641 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2640 |> unbox
            let v2642 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2643 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2641 v2642 
            let v2644 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2622(())"
            let v2645 : string = "open=move || v2625(())"
            let v2646 : string = " " + v2644 + v51 + ""
            let v2647 : string = " " + v2645 + v2646 + ""
            let v2648 : string = "$0"
            let v2649 : (unit -> string) = closure163()
            let v2650 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2649 v2648 
            let v2651 : string = "$0"
            let v2652 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure164()
            let v2653 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v2652 v2651 
            let v2654 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v2653(()) + \" \" + &v2650(())"
            let v2655 : string = " " + v2654 + v51 + ""
            let v2656 : string = "class=\"flex items-center gap-2\""
            let v2657 : string = " " + v2656 + v51 + ""
            let v2658 : (unit -> string) = method187()
            let v2659 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v2660 : string = " " + v2659 + v51 + ""
            let v2661 : string = v2658 ()
            (* run_target_args'
            let v2662 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2663 : string = "&*$0"
            let v2664 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2661 v2663 
            let _run_target_args'_v2662 = v2664 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2665 : string = "&*$0"
            let v2666 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2661 v2665 
            let _run_target_args'_v2662 = v2666 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2667 : string = "&*$0"
            let v2668 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2661 v2667 
            let _run_target_args'_v2662 = v2668 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2669 : Ref<Str> = v2661 |> unbox<Ref<Str>>
            let _run_target_args'_v2662 = v2669 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2672 : Ref<Str> = v2661 |> unbox<Ref<Str>>
            let _run_target_args'_v2662 = v2672 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2675 : Ref<Str> = v2661 |> unbox<Ref<Str>>
            let _run_target_args'_v2662 = v2675 
            #endif
#else
            let v2678 : Ref<Str> = v2661 |> unbox<Ref<Str>>
            let _run_target_args'_v2662 = v2678 
            #endif
            let v2681 : Ref<Str> = _run_target_args'_v2662 
            (* run_target_args'
            let v2686 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2687 : string = "String::from($0)"
            let v2688 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2681 v2687 
            let _run_target_args'_v2686 = v2688 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2689 : string = "String::from($0)"
            let v2690 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2681 v2689 
            let _run_target_args'_v2686 = v2690 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2691 : string = "String::from($0)"
            let v2692 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2681 v2691 
            let _run_target_args'_v2686 = v2692 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2693 : std_string_String = v2681 |> unbox<std_string_String>
            let _run_target_args'_v2686 = v2693 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2696 : std_string_String = v2681 |> unbox<std_string_String>
            let _run_target_args'_v2686 = v2696 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2699 : std_string_String = v2681 |> unbox<std_string_String>
            let _run_target_args'_v2686 = v2699 
            #endif
#else
            let v2702 : std_string_String = v2681 |> unbox<std_string_String>
            let _run_target_args'_v2686 = v2702 
            #endif
            let v2705 : std_string_String = _run_target_args'_v2686 
            let v2710 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v2711 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2705 v2710 
            let v2712 : string = "v2711"
            let v2713 : string = v2712 + v51 
            let v2714 : string = v2713 + v51 
            let v2715 : string = "vec![" + v2714 + "]"
            let v2716 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2715 
            let v2717 : string = "leptos::prelude::Fragment::new($0)"
            let v2718 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2716 v2717 
            let v2719 : string = "leptos::prelude::AnyView::from($0)"
            let v2720 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2718 v2719 
            let v2721 : string = "span"
            let v2722 : string = "<" + v2721 + " " + v2660 + ">move || { v2720 }</" + v2721 + ">"
            let v2723 : string = "leptos::prelude::view! { " + v2722 + " }"
            let v2724 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2723 
            let v2725 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v2724 |> unbox
            let v2726 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2727 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2725 v2726 
            let v2728 : string = "v2727"
            let v2729 : string = v2728 + v51 
            let v2730 : string = v2729 + v51 
            let v2731 : string = "vec![" + v2730 + "]"
            let v2732 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2731 
            let v2733 : string = "leptos::prelude::Fragment::new($0)"
            let v2734 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2732 v2733 
            let v2735 : string = "leptos::prelude::AnyView::from($0)"
            let v2736 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2734 v2735 
            let v2737 : string = "<" + v2637 + " " + v2657 + ">move || { v2736 }</" + v2637 + ">"
            let v2738 : string = "leptos::prelude::view! { " + v2737 + " }"
            let v2739 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2738 
            let v2740 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2739 |> unbox
            let v2741 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2742 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2740 v2741 
            let v2743 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v2744 : string = " " + v2743 + v51 + ""
            let v2745 : string = "$0"
            let v2746 : (unit -> string) = closure166()
            let v2747 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2746 v2745 
            let v2748 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v2749 : string = "viewBox=\"0 0 20 20\""
            let v2750 : string = "fill=\"currentColor\""
            let v2751 : string = "class=move || \" \".to_owned() + &v2747(())"
            let v2752 : string = " " + v2748 + v51 + ""
            let v2753 : string = " " + v2749 + v2752 + ""
            let v2754 : string = " " + v2750 + v2753 + ""
            let v2755 : string = " " + v2751 + v2754 + ""
            let v2756 : string = "fill-rule=\"evenodd\""
            let v2757 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v2758 : string = "clip-rule=\"evenodd\""
            let v2759 : string = " " + v2756 + v51 + ""
            let v2760 : string = " " + v2757 + v2759 + ""
            let v2761 : string = " " + v2758 + v2760 + ""
            let v2762 : string = "vec![" + v51 + "]"
            let v2763 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2762 
            let v2764 : string = "leptos::prelude::Fragment::new($0)"
            let v2765 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2763 v2764 
            let v2766 : string = "leptos::prelude::AnyView::from($0)"
            let v2767 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2765 v2766 
            let v2768 : string = "path"
            let v2769 : string = "<" + v2768 + " " + v2761 + ">move || { v2767 }</" + v2768 + ">"
            let v2770 : string = "leptos::prelude::view! { " + v2769 + " }"
            let v2771 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2770 
            let v2772 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v2771 |> unbox
            let v2773 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2774 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2772 v2773 
            let v2775 : string = "v2774"
            let v2776 : string = v2775 + v51 
            let v2777 : string = v2776 + v51 
            let v2778 : string = "vec![" + v2777 + "]"
            let v2779 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2778 
            let v2780 : string = "leptos::prelude::Fragment::new($0)"
            let v2781 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2779 v2780 
            let v2782 : string = "leptos::prelude::AnyView::from($0)"
            let v2783 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2781 v2782 
            let v2784 : string = "svg"
            let v2785 : string = "<" + v2784 + " " + v2755 + ">move || { v2783 }</" + v2784 + ">"
            let v2786 : string = "leptos::prelude::view! { " + v2785 + " }"
            let v2787 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2786 
            let v2788 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v2787 |> unbox
            let v2789 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2790 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2788 v2789 
            let v2791 : string = "v2790"
            let v2792 : string = v2791 + v51 
            let v2793 : string = v2792 + v51 
            let v2794 : string = "vec![" + v2793 + "]"
            let v2795 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2794 
            let v2796 : string = "leptos::prelude::Fragment::new($0)"
            let v2797 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2795 v2796 
            let v2798 : string = "leptos::prelude::AnyView::from($0)"
            let v2799 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2797 v2798 
            let v2800 : string = "<" + v2721 + " " + v2744 + ">move || { v2799 }</" + v2721 + ">"
            let v2801 : string = "leptos::prelude::view! { " + v2800 + " }"
            let v2802 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2801 
            let v2803 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v2802 |> unbox
            let v2804 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2805 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2803 v2804 
            let v2806 : string = "v2805"
            let v2807 : string = v2806 + v51 
            let v2808 : string = v2807 + v51 
            let v2809 : string = "v2742"
            let v2810 : string = ", "
            let v2811 : string = v2809 + v2810 
            let v2812 : string = v2811 + v2808 
            let v2813 : string = "vec![" + v2812 + "]"
            let v2814 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2813 
            let v2815 : string = "leptos::prelude::Fragment::new($0)"
            let v2816 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2814 v2815 
            let v2817 : string = "leptos::prelude::AnyView::from($0)"
            let v2818 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2816 v2817 
            let v2819 : string = "summary"
            let v2820 : string = "<" + v2819 + " " + v2655 + ">move || { v2818 }</" + v2819 + ">"
            let v2821 : string = "leptos::prelude::view! { " + v2820 + " }"
            let v2822 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2821 
            let v2823 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v2822 |> unbox
            let v2824 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2825 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2823 v2824 
            let v2826 : string = "class=\"flex flex-1 flex-col\""
            let v2827 : string = " " + v2826 + v51 + ""
            let v2828 : string = "Func0::new(move || $0())"
            let v2829 : (unit -> leptos_dom_Fragment) = closure167(v1829, v2598, v2604, v2607, v2613)
            let v2830 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v2829 v2828 
            let v2831 : Func0<leptos_dom_Fragment> = method195(v2830)
            let v2832 : string = "(move || v2831())()"
            let v2833 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v2832 
            let v2834 : string = "leptos::prelude::AnyView::from($0)"
            let v2835 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2833 v2834 
            let v2836 : string = "<" + v2637 + " " + v2827 + ">move || { v2835 }</" + v2637 + ">"
            let v2837 : string = "leptos::prelude::view! { " + v2836 + " }"
            let v2838 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2837 
            let v2839 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2838 |> unbox
            let v2840 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2841 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2839 v2840 
            let v2842 : string = "v2841"
            let v2843 : string = v2842 + v51 
            let v2844 : string = v2843 + v51 
            let v2845 : string = "v2825"
            let v2846 : string = v2845 + v2810 
            let v2847 : string = v2846 + v2844 
            let v2848 : string = "vec![" + v2847 + "]"
            let v2849 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2848 
            let v2850 : string = "leptos::prelude::Fragment::new($0)"
            let v2851 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2849 v2850 
            let v2852 : string = "leptos::prelude::AnyView::from($0)"
            let v2853 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2851 v2852 
            let v2854 : string = "details"
            let v2855 : string = "<" + v2854 + " " + v2647 + ">move || { v2853 }</" + v2854 + ">"
            let v2856 : string = "leptos::prelude::view! { " + v2855 + " }"
            let v2857 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2856 
            let v2858 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v2857 |> unbox
            let v2859 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2860 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2858 v2859 
            let v2861 : string = "v2860"
            let v2862 : string = v2861 + v51 
            let v2863 : string = v2862 + v51 
            let v2864 : string = "v2643"
            let v2865 : string = v2864 + v2810 
            let v2866 : string = v2865 + v2863 
            let v2867 : string = "vec![" + v2866 + "]"
            let v2868 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2867 
            let v2869 : string = "leptos::prelude::Fragment::new($0)"
            let v2870 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2868 v2869 
            let v2871 : string = "leptos::prelude::AnyView::from($0)"
            let v2872 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2870 v2871 
            let v2873 : string = "<" + v2637 + " " + v2619 + ">move || { v2872 }</" + v2637 + ">"
            let v2874 : string = "leptos::prelude::view! { " + v2873 + " }"
            let v2875 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2874 
            let v2876 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2875 |> unbox
            let v2877 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2878 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2876 v2877 
            let v2879 : string = "vec![" + v51 + "]"
            let v2880 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2879 
            let v2881 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2882 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2880 v2881 
            let v2883 : string = "class=\"flex flex-col [position:relative]\""
            let v2884 : string = " " + v2883 + v51 + ""
            let v2885 : string = "$0"
            let v2886 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2621 v2885 
            let v2887 : string = "$0"
            let v2888 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v2624 v2887 
            let v2889 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v2890 : string = " " + v2889 + v51 + ""
            let v2891 : string = "v2882"
            let v2892 : string = v2891 + v51 
            let v2893 : string = v2892 + v51 
            let v2894 : string = "vec![" + v2893 + "]"
            let v2895 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2894 
            let v2896 : string = "leptos::prelude::Fragment::new($0)"
            let v2897 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2895 v2896 
            let v2898 : string = "leptos::prelude::AnyView::from($0)"
            let v2899 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2897 v2898 
            let v2900 : string = "<" + v2637 + " " + v2890 + ">move || { v2899 }</" + v2637 + ">"
            let v2901 : string = "leptos::prelude::view! { " + v2900 + " }"
            let v2902 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2901 
            let v2903 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v2902 |> unbox
            let v2904 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2905 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2903 v2904 
            let v2906 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2886(())"
            let v2907 : string = "open=move || v2888(())"
            let v2908 : string = " " + v2906 + v51 + ""
            let v2909 : string = " " + v2907 + v2908 + ""
            let v2910 : string = "$0"
            let v2911 : (unit -> string) = closure183()
            let v2912 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2911 v2910 
            let v2913 : string = "$0"
            let v2914 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure184()
            let v2915 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v2914 v2913 
            let v2916 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v2915(()) + \" \" + &v2912(())"
            let v2917 : string = " " + v2916 + v51 + ""
            let v2918 : string = "class=\"flex items-center gap-2\""
            let v2919 : string = " " + v2918 + v51 + ""
            let v2920 : (unit -> string) = method198()
            let v2921 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v2922 : string = " " + v2921 + v51 + ""
            let v2923 : string = v2920 ()
            (* run_target_args'
            let v2924 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2925 : string = "&*$0"
            let v2926 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2923 v2925 
            let _run_target_args'_v2924 = v2926 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2927 : string = "&*$0"
            let v2928 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2923 v2927 
            let _run_target_args'_v2924 = v2928 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2929 : string = "&*$0"
            let v2930 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2923 v2929 
            let _run_target_args'_v2924 = v2930 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2931 : Ref<Str> = v2923 |> unbox<Ref<Str>>
            let _run_target_args'_v2924 = v2931 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2934 : Ref<Str> = v2923 |> unbox<Ref<Str>>
            let _run_target_args'_v2924 = v2934 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2937 : Ref<Str> = v2923 |> unbox<Ref<Str>>
            let _run_target_args'_v2924 = v2937 
            #endif
#else
            let v2940 : Ref<Str> = v2923 |> unbox<Ref<Str>>
            let _run_target_args'_v2924 = v2940 
            #endif
            let v2943 : Ref<Str> = _run_target_args'_v2924 
            (* run_target_args'
            let v2948 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2949 : string = "String::from($0)"
            let v2950 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2943 v2949 
            let _run_target_args'_v2948 = v2950 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2951 : string = "String::from($0)"
            let v2952 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2943 v2951 
            let _run_target_args'_v2948 = v2952 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2953 : string = "String::from($0)"
            let v2954 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2943 v2953 
            let _run_target_args'_v2948 = v2954 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2955 : std_string_String = v2943 |> unbox<std_string_String>
            let _run_target_args'_v2948 = v2955 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2958 : std_string_String = v2943 |> unbox<std_string_String>
            let _run_target_args'_v2948 = v2958 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2961 : std_string_String = v2943 |> unbox<std_string_String>
            let _run_target_args'_v2948 = v2961 
            #endif
#else
            let v2964 : std_string_String = v2943 |> unbox<std_string_String>
            let _run_target_args'_v2948 = v2964 
            #endif
            let v2967 : std_string_String = _run_target_args'_v2948 
            let v2972 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v2973 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2967 v2972 
            let v2974 : string = "v2973"
            let v2975 : string = v2974 + v51 
            let v2976 : string = v2975 + v51 
            let v2977 : string = "vec![" + v2976 + "]"
            let v2978 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2977 
            let v2979 : string = "leptos::prelude::Fragment::new($0)"
            let v2980 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2978 v2979 
            let v2981 : string = "leptos::prelude::AnyView::from($0)"
            let v2982 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2980 v2981 
            let v2983 : string = "<" + v2721 + " " + v2922 + ">move || { v2982 }</" + v2721 + ">"
            let v2984 : string = "leptos::prelude::view! { " + v2983 + " }"
            let v2985 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2984 
            let v2986 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v2985 |> unbox
            let v2987 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v2988 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2986 v2987 
            let v2989 : string = "v2988"
            let v2990 : string = v2989 + v51 
            let v2991 : string = v2990 + v51 
            let v2992 : string = "vec![" + v2991 + "]"
            let v2993 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v2992 
            let v2994 : string = "leptos::prelude::Fragment::new($0)"
            let v2995 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2993 v2994 
            let v2996 : string = "leptos::prelude::AnyView::from($0)"
            let v2997 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v2995 v2996 
            let v2998 : string = "<" + v2637 + " " + v2919 + ">move || { v2997 }</" + v2637 + ">"
            let v2999 : string = "leptos::prelude::view! { " + v2998 + " }"
            let v3000 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v2999 
            let v3001 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3000 |> unbox
            let v3002 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3003 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3001 v3002 
            let v3004 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v3005 : string = " " + v3004 + v51 + ""
            let v3006 : string = "$0"
            let v3007 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v2746 v3006 
            let v3008 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v3009 : string = "viewBox=\"0 0 20 20\""
            let v3010 : string = "fill=\"currentColor\""
            let v3011 : string = "class=move || \" \".to_owned() + &v3007(())"
            let v3012 : string = " " + v3008 + v51 + ""
            let v3013 : string = " " + v3009 + v3012 + ""
            let v3014 : string = " " + v3010 + v3013 + ""
            let v3015 : string = " " + v3011 + v3014 + ""
            let v3016 : string = "fill-rule=\"evenodd\""
            let v3017 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v3018 : string = "clip-rule=\"evenodd\""
            let v3019 : string = " " + v3016 + v51 + ""
            let v3020 : string = " " + v3017 + v3019 + ""
            let v3021 : string = " " + v3018 + v3020 + ""
            let v3022 : string = "vec![" + v51 + "]"
            let v3023 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3022 
            let v3024 : string = "leptos::prelude::Fragment::new($0)"
            let v3025 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3023 v3024 
            let v3026 : string = "leptos::prelude::AnyView::from($0)"
            let v3027 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3025 v3026 
            let v3028 : string = "<" + v2768 + " " + v3021 + ">move || { v3027 }</" + v2768 + ">"
            let v3029 : string = "leptos::prelude::view! { " + v3028 + " }"
            let v3030 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3029 
            let v3031 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v3030 |> unbox
            let v3032 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3033 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3031 v3032 
            let v3034 : string = "v3033"
            let v3035 : string = v3034 + v51 
            let v3036 : string = v3035 + v51 
            let v3037 : string = "vec![" + v3036 + "]"
            let v3038 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3037 
            let v3039 : string = "leptos::prelude::Fragment::new($0)"
            let v3040 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3038 v3039 
            let v3041 : string = "leptos::prelude::AnyView::from($0)"
            let v3042 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3040 v3041 
            let v3043 : string = "<" + v2784 + " " + v3015 + ">move || { v3042 }</" + v2784 + ">"
            let v3044 : string = "leptos::prelude::view! { " + v3043 + " }"
            let v3045 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3044 
            let v3046 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3045 |> unbox
            let v3047 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3048 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3046 v3047 
            let v3049 : string = "v3048"
            let v3050 : string = v3049 + v51 
            let v3051 : string = v3050 + v51 
            let v3052 : string = "vec![" + v3051 + "]"
            let v3053 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3052 
            let v3054 : string = "leptos::prelude::Fragment::new($0)"
            let v3055 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3053 v3054 
            let v3056 : string = "leptos::prelude::AnyView::from($0)"
            let v3057 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3055 v3056 
            let v3058 : string = "<" + v2721 + " " + v3005 + ">move || { v3057 }</" + v2721 + ">"
            let v3059 : string = "leptos::prelude::view! { " + v3058 + " }"
            let v3060 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3059 
            let v3061 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v3060 |> unbox
            let v3062 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3063 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3061 v3062 
            let v3064 : string = "v3063"
            let v3065 : string = v3064 + v51 
            let v3066 : string = v3065 + v51 
            let v3067 : string = "v3003"
            let v3068 : string = v3067 + v2810 
            let v3069 : string = v3068 + v3066 
            let v3070 : string = "vec![" + v3069 + "]"
            let v3071 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3070 
            let v3072 : string = "leptos::prelude::Fragment::new($0)"
            let v3073 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3071 v3072 
            let v3074 : string = "leptos::prelude::AnyView::from($0)"
            let v3075 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3073 v3074 
            let v3076 : string = "<" + v2819 + " " + v2917 + ">move || { v3075 }</" + v2819 + ">"
            let v3077 : string = "leptos::prelude::view! { " + v3076 + " }"
            let v3078 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3077 
            let v3079 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v3078 |> unbox
            let v3080 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3081 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3079 v3080 
            let v3082 : string = "class=\"flex flex-1 flex-col\""
            let v3083 : string = " " + v3082 + v51 + ""
            let v3084 : string = "Func0::new(move || $0())"
            let v3085 : (unit -> leptos_dom_Fragment) = closure186(v1868, v1860, v1841)
            let v3086 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v3085 v3084 
            let v3087 : Func0<leptos_dom_Fragment> = method195(v3086)
            let v3088 : string = "(move || v3087())()"
            let v3089 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v3088 
            let v3090 : string = "leptos::prelude::AnyView::from($0)"
            let v3091 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3089 v3090 
            let v3092 : string = "<" + v2637 + " " + v3083 + ">move || { v3091 }</" + v2637 + ">"
            let v3093 : string = "leptos::prelude::view! { " + v3092 + " }"
            let v3094 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3093 
            let v3095 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3094 |> unbox
            let v3096 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3097 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3095 v3096 
            let v3098 : string = "v3097"
            let v3099 : string = v3098 + v51 
            let v3100 : string = v3099 + v51 
            let v3101 : string = "v3081"
            let v3102 : string = v3101 + v2810 
            let v3103 : string = v3102 + v3100 
            let v3104 : string = "vec![" + v3103 + "]"
            let v3105 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3104 
            let v3106 : string = "leptos::prelude::Fragment::new($0)"
            let v3107 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3105 v3106 
            let v3108 : string = "leptos::prelude::AnyView::from($0)"
            let v3109 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3107 v3108 
            let v3110 : string = "<" + v2854 + " " + v2909 + ">move || { v3109 }</" + v2854 + ">"
            let v3111 : string = "leptos::prelude::view! { " + v3110 + " }"
            let v3112 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3111 
            let v3113 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v3112 |> unbox
            let v3114 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3115 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3113 v3114 
            let v3116 : string = "v3115"
            let v3117 : string = v3116 + v51 
            let v3118 : string = v3117 + v51 
            let v3119 : string = "v2905"
            let v3120 : string = v3119 + v2810 
            let v3121 : string = v3120 + v3118 
            let v3122 : string = "vec![" + v3121 + "]"
            let v3123 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3122 
            let v3124 : string = "leptos::prelude::Fragment::new($0)"
            let v3125 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3123 v3124 
            let v3126 : string = "leptos::prelude::AnyView::from($0)"
            let v3127 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3125 v3126 
            let v3128 : string = "<" + v2637 + " " + v2884 + ">move || { v3127 }</" + v2637 + ">"
            let v3129 : string = "leptos::prelude::view! { " + v3128 + " }"
            let v3130 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3129 
            let v3131 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3130 |> unbox
            let v3132 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3133 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3131 v3132 
            let v3134 : string = "v3133"
            let v3135 : string = v3134 + v51 
            let v3136 : string = v3135 + v51 
            let v3137 : string = "v2878"
            let v3138 : string = v3137 + v2810 
            let v3139 : string = v3138 + v3136 
            let v3140 : string = "vec![" + v3139 + "]"
            let v3141 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3140 
            let v3142 : string = "leptos::prelude::Fragment::new($0)"
            let v3143 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3141 v3142 
            US22_0(v3143)
        | US18_2 -> (* Lists *)
            let v3145 : string = "lists_view.render ()"
            let v3146 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v3147 : bool = Fable.Core.RustInterop.emitRustExpr v3145 v3146 
            let v3148 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v3149 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v3148 
            let v3150 : string = "$0.unwrap()"
            let v3151 : Heap2 = Fable.Core.RustInterop.emitRustExpr v3149 v3150 
            let v3152 : string = "???"
            (* run_target_args'
            let v3153 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3154 : string = "&*$0"
            let v3155 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3152 v3154 
            let _run_target_args'_v3153 = v3155 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3156 : string = "&*$0"
            let v3157 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3152 v3156 
            let _run_target_args'_v3153 = v3157 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3158 : string = "&*$0"
            let v3159 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3152 v3158 
            let _run_target_args'_v3153 = v3159 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3160 : Ref<Str> = v3152 |> unbox<Ref<Str>>
            let _run_target_args'_v3153 = v3160 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3163 : Ref<Str> = v3152 |> unbox<Ref<Str>>
            let _run_target_args'_v3153 = v3163 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3166 : Ref<Str> = v3152 |> unbox<Ref<Str>>
            let _run_target_args'_v3153 = v3166 
            #endif
#else
            let v3169 : Ref<Str> = v3152 |> unbox<Ref<Str>>
            let _run_target_args'_v3153 = v3169 
            #endif
            let v3172 : Ref<Str> = _run_target_args'_v3153 
            (* run_target_args'
            let v3177 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3178 : string = "String::from($0)"
            let v3179 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3172 v3178 
            let _run_target_args'_v3177 = v3179 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3180 : string = "String::from($0)"
            let v3181 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3172 v3180 
            let _run_target_args'_v3177 = v3181 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3182 : string = "String::from($0)"
            let v3183 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3172 v3182 
            let _run_target_args'_v3177 = v3183 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3184 : std_string_String = v3172 |> unbox<std_string_String>
            let _run_target_args'_v3177 = v3184 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3187 : std_string_String = v3172 |> unbox<std_string_String>
            let _run_target_args'_v3177 = v3187 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3190 : std_string_String = v3172 |> unbox<std_string_String>
            let _run_target_args'_v3177 = v3190 
            #endif
#else
            let v3193 : std_string_String = v3172 |> unbox<std_string_String>
            let _run_target_args'_v3177 = v3193 
            #endif
            let v3196 : std_string_String = _run_target_args'_v3177 
            let v3201 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v3202 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3196 v3201 
            let v3203 : string = "v3202"
            let v3204 : string = v3203 + v51 
            let v3205 : string = v3204 + v51 
            let v3206 : string = "vec![" + v3205 + "]"
            let v3207 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3206 
            let v3208 : string = "leptos::prelude::Fragment::new($0)"
            let v3209 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3207 v3208 
            US22_0(v3209)
        | US18_4 -> (* Settings *)
            let v3908 : string = "settings_view.render ()"
            let v3909 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v3910 : bool = Fable.Core.RustInterop.emitRustExpr v3908 v3909 
            let v3911 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v3912 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v3911 
            let v3913 : string = "$0.unwrap()"
            let v3914 : Heap2 = Fable.Core.RustInterop.emitRustExpr v3912 v3913 
            let v3915 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3916 : (unit -> Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>) = closure192(v3914)
            let v3917 : leptos_prelude_ArcMemo<Vec<(int32 * struct (leptos_prelude_ReadSignal<(bool * std_string_String)> * leptos_prelude_WriteSignal<(bool * std_string_String)>))>> = Fable.Core.RustInterop.emitRustExpr v3916 v3915 
            let v3918 : string = $"leptos::prelude::signal($0)"
            let struct (v3919 : leptos_prelude_ReadSignal<int32>, v3920 : leptos_prelude_WriteSignal<int32>) = Fable.Core.RustInterop.emitRustExpr 0 v3918 
            let v3921 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3922 : (unit -> Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>) = closure195(v3917, v3919)
            let v3923 : leptos_prelude_ArcMemo<Vec<struct (int32 * int32 * leptos_prelude_ReadSignal<(bool * std_string_String)>)>> = Fable.Core.RustInterop.emitRustExpr v3922 v3921 
            let v3924 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3925 : (unit -> int32) = closure198(v3923)
            let v3926 : leptos_prelude_ArcMemo<int32> = Fable.Core.RustInterop.emitRustExpr v3925 v3924 
            let v3927 : unit = ()
            let v3928 : string = $"true; let _func0_from_v3927 = Func0::from(move || {{ //"
            let v3929 : bool = Fable.Core.RustInterop.emitRustExpr () v3928 
            let v3930 : leptos_prelude_ArcRwSignal<Heap1> = v3914.l0
            let v3931 : string = "Box::pin($0)"
            let v3932 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v3930 v3931 
            let v3933 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
            let v3934 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3932 v3933 
            let v3935 : leptos_prelude_ArcRwSignal<Heap0> = v3934.l3
            let v3936 : string = $"true; leptos::prelude::ArcRwSignal::update(&$0, |x: &mut /*"
            let v3937 : bool = Fable.Core.RustInterop.emitRustExpr v3935 v3936 
            let v3938 : TypeEmit<Heap0> = null |> unbox<TypeEmit<Heap0>>
            let v3941 : string = "*/ | { *x = $0(x.clone()) }); //"
            let v3942 : (Heap0 -> Heap0) = closure199(v3917)
            let v3943 : bool = Fable.Core.RustInterop.emitRustExpr v3942 v3941 
            let v3944 : string = $"true; leptos::prelude::WriteSignal::update(&$0, |x: &mut /*"
            let v3945 : bool = Fable.Core.RustInterop.emitRustExpr v3920 v3944 
            let v3946 : TypeEmit<int32> = null |> unbox<TypeEmit<int32>>
            let v3949 : string = "*/ | { *x = $0(x.clone()) }); //"
            let v3950 : (int32 -> int32) = closure201()
            let v3951 : bool = Fable.Core.RustInterop.emitRustExpr v3950 v3949 
            // rust.func0_from / is_unit
            let v3952 : string = $"true; /*"
            let v3953 : bool = Fable.Core.RustInterop.emitRustExpr () v3952 
            let v3954 : string = $"*/ }}); //"
            let v3955 : bool = Fable.Core.RustInterop.emitRustExpr () v3954 
            let v3956 : string = $"_func0_from_v3927"
            let v3957 : Func0<unit> = Fable.Core.RustInterop.emitRustExpr () v3956 
            let v3958 : string = "$0"
            let v3959 : (unit -> string) = closure202()
            let v3960 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3959 v3958 
            let v3961 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v3962 : string = "fill=\"none\""
            let v3963 : string = "viewBox=\"0 0 24 24\""
            let v3964 : string = "stroke-width=\"1.5\""
            let v3965 : string = "stroke=\"currentColor\""
            let v3966 : string = "class=move || \" \".to_owned() + &v3960(())"
            let v3967 : string = " " + v3961 + v51 + ""
            let v3968 : string = " " + v3962 + v3967 + ""
            let v3969 : string = " " + v3963 + v3968 + ""
            let v3970 : string = " " + v3964 + v3969 + ""
            let v3971 : string = " " + v3965 + v3970 + ""
            let v3972 : string = " " + v3966 + v3971 + ""
            let v3973 : string = "stroke-linecap=\"round\""
            let v3974 : string = "stroke-linejoin=\"round\""
            let v3975 : string = "d=\"M12 6v12m6-6H6\""
            let v3976 : string = " " + v3973 + v51 + ""
            let v3977 : string = " " + v3974 + v3976 + ""
            let v3978 : string = " " + v3975 + v3977 + ""
            let v3979 : string = "vec![" + v51 + "]"
            let v3980 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3979 
            let v3981 : string = "leptos::prelude::Fragment::new($0)"
            let v3982 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3980 v3981 
            let v3983 : string = "leptos::prelude::AnyView::from($0)"
            let v3984 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3982 v3983 
            let v3985 : string = "path"
            let v3986 : string = "<" + v3985 + " " + v3978 + ">move || { v3984 }</" + v3985 + ">"
            let v3987 : string = "leptos::prelude::view! { " + v3986 + " }"
            let v3988 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3987 
            let v3989 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v3988 |> unbox
            let v3990 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3991 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3989 v3990 
            let v3992 : string = "v3991"
            let v3993 : string = v3992 + v51 
            let v3994 : string = v3993 + v51 
            let v3995 : string = "vec![" + v3994 + "]"
            let v3996 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3995 
            let v3997 : string = "leptos::prelude::Fragment::new($0)"
            let v3998 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3996 v3997 
            let v3999 : string = "leptos::prelude::AnyView::from($0)"
            let v4000 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3998 v3999 
            let v4001 : string = "svg"
            let v4002 : string = "<" + v4001 + " " + v3972 + ">move || { v4000 }</" + v4001 + ">"
            let v4003 : string = "leptos::prelude::view! { " + v4002 + " }"
            let v4004 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4003 
            let v4005 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v4004 |> unbox
            let v4006 : string = "on:click=move |_| v3957()"
            let v4007 : string = "aria-label=\"Add\""
            let v4008 : string = "$0"
            let v4009 : (unit -> std_string_String) = closure203()
            let v4010 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v4009 v4008 
            let v4011 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v4010(())"
            let v4012 : string = " " + v4011 + v51 + ""
            let v4013 : string = " " + v4006 + v4012 + ""
            let v4014 : string = " " + v4007 + v4013 + ""
            let v4015 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4016 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4005 v4015 
            let v4017 : string = "v4016"
            let v4018 : string = v4017 + v51 
            let v4019 : string = v4018 + v51 
            let v4020 : string = "vec![" + v4019 + "]"
            let v4021 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4020 
            let v4022 : string = "leptos::prelude::Fragment::new($0)"
            let v4023 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4021 v4022 
            let v4024 : string = "leptos::prelude::AnyView::from($0)"
            let v4025 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4023 v4024 
            let v4026 : string = "button"
            let v4027 : string = "<" + v4026 + " " + v4014 + ">move || { v4025 }</" + v4026 + ">"
            let v4028 : string = "leptos::prelude::view! { " + v4027 + " }"
            let v4029 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4028 
            let v4030 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v4029 |> unbox
            let v4031 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4032 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4030 v4031 
            let v4033 : string = "vec![" + v51 + "]"
            let v4034 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4033 
            let v4035 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4036 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4034 v4035 
            let v4037 : string = "class=\"flex flex-col [position:relative]\""
            let v4038 : string = " " + v4037 + v51 + ""
            let v4039 : string = "$0"
            let v4040 : (unit -> string) = closure161()
            let v4041 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4040 v4039 
            let v4042 : string = "$0"
            let v4043 : (unit -> bool) = closure162()
            let v4044 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v4043 v4042 
            let v4045 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v4046 : string = " " + v4045 + v51 + ""
            let v4047 : string = "v4032"
            let v4048 : string = v4047 + v51 
            let v4049 : string = v4048 + v51 
            let v4050 : string = "vec![" + v4049 + "]"
            let v4051 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4050 
            let v4052 : string = "leptos::prelude::Fragment::new($0)"
            let v4053 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4051 v4052 
            let v4054 : string = "leptos::prelude::AnyView::from($0)"
            let v4055 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4053 v4054 
            let v4056 : string = "div"
            let v4057 : string = "<" + v4056 + " " + v4046 + ">move || { v4055 }</" + v4056 + ">"
            let v4058 : string = "leptos::prelude::view! { " + v4057 + " }"
            let v4059 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4058 
            let v4060 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4059 |> unbox
            let v4061 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4062 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4060 v4061 
            let v4063 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4041(())"
            let v4064 : string = "open=move || v4044(())"
            let v4065 : string = " " + v4063 + v51 + ""
            let v4066 : string = " " + v4064 + v4065 + ""
            let v4067 : string = "$0"
            let v4068 : (unit -> string) = closure204()
            let v4069 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4068 v4067 
            let v4070 : string = "$0"
            let v4071 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure205(v4032)
            let v4072 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v4071 v4070 
            let v4073 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4072(()) + \" \" + &v4069(())"
            let v4074 : string = " " + v4073 + v51 + ""
            let v4075 : string = "class=\"flex items-center gap-2\""
            let v4076 : string = " " + v4075 + v51 + ""
            let v4077 : (unit -> string) = method214(v4032)
            let v4078 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v4079 : string = " " + v4078 + v51 + ""
            let v4080 : string = v4077 ()
            (* run_target_args'
            let v4081 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4082 : string = "&*$0"
            let v4083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4080 v4082 
            let _run_target_args'_v4081 = v4083 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4084 : string = "&*$0"
            let v4085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4080 v4084 
            let _run_target_args'_v4081 = v4085 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4086 : string = "&*$0"
            let v4087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4080 v4086 
            let _run_target_args'_v4081 = v4087 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4088 : Ref<Str> = v4080 |> unbox<Ref<Str>>
            let _run_target_args'_v4081 = v4088 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4091 : Ref<Str> = v4080 |> unbox<Ref<Str>>
            let _run_target_args'_v4081 = v4091 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4094 : Ref<Str> = v4080 |> unbox<Ref<Str>>
            let _run_target_args'_v4081 = v4094 
            #endif
#else
            let v4097 : Ref<Str> = v4080 |> unbox<Ref<Str>>
            let _run_target_args'_v4081 = v4097 
            #endif
            let v4100 : Ref<Str> = _run_target_args'_v4081 
            (* run_target_args'
            let v4105 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4106 : string = "String::from($0)"
            let v4107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4100 v4106 
            let _run_target_args'_v4105 = v4107 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4108 : string = "String::from($0)"
            let v4109 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4100 v4108 
            let _run_target_args'_v4105 = v4109 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4110 : string = "String::from($0)"
            let v4111 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4100 v4110 
            let _run_target_args'_v4105 = v4111 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4112 : std_string_String = v4100 |> unbox<std_string_String>
            let _run_target_args'_v4105 = v4112 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4115 : std_string_String = v4100 |> unbox<std_string_String>
            let _run_target_args'_v4105 = v4115 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4118 : std_string_String = v4100 |> unbox<std_string_String>
            let _run_target_args'_v4105 = v4118 
            #endif
#else
            let v4121 : std_string_String = v4100 |> unbox<std_string_String>
            let _run_target_args'_v4105 = v4121 
            #endif
            let v4124 : std_string_String = _run_target_args'_v4105 
            let v4129 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v4130 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4124 v4129 
            let v4131 : string = "v4130"
            let v4132 : string = v4131 + v51 
            let v4133 : string = v4132 + v51 
            let v4134 : string = "vec![" + v4133 + "]"
            let v4135 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4134 
            let v4136 : string = "leptos::prelude::Fragment::new($0)"
            let v4137 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4135 v4136 
            let v4138 : string = "leptos::prelude::AnyView::from($0)"
            let v4139 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4137 v4138 
            let v4140 : string = "span"
            let v4141 : string = "<" + v4140 + " " + v4079 + ">move || { v4139 }</" + v4140 + ">"
            let v4142 : string = "leptos::prelude::view! { " + v4141 + " }"
            let v4143 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4142 
            let v4144 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v4143 |> unbox
            let v4145 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4146 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4144 v4145 
            let v4147 : string = "v4146"
            let v4148 : string = v4147 + v51 
            let v4149 : string = v4148 + v51 
            let v4150 : string = "vec![" + v4149 + "]"
            let v4151 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4150 
            let v4152 : string = "leptos::prelude::Fragment::new($0)"
            let v4153 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4151 v4152 
            let v4154 : string = "leptos::prelude::AnyView::from($0)"
            let v4155 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4153 v4154 
            let v4156 : string = "<" + v4056 + " " + v4076 + ">move || { v4155 }</" + v4056 + ">"
            let v4157 : string = "leptos::prelude::view! { " + v4156 + " }"
            let v4158 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4157 
            let v4159 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4158 |> unbox
            let v4160 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4161 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4159 v4160 
            let v4162 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v4163 : string = " " + v4162 + v51 + ""
            let v4164 : string = "$0"
            let v4165 : (unit -> string) = closure166()
            let v4166 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4165 v4164 
            let v4167 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v4168 : string = "viewBox=\"0 0 20 20\""
            let v4169 : string = "fill=\"currentColor\""
            let v4170 : string = "class=move || \" \".to_owned() + &v4166(())"
            let v4171 : string = " " + v4167 + v51 + ""
            let v4172 : string = " " + v4168 + v4171 + ""
            let v4173 : string = " " + v4169 + v4172 + ""
            let v4174 : string = " " + v4170 + v4173 + ""
            let v4175 : string = "fill-rule=\"evenodd\""
            let v4176 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v4177 : string = "clip-rule=\"evenodd\""
            let v4178 : string = " " + v4175 + v51 + ""
            let v4179 : string = " " + v4176 + v4178 + ""
            let v4180 : string = " " + v4177 + v4179 + ""
            let v4181 : string = "vec![" + v51 + "]"
            let v4182 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4181 
            let v4183 : string = "leptos::prelude::Fragment::new($0)"
            let v4184 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4182 v4183 
            let v4185 : string = "leptos::prelude::AnyView::from($0)"
            let v4186 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4184 v4185 
            let v4187 : string = "<" + v3985 + " " + v4180 + ">move || { v4186 }</" + v3985 + ">"
            let v4188 : string = "leptos::prelude::view! { " + v4187 + " }"
            let v4189 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4188 
            let v4190 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v4189 |> unbox
            let v4191 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4192 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4190 v4191 
            let v4193 : string = "v4192"
            let v4194 : string = v4193 + v51 
            let v4195 : string = v4194 + v51 
            let v4196 : string = "vec![" + v4195 + "]"
            let v4197 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4196 
            let v4198 : string = "leptos::prelude::Fragment::new($0)"
            let v4199 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4197 v4198 
            let v4200 : string = "leptos::prelude::AnyView::from($0)"
            let v4201 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4199 v4200 
            let v4202 : string = "<" + v4001 + " " + v4174 + ">move || { v4201 }</" + v4001 + ">"
            let v4203 : string = "leptos::prelude::view! { " + v4202 + " }"
            let v4204 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4203 
            let v4205 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v4204 |> unbox
            let v4206 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4207 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4205 v4206 
            let v4208 : string = "v4207"
            let v4209 : string = v4208 + v51 
            let v4210 : string = v4209 + v51 
            let v4211 : string = "vec![" + v4210 + "]"
            let v4212 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4211 
            let v4213 : string = "leptos::prelude::Fragment::new($0)"
            let v4214 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4212 v4213 
            let v4215 : string = "leptos::prelude::AnyView::from($0)"
            let v4216 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4214 v4215 
            let v4217 : string = "<" + v4140 + " " + v4163 + ">move || { v4216 }</" + v4140 + ">"
            let v4218 : string = "leptos::prelude::view! { " + v4217 + " }"
            let v4219 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4218 
            let v4220 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v4219 |> unbox
            let v4221 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4222 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4220 v4221 
            let v4223 : string = "v4222"
            let v4224 : string = v4223 + v51 
            let v4225 : string = v4224 + v51 
            let v4226 : string = "v4161"
            let v4227 : string = ", "
            let v4228 : string = v4226 + v4227 
            let v4229 : string = v4228 + v4225 
            let v4230 : string = "vec![" + v4229 + "]"
            let v4231 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4230 
            let v4232 : string = "leptos::prelude::Fragment::new($0)"
            let v4233 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4231 v4232 
            let v4234 : string = "leptos::prelude::AnyView::from($0)"
            let v4235 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4233 v4234 
            let v4236 : string = "summary"
            let v4237 : string = "<" + v4236 + " " + v4074 + ">move || { v4235 }</" + v4236 + ">"
            let v4238 : string = "leptos::prelude::view! { " + v4237 + " }"
            let v4239 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4238 
            let v4240 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v4239 |> unbox
            let v4241 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4242 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4240 v4241 
            let v4243 : string = "class=\"flex flex-1 flex-col\""
            let v4244 : string = " " + v4243 + v51 + ""
            let v4245 : string = "Func0::new(move || $0())"
            let v4246 : (unit -> leptos_dom_Fragment) = closure207(v3914, v3923, v3926, v3917, v3920)
            let v4247 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4246 v4245 
            let v4248 : Func0<leptos_dom_Fragment> = method195(v4247)
            let v4249 : string = "(move || v4248())()"
            let v4250 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v4249 
            let v4251 : string = "leptos::prelude::AnyView::from($0)"
            let v4252 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4250 v4251 
            let v4253 : string = "<" + v4056 + " " + v4244 + ">move || { v4252 }</" + v4056 + ">"
            let v4254 : string = "leptos::prelude::view! { " + v4253 + " }"
            let v4255 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4254 
            let v4256 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4255 |> unbox
            let v4257 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4258 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4256 v4257 
            let v4259 : string = "v4258"
            let v4260 : string = v4259 + v51 
            let v4261 : string = v4260 + v51 
            let v4262 : string = "v4242"
            let v4263 : string = v4262 + v4227 
            let v4264 : string = v4263 + v4261 
            let v4265 : string = "vec![" + v4264 + "]"
            let v4266 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4265 
            let v4267 : string = "leptos::prelude::Fragment::new($0)"
            let v4268 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4266 v4267 
            let v4269 : string = "leptos::prelude::AnyView::from($0)"
            let v4270 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4268 v4269 
            let v4271 : string = "details"
            let v4272 : string = "<" + v4271 + " " + v4066 + ">move || { v4270 }</" + v4271 + ">"
            let v4273 : string = "leptos::prelude::view! { " + v4272 + " }"
            let v4274 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4273 
            let v4275 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v4274 |> unbox
            let v4276 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4277 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4275 v4276 
            let v4278 : string = "v4277"
            let v4279 : string = v4278 + v51 
            let v4280 : string = v4279 + v51 
            let v4281 : string = "v4062"
            let v4282 : string = v4281 + v4227 
            let v4283 : string = v4282 + v4280 
            let v4284 : string = "vec![" + v4283 + "]"
            let v4285 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4284 
            let v4286 : string = "leptos::prelude::Fragment::new($0)"
            let v4287 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4285 v4286 
            let v4288 : string = "leptos::prelude::AnyView::from($0)"
            let v4289 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4287 v4288 
            let v4290 : string = "<" + v4056 + " " + v4038 + ">move || { v4289 }</" + v4056 + ">"
            let v4291 : string = "leptos::prelude::view! { " + v4290 + " }"
            let v4292 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4291 
            let v4293 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4292 |> unbox
            let v4294 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4295 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4293 v4294 
            let v4296 : string = "vec![" + v51 + "]"
            let v4297 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4296 
            let v4298 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4299 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4297 v4298 
            let v4300 : string = "class=\"flex flex-col [position:relative]\""
            let v4301 : string = " " + v4300 + v51 + ""
            let v4302 : string = "$0"
            let v4303 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4040 v4302 
            let v4304 : string = "$0"
            let v4305 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v4043 v4304 
            let v4306 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v4307 : string = " " + v4306 + v51 + ""
            let v4308 : string = "v4299"
            let v4309 : string = v4308 + v51 
            let v4310 : string = v4309 + v51 
            let v4311 : string = "vec![" + v4310 + "]"
            let v4312 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4311 
            let v4313 : string = "leptos::prelude::Fragment::new($0)"
            let v4314 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4312 v4313 
            let v4315 : string = "leptos::prelude::AnyView::from($0)"
            let v4316 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4314 v4315 
            let v4317 : string = "<" + v4056 + " " + v4307 + ">move || { v4316 }</" + v4056 + ">"
            let v4318 : string = "leptos::prelude::view! { " + v4317 + " }"
            let v4319 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4318 
            let v4320 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4319 |> unbox
            let v4321 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4322 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4320 v4321 
            let v4323 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4303(())"
            let v4324 : string = "open=move || v4305(())"
            let v4325 : string = " " + v4323 + v51 + ""
            let v4326 : string = " " + v4324 + v4325 + ""
            let v4327 : string = "$0"
            let v4328 : (unit -> string) = closure223()
            let v4329 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4328 v4327 
            let v4330 : string = "$0"
            let v4331 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure224()
            let v4332 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v4331 v4330 
            let v4333 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4332(()) + \" \" + &v4329(())"
            let v4334 : string = " " + v4333 + v51 + ""
            let v4335 : string = "class=\"flex items-center gap-2\""
            let v4336 : string = " " + v4335 + v51 + ""
            let v4337 : (unit -> string) = method228()
            let v4338 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v4339 : string = " " + v4338 + v51 + ""
            let v4340 : string = v4337 ()
            (* run_target_args'
            let v4341 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4342 : string = "&*$0"
            let v4343 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4340 v4342 
            let _run_target_args'_v4341 = v4343 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4344 : string = "&*$0"
            let v4345 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4340 v4344 
            let _run_target_args'_v4341 = v4345 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4346 : string = "&*$0"
            let v4347 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4340 v4346 
            let _run_target_args'_v4341 = v4347 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4348 : Ref<Str> = v4340 |> unbox<Ref<Str>>
            let _run_target_args'_v4341 = v4348 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4351 : Ref<Str> = v4340 |> unbox<Ref<Str>>
            let _run_target_args'_v4341 = v4351 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4354 : Ref<Str> = v4340 |> unbox<Ref<Str>>
            let _run_target_args'_v4341 = v4354 
            #endif
#else
            let v4357 : Ref<Str> = v4340 |> unbox<Ref<Str>>
            let _run_target_args'_v4341 = v4357 
            #endif
            let v4360 : Ref<Str> = _run_target_args'_v4341 
            (* run_target_args'
            let v4365 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v4366 : string = "String::from($0)"
            let v4367 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4360 v4366 
            let _run_target_args'_v4365 = v4367 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v4368 : string = "String::from($0)"
            let v4369 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4360 v4368 
            let _run_target_args'_v4365 = v4369 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v4370 : string = "String::from($0)"
            let v4371 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4360 v4370 
            let _run_target_args'_v4365 = v4371 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v4372 : std_string_String = v4360 |> unbox<std_string_String>
            let _run_target_args'_v4365 = v4372 
            #endif
#if FABLE_COMPILER_PYTHON
            let v4375 : std_string_String = v4360 |> unbox<std_string_String>
            let _run_target_args'_v4365 = v4375 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v4378 : std_string_String = v4360 |> unbox<std_string_String>
            let _run_target_args'_v4365 = v4378 
            #endif
#else
            let v4381 : std_string_String = v4360 |> unbox<std_string_String>
            let _run_target_args'_v4365 = v4381 
            #endif
            let v4384 : std_string_String = _run_target_args'_v4365 
            let v4389 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v4390 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4384 v4389 
            let v4391 : string = "v4390"
            let v4392 : string = v4391 + v51 
            let v4393 : string = v4392 + v51 
            let v4394 : string = "vec![" + v4393 + "]"
            let v4395 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4394 
            let v4396 : string = "leptos::prelude::Fragment::new($0)"
            let v4397 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4395 v4396 
            let v4398 : string = "leptos::prelude::AnyView::from($0)"
            let v4399 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4397 v4398 
            let v4400 : string = "<" + v4140 + " " + v4339 + ">move || { v4399 }</" + v4140 + ">"
            let v4401 : string = "leptos::prelude::view! { " + v4400 + " }"
            let v4402 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4401 
            let v4403 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v4402 |> unbox
            let v4404 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4405 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4403 v4404 
            let v4406 : string = "v4405"
            let v4407 : string = v4406 + v51 
            let v4408 : string = v4407 + v51 
            let v4409 : string = "vec![" + v4408 + "]"
            let v4410 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4409 
            let v4411 : string = "leptos::prelude::Fragment::new($0)"
            let v4412 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4410 v4411 
            let v4413 : string = "leptos::prelude::AnyView::from($0)"
            let v4414 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4412 v4413 
            let v4415 : string = "<" + v4056 + " " + v4336 + ">move || { v4414 }</" + v4056 + ">"
            let v4416 : string = "leptos::prelude::view! { " + v4415 + " }"
            let v4417 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4416 
            let v4418 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4417 |> unbox
            let v4419 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4420 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4418 v4419 
            let v4421 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v4422 : string = " " + v4421 + v51 + ""
            let v4423 : string = "$0"
            let v4424 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4165 v4423 
            let v4425 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v4426 : string = "viewBox=\"0 0 20 20\""
            let v4427 : string = "fill=\"currentColor\""
            let v4428 : string = "class=move || \" \".to_owned() + &v4424(())"
            let v4429 : string = " " + v4425 + v51 + ""
            let v4430 : string = " " + v4426 + v4429 + ""
            let v4431 : string = " " + v4427 + v4430 + ""
            let v4432 : string = " " + v4428 + v4431 + ""
            let v4433 : string = "fill-rule=\"evenodd\""
            let v4434 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v4435 : string = "clip-rule=\"evenodd\""
            let v4436 : string = " " + v4433 + v51 + ""
            let v4437 : string = " " + v4434 + v4436 + ""
            let v4438 : string = " " + v4435 + v4437 + ""
            let v4439 : string = "vec![" + v51 + "]"
            let v4440 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4439 
            let v4441 : string = "leptos::prelude::Fragment::new($0)"
            let v4442 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4440 v4441 
            let v4443 : string = "leptos::prelude::AnyView::from($0)"
            let v4444 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4442 v4443 
            let v4445 : string = "<" + v3985 + " " + v4438 + ">move || { v4444 }</" + v3985 + ">"
            let v4446 : string = "leptos::prelude::view! { " + v4445 + " }"
            let v4447 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4446 
            let v4448 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v4447 |> unbox
            let v4449 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4450 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4448 v4449 
            let v4451 : string = "v4450"
            let v4452 : string = v4451 + v51 
            let v4453 : string = v4452 + v51 
            let v4454 : string = "vec![" + v4453 + "]"
            let v4455 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4454 
            let v4456 : string = "leptos::prelude::Fragment::new($0)"
            let v4457 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4455 v4456 
            let v4458 : string = "leptos::prelude::AnyView::from($0)"
            let v4459 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4457 v4458 
            let v4460 : string = "<" + v4001 + " " + v4432 + ">move || { v4459 }</" + v4001 + ">"
            let v4461 : string = "leptos::prelude::view! { " + v4460 + " }"
            let v4462 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4461 
            let v4463 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v4462 |> unbox
            let v4464 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4465 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4463 v4464 
            let v4466 : string = "v4465"
            let v4467 : string = v4466 + v51 
            let v4468 : string = v4467 + v51 
            let v4469 : string = "vec![" + v4468 + "]"
            let v4470 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4469 
            let v4471 : string = "leptos::prelude::Fragment::new($0)"
            let v4472 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4470 v4471 
            let v4473 : string = "leptos::prelude::AnyView::from($0)"
            let v4474 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4472 v4473 
            let v4475 : string = "<" + v4140 + " " + v4422 + ">move || { v4474 }</" + v4140 + ">"
            let v4476 : string = "leptos::prelude::view! { " + v4475 + " }"
            let v4477 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4476 
            let v4478 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v4477 |> unbox
            let v4479 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4480 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4478 v4479 
            let v4481 : string = "v4480"
            let v4482 : string = v4481 + v51 
            let v4483 : string = v4482 + v51 
            let v4484 : string = "v4420"
            let v4485 : string = v4484 + v4227 
            let v4486 : string = v4485 + v4483 
            let v4487 : string = "vec![" + v4486 + "]"
            let v4488 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4487 
            let v4489 : string = "leptos::prelude::Fragment::new($0)"
            let v4490 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4488 v4489 
            let v4491 : string = "leptos::prelude::AnyView::from($0)"
            let v4492 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4490 v4491 
            let v4493 : string = "<" + v4236 + " " + v4334 + ">move || { v4492 }</" + v4236 + ">"
            let v4494 : string = "leptos::prelude::view! { " + v4493 + " }"
            let v4495 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4494 
            let v4496 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v4495 |> unbox
            let v4497 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4498 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4496 v4497 
            let v4499 : string = "class=\"flex flex-1 flex-col\""
            let v4500 : string = " " + v4499 + v51 + ""
            let v4501 : string = "Func0::new(move || $0())"
            let v4502 : (unit -> leptos_dom_Fragment) = closure226(v3914)
            let v4503 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4502 v4501 
            let v4504 : Func0<leptos_dom_Fragment> = method195(v4503)
            let v4505 : string = "(move || v4504())()"
            let v4506 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v4505 
            let v4507 : string = "leptos::prelude::AnyView::from($0)"
            let v4508 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4506 v4507 
            let v4509 : string = "<" + v4056 + " " + v4500 + ">move || { v4508 }</" + v4056 + ">"
            let v4510 : string = "leptos::prelude::view! { " + v4509 + " }"
            let v4511 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4510 
            let v4512 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4511 |> unbox
            let v4513 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4514 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4512 v4513 
            let v4515 : string = "v4514"
            let v4516 : string = v4515 + v51 
            let v4517 : string = v4516 + v51 
            let v4518 : string = "v4498"
            let v4519 : string = v4518 + v4227 
            let v4520 : string = v4519 + v4517 
            let v4521 : string = "vec![" + v4520 + "]"
            let v4522 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4521 
            let v4523 : string = "leptos::prelude::Fragment::new($0)"
            let v4524 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4522 v4523 
            let v4525 : string = "leptos::prelude::AnyView::from($0)"
            let v4526 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4524 v4525 
            let v4527 : string = "<" + v4271 + " " + v4326 + ">move || { v4526 }</" + v4271 + ">"
            let v4528 : string = "leptos::prelude::view! { " + v4527 + " }"
            let v4529 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4528 
            let v4530 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v4529 |> unbox
            let v4531 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4532 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4530 v4531 
            let v4533 : string = "v4532"
            let v4534 : string = v4533 + v51 
            let v4535 : string = v4534 + v51 
            let v4536 : string = "v4322"
            let v4537 : string = v4536 + v4227 
            let v4538 : string = v4537 + v4535 
            let v4539 : string = "vec![" + v4538 + "]"
            let v4540 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4539 
            let v4541 : string = "leptos::prelude::Fragment::new($0)"
            let v4542 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4540 v4541 
            let v4543 : string = "leptos::prelude::AnyView::from($0)"
            let v4544 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4542 v4543 
            let v4545 : string = "<" + v4056 + " " + v4301 + ">move || { v4544 }</" + v4056 + ">"
            let v4546 : string = "leptos::prelude::view! { " + v4545 + " }"
            let v4547 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4546 
            let v4548 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4547 |> unbox
            let v4549 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4550 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4548 v4549 
            let v4551 : leptos_prelude_ArcRwSignal<Heap1> = v3914.l0
            let v4552 : string = "Box::pin($0)"
            let v4553 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v4551 v4552 
            let v4554 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
            let v4555 : Heap1 = Fable.Core.RustInterop.emitRustExpr v4553 v4554 
            let v4556 : leptos_prelude_ArcRwSignal<bool> = v4555.l1
            let v4557 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
            let v4558 : bool = Fable.Core.RustInterop.emitRustExpr v4556 v4557 
            let v4818 : leptos_prelude_AnyView_ =
                if v4558 then
                    let v4559 : string = "vec![" + v51 + "]"
                    let v4560 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4559 
                    let v4561 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4562 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4560 v4561 
                    let v4563 : string = "class=\"flex flex-col [position:relative]\""
                    let v4564 : string = " " + v4563 + v51 + ""
                    let v4565 : string = "$0"
                    let v4566 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4040 v4565 
                    let v4567 : string = "$0"
                    let v4568 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v4043 v4567 
                    let v4569 : string = "class=\"[position:absolute] [right:0] [top:0]\""
                    let v4570 : string = " " + v4569 + v51 + ""
                    let v4571 : string = "v4562"
                    let v4572 : string = v4571 + v51 
                    let v4573 : string = v4572 + v51 
                    let v4574 : string = "vec![" + v4573 + "]"
                    let v4575 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4574 
                    let v4576 : string = "leptos::prelude::Fragment::new($0)"
                    let v4577 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4575 v4576 
                    let v4578 : string = "leptos::prelude::AnyView::from($0)"
                    let v4579 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4577 v4578 
                    let v4580 : string = "<" + v4056 + " " + v4570 + ">move || { v4579 }</" + v4056 + ">"
                    let v4581 : string = "leptos::prelude::view! { " + v4580 + " }"
                    let v4582 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4581 
                    let v4583 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4582 |> unbox
                    let v4584 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4585 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4583 v4584 
                    let v4586 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4566(())"
                    let v4587 : string = "open=move || v4568(())"
                    let v4588 : string = " " + v4586 + v51 + ""
                    let v4589 : string = " " + v4587 + v4588 + ""
                    let v4590 : string = "$0"
                    let v4591 : (unit -> string) = closure243()
                    let v4592 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4591 v4590 
                    let v4593 : string = "$0"
                    let v4594 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure244()
                    let v4595 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v4594 v4593 
                    let v4596 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4595(()) + \" \" + &v4592(())"
                    let v4597 : string = " " + v4596 + v51 + ""
                    let v4598 : string = "class=\"flex items-center gap-2\""
                    let v4599 : string = " " + v4598 + v51 + ""
                    let v4600 : (unit -> string) = method237()
                    let v4601 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
                    let v4602 : string = " " + v4601 + v51 + ""
                    let v4603 : string = v4600 ()
                    (* run_target_args'
                    let v4604 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4605 : string = "&*$0"
                    let v4606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4603 v4605 
                    let _run_target_args'_v4604 = v4606 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4607 : string = "&*$0"
                    let v4608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4603 v4607 
                    let _run_target_args'_v4604 = v4608 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4609 : string = "&*$0"
                    let v4610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4603 v4609 
                    let _run_target_args'_v4604 = v4610 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4611 : Ref<Str> = v4603 |> unbox<Ref<Str>>
                    let _run_target_args'_v4604 = v4611 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4614 : Ref<Str> = v4603 |> unbox<Ref<Str>>
                    let _run_target_args'_v4604 = v4614 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4617 : Ref<Str> = v4603 |> unbox<Ref<Str>>
                    let _run_target_args'_v4604 = v4617 
                    #endif
#else
                    let v4620 : Ref<Str> = v4603 |> unbox<Ref<Str>>
                    let _run_target_args'_v4604 = v4620 
                    #endif
                    let v4623 : Ref<Str> = _run_target_args'_v4604 
                    (* run_target_args'
                    let v4628 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4629 : string = "String::from($0)"
                    let v4630 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4623 v4629 
                    let _run_target_args'_v4628 = v4630 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4631 : string = "String::from($0)"
                    let v4632 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4623 v4631 
                    let _run_target_args'_v4628 = v4632 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4633 : string = "String::from($0)"
                    let v4634 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4623 v4633 
                    let _run_target_args'_v4628 = v4634 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4635 : std_string_String = v4623 |> unbox<std_string_String>
                    let _run_target_args'_v4628 = v4635 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4638 : std_string_String = v4623 |> unbox<std_string_String>
                    let _run_target_args'_v4628 = v4638 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4641 : std_string_String = v4623 |> unbox<std_string_String>
                    let _run_target_args'_v4628 = v4641 
                    #endif
#else
                    let v4644 : std_string_String = v4623 |> unbox<std_string_String>
                    let _run_target_args'_v4628 = v4644 
                    #endif
                    let v4647 : std_string_String = _run_target_args'_v4628 
                    let v4652 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v4653 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4647 v4652 
                    let v4654 : string = "v4653"
                    let v4655 : string = v4654 + v51 
                    let v4656 : string = v4655 + v51 
                    let v4657 : string = "vec![" + v4656 + "]"
                    let v4658 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4657 
                    let v4659 : string = "leptos::prelude::Fragment::new($0)"
                    let v4660 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4658 v4659 
                    let v4661 : string = "leptos::prelude::AnyView::from($0)"
                    let v4662 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4660 v4661 
                    let v4663 : string = "<" + v4140 + " " + v4602 + ">move || { v4662 }</" + v4140 + ">"
                    let v4664 : string = "leptos::prelude::view! { " + v4663 + " }"
                    let v4665 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4664 
                    let v4666 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v4665 |> unbox
                    let v4667 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4668 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4666 v4667 
                    let v4669 : string = "v4668"
                    let v4670 : string = v4669 + v51 
                    let v4671 : string = v4670 + v51 
                    let v4672 : string = "vec![" + v4671 + "]"
                    let v4673 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4672 
                    let v4674 : string = "leptos::prelude::Fragment::new($0)"
                    let v4675 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4673 v4674 
                    let v4676 : string = "leptos::prelude::AnyView::from($0)"
                    let v4677 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4675 v4676 
                    let v4678 : string = "<" + v4056 + " " + v4599 + ">move || { v4677 }</" + v4056 + ">"
                    let v4679 : string = "leptos::prelude::view! { " + v4678 + " }"
                    let v4680 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4679 
                    let v4681 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4680 |> unbox
                    let v4682 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4683 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4681 v4682 
                    let v4684 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
                    let v4685 : string = " " + v4684 + v51 + ""
                    let v4686 : string = "$0"
                    let v4687 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v4165 v4686 
                    let v4688 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                    let v4689 : string = "viewBox=\"0 0 20 20\""
                    let v4690 : string = "fill=\"currentColor\""
                    let v4691 : string = "class=move || \" \".to_owned() + &v4687(())"
                    let v4692 : string = " " + v4688 + v51 + ""
                    let v4693 : string = " " + v4689 + v4692 + ""
                    let v4694 : string = " " + v4690 + v4693 + ""
                    let v4695 : string = " " + v4691 + v4694 + ""
                    let v4696 : string = "fill-rule=\"evenodd\""
                    let v4697 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
                    let v4698 : string = "clip-rule=\"evenodd\""
                    let v4699 : string = " " + v4696 + v51 + ""
                    let v4700 : string = " " + v4697 + v4699 + ""
                    let v4701 : string = " " + v4698 + v4700 + ""
                    let v4702 : string = "vec![" + v51 + "]"
                    let v4703 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4702 
                    let v4704 : string = "leptos::prelude::Fragment::new($0)"
                    let v4705 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4703 v4704 
                    let v4706 : string = "leptos::prelude::AnyView::from($0)"
                    let v4707 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4705 v4706 
                    let v4708 : string = "<" + v3985 + " " + v4701 + ">move || { v4707 }</" + v3985 + ">"
                    let v4709 : string = "leptos::prelude::view! { " + v4708 + " }"
                    let v4710 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4709 
                    let v4711 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v4710 |> unbox
                    let v4712 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4713 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4711 v4712 
                    let v4714 : string = "v4713"
                    let v4715 : string = v4714 + v51 
                    let v4716 : string = v4715 + v51 
                    let v4717 : string = "vec![" + v4716 + "]"
                    let v4718 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4717 
                    let v4719 : string = "leptos::prelude::Fragment::new($0)"
                    let v4720 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4718 v4719 
                    let v4721 : string = "leptos::prelude::AnyView::from($0)"
                    let v4722 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4720 v4721 
                    let v4723 : string = "<" + v4001 + " " + v4695 + ">move || { v4722 }</" + v4001 + ">"
                    let v4724 : string = "leptos::prelude::view! { " + v4723 + " }"
                    let v4725 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4724 
                    let v4726 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v4725 |> unbox
                    let v4727 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4728 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4726 v4727 
                    let v4729 : string = "v4728"
                    let v4730 : string = v4729 + v51 
                    let v4731 : string = v4730 + v51 
                    let v4732 : string = "vec![" + v4731 + "]"
                    let v4733 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4732 
                    let v4734 : string = "leptos::prelude::Fragment::new($0)"
                    let v4735 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4733 v4734 
                    let v4736 : string = "leptos::prelude::AnyView::from($0)"
                    let v4737 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4735 v4736 
                    let v4738 : string = "<" + v4140 + " " + v4685 + ">move || { v4737 }</" + v4140 + ">"
                    let v4739 : string = "leptos::prelude::view! { " + v4738 + " }"
                    let v4740 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4739 
                    let v4741 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v4740 |> unbox
                    let v4742 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4743 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4741 v4742 
                    let v4744 : string = "v4743"
                    let v4745 : string = v4744 + v51 
                    let v4746 : string = v4745 + v51 
                    let v4747 : string = "v4683"
                    let v4748 : string = v4747 + v4227 
                    let v4749 : string = v4748 + v4746 
                    let v4750 : string = "vec![" + v4749 + "]"
                    let v4751 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4750 
                    let v4752 : string = "leptos::prelude::Fragment::new($0)"
                    let v4753 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4751 v4752 
                    let v4754 : string = "leptos::prelude::AnyView::from($0)"
                    let v4755 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4753 v4754 
                    let v4756 : string = "<" + v4236 + " " + v4597 + ">move || { v4755 }</" + v4236 + ">"
                    let v4757 : string = "leptos::prelude::view! { " + v4756 + " }"
                    let v4758 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4757 
                    let v4759 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v4758 |> unbox
                    let v4760 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4761 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4759 v4760 
                    let v4762 : string = "class=\"flex flex-1 flex-col\""
                    let v4763 : string = " " + v4762 + v51 + ""
                    let v4764 : string = "Func0::new(move || $0())"
                    let v4765 : (unit -> leptos_dom_Fragment) = closure246()
                    let v4766 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v4765 v4764 
                    let v4767 : Func0<leptos_dom_Fragment> = method195(v4766)
                    let v4768 : string = "(move || v4767())()"
                    let v4769 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v4768 
                    let v4770 : string = "leptos::prelude::AnyView::from($0)"
                    let v4771 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4769 v4770 
                    let v4772 : string = "<" + v4056 + " " + v4763 + ">move || { v4771 }</" + v4056 + ">"
                    let v4773 : string = "leptos::prelude::view! { " + v4772 + " }"
                    let v4774 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4773 
                    let v4775 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4774 |> unbox
                    let v4776 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4777 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4775 v4776 
                    let v4778 : string = "v4777"
                    let v4779 : string = v4778 + v51 
                    let v4780 : string = v4779 + v51 
                    let v4781 : string = "v4761"
                    let v4782 : string = v4781 + v4227 
                    let v4783 : string = v4782 + v4780 
                    let v4784 : string = "vec![" + v4783 + "]"
                    let v4785 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4784 
                    let v4786 : string = "leptos::prelude::Fragment::new($0)"
                    let v4787 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4785 v4786 
                    let v4788 : string = "leptos::prelude::AnyView::from($0)"
                    let v4789 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4787 v4788 
                    let v4790 : string = "<" + v4271 + " " + v4589 + ">move || { v4789 }</" + v4271 + ">"
                    let v4791 : string = "leptos::prelude::view! { " + v4790 + " }"
                    let v4792 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4791 
                    let v4793 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v4792 |> unbox
                    let v4794 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4795 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4793 v4794 
                    let v4796 : string = "v4795"
                    let v4797 : string = v4796 + v51 
                    let v4798 : string = v4797 + v51 
                    let v4799 : string = "v4585"
                    let v4800 : string = v4799 + v4227 
                    let v4801 : string = v4800 + v4798 
                    let v4802 : string = "vec![" + v4801 + "]"
                    let v4803 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4802 
                    let v4804 : string = "leptos::prelude::Fragment::new($0)"
                    let v4805 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4803 v4804 
                    let v4806 : string = "leptos::prelude::AnyView::from($0)"
                    let v4807 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4805 v4806 
                    let v4808 : string = "<" + v4056 + " " + v4564 + ">move || { v4807 }</" + v4056 + ">"
                    let v4809 : string = "leptos::prelude::view! { " + v4808 + " }"
                    let v4810 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4809 
                    let v4811 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4810 |> unbox
                    let v4812 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4813 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4811 v4812 
                    v4813
                else
                    let v4814 : string = "vec![" + v51 + "]"
                    let v4815 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4814 
                    let v4816 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v4817 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4815 v4816 
                    v4817
            let v4819 : string = "v4818"
            let v4820 : string = v4819 + v51 
            let v4821 : string = v4820 + v51 
            let v4822 : string = "v4550"
            let v4823 : string = v4822 + v4227 
            let v4824 : string = v4823 + v4821 
            let v4825 : string = "v4295"
            let v4826 : string = v4825 + v4227 
            let v4827 : string = v4826 + v4824 
            let v4828 : string = "vec![" + v4827 + "]"
            let v4829 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4828 
            let v4830 : string = "leptos::prelude::Fragment::new($0)"
            let v4831 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4829 v4830 
            US22_0(v4831)
        | US18_3 -> (* Transactions *)
            let v3211 : string = "transactions_view.render (1)"
            let v3212 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v3213 : bool = Fable.Core.RustInterop.emitRustExpr v3211 v3212 
            let v3214 : string = "leptos::context::use_context::<std::sync::Arc<Heap2>>()"
            let v3215 : Heap2 option = Fable.Core.RustInterop.emitRustExpr () v3214 
            let v3216 : string = "$0.unwrap()"
            let v3217 : Heap2 = Fable.Core.RustInterop.emitRustExpr v3215 v3216 
            let v3218 : string = "use_transactions.render (1)"
            let v3219 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v3220 : bool = Fable.Core.RustInterop.emitRustExpr v3218 v3219 
            let v3221 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3222 : (unit -> Vec<string>) = closure44(v3217)
            let v3223 : leptos_prelude_ArcMemo<Vec<string>> = Fable.Core.RustInterop.emitRustExpr v3222 v3221 
            let v3224 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3225 : (unit -> (struct (string * US23 * string * bool * bool) [])) = closure46(v3223)
            let v3226 : leptos_prelude_ArcMemo<(struct (string * US23 * string * bool * bool) [])> = Fable.Core.RustInterop.emitRustExpr v3225 v3224 
            let v3227 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3228 : (unit -> Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)>) = closure48(v3217, v3223)
            let v3229 : leptos_prelude_ArcMemo<Vec<struct (string * Vec<struct (string * US23 * string * bool * bool)>)>> = Fable.Core.RustInterop.emitRustExpr v3228 v3227 
            let v3230 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3231 : (unit -> Vec<struct (string * US23 * string * bool * bool)>) = closure51(v3229)
            let v3232 : leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr v3231 v3230 
            let v3233 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3234 : (unit -> (string [])) = closure55(v3229)
            let v3235 : leptos_prelude_ArcMemo<(string [])> = Fable.Core.RustInterop.emitRustExpr v3234 v3233 
            let v3236 : (crate_model_near_nearblocks_Root -> (struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) [])) = closure60()
            let v3237 : leptos_prelude_ArcMemo<Vec<Result<(struct (std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * std_string_String * uint32 * (struct (std_string_String * std_string_String option) []) * float * bool * float * (std_string_String [])) []) option, std_string_String>>> = method78(v3232, v3236)
            let v3238 : string = $"%A{v3237}"
            let v3241 : string = "use_transactions.render (7) / root func0 / result: " + string v3238 + ""
            let v3242 : int64 = 200L
            let v3243 : string = method8(v3242, v3241)
            let v3244 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v3245 : bool = Fable.Core.RustInterop.emitRustExpr v3243 v3244 
            let v3246 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3247 : (unit -> Result<(struct (string * unativeint * Heap5) []) option, std_string_String>) = closure90(v3235, v3237)
            let v3248 : leptos_prelude_ArcMemo<Result<(struct (string * unativeint * Heap5) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v3247 v3246 
            let v3249 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3250 : (unit -> Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String>) = closure107(v3248)
            let v3251 : leptos_prelude_ArcMemo<Result<(struct (string * US23 * string * bool * bool) []) option, std_string_String>> = Fable.Core.RustInterop.emitRustExpr v3250 v3249 
            let v3252 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
            let v3253 : (unit -> Vec<struct (string * US23 * string * bool * bool)>) = closure115(v3251)
            let v3254 : leptos_prelude_ArcMemo<Vec<struct (string * US23 * string * bool * bool)>> = Fable.Core.RustInterop.emitRustExpr v3253 v3252 
            let v3255 : (crate_model_near_rpc_RpcResponse -> struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option)) = closure119()
            let v3256 : leptos_prelude_ArcMemo<Vec<Result<struct (std_string_String * struct ((struct (std_string_String * (std_collections_HashMap<std_string_String, struct (std_string_String * std_string_String option * float option * std_string_String option)> []) * std_string_String * (std_string_String []) * (std_string_String []) * std_string_String * std_string_String * std_string_String * std_string_String) []) * (struct (std_string_String * std_string_String * std_string_String * uint64 * (std_string_String []) * (struct (std_string_String * std_string_String * std_string_String) []) * uint8 * (std_string_String []) * std_collections_HashMap<std_string_String, std_string_String> * std_string_String option * (struct (std_string_String * std_string_String) [])) [])) option * struct (std_string_String * std_string_String * struct (std_string_String option * std_string_String option) option * int32 * std_string_String * std_string_String) option * std_string_String option) option, std_string_String>>> = method159(v3254, v3255)
            let v3257 : string = $"%A{v3256}"
            let v3260 : string = "use_transactions.render (12) / rpc_response func0 / result: " + string v3257 + ""
            let v3261 : int64 = 200L
            let v3262 : string = method8(v3261, v3260)
            let v3263 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
            let v3264 : bool = Fable.Core.RustInterop.emitRustExpr v3262 v3263 
            let v3265 : string = $"leptos::prelude::signal($0)"
            let struct (v3266 : leptos_prelude_ReadSignal<bool>, v3267 : leptos_prelude_WriteSignal<bool>) = Fable.Core.RustInterop.emitRustExpr false v3265 
            let v3268 : (unit -> unit) = closure254(v3267)
            let v3269 : string = "let v3268 = $0"
            Fable.Core.RustInterop.emitRustExpr v3268 v3269 
            let v3270 : string = "$0"
            let v3271 : (unit -> string) = closure255()
            let v3272 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3271 v3270 
            let v3273 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v3274 : string = "fill=\"none\""
            let v3275 : string = "viewBox=\"0 0 24 24\""
            let v3276 : string = "stroke-width=\"1.5\""
            let v3277 : string = "stroke=\"currentColor\""
            let v3278 : string = "class=move || \" \".to_owned() + &v3272(())"
            let v3279 : string = " " + v3273 + v51 + ""
            let v3280 : string = " " + v3274 + v3279 + ""
            let v3281 : string = " " + v3275 + v3280 + ""
            let v3282 : string = " " + v3276 + v3281 + ""
            let v3283 : string = " " + v3277 + v3282 + ""
            let v3284 : string = " " + v3278 + v3283 + ""
            let v3285 : string = "stroke-linecap=\"round\""
            let v3286 : string = "stroke-linejoin=\"round\""
            let v3287 : string = "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\""
            let v3288 : string = " " + v3285 + v51 + ""
            let v3289 : string = " " + v3286 + v3288 + ""
            let v3290 : string = " " + v3287 + v3289 + ""
            let v3291 : string = "vec![" + v51 + "]"
            let v3292 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3291 
            let v3293 : string = "leptos::prelude::Fragment::new($0)"
            let v3294 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3292 v3293 
            let v3295 : string = "leptos::prelude::AnyView::from($0)"
            let v3296 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3294 v3295 
            let v3297 : string = "path"
            let v3298 : string = "<" + v3297 + " " + v3290 + ">move || { v3296 }</" + v3297 + ">"
            let v3299 : string = "leptos::prelude::view! { " + v3298 + " }"
            let v3300 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3299 
            let v3301 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v3300 |> unbox
            let v3302 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3303 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3301 v3302 
            let v3304 : string = "stroke-linecap=\"round\""
            let v3305 : string = "stroke-linejoin=\"round\""
            let v3306 : string = "d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\""
            let v3307 : string = " " + v3304 + v51 + ""
            let v3308 : string = " " + v3305 + v3307 + ""
            let v3309 : string = " " + v3306 + v3308 + ""
            let v3310 : string = "vec![" + v51 + "]"
            let v3311 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3310 
            let v3312 : string = "leptos::prelude::Fragment::new($0)"
            let v3313 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3311 v3312 
            let v3314 : string = "leptos::prelude::AnyView::from($0)"
            let v3315 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3313 v3314 
            let v3316 : string = "<" + v3297 + " " + v3309 + ">move || { v3315 }</" + v3297 + ">"
            let v3317 : string = "leptos::prelude::view! { " + v3316 + " }"
            let v3318 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3317 
            let v3319 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v3318 |> unbox
            let v3320 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3321 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3319 v3320 
            let v3322 : string = "v3321"
            let v3323 : string = v3322 + v51 
            let v3324 : string = v3323 + v51 
            let v3325 : string = "v3303"
            let v3326 : string = ", "
            let v3327 : string = v3325 + v3326 
            let v3328 : string = v3327 + v3324 
            let v3329 : string = "vec![" + v3328 + "]"
            let v3330 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3329 
            let v3331 : string = "leptos::prelude::Fragment::new($0)"
            let v3332 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3330 v3331 
            let v3333 : string = "leptos::prelude::AnyView::from($0)"
            let v3334 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3332 v3333 
            let v3335 : string = "svg"
            let v3336 : string = "<" + v3335 + " " + v3284 + ">move || { v3334 }</" + v3335 + ">"
            let v3337 : string = "leptos::prelude::view! { " + v3336 + " }"
            let v3338 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3337 
            let v3339 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3338 |> unbox
            let v3340 : string = "on:click=move |_| v3268()"
            let v3341 : string = "aria-label=\"Settings\""
            let v3342 : string = "$0"
            let v3343 : (unit -> std_string_String) = closure256(v3266)
            let v3344 : (unit -> std_string_String) = Fable.Core.RustInterop.emitRustExpr v3343 v3342 
            let v3345 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v3344(())"
            let v3346 : string = " " + v3345 + v51 + ""
            let v3347 : string = " " + v3340 + v3346 + ""
            let v3348 : string = " " + v3341 + v3347 + ""
            let v3349 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3350 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3339 v3349 
            let v3351 : string = "v3350"
            let v3352 : string = v3351 + v51 
            let v3353 : string = v3352 + v51 
            let v3354 : string = "vec![" + v3353 + "]"
            let v3355 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3354 
            let v3356 : string = "leptos::prelude::Fragment::new($0)"
            let v3357 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3355 v3356 
            let v3358 : string = "leptos::prelude::AnyView::from($0)"
            let v3359 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3357 v3358 
            let v3360 : string = "button"
            let v3361 : string = "<" + v3360 + " " + v3348 + ">move || { v3359 }</" + v3360 + ">"
            let v3362 : string = "leptos::prelude::view! { " + v3361 + " }"
            let v3363 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3362 
            let v3364 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Button>> = v3363 |> unbox
            let v3365 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3366 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3364 v3365 
            let v3367 : string = "vec![" + v51 + "]"
            let v3368 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3367 
            let v3369 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3370 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3368 v3369 
            let v3371 : string = "class=\"flex flex-col [position:relative]\""
            let v3372 : string = " " + v3371 + v51 + ""
            let v3373 : string = "$0"
            let v3374 : (unit -> string) = closure161()
            let v3375 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3374 v3373 
            let v3376 : string = "$0"
            let v3377 : (unit -> bool) = closure162()
            let v3378 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v3377 v3376 
            let v3379 : string = "class=\"[position:absolute] [right:0] [top:0]\""
            let v3380 : string = " " + v3379 + v51 + ""
            let v3381 : string = "v3366"
            let v3382 : string = v3381 + v51 
            let v3383 : string = v3382 + v51 
            let v3384 : string = "vec![" + v3383 + "]"
            let v3385 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3384 
            let v3386 : string = "leptos::prelude::Fragment::new($0)"
            let v3387 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3385 v3386 
            let v3388 : string = "leptos::prelude::AnyView::from($0)"
            let v3389 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3387 v3388 
            let v3390 : string = "div"
            let v3391 : string = "<" + v3390 + " " + v3380 + ">move || { v3389 }</" + v3390 + ">"
            let v3392 : string = "leptos::prelude::view! { " + v3391 + " }"
            let v3393 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3392 
            let v3394 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3393 |> unbox
            let v3395 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3396 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3394 v3395 
            let v3397 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3375(())"
            let v3398 : string = "open=move || v3378(())"
            let v3399 : string = " " + v3397 + v51 + ""
            let v3400 : string = " " + v3398 + v3399 + ""
            let v3401 : string = "$0"
            let v3402 : (unit -> string) = closure257()
            let v3403 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3402 v3401 
            let v3404 : string = "$0"
            let v3405 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure258(v3366)
            let v3406 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v3405 v3404 
            let v3407 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3406(()) + \" \" + &v3403(())"
            let v3408 : string = " " + v3407 + v51 + ""
            let v3409 : string = "class=\"flex items-center gap-2\""
            let v3410 : string = " " + v3409 + v51 + ""
            let v3411 : (unit -> string) = method243(v3366)
            let v3412 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
            let v3413 : string = " " + v3412 + v51 + ""
            let v3414 : string = v3411 ()
            (* run_target_args'
            let v3415 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3416 : string = "&*$0"
            let v3417 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3414 v3416 
            let _run_target_args'_v3415 = v3417 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3418 : string = "&*$0"
            let v3419 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3414 v3418 
            let _run_target_args'_v3415 = v3419 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3420 : string = "&*$0"
            let v3421 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3414 v3420 
            let _run_target_args'_v3415 = v3421 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3422 : Ref<Str> = v3414 |> unbox<Ref<Str>>
            let _run_target_args'_v3415 = v3422 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3425 : Ref<Str> = v3414 |> unbox<Ref<Str>>
            let _run_target_args'_v3415 = v3425 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3428 : Ref<Str> = v3414 |> unbox<Ref<Str>>
            let _run_target_args'_v3415 = v3428 
            #endif
#else
            let v3431 : Ref<Str> = v3414 |> unbox<Ref<Str>>
            let _run_target_args'_v3415 = v3431 
            #endif
            let v3434 : Ref<Str> = _run_target_args'_v3415 
            (* run_target_args'
            let v3439 : unit = ()
            run_target_args' *)
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3440 : string = "String::from($0)"
            let v3441 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3434 v3440 
            let _run_target_args'_v3439 = v3441 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3442 : string = "String::from($0)"
            let v3443 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3434 v3442 
            let _run_target_args'_v3439 = v3443 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3444 : string = "String::from($0)"
            let v3445 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3434 v3444 
            let _run_target_args'_v3439 = v3445 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3446 : std_string_String = v3434 |> unbox<std_string_String>
            let _run_target_args'_v3439 = v3446 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3449 : std_string_String = v3434 |> unbox<std_string_String>
            let _run_target_args'_v3439 = v3449 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3452 : std_string_String = v3434 |> unbox<std_string_String>
            let _run_target_args'_v3439 = v3452 
            #endif
#else
            let v3455 : std_string_String = v3434 |> unbox<std_string_String>
            let _run_target_args'_v3439 = v3455 
            #endif
            let v3458 : std_string_String = _run_target_args'_v3439 
            let v3463 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
            let v3464 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3458 v3463 
            let v3465 : string = "v3464"
            let v3466 : string = v3465 + v51 
            let v3467 : string = v3466 + v51 
            let v3468 : string = "vec![" + v3467 + "]"
            let v3469 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3468 
            let v3470 : string = "leptos::prelude::Fragment::new($0)"
            let v3471 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3469 v3470 
            let v3472 : string = "leptos::prelude::AnyView::from($0)"
            let v3473 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3471 v3472 
            let v3474 : string = "span"
            let v3475 : string = "<" + v3474 + " " + v3413 + ">move || { v3473 }</" + v3474 + ">"
            let v3476 : string = "leptos::prelude::view! { " + v3475 + " }"
            let v3477 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3476 
            let v3478 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v3477 |> unbox
            let v3479 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3480 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3478 v3479 
            let v3481 : string = "v3480"
            let v3482 : string = v3481 + v51 
            let v3483 : string = v3482 + v51 
            let v3484 : string = "vec![" + v3483 + "]"
            let v3485 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3484 
            let v3486 : string = "leptos::prelude::Fragment::new($0)"
            let v3487 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3485 v3486 
            let v3488 : string = "leptos::prelude::AnyView::from($0)"
            let v3489 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3487 v3488 
            let v3490 : string = "<" + v3390 + " " + v3410 + ">move || { v3489 }</" + v3390 + ">"
            let v3491 : string = "leptos::prelude::view! { " + v3490 + " }"
            let v3492 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3491 
            let v3493 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3492 |> unbox
            let v3494 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3495 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3493 v3494 
            let v3496 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
            let v3497 : string = " " + v3496 + v51 + ""
            let v3498 : string = "$0"
            let v3499 : (unit -> string) = closure166()
            let v3500 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3499 v3498 
            let v3501 : string = "xmlns=\"http://www.w3.org/2000/svg\""
            let v3502 : string = "viewBox=\"0 0 20 20\""
            let v3503 : string = "fill=\"currentColor\""
            let v3504 : string = "class=move || \" \".to_owned() + &v3500(())"
            let v3505 : string = " " + v3501 + v51 + ""
            let v3506 : string = " " + v3502 + v3505 + ""
            let v3507 : string = " " + v3503 + v3506 + ""
            let v3508 : string = " " + v3504 + v3507 + ""
            let v3509 : string = "fill-rule=\"evenodd\""
            let v3510 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
            let v3511 : string = "clip-rule=\"evenodd\""
            let v3512 : string = " " + v3509 + v51 + ""
            let v3513 : string = " " + v3510 + v3512 + ""
            let v3514 : string = " " + v3511 + v3513 + ""
            let v3515 : string = "vec![" + v51 + "]"
            let v3516 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3515 
            let v3517 : string = "leptos::prelude::Fragment::new($0)"
            let v3518 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3516 v3517 
            let v3519 : string = "leptos::prelude::AnyView::from($0)"
            let v3520 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3518 v3519 
            let v3521 : string = "<" + v3297 + " " + v3514 + ">move || { v3520 }</" + v3297 + ">"
            let v3522 : string = "leptos::prelude::view! { " + v3521 + " }"
            let v3523 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3522 
            let v3524 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v3523 |> unbox
            let v3525 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3526 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3524 v3525 
            let v3527 : string = "v3526"
            let v3528 : string = v3527 + v51 
            let v3529 : string = v3528 + v51 
            let v3530 : string = "vec![" + v3529 + "]"
            let v3531 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3530 
            let v3532 : string = "leptos::prelude::Fragment::new($0)"
            let v3533 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3531 v3532 
            let v3534 : string = "leptos::prelude::AnyView::from($0)"
            let v3535 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3533 v3534 
            let v3536 : string = "<" + v3335 + " " + v3508 + ">move || { v3535 }</" + v3335 + ">"
            let v3537 : string = "leptos::prelude::view! { " + v3536 + " }"
            let v3538 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3537 
            let v3539 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3538 |> unbox
            let v3540 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3541 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3539 v3540 
            let v3542 : string = "v3541"
            let v3543 : string = v3542 + v51 
            let v3544 : string = v3543 + v51 
            let v3545 : string = "vec![" + v3544 + "]"
            let v3546 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3545 
            let v3547 : string = "leptos::prelude::Fragment::new($0)"
            let v3548 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3546 v3547 
            let v3549 : string = "leptos::prelude::AnyView::from($0)"
            let v3550 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3548 v3549 
            let v3551 : string = "<" + v3474 + " " + v3497 + ">move || { v3550 }</" + v3474 + ">"
            let v3552 : string = "leptos::prelude::view! { " + v3551 + " }"
            let v3553 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3552 
            let v3554 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v3553 |> unbox
            let v3555 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3556 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3554 v3555 
            let v3557 : string = "v3556"
            let v3558 : string = v3557 + v51 
            let v3559 : string = v3558 + v51 
            let v3560 : string = "v3495"
            let v3561 : string = v3560 + v3326 
            let v3562 : string = v3561 + v3559 
            let v3563 : string = "vec![" + v3562 + "]"
            let v3564 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3563 
            let v3565 : string = "leptos::prelude::Fragment::new($0)"
            let v3566 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3564 v3565 
            let v3567 : string = "leptos::prelude::AnyView::from($0)"
            let v3568 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3566 v3567 
            let v3569 : string = "summary"
            let v3570 : string = "<" + v3569 + " " + v3408 + ">move || { v3568 }</" + v3569 + ">"
            let v3571 : string = "leptos::prelude::view! { " + v3570 + " }"
            let v3572 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3571 
            let v3573 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v3572 |> unbox
            let v3574 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3575 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3573 v3574 
            let v3576 : string = "class=\"flex flex-1 flex-col\""
            let v3577 : string = " " + v3576 + v51 + ""
            let v3578 : string = "Func0::new(move || $0())"
            let v3579 : (unit -> leptos_dom_Fragment) = closure260(v3217, v3248, v3229, v3266)
            let v3580 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v3579 v3578 
            let v3581 : Func0<leptos_dom_Fragment> = method195(v3580)
            let v3582 : string = "(move || v3581())()"
            let v3583 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v3582 
            let v3584 : string = "leptos::prelude::AnyView::from($0)"
            let v3585 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3583 v3584 
            let v3586 : string = "<" + v3390 + " " + v3577 + ">move || { v3585 }</" + v3390 + ">"
            let v3587 : string = "leptos::prelude::view! { " + v3586 + " }"
            let v3588 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3587 
            let v3589 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3588 |> unbox
            let v3590 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3591 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3589 v3590 
            let v3592 : string = "v3591"
            let v3593 : string = v3592 + v51 
            let v3594 : string = v3593 + v51 
            let v3595 : string = "v3575"
            let v3596 : string = v3595 + v3326 
            let v3597 : string = v3596 + v3594 
            let v3598 : string = "vec![" + v3597 + "]"
            let v3599 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3598 
            let v3600 : string = "leptos::prelude::Fragment::new($0)"
            let v3601 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3599 v3600 
            let v3602 : string = "leptos::prelude::AnyView::from($0)"
            let v3603 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3601 v3602 
            let v3604 : string = "details"
            let v3605 : string = "<" + v3604 + " " + v3400 + ">move || { v3603 }</" + v3604 + ">"
            let v3606 : string = "leptos::prelude::view! { " + v3605 + " }"
            let v3607 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3606 
            let v3608 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v3607 |> unbox
            let v3609 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3610 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3608 v3609 
            let v3611 : string = "v3610"
            let v3612 : string = v3611 + v51 
            let v3613 : string = v3612 + v51 
            let v3614 : string = "v3396"
            let v3615 : string = v3614 + v3326 
            let v3616 : string = v3615 + v3613 
            let v3617 : string = "vec![" + v3616 + "]"
            let v3618 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3617 
            let v3619 : string = "leptos::prelude::Fragment::new($0)"
            let v3620 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3618 v3619 
            let v3621 : string = "leptos::prelude::AnyView::from($0)"
            let v3622 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3620 v3621 
            let v3623 : string = "<" + v3390 + " " + v3372 + ">move || { v3622 }</" + v3390 + ">"
            let v3624 : string = "leptos::prelude::view! { " + v3623 + " }"
            let v3625 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3624 
            let v3626 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3625 |> unbox
            let v3627 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v3628 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3626 v3627 
            let v3629 : leptos_prelude_ArcRwSignal<Heap1> = v3217.l0
            let v3630 : string = "Box::pin($0)"
            let v3631 : std_pin_Pin<Box<leptos_prelude_ArcRwSignal<Heap1>>> = Fable.Core.RustInterop.emitRustExpr v3629 v3630 
            let v3632 : string = $"leptos::prelude::ArcRwSignal::get_untracked(&$0)"
            let v3633 : Heap1 = Fable.Core.RustInterop.emitRustExpr v3631 v3632 
            let v3634 : leptos_prelude_ArcRwSignal<bool> = v3633.l1
            let v3635 : string = $"leptos::prelude::ArcRwSignal::get(&$0)"
            let v3636 : bool = Fable.Core.RustInterop.emitRustExpr v3634 v3635 
            let v3896 : leptos_prelude_AnyView_ =
                if v3636 then
                    let v3637 : string = "vec![" + v51 + "]"
                    let v3638 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3637 
                    let v3639 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3640 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3638 v3639 
                    let v3641 : string = "class=\"flex flex-col [position:relative]\""
                    let v3642 : string = " " + v3641 + v51 + ""
                    let v3643 : string = "$0"
                    let v3644 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3374 v3643 
                    let v3645 : string = "$0"
                    let v3646 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v3377 v3645 
                    let v3647 : string = "class=\"[position:absolute] [right:0] [top:0]\""
                    let v3648 : string = " " + v3647 + v51 + ""
                    let v3649 : string = "v3640"
                    let v3650 : string = v3649 + v51 
                    let v3651 : string = v3650 + v51 
                    let v3652 : string = "vec![" + v3651 + "]"
                    let v3653 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3652 
                    let v3654 : string = "leptos::prelude::Fragment::new($0)"
                    let v3655 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3653 v3654 
                    let v3656 : string = "leptos::prelude::AnyView::from($0)"
                    let v3657 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3655 v3656 
                    let v3658 : string = "<" + v3390 + " " + v3648 + ">move || { v3657 }</" + v3390 + ">"
                    let v3659 : string = "leptos::prelude::view! { " + v3658 + " }"
                    let v3660 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3659 
                    let v3661 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3660 |> unbox
                    let v3662 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3663 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3661 v3662 
                    let v3664 : string = "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3644(())"
                    let v3665 : string = "open=move || v3646(())"
                    let v3666 : string = " " + v3664 + v51 + ""
                    let v3667 : string = " " + v3665 + v3666 + ""
                    let v3668 : string = "$0"
                    let v3669 : (unit -> string) = closure337()
                    let v3670 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3669 v3668 
                    let v3671 : string = "$0"
                    let v3672 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure338()
                    let v3673 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v3672 v3671 
                    let v3674 : string = "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3673(()) + \" \" + &v3670(())"
                    let v3675 : string = " " + v3674 + v51 + ""
                    let v3676 : string = "class=\"flex items-center gap-2\""
                    let v3677 : string = " " + v3676 + v51 + ""
                    let v3678 : (unit -> string) = method282()
                    let v3679 : string = "class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\""
                    let v3680 : string = " " + v3679 + v51 + ""
                    let v3681 : string = v3678 ()
                    (* run_target_args'
                    let v3682 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3683 : string = "&*$0"
                    let v3684 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3681 v3683 
                    let _run_target_args'_v3682 = v3684 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3685 : string = "&*$0"
                    let v3686 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3681 v3685 
                    let _run_target_args'_v3682 = v3686 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3687 : string = "&*$0"
                    let v3688 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3681 v3687 
                    let _run_target_args'_v3682 = v3688 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3689 : Ref<Str> = v3681 |> unbox<Ref<Str>>
                    let _run_target_args'_v3682 = v3689 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3692 : Ref<Str> = v3681 |> unbox<Ref<Str>>
                    let _run_target_args'_v3682 = v3692 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3695 : Ref<Str> = v3681 |> unbox<Ref<Str>>
                    let _run_target_args'_v3682 = v3695 
                    #endif
#else
                    let v3698 : Ref<Str> = v3681 |> unbox<Ref<Str>>
                    let _run_target_args'_v3682 = v3698 
                    #endif
                    let v3701 : Ref<Str> = _run_target_args'_v3682 
                    (* run_target_args'
                    let v3706 : unit = ()
                    run_target_args' *)
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3707 : string = "String::from($0)"
                    let v3708 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3701 v3707 
                    let _run_target_args'_v3706 = v3708 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3709 : string = "String::from($0)"
                    let v3710 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3701 v3709 
                    let _run_target_args'_v3706 = v3710 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3711 : string = "String::from($0)"
                    let v3712 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3701 v3711 
                    let _run_target_args'_v3706 = v3712 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3713 : std_string_String = v3701 |> unbox<std_string_String>
                    let _run_target_args'_v3706 = v3713 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3716 : std_string_String = v3701 |> unbox<std_string_String>
                    let _run_target_args'_v3706 = v3716 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3719 : std_string_String = v3701 |> unbox<std_string_String>
                    let _run_target_args'_v3706 = v3719 
                    #endif
#else
                    let v3722 : std_string_String = v3701 |> unbox<std_string_String>
                    let _run_target_args'_v3706 = v3722 
                    #endif
                    let v3725 : std_string_String = _run_target_args'_v3706 
                    let v3730 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
                    let v3731 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3725 v3730 
                    let v3732 : string = "v3731"
                    let v3733 : string = v3732 + v51 
                    let v3734 : string = v3733 + v51 
                    let v3735 : string = "vec![" + v3734 + "]"
                    let v3736 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3735 
                    let v3737 : string = "leptos::prelude::Fragment::new($0)"
                    let v3738 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3736 v3737 
                    let v3739 : string = "leptos::prelude::AnyView::from($0)"
                    let v3740 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3738 v3739 
                    let v3741 : string = "<" + v3474 + " " + v3680 + ">move || { v3740 }</" + v3474 + ">"
                    let v3742 : string = "leptos::prelude::view! { " + v3741 + " }"
                    let v3743 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3742 
                    let v3744 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v3743 |> unbox
                    let v3745 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3746 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3744 v3745 
                    let v3747 : string = "v3746"
                    let v3748 : string = v3747 + v51 
                    let v3749 : string = v3748 + v51 
                    let v3750 : string = "vec![" + v3749 + "]"
                    let v3751 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3750 
                    let v3752 : string = "leptos::prelude::Fragment::new($0)"
                    let v3753 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3751 v3752 
                    let v3754 : string = "leptos::prelude::AnyView::from($0)"
                    let v3755 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3753 v3754 
                    let v3756 : string = "<" + v3390 + " " + v3677 + ">move || { v3755 }</" + v3390 + ">"
                    let v3757 : string = "leptos::prelude::view! { " + v3756 + " }"
                    let v3758 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3757 
                    let v3759 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3758 |> unbox
                    let v3760 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3761 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3759 v3760 
                    let v3762 : string = "class=\"shrink-0 transition duration-300 pt-[2px]\""
                    let v3763 : string = " " + v3762 + v51 + ""
                    let v3764 : string = "$0"
                    let v3765 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v3499 v3764 
                    let v3766 : string = "xmlns=\"http://www.w3.org/2000/svg\""
                    let v3767 : string = "viewBox=\"0 0 20 20\""
                    let v3768 : string = "fill=\"currentColor\""
                    let v3769 : string = "class=move || \" \".to_owned() + &v3765(())"
                    let v3770 : string = " " + v3766 + v51 + ""
                    let v3771 : string = " " + v3767 + v3770 + ""
                    let v3772 : string = " " + v3768 + v3771 + ""
                    let v3773 : string = " " + v3769 + v3772 + ""
                    let v3774 : string = "fill-rule=\"evenodd\""
                    let v3775 : string = "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\""
                    let v3776 : string = "clip-rule=\"evenodd\""
                    let v3777 : string = " " + v3774 + v51 + ""
                    let v3778 : string = " " + v3775 + v3777 + ""
                    let v3779 : string = " " + v3776 + v3778 + ""
                    let v3780 : string = "vec![" + v51 + "]"
                    let v3781 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3780 
                    let v3782 : string = "leptos::prelude::Fragment::new($0)"
                    let v3783 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3781 v3782 
                    let v3784 : string = "leptos::prelude::AnyView::from($0)"
                    let v3785 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3783 v3784 
                    let v3786 : string = "<" + v3297 + " " + v3779 + ">move || { v3785 }</" + v3297 + ">"
                    let v3787 : string = "leptos::prelude::view! { " + v3786 + " }"
                    let v3788 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3787 
                    let v3789 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v3788 |> unbox
                    let v3790 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3791 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3789 v3790 
                    let v3792 : string = "v3791"
                    let v3793 : string = v3792 + v51 
                    let v3794 : string = v3793 + v51 
                    let v3795 : string = "vec![" + v3794 + "]"
                    let v3796 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3795 
                    let v3797 : string = "leptos::prelude::Fragment::new($0)"
                    let v3798 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3796 v3797 
                    let v3799 : string = "leptos::prelude::AnyView::from($0)"
                    let v3800 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3798 v3799 
                    let v3801 : string = "<" + v3335 + " " + v3773 + ">move || { v3800 }</" + v3335 + ">"
                    let v3802 : string = "leptos::prelude::view! { " + v3801 + " }"
                    let v3803 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3802 
                    let v3804 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v3803 |> unbox
                    let v3805 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3806 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3804 v3805 
                    let v3807 : string = "v3806"
                    let v3808 : string = v3807 + v51 
                    let v3809 : string = v3808 + v51 
                    let v3810 : string = "vec![" + v3809 + "]"
                    let v3811 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3810 
                    let v3812 : string = "leptos::prelude::Fragment::new($0)"
                    let v3813 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3811 v3812 
                    let v3814 : string = "leptos::prelude::AnyView::from($0)"
                    let v3815 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3813 v3814 
                    let v3816 : string = "<" + v3474 + " " + v3763 + ">move || { v3815 }</" + v3474 + ">"
                    let v3817 : string = "leptos::prelude::view! { " + v3816 + " }"
                    let v3818 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3817 
                    let v3819 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Span>> = v3818 |> unbox
                    let v3820 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3821 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3819 v3820 
                    let v3822 : string = "v3821"
                    let v3823 : string = v3822 + v51 
                    let v3824 : string = v3823 + v51 
                    let v3825 : string = "v3761"
                    let v3826 : string = v3825 + v3326 
                    let v3827 : string = v3826 + v3824 
                    let v3828 : string = "vec![" + v3827 + "]"
                    let v3829 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3828 
                    let v3830 : string = "leptos::prelude::Fragment::new($0)"
                    let v3831 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3829 v3830 
                    let v3832 : string = "leptos::prelude::AnyView::from($0)"
                    let v3833 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3831 v3832 
                    let v3834 : string = "<" + v3569 + " " + v3675 + ">move || { v3833 }</" + v3569 + ">"
                    let v3835 : string = "leptos::prelude::view! { " + v3834 + " }"
                    let v3836 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3835 
                    let v3837 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Summary>> = v3836 |> unbox
                    let v3838 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3839 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3837 v3838 
                    let v3840 : string = "class=\"flex flex-1 flex-col\""
                    let v3841 : string = " " + v3840 + v51 + ""
                    let v3842 : string = "Func0::new(move || $0())"
                    let v3843 : (unit -> leptos_dom_Fragment) = closure340(v3248)
                    let v3844 : Func0<leptos_dom_Fragment> = Fable.Core.RustInterop.emitRustExpr v3843 v3842 
                    let v3845 : Func0<leptos_dom_Fragment> = method195(v3844)
                    let v3846 : string = "(move || v3845())()"
                    let v3847 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr () v3846 
                    let v3848 : string = "leptos::prelude::AnyView::from($0)"
                    let v3849 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3847 v3848 
                    let v3850 : string = "<" + v3390 + " " + v3841 + ">move || { v3849 }</" + v3390 + ">"
                    let v3851 : string = "leptos::prelude::view! { " + v3850 + " }"
                    let v3852 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3851 
                    let v3853 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3852 |> unbox
                    let v3854 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3855 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3853 v3854 
                    let v3856 : string = "v3855"
                    let v3857 : string = v3856 + v51 
                    let v3858 : string = v3857 + v51 
                    let v3859 : string = "v3839"
                    let v3860 : string = v3859 + v3326 
                    let v3861 : string = v3860 + v3858 
                    let v3862 : string = "vec![" + v3861 + "]"
                    let v3863 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3862 
                    let v3864 : string = "leptos::prelude::Fragment::new($0)"
                    let v3865 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3863 v3864 
                    let v3866 : string = "leptos::prelude::AnyView::from($0)"
                    let v3867 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3865 v3866 
                    let v3868 : string = "<" + v3604 + " " + v3667 + ">move || { v3867 }</" + v3604 + ">"
                    let v3869 : string = "leptos::prelude::view! { " + v3868 + " }"
                    let v3870 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3869 
                    let v3871 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Details>> = v3870 |> unbox
                    let v3872 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3873 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3871 v3872 
                    let v3874 : string = "v3873"
                    let v3875 : string = v3874 + v51 
                    let v3876 : string = v3875 + v51 
                    let v3877 : string = "v3663"
                    let v3878 : string = v3877 + v3326 
                    let v3879 : string = v3878 + v3876 
                    let v3880 : string = "vec![" + v3879 + "]"
                    let v3881 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3880 
                    let v3882 : string = "leptos::prelude::Fragment::new($0)"
                    let v3883 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3881 v3882 
                    let v3884 : string = "leptos::prelude::AnyView::from($0)"
                    let v3885 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3883 v3884 
                    let v3886 : string = "<" + v3390 + " " + v3642 + ">move || { v3885 }</" + v3390 + ">"
                    let v3887 : string = "leptos::prelude::view! { " + v3886 + " }"
                    let v3888 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v3887 
                    let v3889 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v3888 |> unbox
                    let v3890 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3891 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3889 v3890 
                    v3891
                else
                    let v3892 : string = "vec![" + v51 + "]"
                    let v3893 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3892 
                    let v3894 : string = "leptos::prelude::IntoAny::into_any($0)"
                    let v3895 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v3893 v3894 
                    v3895
            let v3897 : string = "v3896"
            let v3898 : string = v3897 + v51 
            let v3899 : string = v3898 + v51 
            let v3900 : string = "v3628"
            let v3901 : string = v3900 + v3326 
            let v3902 : string = v3901 + v3899 
            let v3903 : string = "vec![" + v3902 + "]"
            let v3904 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v3903 
            let v3905 : string = "leptos::prelude::Fragment::new($0)"
            let v3906 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v3904 v3905 
            US22_0(v3906)
        | _ ->
            US22_1
    let v4855 : leptos_prelude_AnyView_ =
        match v4837 with
        | US22_1 -> (* None *)
            let v4850 : string = "vec![" + v51 + "]"
            let v4851 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4850 
            let v4852 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4853 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4851 v4852 
            v4853
        | US22_0(v4838) -> (* Some *)
            let v4839 : string = "class=\"flex flex-1 flex-col [overflow-y:auto]\""
            let v4840 : string = " " + v4839 + v51 + ""
            let v4841 : string = "leptos::prelude::AnyView::from($0)"
            let v4842 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4838 v4841 
            let v4843 : string = "div"
            let v4844 : string = "<" + v4843 + " " + v4840 + ">move || { v4842 }</" + v4843 + ">"
            let v4845 : string = "leptos::prelude::view! { " + v4844 + " }"
            let v4846 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4845 
            let v4847 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v4846 |> unbox
            let v4848 : string = "leptos::prelude::IntoAny::into_any($0)"
            let v4849 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4847 v4848 
            v4849
    let v4856 : string = "v4855"
    let v4857 : string = v4856 + v51 
    let v4858 : string = v4857 + v51 
    let v4859 : string = "vec![" + v4858 + "]"
    let v4860 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4859 
    let v4861 : string = "leptos::prelude::Fragment::new($0)"
    let v4862 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4860 v4861 
    let v4863 : string = "leptos::prelude::AnyView::from($0)"
    let v4864 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4862 v4863 
    let v4865 : string = "main"
    let v4866 : string = "<" + v4865 + " " + v1819 + ">move || { v4864 }</" + v4865 + ">"
    let v4867 : string = "leptos::prelude::view! { " + v4866 + " }"
    let v4868 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4867 
    let v4869 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Main>> = v4868 |> unbox
    let v4870 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v4871 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4869 v4870 
    let v4872 : string = "class=\"flex\""
    let v4873 : string = " " + v4872 + v51 + ""
    let v4874 : string = "menu_tabs.render ()"
    let v4875 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v4876 : bool = Fable.Core.RustInterop.emitRustExpr v4874 v4875 
    let v4877 : string = "leptos_router::hooks::use_location()"
    let v4878 : leptos_router_location_Location = Fable.Core.RustInterop.emitRustExpr () v4877 
    let v4879 : string = "leptos::prelude::ArcMemo::new(move |_| { $0() })"
    let v4880 : (unit -> string) = closure41(v4878)
    let v4881 : leptos_prelude_ArcMemo<string> = Fable.Core.RustInterop.emitRustExpr v4880 v4879 
    let v4882 : string = "class=\"hidden\""
    let v4883 : string = " " + v4882 + v51 + ""
    let v4884 : string = "for=\"Tab\""
    let v4885 : string = "class=\"sr-only\""
    let v4886 : string = " " + v4884 + v51 + ""
    let v4887 : string = " " + v4885 + v4886 + ""
    let v4888 : string = "Tab"
    (* run_target_args'
    let v4889 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4890 : string = "&*$0"
    let v4891 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4888 v4890 
    let _run_target_args'_v4889 = v4891 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4892 : string = "&*$0"
    let v4893 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4888 v4892 
    let _run_target_args'_v4889 = v4893 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4894 : string = "&*$0"
    let v4895 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4888 v4894 
    let _run_target_args'_v4889 = v4895 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4896 : Ref<Str> = v4888 |> unbox<Ref<Str>>
    let _run_target_args'_v4889 = v4896 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4899 : Ref<Str> = v4888 |> unbox<Ref<Str>>
    let _run_target_args'_v4889 = v4899 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4902 : Ref<Str> = v4888 |> unbox<Ref<Str>>
    let _run_target_args'_v4889 = v4902 
    #endif
#else
    let v4905 : Ref<Str> = v4888 |> unbox<Ref<Str>>
    let _run_target_args'_v4889 = v4905 
    #endif
    let v4908 : Ref<Str> = _run_target_args'_v4889 
    (* run_target_args'
    let v4913 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4914 : string = "String::from($0)"
    let v4915 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4908 v4914 
    let _run_target_args'_v4913 = v4915 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4916 : string = "String::from($0)"
    let v4917 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4908 v4916 
    let _run_target_args'_v4913 = v4917 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4918 : string = "String::from($0)"
    let v4919 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4908 v4918 
    let _run_target_args'_v4913 = v4919 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4920 : std_string_String = v4908 |> unbox<std_string_String>
    let _run_target_args'_v4913 = v4920 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4923 : std_string_String = v4908 |> unbox<std_string_String>
    let _run_target_args'_v4913 = v4923 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4926 : std_string_String = v4908 |> unbox<std_string_String>
    let _run_target_args'_v4913 = v4926 
    #endif
#else
    let v4929 : std_string_String = v4908 |> unbox<std_string_String>
    let _run_target_args'_v4913 = v4929 
    #endif
    let v4932 : std_string_String = _run_target_args'_v4913 
    let v4937 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v4938 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4932 v4937 
    let v4939 : string = "v4938"
    let v4940 : string = v4939 + v51 
    let v4941 : string = v4940 + v51 
    let v4942 : string = "vec![" + v4941 + "]"
    let v4943 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v4942 
    let v4944 : string = "leptos::prelude::Fragment::new($0)"
    let v4945 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v4943 v4944 
    let v4946 : string = "leptos::prelude::AnyView::from($0)"
    let v4947 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4945 v4946 
    let v4948 : string = "label"
    let v4949 : string = "<" + v4948 + " " + v4887 + ">move || { v4947 }</" + v4948 + ">"
    let v4950 : string = "leptos::prelude::view! { " + v4949 + " }"
    let v4951 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v4950 
    let v4952 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Label>> = v4951 |> unbox
    let v4953 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v4954 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v4952 v4953 
    let v4955 : string = "id=\"Tab\""
    let v4956 : string = "class=\"w-full rounded-md border-gray-200\""
    let v4957 : string = " " + v4955 + v51 + ""
    let v4958 : string = " " + v4956 + v4957 + ""
    let v4959 : (unit -> bool) = method285(v1509)
    let v4960 : string = "selected=v4959()"
    let v4961 : string = " " + v4960 + v51 + ""
    let v4962 : string = "Settings"
    (* run_target_args'
    let v4963 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4964 : string = "&*$0"
    let v4965 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4962 v4964 
    let _run_target_args'_v4963 = v4965 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4966 : string = "&*$0"
    let v4967 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4962 v4966 
    let _run_target_args'_v4963 = v4967 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4968 : string = "&*$0"
    let v4969 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4962 v4968 
    let _run_target_args'_v4963 = v4969 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4970 : Ref<Str> = v4962 |> unbox<Ref<Str>>
    let _run_target_args'_v4963 = v4970 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4973 : Ref<Str> = v4962 |> unbox<Ref<Str>>
    let _run_target_args'_v4963 = v4973 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4976 : Ref<Str> = v4962 |> unbox<Ref<Str>>
    let _run_target_args'_v4963 = v4976 
    #endif
#else
    let v4979 : Ref<Str> = v4962 |> unbox<Ref<Str>>
    let _run_target_args'_v4963 = v4979 
    #endif
    let v4982 : Ref<Str> = _run_target_args'_v4963 
    (* run_target_args'
    let v4987 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4988 : string = "String::from($0)"
    let v4989 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4982 v4988 
    let _run_target_args'_v4987 = v4989 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4990 : string = "String::from($0)"
    let v4991 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4982 v4990 
    let _run_target_args'_v4987 = v4991 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4992 : string = "String::from($0)"
    let v4993 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4982 v4992 
    let _run_target_args'_v4987 = v4993 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4994 : std_string_String = v4982 |> unbox<std_string_String>
    let _run_target_args'_v4987 = v4994 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4997 : std_string_String = v4982 |> unbox<std_string_String>
    let _run_target_args'_v4987 = v4997 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5000 : std_string_String = v4982 |> unbox<std_string_String>
    let _run_target_args'_v4987 = v5000 
    #endif
#else
    let v5003 : std_string_String = v4982 |> unbox<std_string_String>
    let _run_target_args'_v4987 = v5003 
    #endif
    let v5006 : std_string_String = _run_target_args'_v4987 
    let v5011 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v5012 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5006 v5011 
    let v5013 : string = "v5012"
    let v5014 : string = v5013 + v51 
    let v5015 : string = v5014 + v51 
    let v5016 : string = "vec![" + v5015 + "]"
    let v5017 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5016 
    let v5018 : string = "leptos::prelude::Fragment::new($0)"
    let v5019 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5017 v5018 
    let v5020 : string = "leptos::prelude::AnyView::from($0)"
    let v5021 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5019 v5020 
    let v5022 : string = "option"
    let v5023 : string = "<" + v5022 + " " + v4961 + ">move || { v5021 }</" + v5022 + ">"
    let v5024 : string = "leptos::prelude::view! { " + v5023 + " }"
    let v5025 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5024 
    let v5026 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v5025 |> unbox
    let v5027 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5028 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5026 v5027 
    let v5029 : (unit -> bool) = method286(v1509)
    let v5030 : string = "selected=v5029()"
    let v5031 : string = " " + v5030 + v51 + ""
    let v5032 : string = "Transactions"
    (* run_target_args'
    let v5033 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5034 : string = "&*$0"
    let v5035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5032 v5034 
    let _run_target_args'_v5033 = v5035 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5036 : string = "&*$0"
    let v5037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5032 v5036 
    let _run_target_args'_v5033 = v5037 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5038 : string = "&*$0"
    let v5039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5032 v5038 
    let _run_target_args'_v5033 = v5039 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5040 : Ref<Str> = v5032 |> unbox<Ref<Str>>
    let _run_target_args'_v5033 = v5040 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5043 : Ref<Str> = v5032 |> unbox<Ref<Str>>
    let _run_target_args'_v5033 = v5043 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5046 : Ref<Str> = v5032 |> unbox<Ref<Str>>
    let _run_target_args'_v5033 = v5046 
    #endif
#else
    let v5049 : Ref<Str> = v5032 |> unbox<Ref<Str>>
    let _run_target_args'_v5033 = v5049 
    #endif
    let v5052 : Ref<Str> = _run_target_args'_v5033 
    (* run_target_args'
    let v5057 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5058 : string = "String::from($0)"
    let v5059 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5052 v5058 
    let _run_target_args'_v5057 = v5059 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5060 : string = "String::from($0)"
    let v5061 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5052 v5060 
    let _run_target_args'_v5057 = v5061 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5062 : string = "String::from($0)"
    let v5063 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5052 v5062 
    let _run_target_args'_v5057 = v5063 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5064 : std_string_String = v5052 |> unbox<std_string_String>
    let _run_target_args'_v5057 = v5064 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5067 : std_string_String = v5052 |> unbox<std_string_String>
    let _run_target_args'_v5057 = v5067 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5070 : std_string_String = v5052 |> unbox<std_string_String>
    let _run_target_args'_v5057 = v5070 
    #endif
#else
    let v5073 : std_string_String = v5052 |> unbox<std_string_String>
    let _run_target_args'_v5057 = v5073 
    #endif
    let v5076 : std_string_String = _run_target_args'_v5057 
    let v5081 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v5082 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5076 v5081 
    let v5083 : string = "v5082"
    let v5084 : string = v5083 + v51 
    let v5085 : string = v5084 + v51 
    let v5086 : string = "vec![" + v5085 + "]"
    let v5087 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5086 
    let v5088 : string = "leptos::prelude::Fragment::new($0)"
    let v5089 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5087 v5088 
    let v5090 : string = "leptos::prelude::AnyView::from($0)"
    let v5091 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5089 v5090 
    let v5092 : string = "<" + v5022 + " " + v5031 + ">move || { v5091 }</" + v5022 + ">"
    let v5093 : string = "leptos::prelude::view! { " + v5092 + " }"
    let v5094 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5093 
    let v5095 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v5094 |> unbox
    let v5096 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5097 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5095 v5096 
    let v5098 : (unit -> bool) = method287(v1509)
    let v5099 : string = "selected=v5098()"
    let v5100 : string = " " + v5099 + v51 + ""
    let v5101 : string = "Lists"
    (* run_target_args'
    let v5102 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5103 : string = "&*$0"
    let v5104 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5101 v5103 
    let _run_target_args'_v5102 = v5104 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5105 : string = "&*$0"
    let v5106 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5101 v5105 
    let _run_target_args'_v5102 = v5106 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5107 : string = "&*$0"
    let v5108 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5101 v5107 
    let _run_target_args'_v5102 = v5108 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5109 : Ref<Str> = v5101 |> unbox<Ref<Str>>
    let _run_target_args'_v5102 = v5109 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5112 : Ref<Str> = v5101 |> unbox<Ref<Str>>
    let _run_target_args'_v5102 = v5112 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5115 : Ref<Str> = v5101 |> unbox<Ref<Str>>
    let _run_target_args'_v5102 = v5115 
    #endif
#else
    let v5118 : Ref<Str> = v5101 |> unbox<Ref<Str>>
    let _run_target_args'_v5102 = v5118 
    #endif
    let v5121 : Ref<Str> = _run_target_args'_v5102 
    (* run_target_args'
    let v5126 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5127 : string = "String::from($0)"
    let v5128 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5121 v5127 
    let _run_target_args'_v5126 = v5128 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5129 : string = "String::from($0)"
    let v5130 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5121 v5129 
    let _run_target_args'_v5126 = v5130 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5131 : string = "String::from($0)"
    let v5132 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5121 v5131 
    let _run_target_args'_v5126 = v5132 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5133 : std_string_String = v5121 |> unbox<std_string_String>
    let _run_target_args'_v5126 = v5133 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5136 : std_string_String = v5121 |> unbox<std_string_String>
    let _run_target_args'_v5126 = v5136 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5139 : std_string_String = v5121 |> unbox<std_string_String>
    let _run_target_args'_v5126 = v5139 
    #endif
#else
    let v5142 : std_string_String = v5121 |> unbox<std_string_String>
    let _run_target_args'_v5126 = v5142 
    #endif
    let v5145 : std_string_String = _run_target_args'_v5126 
    let v5150 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v5151 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5145 v5150 
    let v5152 : string = "v5151"
    let v5153 : string = v5152 + v51 
    let v5154 : string = v5153 + v51 
    let v5155 : string = "vec![" + v5154 + "]"
    let v5156 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5155 
    let v5157 : string = "leptos::prelude::Fragment::new($0)"
    let v5158 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5156 v5157 
    let v5159 : string = "leptos::prelude::AnyView::from($0)"
    let v5160 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5158 v5159 
    let v5161 : string = "<" + v5022 + " " + v5100 + ">move || { v5160 }</" + v5022 + ">"
    let v5162 : string = "leptos::prelude::view! { " + v5161 + " }"
    let v5163 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5162 
    let v5164 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v5163 |> unbox
    let v5165 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5166 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5164 v5165 
    let v5167 : (unit -> bool) = method288(v1509)
    let v5168 : string = "selected=v5167()"
    let v5169 : string = " " + v5168 + v51 + ""
    let v5170 : string = "Dice"
    (* run_target_args'
    let v5171 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5172 : string = "&*$0"
    let v5173 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5170 v5172 
    let _run_target_args'_v5171 = v5173 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5174 : string = "&*$0"
    let v5175 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5170 v5174 
    let _run_target_args'_v5171 = v5175 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5176 : string = "&*$0"
    let v5177 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5170 v5176 
    let _run_target_args'_v5171 = v5177 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5178 : Ref<Str> = v5170 |> unbox<Ref<Str>>
    let _run_target_args'_v5171 = v5178 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5181 : Ref<Str> = v5170 |> unbox<Ref<Str>>
    let _run_target_args'_v5171 = v5181 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5184 : Ref<Str> = v5170 |> unbox<Ref<Str>>
    let _run_target_args'_v5171 = v5184 
    #endif
#else
    let v5187 : Ref<Str> = v5170 |> unbox<Ref<Str>>
    let _run_target_args'_v5171 = v5187 
    #endif
    let v5190 : Ref<Str> = _run_target_args'_v5171 
    (* run_target_args'
    let v5195 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5196 : string = "String::from($0)"
    let v5197 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5190 v5196 
    let _run_target_args'_v5195 = v5197 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5198 : string = "String::from($0)"
    let v5199 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5190 v5198 
    let _run_target_args'_v5195 = v5199 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5200 : string = "String::from($0)"
    let v5201 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5190 v5200 
    let _run_target_args'_v5195 = v5201 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5202 : std_string_String = v5190 |> unbox<std_string_String>
    let _run_target_args'_v5195 = v5202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5205 : std_string_String = v5190 |> unbox<std_string_String>
    let _run_target_args'_v5195 = v5205 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5208 : std_string_String = v5190 |> unbox<std_string_String>
    let _run_target_args'_v5195 = v5208 
    #endif
#else
    let v5211 : std_string_String = v5190 |> unbox<std_string_String>
    let _run_target_args'_v5195 = v5211 
    #endif
    let v5214 : std_string_String = _run_target_args'_v5195 
    let v5219 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v5220 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5214 v5219 
    let v5221 : string = "v5220"
    let v5222 : string = v5221 + v51 
    let v5223 : string = v5222 + v51 
    let v5224 : string = "vec![" + v5223 + "]"
    let v5225 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5224 
    let v5226 : string = "leptos::prelude::Fragment::new($0)"
    let v5227 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5225 v5226 
    let v5228 : string = "leptos::prelude::AnyView::from($0)"
    let v5229 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5227 v5228 
    let v5230 : string = "<" + v5022 + " " + v5169 + ">move || { v5229 }</" + v5022 + ">"
    let v5231 : string = "leptos::prelude::view! { " + v5230 + " }"
    let v5232 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5231 
    let v5233 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Option>> = v5232 |> unbox
    let v5234 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5235 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5233 v5234 
    let v5236 : string = "v5028"
    let v5237 : string = v5236 + v51 
    let v5238 : string = v5237 + v51 
    let v5239 : string = "v5097"
    let v5240 : string = ", "
    let v5241 : string = v5239 + v5240 
    let v5242 : string = v5241 + v5238 
    let v5243 : string = "v5166"
    let v5244 : string = v5243 + v5240 
    let v5245 : string = v5244 + v5242 
    let v5246 : string = "v5235"
    let v5247 : string = v5246 + v5240 
    let v5248 : string = v5247 + v5245 
    let v5249 : string = "vec![" + v5248 + "]"
    let v5250 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5249 
    let v5251 : string = "leptos::prelude::Fragment::new($0)"
    let v5252 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5250 v5251 
    let v5253 : string = "leptos::prelude::AnyView::from($0)"
    let v5254 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5252 v5253 
    let v5255 : string = "select"
    let v5256 : string = "<" + v5255 + " " + v4958 + ">move || { v5254 }</" + v5255 + ">"
    let v5257 : string = "leptos::prelude::view! { " + v5256 + " }"
    let v5258 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5257 
    let v5259 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Select>> = v5258 |> unbox
    let v5260 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5261 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5259 v5260 
    let v5262 : string = "v5261"
    let v5263 : string = v5262 + v51 
    let v5264 : string = v5263 + v51 
    let v5265 : string = "v4954"
    let v5266 : string = v5265 + v5240 
    let v5267 : string = v5266 + v5264 
    let v5268 : string = "vec![" + v5267 + "]"
    let v5269 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5268 
    let v5270 : string = "leptos::prelude::Fragment::new($0)"
    let v5271 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5269 v5270 
    let v5272 : string = "leptos::prelude::AnyView::from($0)"
    let v5273 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5271 v5272 
    let v5274 : string = "div"
    let v5275 : string = "<" + v5274 + " " + v4883 + ">move || { v5273 }</" + v5274 + ">"
    let v5276 : string = "leptos::prelude::view! { " + v5275 + " }"
    let v5277 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5276 
    let v5278 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v5277 |> unbox
    let v5279 : string = "class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\""
    let v5280 : string = " " + v5279 + v51 + ""
    let v5281 : string = "class=\"flex flex-1 border-t border-gray-200\""
    let v5282 : string = " " + v5281 + v51 + ""
    let v5283 : string = "class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\""
    let v5284 : string = "aria-label=\"Tabs\""
    let v5285 : string = " " + v5283 + v51 + ""
    let v5286 : string = " " + v5284 + v5285 + ""
    let v5287 : string = "$0"
    let v5288 : (unit -> string) = closure348()
    let v5289 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v5288 v5287 
    let v5290 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v5291 : string = "fill=\"none\""
    let v5292 : string = "viewBox=\"0 0 24 24\""
    let v5293 : string = "stroke-width=\"1.5\""
    let v5294 : string = "stroke=\"currentColor\""
    let v5295 : string = "class=move || \" \".to_owned() + &v5289(())"
    let v5296 : string = " " + v5290 + v51 + ""
    let v5297 : string = " " + v5291 + v5296 + ""
    let v5298 : string = " " + v5292 + v5297 + ""
    let v5299 : string = " " + v5293 + v5298 + ""
    let v5300 : string = " " + v5294 + v5299 + ""
    let v5301 : string = " " + v5295 + v5300 + ""
    let v5302 : string = "stroke-linecap=\"round\""
    let v5303 : string = "stroke-linejoin=\"round\""
    let v5304 : string = "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\""
    let v5305 : string = " " + v5302 + v51 + ""
    let v5306 : string = " " + v5303 + v5305 + ""
    let v5307 : string = " " + v5304 + v5306 + ""
    let v5308 : string = "vec![" + v51 + "]"
    let v5309 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5308 
    let v5310 : string = "leptos::prelude::Fragment::new($0)"
    let v5311 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5309 v5310 
    let v5312 : string = "leptos::prelude::AnyView::from($0)"
    let v5313 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5311 v5312 
    let v5314 : string = "path"
    let v5315 : string = "<" + v5314 + " " + v5307 + ">move || { v5313 }</" + v5314 + ">"
    let v5316 : string = "leptos::prelude::view! { " + v5315 + " }"
    let v5317 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5316 
    let v5318 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v5317 |> unbox
    let v5319 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5320 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5318 v5319 
    let v5321 : string = "stroke-linecap=\"round\""
    let v5322 : string = "stroke-linejoin=\"round\""
    let v5323 : string = "d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\""
    let v5324 : string = " " + v5321 + v51 + ""
    let v5325 : string = " " + v5322 + v5324 + ""
    let v5326 : string = " " + v5323 + v5325 + ""
    let v5327 : string = "vec![" + v51 + "]"
    let v5328 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5327 
    let v5329 : string = "leptos::prelude::Fragment::new($0)"
    let v5330 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5328 v5329 
    let v5331 : string = "leptos::prelude::AnyView::from($0)"
    let v5332 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5330 v5331 
    let v5333 : string = "<" + v5314 + " " + v5326 + ">move || { v5332 }</" + v5314 + ">"
    let v5334 : string = "leptos::prelude::view! { " + v5333 + " }"
    let v5335 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5334 
    let v5336 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v5335 |> unbox
    let v5337 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5338 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5336 v5337 
    let v5339 : string = "v5338"
    let v5340 : string = v5339 + v51 
    let v5341 : string = v5340 + v51 
    let v5342 : string = "v5320"
    let v5343 : string = v5342 + v5240 
    let v5344 : string = v5343 + v5341 
    let v5345 : string = "vec![" + v5344 + "]"
    let v5346 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5345 
    let v5347 : string = "leptos::prelude::Fragment::new($0)"
    let v5348 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5346 v5347 
    let v5349 : string = "leptos::prelude::AnyView::from($0)"
    let v5350 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5348 v5349 
    let v5351 : string = "svg"
    let v5352 : string = "<" + v5351 + " " + v5301 + ">move || { v5350 }</" + v5351 + ">"
    let v5353 : string = "leptos::prelude::view! { " + v5352 + " }"
    let v5354 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5353 
    let v5355 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v5354 |> unbox
    let v5356 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5357 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5355 v5356 
    let v5358 : string = "v5357"
    let v5359 : string = v5358 + v51 
    let v5360 : string = v5359 + v51 
    let v5361 : string = "vec![" + v5360 + "]"
    let v5362 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5361 
    let v5363 : string = "leptos::prelude::Fragment::new($0)"
    let v5364 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5362 v5363 
    let v5365 : (unit -> std_string_String) = closure349(v4881)
    let v5366 : string = "let v5365 = $0"
    Fable.Core.RustInterop.emitRustExpr v5365 v5366 
    let v5367 : string = "$0"
    let v5368 : (unit -> bool) = closure350(v1509)
    let v5369 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v5368 v5367 
    let v5370 : string = "$0"
    let v5371 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure351(v1509)
    let v5372 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5371 v5370 
    let v5373 : string = "href=move || v5365()"
    let v5374 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5372(())"
    let v5375 : string = "aria-current=move || if v5369(()) { \"page\" } else { \"\" }"
    let v5376 : string = " " + v5373 + v51 + ""
    let v5377 : string = " " + v5374 + v5376 + ""
    let v5378 : string = " " + v5375 + v5377 + ""
    let v5379 : string = "leptos::prelude::AnyView::from($0)"
    let v5380 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5364 v5379 
    (* run_target_args'
    let v5381 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5382 : string = "&*$0"
    let v5383 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4962 v5382 
    let _run_target_args'_v5381 = v5383 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5384 : string = "&*$0"
    let v5385 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4962 v5384 
    let _run_target_args'_v5381 = v5385 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5386 : string = "&*$0"
    let v5387 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4962 v5386 
    let _run_target_args'_v5381 = v5387 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5388 : Ref<Str> = v4962 |> unbox<Ref<Str>>
    let _run_target_args'_v5381 = v5388 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5391 : Ref<Str> = v4962 |> unbox<Ref<Str>>
    let _run_target_args'_v5381 = v5391 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5394 : Ref<Str> = v4962 |> unbox<Ref<Str>>
    let _run_target_args'_v5381 = v5394 
    #endif
#else
    let v5397 : Ref<Str> = v4962 |> unbox<Ref<Str>>
    let _run_target_args'_v5381 = v5397 
    #endif
    let v5400 : Ref<Str> = _run_target_args'_v5381 
    (* run_target_args'
    let v5405 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5406 : string = "String::from($0)"
    let v5407 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5400 v5406 
    let _run_target_args'_v5405 = v5407 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5408 : string = "String::from($0)"
    let v5409 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5400 v5408 
    let _run_target_args'_v5405 = v5409 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5410 : string = "String::from($0)"
    let v5411 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5400 v5410 
    let _run_target_args'_v5405 = v5411 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5412 : std_string_String = v5400 |> unbox<std_string_String>
    let _run_target_args'_v5405 = v5412 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5415 : std_string_String = v5400 |> unbox<std_string_String>
    let _run_target_args'_v5405 = v5415 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5418 : std_string_String = v5400 |> unbox<std_string_String>
    let _run_target_args'_v5405 = v5418 
    #endif
#else
    let v5421 : std_string_String = v5400 |> unbox<std_string_String>
    let _run_target_args'_v5405 = v5421 
    #endif
    let v5424 : std_string_String = _run_target_args'_v5405 
    let v5429 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v5430 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5424 v5429 
    let v5431 : string = "v5430"
    let v5432 : string = v5431 + v51 
    let v5433 : string = v5432 + v51 
    let v5434 : string = "v5380"
    let v5435 : string = v5434 + v5240 
    let v5436 : string = v5435 + v5433 
    let v5437 : string = "vec![" + v5436 + "]"
    let v5438 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5437 
    let v5439 : string = "leptos::prelude::Fragment::new($0)"
    let v5440 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5438 v5439 
    let v5441 : string = "leptos::prelude::AnyView::from($0)"
    let v5442 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5440 v5441 
    let v5443 : string = "a"
    let v5444 : string = "<" + v5443 + " " + v5378 + ">move || { v5442 }</" + v5443 + ">"
    let v5445 : string = "leptos::prelude::view! { " + v5444 + " }"
    let v5446 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5445 
    let v5447 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v5446 |> unbox
    let v5448 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5449 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5447 v5448 
    let v5450 : string = "$0"
    let v5451 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v5288 v5450 
    let v5452 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v5453 : string = "fill=\"none\""
    let v5454 : string = "height=\"100%\""
    let v5455 : string = "viewBox=\"0 0 24 24\""
    let v5456 : string = "stroke-width=\"1.5\""
    let v5457 : string = "stroke=\"currentColor\""
    let v5458 : string = "class=move || \"text-gray-700 \".to_owned() + &v5451(())"
    let v5459 : string = " " + v5452 + v51 + ""
    let v5460 : string = " " + v5453 + v5459 + ""
    let v5461 : string = " " + v5454 + v5460 + ""
    let v5462 : string = " " + v5455 + v5461 + ""
    let v5463 : string = " " + v5456 + v5462 + ""
    let v5464 : string = " " + v5457 + v5463 + ""
    let v5465 : string = " " + v5458 + v5464 + ""
    let v5466 : string = "stroke-linecap=\"round\""
    let v5467 : string = "stroke-linejoin=\"round\""
    let v5468 : string = "d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\""
    let v5469 : string = " " + v5466 + v51 + ""
    let v5470 : string = " " + v5467 + v5469 + ""
    let v5471 : string = " " + v5468 + v5470 + ""
    let v5472 : string = "vec![" + v51 + "]"
    let v5473 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5472 
    let v5474 : string = "leptos::prelude::Fragment::new($0)"
    let v5475 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5473 v5474 
    let v5476 : string = "leptos::prelude::AnyView::from($0)"
    let v5477 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5475 v5476 
    let v5478 : string = "<" + v5314 + " " + v5471 + ">move || { v5477 }</" + v5314 + ">"
    let v5479 : string = "leptos::prelude::view! { " + v5478 + " }"
    let v5480 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5479 
    let v5481 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v5480 |> unbox
    let v5482 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5483 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5481 v5482 
    let v5484 : string = "v5483"
    let v5485 : string = v5484 + v51 
    let v5486 : string = v5485 + v51 
    let v5487 : string = "vec![" + v5486 + "]"
    let v5488 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5487 
    let v5489 : string = "leptos::prelude::Fragment::new($0)"
    let v5490 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5488 v5489 
    let v5491 : string = "leptos::prelude::AnyView::from($0)"
    let v5492 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5490 v5491 
    let v5493 : string = "<" + v5351 + " " + v5465 + ">move || { v5492 }</" + v5351 + ">"
    let v5494 : string = "leptos::prelude::view! { " + v5493 + " }"
    let v5495 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5494 
    let v5496 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v5495 |> unbox
    let v5497 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5498 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5496 v5497 
    let v5499 : string = "v5498"
    let v5500 : string = v5499 + v51 
    let v5501 : string = v5500 + v51 
    let v5502 : string = "vec![" + v5501 + "]"
    let v5503 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5502 
    let v5504 : string = "leptos::prelude::Fragment::new($0)"
    let v5505 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5503 v5504 
    let v5506 : (unit -> std_string_String) = closure352(v4881)
    let v5507 : string = "let v5506 = $0"
    Fable.Core.RustInterop.emitRustExpr v5506 v5507 
    let v5508 : string = "$0"
    let v5509 : (unit -> bool) = closure353(v1509)
    let v5510 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v5509 v5508 
    let v5511 : string = "$0"
    let v5512 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure354(v1509)
    let v5513 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5512 v5511 
    let v5514 : string = "href=move || v5506()"
    let v5515 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5513(())"
    let v5516 : string = "aria-current=move || if v5510(()) { \"page\" } else { \"\" }"
    let v5517 : string = " " + v5514 + v51 + ""
    let v5518 : string = " " + v5515 + v5517 + ""
    let v5519 : string = " " + v5516 + v5518 + ""
    let v5520 : string = "leptos::prelude::AnyView::from($0)"
    let v5521 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5505 v5520 
    (* run_target_args'
    let v5522 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5523 : string = "&*$0"
    let v5524 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5032 v5523 
    let _run_target_args'_v5522 = v5524 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5525 : string = "&*$0"
    let v5526 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5032 v5525 
    let _run_target_args'_v5522 = v5526 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5527 : string = "&*$0"
    let v5528 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5032 v5527 
    let _run_target_args'_v5522 = v5528 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5529 : Ref<Str> = v5032 |> unbox<Ref<Str>>
    let _run_target_args'_v5522 = v5529 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5532 : Ref<Str> = v5032 |> unbox<Ref<Str>>
    let _run_target_args'_v5522 = v5532 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5535 : Ref<Str> = v5032 |> unbox<Ref<Str>>
    let _run_target_args'_v5522 = v5535 
    #endif
#else
    let v5538 : Ref<Str> = v5032 |> unbox<Ref<Str>>
    let _run_target_args'_v5522 = v5538 
    #endif
    let v5541 : Ref<Str> = _run_target_args'_v5522 
    (* run_target_args'
    let v5546 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5547 : string = "String::from($0)"
    let v5548 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5541 v5547 
    let _run_target_args'_v5546 = v5548 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5549 : string = "String::from($0)"
    let v5550 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5541 v5549 
    let _run_target_args'_v5546 = v5550 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5551 : string = "String::from($0)"
    let v5552 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5541 v5551 
    let _run_target_args'_v5546 = v5552 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5553 : std_string_String = v5541 |> unbox<std_string_String>
    let _run_target_args'_v5546 = v5553 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5556 : std_string_String = v5541 |> unbox<std_string_String>
    let _run_target_args'_v5546 = v5556 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5559 : std_string_String = v5541 |> unbox<std_string_String>
    let _run_target_args'_v5546 = v5559 
    #endif
#else
    let v5562 : std_string_String = v5541 |> unbox<std_string_String>
    let _run_target_args'_v5546 = v5562 
    #endif
    let v5565 : std_string_String = _run_target_args'_v5546 
    let v5570 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v5571 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5565 v5570 
    let v5572 : string = "v5571"
    let v5573 : string = v5572 + v51 
    let v5574 : string = v5573 + v51 
    let v5575 : string = "v5521"
    let v5576 : string = v5575 + v5240 
    let v5577 : string = v5576 + v5574 
    let v5578 : string = "vec![" + v5577 + "]"
    let v5579 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5578 
    let v5580 : string = "leptos::prelude::Fragment::new($0)"
    let v5581 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5579 v5580 
    let v5582 : string = "leptos::prelude::AnyView::from($0)"
    let v5583 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5581 v5582 
    let v5584 : string = "<" + v5443 + " " + v5519 + ">move || { v5583 }</" + v5443 + ">"
    let v5585 : string = "leptos::prelude::view! { " + v5584 + " }"
    let v5586 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5585 
    let v5587 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v5586 |> unbox
    let v5588 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5589 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5587 v5588 
    let v5590 : string = "$0"
    let v5591 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v5288 v5590 
    let v5592 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v5593 : string = "fill=\"none\""
    let v5594 : string = "height=\"100%\""
    let v5595 : string = "viewBox=\"0 0 24 24\""
    let v5596 : string = "stroke-width=\"1.5\""
    let v5597 : string = "stroke=\"currentColor\""
    let v5598 : string = "class=move || \"text-gray-700 \".to_owned() + &v5591(())"
    let v5599 : string = " " + v5592 + v51 + ""
    let v5600 : string = " " + v5593 + v5599 + ""
    let v5601 : string = " " + v5594 + v5600 + ""
    let v5602 : string = " " + v5595 + v5601 + ""
    let v5603 : string = " " + v5596 + v5602 + ""
    let v5604 : string = " " + v5597 + v5603 + ""
    let v5605 : string = " " + v5598 + v5604 + ""
    let v5606 : string = "stroke-linecap=\"round\""
    let v5607 : string = "stroke-linejoin=\"round\""
    let v5608 : string = "d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\""
    let v5609 : string = " " + v5606 + v51 + ""
    let v5610 : string = " " + v5607 + v5609 + ""
    let v5611 : string = " " + v5608 + v5610 + ""
    let v5612 : string = "vec![" + v51 + "]"
    let v5613 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5612 
    let v5614 : string = "leptos::prelude::Fragment::new($0)"
    let v5615 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5613 v5614 
    let v5616 : string = "leptos::prelude::AnyView::from($0)"
    let v5617 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5615 v5616 
    let v5618 : string = "<" + v5314 + " " + v5611 + ">move || { v5617 }</" + v5314 + ">"
    let v5619 : string = "leptos::prelude::view! { " + v5618 + " }"
    let v5620 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5619 
    let v5621 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Path>> = v5620 |> unbox
    let v5622 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5623 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5621 v5622 
    let v5624 : string = "cx=\"3\""
    let v5625 : string = "cy=\"6.75\""
    let v5626 : string = "r=\"1\""
    let v5627 : string = "fill=\"currentColor\""
    let v5628 : string = " " + v5624 + v51 + ""
    let v5629 : string = " " + v5625 + v5628 + ""
    let v5630 : string = " " + v5626 + v5629 + ""
    let v5631 : string = " " + v5627 + v5630 + ""
    let v5632 : string = "vec![" + v51 + "]"
    let v5633 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5632 
    let v5634 : string = "leptos::prelude::Fragment::new($0)"
    let v5635 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5633 v5634 
    let v5636 : string = "leptos::prelude::AnyView::from($0)"
    let v5637 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5635 v5636 
    let v5638 : string = "circle"
    let v5639 : string = "<" + v5638 + " " + v5631 + ">move || { v5637 }</" + v5638 + ">"
    let v5640 : string = "leptos::prelude::view! { " + v5639 + " }"
    let v5641 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5640 
    let v5642 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v5641 |> unbox
    let v5643 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5644 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5642 v5643 
    let v5645 : string = "cx=\"3\""
    let v5646 : string = "cy=\"12\""
    let v5647 : string = "r=\"1\""
    let v5648 : string = "fill=\"currentColor\""
    let v5649 : string = " " + v5645 + v51 + ""
    let v5650 : string = " " + v5646 + v5649 + ""
    let v5651 : string = " " + v5647 + v5650 + ""
    let v5652 : string = " " + v5648 + v5651 + ""
    let v5653 : string = "vec![" + v51 + "]"
    let v5654 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5653 
    let v5655 : string = "leptos::prelude::Fragment::new($0)"
    let v5656 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5654 v5655 
    let v5657 : string = "leptos::prelude::AnyView::from($0)"
    let v5658 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5656 v5657 
    let v5659 : string = "<" + v5638 + " " + v5652 + ">move || { v5658 }</" + v5638 + ">"
    let v5660 : string = "leptos::prelude::view! { " + v5659 + " }"
    let v5661 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5660 
    let v5662 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v5661 |> unbox
    let v5663 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5664 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5662 v5663 
    let v5665 : string = "cx=\"3\""
    let v5666 : string = "cy=\"17.25\""
    let v5667 : string = "r=\"1\""
    let v5668 : string = "fill=\"currentColor\""
    let v5669 : string = " " + v5665 + v51 + ""
    let v5670 : string = " " + v5666 + v5669 + ""
    let v5671 : string = " " + v5667 + v5670 + ""
    let v5672 : string = " " + v5668 + v5671 + ""
    let v5673 : string = "vec![" + v51 + "]"
    let v5674 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5673 
    let v5675 : string = "leptos::prelude::Fragment::new($0)"
    let v5676 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5674 v5675 
    let v5677 : string = "leptos::prelude::AnyView::from($0)"
    let v5678 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5676 v5677 
    let v5679 : string = "<" + v5638 + " " + v5672 + ">move || { v5678 }</" + v5638 + ">"
    let v5680 : string = "leptos::prelude::view! { " + v5679 + " }"
    let v5681 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5680 
    let v5682 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v5681 |> unbox
    let v5683 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5684 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5682 v5683 
    let v5685 : string = "v5684"
    let v5686 : string = v5685 + v51 
    let v5687 : string = v5686 + v51 
    let v5688 : string = "v5664"
    let v5689 : string = v5688 + v5240 
    let v5690 : string = v5689 + v5687 
    let v5691 : string = "v5644"
    let v5692 : string = v5691 + v5240 
    let v5693 : string = v5692 + v5690 
    let v5694 : string = "v5623"
    let v5695 : string = v5694 + v5240 
    let v5696 : string = v5695 + v5693 
    let v5697 : string = "vec![" + v5696 + "]"
    let v5698 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5697 
    let v5699 : string = "leptos::prelude::Fragment::new($0)"
    let v5700 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5698 v5699 
    let v5701 : string = "leptos::prelude::AnyView::from($0)"
    let v5702 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5700 v5701 
    let v5703 : string = "<" + v5351 + " " + v5605 + ">move || { v5702 }</" + v5351 + ">"
    let v5704 : string = "leptos::prelude::view! { " + v5703 + " }"
    let v5705 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5704 
    let v5706 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v5705 |> unbox
    let v5707 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5708 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5706 v5707 
    let v5709 : string = "v5708"
    let v5710 : string = v5709 + v51 
    let v5711 : string = v5710 + v51 
    let v5712 : string = "vec![" + v5711 + "]"
    let v5713 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5712 
    let v5714 : string = "leptos::prelude::Fragment::new($0)"
    let v5715 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5713 v5714 
    let v5716 : (unit -> std_string_String) = closure355(v4881)
    let v5717 : string = "let v5716 = $0"
    Fable.Core.RustInterop.emitRustExpr v5716 v5717 
    let v5718 : string = "$0"
    let v5719 : (unit -> bool) = closure356(v1509)
    let v5720 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v5719 v5718 
    let v5721 : string = "$0"
    let v5722 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure357(v1509)
    let v5723 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5722 v5721 
    let v5724 : string = "href=move || v5716()"
    let v5725 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5723(())"
    let v5726 : string = "aria-current=move || if v5720(()) { \"page\" } else { \"\" }"
    let v5727 : string = " " + v5724 + v51 + ""
    let v5728 : string = " " + v5725 + v5727 + ""
    let v5729 : string = " " + v5726 + v5728 + ""
    let v5730 : string = "leptos::prelude::AnyView::from($0)"
    let v5731 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5715 v5730 
    (* run_target_args'
    let v5732 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5733 : string = "&*$0"
    let v5734 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5101 v5733 
    let _run_target_args'_v5732 = v5734 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5735 : string = "&*$0"
    let v5736 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5101 v5735 
    let _run_target_args'_v5732 = v5736 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5737 : string = "&*$0"
    let v5738 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5101 v5737 
    let _run_target_args'_v5732 = v5738 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5739 : Ref<Str> = v5101 |> unbox<Ref<Str>>
    let _run_target_args'_v5732 = v5739 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5742 : Ref<Str> = v5101 |> unbox<Ref<Str>>
    let _run_target_args'_v5732 = v5742 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5745 : Ref<Str> = v5101 |> unbox<Ref<Str>>
    let _run_target_args'_v5732 = v5745 
    #endif
#else
    let v5748 : Ref<Str> = v5101 |> unbox<Ref<Str>>
    let _run_target_args'_v5732 = v5748 
    #endif
    let v5751 : Ref<Str> = _run_target_args'_v5732 
    (* run_target_args'
    let v5756 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5757 : string = "String::from($0)"
    let v5758 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5751 v5757 
    let _run_target_args'_v5756 = v5758 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5759 : string = "String::from($0)"
    let v5760 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5751 v5759 
    let _run_target_args'_v5756 = v5760 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5761 : string = "String::from($0)"
    let v5762 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5751 v5761 
    let _run_target_args'_v5756 = v5762 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5763 : std_string_String = v5751 |> unbox<std_string_String>
    let _run_target_args'_v5756 = v5763 
    #endif
#if FABLE_COMPILER_PYTHON
    let v5766 : std_string_String = v5751 |> unbox<std_string_String>
    let _run_target_args'_v5756 = v5766 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v5769 : std_string_String = v5751 |> unbox<std_string_String>
    let _run_target_args'_v5756 = v5769 
    #endif
#else
    let v5772 : std_string_String = v5751 |> unbox<std_string_String>
    let _run_target_args'_v5756 = v5772 
    #endif
    let v5775 : std_string_String = _run_target_args'_v5756 
    let v5780 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v5781 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5775 v5780 
    let v5782 : string = "v5781"
    let v5783 : string = v5782 + v51 
    let v5784 : string = v5783 + v51 
    let v5785 : string = "v5731"
    let v5786 : string = v5785 + v5240 
    let v5787 : string = v5786 + v5784 
    let v5788 : string = "vec![" + v5787 + "]"
    let v5789 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5788 
    let v5790 : string = "leptos::prelude::Fragment::new($0)"
    let v5791 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5789 v5790 
    let v5792 : string = "leptos::prelude::AnyView::from($0)"
    let v5793 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5791 v5792 
    let v5794 : string = "<" + v5443 + " " + v5729 + ">move || { v5793 }</" + v5443 + ">"
    let v5795 : string = "leptos::prelude::view! { " + v5794 + " }"
    let v5796 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5795 
    let v5797 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v5796 |> unbox
    let v5798 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5799 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5797 v5798 
    let v5800 : string = "$0"
    let v5801 : (unit -> string) = Fable.Core.RustInterop.emitRustExpr v5288 v5800 
    let v5802 : string = "xmlns=\"http://www.w3.org/2000/svg\""
    let v5803 : string = "fill=\"none\""
    let v5804 : string = "viewBox=\"0 0 24 24\""
    let v5805 : string = "stroke-width=\"1.5\""
    let v5806 : string = "stroke=\"currentColor\""
    let v5807 : string = "class=move || \" \".to_owned() + &v5801(())"
    let v5808 : string = " " + v5802 + v51 + ""
    let v5809 : string = " " + v5803 + v5808 + ""
    let v5810 : string = " " + v5804 + v5809 + ""
    let v5811 : string = " " + v5805 + v5810 + ""
    let v5812 : string = " " + v5806 + v5811 + ""
    let v5813 : string = " " + v5807 + v5812 + ""
    let v5814 : string = "x=\"3\""
    let v5815 : string = "y=\"3\""
    let v5816 : string = "width=\"18\""
    let v5817 : string = "height=\"18\""
    let v5818 : string = "rx=\"2\""
    let v5819 : string = "stroke-linecap=\"round\""
    let v5820 : string = "stroke-linejoin=\"round\""
    let v5821 : string = " " + v5814 + v51 + ""
    let v5822 : string = " " + v5815 + v5821 + ""
    let v5823 : string = " " + v5816 + v5822 + ""
    let v5824 : string = " " + v5817 + v5823 + ""
    let v5825 : string = " " + v5818 + v5824 + ""
    let v5826 : string = " " + v5819 + v5825 + ""
    let v5827 : string = " " + v5820 + v5826 + ""
    let v5828 : string = "vec![" + v51 + "]"
    let v5829 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5828 
    let v5830 : string = "leptos::prelude::Fragment::new($0)"
    let v5831 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5829 v5830 
    let v5832 : string = "leptos::prelude::AnyView::from($0)"
    let v5833 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5831 v5832 
    let v5834 : string = "rect"
    let v5835 : string = "<" + v5834 + " " + v5827 + ">move || { v5833 }</" + v5834 + ">"
    let v5836 : string = "leptos::prelude::view! { " + v5835 + " }"
    let v5837 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5836 
    let v5838 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Rect>> = v5837 |> unbox
    let v5839 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5840 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5838 v5839 
    let v5841 : string = "cx=\"7.5\""
    let v5842 : string = "cy=\"7.5\""
    let v5843 : string = "r=\"1.5\""
    let v5844 : string = "fill=\"currentColor\""
    let v5845 : string = " " + v5841 + v51 + ""
    let v5846 : string = " " + v5842 + v5845 + ""
    let v5847 : string = " " + v5843 + v5846 + ""
    let v5848 : string = " " + v5844 + v5847 + ""
    let v5849 : string = "vec![" + v51 + "]"
    let v5850 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5849 
    let v5851 : string = "leptos::prelude::Fragment::new($0)"
    let v5852 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5850 v5851 
    let v5853 : string = "leptos::prelude::AnyView::from($0)"
    let v5854 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5852 v5853 
    let v5855 : string = "<" + v5638 + " " + v5848 + ">move || { v5854 }</" + v5638 + ">"
    let v5856 : string = "leptos::prelude::view! { " + v5855 + " }"
    let v5857 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5856 
    let v5858 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v5857 |> unbox
    let v5859 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5860 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5858 v5859 
    let v5861 : string = "cx=\"16.5\""
    let v5862 : string = "cy=\"7.5\""
    let v5863 : string = "r=\"1.5\""
    let v5864 : string = "fill=\"currentColor\""
    let v5865 : string = " " + v5861 + v51 + ""
    let v5866 : string = " " + v5862 + v5865 + ""
    let v5867 : string = " " + v5863 + v5866 + ""
    let v5868 : string = " " + v5864 + v5867 + ""
    let v5869 : string = "vec![" + v51 + "]"
    let v5870 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5869 
    let v5871 : string = "leptos::prelude::Fragment::new($0)"
    let v5872 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5870 v5871 
    let v5873 : string = "leptos::prelude::AnyView::from($0)"
    let v5874 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5872 v5873 
    let v5875 : string = "<" + v5638 + " " + v5868 + ">move || { v5874 }</" + v5638 + ">"
    let v5876 : string = "leptos::prelude::view! { " + v5875 + " }"
    let v5877 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5876 
    let v5878 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v5877 |> unbox
    let v5879 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5880 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5878 v5879 
    let v5881 : string = "cx=\"12\""
    let v5882 : string = "cy=\"12\""
    let v5883 : string = "r=\"1.5\""
    let v5884 : string = "fill=\"currentColor\""
    let v5885 : string = " " + v5881 + v51 + ""
    let v5886 : string = " " + v5882 + v5885 + ""
    let v5887 : string = " " + v5883 + v5886 + ""
    let v5888 : string = " " + v5884 + v5887 + ""
    let v5889 : string = "vec![" + v51 + "]"
    let v5890 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5889 
    let v5891 : string = "leptos::prelude::Fragment::new($0)"
    let v5892 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5890 v5891 
    let v5893 : string = "leptos::prelude::AnyView::from($0)"
    let v5894 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5892 v5893 
    let v5895 : string = "<" + v5638 + " " + v5888 + ">move || { v5894 }</" + v5638 + ">"
    let v5896 : string = "leptos::prelude::view! { " + v5895 + " }"
    let v5897 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5896 
    let v5898 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v5897 |> unbox
    let v5899 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5900 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5898 v5899 
    let v5901 : string = "cx=\"7.5\""
    let v5902 : string = "cy=\"16.5\""
    let v5903 : string = "r=\"1.5\""
    let v5904 : string = "fill=\"currentColor\""
    let v5905 : string = " " + v5901 + v51 + ""
    let v5906 : string = " " + v5902 + v5905 + ""
    let v5907 : string = " " + v5903 + v5906 + ""
    let v5908 : string = " " + v5904 + v5907 + ""
    let v5909 : string = "vec![" + v51 + "]"
    let v5910 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5909 
    let v5911 : string = "leptos::prelude::Fragment::new($0)"
    let v5912 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5910 v5911 
    let v5913 : string = "leptos::prelude::AnyView::from($0)"
    let v5914 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5912 v5913 
    let v5915 : string = "<" + v5638 + " " + v5908 + ">move || { v5914 }</" + v5638 + ">"
    let v5916 : string = "leptos::prelude::view! { " + v5915 + " }"
    let v5917 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5916 
    let v5918 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v5917 |> unbox
    let v5919 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5920 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5918 v5919 
    let v5921 : string = "cx=\"16.5\""
    let v5922 : string = "cy=\"16.5\""
    let v5923 : string = "r=\"1.5\""
    let v5924 : string = "fill=\"currentColor\""
    let v5925 : string = " " + v5921 + v51 + ""
    let v5926 : string = " " + v5922 + v5925 + ""
    let v5927 : string = " " + v5923 + v5926 + ""
    let v5928 : string = " " + v5924 + v5927 + ""
    let v5929 : string = "vec![" + v51 + "]"
    let v5930 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5929 
    let v5931 : string = "leptos::prelude::Fragment::new($0)"
    let v5932 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5930 v5931 
    let v5933 : string = "leptos::prelude::AnyView::from($0)"
    let v5934 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5932 v5933 
    let v5935 : string = "<" + v5638 + " " + v5928 + ">move || { v5934 }</" + v5638 + ">"
    let v5936 : string = "leptos::prelude::view! { " + v5935 + " }"
    let v5937 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5936 
    let v5938 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Circle>> = v5937 |> unbox
    let v5939 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5940 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5938 v5939 
    let v5941 : string = "v5940"
    let v5942 : string = v5941 + v51 
    let v5943 : string = v5942 + v51 
    let v5944 : string = "v5920"
    let v5945 : string = v5944 + v5240 
    let v5946 : string = v5945 + v5943 
    let v5947 : string = "v5900"
    let v5948 : string = v5947 + v5240 
    let v5949 : string = v5948 + v5946 
    let v5950 : string = "v5880"
    let v5951 : string = v5950 + v5240 
    let v5952 : string = v5951 + v5949 
    let v5953 : string = "v5860"
    let v5954 : string = v5953 + v5240 
    let v5955 : string = v5954 + v5952 
    let v5956 : string = "v5840"
    let v5957 : string = v5956 + v5240 
    let v5958 : string = v5957 + v5955 
    let v5959 : string = "vec![" + v5958 + "]"
    let v5960 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5959 
    let v5961 : string = "leptos::prelude::Fragment::new($0)"
    let v5962 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5960 v5961 
    let v5963 : string = "leptos::prelude::AnyView::from($0)"
    let v5964 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5962 v5963 
    let v5965 : string = "<" + v5351 + " " + v5813 + ">move || { v5964 }</" + v5351 + ">"
    let v5966 : string = "leptos::prelude::view! { " + v5965 + " }"
    let v5967 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v5966 
    let v5968 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_svg_Svg>> = v5967 |> unbox
    let v5969 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v5970 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5968 v5969 
    let v5971 : string = "v5970"
    let v5972 : string = v5971 + v51 
    let v5973 : string = v5972 + v51 
    let v5974 : string = "vec![" + v5973 + "]"
    let v5975 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v5974 
    let v5976 : string = "leptos::prelude::Fragment::new($0)"
    let v5977 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v5975 v5976 
    let v5978 : (unit -> std_string_String) = closure358(v4881)
    let v5979 : string = "let v5978 = $0"
    Fable.Core.RustInterop.emitRustExpr v5978 v5979 
    let v5980 : string = "$0"
    let v5981 : (unit -> bool) = closure359(v1509)
    let v5982 : (unit -> bool) = Fable.Core.RustInterop.emitRustExpr v5981 v5980 
    let v5983 : string = "$0"
    let v5984 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = closure360(v1509)
    let v5985 : (unit -> Ref<Lifetime<StaticLifetime, Str>>) = Fable.Core.RustInterop.emitRustExpr v5984 v5983 
    let v5986 : string = "href=move || v5978()"
    let v5987 : string = "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5985(())"
    let v5988 : string = "aria-current=move || if v5982(()) { \"page\" } else { \"\" }"
    let v5989 : string = " " + v5986 + v51 + ""
    let v5990 : string = " " + v5987 + v5989 + ""
    let v5991 : string = " " + v5988 + v5990 + ""
    let v5992 : string = "leptos::prelude::AnyView::from($0)"
    let v5993 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5977 v5992 
    (* run_target_args'
    let v5994 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v5995 : string = "&*$0"
    let v5996 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5170 v5995 
    let _run_target_args'_v5994 = v5996 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5997 : string = "&*$0"
    let v5998 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5170 v5997 
    let _run_target_args'_v5994 = v5998 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v5999 : string = "&*$0"
    let v6000 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v5170 v5999 
    let _run_target_args'_v5994 = v6000 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6001 : Ref<Str> = v5170 |> unbox<Ref<Str>>
    let _run_target_args'_v5994 = v6001 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6004 : Ref<Str> = v5170 |> unbox<Ref<Str>>
    let _run_target_args'_v5994 = v6004 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6007 : Ref<Str> = v5170 |> unbox<Ref<Str>>
    let _run_target_args'_v5994 = v6007 
    #endif
#else
    let v6010 : Ref<Str> = v5170 |> unbox<Ref<Str>>
    let _run_target_args'_v5994 = v6010 
    #endif
    let v6013 : Ref<Str> = _run_target_args'_v5994 
    (* run_target_args'
    let v6018 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v6019 : string = "String::from($0)"
    let v6020 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6013 v6019 
    let _run_target_args'_v6018 = v6020 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6021 : string = "String::from($0)"
    let v6022 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6013 v6021 
    let _run_target_args'_v6018 = v6022 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6023 : string = "String::from($0)"
    let v6024 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6013 v6023 
    let _run_target_args'_v6018 = v6024 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v6025 : std_string_String = v6013 |> unbox<std_string_String>
    let _run_target_args'_v6018 = v6025 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6028 : std_string_String = v6013 |> unbox<std_string_String>
    let _run_target_args'_v6018 = v6028 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v6031 : std_string_String = v6013 |> unbox<std_string_String>
    let _run_target_args'_v6018 = v6031 
    #endif
#else
    let v6034 : std_string_String = v6013 |> unbox<std_string_String>
    let _run_target_args'_v6018 = v6034 
    #endif
    let v6037 : std_string_String = _run_target_args'_v6018 
    let v6042 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v6043 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6037 v6042 
    let v6044 : string = "v6043"
    let v6045 : string = v6044 + v51 
    let v6046 : string = v6045 + v51 
    let v6047 : string = "v5993"
    let v6048 : string = v6047 + v5240 
    let v6049 : string = v6048 + v6046 
    let v6050 : string = "vec![" + v6049 + "]"
    let v6051 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6050 
    let v6052 : string = "leptos::prelude::Fragment::new($0)"
    let v6053 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v6051 v6052 
    let v6054 : string = "leptos::prelude::AnyView::from($0)"
    let v6055 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6053 v6054 
    let v6056 : string = "<" + v5443 + " " + v5991 + ">move || { v6055 }</" + v5443 + ">"
    let v6057 : string = "leptos::prelude::view! { " + v6056 + " }"
    let v6058 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6057 
    let v6059 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_A>> = v6058 |> unbox
    let v6060 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v6061 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6059 v6060 
    let v6062 : string = "v5449"
    let v6063 : string = v6062 + v51 
    let v6064 : string = v6063 + v51 
    let v6065 : string = "v5589"
    let v6066 : string = v6065 + v5240 
    let v6067 : string = v6066 + v6064 
    let v6068 : string = "v5799"
    let v6069 : string = v6068 + v5240 
    let v6070 : string = v6069 + v6067 
    let v6071 : string = "v6061"
    let v6072 : string = v6071 + v5240 
    let v6073 : string = v6072 + v6070 
    let v6074 : string = "vec![" + v6073 + "]"
    let v6075 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6074 
    let v6076 : string = "leptos::prelude::Fragment::new($0)"
    let v6077 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v6075 v6076 
    let v6078 : string = "leptos::prelude::AnyView::from($0)"
    let v6079 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6077 v6078 
    let v6080 : string = "nav"
    let v6081 : string = "<" + v6080 + " " + v5286 + ">move || { v6079 }</" + v6080 + ">"
    let v6082 : string = "leptos::prelude::view! { " + v6081 + " }"
    let v6083 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6082 
    let v6084 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Nav>> = v6083 |> unbox
    let v6085 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v6086 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6084 v6085 
    let v6087 : string = "v6086"
    let v6088 : string = v6087 + v51 
    let v6089 : string = v6088 + v51 
    let v6090 : string = "vec![" + v6089 + "]"
    let v6091 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6090 
    let v6092 : string = "leptos::prelude::Fragment::new($0)"
    let v6093 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v6091 v6092 
    let v6094 : string = "leptos::prelude::AnyView::from($0)"
    let v6095 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6093 v6094 
    let v6096 : string = "<" + v5274 + " " + v5282 + ">move || { v6095 }</" + v5274 + ">"
    let v6097 : string = "leptos::prelude::view! { " + v6096 + " }"
    let v6098 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6097 
    let v6099 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v6098 |> unbox
    let v6100 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v6101 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6099 v6100 
    let v6102 : string = "v6101"
    let v6103 : string = v6102 + v51 
    let v6104 : string = v6103 + v51 
    let v6105 : string = "vec![" + v6104 + "]"
    let v6106 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6105 
    let v6107 : string = "leptos::prelude::Fragment::new($0)"
    let v6108 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v6106 v6107 
    let v6109 : string = "leptos::prelude::AnyView::from($0)"
    let v6110 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6108 v6109 
    let v6111 : string = "<" + v5274 + " " + v5280 + ">move || { v6110 }</" + v5274 + ">"
    let v6112 : string = "leptos::prelude::view! { " + v6111 + " }"
    let v6113 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6112 
    let v6114 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v6113 |> unbox
    let v6115 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v6116 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6114 v6115 
    let v6117 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v6118 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v5278 v6117 
    let v6119 : string = "v6116"
    let v6120 : string = v6119 + v51 
    let v6121 : string = v6120 + v51 
    let v6122 : string = "v6118"
    let v6123 : string = v6122 + v5240 
    let v6124 : string = v6123 + v6121 
    let v6125 : string = "vec![" + v6124 + "]"
    let v6126 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6125 
    let v6127 : string = "leptos::prelude::Fragment::new($0)"
    let v6128 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v6126 v6127 
    let v6129 : string = "leptos::prelude::AnyView::from($0)"
    let v6130 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6128 v6129 
    let v6131 : string = "<" + v5274 + " " + v4873 + ">move || { v6130 }</" + v5274 + ">"
    let v6132 : string = "leptos::prelude::view! { " + v6131 + " }"
    let v6133 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6132 
    let v6134 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v6133 |> unbox
    let v6135 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v6136 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6134 v6135 
    let v6137 : string = "v6136"
    let v6138 : string = v6137 + v51 
    let v6139 : string = v6138 + v51 
    let v6140 : string = "v4871"
    let v6141 : string = v6140 + v5240 
    let v6142 : string = v6141 + v6139 
    let v6143 : string = "vec![" + v6142 + "]"
    let v6144 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6143 
    let v6145 : string = "leptos::prelude::Fragment::new($0)"
    let v6146 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v6144 v6145 
    let v6147 : string = "leptos::prelude::AnyView::from($0)"
    let v6148 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6146 v6147 
    let v6149 : string = "<" + v5274 + " " + v1817 + ">move || { v6148 }</" + v5274 + ">"
    let v6150 : string = "leptos::prelude::view! { " + v6149 + " }"
    let v6151 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6150 
    let v6152 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v6151 |> unbox
    let v6153 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v6154 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6152 v6153 
    let v6155 : string = "v6154"
    let v6156 : string = v6155 + v51 
    let v6157 : string = v6156 + v51 
    let v6158 : string = "vec![" + v6157 + "]"
    let v6159 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6158 
    let v6160 : string = "leptos::prelude::Fragment::new($0)"
    let v6161 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v6159 v6160 
    let v6162 : string = "leptos::prelude::AnyView::from($0)"
    let v6163 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6161 v6162 
    let v6164 : string = "<" + v5274 + " " + v1815 + ">move || { v6163 }</" + v5274 + ">"
    let v6165 : string = "leptos::prelude::view! { " + v6164 + " }"
    let v6166 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6165 
    let v6167 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v6166 |> unbox
    let v6168 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v6169 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6167 v6168 
    let v6170 : string = "v6169"
    let v6171 : string = v6170 + v51 
    let v6172 : string = v6171 + v51 
    let v6173 : string = "vec![" + v6172 + "]"
    let v6174 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v6173 
    let v6175 : string = "leptos::prelude::Fragment::new($0)"
    let v6176 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v6174 v6175 
    let v6177 : string = "leptos::prelude::AnyView::from($0)"
    let v6178 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v6176 v6177 
    let v6179 : string = "<" + v5274 + " " + v1490 + ">move || { v6178 }</" + v5274 + ">"
    let v6180 : string = "leptos::prelude::view! { " + v6179 + " }"
    let v6181 : Impl<leptos_IntoView> = Fable.Core.RustInterop.emitRustExpr () v6180 
    let v6182 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v6181 |> unbox
    v6182
and method5 () : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>) =
    closure5()
and method289 (v0 : std_string_String) : std_string_String =
    v0
and closure361 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 1
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "v3"
    let v5 : string = ""
    let v6 : string = v4 + v5 
    let v7 : string = v6 + v5 
    let v8 : string = "vec![" + v7 + "]"
    let v9 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "leptos::prelude::Fragment::new($0)"
    let v11 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "leptos::prelude::AnyView::from($0)"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    v13
and method290 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure361(v0)
and closure362 () () : leptos_dom_Fragment =
    let v0 : string = ""
    let v1 : string = "vec![" + v0 + "]"
    let v2 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "leptos::prelude::Fragment::new($0)"
    let v4 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v2 v3 
    v4
and closure363 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 2
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "v3"
    let v5 : string = ""
    let v6 : string = v4 + v5 
    let v7 : string = v6 + v5 
    let v8 : string = "vec![" + v7 + "]"
    let v9 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "leptos::prelude::Fragment::new($0)"
    let v11 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "leptos::prelude::AnyView::from($0)"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    v13
and method291 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure363(v0)
and closure364 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 3
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "v3"
    let v5 : string = ""
    let v6 : string = v4 + v5 
    let v7 : string = v6 + v5 
    let v8 : string = "vec![" + v7 + "]"
    let v9 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "leptos::prelude::Fragment::new($0)"
    let v11 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "leptos::prelude::AnyView::from($0)"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    v13
and method292 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure364(v0)
and closure365 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) () : leptos_prelude_AnyView_ =
    let v1 : leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>> = v0 4
    let v2 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v3 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "v3"
    let v5 : string = ""
    let v6 : string = v4 + v5 
    let v7 : string = v6 + v5 
    let v8 : string = "vec![" + v7 + "]"
    let v9 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "leptos::prelude::Fragment::new($0)"
    let v11 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "leptos::prelude::AnyView::from($0)"
    let v13 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v11 v12 
    v13
and method293 (v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>)) : (unit -> leptos_prelude_AnyView_) =
    closure365(v0)
and closure4 () () : Vec<leptos_prelude_View<leptos_router_NestedRoute>> =
    let v0 : (int32 -> leptos_prelude_View<leptos_dom_html_HtmlElement<leptos_html_Div>>) = method5()
    let v1 : string = ""
    (* run_target_args'
    let v2 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v3 
    let _run_target_args'_v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v5 
    let _run_target_args'_v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v7 
    let _run_target_args'_v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _run_target_args'_v2 = v18 
    #endif
    let v21 : Ref<Str> = _run_target_args'_v2 
    (* run_target_args'
    let v26 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _run_target_args'_v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _run_target_args'_v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _run_target_args'_v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _run_target_args'_v26 = v42 
    #endif
    let v45 : std_string_String = _run_target_args'_v26 
    let v50 : std_string_String = method289(v45)
    let v51 : (unit -> leptos_prelude_AnyView_) = method290(v0)
    let v52 : string = "path=leptos_router::path!(v50)"
    let v53 : string = "view= move || v51()"
    let v54 : (unit -> leptos_dom_Fragment) = closure362()
    let v55 : string = "children=Box::new(move || v54())"
    let v56 : string = " " + v52 + v1 + ""
    let v57 : string = " " + v53 + v56 + ""
    let v58 : string = " " + v55 + v57 + ""
    let v59 : string = "leptos_router::components::ParentRoute"
    let v60 : string = "<" + v59 + " " + v58 + " />"
    let v61 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v60 + " })"
    let v62 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v61 
    let v63 : string = "/"
    (* run_target_args'
    let v64 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v65 : string = "&*$0"
    let v66 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v65 
    let _run_target_args'_v64 = v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v67 : string = "&*$0"
    let v68 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v67 
    let _run_target_args'_v64 = v68 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v69 : string = "&*$0"
    let v70 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v63 v69 
    let _run_target_args'_v64 = v70 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v71 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _run_target_args'_v64 = v71 
    #endif
#if FABLE_COMPILER_PYTHON
    let v74 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _run_target_args'_v64 = v74 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v77 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _run_target_args'_v64 = v77 
    #endif
#else
    let v80 : Ref<Str> = v63 |> unbox<Ref<Str>>
    let _run_target_args'_v64 = v80 
    #endif
    let v83 : Ref<Str> = _run_target_args'_v64 
    (* run_target_args'
    let v88 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v89 
    let _run_target_args'_v88 = v90 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v91 
    let _run_target_args'_v88 = v92 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v93 : string = "String::from($0)"
    let v94 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v93 
    let _run_target_args'_v88 = v94 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v95 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v95 
    #endif
#if FABLE_COMPILER_PYTHON
    let v98 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v98 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v101 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v101 
    #endif
#else
    let v104 : std_string_String = v83 |> unbox<std_string_String>
    let _run_target_args'_v88 = v104 
    #endif
    let v107 : std_string_String = _run_target_args'_v88 
    let v112 : std_string_String = method289(v107)
    let v113 : (unit -> leptos_prelude_AnyView_) = method291(v0)
    let v114 : string = "path=leptos_router::path!(v112)"
    let v115 : string = "view= move || v113()"
    let v116 : string = "children=Box::new(move || v54())"
    let v117 : string = " " + v114 + v1 + ""
    let v118 : string = " " + v115 + v117 + ""
    let v119 : string = " " + v116 + v118 + ""
    let v120 : string = "<" + v59 + " " + v119 + " />"
    let v121 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v120 + " })"
    let v122 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v121 
    let v123 : string = "/*"
    (* run_target_args'
    let v124 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v125 : string = "&*$0"
    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v125 
    let _run_target_args'_v124 = v126 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = "&*$0"
    let v128 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v127 
    let _run_target_args'_v124 = v128 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v129 : string = "&*$0"
    let v130 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v123 v129 
    let _run_target_args'_v124 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v131 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _run_target_args'_v124 = v131 
    #endif
#if FABLE_COMPILER_PYTHON
    let v134 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _run_target_args'_v124 = v134 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v137 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _run_target_args'_v124 = v137 
    #endif
#else
    let v140 : Ref<Str> = v123 |> unbox<Ref<Str>>
    let _run_target_args'_v124 = v140 
    #endif
    let v143 : Ref<Str> = _run_target_args'_v124 
    (* run_target_args'
    let v148 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v149 : string = "String::from($0)"
    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v149 
    let _run_target_args'_v148 = v150 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v151 : string = "String::from($0)"
    let v152 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v151 
    let _run_target_args'_v148 = v152 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v153 : string = "String::from($0)"
    let v154 : std_string_String = Fable.Core.RustInterop.emitRustExpr v143 v153 
    let _run_target_args'_v148 = v154 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v155 : std_string_String = v143 |> unbox<std_string_String>
    let _run_target_args'_v148 = v155 
    #endif
#if FABLE_COMPILER_PYTHON
    let v158 : std_string_String = v143 |> unbox<std_string_String>
    let _run_target_args'_v148 = v158 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v161 : std_string_String = v143 |> unbox<std_string_String>
    let _run_target_args'_v148 = v161 
    #endif
#else
    let v164 : std_string_String = v143 |> unbox<std_string_String>
    let _run_target_args'_v148 = v164 
    #endif
    let v167 : std_string_String = _run_target_args'_v148 
    let v172 : std_string_String = method289(v167)
    let v173 : (unit -> leptos_prelude_AnyView_) = method292(v0)
    let v174 : string = "path=leptos_router::path!(v172)"
    let v175 : string = "view= move || v173()"
    let v176 : string = "children=Box::new(move || v54())"
    let v177 : string = " " + v174 + v1 + ""
    let v178 : string = " " + v175 + v177 + ""
    let v179 : string = " " + v176 + v178 + ""
    let v180 : string = "<" + v59 + " " + v179 + " />"
    let v181 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v180 + " })"
    let v182 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v181 
    let v183 : string = "*"
    (* run_target_args'
    let v184 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v185 : string = "&*$0"
    let v186 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v185 
    let _run_target_args'_v184 = v186 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v187 : string = "&*$0"
    let v188 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v187 
    let _run_target_args'_v184 = v188 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v189 : string = "&*$0"
    let v190 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v183 v189 
    let _run_target_args'_v184 = v190 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v191 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _run_target_args'_v184 = v191 
    #endif
#if FABLE_COMPILER_PYTHON
    let v194 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _run_target_args'_v184 = v194 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v197 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _run_target_args'_v184 = v197 
    #endif
#else
    let v200 : Ref<Str> = v183 |> unbox<Ref<Str>>
    let _run_target_args'_v184 = v200 
    #endif
    let v203 : Ref<Str> = _run_target_args'_v184 
    (* run_target_args'
    let v208 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v209 : string = "String::from($0)"
    let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v209 
    let _run_target_args'_v208 = v210 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v211 : string = "String::from($0)"
    let v212 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v211 
    let _run_target_args'_v208 = v212 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v213 : string = "String::from($0)"
    let v214 : std_string_String = Fable.Core.RustInterop.emitRustExpr v203 v213 
    let _run_target_args'_v208 = v214 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v215 : std_string_String = v203 |> unbox<std_string_String>
    let _run_target_args'_v208 = v215 
    #endif
#if FABLE_COMPILER_PYTHON
    let v218 : std_string_String = v203 |> unbox<std_string_String>
    let _run_target_args'_v208 = v218 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v221 : std_string_String = v203 |> unbox<std_string_String>
    let _run_target_args'_v208 = v221 
    #endif
#else
    let v224 : std_string_String = v203 |> unbox<std_string_String>
    let _run_target_args'_v208 = v224 
    #endif
    let v227 : std_string_String = _run_target_args'_v208 
    let v232 : std_string_String = method289(v227)
    let v233 : (unit -> leptos_prelude_AnyView_) = method293(v0)
    let v234 : string = "path=leptos_router::path!(v232)"
    let v235 : string = "view= move || v233()"
    let v236 : string = "children=Box::new(move || v54())"
    let v237 : string = " " + v234 + v1 + ""
    let v238 : string = " " + v235 + v237 + ""
    let v239 : string = " " + v236 + v238 + ""
    let v240 : string = "<" + v59 + " " + v239 + " />"
    let v241 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v240 + " })"
    let v242 : leptos_prelude_View<leptos_router_NestedRoute> = Fable.Core.RustInterop.emitRustExpr () v241 
    let v243 : string = "v242"
    let v244 : string = v243 + v1 
    let v245 : string = v244 + v1 
    let v246 : string = "v182"
    let v247 : string = ", "
    let v248 : string = v246 + v247 
    let v249 : string = v248 + v245 
    let v250 : string = "v122"
    let v251 : string = v250 + v247 
    let v252 : string = v251 + v249 
    let v253 : string = "v62"
    let v254 : string = v253 + v247 
    let v255 : string = v254 + v252 
    let v256 : string = "vec![" + v255 + "]"
    let v257 : Vec<leptos_prelude_View<leptos_router_NestedRoute>> = Fable.Core.RustInterop.emitRustExpr () v256 
    v257
and method4 () : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) =
    closure4()
and method294 (v0 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>)) : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) =
    v0
and closure3 () () : leptos_dom_Fragment =
    let v0 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) = method4()
    let v1 : (unit -> Vec<leptos_prelude_View<leptos_router_NestedRoute>>) = method294(v0)
    let v2 : string = "leptos.routes / fallback"
    (* run_target_args'
    let v3 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let _run_target_args'_v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v6 
    let _run_target_args'_v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let _run_target_args'_v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _run_target_args'_v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _run_target_args'_v3 = v13 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _run_target_args'_v3 = v16 
    #endif
#else
    let v19 : Ref<Str> = v2 |> unbox<Ref<Str>>
    let _run_target_args'_v3 = v19 
    #endif
    let v22 : Ref<Str> = _run_target_args'_v3 
    (* run_target_args'
    let v27 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v28 
    let _run_target_args'_v27 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v30 
    let _run_target_args'_v27 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v32 
    let _run_target_args'_v27 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_string_String = v22 |> unbox<std_string_String>
    let _run_target_args'_v27 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : std_string_String = v22 |> unbox<std_string_String>
    let _run_target_args'_v27 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v22 |> unbox<std_string_String>
    let _run_target_args'_v27 = v40 
    #endif
#else
    let v43 : std_string_String = v22 |> unbox<std_string_String>
    let _run_target_args'_v27 = v43 
    #endif
    let v46 : std_string_String = _run_target_args'_v27 
    let v51 : string = "leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view($0))"
    let v52 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v46 v51 
    let v53 : string = "fallback=move || v52"
    let v54 : string = "children=leptos::children::ToChildren::to_children(move || v1())"
    let v55 : string = ""
    let v56 : string = " " + v53 + v55 + ""
    let v57 : string = " " + v54 + v56 + ""
    let v58 : string = "leptos_router::components::Routes"
    let v59 : string = "<" + v58 + " " + v57 + " />"
    let v60 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v59 + " })"
    let v61 : leptos_prelude_View<_> = Fable.Core.RustInterop.emitRustExpr () v60 
    let v62 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v63 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v61 v62 
    let v64 : string = "v63"
    let v65 : string = v64 + v55 
    let v66 : string = v65 + v55 
    let v67 : string = "vec![" + v66 + "]"
    let v68 : Vec<leptos_prelude_AnyView_> = Fable.Core.RustInterop.emitRustExpr () v67 
    let v69 : string = "leptos::prelude::Fragment::new($0)"
    let v70 : leptos_dom_Fragment = Fable.Core.RustInterop.emitRustExpr v68 v69 
    v70
and closure2 () () : Impl<leptos_IntoView> =
    let v0 : string = "app.render ()"
    let v1 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "true; leptos_meta::provide_meta_context()"
    let v4 : bool = Fable.Core.RustInterop.emitRustExpr () v3 
    let v5 : string = $"leptos::prelude::ArcRwSignal::new($0)"
    let v6 : leptos_prelude_ArcRwSignal<bool> = Fable.Core.RustInterop.emitRustExpr false v5 
    let v7 : string = $"leptos::prelude::ArcRwSignal::new($0)"
    let v8 : leptos_prelude_ArcRwSignal<bool> = Fable.Core.RustInterop.emitRustExpr false v7 
    let v9 : string = ""
    (* run_target_args'
    let v10 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let _run_target_args'_v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v13 
    let _run_target_args'_v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v9 v15 
    let _run_target_args'_v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v9 |> unbox<Ref<Str>>
    let _run_target_args'_v10 = v26 
    #endif
    let v29 : Ref<Str> = _run_target_args'_v10 
    (* run_target_args'
    let v34 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v35 : string = "String::from($0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v35 
    let _run_target_args'_v34 = v36 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v37 : string = "String::from($0)"
    let v38 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v37 
    let _run_target_args'_v34 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v29 v39 
    let _run_target_args'_v34 = v40 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v41 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v34 = v41 
    #endif
#if FABLE_COMPILER_PYTHON
    let v44 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v34 = v44 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v47 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v34 = v47 
    #endif
#else
    let v50 : std_string_String = v29 |> unbox<std_string_String>
    let _run_target_args'_v34 = v50 
    #endif
    let v53 : std_string_String = _run_target_args'_v34 
    let v58 : string = $"leptos::prelude::ArcRwSignal::new($0)"
    let v59 : leptos_prelude_ArcRwSignal<std_string_String> = Fable.Core.RustInterop.emitRustExpr v53 v58 
    let v60 : string = "i574n.near"
    (* run_target_args'
    let v61 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v62 : string = "&*$0"
    let v63 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v62 
    let _run_target_args'_v61 = v63 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v64 : string = "&*$0"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v64 
    let _run_target_args'_v61 = v65 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v66 : string = "&*$0"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _run_target_args'_v61 = v67 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v68 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v68 
    #endif
#if FABLE_COMPILER_PYTHON
    let v71 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v71 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v74 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v74 
    #endif
#else
    let v77 : Ref<Str> = v60 |> unbox<Ref<Str>>
    let _run_target_args'_v61 = v77 
    #endif
    let v80 : Ref<Str> = _run_target_args'_v61 
    (* run_target_args'
    let v85 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v86 : string = "String::from($0)"
    let v87 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v86 
    let _run_target_args'_v85 = v87 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v88 : string = "String::from($0)"
    let v89 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v88 
    let _run_target_args'_v85 = v89 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v90 : string = "String::from($0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v80 v90 
    let _run_target_args'_v85 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v92 : std_string_String = v80 |> unbox<std_string_String>
    let _run_target_args'_v85 = v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : std_string_String = v80 |> unbox<std_string_String>
    let _run_target_args'_v85 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : std_string_String = v80 |> unbox<std_string_String>
    let _run_target_args'_v85 = v98 
    #endif
#else
    let v101 : std_string_String = v80 |> unbox<std_string_String>
    let _run_target_args'_v85 = v101 
    #endif
    let v104 : std_string_String = _run_target_args'_v85 
    let v109 : (bool * std_string_String) = true, v104 
    let v110 : string = "luckier.near"
    (* run_target_args'
    let v111 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v112 : string = "&*$0"
    let v113 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v112 
    let _run_target_args'_v111 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v114 : string = "&*$0"
    let v115 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v114 
    let _run_target_args'_v111 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v116 : string = "&*$0"
    let v117 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v110 v116 
    let _run_target_args'_v111 = v117 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _run_target_args'_v111 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v121 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _run_target_args'_v111 = v121 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v124 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _run_target_args'_v111 = v124 
    #endif
#else
    let v127 : Ref<Str> = v110 |> unbox<Ref<Str>>
    let _run_target_args'_v111 = v127 
    #endif
    let v130 : Ref<Str> = _run_target_args'_v111 
    (* run_target_args'
    let v135 : unit = ()
    run_target_args' *)
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v136 : string = "String::from($0)"
    let v137 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v136 
    let _run_target_args'_v135 = v137 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v138 : string = "String::from($0)"
    let v139 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v138 
    let _run_target_args'_v135 = v139 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : string = "String::from($0)"
    let v141 : std_string_String = Fable.Core.RustInterop.emitRustExpr v130 v140 
    let _run_target_args'_v135 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v142 : std_string_String = v130 |> unbox<std_string_String>
    let _run_target_args'_v135 = v142 
    #endif
#if FABLE_COMPILER_PYTHON
    let v145 : std_string_String = v130 |> unbox<std_string_String>
    let _run_target_args'_v135 = v145 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v148 : std_string_String = v130 |> unbox<std_string_String>
    let _run_target_args'_v135 = v148 
    #endif
#else
    let v151 : std_string_String = v130 |> unbox<std_string_String>
    let _run_target_args'_v135 = v151 
    #endif
    let v154 : std_string_String = _run_target_args'_v135 
    let v159 : (bool * std_string_String) = true, v154 
    let v160 : ((bool * std_string_String) []) = [|v109; v159|]
    let v161 : string = "$0.to_vec()"
    let v162 : Vec<(bool * std_string_String)> = Fable.Core.RustInterop.emitRustExpr v160 v161 
    let v163 : std_string_String option = None
    let v164 : US1 = US1_0
    let v165 : Heap0 = {l0 = v162; l1 = v163; l2 = 1; l3 = 1; l4 = v164} : Heap0
    let v166 : string = $"leptos::prelude::ArcRwSignal::new($0)"
    let v167 : leptos_prelude_ArcRwSignal<Heap0> = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let v168 : Heap1 = {l0 = v6; l1 = v8; l2 = v59; l3 = v167} : Heap1
    let v169 : string = $"leptos::prelude::ArcRwSignal::new($0)"
    let v170 : leptos_prelude_ArcRwSignal<Heap1> = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let v171 : string = "std::collections::HashMap::new()"
    let v172 : std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>> = Fable.Core.RustInterop.emitRustExpr () v171 
    let v173 : string = $"leptos::prelude::ArcRwSignal::new($0)"
    let v174 : leptos_prelude_ArcRwSignal<std_collections_HashMap<std_string_String, leptos_prelude_ArcRwSignal<bool>>> = Fable.Core.RustInterop.emitRustExpr v172 v173 
    let v175 : Heap2 = {l0 = v170; l1 = v174} : Heap2
    let v176 : string = $"true; leptos::context::provide_context::<std::sync::Arc<Heap2>>($0)"
    let v177 : bool = Fable.Core.RustInterop.emitRustExpr v175 v176 
    let v178 : (unit -> leptos_dom_Fragment) = closure3()
    let v179 : string = "children=Box::new(move || v178())"
    let v180 : string = " " + v179 + v9 + ""
    let v181 : string = "leptos_router::components::Router"
    let v182 : string = "<" + v181 + " " + v180 + " />"
    let v183 : string = "leptos::IntoView::into_view(leptos::prelude::view! { " + v182 + " })"
    let v184 : leptos_prelude_View<_> = Fable.Core.RustInterop.emitRustExpr () v183 
    let v185 : string = "leptos::prelude::IntoAny::into_any($0)"
    let v186 : leptos_prelude_AnyView_ = Fable.Core.RustInterop.emitRustExpr v184 v185 
    let v187 : Impl<leptos_IntoView> = v186 |> unbox
    v187
and method3 () : unit =
    let v0 : string = "true; leptos::prelude::mount_to_body(|| $0()); //"
    let v1 : (unit -> Impl<leptos_IntoView>) = closure2()
    let v2 : bool = Fable.Core.RustInterop.emitRustExpr v1 v0 
    ()
and closure366 () () : unit =
    method3()
and method295 () : (unit -> unit) =
    closure366()
and method296 (v0 : Box<Dyn<FnUnit>>) : Box<Dyn<FnUnit>> =
    v0
and closure0 () (v0 : (string [])) : int32 =
    let v1 : string = "main / args: " + string v0 + ""
    let v2 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr v1 v2 
    let v4 : string = "let _ = console_log::init_with_level(log::Level::Debug)"
    Fable.Core.RustInterop.emitRustExpr () v4 
    let v5 : string = "console_error_panic_hook::set_once()"
    Fable.Core.RustInterop.emitRustExpr () v5 
    let v6 : string = "leptos::prelude::document().body()"
    let v7 : web_sys_HtmlElement option = Fable.Core.RustInterop.emitRustExpr () v6 
    let v8 : (web_sys_HtmlElement -> US0) = method0()
    let v9 : US0 option = v7 |> Option.map v8 
    let v20 : US0 = US0_1
    let v21 : US0 = v9 |> Option.defaultValue v20 
    let v25 : string = $"%A{v21}"
    let v28 : string = "main / mount_to_body / body: " + string v25 + ""
    let v29 : string = @$"true; leptos::logging::log!(""{{}}"", $0)"
    let v30 : bool = Fable.Core.RustInterop.emitRustExpr v28 v29 
    match v21 with
    | US0_0(v31) -> (* Some *)
        let v32 : string = method1()
        (* run_target_args'
        let v33 : unit = ()
        run_target_args' *)
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v34 : string = "&*$0"
        let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v34 
        let _run_target_args'_v33 = v35 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v36 : string = "&*$0"
        let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v36 
        let _run_target_args'_v33 = v37 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v38 : string = "&*$0"
        let v39 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v32 v38 
        let _run_target_args'_v33 = v39 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v40 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _run_target_args'_v33 = v40 
        #endif
#if FABLE_COMPILER_PYTHON
        let v43 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _run_target_args'_v33 = v43 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v46 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _run_target_args'_v33 = v46 
        #endif
#else
        let v49 : Ref<Str> = v32 |> unbox<Ref<Str>>
        let _run_target_args'_v33 = v49 
        #endif
        let v52 : Ref<Str> = _run_target_args'_v33 
        let v57 : web_sys_HtmlElement = method2(v31)
        let v58 : string = "v57.set_inner_html($0)"
        Fable.Core.RustInterop.emitRustExpr v52 v58 
        method3()
    | _ ->
        let v59 : (unit -> unit) = method295()
        let v60 : string = "Box::new(move || v59())"
        let v61 : Box<Dyn<FnUnit>> = Fable.Core.RustInterop.emitRustExpr () v60 
        let v62 : Box<Dyn<FnUnit>> = method296(v61)
        let v63 : string = "wasm_bindgen::closure::Closure::wrap(v62)"
        let v64 : wasm_bindgen_closure_Closure<Dyn<FnUnit>> = Fable.Core.RustInterop.emitRustExpr () v63 
        let v65 : string = "wasm_bindgen::closure::Closure::as_ref(&v64)"
        let v66 : Ref<wasm_bindgen_JsValue> = Fable.Core.RustInterop.emitRustExpr () v65 
        let v67 : string = "wasm_bindgen::JsCast::unchecked_ref(v66)"
        let v68 : Ref<js_sys_Function> = Fable.Core.RustInterop.emitRustExpr () v67 
        let v69 : string = "leptos::prelude::document().add_event_listener_with_callback(\"DOMContentLoaded\", v68).unwrap()"
        Fable.Core.RustInterop.emitRustExpr () v69 
        let v70 : string = "v64.forget()"
        Fable.Core.RustInterop.emitRustExpr () v70 
        ()
    0
let v0 : ((string []) -> int32) = closure0()
let main args = v0 args
()
