#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_9c940d83 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::List_::List;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::ofArray as ofArray_1;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Native_::getNull;
        use fable_library_rust::Native_::on_startup;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        on_startup!();
        use leptos::prelude::*;
        //,);
        on_startup!();
        use leptos::prelude::ElementChild;
        //,);
        on_startup!();
        use leptos::prelude::ClassAttribute;
        //,);
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Hash,
            PartialEq,
            PartialOrd,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::prelude::ArcRwSignal<bool>,
            pub l1: leptos::prelude::ArcRwSignal<bool>,
            pub l2: leptos::prelude::ArcRwSignal<std::string::String>,
            pub l3: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::prelude::ArcRwSignal<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US2 {
            US2_0(std::sync::Arc<rexie::Rexie>),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US3_1,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(wasm_bindgen::JsValue),
            US4_1,
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(serde_json::Value),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US6_1(std::string::String),
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(LrcPtr<Dice_ui::Heap3>),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(Dice_ui::US8),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Option<web_sys::Storage>),
            US9_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(web_sys::Storage),
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Dice_ui::US11),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(Option<std::string::String>),
            US12_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(std::string::String),
            US14_1,
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Dice_ui::US14),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(Dice_ui::US14),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(leptos::prelude::ArcRwSignal<bool>),
            US16_1,
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US17 {
            US17_0(bool),
            US17_1,
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US19 {
            US19_0,
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US18 {
            US18_0,
            US18_1(Dice_ui::US19),
            US18_2,
            US18_3,
            US18_4,
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(leptos_router::location::Url),
            US20_1(std::string::String),
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US21 {
            US21_0(Dice_ui::US18),
            US21_1,
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(leptos::prelude::Fragment),
            US22_1,
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US23 {
            US23_0,
            US23_1,
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH0 {
            UH0_0,
            UH0_1(
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
                LrcPtr<Dice_ui::UH0>,
            ),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(Vec<string>, LrcPtr<Dice_ui::UH1>),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(LrcPtr<Dice_ui::Heap4>),
            US25_1,
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US26 {
            US26_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US26_1,
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Vec<Dice_ui::US25>),
            US28_1(std::string::String),
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Dice_ui::US28),
            US27_1,
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US31 {
            US31_0(string),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1(std::string::String),
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Dice_ui::US30),
            US29_1,
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(Dice_ui::US25),
            US32_1,
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Option<string>),
            US33_1(std::string::String),
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Vec<()>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Array<Dice_ui::US25>),
            US36_1(std::string::String),
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Dice_ui::US36),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Result<Vec<Option<string>>, std::string::String>),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Vec<Option<string>>),
            US39_1(std::string::String),
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US38 {
            US38_0(Dice_ui::US39),
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Vec<Dice_ui::US31>),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Dice_ui::US41),
            US40_1,
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0(Dice_ui::US31),
            US42_1,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq)]
        pub struct Heap5 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US45_1,
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(Dice_ui::US45),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US47_1,
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(Dice_ui::US47),
            US46_1(std::string::String),
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US49_1,
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Dice_ui::US49),
            US48_1(std::string::String),
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US50_1(std::string::String),
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
                LrcPtr<Dice_ui::UH2>,
            ),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<LrcPtr<Dice_ui::UH2>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US55 {
            US55_0(Array<(string, Dice_ui::US23, string, bool, bool)>),
            US55_1,
        }
        impl core::fmt::Display for US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Dice_ui::US55),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US56 {
            US56_0(Option<Array<(string, Dice_ui::US23, string, bool, bool)>>),
            US56_1(std::string::String),
        }
        impl core::fmt::Display for US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Dice_ui::US14),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US59_1,
        }
        impl core::fmt::Display for US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(Dice_ui::US59),
            US58_1(std::string::String),
        }
        impl core::fmt::Display for US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(crate::model::near::rpc::RpcResponse),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(Dice_ui::US58),
            US62_1,
        }
        impl core::fmt::Display for US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US63_1(std::string::String),
        }
        impl core::fmt::Display for US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US64_1,
        }
        impl core::fmt::Display for US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(leptos::prelude::ArcMemo<Dice_ui::US31>),
            US65_1,
        }
        impl core::fmt::Display for US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            ),
            US66_1,
        }
        impl core::fmt::Display for US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>),
            US67_1,
        }
        impl core::fmt::Display for US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(chrono::DateTime<chrono::Utc>),
            US68_1,
        }
        impl core::fmt::Display for US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US69 {
            US69_0(string),
            US69_1(string),
        }
        impl core::fmt::Display for US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US31>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US70 {
            US70_0(std::string::String),
            US70_1(std::string::String),
        }
        impl core::fmt::Display for US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method6() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure6((), v))
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method7() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure7((), v))
        }
        pub fn method8(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if (v2) <= (v0_1) {
                v1.clone()
            } else {
                let v9: f64 = (v0_1 as f64) / 2.0_f64;
                let v14: i64 = v9.ceil() as i64;
                let v21: i64 = v9.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some(((v14) - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some(((v2) - (v21)) as i32), Some(((v2) - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn closure8(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
         */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v8: */
                std::sync::Arc<rexie::Rexie>, /* = fable_library_rust::Native_::getZero();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v14: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v16: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v18: &std::sync::Arc<rexie::Rexie> = &v16.0;
                    let v20: &std::sync::Arc<rexie::Rexie> = &v14.0;
                    let v22: bool = std::sync::Arc::ptr_eq(v20, v18);
                    v22 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US2 {
            Dice_ui::US2::US2_0(v0_1)
        }
        pub fn method9() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US2> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure9((), v))
        }
        pub fn method10(
            v0_1: Func1<string, std::string::String>,
        ) -> Func1<string, std::string::String> {
            v0_1
        }
        pub fn closure10(
            v0_1: Func1<string, std::string::String>,
            v1: string,
        ) -> std::string::String {
            let v2: Func1<string, std::string::String> = Dice_ui::method10(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method11(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure11(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method12() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure11((), v))
        }
        pub fn method13() -> string {
            string("store")
        }
        pub fn closure12(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method14() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure12((), v))
        }
        pub fn method15() -> string {
            string("core-state-heap")
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method16() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn closure14(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method17() -> Func1<wasm_bindgen::JsValue, Dice_ui::US4> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure14((), v))
        }
        pub fn method18(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure15(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method19() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure15((), v))
        }
        pub fn closure16(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method20() -> Func1<serde_json::Value, Dice_ui::US5> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure16((), v))
        }
        pub fn method21(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method22() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method23() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure18((), v))
        }
        pub fn closure19(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method24() -> Func1<Option<Option<LrcPtr<Dice_ui::Heap3>>>, Dice_ui::US6> {
            Func1::new(move |v: Option<Option<LrcPtr<Dice_ui::Heap3>>>| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: std::string::String) -> Dice_ui::US6 {
            Dice_ui::US6::US6_1(v0_1)
        }
        pub fn method25() -> Func1<std::string::String, Dice_ui::US6> {
            Func1::new(move |v: std::string::String| Dice_ui::closure20((), v))
        }
        pub fn closure21(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method26() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US3> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure21((), v))
        }
        pub fn closure22(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn method27() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US8> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure22((), v))
        }
        pub fn method28() -> web_sys::Window {
            leptos::prelude::window()
        }
        pub fn method29(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure23(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method30() -> Func1<Option<web_sys::Storage>, Dice_ui::US9> {
            Func1::new(move |v: Option<web_sys::Storage>| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US9 {
            Dice_ui::US9::US9_1(v0_1)
        }
        pub fn method31() -> Func1<wasm_bindgen::JsValue, Dice_ui::US9> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure24((), v))
        }
        pub fn closure25(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US11 {
            Dice_ui::US11::US11_0(v0_1)
        }
        pub fn method32() -> Func1<web_sys::Storage, Dice_ui::US11> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure25((), v))
        }
        pub fn closure26(unitVar: (), v0_1: Dice_ui::US8) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method33() -> Func1<Dice_ui::US8, Dice_ui::US7> {
            Func1::new(move |v: Dice_ui::US8| Dice_ui::closure26((), v))
        }
        pub fn method34(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method35() -> string {
            string("core-state-heap")
        }
        pub fn closure27(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method36() -> Func1<Option<std::string::String>, Dice_ui::US12> {
            Func1::new(move |v: Option<std::string::String>| Dice_ui::closure27((), v))
        }
        pub fn closure28(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US12 {
            Dice_ui::US12::US12_1(v0_1)
        }
        pub fn method37() -> Func1<wasm_bindgen::JsValue, Dice_ui::US12> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure28((), v))
        }
        pub fn method38(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure29(unitVar: (), v0_1: std::string::String) -> Dice_ui::US14 {
            Dice_ui::US14::US14_0(v0_1)
        }
        pub fn method39() -> Func1<std::string::String, Dice_ui::US14> {
            Func1::new(move |v: std::string::String| Dice_ui::closure29((), v))
        }
        pub fn method41(v0_1: string) -> string {
            v0_1
        }
        pub fn closure31(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method42() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure31((), v))
        }
        pub fn closure30(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            let v3: string = Dice_ui::method41(fable_library_rust::String_::fromString(v0_1));
            let v12: &str = &*v3;
            let v41: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v12);
            let v42 = Dice_ui::method42();
            let v48: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v41.map_err(|x| v42(x));
            let v63: Option<LrcPtr<Dice_ui::Heap3>> = v48.ok();
            defaultValue(Dice_ui::US8::US8_1, map(Dice_ui::method27(), v63))
        }
        pub fn method40() -> Func1<std::string::String, Dice_ui::US8> {
            Func1::new(move |v: std::string::String| Dice_ui::closure30((), v))
        }
        pub fn closure32(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"
                )
            );
            v0_1.l0
        }
        pub fn closure33(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (8) / effect core_state_heap / debug signal_update"
                )
            );
            v0_1.l1
        }
        pub fn closure34(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"
                )
            );
            v0_1.l2.clone()
        }
        pub fn closure35(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (10) / effect core_state_heap / data signal_update"
                )
            );
            v0_1.l3.clone()
        }
        pub fn closure36(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>
        {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading new_arc_memo")
            );
            let v6: std::pin::Pin<
                Box<
                    leptos::prelude::ArcRwSignal<
                        std::collections::HashMap<
                            std::string::String,
                            leptos::prelude::ArcRwSignal<bool>,
                        >,
                    >,
                >,
            > = Box::pin(v0_1.l1.clone());
            leptos::prelude::ArcRwSignal::get_untracked(&v6)
        }
        pub fn method43() -> string {
            string("core-state-heap")
        }
        pub fn method44(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
        ) -> Func1<LrcPtr<Dice_ui::Heap3>, std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>>
        {
            v0_1
        }
        pub fn closure37(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = Dice_ui::method44(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method45(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure38(unitVar: (), v0_1: leptos::prelude::ArcRwSignal<bool>) -> Dice_ui::US16 {
            Dice_ui::US16::US16_0(v0_1)
        }
        pub fn method46() -> Func1<leptos::prelude::ArcRwSignal<bool>, Dice_ui::US16> {
            Func1::new(move |v: leptos::prelude::ArcRwSignal<bool>| Dice_ui::closure38((), v))
        }
        pub fn closure39(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"
                )
            );
            true
        }
        pub fn method47(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method48() -> string {
            string("core-state-heap")
        }
        pub fn method49(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure40(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method50(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure40(v0_1.clone(), ())
            })
        }
        pub fn closure41(v0_1: leptos_router::location::Location, unitVar: ()) -> string {
            let v2: leptos::prelude::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = leptos::prelude::Memo::get(&v2);
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::prelude::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = leptos::prelude::Memo::get(&v8);
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                (v6),
                (if (v12.clone()) == string("") {
                    string("")
                } else {
                    concat(new_array(&[string("?"), v12]))
                }),
            )
        }
        pub fn method51(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method52(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure42(unitVar: (), v0_1: leptos_router::location::Url) -> Dice_ui::US20 {
            Dice_ui::US20::US20_0(v0_1)
        }
        pub fn method53() -> Func1<leptos_router::location::Url, Dice_ui::US20> {
            Func1::new(move |v: leptos_router::location::Url| Dice_ui::closure42((), v))
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Dice_ui::US20 {
            Dice_ui::US20::US20_1(v0_1)
        }
        pub fn method54() -> Func1<std::string::String, Dice_ui::US20> {
            Func1::new(move |v: std::string::String| Dice_ui::closure43((), v))
        }
        pub fn closure45(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method55() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure45((), arg10_0040)
            })
        }
        pub fn method56(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure44(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v5.l3.clone());
            let v10: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v8);
            let v13: bool = true;
            let _vec_map: Vec<_> = v10
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    //;
                    let v15: LrcPtr<(bool, std::string::String)> = x;
                    let v25: bool = true;
                    v15.0.clone()
                })
                .collect::<Vec<_>>();
            let v27: Vec<(bool, std::string::String)> = _vec_map;
            let v28 = Dice_ui::method55();
            let v29: Vec<(bool, std::string::String)> = Dice_ui::method56(v27);
            let v31: Vec<(bool, std::string::String)> = v29
                .into_iter()
                .filter(|x| v28(x.clone().clone()))
                .collect::<Vec<_>>();
            let v33: bool = true;
            let _vec_map: Vec<_> = v31
                .into_iter()
                .map(|x| {
                    //;
                    let patternInput: (bool, std::string::String) = x;
                    let v38: bool = true;
                    patternInput.1.clone()
                })
                .collect::<Vec<_>>();
            let v40: Vec<std::string::String> = _vec_map;
            let v42: bool = true;
            let _vec_map: Vec<_> = v40
                .into_iter()
                .map(|x| {
                    //;
                    let v44: std::string::String = x;
                    let v46: string = fable_library_rust::String_::fromString(v44);
                    let v48: bool = true;
                    v46
                })
                .collect::<Vec<_>>();
            let v50: Vec<string> = _vec_map;
            let v57: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("use_transactions.render (2) / accounts new_arc_memo / result: "),
                        sprintf!("{:?}", v50.clone()),
                    )),
                    string(""),
                ),
            );
            let v59: bool = true;
            leptos::logging::log!("{}", v57);
            v50
        }
        pub fn method57(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure47(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
            v1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<string, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method57(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn closure46(
            v0_1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<string> = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v8: string = append(
                    (append(string("https://api3.nearblocks.io/v1/account/"), (value))),
                    string(""),
                );
                let v13: bool = true;
                (v8, Dice_ui::US23::US23_0, string(""), false, true) /*;
                let v15: bool = */
            }); //;
            let v17: Func1<string, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v3;
            let v20: Vec<(string, Dice_ui::US23, string, bool, bool)> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v17 = v17.clone();
                        move |v: string| Dice_ui::closure47(v17.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<(string, Dice_ui::US23, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v20.clone());
            let v29: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (3) / accounts_metadata new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v22.clone()),
                    )),
                    string(""),
                ),
            );
            let v31: bool = true;
            leptos::logging::log!("{}", v29);
            v22
        }
        pub fn method59(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn method58(v0_1: LrcPtr<Dice_ui::Heap0>) -> Vec<i32> {
            let v1: i32 = v0_1.l3;
            let v2: Array<i32> = new_init(&0_i32, v1);
            let v3: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method59(v1, v3.clone()) {
                let v5: i32 = v3.l0.get().clone();
                v2.get_mut()[v5 as usize] = v5;
                {
                    let v6: i32 = (v5) + 1_i32;
                    v3.l0.set(v6);
                    ()
                }
            }
            v2.clone().to_vec()
        }
        pub fn method60(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<i32, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure49(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
            v1: i32,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method60(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn method61(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
        ) -> Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            v0_1
        }
        pub fn closure50(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            v1: string,
        ) -> (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) {
            let v2: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                Dice_ui::method61(v0_1);
            let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure48(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v6.l3.clone());
            let v11: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v9);
            let v13: Vec<string> = leptos::prelude::ArcMemo::get(&v1);
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: string = value;
                let v19: Vec<i32> = Dice_ui::method58(v11);
                let v22: bool = true;
                let _func1_from_v20 = Func1::from(move |value| {
                    //;
                    let v26: string = append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string("https://api3.nearblocks.io/v1/account/"),
                                            (v18.clone()),
                                        )),
                                        string("/txns?&order=desc&page="),
                                    )),
                                    (toString((value) + 1_i32)),
                                )),
                                string("&per_page="),
                            )),
                            (toString(25_i32)),
                        )),
                        string(""),
                    );
                    let v31: bool = true;
                    (v26, Dice_ui::US23::US23_0, string(""), false, true) /*;
                    let v33: bool = */
                }); //;
                let v35: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v20;
                let v38: Vec<(string, Dice_ui::US23, string, bool, bool)> = v19
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v35 = v35.clone();
                            move |v: i32| Dice_ui::closure49(v35.clone(), v)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v41: bool = true;
                (v18, v38) /*;
                let v43: bool = */
            }); //;
            let v45: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                _func1_from_v14;
            let v48: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v45 = v45.clone();
                        move |v_1: string| Dice_ui::closure50(v45.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v55: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (4) / accounts_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v48.clone()),
                    )),
                    string(""),
                ),
            );
            let v57: bool = true;
            leptos::logging::log!("{}", v55);
            v48
        }
        pub fn method62(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
        ) -> Func1<
            (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
        > {
            v0_1
        }
        pub fn closure52(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v3: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = Dice_ui::method62(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure54(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
            v1: LrcPtr<Dice_ui::UH0>,
        ) -> LrcPtr<Dice_ui::UH0> {
            LrcPtr::new(Dice_ui::UH0::UH0_1(v0_1, v1))
        }
        pub fn closure53(
            unitVar: (),
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH0>| Dice_ui::closure54(v0_1.clone(), v)
            })
        }
        pub fn method63() -> Func1<
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
            Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>>,
        > {
            Func1::new(move |v: Vec<(string, Dice_ui::US23, string, bool, bool)>| {
                Dice_ui::closure53((), v)
            })
        }
        pub fn method65(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method66(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method64(
            v0_1: LrcPtr<Dice_ui::UH0>,
            v1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH0>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                MutCell::new(v1.clone());
            '_method64: loop {
                break '_method64 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH0::UH0_0 => v1.get().clone(),
                    Dice_ui::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method65(
                                match v0_1.get().clone().as_ref() {
                                    Dice_ui::UH0::UH0_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            );
                        let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method66(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH0> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH0::UH0_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<(string, Dice_ui::US23, string, bool, bool)> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method64;
                        }
                    }
                });
            }
        }
        pub fn closure51(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                patternInput.1.clone() /*;
                let v13: bool = */
            }); //;
            let v15: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = _func1_from_v3;
            let v18: Vec<Vec<(string, Dice_ui::US23, string, bool, bool)>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v15 = v15.clone();
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure52(v15.clone(), arg10_0040)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v21: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US23, string, bool, bool)>().to_vec();
            let v25: List<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v18.clone()));
            let v67: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method64(
                foldBack(
                    Func2::new(
                        move |b0: Vec<(string, Dice_ui::US23, string, bool, bool)>,
                              b1: LrcPtr<Dice_ui::UH0>| {
                            (Dice_ui::method63())(b0)(b1)
                        },
                    ),
                    v25,
                    LrcPtr::new(Dice_ui::UH0::UH0_0),
                ),
                v21,
            );
            let v74: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (5) / txns_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v67.clone()),
                    )),
                    string(""),
                ),
            );
            let v76: bool = true;
            leptos::logging::log!("{}", v74);
            v67
        }
        pub fn method67(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
        ) -> Func1<(string, Dice_ui::US23, string, bool, bool), string> {
            v0_1
        }
        pub fn closure56(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> string {
            let v6: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                Dice_ui::method67(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method68(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
        ) -> Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>
        {
            v0_1
        }
        pub fn closure57(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<string> {
            let v3: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>> =
                Dice_ui::method68(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure59(v0_1: Vec<string>, v1: LrcPtr<Dice_ui::UH1>) -> LrcPtr<Dice_ui::UH1> {
            LrcPtr::new(Dice_ui::UH1::UH1_1(v0_1, v1))
        }
        pub fn closure58(
            unitVar: (),
            v0_1: Vec<string>,
        ) -> Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH1>| Dice_ui::closure59(v0_1.clone(), v)
            })
        }
        pub fn method69() -> Func1<Vec<string>, Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>>> {
            Func1::new(move |v: Vec<string>| Dice_ui::closure58((), v))
        }
        pub fn method71(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method72(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method70(v0_1: LrcPtr<Dice_ui::UH1>, v1: Vec<string>) -> Vec<string> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH1>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<string>> = MutCell::new(v1.clone());
            '_method70: loop {
                break '_method70 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH1::UH1_0 => v1.get().clone(),
                    Dice_ui::UH1::UH1_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<string> = Dice_ui::method71(
                            match v0_1.get().clone().as_ref() {
                                Dice_ui::UH1::UH1_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v5: Vec<string> = Dice_ui::method72(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH1> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH1::UH1_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<string> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method70;
                        }
                    }
                });
            }
        }
        pub fn closure55(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                let _func1_from_v9 = Func1::from(move |value| {
                    //;
                    let patternInput_1: (string, Dice_ui::US23, string, bool, bool) = value;
                    let v20: bool = true;
                    patternInput.0.clone() /*;
                    let v22: bool = */
                }); //;
                let v24: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                    _func1_from_v9;
                let v27: Vec<string> = patternInput
                    .1
                    .clone()
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v24 = v24.clone();
                            move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                                Dice_ui::closure56(v24.clone(), arg10_0040)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v30: bool = true;
                v27 /*;
                let v32: bool = */
            }); //;
            let v34: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<string>,
            > = _func1_from_v3;
            let v37: Vec<Vec<string>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v34 = v34.clone();
                        move |arg10_0040_1: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure57(v34.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v40: Vec<string> = new_empty::<string>().to_vec();
            let v44: List<Vec<string>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v37.clone()));
            let v86: Vec<string> = Dice_ui::method70(
                foldBack(
                    Func2::new(move |b0: Vec<string>, b1: LrcPtr<Dice_ui::UH1>| {
                        (Dice_ui::method69())(b0)(b1)
                    }),
                    v44,
                    LrcPtr::new(Dice_ui::UH1::UH1_0),
                ),
                v40,
            );
            let v88: Array<string> = fable_library_rust::NativeArray_::array_from(v86.clone());
            let v95: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (6) / urls_accounts new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v88.clone()),
                    )),
                    string(""),
                ),
            );
            let v97: bool = true;
            leptos::logging::log!("{}", v95);
            v88
        }
        pub fn method73(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Action,
            (std::string::String, Option<std::string::String>),
        > {
            v0_1
        }
        pub fn closure61(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
            v1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            let v2: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            > = Dice_ui::method73(v0_1);
            let patternInput: (std::string::String, Option<std::string::String>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method74(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure62(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1.clone())
        }
        pub fn method75() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure62((), v))
        }
        pub fn method76(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Txn,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure63(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1: crate::model::near::nearblocks::Txn,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method76(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
            )
        }
        pub fn method77(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure60(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::nearblocks::Txn = value;
                let v9: std::string::String = v7.clone().receipt_id;
                let v11: std::string::String = v7.clone().predecessor_account_id;
                let v13: std::string::String = v7.clone().receiver_account_id;
                let v15: std::string::String = v7.clone().transaction_hash;
                let v17: std::string::String = v7.clone().included_in_block_hash;
                let v19: std::string::String = v7.clone().block_timestamp;
                let v21: crate::model::near::nearblocks::Block = v7.clone().block;
                let v23: u32 = v21.block_height;
                let v25: Vec<crate::model::near::nearblocks::Action> = v7.clone().actions;
                let v28: bool = true;
                let _func1_from_v26 = Func1::from(move |value| {
                    //;
                    let v30: crate::model::near::nearblocks::Action = value;
                    let v32: std::string::String = v30.clone().action;
                    let v34: Option<std::string::String> = v30.method;
                    let v37: bool = true;
                    (v32, v34) /*;
                    let v39: bool = */
                }); //;
                let v41: Func1<
                    crate::model::near::nearblocks::Action,
                    (std::string::String, Option<std::string::String>),
                > = _func1_from_v26;
                let v44: Vec<(std::string::String, Option<std::string::String>)> = v25
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v41 = v41.clone();
                            move |v: crate::model::near::nearblocks::Action| {
                                Dice_ui::closure61(v41.clone(), v)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v47: Array<(std::string::String, Option<std::string::String>)> =
                    Dice_ui::method74(fable_library_rust::NativeArray_::array_from(v44.clone()));
                let v49: crate::model::near::nearblocks::ActionsAgg = v7.clone().actions_agg;
                let v51: f64 = v49.deposit;
                let v53: crate::model::near::nearblocks::Outcomes = v7.clone().outcomes;
                let v55: bool = v53.status;
                let v57: crate::model::near::nearblocks::OutcomesAgg = v7.clone().outcomes_agg;
                let v59: f64 = v57.transaction_fee;
                let v61: Option<Vec<std::string::String>> = v7.logs;
                let v86: Array<std::string::String> = defaultValue(
                    new_empty::<std::string::String>(),
                    map(Dice_ui::method75(), v61),
                );
                let v91: bool = true;
                (v9, v11, v13, v15, v17, v19, v23, v47, v51, v55, v59, v86) /*;
                let v93: bool = */
            }); //;
            let v95: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = _func1_from_v3;
            let v98: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v95 = v95.clone();
                        move |v_1: crate::model::near::nearblocks::Txn| {
                            Dice_ui::closure63(v95.clone(), v_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            Dice_ui::method77(fable_library_rust::NativeArray_::array_from(v98.clone()))
        }
        pub fn closure64(
            v0_1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone());
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn method79(v0_1: string) -> string {
            v0_1
        }
        pub fn method80(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure65(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
            >,
        > {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            > = Dice_ui::method80(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method81(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure66(
            v0_1: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method29(Dice_ui::method28());
            let v6 = Dice_ui::method30();
            let v7 = Dice_ui::method31();
            let v9: Dice_ui::US9 = match &v5 {
                Err(v5_1_0) => v7(v5_1_0.clone()),
                Ok(v5_0_0) => v6(v5_0_0.clone()),
            };
            let v45: Dice_ui::US10 = match &v9 {
                Dice_ui::US9::US9_0(v9_0_0) => Dice_ui::US10::US10_0(defaultValue(
                    Dice_ui::US11::US11_1,
                    map(Dice_ui::method32(), v9_0_0.clone()),
                )),
                Dice_ui::US9::US9_1(v9_1_0) => Dice_ui::US10::US10_1(v9_1_0.clone()),
            };
            let v59: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US10::US10_0(v45_0_0) = &v45 {
                    if let Dice_ui::US11::US11_0(v45_0_0) = &v45_0_0 {
                        Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone())
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v66: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v59.clone()),
                    )),
                    string(""),
                ),
            );
            let v68: bool = true;
            leptos::logging::log!("{}", v66);
            v59
        }
        pub fn closure67(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method82()
        -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US26>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure67((), v)
                },
            )
        }
        pub fn closure68(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US24 {
            Dice_ui::US24::US24_0(v0_1)
        }
        pub fn method83() -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Dice_ui::US24> {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure68((), v))
        }
        pub fn closure69(unitVar: (), v0_1: std::string::String) -> Dice_ui::US24 {
            Dice_ui::US24::US24_1(v0_1)
        }
        pub fn method84() -> Func1<std::string::String, Dice_ui::US24> {
            Func1::new(move |v: std::string::String| Dice_ui::closure69((), v))
        }
        pub fn closure70(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn method85() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US25> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure70((), v))
        }
        pub fn closure73(unitVar: (), v0_1: Dice_ui::US25) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method87() -> Func1<Dice_ui::US25, Dice_ui::US32> {
            Func1::new(move |v: Dice_ui::US25| Dice_ui::closure73((), v))
        }
        pub fn method88(v0_1: Dice_ui::US23) -> Dice_ui::US23 {
            v0_1
        }
        pub fn method89(v0_1: string) -> string {
            v0_1
        }
        pub fn method90(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method91(v0_1: string) -> string {
            v0_1
        }
        pub fn method92(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method93(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method94(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure74(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method95() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure74((), v))
        }
        pub fn closure72(
            v0_1: Dice_ui::US27,
            v1: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US23 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(
                /*;
                let v10: bool = */
                async move {
                    /*;
                    let v12: bool = */
                    ();
                    let v69: Dice_ui::US29 = match &v0_1 {
                        Dice_ui::US27::US27_0(v0_1_0_0) => {
                            let v13: Dice_ui::US28 = match &v0_1 {
                                Dice_ui::US27::US27_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            Dice_ui::US29::US29_0(match &v13 {
                                Dice_ui::US28::US28_0(v13_0_0) => {
                                    let v17: Option<Dice_ui::US25> = tryItem(
                                        v1,
                                        fable_library_rust::NativeArray_::array_from(
                                            v13_0_0.clone().clone(),
                                        ),
                                    );
                                    let v42: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method87(), v17),
                                    );
                                    let v52: Dice_ui::US25 =
                                        if let Dice_ui::US32::US32_0(v42_0_0) = &v42 {
                                            let v46: Dice_ui::US25 = v42_0_0.clone();
                                            if let Dice_ui::US25::US25_0(v46_0_0) = &v46 {
                                                Dice_ui::US25::US25_0(v46_0_0.clone())
                                            } else {
                                                Dice_ui::US25::US25_1
                                            }
                                        } else {
                                            Dice_ui::US25::US25_1
                                        };
                                    Dice_ui::US30::US30_0(match &v52 {
                                        Dice_ui::US25::US25_0(v52_0_0) => Dice_ui::US31::US31_0(
                                            fable_library_rust::String_::fromString(
                                                (match &v52 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                                .l0
                                                .clone(),
                                            ),
                                        ),
                                        _ => Dice_ui::US31::US31_1,
                                    })
                                }
                                Dice_ui::US28::US28_1(v13_1_0) => {
                                    Dice_ui::US30::US30_1(v13_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US29::US29_1,
                    };
                    let v75: string =
                        Dice_ui::method8(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                    let v81: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v0_1.clone()));
                    let v87: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v69.clone()));
                    let v112: bool = if v6 {
                        true
                    } else {
                        if let Dice_ui::US27::US27_0(v0_1_0_0) = &v0_1 {
                            let v88: Dice_ui::US28 = v0_1_0_0.clone();
                            if let Dice_ui::US28::US28_0(v88_0_0) = &v88 {
                                if (get_Count(fable_library_rust::NativeArray_::array_from(
                                    v88_0_0.clone().clone(),
                                ))) == 0_i32
                                {
                                    false
                                } else {
                                    if let Dice_ui::US29::US29_0(v69_0_0) = &v69 {
                                        let v94: Dice_ui::US30 = v69_0_0.clone();
                                        if let Dice_ui::US30::US30_0(v94_0_0) = &v94 {
                                            if let Dice_ui::US31::US31_1 = &v94_0_0 {
                                                true
                                            } else {
                                                false
                                            }
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                }
                            } else {
                                if let Dice_ui::US29::US29_0(v69_0_0) = &v69 {
                                    let v100: Dice_ui::US30 = v69_0_0.clone();
                                    if let Dice_ui::US30::US30_0(v100_0_0) = &v100 {
                                        if let Dice_ui::US31::US31_1 = &v100_0_0 {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US29::US29_0(v69_0_0) = &v69 {
                                let v106: Dice_ui::US30 = v69_0_0.clone();
                                if let Dice_ui::US30::US30_0(v106_0_0) = &v106 {
                                    if let Dice_ui::US31::US31_1 = &v106_0_0 {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    };
                    let v113: string = append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append(
                                                    string(
                                                        "state_core.use_requests (9) / result memo / state_data: ",
                                                    ),
                                                    (v81),
                                                )),
                                                string(" / state_data\': "),
                                            )),
                                            (v87),
                                        )),
                                        string(" / request: "),
                                    )),
                                    (v75),
                                )),
                                string(" / should_fetch: "),
                            )),
                            (ofBoolean(v112)),
                        )),
                        string(""),
                    );
                    let v115: bool = true;
                    leptos::logging::log!("{}", v113);
                    let v559: Dice_ui::US33 = if (v112) == false {
                        Dice_ui::US33::US33_0(None::<string>)
                    } else {
                        let v122: Dice_ui::US23 = Dice_ui::method88(v3);
                        let v276: reqwest_wasm::RequestBuilder = match &v122 {
                            Dice_ui::US23::US23_1 => {
                                let v199: string = Dice_ui::method91(v2.clone());
                                let v208: &str = &*v199;
                                let v272: std::string::String =
                                    Dice_ui::method92(String::from(v208));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .post(v272)
                            }
                            _ => {
                                let v123: string = Dice_ui::method89(v2.clone());
                                let v132: &str = &*v123;
                                let v196: std::string::String =
                                    Dice_ui::method90(String::from(v132));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .get(v196)
                            }
                        };
                        let v285: &str = &*_arg.2.clone();
                        let v321: std::string::String = String::from(v285);
                        let v350: reqwest_wasm::RequestBuilder =
                            reqwest_wasm::RequestBuilder::body(v276, v321);
                        let v507: reqwest_wasm::RequestBuilder =
                            Dice_ui::method94(if (v5) == false {
                                v350
                            } else {
                                let v355: std::string::String =
                                    reqwest_wasm::header::CONTENT_TYPE.to_string();
                                let v357: string = fable_library_rust::String_::fromString(v355);
                                let v358: reqwest_wasm::RequestBuilder = Dice_ui::method93(v350);
                                let v367: &str = &*v357;
                                let v403: std::string::String = String::from(v367);
                                let v440: &str = &*string("application/json");
                                let v476: std::string::String = String::from(v440);
                                reqwest_wasm::RequestBuilder::header(v358, v403, v476)
                            });
                        let v509: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<
                                            reqwest_wasm::Response,
                                            reqwest_wasm::Error,
                                        >,
                                    >,
                            >,
                        > = Box::pin(reqwest_wasm::RequestBuilder::send(v507));
                        let v511: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v509.await;
                        let v512 = Dice_ui::method95();
                        let v518: Result<reqwest_wasm::Response, std::string::String> =
                            v511.map_err(|x| v512(x));
                        let v529: reqwest_wasm::Response = v518?;
                        let v531: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<std::string::String, reqwest_wasm::Error>,
                                    >,
                            >,
                        > = Box::pin(reqwest_wasm::Response::text(v529));
                        let v533: Result<std::string::String, reqwest_wasm::Error> = v531.await;
                        let v534 = Dice_ui::method95();
                        let v540: Result<std::string::String, std::string::String> =
                            v533.map_err(|x| v534(x));
                        let v551: std::string::String = v540?;
                        Dice_ui::US33::US33_0(Some(fable_library_rust::String_::fromString(v551)))
                    };
                    let v571: Result<Option<string>, std::string::String> = match &v559 {
                        Dice_ui::US33::US33_0(v559_0_0) => {
                            Ok::<Option<string>, std::string::String>(v559_0_0.clone())
                        }
                        Dice_ui::US33::US33_1(v559_1_0) => {
                            Err::<Option<string>, std::string::String>(v559_1_0.clone())
                        }
                    };
                    let v574: string = string("}");
                    let v581: bool = true;
                    let _fix_closure_v576 = v571;
                    let v585: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v576 "), (v574))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v586: bool = true;
                    _fix_closure_v576
                },
            ); // rust.fix_closure';
            let v588 = __future_init;
            v588
        }
        pub fn closure71(
            v0_1: Dice_ui::US27,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure72(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method86(
            v0_1: Dice_ui::US27,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Option<string>, std::string::String>,
                            >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure71(v0_1.clone(), v)
            })
        }
        pub fn method96(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method97(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Option<string>, std::string::String>,
                            >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method98(v0_1: string) -> string {
            v0_1
        }
        pub fn closure75(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method99() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure75((), v))
        }
        pub fn method100(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn closure76(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            > = Dice_ui::method100(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method101(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method102(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap4>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure77(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = Dice_ui::method102(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US37 {
            Dice_ui::US37::US37_0(v0_1)
        }
        pub fn method103() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US37>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure79((), v)
            })
        }
        pub fn closure80(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US39 {
            Dice_ui::US39::US39_0(v0_1)
        }
        pub fn method104() -> Func1<Vec<Option<string>>, Dice_ui::US39> {
            Func1::new(move |v: Vec<Option<string>>| Dice_ui::closure80((), v))
        }
        pub fn closure81(unitVar: (), v0_1: std::string::String) -> Dice_ui::US39 {
            Dice_ui::US39::US39_1(v0_1)
        }
        pub fn method105() -> Func1<std::string::String, Dice_ui::US39> {
            Func1::new(move |v: std::string::String| Dice_ui::closure81((), v))
        }
        pub fn closure82(unitVar: (), v0_1: string) -> Dice_ui::US31 {
            Dice_ui::US31::US31_0(v0_1)
        }
        pub fn method106() -> Func1<string, Dice_ui::US31> {
            Func1::new(move |v: string| Dice_ui::closure82((), v))
        }
        pub fn closure85(unitVar: (), v0_1: Dice_ui::US31) -> Dice_ui::US42 {
            Dice_ui::US42::US42_0(v0_1)
        }
        pub fn method108() -> Func1<Dice_ui::US31, Dice_ui::US42> {
            Func1::new(move |v: Dice_ui::US31| Dice_ui::closure85((), v))
        }
        pub fn closure86(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method109()
        -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure86((), v))
        }
        pub fn method110(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure84(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v62: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v35: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v45: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v35_0_0) = &v35 {
                                let v39: Dice_ui::US25 = v35_0_0.clone();
                                if let Dice_ui::US25::US25_0(v39_0_0) = &v39 {
                                    Dice_ui::US25::US25_0(v39_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v45 {
                                Dice_ui::US25::US25_0(v45_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v45 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v75: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v62.clone()))),
                )),
                string(""),
            );
            let v77: bool = true;
            leptos::logging::log!("{}", v75);
            let v84: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v86: bool = true;
            leptos::logging::log!("{}", v84);
            let v129: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v90: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v115: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v90));
                    if let Dice_ui::US42::US42_0(v115_0_0) = &v115 {
                        let v119: Dice_ui::US31 = v115_0_0.clone();
                        if let Dice_ui::US31::US31_0(v119_0_0) = &v119 {
                            Dice_ui::US31::US31_0(v119_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v129_0_0) = &v129 {
                let v131: string = Dice_ui::method41(v129_0_0.clone());
                let v140: &str = &*v131;
                let v169: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v140);
                let v170 = Dice_ui::method42();
                let v176: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v169.map_err(|x| v170(x));
                let v186 = Dice_ui::method109();
                let v187: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method110(v176);
                v187.map(|x| v186(x))
            } else {
                if let Dice_ui::US29::US29_0(v62_0_0) = &v62 {
                    let v190: Dice_ui::US30 = v62_0_0.clone();
                    if let Dice_ui::US30::US30_0(v190_0_0) = &v190 {
                        let v191: Dice_ui::US31 = v190_0_0.clone();
                        if let Dice_ui::US31::US31_0(v191_0_0) = &v191 {
                            let v193: string = Dice_ui::method41(v191_0_0.clone());
                            let v202: &str = &*v193;
                            let v231: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v202);
                            let v232 = Dice_ui::method42();
                            let v238: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v231.map_err(|x| v232(x));
                            let v248 = Dice_ui::method109();
                            let v249: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method110(v238);
                            v249.map(|x| v248(x))
                        } else {
                            let v256: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v129.clone(), v62.clone())),
                                )),
                                string(""),
                            );
                            let v258: bool = true;
                            leptos::logging::log!("{}", v256);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v272: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v129.clone(), v62.clone())),
                            )),
                            string(""),
                        );
                        let v274: bool = true;
                        leptos::logging::log!("{}", v272);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v288: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v129.clone(), v62.clone())),
                        )),
                        string(""),
                    );
                    let v290: bool = true;
                    leptos::logging::log!("{}", v288);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure83(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure84(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method107(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v10: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v12: bool = true;
            leptos::logging::log!("{}", v10);
            let v14: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v39: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v14));
            let v97: Dice_ui::US35 = match &v39 {
                Dice_ui::US26::US26_0(v39_0_0) => {
                    let v43: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v39 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v44 = Dice_ui::method83();
                    let v45 = Dice_ui::method84();
                    let v47: Dice_ui::US24 = match &v43 {
                        Err(v43_1_0) => v45(v43_1_0.clone()),
                        Ok(v43_0_0) => v44(v43_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v47 {
                        Dice_ui::US24::US24_0(v47_0_0) => {
                            let v52: bool = true;
                            let _vec_map: Vec<_> = v47_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v54: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v79: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v54),
                                    );
                                    let v84: bool = true;
                                    v79
                                })
                                .collect::<Vec<_>>();
                            let v86: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v86.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v47_1_0) => Dice_ui::US36::US36_1(v47_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v104: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v97.clone()))),
                )),
                string(""),
            );
            let v106: bool = true;
            leptos::logging::log!("{}", v104);
            let v108: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v133: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v108));
            let v147: Dice_ui::US38 = match &v133 {
                Dice_ui::US37::US37_0(v133_0_0) => {
                    let v137: Result<Vec<Option<string>>, std::string::String> = match &v133 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v138 = Dice_ui::method104();
                    let v139 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v137 {
                        Err(v137_1_0) => v139(v137_1_0.clone()),
                        Ok(v137_0_0) => v138(v137_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v194: Dice_ui::US40 = match &v147 {
                Dice_ui::US38::US38_0(v147_0_0) => {
                    let v148: Dice_ui::US39 = match &v147 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v148 {
                        Dice_ui::US39::US39_0(v148_0_0) => {
                            let v151: bool = true;
                            let _vec_map: Vec<_> = v148_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v153: Option<string> = x;
                                    let v178: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v153),
                                    );
                                    let v183: bool = true;
                                    v178
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v148_1_0) => Dice_ui::US41::US41_1(v148_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v197: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v201: Dice_ui::US41 = match &v194 {
                Dice_ui::US40::US40_0(v194_0_0) => match &v194 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v197.clone()),
            };
            let v290: bool = match &v201 {
                Dice_ui::US41::US41_0(v201_0_0) => {
                    let v204: bool = true;
                    v201_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v206: Dice_ui::US31 = x;
                        let v283: bool = if let Dice_ui::US31::US31_0(v206_0_0) = &v206 {
                            let v216: &str = &*v206_0_0.clone();
                            let v280: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v216),
                            });
                            let v282: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v280.clone());
                            true
                        } else {
                            false
                        };
                        let v285: bool = true;
                        let v287: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v291 = Dice_ui::method107(v97, v201.clone());
            let v292: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v294: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v292
                .iter()
                .enumerate()
                .map(|(i, x)| v291(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v296: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v294.clone());
            let v303: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v296.clone()),
                    )),
                    string(""),
                ),
            );
            let v305: bool = true;
            leptos::logging::log!("{}", v303);
            v296
        }
        pub fn method112(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure88(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method112(v0_1), v1)
        }
        pub fn method111(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure88(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method113(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn method114(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure89(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = Dice_ui::method114(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure87(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v38: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v43: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v68: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v43));
            let v126: Dice_ui::US35 = match &v68 {
                Dice_ui::US26::US26_0(v68_0_0) => {
                    let v72: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v68 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v73 = Dice_ui::method83();
                    let v74 = Dice_ui::method84();
                    let v76: Dice_ui::US24 = match &v72 {
                        Err(v72_1_0) => v74(v72_1_0.clone()),
                        Ok(v72_0_0) => v73(v72_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v76 {
                        Dice_ui::US24::US24_0(v76_0_0) => {
                            let v81: bool = true;
                            let _vec_map: Vec<_> = v76_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v83: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v108: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v83),
                                    );
                                    let v113: bool = true;
                                    v108
                                })
                                .collect::<Vec<_>>();
                            let v115: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v115.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v76_1_0) => Dice_ui::US36::US36_1(v76_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v132: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v38));
            let v138: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v126));
            let v139: string = append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string(
                                                "state_core.use_request (19) / result move / database: ",
                                            ),
                                            (v132),
                                        )),
                                        string(" / database_loading: "),
                                    )),
                                    (ofBoolean(v7)),
                                )),
                                string(" / state_data: "),
                            )),
                            (v138),
                        )),
                        string(" / state_data_loading: "),
                    )),
                    (ofBoolean(v11)),
                )),
                string(""),
            );
            let v141: bool = true;
            leptos::logging::log!("{}", v139);
            let v143: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v145: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v143.to_vec();
            let v148: bool = true;
            let _func1_from_v146 = Func1::from(move |value| {
                //;
                let v150: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = value;
                let v151 = Dice_ui::method111(v0_1);
                let v152: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = Dice_ui::method113(v150);
                let v154: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = v152.map(|x| v151(x));
                let v157: bool = true;
                v154 /*;
                let v159: bool = */
            }); //;
            let v161: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = _func1_from_v146;
            let v164: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v145
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v161 = v161.clone();
                        move |v: Result<
                            Option<crate::model::near::nearblocks::Root>,
                            std::string::String,
                        >| Dice_ui::closure89(v161.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v171: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v164.clone()),
                    )),
                    string(""),
                ),
            );
            let v173: bool = true;
            leptos::logging::log!("{}", v171);
            v164
        }
        pub fn method78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
                        ();
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
                                ();
                                let v29: string = string(
                                    "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())",
                                );
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<rexie::Rexie, rexie::Error>,
                                            >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v39: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v51: string = string("}");
                                let v58: bool = true;
                                let _fix_closure_v53 = v39;
                                let v62: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v53 "), (v51))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v63: bool = true;
                                _fix_closure_v53
                            },
                        ); // rust.fix_closure';
                        let v65 = __future_init;
                        let v67: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                            >,
                        > = v65;
                        let v69: Result<rexie::Rexie, std::string::String> = v67.await;
                        let v75: rexie::Rexie = v69.unwrap();
                        let v86: rexie::Rexie = (Dice_ui::method7())(v75);
                        let v88: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v86);
                        let v95: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_database (3) / database new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v88.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v97: bool = true;
                        leptos::logging::log!("{}", v95);
                        let v98: string = string("}");
                        let v105: bool = true;
                        let _fix_closure_v100 = v88;
                        let v109: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v100 "), (v98))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v110: bool = true;
                        _fix_closure_v100
                    },
                ); // rust.fix_closure';
                let v112 = __future_init;
                let v114: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v112;
                let v116: bool = true;
                v114 /*;
                let v118: bool = */
            }); //;
            let v120: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v122: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v120().await });
            let v125: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v122 = v122.clone();
                    move || Dice_ui::closure64(v122.clone(), ())
                })()
            });
            let v128: bool = true;
            let _func0_from_v126 = Func0::from(move || {
                //;
                let v130: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v122.clone()), |x| {
                        x.clone()
                    });
                let v132: bool = true;
                let _optionm_map_ = v130.map(|x| {
                    //;
                    let v134: std::sync::Arc<rexie::Rexie> = x;
                    let v137: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v134);
                    let v139: bool = true;
                    v137
                });
                let v141: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v143: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v145: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v147: bool = */
                    async move {
                        /*;
                        let v149: bool = */
                        ();
                        let v151: string = sprintf!("{:?}", v141.clone());
                        let v160: string = append(
                            (append(
                                (append(
                                    (append(
                                        string(
                                            "state_core.use_requests (3) / state_data_resource new_local_resource / request : ",
                                        ),
                                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v143.clone()))),
                                    )),
                                    string(" / database: "),
                                )),
                                (v151),
                            )),
                            string(""),
                        );
                        let v162: bool = true;
                        leptos::logging::log!("{}", v160);
                        let v164: bool = true;
                        let _optionm_map_ = v141.map(|x| {
                            //;
                            let v166: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v168: std::sync::Arc<rexie::Rexie> = v166.0;
                            let v170: bool = true;
                            v168
                        });
                        let v172: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v197: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v172));
                        let v714: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v197_0_0) = &v197 {
                            let v204: bool = true;
                            let _func1_from_v202 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v211: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v212: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v211.clone()),
                                    )),
                                    string(""),
                                );
                                let v214: bool = true;
                                leptos::logging::log!("{}", v212);
                                let v216: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v218: bool = */
                                    async {
                                        /*;
                                        let v220: bool = */
                                        ();
                                        let v222: Array<string> = new_array(&[string("store")]);
                                        let v224: Vec<string> = v222.to_vec();
                                        let v227: bool = true;
                                        let _func1_from_v225 = Func1::from(move |value| {
                                            //;
                                            let v229: string = value;
                                            let v238: &str = &*v229;
                                            let v274: std::string::String = String::from(v238);
                                            let v304: bool = true;
                                            v274 /*;
                                            let v306: bool = */
                                        }); //;
                                        let v308: Func1<string, std::string::String> =
                                            _func1_from_v225;
                                        let v311: Vec<std::string::String> = v224
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v308 = v308.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v308.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v312: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v197_0_0.clone());
                                        let v314: Result<rexie::Transaction, rexie::Error> = v312
                                            .transaction(&v311, rexie::TransactionMode::ReadOnly);
                                        let v315 = Dice_ui::method12();
                                        let v321: Result<rexie::Transaction, std::string::String> =
                                            v314.map_err(|x| v315(x));
                                        let v332: rexie::Transaction = v321?;
                                        let v333: string = Dice_ui::method13();
                                        let v342: &str = &*v333;
                                        let v371: Result<rexie::Store, rexie::Error> =
                                            v332.store(v342);
                                        let v372 = Dice_ui::method14();
                                        let v378: Result<rexie::Store, std::string::String> =
                                            v371.map_err(|x| v372(x));
                                        let v389: rexie::Store = v378?;
                                        let v390: string = Dice_ui::method79(v211);
                                        let v399: &str = &*v390;
                                        let v428: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v399);
                                        let v430: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<
                                                            Option<wasm_bindgen::JsValue>,
                                                            rexie::Error,
                                                        >,
                                                    >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v389, v428));
                                        let v432: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v430.await;
                                        let v433 = Dice_ui::method16();
                                        let v439: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v432.map_err(|x| v433(x));
                                        let v450: Option<wasm_bindgen::JsValue> = v439?;
                                        let v475: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v450),
                                        );
                                        let v589: Dice_ui::US25 = match &v475 {
                                            Dice_ui::US4::US4_0(v475_0_0) => {
                                                let v480: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v475 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v482: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v480);
                                                let v483 = Dice_ui::method19();
                                                let v489: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v482.map_err(|x| v483(x));
                                                let v500: Option<serde_json::Value> = v489?;
                                                let v525: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v500),
                                                );
                                                match &v525 {
                                                    Dice_ui::US5::US5_0(v525_0_0) => {
                                                        let v530: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v525 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v532: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v530);
                                                        let v533 = Dice_ui::method22();
                                                        let v539: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v532.map_err(|x| v533(x));
                                                        let v550: Vec<u8> = v539?;
                                                        let v552: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v550.clone());
                                                        let v554: string = append(
                                                            (append(
                                                                string(
                                                                    "state_core.get_data () / data_len: ",
                                                                ),
                                                                (toString(get_Count(v552.clone()))),
                                                            )),
                                                            string(""),
                                                        );
                                                        let v556: bool = true;
                                                        leptos::logging::log!("{}", v554);
                                                        let v558: Vec<u8> = v552.to_vec();
                                                        let v560: &[u8] = v558.as_slice();
                                                        let v562: bool = true;
                                                        let mut v560 = v560;
                                                        let v564: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v560,
                                                        );
                                                        let v565 = Dice_ui::method23();
                                                        let v571: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v564.map_err(|x| v565(x));
                                                        Dice_ui::US25::US25_0(v571?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v600: Option<LrcPtr<Dice_ui::Heap4>> = match &v589 {
                                            Dice_ui::US25::US25_0(v589_0_0) => Some(
                                                match &v589 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v605: string = string("}");
                                        let v612: bool = true;
                                        let _fix_closure_v607 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v600
                                        );
                                        let v616: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v607 "),
                                                        (v605),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v617: bool = true;
                                        _fix_closure_v607
                                    },
                                ); // rust.fix_closure';
                                let v619 = __future_init;
                                let v621: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                > = v619;
                                let v624: bool = true;
                                v621 /*;
                                let v626: bool = */
                            }); //;
                            let v628: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = _func1_from_v202;
                            let v632: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v143.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v628 = v628.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v628.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v634: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v632);
                            let v636: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v634.await;
                            Dice_ui::US24::US24_0(v636?)
                        } else {
                            let v649: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v649))
                        };
                        let v726: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v714 {
                                Dice_ui::US24::US24_0(v714_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v714_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v714_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v714_1_0.clone(),
                                    )
                                }
                            };
                        let v733: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_requests (4) / state_data_resource new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v726.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v735: bool = true;
                        leptos::logging::log!("{}", v733);
                        let v736: string = string("}");
                        let v743: bool = true;
                        let _fix_closure_v738 = v726;
                        let v747: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v738 "), (v736))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v748: bool = true;
                        _fix_closure_v738
                    },
                ); // rust.fix_closure';
                let v750 = __future_init;
                let v752: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                > = v750;
                let v754: bool = true;
                v752 /*;
                let v756: bool = */
            }); //;
            let v758: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            > = _func0_from_v126;
            let v760: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v758().await });
            let v763: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v760 = v760.clone();
                    move || Dice_ui::closure66(v760.clone(), ())
                })()
            });
            let v766: bool = true;
            let _func0_from_v764 = Func0::from(move || {
                //;
                let v768: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v770: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v763.clone());
                let v777: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v768.clone()))),
                    )),
                    string(""),
                );
                let v779: bool = true;
                leptos::logging::log!("{}", v777);
                let v781: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v783: bool = */
                    async move {
                        /*;
                        let v785: bool = */
                        ();
                        let v810: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v770));
                        let v866: Dice_ui::US27 = match &v810 {
                            Dice_ui::US26::US26_0(v810_0_0) => {
                                let v814: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v810 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v815 = Dice_ui::method83();
                                let v816 = Dice_ui::method84();
                                let v818: Dice_ui::US24 = match &v814 {
                                    Err(v814_1_0) => v816(v814_1_0.clone()),
                                    Ok(v814_0_0) => v815(v814_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v818 {
                                    Dice_ui::US24::US24_0(v818_0_0) => {
                                        let v823: bool = true;
                                        let _vec_map: Vec<_> = v818_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v825: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v850: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v825),
                                                );
                                                let v855: bool = true;
                                                v850
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v818_1_0) => {
                                        Dice_ui::US28::US28_1(v818_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v873: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v866.clone()))),
                            )),
                            string(""),
                        );
                        let v875: bool = true;
                        leptos::logging::log!("{}", v873);
                        let v876 = Dice_ui::method86(v866);
                        let v877: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v768);
                        let v880: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v877.iter()
                                .enumerate()
                                .map(|(i, x)| v876(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v882: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                >,
                            >,
                        > = futures::future::try_join_all(v880);
                        let v884: Result<Vec<Option<string>>, std::string::String> = v882.await;
                        let v886: Vec<Option<string>> = v884?;
                        let v891: string = string("}");
                        let v898: bool = true;
                        let _fix_closure_v893 =
                            Ok::<Vec<Option<string>>, std::string::String>(v886);
                        let v902: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v893 "), (v891))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v903: bool = true;
                        _fix_closure_v893
                    },
                ); // rust.fix_closure';
                let v905 = __future_init;
                let v907: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Vec<Option<string>>, std::string::String>,
                            >,
                    >,
                > = v905;
                let v909: bool = true;
                v907 /*;
                let v911: bool = */
            }); //;
            let v913: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Vec<Option<string>>, std::string::String>,
                            >,
                    >,
                >,
            > = _func0_from_v764;
            let v915: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v913().await });
            let v918: bool = true;
            let _func1_from_v916 = Func1::from(move |value| {
                //;
                let v920: LrcPtr<Dice_ui::Heap4> = value;
                let v926: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v920.clone())) as i64)),
                    )),
                    string(""),
                );
                let v928: bool = true;
                leptos::logging::log!("{}", v926);
                let v930: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v932: bool = */
                    async move {
                        /*;
                        let v934: bool = */
                        ();
                        let v936: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v938: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v936);
                        let v940: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v125);
                        let v942: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v940);
                        let v944: bool = true;
                        let _optionm_map_ = v942.map(|x| {
                            //;
                            let v946: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v948: std::sync::Arc<rexie::Rexie> = v946.0;
                            let v950: bool = true;
                            v948
                        });
                        let v952: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v977: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v952));
                        let v1155: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v977_0_0) = &v977 {
                            let v984: bool = true;
                            let _func1_from_v982 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v986: string = patternInput_1.0.clone();
                                let v992: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v994: bool = */
                                    async move {
                                        /*;
                                        let v996: bool = */
                                        ();
                                        let v997: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: ",
                                                ),
                                                (v986.clone()),
                                            )),
                                            string(""),
                                        );
                                        let v999: bool = true;
                                        leptos::logging::log!("{}", v997);
                                        let v1000: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v986))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v1006: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v920.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v1008: bool = true;
                                        leptos::logging::log!("{}", v1006);
                                        let v1010: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v1012: bool = */
                                            async move {
                                                /*;
                                                let v1014: bool = */
                                                ();
                                                let v1016: bool = true;
                                                let mut data = Vec::new();
                                                let v1018: bool = true;
                                                borsh::BorshSerialize::serialize(&v920, &mut data)
                                                    .unwrap();
                                                let v1020: Vec<u8> = data;
                                                let v1022: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v1020).unwrap();
                                                let v1023: string = Dice_ui::method98(v1000);
                                                let v1032: &str = &*v1023;
                                                let v1061: rexie::Transaction =
                                                    v977_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v1063: rexie::Store = v1061.store("store")?;
                                                let v1065: bool = true;
                                                v1063.put(&v1022, Some(&v1032.into())).await?;
                                                let v1067: bool = true;
                                                v1061.done().await?;
                                                let v1072: string = string("}");
                                                let v1079: bool = true;
                                                let _fix_closure_v1074 = Ok::<(), rexie::Error>(());
                                                let v1083: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v1074 "),
                                                                (v1072),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v1084: bool = true;
                                                _fix_closure_v1074
                                            },
                                        ); // rust.fix_closure';
                                        let v1086 = __future_init;
                                        let v1088: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<(), rexie::Error>,
                                                    >,
                                            >,
                                        > = v1086;
                                        let v1090: Result<(), rexie::Error> = v1088.await;
                                        let v1091 = Dice_ui::method99();
                                        let v1097: Result<(), std::string::String> =
                                            v1090.map_err(|x| v1091(x));
                                        let v1108: bool = true;
                                        v1097?;
                                        let v1113: string = string("}");
                                        let v1120: bool = true;
                                        let _fix_closure_v1115 = Ok::<(), std::string::String>(());
                                        let v1124: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1115 "),
                                                        (v1113),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1125: bool = true;
                                        _fix_closure_v1115
                                    },
                                ); // rust.fix_closure';
                                let v1127 = __future_init;
                                let v1129: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                > = v1127;
                                let v1132: bool = true;
                                v1129 /*;
                                let v1134: bool = */
                            }); //;
                            let v1136: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = _func1_from_v982;
                            let v1140: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v938.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1136 = v1136.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v1136.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v1142: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v1140);
                            let v1144: Result<Vec<()>, std::string::String> = v1142.await;
                            Dice_ui::US34::US34_0(v1144?)
                        } else {
                            let v1150: bool = true;
                            leptos::logging::log!(
                                "{}",
                                string(
                                    "state_core.use_requests (12) / set_state_data_action / database,request=None"
                                )
                            );
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v1167: Result<Vec<()>, std::string::String> = match &v1155 {
                            Dice_ui::US34::US34_0(v1155_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v1155_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v1155_1_0) => {
                                Err::<Vec<()>, std::string::String>(v1155_1_0.clone())
                            }
                        };
                        let v1168: string = string("}");
                        let v1175: bool = true;
                        let _fix_closure_v1170 = v1167;
                        let v1179: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v1170 "), (v1168))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v1180: bool = true;
                        _fix_closure_v1170
                    },
                ); // rust.fix_closure';
                let v1182 = __future_init;
                let v1184: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v1182;
                let v1187: bool = true;
                v1184 /*;
                let v1189: bool = */
            }); //;
            let v1191: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v916;
            let v1194: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1191 = v1191.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1191.clone(), v_1)
                })(value.clone())
            });
            let v1197: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1194 = v1194.clone();
                    let v763 = v763.clone();
                    let v915 = v915.clone();
                    move || {
                        Dice_ui::closure78(
                            v0_1.clone(),
                            v763.clone(),
                            v915.clone(),
                            v1194.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1197 = v1197.clone();
                    let v122 = v122.clone();
                    let v760 = v760.clone();
                    move || {
                        Dice_ui::closure87(
                            v1.clone(),
                            v122.clone(),
                            v760.clone(),
                            v1197.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method115() -> Func1<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            Dice_ui::US43,
        > {
            Func1::new(
                move |v: Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >| Dice_ui::closure91((), v),
            )
        }
        pub fn closure92(unitVar: (), v0_1: std::string::String) -> Dice_ui::US43 {
            Dice_ui::US43::US43_1(v0_1)
        }
        pub fn method116() -> Func1<std::string::String, Dice_ui::US43> {
            Func1::new(move |v: std::string::String| Dice_ui::closure92((), v))
        }
        pub fn method117(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
        ) -> Func1<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
            Dice_ui::US43,
        > {
            v0_1
        }
        pub fn closure93(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
            v1: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US43 {
            let v2: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = Dice_ui::method117(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure94(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US45 {
            Dice_ui::US45::US45_0(v0_1)
        }
        pub fn method118() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US45,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure94((), v),
            )
        }
        pub fn method119(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
        ) -> Func1<Dice_ui::US43, Dice_ui::US44> {
            v0_1
        }
        pub fn closure95(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
            v1: Dice_ui::US43,
        ) -> Dice_ui::US44 {
            let v2: Func1<Dice_ui::US43, Dice_ui::US44> = Dice_ui::method119(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure96(unitVar: (), v0_1: Dice_ui::US44) -> bool {
            if let Dice_ui::US44::US44_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US45::US45_1 = &v0_1_0_0 {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method120() -> Func1<Dice_ui::US44, bool> {
            Func1::new(move |v: Dice_ui::US44| Dice_ui::closure96((), v))
        }
        pub fn method121(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method123(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                usize,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            )>,
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure99(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1_: usize,
            v1__1: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (
            usize,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method123(v0_1);
            let patternInput: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
                patternInput.12.clone(),
            )
        }
        pub fn method124(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
        ) -> Func1<
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
            (string, usize, LrcPtr<Dice_ui::Heap5>),
        > {
            v0_1
        }
        pub fn closure100(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
            _arg: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            let v14: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            > = Dice_ui::method124(v0_1);
            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = (move |x| v14(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
                _arg.6.clone(),
                _arg.7.clone(),
                _arg.8.clone(),
                _arg.9.clone(),
                _arg.10.clone(),
                _arg.11.clone(),
                _arg.12.clone(),
            ));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure98(v0_1: Array<string>, v1: i32, v2: Dice_ui::US44) -> Dice_ui::US48 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US44::US44_0(v2_0_0) => {
                    let v4: Dice_ui::US45 = v2_0_0.clone();
                    Dice_ui::US48::US48_0(match &v4 {
                        Dice_ui::US45::US45_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US45::US45_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: bool = true;
                            let _func1_from_v14 = Func1::from(move |value| {
                                //;
                                let v18: LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )> = value;
                                let b: (
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = v18.1.clone();
                                let v73: bool = true;
                                (
                                    v18.0.clone(),
                                    b.0.clone(),
                                    b.1.clone(),
                                    b.2.clone(),
                                    b.3.clone(),
                                    b.4.clone(),
                                    b.5.clone(),
                                    b.6.clone(),
                                    b.7.clone(),
                                    b.8.clone(),
                                    b.9.clone(),
                                    b.10.clone(),
                                    b.11.clone(),
                                ) /*;
                                let v75: bool = */
                            }); //;
                            let v77: Func1<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                            > = _func1_from_v14;
                            let v80: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13
                                .into_iter()
                                .map(|x| {
                                    Func1::new({
                                        let v77 = v77.clone();
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            ),
                                        )>| {
                                            Dice_ui::closure99(
                                                v77.clone(),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        }
                                    })(x.clone())
                                })
                                .collect::<Vec<_>>();
                            let v82: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v80.clone());
                            let v84: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v82.to_vec();
                            let v87: bool = true;
                            let _func1_from_v85 = Func1::from(move |value| {
                                //;
                                let patternInput: (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = value;
                                let v103: usize = v1 as usize;
                                let v106: LrcPtr<Dice_ui::Heap5> = LrcPtr::new(Dice_ui::Heap5 {
                                    l0: patternInput.1.clone(),
                                    l1: patternInput.2.clone(),
                                    l2: patternInput.3.clone(),
                                    l3: patternInput.4.clone(),
                                    l4: patternInput.5.clone(),
                                    l5: patternInput.6.clone(),
                                    l6: patternInput.7.clone(),
                                    l7: patternInput.8.clone(),
                                    l8: patternInput.9.clone(),
                                    l9: patternInput.10.clone(),
                                    l10: patternInput.11.clone(),
                                    l11: patternInput.12.clone(),
                                });
                                let v109: bool = true;
                                (v3.clone(), v103, v106) /*;
                                let v111: bool = */
                            }); //;
                            let v113: Func1<
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                                (string, usize, LrcPtr<Dice_ui::Heap5>),
                            > = _func1_from_v85;
                            Dice_ui::US49::US49_0(
                                v84.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v113 = v113.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            )| {
                                                Dice_ui::closure100(v113.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US49::US49_1,
                    })
                }
                Dice_ui::US44::US44_1(v2_1_0) => Dice_ui::US48::US48_1(v2_1_0.clone()),
            }
        }
        pub fn closure97(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US44, Dice_ui::US48> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US44| Dice_ui::closure98(v0_1.clone(), v1, v)
            })
        }
        pub fn method122(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US44, Dice_ui::US48>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure97(v0_1.clone(), v)
            })
        }
        pub fn method125(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method126(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
        ) -> Func1<Dice_ui::US48, Dice_ui::US50> {
            v0_1
        }
        pub fn closure101(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
            v1: Dice_ui::US48,
        ) -> Dice_ui::US50 {
            let v2: Func1<Dice_ui::US48, Dice_ui::US50> = Dice_ui::method126(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method127(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func1<
            Dice_ui::US50,
            Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure102(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v1: Dice_ui::US50,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v2: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            > = Dice_ui::method127(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method128(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method130()
        -> Func1<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US50> {
            Func1::new(
                move |v: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure103((), v)
                },
            )
        }
        pub fn closure104(unitVar: (), v0_1: std::string::String) -> Dice_ui::US50 {
            Dice_ui::US50::US50_1(v0_1)
        }
        pub fn method131() -> Func1<std::string::String, Dice_ui::US50> {
            Func1::new(move |v: std::string::String| Dice_ui::closure104((), v))
        }
        pub fn closure105(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US49 {
            Dice_ui::US49::US49_0(v0_1)
        }
        pub fn method132() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US49> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure105((), v)
            })
        }
        pub fn method133(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method134(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method129(v0_1: LrcPtr<Dice_ui::UH2>, v1: Dice_ui::US51) -> Dice_ui::US51 {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH2>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Dice_ui::US51> = MutCell::new(v1.clone());
            '_method129: loop {
                break '_method129 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH2::UH2_0 => v1.get().clone(),
                    Dice_ui::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v2: Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        > = match v0_1.get().clone().as_ref() {
                            Dice_ui::UH2::UH2_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v4 = Dice_ui::method130();
                        let v5 = Dice_ui::method131();
                        let v7: Dice_ui::US50 = match &v2 {
                            Err(v2_1_0) => v5(v2_1_0.clone()),
                            Ok(v2_0_0) => v4(v2_0_0.clone()),
                        };
                        let v43: Dice_ui::US48 = match &v7 {
                            Dice_ui::US50::US50_0(v7_0_0) => Dice_ui::US48::US48_0(defaultValue(
                                Dice_ui::US49::US49_1,
                                map(Dice_ui::method132(), v7_0_0.clone()),
                            )),
                            Dice_ui::US50::US50_1(v7_1_0) => Dice_ui::US48::US48_1(v7_1_0.clone()),
                        };
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH2> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Dice_ui::US51 = if let Dice_ui::US51::US51_0(v1_0_0) =
                                &v1.get().clone()
                            {
                                match &v43 {
                                    Dice_ui::US48::US48_0(v43_0_0) => {
                                        let v45: Dice_ui::US49 = v43_0_0.clone();
                                        if let Dice_ui::US49::US49_0(v45_0_0) = &v45 {
                                            let v47: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method133(v45_0_0.clone());
                                            let v48: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method134(v1_0_0.clone());
                                            let v50: bool = true;
                                            let mut v48 = v48;
                                            let v52: bool = true;
                                            v48.extend(v47);
                                            Dice_ui::US51::US51_0(v48)
                                        } else {
                                            v1.get().clone()
                                        }
                                    }
                                    Dice_ui::US48::US48_1(v43_1_0) => {
                                        Dice_ui::US51::US51_1(v43_1_0.clone())
                                    }
                                }
                            } else {
                                if let Dice_ui::US48::US48_1(v43_1_0) = &v43 {
                                    Dice_ui::US51::US51_1(v43_1_0.clone())
                                } else {
                                    v1.get().clone()
                                }
                            };
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method129;
                        }
                    }
                });
            }
        }
        pub fn method135(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure106(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method136() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure106((), arg10_0040)
            })
        }
        pub fn method137(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure90(
            v0_1: leptos::prelude::ArcMemo<Array<string>>,
            v1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = leptos::prelude::ArcMemo::get(&v1);
            let v6: bool = true;
            let _func1_from_v4 = Func1::from(move |value| {
                //;
                let v8: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = value;
                let v9 = Dice_ui::method115();
                let v10 = Dice_ui::method116();
                let v12: Dice_ui::US43 = match &v8 {
                    Err(v8_1_0) => v10(v8_1_0.clone()),
                    Ok(v8_0_0) => v9(v8_0_0.clone()),
                };
                let v17: bool = true;
                v12 /*;
                let v19: bool = */
            }); //;
            let v21: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = _func1_from_v4;
            let v24: Vec<Dice_ui::US43> = v3
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v21 = v21.clone();
                        move |v: Result<
                            Option<
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure93(v21.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v27: bool = true;
            let _func1_from_v25 = Func1::from(move |value| {
                //;
                let v29: Dice_ui::US43 = value;
                let v63: Dice_ui::US44 = match &v29 {
                    Dice_ui::US43::US43_0(v29_0_0) => Dice_ui::US44::US44_0(defaultValue(
                        Dice_ui::US45::US45_1,
                        map(Dice_ui::method118(), v29_0_0.clone()),
                    )),
                    Dice_ui::US43::US43_1(v29_1_0) => Dice_ui::US44::US44_1(v29_1_0.clone()),
                };
                let v66: bool = true;
                v63 /*;
                let v68: bool = */
            }); //;
            let v70: Func1<Dice_ui::US43, Dice_ui::US44> = _func1_from_v25;
            let v73: Vec<Dice_ui::US44> = v24
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v70 = v70.clone();
                        move |v_1: Dice_ui::US43| Dice_ui::closure95(v70.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v80: string = append(
                (append(
                    string("transactions.render (8) / txns move / root: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v73.clone()))),
                )),
                string(""),
            );
            let v82: bool = true;
            leptos::logging::log!("{}", v80);
            let v83 = Dice_ui::method120();
            let v84: Vec<Dice_ui::US44> = Dice_ui::method121(v73.clone());
            let v86: Vec<Dice_ui::US44> = v84
                .into_iter()
                .filter(|x| v83(x.clone().clone()))
                .collect::<Vec<_>>();
            let v93: bool = (get_Count(fable_library_rust::NativeArray_::array_from(v86.clone())))
                == (get_Count(fable_library_rust::NativeArray_::array_from(
                    v73.clone().clone(),
                )));
            let v217: Dice_ui::US46 = if v93 {
                Dice_ui::US46::US46_0(Dice_ui::US47::US47_1)
            } else {
                let v98 = Dice_ui::method122(leptos::prelude::ArcMemo::get(&v0_1));
                let v99: Vec<Dice_ui::US44> = Dice_ui::method125(v73);
                let v101: Vec<Dice_ui::US48> = v99
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v98(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v104: bool = true;
                let _func1_from_v102 = Func1::from(move |value| {
                    //;
                    let v106: Dice_ui::US48 = value;
                    let v123: Dice_ui::US50 = match &v106 {
                        Dice_ui::US48::US48_0(v106_0_0) => {
                            let v107: Dice_ui::US49 = v106_0_0.clone();
                            Dice_ui::US50::US50_0(match &v107 {
                                Dice_ui::US49::US49_0(v107_0_0) => Some(
                                    match &v107 {
                                        Dice_ui::US49::US49_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            })
                        }
                        Dice_ui::US48::US48_1(v106_1_0) => Dice_ui::US50::US50_1(v106_1_0.clone()),
                    };
                    let v126: bool = true;
                    v123 /*;
                    let v128: bool = */
                }); //;
                let v130: Func1<Dice_ui::US48, Dice_ui::US50> = _func1_from_v102;
                let v133: Vec<Dice_ui::US50> = v101
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v130 = v130.clone();
                            move |v_2: Dice_ui::US48| Dice_ui::closure101(v130.clone(), v_2)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v136: bool = true;
                let _func1_from_v134 = Func1::from(move |value| {
                    //;
                    let v138: Dice_ui::US50 = value;
                    let v150: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = match &v138 {
                        Dice_ui::US50::US50_0(v138_0_0) => {
                            Ok::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v138_0_0.clone())
                        }
                        Dice_ui::US50::US50_1(v138_1_0) => {
                            Err::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v138_1_0.clone())
                        }
                    };
                    let v153: bool = true;
                    v150 /*;
                    let v155: bool = */
                }); //;
                let v157: Func1<
                    Dice_ui::US50,
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = _func1_from_v134;
                let v160: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = v133
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v157 = v157.clone();
                            move |v_3: Dice_ui::US50| Dice_ui::closure102(v157.clone(), v_3)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v163: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                let v165: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v160.clone());
                let v166: i32 = get_Count(v165.clone());
                let v168: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(LrcPtr::new(Dice_ui::UH2::UH2_0)),
                });
                while Dice_ui::method128(v166, v168.clone()) {
                    let v170: i32 = v168.l0.get().clone();
                    let v173: i32 = ((v170.wrapping_neg()) + (v166)) - 1_i32;
                    let v174: LrcPtr<Dice_ui::UH2> = v168.l1.get().clone();
                    let v175: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v165[v173].clone();
                    let v176: i32 = (v170) + 1_i32;
                    v168.l0.set(v176);
                    v168.l1.set(LrcPtr::new(Dice_ui::UH2::UH2_1(v175, v174)));
                    ()
                }
                {
                    let v180: Dice_ui::US51 =
                        Dice_ui::method129(v168.l1.get().clone(), Dice_ui::US51::US51_0(v163));
                    let v194: Dice_ui::US51 = match &v180 {
                        Dice_ui::US51::US51_0(v180_0_0) => {
                            let v182: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method135(v180_0_0.clone());
                            let v183 = Dice_ui::method136();
                            let v185: bool = true;
                            let mut v182 = v182;
                            let v187: bool = true;
                            v182.sort_by_key(|x| v183(x.clone()));
                            Dice_ui::US51::US51_0(v182)
                        }
                        Dice_ui::US51::US51_1(v180_1_0) => Dice_ui::US51::US51_1(v180_1_0.clone()),
                    };
                    let v209: Dice_ui::US52 = match &v194 {
                        Dice_ui::US51::US51_0(v194_0_0) => {
                            let v196: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method137(v194_0_0.clone());
                            let v198: bool = true;
                            let mut v196 = v196;
                            let v200: bool = true;
                            v196.reverse();
                            let v202: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v196;
                            Dice_ui::US52::US52_0(fable_library_rust::NativeArray_::array_from(
                                v202.clone(),
                            ))
                        }
                        Dice_ui::US51::US51_1(v194_1_0) => Dice_ui::US52::US52_1(v194_1_0.clone()),
                    };
                    match &v209 {
                        Dice_ui::US52::US52_0(v209_0_0) => {
                            Dice_ui::US46::US46_0(Dice_ui::US47::US47_0(v209_0_0.clone()))
                        }
                        Dice_ui::US52::US52_1(v209_1_0) => Dice_ui::US46::US46_1(v209_1_0.clone()),
                    }
                }
            };
            let v234: Dice_ui::US53 = match &v217 {
                Dice_ui::US46::US46_0(v217_0_0) => {
                    let v218: Dice_ui::US47 = v217_0_0.clone();
                    Dice_ui::US53::US53_0(match &v218 {
                        Dice_ui::US47::US47_0(v218_0_0) => Some(
                            match &v218 {
                                Dice_ui::US47::US47_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US46::US46_1(v217_1_0) => Dice_ui::US53::US53_1(v217_1_0.clone()),
            };
            let v246: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = match &v234 {
                Dice_ui::US53::US53_0(v234_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v234_0_0.clone()),
                Dice_ui::US53::US53_1(v234_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v234_1_0.clone()),
            };
            let v253: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        (append(
                            (append(
                                string(
                                    "use_transactions.render (9) / txns new_arc_memo / result: ",
                                ),
                                sprintf!("{:?}", v246.clone()),
                            )),
                            string(" / loading: "),
                        )),
                        (ofBoolean(v93)),
                    )),
                    string(""),
                ),
            );
            let v255: bool = true;
            leptos::logging::log!("{}", v253);
            v246
        }
        pub fn closure108(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US53 {
            Dice_ui::US53::US53_0(v0_1)
        }
        pub fn method138()
        -> Func1<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US53> {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure108((), v)
                },
            )
        }
        pub fn closure109(unitVar: (), v0_1: std::string::String) -> Dice_ui::US53 {
            Dice_ui::US53::US53_1(v0_1)
        }
        pub fn method139() -> Func1<std::string::String, Dice_ui::US53> {
            Func1::new(move |v: std::string::String| Dice_ui::closure109((), v))
        }
        pub fn closure110(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US47 {
            Dice_ui::US47::US47_0(v0_1)
        }
        pub fn method140() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US47> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure110((), v)
            })
        }
        pub fn closure111(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method141() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure111((), v))
        }
        pub fn closure112(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn method142() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure112((), v))
        }
        pub fn method143(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure113(
            unitVar: (),
            v0_1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US23::US23_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method144() -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure113((), v))
        }
        pub fn method145(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn method146(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
        ) -> Func1<
            (string, usize, LrcPtr<Dice_ui::Heap5>),
            Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
        > {
            v0_1
        }
        pub fn closure114(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(string, Dice_ui::US23, string, bool, bool), std::string::String> {
            let v4: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            > = Dice_ui::method146(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure107(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method138();
            let v4 = Dice_ui::method139();
            let v6: Dice_ui::US53 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v42: Dice_ui::US46 = match &v6 {
                Dice_ui::US53::US53_0(v6_0_0) => Dice_ui::US46::US46_0(defaultValue(
                    Dice_ui::US47::US47_1,
                    map(Dice_ui::method140(), v6_0_0.clone()),
                )),
                Dice_ui::US53::US53_1(v6_1_0) => Dice_ui::US46::US46_1(v6_1_0.clone()),
            };
            let v402: Dice_ui::US54 = match &v42 {
                Dice_ui::US46::US46_0(v42_0_0) => {
                    let v43: Dice_ui::US47 = v42_0_0.clone();
                    if let Dice_ui::US47::US47_0(v43_0_0) = &v43 {
                        let v46: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v43_0_0.clone().to_vec();
                        let v49: bool = true;
                        let _func1_from_v47 = Func1::from(move |value| {
                            //;
                            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = value;
                            let v63: &str = &*string("2.0");
                            let v99: std::string::String = String::from(v63);
                            let v136: &str = &*string("dontcare");
                            let v172: std::string::String = String::from(v136);
                            let v209: &str = &*string("EXPERIMENTAL_tx_status");
                            let v245: std::string::String = String::from(v209);
                            let v283: &str = &*string("bowen");
                            let v347: Array<std::string::String> = new_array(&[
                                (patternInput.2.clone()).l3.clone(),
                                String::from(v283),
                            ]);
                            let v349: Vec<std::string::String> = v347.to_vec();
                            let v351: crate::model::near::rpc::RpcInput =
                                crate::model::near::rpc::RpcInput {
                                    jsonrpc: v99,
                                    id: v172,
                                    method: v245,
                                    params: v349,
                                };
                            let v353: Result<std::string::String, serde_json::Error> =
                                serde_json::to_string(&v351);
                            let v354 = Dice_ui::method141();
                            let v360: Result<std::string::String, std::string::String> =
                                v353.map_err(|x| v354(x));
                            let v370 = Dice_ui::method142();
                            let v371: Result<std::string::String, std::string::String> =
                                Dice_ui::method143(v360);
                            let v373: Result<string, std::string::String> = v371.map(|x| v370(x));
                            let v374 = Dice_ui::method144();
                            let v375: Result<string, std::string::String> =
                                Dice_ui::method145(v373);
                            let v377: Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            > = v375.map(|x| v374(x));
                            let v380: bool = true;
                            v377 /*;
                            let v382: bool = */
                        }); //;
                        let v384: Func1<
                            (string, usize, LrcPtr<Dice_ui::Heap5>),
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = _func1_from_v47;
                        let v387: Vec<
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = v46
                            .into_iter()
                            .map(|x| {
                                Func1::new({
                                    let v384 = v384.clone();
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure114(v384.clone(), arg10_0040)
                                    }
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v389: Result<
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                            std::string::String,
                        > = v387.into_iter().collect();
                        let v391: Vec<(string, Dice_ui::US23, string, bool, bool)> = v389?;
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_0(
                            fable_library_rust::NativeArray_::array_from(v391.clone()),
                        ))
                    } else {
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_1)
                    }
                }
                Dice_ui::US46::US46_1(v42_1_0) => Dice_ui::US54::US54_1(v42_1_0.clone()),
            };
            let v419: Dice_ui::US56 = match &v402 {
                Dice_ui::US54::US54_0(v402_0_0) => {
                    let v403: Dice_ui::US55 = v402_0_0.clone();
                    Dice_ui::US56::US56_0(match &v403 {
                        Dice_ui::US55::US55_0(v403_0_0) => Some(
                            match &v403 {
                                Dice_ui::US55::US55_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    })
                }
                Dice_ui::US54::US54_1(v402_1_0) => Dice_ui::US56::US56_1(v402_1_0.clone()),
            };
            let v431: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = match &v419 {
                Dice_ui::US56::US56_0(v419_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v419_0_0.clone()),
                Dice_ui::US56::US56_1(v419_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v419_1_0.clone()),
            };
            let v438: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (10) / rpc_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v431.clone()),
                    )),
                    string(""),
                ),
            );
            let v440: bool = true;
            leptos::logging::log!("{}", v438);
            v431
        }
        pub fn closure116(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method147()
        -> Func1<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, Dice_ui::US56>
        {
            Func1::new(
                move |v: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>| {
                    Dice_ui::closure116((), v)
                },
            )
        }
        pub fn closure117(unitVar: (), v0_1: std::string::String) -> Dice_ui::US56 {
            Dice_ui::US56::US56_1(v0_1)
        }
        pub fn method148() -> Func1<std::string::String, Dice_ui::US56> {
            Func1::new(move |v: std::string::String| Dice_ui::closure117((), v))
        }
        pub fn closure118(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Dice_ui::US55 {
            Dice_ui::US55::US55_0(v0_1)
        }
        pub fn method149()
        -> Func1<Array<(string, Dice_ui::US23, string, bool, bool)>, Dice_ui::US55> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US23, string, bool, bool)>| {
                    Dice_ui::closure118((), v)
                },
            )
        }
        pub fn closure115(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method147();
            let v4 = Dice_ui::method148();
            let v6: Dice_ui::US56 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v42: Dice_ui::US54 = match &v6 {
                Dice_ui::US56::US56_0(v6_0_0) => Dice_ui::US54::US54_0(defaultValue(
                    Dice_ui::US55::US55_1,
                    map(Dice_ui::method149(), v6_0_0.clone()),
                )),
                Dice_ui::US56::US56_1(v6_1_0) => Dice_ui::US54::US54_1(v6_1_0.clone()),
            };
            let v48: Array<(string, Dice_ui::US23, string, bool, bool)> =
                if let Dice_ui::US54::US54_0(v42_0_0) = &v42 {
                    let v43: Dice_ui::US55 = v42_0_0.clone();
                    if let Dice_ui::US55::US55_0(v43_0_0) = &v43 {
                        v43_0_0.clone()
                    } else {
                        new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                };
            let v50: Vec<(string, Dice_ui::US23, string, bool, bool)> = v48.to_vec();
            let v57: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v50.clone()),
                    )),
                    string(""),
                ),
            );
            let v59: bool = true;
            leptos::logging::log!("{}", v57);
            v50
        }
        pub fn closure121(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn method151(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
        ) -> Func1<
            std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>,
            std::collections::HashMap<
                std::string::String,
                (
                    std::string::String,
                    Option<std::string::String>,
                    Option<f64>,
                    Option<std::string::String>,
                ),
            >,
        > {
            v0_1
        }
        pub fn closure122(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            v1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                std::string::String,
                Option<std::string::String>,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            let v2: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = Dice_ui::method151(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method152(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::Receipt,
            (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure123(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method152(v0_1);
            let patternInput: (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
            )
        }
        pub fn method153(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::GasProfile,
            (
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure124(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method153(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method155(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
        ) -> Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>
        {
            v0_1
        }
        pub fn closure126(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
            v1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            let v2: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = Dice_ui::method155(v0_1);
            let patternInput: (std::string::String, std::string::String) = (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure125(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: bool = true;
            let _func1_from_v1 = Func1::from(move |value| {
                //;
                let v5: crate::model::near::rpc::Proof = value;
                let v7: std::string::String = v5.clone().direction;
                let v9: std::string::String = v5.hash;
                let v12: bool = true;
                (v7, v9) /*;
                let v14: bool = */
            }); //;
            let v16: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = _func1_from_v1;
            let v19: Vec<(std::string::String, std::string::String)> = v0_1
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v16 = v16.clone();
                        move |v: crate::model::near::rpc::Proof| Dice_ui::closure126(v16.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v19.clone())
        }
        pub fn method154() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure125((), v))
        }
        pub fn method156(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::ReceiptsOutcome,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ),
        > {
            v0_1
        }
        pub fn closure127(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
            v1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Array<(std::string::String, std::string::String)>,
        ) {
            let v2: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = Dice_ui::method156(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
            )
        }
        pub fn closure120(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::rpc::Receipt = value;
                let v9: std::string::String = v7.clone().predecessor_id;
                let v11: crate::model::near::rpc::ReceiptDetail = v7.clone().receipt;
                let v13: crate::model::near::rpc::ActionDetail = v11.action;
                let v15: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                > = v13.clone().actions;
                let v18: bool = true;
                let _func1_from_v16 = Func1::from(move |value| {
                    //;
                    let v20: std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    > = value;
                    let v23: std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    > = v20
                        .into_iter()
                        .map(|(k, v)| {
                            (
                                k,
                                Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                                    Dice_ui::closure121((), v)
                                })(v),
                            )
                        })
                        .collect();
                    let v26: bool = true;
                    v23 /*;
                    let v28: bool = */
                }); //;
                let v30: Func1<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = _func1_from_v16;
                let v33: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = v15
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v30 = v30.clone();
                            move |v_1: std::collections::HashMap<
                                std::string::String,
                                crate::model::near::rpc::TransferDetail,
                            >| Dice_ui::closure122(v30.clone(), v_1)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v35: Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = fable_library_rust::NativeArray_::array_from(v33.clone());
                let v37: std::string::String = v13.clone().gas_price;
                let v39: Vec<std::string::String> = v13.clone().input_data_ids;
                let v41: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v39.clone());
                let v43: Vec<std::string::String> = v13.clone().output_data_receivers;
                let v45: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v43.clone());
                let v47: std::string::String = v13.clone().signer_id;
                let v49: std::string::String = v13.signer_public_key;
                let v51: std::string::String = v7.clone().receipt_id;
                let v53: std::string::String = v7.receiver_id;
                let v56: bool = true;
                (v9, v35, v37, v41, v45, v47, v49, v51, v53) /*;
                let v58: bool = */
            }); //;
            let v60: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = _func1_from_v3;
            let v63: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v60 = v60.clone();
                        move |v_2: crate::model::near::rpc::Receipt| {
                            Dice_ui::closure123(v60.clone(), v_2)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v65: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v63.clone());
            let v67: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v70: bool = true;
            let _func1_from_v68 = Func1::from(move |value| {
                //;
                let v72: crate::model::near::rpc::ReceiptsOutcome = value;
                let v74: std::string::String = v72.clone().block_hash;
                let v76: std::string::String = v72.clone().id;
                let v78: crate::model::near::rpc::OutcomeDetail = v72.clone().outcome;
                let v80: std::string::String = v78.clone().executor_id;
                let v82: u64 = v78.clone().gas_burnt;
                let v84: Vec<std::string::String> = v78.clone().logs;
                let v86: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v84.clone());
                let v88: crate::model::near::rpc::Metadata = v78.clone().metadata;
                let v90: Vec<crate::model::near::rpc::GasProfile> = v88.clone().gas_profile;
                let v93: bool = true;
                let _func1_from_v91 = Func1::from(move |value| {
                    //;
                    let v95: crate::model::near::rpc::GasProfile = value;
                    let v97: std::string::String = v95.clone().cost;
                    let v99: std::string::String = v95.clone().cost_category;
                    let v101: std::string::String = v95.gas_used;
                    let v104: bool = true;
                    (v97, v99, v101) /*;
                    let v106: bool = */
                }); //;
                let v108: Func1<
                    crate::model::near::rpc::GasProfile,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    ),
                > = _func1_from_v91;
                let v111: Vec<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = v90
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v108 = v108.clone();
                            move |v_3: crate::model::near::rpc::GasProfile| {
                                Dice_ui::closure124(v108.clone(), v_3)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v113: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = fable_library_rust::NativeArray_::array_from(v111.clone());
                let v115: u8 = v88.version;
                let v117: Vec<std::string::String> = v78.clone().receipt_ids;
                let v119: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v117.clone());
                let v121: std::collections::HashMap<std::string::String, std::string::String> =
                    v78.clone().status;
                let v123: Option<std::string::String> = v78.tokens_burnt;
                let v125: Option<Vec<crate::model::near::rpc::Proof>> = v72.proof;
                let v169: Array<(std::string::String, std::string::String)> = defaultValue(
                    new_empty::<(std::string::String, std::string::String)>(),
                    map(Dice_ui::method154(), v125),
                );
                let v174: bool = true;
                (v74, v76, v80, v82, v86, v113, v115, v119, v121, v123, v169) /*;
                let v176: bool = */
            }); //;
            let v178: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = _func1_from_v68;
            let v181: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v67
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v178 = v178.clone();
                        move |v_4: crate::model::near::rpc::ReceiptsOutcome| {
                            Dice_ui::closure127(v178.clone(), v_4)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            (
                v65,
                fable_library_rust::NativeArray_::array_from(v181.clone()),
            )
        }
        pub fn method150() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure120((), v)
            })
        }
        pub fn closure129(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method158() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure129((), v))
        }
        pub fn closure128(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method158(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method157() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure128((), v))
        }
        pub fn closure119(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v8: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method150(), v4);
            let v209: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v8, map(Dice_ui::method157(), v209), v0_1.id)
        }
        pub fn closure133(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method161()
        -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure133((), v))
        }
        pub fn method162(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure132(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v62: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v35: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v45: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v35_0_0) = &v35 {
                                let v39: Dice_ui::US25 = v35_0_0.clone();
                                if let Dice_ui::US25::US25_0(v39_0_0) = &v39 {
                                    Dice_ui::US25::US25_0(v39_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v45 {
                                Dice_ui::US25::US25_0(v45_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v45 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v75: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v62.clone()))),
                )),
                string(""),
            );
            let v77: bool = true;
            leptos::logging::log!("{}", v75);
            let v84: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v86: bool = true;
            leptos::logging::log!("{}", v84);
            let v129: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v90: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v115: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v90));
                    if let Dice_ui::US42::US42_0(v115_0_0) = &v115 {
                        let v119: Dice_ui::US31 = v115_0_0.clone();
                        if let Dice_ui::US31::US31_0(v119_0_0) = &v119 {
                            Dice_ui::US31::US31_0(v119_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v129_0_0) = &v129 {
                let v131: string = Dice_ui::method41(v129_0_0.clone());
                let v140: &str = &*v131;
                let v169: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v140);
                let v170 = Dice_ui::method42();
                let v176: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v169.map_err(|x| v170(x));
                let v186 = Dice_ui::method161();
                let v187: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method162(v176);
                v187.map(|x| v186(x))
            } else {
                if let Dice_ui::US29::US29_0(v62_0_0) = &v62 {
                    let v190: Dice_ui::US30 = v62_0_0.clone();
                    if let Dice_ui::US30::US30_0(v190_0_0) = &v190 {
                        let v191: Dice_ui::US31 = v190_0_0.clone();
                        if let Dice_ui::US31::US31_0(v191_0_0) = &v191 {
                            let v193: string = Dice_ui::method41(v191_0_0.clone());
                            let v202: &str = &*v193;
                            let v231: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v202);
                            let v232 = Dice_ui::method42();
                            let v238: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v231.map_err(|x| v232(x));
                            let v248 = Dice_ui::method161();
                            let v249: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method162(v238);
                            v249.map(|x| v248(x))
                        } else {
                            let v256: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v129.clone(), v62.clone())),
                                )),
                                string(""),
                            );
                            let v258: bool = true;
                            leptos::logging::log!("{}", v256);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v272: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v129.clone(), v62.clone())),
                            )),
                            string(""),
                        );
                        let v274: bool = true;
                        leptos::logging::log!("{}", v272);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v288: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v129.clone(), v62.clone())),
                        )),
                        string(""),
                    );
                    let v290: bool = true;
                    leptos::logging::log!("{}", v288);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure131(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure132(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method160(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure131(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure130(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v10: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v12: bool = true;
            leptos::logging::log!("{}", v10);
            let v14: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v39: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v14));
            let v97: Dice_ui::US35 = match &v39 {
                Dice_ui::US26::US26_0(v39_0_0) => {
                    let v43: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v39 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v44 = Dice_ui::method83();
                    let v45 = Dice_ui::method84();
                    let v47: Dice_ui::US24 = match &v43 {
                        Err(v43_1_0) => v45(v43_1_0.clone()),
                        Ok(v43_0_0) => v44(v43_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v47 {
                        Dice_ui::US24::US24_0(v47_0_0) => {
                            let v52: bool = true;
                            let _vec_map: Vec<_> = v47_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v54: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v79: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v54),
                                    );
                                    let v84: bool = true;
                                    v79
                                })
                                .collect::<Vec<_>>();
                            let v86: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v86.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v47_1_0) => Dice_ui::US36::US36_1(v47_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v104: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v97.clone()))),
                )),
                string(""),
            );
            let v106: bool = true;
            leptos::logging::log!("{}", v104);
            let v108: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v133: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v108));
            let v147: Dice_ui::US38 = match &v133 {
                Dice_ui::US37::US37_0(v133_0_0) => {
                    let v137: Result<Vec<Option<string>>, std::string::String> = match &v133 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v138 = Dice_ui::method104();
                    let v139 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v137 {
                        Err(v137_1_0) => v139(v137_1_0.clone()),
                        Ok(v137_0_0) => v138(v137_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v194: Dice_ui::US40 = match &v147 {
                Dice_ui::US38::US38_0(v147_0_0) => {
                    let v148: Dice_ui::US39 = match &v147 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v148 {
                        Dice_ui::US39::US39_0(v148_0_0) => {
                            let v151: bool = true;
                            let _vec_map: Vec<_> = v148_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v153: Option<string> = x;
                                    let v178: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v153),
                                    );
                                    let v183: bool = true;
                                    v178
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v148_1_0) => Dice_ui::US41::US41_1(v148_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v197: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v201: Dice_ui::US41 = match &v194 {
                Dice_ui::US40::US40_0(v194_0_0) => match &v194 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v197.clone()),
            };
            let v290: bool = match &v201 {
                Dice_ui::US41::US41_0(v201_0_0) => {
                    let v204: bool = true;
                    v201_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v206: Dice_ui::US31 = x;
                        let v283: bool = if let Dice_ui::US31::US31_0(v206_0_0) = &v206 {
                            let v216: &str = &*v206_0_0.clone();
                            let v280: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v216),
                            });
                            let v282: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v280.clone());
                            true
                        } else {
                            false
                        };
                        let v285: bool = true;
                        let v287: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v291 = Dice_ui::method160(v97, v201.clone());
            let v292: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v294: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v292
                .iter()
                .enumerate()
                .map(|(i, x)| v291(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v296: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v294.clone());
            let v303: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v296.clone()),
                    )),
                    string(""),
                ),
            );
            let v305: bool = true;
            leptos::logging::log!("{}", v303);
            v296
        }
        pub fn method164(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure135(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method164(v0_1), v1)
        }
        pub fn method163(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure135(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method165(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn method166(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure136(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = Dice_ui::method166(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure134(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v38: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v43: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v68: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v43));
            let v126: Dice_ui::US35 = match &v68 {
                Dice_ui::US26::US26_0(v68_0_0) => {
                    let v72: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v68 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v73 = Dice_ui::method83();
                    let v74 = Dice_ui::method84();
                    let v76: Dice_ui::US24 = match &v72 {
                        Err(v72_1_0) => v74(v72_1_0.clone()),
                        Ok(v72_0_0) => v73(v72_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v76 {
                        Dice_ui::US24::US24_0(v76_0_0) => {
                            let v81: bool = true;
                            let _vec_map: Vec<_> = v76_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v83: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v108: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v83),
                                    );
                                    let v113: bool = true;
                                    v108
                                })
                                .collect::<Vec<_>>();
                            let v115: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v115.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v76_1_0) => Dice_ui::US36::US36_1(v76_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v132: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v38));
            let v138: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v126));
            let v139: string = append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string(
                                                "state_core.use_request (19) / result move / database: ",
                                            ),
                                            (v132),
                                        )),
                                        string(" / database_loading: "),
                                    )),
                                    (ofBoolean(v7)),
                                )),
                                string(" / state_data: "),
                            )),
                            (v138),
                        )),
                        string(" / state_data_loading: "),
                    )),
                    (ofBoolean(v11)),
                )),
                string(""),
            );
            let v141: bool = true;
            leptos::logging::log!("{}", v139);
            let v143: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v145: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v143.to_vec();
            let v148: bool = true;
            let _func1_from_v146 = Func1::from(move |value| {
                //;
                let v150: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = value;
                let v151 = Dice_ui::method163(v0_1);
                let v152: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = Dice_ui::method165(v150);
                let v154: Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                > = v152.map(|x| v151(x));
                let v157: bool = true;
                v154 /*;
                let v159: bool = */
            }); //;
            let v161: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = _func1_from_v146;
            let v164: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v145
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v161 = v161.clone();
                        move |v: Result<
                            Option<crate::model::near::rpc::RpcResponse>,
                            std::string::String,
                        >| Dice_ui::closure136(v161.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v171: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v164.clone()),
                    )),
                    string(""),
                ),
            );
            let v173: bool = true;
            leptos::logging::log!("{}", v171);
            v164
        }
        pub fn method159(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
                        ();
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
                                ();
                                let v29: string = string(
                                    "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())",
                                );
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<rexie::Rexie, rexie::Error>,
                                            >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v39: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v51: string = string("}");
                                let v58: bool = true;
                                let _fix_closure_v53 = v39;
                                let v62: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v53 "), (v51))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v63: bool = true;
                                _fix_closure_v53
                            },
                        ); // rust.fix_closure';
                        let v65 = __future_init;
                        let v67: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                            >,
                        > = v65;
                        let v69: Result<rexie::Rexie, std::string::String> = v67.await;
                        let v75: rexie::Rexie = v69.unwrap();
                        let v86: rexie::Rexie = (Dice_ui::method7())(v75);
                        let v88: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v86);
                        let v95: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_database (3) / database new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v88.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v97: bool = true;
                        leptos::logging::log!("{}", v95);
                        let v98: string = string("}");
                        let v105: bool = true;
                        let _fix_closure_v100 = v88;
                        let v109: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v100 "), (v98))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v110: bool = true;
                        _fix_closure_v100
                    },
                ); // rust.fix_closure';
                let v112 = __future_init;
                let v114: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v112;
                let v116: bool = true;
                v114 /*;
                let v118: bool = */
            }); //;
            let v120: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v122: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v120().await });
            let v125: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v122 = v122.clone();
                    move || Dice_ui::closure64(v122.clone(), ())
                })()
            });
            let v128: bool = true;
            let _func0_from_v126 = Func0::from(move || {
                //;
                let v130: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v122.clone()), |x| {
                        x.clone()
                    });
                let v132: bool = true;
                let _optionm_map_ = v130.map(|x| {
                    //;
                    let v134: std::sync::Arc<rexie::Rexie> = x;
                    let v137: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v134);
                    let v139: bool = true;
                    v137
                });
                let v141: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v143: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v145: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v147: bool = */
                    async move {
                        /*;
                        let v149: bool = */
                        ();
                        let v151: string = sprintf!("{:?}", v141.clone());
                        let v160: string = append(
                            (append(
                                (append(
                                    (append(
                                        string(
                                            "state_core.use_requests (3) / state_data_resource new_local_resource / request : ",
                                        ),
                                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v143.clone()))),
                                    )),
                                    string(" / database: "),
                                )),
                                (v151),
                            )),
                            string(""),
                        );
                        let v162: bool = true;
                        leptos::logging::log!("{}", v160);
                        let v164: bool = true;
                        let _optionm_map_ = v141.map(|x| {
                            //;
                            let v166: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v168: std::sync::Arc<rexie::Rexie> = v166.0;
                            let v170: bool = true;
                            v168
                        });
                        let v172: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v197: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v172));
                        let v714: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v197_0_0) = &v197 {
                            let v204: bool = true;
                            let _func1_from_v202 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v211: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v212: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v211.clone()),
                                    )),
                                    string(""),
                                );
                                let v214: bool = true;
                                leptos::logging::log!("{}", v212);
                                let v216: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v218: bool = */
                                    async {
                                        /*;
                                        let v220: bool = */
                                        ();
                                        let v222: Array<string> = new_array(&[string("store")]);
                                        let v224: Vec<string> = v222.to_vec();
                                        let v227: bool = true;
                                        let _func1_from_v225 = Func1::from(move |value| {
                                            //;
                                            let v229: string = value;
                                            let v238: &str = &*v229;
                                            let v274: std::string::String = String::from(v238);
                                            let v304: bool = true;
                                            v274 /*;
                                            let v306: bool = */
                                        }); //;
                                        let v308: Func1<string, std::string::String> =
                                            _func1_from_v225;
                                        let v311: Vec<std::string::String> = v224
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v308 = v308.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v308.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v312: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v197_0_0.clone());
                                        let v314: Result<rexie::Transaction, rexie::Error> = v312
                                            .transaction(&v311, rexie::TransactionMode::ReadOnly);
                                        let v315 = Dice_ui::method12();
                                        let v321: Result<rexie::Transaction, std::string::String> =
                                            v314.map_err(|x| v315(x));
                                        let v332: rexie::Transaction = v321?;
                                        let v333: string = Dice_ui::method13();
                                        let v342: &str = &*v333;
                                        let v371: Result<rexie::Store, rexie::Error> =
                                            v332.store(v342);
                                        let v372 = Dice_ui::method14();
                                        let v378: Result<rexie::Store, std::string::String> =
                                            v371.map_err(|x| v372(x));
                                        let v389: rexie::Store = v378?;
                                        let v390: string = Dice_ui::method79(v211);
                                        let v399: &str = &*v390;
                                        let v428: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v399);
                                        let v430: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<
                                                            Option<wasm_bindgen::JsValue>,
                                                            rexie::Error,
                                                        >,
                                                    >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v389, v428));
                                        let v432: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v430.await;
                                        let v433 = Dice_ui::method16();
                                        let v439: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v432.map_err(|x| v433(x));
                                        let v450: Option<wasm_bindgen::JsValue> = v439?;
                                        let v475: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v450),
                                        );
                                        let v589: Dice_ui::US25 = match &v475 {
                                            Dice_ui::US4::US4_0(v475_0_0) => {
                                                let v480: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v475 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v482: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v480);
                                                let v483 = Dice_ui::method19();
                                                let v489: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v482.map_err(|x| v483(x));
                                                let v500: Option<serde_json::Value> = v489?;
                                                let v525: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v500),
                                                );
                                                match &v525 {
                                                    Dice_ui::US5::US5_0(v525_0_0) => {
                                                        let v530: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v525 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v532: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v530);
                                                        let v533 = Dice_ui::method22();
                                                        let v539: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v532.map_err(|x| v533(x));
                                                        let v550: Vec<u8> = v539?;
                                                        let v552: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v550.clone());
                                                        let v554: string = append(
                                                            (append(
                                                                string(
                                                                    "state_core.get_data () / data_len: ",
                                                                ),
                                                                (toString(get_Count(v552.clone()))),
                                                            )),
                                                            string(""),
                                                        );
                                                        let v556: bool = true;
                                                        leptos::logging::log!("{}", v554);
                                                        let v558: Vec<u8> = v552.to_vec();
                                                        let v560: &[u8] = v558.as_slice();
                                                        let v562: bool = true;
                                                        let mut v560 = v560;
                                                        let v564: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v560,
                                                        );
                                                        let v565 = Dice_ui::method23();
                                                        let v571: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v564.map_err(|x| v565(x));
                                                        Dice_ui::US25::US25_0(v571?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v600: Option<LrcPtr<Dice_ui::Heap4>> = match &v589 {
                                            Dice_ui::US25::US25_0(v589_0_0) => Some(
                                                match &v589 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v605: string = string("}");
                                        let v612: bool = true;
                                        let _fix_closure_v607 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v600
                                        );
                                        let v616: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v607 "),
                                                        (v605),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v617: bool = true;
                                        _fix_closure_v607
                                    },
                                ); // rust.fix_closure';
                                let v619 = __future_init;
                                let v621: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                > = v619;
                                let v624: bool = true;
                                v621 /*;
                                let v626: bool = */
                            }); //;
                            let v628: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = _func1_from_v202;
                            let v632: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v143.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v628 = v628.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v628.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v634: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v632);
                            let v636: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v634.await;
                            Dice_ui::US24::US24_0(v636?)
                        } else {
                            let v649: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v649))
                        };
                        let v726: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v714 {
                                Dice_ui::US24::US24_0(v714_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v714_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v714_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v714_1_0.clone(),
                                    )
                                }
                            };
                        let v733: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_requests (4) / state_data_resource new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v726.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v735: bool = true;
                        leptos::logging::log!("{}", v733);
                        let v736: string = string("}");
                        let v743: bool = true;
                        let _fix_closure_v738 = v726;
                        let v747: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v738 "), (v736))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v748: bool = true;
                        _fix_closure_v738
                    },
                ); // rust.fix_closure';
                let v750 = __future_init;
                let v752: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                > = v750;
                let v754: bool = true;
                v752 /*;
                let v756: bool = */
            }); //;
            let v758: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            > = _func0_from_v126;
            let v760: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v758().await });
            let v763: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v760 = v760.clone();
                    move || Dice_ui::closure66(v760.clone(), ())
                })()
            });
            let v766: bool = true;
            let _func0_from_v764 = Func0::from(move || {
                //;
                let v768: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v770: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v763.clone());
                let v777: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v768.clone()))),
                    )),
                    string(""),
                );
                let v779: bool = true;
                leptos::logging::log!("{}", v777);
                let v781: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v783: bool = */
                    async move {
                        /*;
                        let v785: bool = */
                        ();
                        let v810: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v770));
                        let v866: Dice_ui::US27 = match &v810 {
                            Dice_ui::US26::US26_0(v810_0_0) => {
                                let v814: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v810 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v815 = Dice_ui::method83();
                                let v816 = Dice_ui::method84();
                                let v818: Dice_ui::US24 = match &v814 {
                                    Err(v814_1_0) => v816(v814_1_0.clone()),
                                    Ok(v814_0_0) => v815(v814_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v818 {
                                    Dice_ui::US24::US24_0(v818_0_0) => {
                                        let v823: bool = true;
                                        let _vec_map: Vec<_> = v818_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v825: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v850: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v825),
                                                );
                                                let v855: bool = true;
                                                v850
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v818_1_0) => {
                                        Dice_ui::US28::US28_1(v818_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v873: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v866.clone()))),
                            )),
                            string(""),
                        );
                        let v875: bool = true;
                        leptos::logging::log!("{}", v873);
                        let v876 = Dice_ui::method86(v866);
                        let v877: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v768);
                        let v880: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v877.iter()
                                .enumerate()
                                .map(|(i, x)| v876(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v882: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                >,
                            >,
                        > = futures::future::try_join_all(v880);
                        let v884: Result<Vec<Option<string>>, std::string::String> = v882.await;
                        let v886: Vec<Option<string>> = v884?;
                        let v891: string = string("}");
                        let v898: bool = true;
                        let _fix_closure_v893 =
                            Ok::<Vec<Option<string>>, std::string::String>(v886);
                        let v902: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v893 "), (v891))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v903: bool = true;
                        _fix_closure_v893
                    },
                ); // rust.fix_closure';
                let v905 = __future_init;
                let v907: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Vec<Option<string>>, std::string::String>,
                            >,
                    >,
                > = v905;
                let v909: bool = true;
                v907 /*;
                let v911: bool = */
            }); //;
            let v913: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Vec<Option<string>>, std::string::String>,
                            >,
                    >,
                >,
            > = _func0_from_v764;
            let v915: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v913().await });
            let v918: bool = true;
            let _func1_from_v916 = Func1::from(move |value| {
                //;
                let v920: LrcPtr<Dice_ui::Heap4> = value;
                let v926: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v920.clone())) as i64)),
                    )),
                    string(""),
                );
                let v928: bool = true;
                leptos::logging::log!("{}", v926);
                let v930: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v932: bool = */
                    async move {
                        /*;
                        let v934: bool = */
                        ();
                        let v936: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v938: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v936);
                        let v940: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v125);
                        let v942: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v940);
                        let v944: bool = true;
                        let _optionm_map_ = v942.map(|x| {
                            //;
                            let v946: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v948: std::sync::Arc<rexie::Rexie> = v946.0;
                            let v950: bool = true;
                            v948
                        });
                        let v952: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v977: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v952));
                        let v1155: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v977_0_0) = &v977 {
                            let v984: bool = true;
                            let _func1_from_v982 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v986: string = patternInput_1.0.clone();
                                let v992: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v994: bool = */
                                    async move {
                                        /*;
                                        let v996: bool = */
                                        ();
                                        let v997: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: ",
                                                ),
                                                (v986.clone()),
                                            )),
                                            string(""),
                                        );
                                        let v999: bool = true;
                                        leptos::logging::log!("{}", v997);
                                        let v1000: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v986))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v1006: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v920.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v1008: bool = true;
                                        leptos::logging::log!("{}", v1006);
                                        let v1010: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v1012: bool = */
                                            async move {
                                                /*;
                                                let v1014: bool = */
                                                ();
                                                let v1016: bool = true;
                                                let mut data = Vec::new();
                                                let v1018: bool = true;
                                                borsh::BorshSerialize::serialize(&v920, &mut data)
                                                    .unwrap();
                                                let v1020: Vec<u8> = data;
                                                let v1022: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v1020).unwrap();
                                                let v1023: string = Dice_ui::method98(v1000);
                                                let v1032: &str = &*v1023;
                                                let v1061: rexie::Transaction =
                                                    v977_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v1063: rexie::Store = v1061.store("store")?;
                                                let v1065: bool = true;
                                                v1063.put(&v1022, Some(&v1032.into())).await?;
                                                let v1067: bool = true;
                                                v1061.done().await?;
                                                let v1072: string = string("}");
                                                let v1079: bool = true;
                                                let _fix_closure_v1074 = Ok::<(), rexie::Error>(());
                                                let v1083: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v1074 "),
                                                                (v1072),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v1084: bool = true;
                                                _fix_closure_v1074
                                            },
                                        ); // rust.fix_closure';
                                        let v1086 = __future_init;
                                        let v1088: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<(), rexie::Error>,
                                                    >,
                                            >,
                                        > = v1086;
                                        let v1090: Result<(), rexie::Error> = v1088.await;
                                        let v1091 = Dice_ui::method99();
                                        let v1097: Result<(), std::string::String> =
                                            v1090.map_err(|x| v1091(x));
                                        let v1108: bool = true;
                                        v1097?;
                                        let v1113: string = string("}");
                                        let v1120: bool = true;
                                        let _fix_closure_v1115 = Ok::<(), std::string::String>(());
                                        let v1124: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1115 "),
                                                        (v1113),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1125: bool = true;
                                        _fix_closure_v1115
                                    },
                                ); // rust.fix_closure';
                                let v1127 = __future_init;
                                let v1129: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                > = v1127;
                                let v1132: bool = true;
                                v1129 /*;
                                let v1134: bool = */
                            }); //;
                            let v1136: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = _func1_from_v982;
                            let v1140: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v938.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1136 = v1136.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v1136.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v1142: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v1140);
                            let v1144: Result<Vec<()>, std::string::String> = v1142.await;
                            Dice_ui::US34::US34_0(v1144?)
                        } else {
                            let v1150: bool = true;
                            leptos::logging::log!(
                                "{}",
                                string(
                                    "state_core.use_requests (12) / set_state_data_action / database,request=None"
                                )
                            );
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v1167: Result<Vec<()>, std::string::String> = match &v1155 {
                            Dice_ui::US34::US34_0(v1155_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v1155_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v1155_1_0) => {
                                Err::<Vec<()>, std::string::String>(v1155_1_0.clone())
                            }
                        };
                        let v1168: string = string("}");
                        let v1175: bool = true;
                        let _fix_closure_v1170 = v1167;
                        let v1179: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v1170 "), (v1168))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v1180: bool = true;
                        _fix_closure_v1170
                    },
                ); // rust.fix_closure';
                let v1182 = __future_init;
                let v1184: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v1182;
                let v1187: bool = true;
                v1184 /*;
                let v1189: bool = */
            }); //;
            let v1191: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v916;
            let v1194: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1191 = v1191.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1191.clone(), v_1)
                })(value.clone())
            });
            let v1197: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1194 = v1194.clone();
                    let v763 = v763.clone();
                    let v915 = v915.clone();
                    move || {
                        Dice_ui::closure130(
                            v0_1.clone(),
                            v763.clone(),
                            v915.clone(),
                            v1194.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1197 = v1197.clone();
                    let v122 = v122.clone();
                    let v760 = v760.clone();
                    move || {
                        Dice_ui::closure134(
                            v1.clone(),
                            v122.clone(),
                            v760.clone(),
                            v1197.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn method167() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure137(unitVar: (), v0_1: Dice_ui::US14) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn method168() -> Func1<Dice_ui::US14, Dice_ui::US57> {
            Func1::new(move |v: Dice_ui::US14| Dice_ui::closure137((), v))
        }
        pub fn closure138(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn method169() -> Func1<std::string::String, Dice_ui::US57> {
            Func1::new(move |v: std::string::String| Dice_ui::closure138((), v))
        }
        pub fn closure139(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn method170() -> Func1<crate::model::near::rpc::RpcResponse, Dice_ui::US60> {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure139((), v))
        }
        pub fn closure140(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn method171() -> Func1<std::string::String, Dice_ui::US60> {
            Func1::new(move |v: std::string::String| Dice_ui::closure140((), v))
        }
        pub fn method172(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>,
                    >,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap6>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure141(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>,
                    >,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>,
                    >,
                >,
            > = Dice_ui::method172(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure144(unitVar: (), v0_1: Dice_ui::US59) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(v0_1)
        }
        pub fn method174() -> Func1<Dice_ui::US59, Dice_ui::US58> {
            Func1::new(move |v: Dice_ui::US59| Dice_ui::closure144((), v))
        }
        pub fn closure145(unitVar: (), v0_1: std::string::String) -> Dice_ui::US58 {
            Dice_ui::US58::US58_1(v0_1)
        }
        pub fn method175() -> Func1<std::string::String, Dice_ui::US58> {
            Func1::new(move |v: std::string::String| Dice_ui::closure145((), v))
        }
        pub fn closure143(
            unitVar: (),
            v0_1: Result<Dice_ui::US59, std::string::String>,
        ) -> Dice_ui::US58 {
            let v1 = Dice_ui::method174();
            let v2 = Dice_ui::method175();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn method173() -> Func1<Result<Dice_ui::US59, std::string::String>, Dice_ui::US58> {
            Func1::new(move |v: Result<Dice_ui::US59, std::string::String>| {
                Dice_ui::closure143((), v)
            })
        }
        pub fn closure146(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US62 {
            Dice_ui::US62::US62_0(v0_1)
        }
        pub fn method176() -> Func1<Dice_ui::US58, Dice_ui::US62> {
            Func1::new(move |v: Dice_ui::US58| Dice_ui::closure146((), v))
        }
        pub fn closure142(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::prelude::ArcRwSignal<
                Option<Result<Dice_ui::US59, std::string::String>>,
            > = leptos::prelude::ArcAction::value(&v0_1);
            let v4: Option<Result<Dice_ui::US59, std::string::String>> =
                leptos::prelude::ArcRwSignal::get(&v2);
            let v8: Option<Dice_ui::US58> = map(Dice_ui::method173(), v4);
            let v55: Dice_ui::US62 =
                defaultValue(Dice_ui::US62::US62_1, map(Dice_ui::method176(), v8));
            let v76: Dice_ui::US58 = if let Dice_ui::US62::US62_0(v55_0_0) = &v55 {
                let v59: Dice_ui::US58 = v55_0_0.clone();
                match &v59 {
                    Dice_ui::US58::US58_0(v59_0_0) => {
                        let v62: Dice_ui::US59 = v59_0_0.clone();
                        if let Dice_ui::US59::US59_0(v62_0_0, v62_0_1, v62_0_2, v62_0_3) = &v62 {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                v62_0_0.clone(),
                                v62_0_1.clone(),
                                v62_0_2.clone(),
                                v62_0_3.clone(),
                            ))
                        } else {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                        }
                    }
                    Dice_ui::US58::US58_1(v59_1_0) => Dice_ui::US58::US58_1(v59_1_0.clone()),
                }
            } else {
                Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
            };
            let v96: Dice_ui::US63 = match &v76 {
                Dice_ui::US58::US58_0(v76_0_0) => {
                    let v77: Dice_ui::US59 = v76_0_0.clone();
                    Dice_ui::US63::US63_0(match &v77 {
                        Dice_ui::US59::US59_0(v77_0_0, v77_0_1, v77_0_2, v77_0_3) => Some((
                            match &v77 {
                                Dice_ui::US59::US59_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v77 {
                                Dice_ui::US59::US59_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v77 {
                                Dice_ui::US59::US59_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v77 {
                                Dice_ui::US59::US59_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US58::US58_1(v76_1_0) => Dice_ui::US63::US63_1(v76_1_0.clone()),
            };
            let v108: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v96 {
                Dice_ui::US63::US63_0(v96_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v96_0_0.clone()),
                Dice_ui::US63::US63_1(v96_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v96_1_0.clone()),
            };
            let v115: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / roll new_arc_memo / result: "),
                        sprintf!("{:?}", v108.clone()),
                    )),
                    string(""),
                ),
            );
            let v117: bool = true;
            leptos::logging::log!("{}", v115);
            v108
        }
        pub fn closure148(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method177() -> Func1<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            Dice_ui::US63,
        > {
            Func1::new(
                move |v: Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>| Dice_ui::closure148((), v),
            )
        }
        pub fn closure149(unitVar: (), v0_1: std::string::String) -> Dice_ui::US63 {
            Dice_ui::US63::US63_1(v0_1)
        }
        pub fn method178() -> Func1<std::string::String, Dice_ui::US63> {
            Func1::new(move |v: std::string::String| Dice_ui::closure149((), v))
        }
        pub fn closure150(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method179() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US59,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure150((), arg10_0040),
            )
        }
        pub fn closure151(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method180() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US64,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure151((), arg10_0040),
            )
        }
        pub fn closure147(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method177();
            let v4 = Dice_ui::method178();
            let v6: Dice_ui::US63 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v45: Dice_ui::US58 = match &v6 {
                Dice_ui::US63::US63_0(v6_0_0) => Dice_ui::US58::US58_0(defaultValue(
                    Dice_ui::US59::US59_1,
                    map(Dice_ui::method179(), v6_0_0.clone()),
                )),
                Dice_ui::US63::US63_1(v6_1_0) => Dice_ui::US58::US58_1(v6_1_0.clone()),
            };
            let v97: Dice_ui::US31 = if let Dice_ui::US58::US58_0(v45_0_0) = &v45 {
                let v46: Dice_ui::US59 = v45_0_0.clone();
                if let Dice_ui::US59::US59_0(v46_0_0, v46_0_1, v46_0_2, v46_0_3) = &v46 {
                    let v80: Dice_ui::US64 = defaultValue(
                        Dice_ui::US64::US64_1,
                        map(Dice_ui::method180(), v46_0_2.clone()),
                    );
                    if let Dice_ui::US64::US64_0(
                        v80_0_0,
                        v80_0_1,
                        v80_0_2,
                        v80_0_3,
                        v80_0_4,
                        v80_0_5,
                    ) = &v80
                    {
                        Dice_ui::US31::US31_0(append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append((toString(v80_0_0.clone())), string(": "))),
                                                (toString(v80_0_4.clone())),
                                            )),
                                            string(" - "),
                                        )),
                                        (toString(v80_0_5.clone())),
                                    )),
                                    string(" ("),
                                )),
                                (toString(v80_0_1.clone())),
                            )),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US31::US31_1
                    }
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            let v108: Option<string> = match &v97 {
                Dice_ui::US31::US31_0(v97_0_0) => Some(
                    match &v97 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => None::<string>,
            };
            let v115: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / error_message new_arc_memo / result: "),
                        sprintf!("{:?}", v108.clone()),
                    )),
                    string(""),
                ),
            );
            let v117: bool = true;
            leptos::logging::log!("{}", v115);
            v108
        }
        pub fn closure152(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US31 {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v34: Dice_ui::US14 = defaultValue(
                Dice_ui::US14::US14_1,
                map(Dice_ui::method39(), v8.l1.clone()),
            );
            match &v34 {
                Dice_ui::US14::US14_0(v34_0_0) => {
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                        match &v34 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US31::US31_1,
            }
        }
        pub fn method181(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> {
            v0_1
        }
        pub fn closure154(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
            v1_: bool,
            v1__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v2: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                Dice_ui::method181(v0_1);
            let patternInput: (bool, std::string::String) =
                (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method182(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
        ) -> Func1<(bool, std::string::String), std::string::String> {
            v0_1
        }
        pub fn closure155(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
            _arg: (bool, std::string::String),
        ) -> std::string::String {
            let v3: Func1<(bool, std::string::String), std::string::String> =
                Dice_ui::method182(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure157(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = leptos::prelude::signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure156(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure157(v0_1, v)
            })
        }
        pub fn method183() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure156((), v))
        }
        pub fn method184(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure153(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let v14: LrcPtr<(bool, std::string::String)> = value;
                let v25: bool = true;
                (v14.0.clone(), v14.1.clone()) /*;
                let v27: bool = */
            }); //;
            let v29: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                _func1_from_v10;
            let v32: Vec<(bool, std::string::String)> = v8
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v29 = v29.clone();
                        move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                            Dice_ui::closure154(
                                v29.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v33 = Dice_ui::method55();
            let v34: Vec<(bool, std::string::String)> = Dice_ui::method56(v32);
            let v36: Vec<(bool, std::string::String)> = v34
                .into_iter()
                .filter(|x| v33(x.clone().clone()))
                .collect::<Vec<_>>();
            let v39: bool = true;
            let _func1_from_v37 = Func1::from(move |value| {
                //;
                let patternInput: (bool, std::string::String) = value;
                let v45: bool = true;
                patternInput.1.clone() /*;
                let v47: bool = */
            }); //;
            let v49: Func1<(bool, std::string::String), std::string::String> = _func1_from_v37;
            let v52: Vec<std::string::String> = v36
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v49 = v49.clone();
                        move |arg10_0040_1: (bool, std::string::String)| {
                            Dice_ui::closure155(v49.clone(), arg10_0040_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v53 = Dice_ui::method183();
            let v54: Vec<std::string::String> = Dice_ui::method184(v52);
            v54.iter()
                .enumerate()
                .map(|(i, x)| v53(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method185(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure159(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<std::string::String>,
            leptos::prelude::WriteSignal<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = Dice_ui::method185(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method186(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
            (i32, leptos::prelude::ReadSignal<std::string::String>),
        > {
            v0_1
        }
        pub fn closure160(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::prelude::ReadSignal<std::string::String>) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = Dice_ui::method186(v0_1);
            let patternInput: (i32, leptos::prelude::ReadSignal<std::string::String>) =
                (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure158(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = v7.1.clone();
                let v22: bool = true;
                (v7.0.clone(), b.0.clone(), b.1.clone()) /*;
                let v24: bool = */
            }); //;
            let v26: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = _func1_from_v3;
            let v29: Vec<(
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v26 = v26.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<std::string::String>,
                                leptos::prelude::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure159(
                                v26.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v32: bool = true;
            let _func1_from_v30 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = value;
                let v39: bool = true;
                (patternInput.0.clone(), patternInput.1.clone()) /*;
                let v41: bool = */
            }); //;
            let v43: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = _func1_from_v30;
            v29.into_iter()
                .map(|x| {
                    Func1::new({
                        let v43 = v43.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        )| Dice_ui::closure160(v43.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure161(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure162(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure163(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure164(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure165(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method187() -> Func0<string> {
            Func0::new(move || Dice_ui::closure165((), ()))
        }
        pub fn closure166(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure168(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure169(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure170(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure171(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure173(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<Dice_ui::US31>,
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(v0_1)
        }
        pub fn method189() -> Func1<leptos::prelude::ArcMemo<Dice_ui::US31>, Dice_ui::US65> {
            Func1::new(move |v: leptos::prelude::ArcMemo<Dice_ui::US31>| Dice_ui::closure173((), v))
        }
        pub fn closure172(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v27: Dice_ui::US65 =
                defaultValue(Dice_ui::US65::US65_1, map(Dice_ui::method189(), v1));
            let v37: Dice_ui::US42 = match &v27 {
                Dice_ui::US65::US65_0(v27_0_0) => {
                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                        &match &v27 {
                            Dice_ui::US65::US65_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US42::US42_1,
            };
            let v44: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v37_0_0) = &v37 {
                let v38: Dice_ui::US31 = v37_0_0.clone();
                if let Dice_ui::US31::US31_0(v38_0_0) = &v38 {
                    Dice_ui::US31::US31_0(v38_0_0.clone())
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            match &v44 {
                Dice_ui::US31::US31_0(v44_0_0) => match &v44 {
                    Dice_ui::US31::US31_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string("Select..."),
            }
        }
        pub fn method188(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure172(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure175(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method190() -> Func1<
            leptos::prelude::ArcMemo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            Dice_ui::US66,
        > {
            Func1::new(
                move |v: leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >| Dice_ui::closure175((), v),
            )
        }
        pub fn method192(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            v0_1
        }
        pub fn closure176(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> i32 {
            let v3: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> =
                Dice_ui::method192(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn method191(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure176(v0_1.clone(), arg10_0040)
                }
            })
        }
        pub fn method193(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure177(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method194(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), leptos::prelude::AnyView>
        {
            v0_1
        }
        pub fn closure178(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> leptos::prelude::AnyView {
            let v3: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            > = Dice_ui::method194(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure174(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(
                "class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"",
            );
            let v5: string = append(
                (append((append(string(" "), (v3))), string(""))),
                string(""),
            );
            let v30: Dice_ui::US66 = defaultValue(
                Dice_ui::US66::US66_1,
                map(Dice_ui::method190(), v0_1.clone()),
            );
            let v40: Dice_ui::US67 = match &v30 {
                Dice_ui::US66::US66_0(v30_0_0) => {
                    Dice_ui::US67::US67_0(leptos::prelude::ArcMemo::get(
                        &match &v30 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US67::US67_1,
            };
            let v43: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::prelude::ReadSignal<std::string::String>)>().to_vec();
            let v46: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> = match &v40 {
                Dice_ui::US67::US67_0(v40_0_0) => match &v40 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => v43.clone(),
            };
            let v871: leptos::prelude::Fragment = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v46.clone()),
            ) as u64)
                == 0_u64
            {
                let v52: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v54: string = string(" class=\"[height:17px]\"");
                let v68: string = string(
                    " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v74: string = string(
                    " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v75: string = string("vec![]");
                let v76: Vec<leptos::prelude::AnyView> = vec![];
                let v78: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v76);
                let v80: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v78);
                let v83: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v74))),
                                    string(">move || { v80 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v85: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v80 }</path> };
                let v87: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v85);
                let v91: string = string("vec![v87]");
                let v92: Vec<leptos::prelude::AnyView> = vec![v87];
                let v94: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v92);
                let v96: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v94);
                let v99: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v68))),
                                    string(">move || { v96 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v101: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v96 }</svg> };
                let v103: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v101);
                let v107: string = string("vec![v103]");
                let v108: Vec<leptos::prelude::AnyView> = vec![v103];
                let v110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v108);
                let v112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v110);
                let v115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v54))),
                                    string(">move || { v112 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v117: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v112 }</span> };
                let v119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v117);
                let v121: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v131: &str = &*string("No data");
                let v167: std::string::String = String::from(v131);
                let v196: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v167));
                let v200: string = string("vec![v196]");
                let v201: Vec<leptos::prelude::AnyView> = vec![v196];
                let v203: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v201);
                let v205: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v203);
                let v208: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v121))),
                                    string(">move || { v205 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v210: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v205 }</pre> };
                let v212: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v210);
                let v220: string = string("vec![v119, v212]");
                let v221: Vec<leptos::prelude::AnyView> = vec![v119, v212];
                let v223: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v221);
                let v225: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v223);
                let v228: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v52))),
                                    string(">move || { v225 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v230: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v225 }</div> };
                let v232: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v230);
                let v236: string = string("vec![v232]");
                let v237: Vec<leptos::prelude::AnyView> = vec![v232];
                leptos::prelude::Fragment::new(v237)
            } else {
                let v264: Dice_ui::US66 =
                    defaultValue(Dice_ui::US66::US66_1, map(Dice_ui::method190(), v0_1));
                match &v264 {
                    Dice_ui::US66::US66_0(v264_0_0) => {
                        let v270: leptos::prelude::ArcMemo<
                            Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                        > = match &v264 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v273: bool = true;
                        let _func1_from_v271 = Func1::from(move |value| {
                            //;
                            let patternInput: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v279: bool = true;
                            patternInput.0.clone() /*;
                            let v281: bool = */
                        }); //;
                        let v284 = Dice_ui::method191(_func1_from_v271);
                        let v287: bool = true;
                        let _func1_from_v285 = Func1::from(move |value| {
                            //;
                            let patternInput_1: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v292: std::string::String =
                                leptos::prelude::ReadSignal::get(&patternInput_1.1.clone());
                            let v293: std::string::String = Dice_ui::method193(v292.clone());
                            let v296: bool = true;
                            let _func0_from_v294 = Func0::from(move || {
                                //;
                                let v298: string =
                                    fable_library_rust::String_::fromString(v292.clone());
                                let v301: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v303: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v301);
                                let v306: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                                > = Box::pin(v303.l3.clone());
                                let v308: LrcPtr<Dice_ui::Heap0> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v306);
                                let v316: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v318: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v316);
                                let v328: &str = &*v298;
                                let v396: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                                    l0: v308.l0.clone(),
                                    l1: Some(String::from(v328)),
                                    l2: v308.l2,
                                    l3: v308.l3,
                                    l4: v308.l4.clone(),
                                });
                                let v398: bool = true;
                                leptos::prelude::ArcRwSignal::set(&v318.l3.clone(), v396); //;
                                let v400: bool = true; /*;
                                let v402: bool = */
                            }); //;
                            let v404: Func0<()> = _func0_from_v294;
                            let v519: string = join(
                                string(" "),
                                toArray(delay(Func0::new(move || {
                                    ofList(ofArray_1(new_array(&[
                                        string("flex"),
                                        string("flex-1"),
                                        string("gap-[10px]"),
                                        string("[align-items:center]"),
                                        string("[justify-content:center]"),
                                        string("inline-block"),
                                        string("rounded"),
                                        string("border"),
                                        string("border-gray-400"),
                                        string("hover:bg-gray-100"),
                                        string("px-[22px]"),
                                        string("py-1"),
                                        string("text-sm"),
                                        string("text-gray-900"),
                                        string("bg-gray-200"),
                                        string("hover:text-gray-600"),
                                        string("focus:outline-none"),
                                        string("focus:ring"),
                                        string("active:text-gray-500"),
                                    ])))
                                }))),
                            );
                            let v530: &str = &*v519;
                            let v566: std::string::String = String::from(v530);
                            let v595: std::string::String = v566;
                            let v601: string =
                                string(" aria-label=v293 on:click=move |_| v404() class=v595");
                            let v603: string = fable_library_rust::String_::fromString(v292);
                            let v628: Dice_ui::US65 = defaultValue(
                                Dice_ui::US65::US65_1,
                                map(Dice_ui::method189(), v1.clone()),
                            );
                            let v638: Dice_ui::US42 = match &v628 {
                                Dice_ui::US65::US65_0(v628_0_0) => {
                                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                                        &match &v628 {
                                            Dice_ui::US65::US65_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US42::US42_1,
                            };
                            let v645: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v638_0_0) = &v638
                            {
                                let v639: Dice_ui::US31 = v638_0_0.clone();
                                if let Dice_ui::US31::US31_0(v639_0_0) = &v639 {
                                    Dice_ui::US31::US31_0(v639_0_0.clone())
                                } else {
                                    Dice_ui::US31::US31_1
                                }
                            } else {
                                Dice_ui::US31::US31_1
                            };
                            let v734: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(
                                v645_0_0,
                            ) = &v645
                            {
                                if (v603.clone()) == (v645_0_0.clone()) {
                                    let v650 = {
                                        let clo = Func0::new(move || Dice_ui::closure177((), ()));
                                        Func1::new({
                                            let clo = clo.clone();
                                            move |arg: ()| clo()
                                        })
                                    };
                                    let v662: string = string(
                                        " class=move || \" \".to_owned() + &v650(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                                    );
                                    let v672: string = string(
                                        " stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"",
                                    );
                                    let v673: string = string("vec![]");
                                    let v674: Vec<leptos::prelude::AnyView> = vec![];
                                    let v676: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v674);
                                    let v678: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v676);
                                    let v681: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<circle "), (v672))),
                                                        string(">move || { v678 }</"),
                                                    )),
                                                    string("circle"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v683: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                                    > = leptos::prelude::view! { <circle  stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">move || { v678 }</circle> };
                                    let v685: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v683);
                                    let v691: string = string(
                                        " d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                                    );
                                    let v692: string = string("vec![]");
                                    let v693: Vec<leptos::prelude::AnyView> = vec![];
                                    let v695: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v693);
                                    let v697: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v695);
                                    let v700: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<path "), (v691))),
                                                        string(">move || { v697 }</"),
                                                    )),
                                                    string("path"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v702: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                    > = leptos::prelude::view! { <path  d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">move || { v697 }</path> };
                                    let v704: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v702);
                                    let v712: string = string("vec![v685, v704]");
                                    let v713: Vec<leptos::prelude::AnyView> = vec![v685, v704];
                                    let v715: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v713);
                                    let v717: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v715);
                                    let v720: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<svg "), (v662))),
                                                        string(">move || { v717 }</"),
                                                    )),
                                                    string("svg"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v722: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v650(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v717 }</svg> };
                                    leptos::prelude::IntoAny::into_any(v722)
                                } else {
                                    let v725: string = string("vec![]");
                                    let v726: Vec<leptos::prelude::AnyView> = vec![];
                                    leptos::prelude::IntoAny::into_any(v726)
                                }
                            } else {
                                let v730: string = string("vec![]");
                                let v731: Vec<leptos::prelude::AnyView> = vec![];
                                leptos::prelude::IntoAny::into_any(v731)
                            };
                            let v743: &str = &*v603;
                            let v779: std::string::String = String::from(v743);
                            let v808: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v779),
                            );
                            let v816: string = string("vec![v734, v808]");
                            let v817: Vec<leptos::prelude::AnyView> = vec![v734, v808];
                            let v819: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v817);
                            let v821: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v819);
                            let v824: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<button "), (v601))),
                                                string(">move || { v821 }</"),
                                            )),
                                            string("button"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v826: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Button, _, _>,
                            > = leptos::prelude::view! { <button  aria-label=v293 on:click=move |_| v404() class=v595>move || { v821 }</button> };
                            let v828: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v826);
                            let v832: string = string("vec![v828]");
                            let v833: Vec<leptos::prelude::AnyView> = vec![v828];
                            let v835: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v833);
                            let v837: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v835);
                            let v840: bool = true;
                            v837 /*;
                            let v842: bool = */
                        }); //;
                        let v844: Func1<
                            (i32, leptos::prelude::ReadSignal<std::string::String>),
                            leptos::prelude::AnyView,
                        > = _func1_from_v285;
                        let v856: string = string(
                            "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v848(x) let:x key=move |x| v284(x.to_owned()) each=v270 /> })",
                        );
                        let v857: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::view! { <leptos::prelude::For  children=move |x| v848(x) let:x key=move |x| v284(x.to_owned()) each=v270 /> },
                        );
                        let v861: string = string("vec![v857]");
                        let v862: Vec<leptos::prelude::AnyView> = vec![v857];
                        leptos::prelude::Fragment::new(v862)
                    }
                    _ => {
                        let v865: string = string("vec![]");
                        let v866: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::Fragment::new(v866)
                    }
                }
            };
            let v873: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v871);
            let v876: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5))),
                                string(">move || { v873 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v878: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">move || { v873 }</div> };
            let v880: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v878);
            let v884: string = string("vec![v880]");
            let v885: Vec<leptos::prelude::AnyView> = vec![v880];
            leptos::prelude::Fragment::new(v885)
        }
        pub fn method195(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            v0_1
        }
        pub fn closure179(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method196(v0_1: Func1<std::string::String, ()>) -> Func1<std::string::String, ()> {
            v0_1
        }
        pub fn closure180(v0_1: Func1<std::string::String, ()>, v1: std::string::String) {
            let v2: Func1<std::string::String, ()> = Dice_ui::method196(v0_1);
            (move |x| v2(x))(v1);
            ()
        }
        pub fn closure181(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::prelude::ArcMemo<bool> = leptos::prelude::ArcAction::pending(&v0_1);
            leptos::prelude::ArcMemo::get(&v2)
        }
        pub fn method197(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure182(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure167(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<Option<string>>,
            v3: leptos::prelude::ArcMemo<Dice_ui::US31>,
            v4: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v9: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v19: &str = &*string("Account");
            let v55: std::string::String = String::from(v19);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v94: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            > = Some(v4);
            let v98: Option<leptos::prelude::ArcMemo<Dice_ui::US31>> = Some(v3);
            let v101: string = string("vec![]");
            let v102: Vec<leptos::prelude::AnyView> = vec![];
            let v104: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v102);
            let v106: string = string(" class=\"flex flex-col [position:relative]\"");
            let v109 = {
                let clo = Func0::new(move || Dice_ui::closure168((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v112 = {
                let clo_1 = Func0::new(move || Dice_ui::closure169((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v114: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v118: string = string("vec![v104]");
            let v119: Vec<leptos::prelude::AnyView> = vec![v104];
            let v121: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v119);
            let v123: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v121);
            let v126: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v114))),
                                string(">move || { v123 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v128: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v123 }</div> };
            let v130: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v128);
            let v131: string = string(
                "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v109(())",
            );
            let v134: string = append(
                (append(
                    string(" open=move || v112(())"),
                    (append(
                        (append((append(string(" "), (v131))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v137 = {
                let clo_2 = Func0::new(move || Dice_ui::closure170((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v140 = {
                let clo_3 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v94 = v94.clone();
                    let v98 = v98.clone();
                    move || Dice_ui::closure171(v94.clone(), v98.clone(), v0_1.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v141: string = string(
                "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v140(()) + \" \" + &v137(())",
            );
            let v142: string = append(
                (append((append(string(" "), (v141))), string(""))),
                string(""),
            );
            let v144: string = string(" class=\"flex items-center gap-2\"");
            let v147: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v148: string = (Dice_ui::method188(v94.clone(), v98.clone(), v0_1.clone()))();
            let v157: &str = &*v148;
            let v193: std::string::String = String::from(v157);
            let v222: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v193));
            let v226: string = string("vec![v222]");
            let v227: Vec<leptos::prelude::AnyView> = vec![v222];
            let v229: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v227);
            let v231: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v229);
            let v234: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v147))),
                                string(">move || { v231 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v236: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v231 }</span> };
            let v238: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v236);
            let v242: string = string("vec![v238]");
            let v243: Vec<leptos::prelude::AnyView> = vec![v238];
            let v245: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v243);
            let v247: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v245);
            let v249: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v144))),
                                string(">move || { v247 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v251: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v247 }</div> };
            let v253: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v251);
            let v255: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v258 = {
                let clo_4 = Func0::new(move || Dice_ui::closure166((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v266: string = string(
                " class=move || \" \".to_owned() + &v258(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
            );
            let v268: string = string(
                "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
            );
            let v272: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v268))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v273: string = string("vec![]");
            let v274: Vec<leptos::prelude::AnyView> = vec![];
            let v276: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v274);
            let v278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v276);
            let v281: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v272))),
                                string(">move || { v278 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v283: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v278 }</path> };
            let v285: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v283);
            let v289: string = string("vec![v285]");
            let v290: Vec<leptos::prelude::AnyView> = vec![v285];
            let v292: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v290);
            let v294: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v292);
            let v297: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v266))),
                                string(">move || { v294 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v299: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v258(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v294 }</svg> };
            let v301: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v299);
            let v305: string = string("vec![v301]");
            let v306: Vec<leptos::prelude::AnyView> = vec![v301];
            let v308: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v306);
            let v310: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v308);
            let v312: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v255))),
                                string(">move || { v310 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v314: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v310 }</span> };
            let v316: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v314);
            let v324: string = string("vec![v253, v316]");
            let v325: Vec<leptos::prelude::AnyView> = vec![v253, v316];
            let v327: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v325);
            let v329: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v327);
            let v332: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<summary "), (v142))),
                                string(">move || { v329 }</"),
                            )),
                            string("summary"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v334: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v140(()) + " " + &v137(())>move || { v329 }</summary> };
            let v336: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v334);
            let v338: string = string(" class=\"flex flex-1 flex-col\"");
            let v342: Func0<leptos::prelude::Fragment> =
                Dice_ui::method195(Func0::new(move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v94 = v94.clone();
                        let v98 = v98.clone();
                        move || Dice_ui::closure174(v94.clone(), v98.clone(), v0_1.clone(), ())
                    })()
                }));
            let v344: leptos::prelude::Fragment = (move || v342())();
            let v346: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v344);
            let v348: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v338))),
                                string(">move || { v346 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v350: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v346 }</div> };
            let v352: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v350);
            let v359: string = string("vec![v336, v352]");
            let v360: Vec<leptos::prelude::AnyView> = vec![v336, v352];
            let v362: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v360);
            let v364: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v362);
            let v367: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<details "), (v134))),
                                string(">move || { v364 }</"),
                            )),
                            string("details"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v369: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Details, _, _>,
            > = leptos::prelude::view! { <details  open=move || v112(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v109(())>move || { v364 }</details> };
            let v371: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v369);
            let v378: string = string("vec![v130, v371]");
            let v379: Vec<leptos::prelude::AnyView> = vec![v130, v371];
            let v381: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v379);
            let v383: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v381);
            let v385: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v106))),
                                string(">move || { v383 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v387: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v383 }</div> };
            let v389: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v387);
            let v396: string = string("vec![v84, v389]");
            let v397: Vec<leptos::prelude::AnyView> = vec![v84, v389];
            let v399: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v397);
            let v401: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v399);
            let v403: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v9))),
                                string(">move || { v401 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v405: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v401 }</div> };
            let v407: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v405);
            let v409: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v419: &str = &*string("Max");
            let v455: std::string::String = String::from(v419);
            let v484: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v455));
            let v487: bool = true;
            let _func0_from_v485 = Func0::from(move || {
                //;
                let v490: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v492: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v490);
                let v495: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v492.l3.clone());
                let v497: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v495);
                let v500: bool = true;
                v497.l2 /*;
                let v502: bool = */
            }); //;
            let v504: Func0<i32> = _func0_from_v485;
            let v507: bool = true;
            let _func1_from_v505 = Func0::from(move || {
                //;
                let v509: std::string::String = value;
                let v512: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v514: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v512);
                let v517: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v514.l3.clone());
                let v519: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v517);
                let v527: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v529: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v527);
                let v533: string = toString(v509);
                let v551: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                    l0: v519.l0.clone(),
                    l1: v519.l1.clone(),
                    l2: if string("") == (v533.clone()) {
                        1_i32
                    } else {
                        toInt32(v533)
                    },
                    l3: v519.l3,
                    l4: v519.l4.clone(),
                });
                let v553: bool = true;
                leptos::prelude::ArcRwSignal::set(&v529.l3.clone(), v551); //;
                let v555: bool = true; /*;
                let v557: bool = */
            }); //;
            let v559: Func1<std::string::String, ()> = _func1_from_v505;
            let v562 = {
                let clo_5 = Func0::new(move || Dice_ui::closure179((), ()));
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v572: string = string(
                "leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v565(leptos::prelude::event_target_value(&event)) prop:value=move || v504() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v562(()) /> }",
            );
            let v574: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v565(leptos::prelude::event_target_value(&event)) prop:value=move || v504() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v562(()) /> };
            let v576: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v574);
            let v583: string = string("vec![v484, v576]");
            let v584: Vec<leptos::prelude::AnyView> = vec![v484, v576];
            let v586: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v584);
            let v588: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v586);
            let v590: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v409))),
                                string(">move || { v588 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v592: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v588 }</div> };
            let v594: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v592);
            let v596: string = string(" class=\"flex\"");
            let v599: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure181(v1.clone(), ())
                })()
            });
            let v600: Func0<bool> = Dice_ui::method197(v599.clone());
            let v603: bool = true;
            let _func0_from_v601 = Func0::from(move || {
                //;
                let v606: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v608: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v606);
                let v611: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v608.l3.clone());
                let v615: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                    l0: (leptos::prelude::ArcRwSignal::get_untracked(&v611)).l2,
                });
                let v617: bool = true;
                leptos::prelude::ArcAction::dispatch(&v1.clone(), v615.clone());
                let v619: bool = true; /*;
                let v621: bool = */
            }); //;
            let v623: Func0<()> = _func0_from_v601;
            let v733: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("flex"),
                        string("gap-[10px]"),
                        string("[align-items:center]"),
                        string("inline-block"),
                        string("rounded"),
                        string("border"),
                        string("border-gray-400"),
                        string("hover:bg-gray-400"),
                        string("px-4"),
                        string("py-1"),
                        string("text-sm"),
                        string("font-medium"),
                        string("text-gray-900"),
                        string("bg-transparent"),
                        string("hover:text-gray-600"),
                        string("focus:outline-none"),
                        string("focus:ring"),
                        string("active:text-gray-500"),
                    ])))
                }))),
            );
            let v744: &str = &*v733;
            let v780: std::string::String = String::from(v744);
            let v809: std::string::String = v780;
            let v815: string =
                string(" on:click=move |_| v623() prop:disabled=move || v600() class=v809");
            let v825: &str = &*string("Roll");
            let v861: std::string::String = String::from(v825);
            let v890: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v861));
            let v1256: leptos::prelude::AnyView = if v599() {
                let v895 = {
                    let clo_6 = Func0::new(move || Dice_ui::closure182((), ()));
                    Func1::new({
                        let clo_6 = clo_6.clone();
                        move |arg_6: ()| clo_6()
                    })
                };
                let v913: string = string(
                    " class=move || \" \".to_owned() + &v895(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"",
                );
                let v925: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                );
                let v937: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                );
                let v938: string = string("vec![]");
                let v939: Vec<leptos::prelude::AnyView> = vec![];
                let v941: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v939);
                let v943: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v941);
                let v946: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v937))),
                                    string(">move || { v943 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v948: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v943 }</animate> };
                let v950: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v948);
                let v962: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                );
                let v963: string = string("vec![]");
                let v964: Vec<leptos::prelude::AnyView> = vec![];
                let v966: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v964);
                let v968: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v966);
                let v970: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v962))),
                                    string(">move || { v968 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v972: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v968 }</animate> };
                let v974: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v972);
                let v986: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                );
                let v987: string = string("vec![]");
                let v988: Vec<leptos::prelude::AnyView> = vec![];
                let v990: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v988);
                let v992: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v990);
                let v994: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v986))),
                                    string(">move || { v992 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v996: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v992 }</animate> };
                let v998: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v996);
                let v1008: string = string("vec![v950, v974, v998]");
                let v1009: Vec<leptos::prelude::AnyView> = vec![v950, v974, v998];
                let v1011: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1009);
                let v1013: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1011);
                let v1016: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v925))),
                                    string(">move || { v1013 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1018: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v1013 }</rect> };
                let v1030: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                );
                let v1042: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                );
                let v1043: string = string("vec![]");
                let v1044: Vec<leptos::prelude::AnyView> = vec![];
                let v1046: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1044);
                let v1048: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1046);
                let v1050: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1042))),
                                    string(">move || { v1048 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1052: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1048 }</animate> };
                let v1054: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1052);
                let v1066: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"",
                );
                let v1067: string = string("vec![]");
                let v1068: Vec<leptos::prelude::AnyView> = vec![];
                let v1070: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1068);
                let v1072: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1070);
                let v1074: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1066))),
                                    string(">move || { v1072 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1076: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1072 }</animate> };
                let v1078: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1076);
                let v1090: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                );
                let v1091: string = string("vec![]");
                let v1092: Vec<leptos::prelude::AnyView> = vec![];
                let v1094: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1092);
                let v1096: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1094);
                let v1098: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1090))),
                                    string(">move || { v1096 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1100: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1096 }</animate> };
                let v1102: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1100);
                let v1112: string = string("vec![v1054, v1078, v1102]");
                let v1113: Vec<leptos::prelude::AnyView> = vec![v1054, v1078, v1102];
                let v1115: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1113);
                let v1117: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1115);
                let v1119: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v1030))),
                                    string(">move || { v1117 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1121: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1117 }</rect> };
                let v1133: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                );
                let v1145: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                );
                let v1146: string = string("vec![]");
                let v1147: Vec<leptos::prelude::AnyView> = vec![];
                let v1149: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1147);
                let v1151: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1149);
                let v1153: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1145))),
                                    string(">move || { v1151 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1155: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1151 }</animate> };
                let v1157: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1155);
                let v1169: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                );
                let v1170: string = string("vec![]");
                let v1171: Vec<leptos::prelude::AnyView> = vec![];
                let v1173: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1171);
                let v1175: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1173);
                let v1177: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1169))),
                                    string(">move || { v1175 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1179: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1175 }</animate> };
                let v1181: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1179);
                let v1193: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                );
                let v1194: string = string("vec![]");
                let v1195: Vec<leptos::prelude::AnyView> = vec![];
                let v1197: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1195);
                let v1199: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1197);
                let v1201: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1193))),
                                    string(">move || { v1199 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1203: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1199 }</animate> };
                let v1205: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1203);
                let v1215: string = string("vec![v1157, v1181, v1205]");
                let v1216: Vec<leptos::prelude::AnyView> = vec![v1157, v1181, v1205];
                let v1218: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1216);
                let v1220: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1218);
                let v1222: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v1133))),
                                    string(">move || { v1220 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1224: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1220 }</rect> };
                let v1226: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1224);
                let v1228: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1121);
                let v1230: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1018);
                let v1240: string = string("vec![v1230, v1228, v1226]");
                let v1241: Vec<leptos::prelude::AnyView> = vec![v1230, v1228, v1226];
                let v1243: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1241);
                let v1245: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1243);
                let v1247: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v913))),
                                    string(">move || { v1245 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1249: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v895(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1245 }</svg> };
                leptos::prelude::IntoAny::into_any(v1249)
            } else {
                let v1252: string = string("vec![]");
                let v1253: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1253)
            };
            let v1263: string = string("vec![v890, v1256]");
            let v1264: Vec<leptos::prelude::AnyView> = vec![v890, v1256];
            let v1266: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1264);
            let v1268: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1266);
            let v1271: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<button "), (v815))),
                                string(">move || { v1268 }</"),
                            )),
                            string("button"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1273: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Button, _, _>,
            > = leptos::prelude::view! { <button  on:click=move |_| v623() prop:disabled=move || v600() class=v809>move || { v1268 }</button> };
            let v1275: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1273);
            let v1277: Option<string> = leptos::prelude::ArcMemo::get(&v2);
            let v1302: Dice_ui::US31 =
                defaultValue(Dice_ui::US31::US31_1, map(Dice_ui::method106(), v1277));
            let v1487: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(v1302_0_0) = &v1302 {
                let v1308: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v1310: string = string(" class=\"[height:17px]\"");
                let v1324: string = string(
                    " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v1330: string = string(
                    " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v1331: string = string("vec![]");
                let v1332: Vec<leptos::prelude::AnyView> = vec![];
                let v1334: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1332);
                let v1336: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1334);
                let v1338: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v1330))),
                                    string(">move || { v1336 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1340: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1336 }</path> };
                let v1342: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1340);
                let v1346: string = string("vec![v1342]");
                let v1347: Vec<leptos::prelude::AnyView> = vec![v1342];
                let v1349: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1347);
                let v1351: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1349);
                let v1353: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v1324))),
                                    string(">move || { v1351 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1355: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1351 }</svg> };
                let v1357: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1355);
                let v1361: string = string("vec![v1357]");
                let v1362: Vec<leptos::prelude::AnyView> = vec![v1357];
                let v1364: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1362);
                let v1366: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1364);
                let v1368: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v1310))),
                                    string(">move || { v1366 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1370: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1366 }</span> };
                let v1372: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1370);
                let v1374: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v1383: &str = &*v1302_0_0.clone();
                let v1419: std::string::String = String::from(v1383);
                let v1448: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1419));
                let v1452: string = string("vec![v1448]");
                let v1453: Vec<leptos::prelude::AnyView> = vec![v1448];
                let v1455: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1453);
                let v1457: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1455);
                let v1460: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v1374))),
                                    string(">move || { v1457 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1462: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v1457 }</pre> };
                let v1464: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1462);
                let v1471: string = string("vec![v1372, v1464]");
                let v1472: Vec<leptos::prelude::AnyView> = vec![v1372, v1464];
                let v1474: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1472);
                let v1476: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1474);
                let v1478: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v1308))),
                                    string(">move || { v1476 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1480: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v1476 }</div> };
                leptos::prelude::IntoAny::into_any(v1480)
            } else {
                let v1483: string = string("vec![]");
                let v1484: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1484)
            };
            let v1494: string = string("vec![v1275, v1487]");
            let v1495: Vec<leptos::prelude::AnyView> = vec![v1275, v1487];
            let v1497: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1495);
            let v1499: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1497);
            let v1501: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v596))),
                                string(">move || { v1499 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1503: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex">move || { v1499 }</div> };
            let v1505: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1503);
            let v1515: string = string("vec![v407, v594, v1505]");
            let v1516: Vec<leptos::prelude::AnyView> = vec![v407, v594, v1505];
            let v1518: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1516);
            let v1520: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1518);
            let v1522: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v1520 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1524: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col p-[10px] gap-[11px]">move || { v1520 }</div> };
            let v1526: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1524);
            let v1530: string = string("vec![v1526]");
            let v1531: Vec<leptos::prelude::AnyView> = vec![v1526];
            leptos::prelude::Fragment::new(v1531)
        }
        pub fn closure183(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure184(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure185(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method198() -> Func0<string> {
            Func0::new(move || Dice_ui::closure185((), ()))
        }
        pub fn method200(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
        ) -> Func1<(std::string::String, Option<std::string::String>), (string, Dice_ui::US31)>
        {
            v0_1
        }
        pub fn closure188(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US31) {
            let v3: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = Dice_ui::method200(v0_1);
            let patternInput: (string, Dice_ui::US31) =
                (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure189(unitVar: (), _arg: (string, Dice_ui::US31)) -> bool {
            let v1: Dice_ui::US31 = _arg.1.clone();
            if string("FUNCTION_CALL") == (_arg.0.clone()) {
                if let Dice_ui::US31::US31_0(v1_0_0) = &v1 {
                    string("generate_random_number") == (v1_0_0.clone())
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method201() -> Func1<(string, Dice_ui::US31), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US31)| {
                Dice_ui::closure189((), arg10_0040)
            })
        }
        pub fn method202(v0_1: Vec<(string, Dice_ui::US31)>) -> Vec<(string, Dice_ui::US31)> {
            v0_1
        }
        pub fn closure187(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let patternInput: (std::string::String, Option<std::string::String>) = value;
                let v13: string = fable_library_rust::String_::fromString(patternInput.0.clone());
                let v38: Dice_ui::US14 = defaultValue(
                    Dice_ui::US14::US14_1,
                    map(Dice_ui::method39(), patternInput.1.clone()),
                );
                let v48: Dice_ui::US31 = match &v38 {
                    Dice_ui::US14::US14_0(v38_0_0) => {
                        Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                            match &v38 {
                                Dice_ui::US14::US14_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US31::US31_1,
                };
                let v51: bool = true;
                (v13, v48) /*;
                let v53: bool = */
            }); //;
            let v55: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = _func1_from_v6;
            let v58: Vec<(string, Dice_ui::US31)> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v55 = v55.clone();
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure188(v55.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v59 = Dice_ui::method201();
            let v60: Vec<(string, Dice_ui::US31)> = Dice_ui::method202(v58);
            let v62: Vec<(string, Dice_ui::US31)> = v60
                .into_iter()
                .filter(|x| v59(x.clone().clone()))
                .collect::<Vec<_>>();
            if (get_Count(fable_library_rust::NativeArray_::array_from(v62.clone()))) > 0_i32 {
                (_arg.0.clone()) == (fable_library_rust::String_::fromString(v2.l2.clone()))
            } else {
                false
            }
        }
        pub fn method199() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure187((), arg10_0040)
            })
        }
        pub fn method203(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method204(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure190(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method205() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US68> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure190((), v))
        }
        pub fn method206(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure186(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v2540: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v4.clone()),
            ) as u64)
                == 0_u64
            {
                let v11: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v13: string = string(" class=\"[height:17px]\"");
                let v27: string = string(
                    " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v33: string = string(
                    " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v34: string = string("vec![]");
                let v35: Vec<leptos::prelude::AnyView> = vec![];
                let v37: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v35);
                let v39: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v37);
                let v42: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v33))),
                                    string(">move || { v39 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v44: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v39 }</path> };
                let v46: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v44);
                let v50: string = string("vec![v46]");
                let v51: Vec<leptos::prelude::AnyView> = vec![v46];
                let v53: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v51);
                let v55: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v53);
                let v58: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v27))),
                                    string(">move || { v55 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v60: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v55 }</svg> };
                let v62: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v60);
                let v66: string = string("vec![v62]");
                let v67: Vec<leptos::prelude::AnyView> = vec![v62];
                let v69: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v67);
                let v71: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v69);
                let v74: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v13))),
                                    string(">move || { v71 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v76: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v71 }</span> };
                let v78: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v76);
                let v80: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v90: &str = &*string("No account selected");
                let v126: std::string::String = String::from(v90);
                let v155: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v126));
                let v159: string = string("vec![v155]");
                let v160: Vec<leptos::prelude::AnyView> = vec![v155];
                let v162: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v160);
                let v164: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v162);
                let v167: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v80))),
                                    string(">move || { v164 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v169: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v164 }</pre> };
                let v171: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v169);
                let v179: string = string("vec![v78, v171]");
                let v180: Vec<leptos::prelude::AnyView> = vec![v78, v171];
                let v182: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v180);
                let v184: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v182);
                let v187: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v11))),
                                    string(">move || { v184 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v189: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v184 }</div> };
                leptos::prelude::IntoAny::into_any(v189)
            } else {
                let v193: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v194 = Dice_ui::method138();
                let v195 = Dice_ui::method139();
                let v197: Dice_ui::US53 = match &v193 {
                    Err(v193_1_0) => v195(v193_1_0.clone()),
                    Ok(v193_0_0) => v194(v193_0_0.clone()),
                };
                let v233: Dice_ui::US46 = match &v197 {
                    Dice_ui::US53::US53_0(v197_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v197_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v197_1_0) => Dice_ui::US46::US46_1(v197_1_0.clone()),
                };
                match &v233 {
                    Dice_ui::US46::US46_0(v233_0_0) => {
                        let v234: Dice_ui::US47 = v233_0_0.clone();
                        if let Dice_ui::US47::US47_0(v234_0_0) = &v234 {
                            let v237: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v234_0_0.clone().to_vec();
                            let v238 = Dice_ui::method199();
                            let v239: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method203(v237);
                            let v241: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v239
                                .into_iter()
                                .filter(|x| v238(x.clone().clone()))
                                .collect::<Vec<_>>();
                            let v244: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v254: &str = &*string("Block Timestamp");
                            let v290: std::string::String = String::from(v254);
                            let v319: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v290),
                            );
                            let v323: string = string("vec![v319]");
                            let v324: Vec<leptos::prelude::AnyView> = vec![v319];
                            let v326: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v324);
                            let v328: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v326);
                            let v331: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v244))),
                                                string(">move || { v328 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v333: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v328 }</th> };
                            let v335: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v333);
                            let v337: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v347: &str = &*string("Predecessor");
                            let v383: std::string::String = String::from(v347);
                            let v412: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v383),
                            );
                            let v416: string = string("vec![v412]");
                            let v417: Vec<leptos::prelude::AnyView> = vec![v412];
                            let v419: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v417);
                            let v421: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v419);
                            let v423: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v337))),
                                                string(">move || { v421 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v425: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v421 }</th> };
                            let v427: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v425);
                            let v429: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v439: &str = &*string("Receiver");
                            let v475: std::string::String = String::from(v439);
                            let v504: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v475),
                            );
                            let v508: string = string("vec![v504]");
                            let v509: Vec<leptos::prelude::AnyView> = vec![v504];
                            let v511: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v509);
                            let v513: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v511);
                            let v515: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v429))),
                                                string(">move || { v513 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v517: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v513 }</th> };
                            let v519: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v517);
                            let v521: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v531: &str = &*string("Fee");
                            let v567: std::string::String = String::from(v531);
                            let v596: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v567),
                            );
                            let v600: string = string("vec![v596]");
                            let v601: Vec<leptos::prelude::AnyView> = vec![v596];
                            let v603: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v601);
                            let v605: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v603);
                            let v607: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v521))),
                                                string(">move || { v605 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v609: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v605 }</th> };
                            let v611: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v609);
                            let v613: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v623: &str = &*string("Result");
                            let v659: std::string::String = String::from(v623);
                            let v688: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v659),
                            );
                            let v692: string = string("vec![v688]");
                            let v693: Vec<leptos::prelude::AnyView> = vec![v688];
                            let v695: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v693);
                            let v697: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v695);
                            let v699: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v613))),
                                                string(">move || { v697 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v701: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v697 }</th> };
                            let v703: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v701);
                            let v705: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v715: &str = &*string("Status");
                            let v751: std::string::String = String::from(v715);
                            let v780: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v751),
                            );
                            let v784: string = string("vec![v780]");
                            let v785: Vec<leptos::prelude::AnyView> = vec![v780];
                            let v787: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v785);
                            let v789: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v787);
                            let v791: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v705))),
                                                string(">move || { v789 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v793: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v789 }</th> };
                            let v795: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v793);
                            let v815: string = string("vec![v335, v427, v519, v611, v703, v795]");
                            let v816: Vec<leptos::prelude::AnyView> =
                                vec![v335, v427, v519, v611, v703, v795];
                            let v818: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v816);
                            let v820: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v818);
                            let v823: string =
                                string("leptos::prelude::view! { <tr >move || { v820 }</tr> }");
                            let v825: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                            > = leptos::prelude::view! { <tr >move || { v820 }</tr> };
                            let v827: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v825);
                            let v831: string = string("vec![v827]");
                            let v832: Vec<leptos::prelude::AnyView> = vec![v827];
                            let v834: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v832);
                            let v836: Vec<
                                Result<
                                    Option<(
                                        std::string::String,
                                        Option<(
                                            Array<(
                                                std::string::String,
                                                Array<
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        (
                                                            std::string::String,
                                                            Option<std::string::String>,
                                                            Option<f64>,
                                                            Option<std::string::String>,
                                                        ),
                                                    >,
                                                >,
                                                std::string::String,
                                                Array<std::string::String>,
                                                Array<std::string::String>,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u64,
                                                Array<std::string::String>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                u8,
                                                Array<std::string::String>,
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    std::string::String,
                                                >,
                                                Option<std::string::String>,
                                                Array<(std::string::String, std::string::String)>,
                                            )>,
                                        )>,
                                        Option<(
                                            std::string::String,
                                            std::string::String,
                                            Option<(
                                                Option<std::string::String>,
                                                Option<std::string::String>,
                                            )>,
                                            i32,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                >,
                            > = leptos::prelude::ArcMemo::get(&v0_1.clone());
                            let v838: bool = true;
                            let _vec_map : Vec<_> = v241.into_iter().map(|x| { //;
                                let patternInput:
                                        (string, usize,
                                         LrcPtr<Dice_ui::Heap5>) = x;
                                let v842: LrcPtr<Dice_ui::Heap5> =
                                    patternInput.2.clone();
                                let v844:
                                        Array<Result<Option<(std::string::String,
                                                             Option<(Array<(std::string::String,
                                                                            Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                                  Option<std::string::String>,
                                                                                                                                  Option<f64>,
                                                                                                                                  Option<std::string::String>)>>,
                                                                            std::string::String,
                                                                            Array<std::string::String>,
                                                                            Array<std::string::String>,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String)>,
                                                                     Array<(std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            u64,
                                                                            Array<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String,
                                                                                   std::string::String)>,
                                                                            u8,
                                                                            Array<std::string::String>,
                                                                            std::collections::HashMap<std::string::String, std::string::String>,
                                                                            Option<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String)>)>)>,
                                                             Option<(std::string::String,
                                                                     std::string::String,
                                                                     Option<(Option<std::string::String>,
                                                                             Option<std::string::String>)>,
                                                                     i32,
                                                                     std::string::String,
                                                                     std::string::String)>,
                                                             Option<std::string::String>)>,
                                                     std::string::String>> =
                                    fable_library_rust::NativeArray_::array_from(v836.clone());
                                let v850: i32 = patternInput.1.clone() as i32;
                                let v859:
                                        Result<Option<(std::string::String,
                                                       Option<(Array<(std::string::String,
                                                                      Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                            Option<std::string::String>,
                                                                                                                            Option<f64>,
                                                                                                                            Option<std::string::String>)>>,
                                                                      std::string::String,
                                                                      Array<std::string::String>,
                                                                      Array<std::string::String>,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String)>,
                                                               Array<(std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      u64,
                                                                      Array<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String,
                                                                             std::string::String)>,
                                                                      u8,
                                                                      Array<std::string::String>,
                                                                      std::collections::HashMap<std::string::String, std::string::String>,
                                                                      Option<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String)>)>)>,
                                                       Option<(std::string::String,
                                                               std::string::String,
                                                               Option<(Option<std::string::String>,
                                                                       Option<std::string::String>)>,
                                                               i32,
                                                               std::string::String,
                                                               std::string::String)>,
                                                       Option<std::string::String>)>,
                                               std::string::String> =
                                    v844[v850].clone();
                                let v863: string =
                                    string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                let v865: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v875: i64 =
                                    (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v842.l5.clone()))))
                                        / 1000_i64;
                                let v877:
                                        Option<chrono::DateTime<chrono::Utc>> =
                                    chrono::DateTime::from_timestamp_micros(v875);
                                let v902: Dice_ui::US68 =
                                    defaultValue(Dice_ui::US68::US68_1,
                                                 map(Dice_ui::method205(),
                                                     v877));
                                let v921: Dice_ui::US31 =
                                    match &v902 {
                                        Dice_ui::US68::US68_0(v902_0_0) => {
                                            let v908: chrono::NaiveDateTime =
                                                match &v902 {
                                                    Dice_ui::US68::US68_0(x)
                                                    => x.clone(),
                                                    _ => unreachable!(),
                                                }.clone().naive_utc();
                                            let v910:
                                                    chrono::DateTime<chrono::Local> =
                                                chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v908);
                                            let v912: string =
                                                string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                            let v913: &str =
                                                r#"%Y-%m-%d %H:%M:%S"#;
                                            let v915: std::string::String =
                                                v910.format(v913).to_string();
                                            Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v915))
                                        }
                                        _ => Dice_ui::US31::US31_1,
                                    };
                                let v927: Dice_ui::US69 =
                                    match &v921 {
                                        Dice_ui::US31::US31_0(v921_0_0) =>
                                        Dice_ui::US69::US69_0(match &v921 {
                                                                  Dice_ui::US31::US31_0(x)
                                                                  =>
                                                                  x.clone(),
                                                                  _ =>
                                                                  unreachable!(),
                                                              }.clone()),
                                        _ =>
                                        Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                    };
                                let v932: string =
                                    match &v927 {
                                        Dice_ui::US69::US69_0(v927_0_0) =>
                                        v927_0_0.clone(),
                                        Dice_ui::US69::US69_1(v927_1_0) =>
                                        append((append(string("sm\'.to_string result / Error: "),
                                                       (v927_1_0.clone()))),
                                               string("")),
                                    };
                                let v941: &str = &*v932;
                                let v977: std::string::String =
                                    String::from(v941);
                                let v1006: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v977));
                                let v1010: string = string("vec![v1006]");
                                let v1011: Vec<leptos::prelude::AnyView> =
                                    vec![v1006];
                                let v1013: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1011);
                                let v1015: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1013);
                                let v1018: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v865))),
                                                                           string(">move || { v1015 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1020:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1015 }</td> };
                                let v1022: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1020);
                                let v1024: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1027: string =
                                    fable_library_rust::String_::fromString(v842.l1.clone());
                                let v1036: &str = &*v1027;
                                let v1072: std::string::String =
                                    String::from(v1036);
                                let v1101: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1072));
                                let v1105: string = string("vec![v1101]");
                                let v1106: Vec<leptos::prelude::AnyView> =
                                    vec![v1101];
                                let v1108: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1106);
                                let v1110: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1108);
                                let v1112: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1024))),
                                                                           string(">move || { v1110 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1114:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1110 }</td> };
                                let v1116: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1114);
                                let v1118: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1121: string =
                                    fable_library_rust::String_::fromString(v842.l2.clone());
                                let v1130: &str = &*v1121;
                                let v1166: std::string::String =
                                    String::from(v1130);
                                let v1195: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1166));
                                let v1199: string = string("vec![v1195]");
                                let v1200: Vec<leptos::prelude::AnyView> =
                                    vec![v1195];
                                let v1202: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1200);
                                let v1204: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1202);
                                let v1206: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1118))),
                                                                           string(">move || { v1204 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1208:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1204 }</td> };
                                let v1210: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1208);
                                let v1212: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1216: string = toString(v842.l10);
                                let v1227: &str = &*v1216;
                                let v1263: std::string::String =
                                    String::from(v1227);
                                let v1292: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1263));
                                let v1296: string = string("vec![v1292]");
                                let v1297: Vec<leptos::prelude::AnyView> =
                                    vec![v1292];
                                let v1299: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1297);
                                let v1301: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1299);
                                let v1303: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1212))),
                                                                           string(">move || { v1301 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1305:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1301 }</td> };
                                let v1307: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1305);
                                let v1309: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1514: leptos::prelude::Fragment =
                                    if (get_Count(v842.l11.clone()) as u64) ==
                                           0_u64 {
                                        let v1321: &str = &*string("");
                                        let v1357: std::string::String =
                                            String::from(v1321);
                                        let v1386: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1357));
                                        let v1390: string =
                                            string("vec![v1386]");
                                        let v1391:
                                                Vec<leptos::prelude::AnyView> =
                                            vec![v1386];
                                        leptos::prelude::Fragment::new(v1391)
                                    } else {
                                        let v1394:
                                                Array<std::string::String> =
                                            v842.l11.clone();
                                        let v1395: i32 =
                                            get_Count(v1394.clone());
                                        let v1397: LrcPtr<Dice_ui::Mut2> =
                                            LrcPtr::new(Dice_ui::Mut2{l0:
                                                                          MutCell::new(0_i32),
                                                                      l1:
                                                                          MutCell::new(Dice_ui::US31::US31_1),});
                                        while Dice_ui::method206(v1395,
                                                                 v1397.clone())
                                              {
                                            let v1399: i32 =
                                                v1397.l0.get().clone();
                                            let v1402: i32 =
                                                ((v1399.wrapping_neg()) +
                                                     (v1395)) - 1_i32;
                                            let v1403: Dice_ui::US31 =
                                                v1397.l1.get().clone();
                                            let v1404: std::string::String =
                                                v1394[v1402].clone();
                                            let v1417: Array<string> =
                                                split(fable_library_rust::String_::fromString(v1404),
                                                      string(" / result: "),
                                                      -1_i32, 0_i32);
                                            let v1426: Dice_ui::US31 =
                                                if let Dice_ui::US31::US31_1 =
                                                       &v1403 {
                                                    if (get_Count(v1417.clone())
                                                            as u64) == 2_u64 {
                                                        let v1422: string =
                                                            v1417[0_i32].clone();
                                                        Dice_ui::US31::US31_0(v1417[1_i32].clone())
                                                    } else { v1403 }
                                                } else { v1403.clone() };
                                            let v1427: i32 = (v1399) + 1_i32;
                                            v1397.l0.set(v1427);
                                            v1397.l1.set(v1426);
                                            ()
                                        }
                                        {
                                            let v1428: Dice_ui::US31 =
                                                v1397.l1.get().clone();
                                            let v1432: string =
                                                match &v1428 {
                                                    Dice_ui::US31::US31_0(v1428_0_0)
                                                    =>
                                                    match &v1428 {
                                                        Dice_ui::US31::US31_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone(),
                                                    _ => string("?"),
                                                };
                                            let v1441: &str = &*v1432;
                                            let v1477: std::string::String =
                                                String::from(v1441);
                                            let v1506:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1477));
                                            let v1510: string =
                                                string("vec![v1506]");
                                            let v1511:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1506];
                                            leptos::prelude::Fragment::new(v1511)
                                        }
                                    };
                                let v1516: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1514);
                                let v1518: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1309))),
                                                                           string(">move || { v1516 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1520:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1516 }</td> };
                                let v1522: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1520);
                                let v1524: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1528: string =
                                    if v842.l9 {
                                        string("Ok")
                                    } else { string("Outcome Error") };
                                let v1529 = Dice_ui::method177();
                                let v1530 = Dice_ui::method178();
                                let v1532: Dice_ui::US63 =
                                    match &v859 {
                                        Err(v859_1_0) =>
                                        v1530(v859_1_0.clone()),
                                        Ok(v859_0_0) =>
                                        v1529(v859_0_0.clone()),
                                    };
                                let v1571: Dice_ui::US58 =
                                    match &v1532 {
                                        Dice_ui::US63::US63_0(v1532_0_0) =>
                                        Dice_ui::US58::US58_0(defaultValue(Dice_ui::US59::US59_1,
                                                                           map(Dice_ui::method179(),
                                                                               v1532_0_0.clone()))),
                                        Dice_ui::US63::US63_1(v1532_1_0) =>
                                        Dice_ui::US58::US58_1(v1532_1_0.clone()),
                                    };
                                let v1692: Dice_ui::US69 =
                                    match &v1571 {
                                        Dice_ui::US58::US58_0(v1571_0_0) => {
                                            let v1572: Dice_ui::US59 =
                                                v1571_0_0.clone();
                                            if let Dice_ui::US59::US59_0(v1572_0_0,
                                                                         v1572_0_1,
                                                                         v1572_0_2,
                                                                         v1572_0_3)
                                                   = &v1572 {
                                                let v1575:
                                                        Option<(std::string::String,
                                                                std::string::String,
                                                                Option<(Option<std::string::String>,
                                                                        Option<std::string::String>)>,
                                                                i32,
                                                                std::string::String,
                                                                std::string::String)> =
                                                    v1572_0_2.clone();
                                                let v1606: Dice_ui::US64 =
                                                    defaultValue(Dice_ui::US64::US64_1,
                                                                 map(Dice_ui::method180(),
                                                                     v1575.clone()));
                                                match &v1606 {
                                                    Dice_ui::US64::US64_0(v1606_0_0,
                                                                          v1606_0_1,
                                                                          v1606_0_2,
                                                                          v1606_0_3,
                                                                          v1606_0_4,
                                                                          v1606_0_5)
                                                    => {
                                                        let v1645:
                                                                Dice_ui::US64 =
                                                            defaultValue(Dice_ui::US64::US64_1,
                                                                         map(Dice_ui::method180(),
                                                                             v1575.clone()));
                                                        let v1658:
                                                                Dice_ui::US31 =
                                                            if let Dice_ui::US64::US64_0(v1645_0_0,
                                                                                         v1645_0_1,
                                                                                         v1645_0_2,
                                                                                         v1645_0_3,
                                                                                         v1645_0_4,
                                                                                         v1645_0_5)
                                                                   = &v1645 {
                                                                Dice_ui::US31::US31_0(append((append((append((append((append((append((append((toString(v1645_0_0.clone())),
                                                                                                                                             string(": "))),
                                                                                                                                     (toString(v1645_0_4.clone())))),
                                                                                                                             string(" - "))),
                                                                                                                     (toString(v1645_0_5.clone())))),
                                                                                                             string(" ("))),
                                                                                                     (toString(v1645_0_1.clone())))),
                                                                                             string(")")))
                                                            } else {
                                                                Dice_ui::US31::US31_1
                                                            };
                                                        Dice_ui::US69::US69_1(match &v1658
                                                                                  {
                                                                                  Dice_ui::US31::US31_0(v1658_0_0)
                                                                                  =>
                                                                                  match &v1658
                                                                                      {
                                                                                      Dice_ui::US31::US31_0(x)
                                                                                      =>
                                                                                      x.clone(),
                                                                                      _
                                                                                      =>
                                                                                      unreachable!(),
                                                                                  }.clone(),
                                                                                  _
                                                                                  =>
                                                                                  Dice_ui::method8(400_i64,
                                                                                                   sprintf!("{:?}",
                                                                                                            ())),
                                                                              })
                                                    }
                                                    _ =>
                                                    Dice_ui::US69::US69_0(Dice_ui::method8(400_i64,
                                                                                           sprintf!("{:?}",
                                                                                                    (v1572_0_0.clone(),
                                                                                                     v1572_0_1.clone(),
                                                                                                     v1575.clone(),
                                                                                                     v1572_0_3.clone())))),
                                                }
                                            } else {
                                                Dice_ui::US69::US69_1(concat(new_array(&[string("RPC Response: "),
                                                                                         Dice_ui::method8(400_i64,
                                                                                                          sprintf!("{:?}",
                                                                                                                   v1571.clone()))])))
                                            }
                                        }
                                        Dice_ui::US58::US58_1(v1571_1_0) =>
                                        Dice_ui::US69::US69_1(fable_library_rust::String_::fromString(v1571_1_0.clone())),
                                    };
                                let v1701: string =
                                    concat(new_array(&[v1528, string(" / "),
                                                       match &v1692 {
                                                           Dice_ui::US69::US69_0(v1692_0_0)
                                                           =>
                                                           concat(new_array(&[string("RPC Response: "),
                                                                              Dice_ui::method8(400_i64,
                                                                                               v1692_0_0.clone())])),
                                                           Dice_ui::US69::US69_1(v1692_1_0)
                                                           =>
                                                           concat(new_array(&[string("Error: "),
                                                                              v1692_1_0.clone()])),
                                                       }]));
                                let v1710: &str = &*v1701;
                                let v1746: std::string::String =
                                    String::from(v1710);
                                let v1775: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1746));
                                let v1779: string = string("vec![v1775]");
                                let v1780: Vec<leptos::prelude::AnyView> =
                                    vec![v1775];
                                let v1782: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1780);
                                let v1784: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1782);
                                let v1786: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1524))),
                                                                           string(">move || { v1784 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1788:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1784 }</td> };
                                let v1790: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1788);
                                let v1809: string =
                                    string("vec![v1022, v1116, v1210, v1307, v1522, v1790]");
                                let v1810: Vec<leptos::prelude::AnyView> =
                                    vec![v1022, v1116, v1210, v1307, v1522, v1790];
                                let v1812: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1810);
                                let v1814: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1812);
                                let v1816: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<tr "),
                                                                                   (v863))),
                                                                           string(">move || { v1814 }</"))),
                                                                   string("tr"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1818:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                    leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v1814 }</tr> };
                                let v1820: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1818);
                                let v1822: bool =
                                    true; v1820 }).collect::<Vec<_>>();
                            let v1824: Vec<leptos::prelude::AnyView> = _vec_map;
                            let v1826: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1824);
                            let v1830: string = string("vec![v1826]");
                            let v1831: Vec<leptos::prelude::AnyView> = vec![v1826];
                            let v1833: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1831);
                            let v1835: string = string(
                                " class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"",
                            );
                            let v1837: string = string(" class=\"ltr:text-left rtl:text-right\"");
                            let v1839: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v834);
                            let v1842: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<thead "), (v1837))),
                                                string(">move || { v1839 }</"),
                                            )),
                                            string("thead"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1844: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                            > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v1839 }</thead> };
                            let v1846: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1844);
                            let v1848: string =
                                string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
                            let v1850: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1833);
                            let v1853: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<tbody "), (v1848))),
                                                string(">move || { v1850 }</"),
                                            )),
                                            string("tbody"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1855: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                            > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v1850 }</tbody> };
                            let v1857: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1855);
                            let v1864: string = string("vec![v1846, v1857]");
                            let v1865: Vec<leptos::prelude::AnyView> = vec![v1846, v1857];
                            let v1867: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1865);
                            let v1869: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1867);
                            let v1872: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<table "), (v1835))),
                                                string(">move || { v1869 }</"),
                                            )),
                                            string("table"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1874: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Table, _, _>,
                            > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v1869 }</table> };
                            leptos::prelude::IntoAny::into_any(v1874)
                        } else {
                            let v1879: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v1881: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v1884 = {
                                let clo = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo = clo.clone();
                                    move |arg: ()| clo()
                                })
                            };
                            let v1902: string = string(
                                " class=move || \" \".to_owned() + &v1884(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"",
                            );
                            let v1914: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                            );
                            let v1926: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v1927: string = string("vec![]");
                            let v1928: Vec<leptos::prelude::AnyView> = vec![];
                            let v1930: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1928);
                            let v1932: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1930);
                            let v1935: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1926))),
                                                string(">move || { v1932 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1937: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1932 }</animate> };
                            let v1939: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1937);
                            let v1951: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                            );
                            let v1952: string = string("vec![]");
                            let v1953: Vec<leptos::prelude::AnyView> = vec![];
                            let v1955: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1953);
                            let v1957: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1955);
                            let v1959: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1951))),
                                                string(">move || { v1957 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1961: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1957 }</animate> };
                            let v1963: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1961);
                            let v1975: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v1976: string = string("vec![]");
                            let v1977: Vec<leptos::prelude::AnyView> = vec![];
                            let v1979: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1977);
                            let v1981: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1979);
                            let v1983: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1975))),
                                                string(">move || { v1981 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1985: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1981 }</animate> };
                            let v1987: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1985);
                            let v1998: string = string("vec![v1939, v1963, v1987]");
                            let v1999: Vec<leptos::prelude::AnyView> = vec![v1939, v1963, v1987];
                            let v2001: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1999);
                            let v2003: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2001);
                            let v2006: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1914))),
                                                string(">move || { v2003 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2008: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v2003 }</rect> };
                            let v2020: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                            );
                            let v2032: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v2033: string = string("vec![]");
                            let v2034: Vec<leptos::prelude::AnyView> = vec![];
                            let v2036: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2034);
                            let v2038: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2036);
                            let v2040: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2032))),
                                                string(">move || { v2038 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2042: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v2038 }</animate> };
                            let v2044: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2042);
                            let v2056: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v2057: string = string("vec![]");
                            let v2058: Vec<leptos::prelude::AnyView> = vec![];
                            let v2060: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2058);
                            let v2062: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2060);
                            let v2064: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2056))),
                                                string(">move || { v2062 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2066: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v2062 }</animate> };
                            let v2068: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2066);
                            let v2080: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v2081: string = string("vec![]");
                            let v2082: Vec<leptos::prelude::AnyView> = vec![];
                            let v2084: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2082);
                            let v2086: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2084);
                            let v2088: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2080))),
                                                string(">move || { v2086 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2090: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v2086 }</animate> };
                            let v2092: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2090);
                            let v2102: string = string("vec![v2044, v2068, v2092]");
                            let v2103: Vec<leptos::prelude::AnyView> = vec![v2044, v2068, v2092];
                            let v2105: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2103);
                            let v2107: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2105);
                            let v2109: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v2020))),
                                                string(">move || { v2107 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2111: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v2107 }</rect> };
                            let v2123: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                            );
                            let v2135: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v2136: string = string("vec![]");
                            let v2137: Vec<leptos::prelude::AnyView> = vec![];
                            let v2139: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2137);
                            let v2141: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2139);
                            let v2143: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2135))),
                                                string(">move || { v2141 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2145: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v2141 }</animate> };
                            let v2147: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2145);
                            let v2159: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                            );
                            let v2160: string = string("vec![]");
                            let v2161: Vec<leptos::prelude::AnyView> = vec![];
                            let v2163: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2161);
                            let v2165: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2163);
                            let v2167: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2159))),
                                                string(">move || { v2165 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2169: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v2165 }</animate> };
                            let v2171: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2169);
                            let v2183: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v2184: string = string("vec![]");
                            let v2185: Vec<leptos::prelude::AnyView> = vec![];
                            let v2187: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2185);
                            let v2189: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2187);
                            let v2191: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2183))),
                                                string(">move || { v2189 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2193: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v2189 }</animate> };
                            let v2195: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2193);
                            let v2205: string = string("vec![v2147, v2171, v2195]");
                            let v2206: Vec<leptos::prelude::AnyView> = vec![v2147, v2171, v2195];
                            let v2208: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2206);
                            let v2210: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2208);
                            let v2212: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v2123))),
                                                string(">move || { v2210 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2214: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v2210 }</rect> };
                            let v2216: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2214);
                            let v2218: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2111);
                            let v2220: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2008);
                            let v2230: string = string("vec![v2220, v2218, v2216]");
                            let v2231: Vec<leptos::prelude::AnyView> = vec![v2220, v2218, v2216];
                            let v2233: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2231);
                            let v2235: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2233);
                            let v2238: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v1902))),
                                                string(">move || { v2235 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2240: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1884(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v2235 }</svg> };
                            let v2242: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2240);
                            let v2252: &str = &*string("Loading...");
                            let v2288: std::string::String = String::from(v2252);
                            let v2317: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v2288),
                                );
                            let v2324: string = string("vec![v2242, v2317]");
                            let v2325: Vec<leptos::prelude::AnyView> = vec![v2242, v2317];
                            let v2327: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2325);
                            let v2329: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2327);
                            let v2332: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1881))),
                                                string(">move || { v2329 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2334: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v2329 }</div> };
                            let v2336: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2334);
                            let v2340: string = string("vec![v2336]");
                            let v2341: Vec<leptos::prelude::AnyView> = vec![v2336];
                            let v2343: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2341);
                            let v2345: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2343);
                            let v2347: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1879))),
                                                string(">move || { v2345 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2349: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v2345 }</div> };
                            leptos::prelude::IntoAny::into_any(v2349)
                        }
                    }
                    Dice_ui::US46::US46_1(v233_1_0) => {
                        let v2355: string =
                            fable_library_rust::String_::fromString(v233_1_0.clone());
                        let v2358: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v2360: string = string(" class=\"[height:17px]\"");
                        let v2374: string = string(
                            " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v2380: string = string(
                            " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                        );
                        let v2381: string = string("vec![]");
                        let v2382: Vec<leptos::prelude::AnyView> = vec![];
                        let v2384: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2382);
                        let v2386: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2384);
                        let v2389: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v2380))),
                                            string(">move || { v2386 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2391: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v2386 }</path> };
                        let v2393: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2391);
                        let v2397: string = string("vec![v2393]");
                        let v2398: Vec<leptos::prelude::AnyView> = vec![v2393];
                        let v2400: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2398);
                        let v2402: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2400);
                        let v2405: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v2374))),
                                            string(">move || { v2402 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2407: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v2402 }</svg> };
                        let v2409: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2407);
                        let v2413: string = string("vec![v2409]");
                        let v2414: Vec<leptos::prelude::AnyView> = vec![v2409];
                        let v2416: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2414);
                        let v2418: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2416);
                        let v2421: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v2360))),
                                            string(">move || { v2418 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2423: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v2418 }</span> };
                        let v2425: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2423);
                        let v2427: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v2436: &str = &*v2355;
                        let v2472: std::string::String = String::from(v2436);
                        let v2501: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v2472),
                        );
                        let v2505: string = string("vec![v2501]");
                        let v2506: Vec<leptos::prelude::AnyView> = vec![v2501];
                        let v2508: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2506);
                        let v2510: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2508);
                        let v2513: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v2427))),
                                            string(">move || { v2510 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2515: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v2510 }</pre> };
                        let v2517: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2515);
                        let v2525: string = string("vec![v2425, v2517]");
                        let v2526: Vec<leptos::prelude::AnyView> = vec![v2425, v2517];
                        let v2528: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2526);
                        let v2530: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2528);
                        let v2533: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v2358))),
                                            string(">move || { v2530 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2535: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v2530 }</div> };
                        leptos::prelude::IntoAny::into_any(v2535)
                    }
                }
            };
            let v2545: string = string("vec![v2540]");
            let v2546: Vec<leptos::prelude::AnyView> = vec![v2540];
            leptos::prelude::Fragment::new(v2546)
        }
        pub fn closure194(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure193(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure194(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method207() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure193((), v))
        }
        pub fn method208(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure192(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v10 = Dice_ui::method207();
            let v11: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v8.l0.clone());
            v11.iter()
                .enumerate()
                .map(|(i, x)| v10(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method209(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure196(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method209(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method210(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure197(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method210(v0_1);
            let patternInput: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure195(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::prelude::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::prelude::ReadSignal::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let v10: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = v10.1.clone();
                let v25: bool = true;
                (v10.0.clone(), b.0.clone(), b.1.clone()) /*;
                let v27: bool = */
            }); //;
            let v29: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v6;
            let v32: Vec<(
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v29 = v29.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure196(
                                v29.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v35: bool = true;
            let _func1_from_v33 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v42: bool = true;
                (v3, patternInput.0.clone(), patternInput.1.clone()) /*;
                let v44: bool = */
            }); //;
            let v46: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v33;
            v32.into_iter()
                .map(|x| {
                    Func1::new({
                        let v46 = v46.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure197(v46.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure198(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = leptos::prelude::ArcMemo::get(&v0_1);
            get_Count(fable_library_rust::NativeArray_::array_from(v2.clone()))
        }
        pub fn method211(
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method212(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method213(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            LrcPtr<(bool, std::string::String)>,
        > {
            v0_1
        }
        pub fn closure200(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = Dice_ui::method213(v0_1);
            (move |x| v2(x))(LrcPtr::new((v1_, v1__1)))
        }
        pub fn closure199(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v11: i32 = get_Count(fable_library_rust::NativeArray_::array_from(
                v8.clone().clone(),
            ));
            let v21: &str = &*string("");
            let v57: std::string::String = String::from(v21);
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((false, v57)));
            let v93: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v96: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method211(v93.0.clone(), v93.1.clone());
            let v97: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method212(v8);
            let v99: bool = true;
            let mut v97 = v97;
            let v101: bool = true;
            v97.push(v96);
            let v103: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v97;
            let v106: bool = true;
            let _func1_from_v104 = Func1::from(move |value| {
                //;
                let v108: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v122: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v108.1.clone()).0.clone());
                let v125: bool = true;
                v122 /*;
                let v127: bool = */
            }); //;
            let v129: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v104;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v103
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v129 = v129.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v129.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure201(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + (v0_1)
        }
        pub fn closure202(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v9)
        }
        pub fn closure204(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure205(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure206(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method214(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure206((), ()))
        }
        pub fn method216(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            v0_1
        }
        pub fn closure208(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(i32, i32)> {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            > = Dice_ui::method216(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn method215(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure208(v0_1.clone(), arg10_0040)
            })
        }
        pub fn method217(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn method219(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure211(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method219((v1) == (v0_1)) {
                v2.clone()
            } else {
                LrcPtr::new(((v2.0.clone()) == false, v2.1.clone()))
            }
        }
        pub fn closure210(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure211(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method218(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure210(v0_1, v)
            })
        }
        pub fn closure209(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v5: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v5);
            let v10: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v7.l3.clone());
            let v12: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v10);
            let v20: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v20);
            let v24 = Dice_ui::method218(v1);
            let v25: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v12.l0.clone());
            let v28: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v25
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v24(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v12.l1.clone(),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v30: bool = true;
            leptos::prelude::ArcRwSignal::set(&v22.l3.clone(), v28); //;
            ()
        }
        pub fn closure212(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::prelude::ReadSignal::get(&v0_1)).0.clone()
        }
        pub fn method220(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure212(v0_1.clone(), ())
            })
        }
        pub fn closure213(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append((append(string("account-"), (toString(v0_1)))), string(""));
            let v10: &str = &*v1;
            String::from(v10)
        }
        pub fn method221(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure213(v0_1, ())
            })
        }
        pub fn method223(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure215(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method223((v2) == (v0_1)) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure214(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure215(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method222(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure214(v0_1, v1.clone(), v)
            })
        }
        pub fn closure216(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method224(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure219(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn method226() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure219((), v))
        }
        pub fn closure218(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v14: bool = ((LrcPtr::new((v1_, v1__1))).0.clone()) == (v0_1);
            (Dice_ui::method226())(v14)
        }
        pub fn method225(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure218(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure217(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method224(leptos::prelude::ArcMemo::get(&v0_1));
            let v11 = Dice_ui::method225(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            let v20: bool = true;
            let _func1_from_v18 = Func1::from(move |value| {
                //;
                let v22: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v36: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v22.1.clone()).0.clone());
                let v39: bool = true;
                v36 /*;
                let v41: bool = */
            }); //;
            let v43: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v18;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v43 = v43.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v43.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure220(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure221(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v9)
        }
        pub fn method227(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::prelude::AnyView,
        > {
            v0_1
        }
        pub fn closure222(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::prelude::AnyView {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = Dice_ui::method227(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure207(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::ArcMemo<i32>,
            v3: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v9: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = v1;
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v23: bool = true;
                LrcPtr::new((patternInput.0.clone(), patternInput.1.clone())) /*;
                let v25: bool = */
            }); //;
            let v28 = Dice_ui::method215(_func1_from_v10);
            let v31: bool = true;
            let _func1_from_v29 = Func1::from(move |value| {
                //;
                let patternInput_1: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v35: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                    patternInput_1.2.clone();
                let v37: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
                let v38: i32 = Dice_ui::method217(patternInput_1.1.clone());
                let v41: bool = true;
                let _func0_from_v39 = Func0::from(move || {
                    //;
                    let v42: string =
                        append((append(string("account-"), (toString(v38)))), string(""));
                    let v51: &str = &*v42;
                    let v87: std::string::String = String::from(v51);
                    let v116: bool = true;
                    v87 /*;
                    let v118: bool = */
                }); //;
                let v120: Func0<std::string::String> = _func0_from_v39;
                let v170: string = join(
                    string(" "),
                    toArray(delay(Func0::new(move || {
                        ofList(ofArray_1(new_array(&[
                            string("block"),
                            string("relative"),
                            string("h-8"),
                            string("w-14"),
                            string("cursor-pointer"),
                            string("[-webkit-tap-highlight-color:_transparent]"),
                        ])))
                    }))),
                );
                let v181: &str = &*v170;
                let v217: std::string::String = String::from(v181);
                let v246: std::string::String = v217;
                let v250: string = string(" class=v246 for=move || v120()");
                let v253: bool = true;
                let v251 = Func1::new({
                    let v0_1 = v0_1.clone();
                    let v38 = v38.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure209(v0_1.clone(), v38, v)
                }); //;
                let v254 = Dice_ui::method220(v35.clone());
                let v255 = Dice_ui::method221(v38);
                let v256: string = string(
                    "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"",
                );
                let v268: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                string("<input "),
                                (append(
                                    (append(
                                        string(" prop:checked=move || v254()"),
                                        (append(
                                            (append(
                                                string(" on:change=move |event| v251(event)"),
                                                (append(
                                                    (append(
                                                        string(" id=move || v255()"),
                                                        (append(
                                                            (append(
                                                                string(" type=\"checkbox\""),
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            string(" "),
                                                                            (v256),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                    string(""),
                                                                )),
                                                            )),
                                                            string(""),
                                                        )),
                                                    )),
                                                    string(""),
                                                )),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(" />"),
                        )),
                    )),
                    string(" }"),
                );
                let v270: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v254() on:change=move |event| v251(event) id=move || v255() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v272: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v270);
                let v273: string = string(
                    "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"",
                );
                let v274: string = append(
                    (append((append(string(" "), (v273))), string(""))),
                    string(""),
                );
                let v284: string = string(
                    " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon",
                );
                let v286: string = string(
                    "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"",
                );
                let v290: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v286))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v291: string = string("vec![]");
                let v292: Vec<leptos::prelude::AnyView> = vec![];
                let v294: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v292);
                let v296: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v294);
                let v299: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v290))),
                                    string(">move || { v296 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v301: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v296 }</path> };
                let v303: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v301);
                let v307: string = string("vec![v303]");
                let v308: Vec<leptos::prelude::AnyView> = vec![v303];
                let v310: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v308);
                let v312: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v310);
                let v315: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v284))),
                                    string(">move || { v312 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v317: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v312 }</svg> };
                let v327: string = string(
                    " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon",
                );
                let v329: string = string(
                    "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"",
                );
                let v333: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v329))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v334: string = string("vec![]");
                let v335: Vec<leptos::prelude::AnyView> = vec![];
                let v337: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v335);
                let v339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v337);
                let v341: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v333))),
                                    string(">move || { v339 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v343: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v339 }</path> };
                let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
                let v349: string = string("vec![v345]");
                let v350: Vec<leptos::prelude::AnyView> = vec![v345];
                let v352: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v350);
                let v354: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v352);
                let v356: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v327))),
                                    string(">move || { v354 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v358: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v354 }</svg> };
                let v360: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v358);
                let v362: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v317);
                let v370: string = string("vec![v362, v360]");
                let v371: Vec<leptos::prelude::AnyView> = vec![v362, v360];
                let v373: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v371);
                let v375: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v373);
                let v378: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v274))),
                                    string(">move || { v375 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v380: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v375 }</span> };
                let v382: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v380);
                let v383: string = string(
                    "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"",
                );
                let v384: string = append(
                    (append((append(string(" "), (v383))), string(""))),
                    string(""),
                );
                let v385: string = string("vec![]");
                let v386: Vec<leptos::prelude::AnyView> = vec![];
                let v388: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v386);
                let v390: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v388);
                let v392: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v384))),
                                    string(">move || { v390 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v394: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v390 }</span> };
                let v396: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v394);
                let v406: string = string("vec![v272, v382, v396]");
                let v407: Vec<leptos::prelude::AnyView> = vec![v272, v382, v396];
                let v409: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v407);
                let v411: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v409);
                let v414: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<label "), (v250))),
                                    string(">move || { v411 }</"),
                                )),
                                string("label"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v416: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class=v246 for=move || v120()>move || { v411 }</label> };
                let v418: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v416);
                let v421: bool = true;
                let _func0_from_v419 = Func0::from(move || {
                    //;
                    let v423: LrcPtr<(bool, std::string::String)> =
                        leptos::prelude::ReadSignal::get(&v35);
                    let v433: bool = true;
                    v423.1.clone() /*;
                    let v435: bool = */
                }); //;
                let v437: Func0<std::string::String> = _func0_from_v419;
                let v440: bool = true;
                let _func1_from_v438 = Func0::from(move || {
                    //;
                    let v442: std::string::String = value;
                    let v445: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v447: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v445);
                    let v450: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                    > = Box::pin(v447.l3.clone());
                    let v452: LrcPtr<Dice_ui::Heap0> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v450);
                    let v460: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v462: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v460);
                    let v464 = Dice_ui::method222(v38, v442);
                    let v465: Vec<LrcPtr<(bool, std::string::String)>> =
                        Dice_ui::method208(v452.l0.clone());
                    let v468: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                        l0: v465
                            .iter()
                            .enumerate()
                            .map(|(i, x)| v464(i.try_into().unwrap())(x.clone()))
                            .collect::<Vec<_>>(),
                        l1: v452.l1.clone(),
                        l2: v452.l2,
                        l3: v452.l3,
                        l4: v452.l4.clone(),
                    });
                    let v470: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v462.l3.clone(), v468); //;
                    let v472: bool = true; /*;
                    let v474: bool = */
                }); //;
                let v476: Func1<std::string::String, ()> = _func1_from_v438;
                let v479 = {
                    let clo = Func0::new(move || Dice_ui::closure216((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v488: string = string(
                    "leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v482(leptos::prelude::event_target_value(&event)) prop:value=move || v437() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v479(()) /> }",
                );
                let v490: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v482(leptos::prelude::event_target_value(&event)) prop:value=move || v437() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v479(()) /> };
                let v492: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v490);
                let v606: leptos::prelude::AnyView = if (leptos::prelude::ArcMemo::get(&v2))
                    == 1_i32
                {
                    let v496: string = string("vec![]");
                    let v497: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v497)
                } else {
                    let v502: bool = true;
                    let _func0_from_v500 = Func0::from(move || {
                        //;
                        let v505: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v0_1.l0.clone());
                        let v507: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v505);
                        let v510: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v507.l3.clone(),
                            |x: &mut /*;
                             let v512: */
                             LrcPtr<Dice_ui::Heap0> /* = fable_library_rust::Native_::getZero();
                                                    let v517: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v3 = v3.clone();
                                    let v38 = v38.clone();
                                    move |v_2: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure217(v3.clone(), v38, v_2)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v519: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4,
                            |x: &mut /*;
                             let v521: */
                             i32 /* = fable_library_rust::Native_::getZero();
                                 let v526: bool =
                                     */| {
                                *x = Func1::new(move |v_3: i32| Dice_ui::closure201((), v_3))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v528: bool = true; /*;
                        let v530: bool = */
                    }); //;
                    let v532: Func0<()> = _func0_from_v500;
                    let v535 = {
                        let clo_1 = Func0::new(move || Dice_ui::closure220((), ()));
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v547: string = string(
                        " class=move || \" \".to_owned() + &v535(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v553: string = string(
                        " d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v554: string = string("vec![]");
                    let v555: Vec<leptos::prelude::AnyView> = vec![];
                    let v557: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v555);
                    let v559: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v557);
                    let v561: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v553))),
                                        string(">move || { v559 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v563: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">move || { v559 }</path> };
                    let v565: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v563);
                    let v569: string = string("vec![v565]");
                    let v570: Vec<leptos::prelude::AnyView> = vec![v565];
                    let v572: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v570);
                    let v574: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v572);
                    let v576: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v547))),
                                        string(">move || { v574 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v578: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v535(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v574 }</svg> };
                    let v583 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure221((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v584: string = string(
                        "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v583(())",
                    );
                    let v587: string = append(
                        (append(
                            string(" aria-label=\"Delete\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v532()"),
                                    (append(
                                        (append((append(string(" "), (v584))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v589: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v578);
                    let v593: string = string("vec![v589]");
                    let v594: Vec<leptos::prelude::AnyView> = vec![v589];
                    let v596: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v594);
                    let v598: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v596);
                    let v601: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v587))),
                                        string(">move || { v598 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v603: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Delete" on:click=move |_| v532() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v583(())>move || { v598 }</button> };
                    leptos::prelude::IntoAny::into_any(v603)
                };
                let v616: string = string("vec![v418, v492, v606]");
                let v617: Vec<leptos::prelude::AnyView> = vec![v418, v492, v606];
                let v619: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v617);
                let v621: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v619);
                let v624: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v37))),
                                    string(">move || { v621 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v626: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex gap-[8px] [align-items:center]">move || { v621 }</div> };
                let v628: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v626);
                let v632: string = string("vec![v628]");
                let v633: Vec<leptos::prelude::AnyView> = vec![v628];
                let v635: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v633);
                let v637: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v635);
                let v640: bool = true;
                v637 /*;
                let v642: bool = */
            }); //;
            let v644: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = _func1_from_v29;
            let v656: string = string(
                "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v648(x) let:x key=move |x| v28(x.to_owned()) each=v9 /> })",
            );
            let v657: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                leptos::prelude::view! { <leptos::prelude::For  children=move |x| v648(x) let:x key=move |x| v28(x.to_owned()) each=v9 /> },
            );
            let v661: string = string("vec![v657]");
            let v662: Vec<leptos::prelude::AnyView> = vec![v657];
            let v664: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v662);
            let v666: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v664);
            let v668: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v666 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v670: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[8px] gap-[8px]">move || { v666 }</div> };
            let v672: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v670);
            let v676: string = string("vec![v672]");
            let v677: Vec<leptos::prelude::AnyView> = vec![v672];
            leptos::prelude::Fragment::new(v677)
        }
        pub fn closure223(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure224(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method228() -> Func0<string> {
            Func0::new(move || Dice_ui::closure225((), ()))
        }
        pub fn closure227(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Dark Mode");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method229() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure227((), ()))
        }
        pub fn closure230(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure229(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l0.clone(),
                |x: &mut /*;
                 let v11: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v16: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure231(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method231(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure231(v0_1.clone(), ())
            })
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("dark-mode");
            String::from(v9)
        }
        pub fn method232() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure228(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("dark-mode");
                let v49: std::string::String = String::from(v13);
                let v78: bool = true;
                v49 /*;
                let v80: bool = */
            }); //;
            let v82: Func0<std::string::String> = _func0_from_v1;
            let v132: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v143: &str = &*v132;
            let v179: std::string::String = String::from(v143);
            let v208: std::string::String = v179;
            let v213: string = string(" class=v208 for=move || v82()");
            let v216: bool = true;
            let v214 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure229(v0_1.clone(), v)
            }); //;
            let v217 = Dice_ui::method231(v0_1.clone());
            let v218 = Dice_ui::method232();
            let v219: string = string(
                "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"",
            );
            let v231: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v217()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v214(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v218()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v219))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v233: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v217() on:change=move |event| v214(event) id=move || v218() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v235: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v233);
            let v236: string = string(
                "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"",
            );
            let v237: string = append(
                (append((append(string(" "), (v236))), string(""))),
                string(""),
            );
            let v247: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon",
            );
            let v249: string = string(
                "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"",
            );
            let v253: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v249))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v254: string = string("vec![]");
            let v255: Vec<leptos::prelude::AnyView> = vec![];
            let v257: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v255);
            let v259: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v257);
            let v262: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v253))),
                                string(">move || { v259 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v264: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v259 }</path> };
            let v266: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v264);
            let v270: string = string("vec![v266]");
            let v271: Vec<leptos::prelude::AnyView> = vec![v266];
            let v273: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v271);
            let v275: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v273);
            let v278: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v247))),
                                string(">move || { v275 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v280: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v275 }</svg> };
            let v290: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon",
            );
            let v292: string = string(
                "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"",
            );
            let v296: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v292))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v297: string = string("vec![]");
            let v298: Vec<leptos::prelude::AnyView> = vec![];
            let v300: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v298);
            let v302: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v300);
            let v304: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v296))),
                                string(">move || { v302 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v306: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v302 }</path> };
            let v308: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v306);
            let v312: string = string("vec![v308]");
            let v313: Vec<leptos::prelude::AnyView> = vec![v308];
            let v315: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v313);
            let v317: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v315);
            let v319: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v290))),
                                string(">move || { v317 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v321: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v317 }</svg> };
            let v323: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v321);
            let v325: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v280);
            let v333: string = string("vec![v325, v323]");
            let v334: Vec<leptos::prelude::AnyView> = vec![v325, v323];
            let v336: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v334);
            let v338: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v336);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v237))),
                                string(">move || { v338 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v338 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v346: string = string(
                "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"",
            );
            let v347: string = append(
                (append((append(string(" "), (v346))), string(""))),
                string(""),
            );
            let v348: string = string("vec![]");
            let v349: Vec<leptos::prelude::AnyView> = vec![];
            let v351: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v349);
            let v353: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v351);
            let v355: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v347))),
                                string(">move || { v353 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v357: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v353 }</span> };
            let v359: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v357);
            let v369: string = string("vec![v235, v345, v359]");
            let v370: Vec<leptos::prelude::AnyView> = vec![v235, v345, v359];
            let v372: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v370);
            let v374: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v372);
            let v377: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v213))),
                                string(">move || { v374 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v379: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v208 for=move || v82()>move || { v374 }</label> };
            let v381: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v379);
            let v385: string = string("vec![v381]");
            let v386: Vec<leptos::prelude::AnyView> = vec![v381];
            leptos::prelude::Fragment::new(v386)
        }
        pub fn method230(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure228(v0_1.clone(), ())
            })
        }
        pub fn closure233(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure235(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Debug");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method233() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure239(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l1.clone(),
                |x: &mut /*;
                 let v11: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v16: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure240(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l1.clone())
        }
        pub fn method235(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure240(v0_1.clone(), ())
            })
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("debug");
            String::from(v9)
        }
        pub fn method236() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn closure238(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("debug");
                let v49: std::string::String = String::from(v13);
                let v78: bool = true;
                v49 /*;
                let v80: bool = */
            }); //;
            let v82: Func0<std::string::String> = _func0_from_v1;
            let v132: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v143: &str = &*v132;
            let v179: std::string::String = String::from(v143);
            let v208: std::string::String = v179;
            let v213: string = string(" class=v208 for=move || v82()");
            let v216: bool = true;
            let v214 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure239(v0_1.clone(), v)
            }); //;
            let v217 = Dice_ui::method235(v0_1.clone());
            let v218 = Dice_ui::method236();
            let v219: string = string(
                "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"",
            );
            let v231: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v217()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v214(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v218()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v219))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v233: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v217() on:change=move |event| v214(event) id=move || v218() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v235: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v233);
            let v236: string = string(
                "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"",
            );
            let v237: string = append(
                (append((append(string(" "), (v236))), string(""))),
                string(""),
            );
            let v247: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon",
            );
            let v249: string = string(
                "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"",
            );
            let v253: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v249))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v254: string = string("vec![]");
            let v255: Vec<leptos::prelude::AnyView> = vec![];
            let v257: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v255);
            let v259: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v257);
            let v262: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v253))),
                                string(">move || { v259 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v264: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v259 }</path> };
            let v266: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v264);
            let v270: string = string("vec![v266]");
            let v271: Vec<leptos::prelude::AnyView> = vec![v266];
            let v273: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v271);
            let v275: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v273);
            let v278: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v247))),
                                string(">move || { v275 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v280: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v275 }</svg> };
            let v290: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon",
            );
            let v292: string = string(
                "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"",
            );
            let v296: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v292))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v297: string = string("vec![]");
            let v298: Vec<leptos::prelude::AnyView> = vec![];
            let v300: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v298);
            let v302: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v300);
            let v304: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v296))),
                                string(">move || { v302 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v306: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v302 }</path> };
            let v308: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v306);
            let v312: string = string("vec![v308]");
            let v313: Vec<leptos::prelude::AnyView> = vec![v308];
            let v315: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v313);
            let v317: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v315);
            let v319: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v290))),
                                string(">move || { v317 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v321: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v317 }</svg> };
            let v323: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v321);
            let v325: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v280);
            let v333: string = string("vec![v325, v323]");
            let v334: Vec<leptos::prelude::AnyView> = vec![v325, v323];
            let v336: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v334);
            let v338: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v336);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v237))),
                                string(">move || { v338 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v338 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v346: string = string(
                "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"",
            );
            let v347: string = append(
                (append((append(string(" "), (v346))), string(""))),
                string(""),
            );
            let v348: string = string("vec![]");
            let v349: Vec<leptos::prelude::AnyView> = vec![];
            let v351: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v349);
            let v353: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v351);
            let v355: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v347))),
                                string(">move || { v353 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v357: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v353 }</span> };
            let v359: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v357);
            let v369: string = string("vec![v235, v345, v359]");
            let v370: Vec<leptos::prelude::AnyView> = vec![v235, v345, v359];
            let v372: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v370);
            let v374: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v372);
            let v377: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v213))),
                                string(">move || { v374 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v379: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v208 for=move || v82()>move || { v374 }</label> };
            let v381: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v379);
            let v385: string = string("vec![v381]");
            let v386: Vec<leptos::prelude::AnyView> = vec![v381];
            leptos::prelude::Fragment::new(v386)
        }
        pub fn method234(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure238(v0_1.clone(), ())
            })
        }
        pub fn closure242(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure226(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v4 = Dice_ui::method229();
            let v5 = Dice_ui::method230(v0_1.clone());
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure233((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v10() -> string {
                Dice_ui::closure234((), ())
            }
            let v11 = {
                let clo_1 = Func0::from(v10);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v13() -> string {
                Dice_ui::closure235((), ())
            }
            let v14 = {
                let clo_2 = Func0::from(v13);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())",
            );
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            fn v18() -> string {
                Dice_ui::closure236((), ())
            }
            let v19 = {
                let clo_3 = Func0::from(v18);
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())",
            );
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v62 = Dice_ui::method233();
            let v63 = Dice_ui::method234(v0_1);
            let v66 = {
                let clo_4 = Func0::new(move || Dice_ui::closure242((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v68 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v70 = {
                let clo_6 = Func0::from(v13);
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v71: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v70(()) + \" \" + &v68(()) + \" \" + &v66(())",
            );
            let v72: string = append(
                (append((append(string(" "), (v71))), string(""))),
                string(""),
            );
            let v74 = {
                let clo_7 = Func0::from(v18);
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v76: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v77: leptos::prelude::Fragment = v62();
            let v79: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v77);
            let v81: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v76))),
                                string(">move || { v79 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v83: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v79 }</dt> };
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v87: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v74(())",
            );
            let v88: leptos::prelude::Fragment = v63();
            let v90: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v88);
            let v92: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v87))),
                                string(">move || { v90 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v94: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v74(())>move || { v90 }</dd> };
            let v96: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v94);
            let v103: string = string("vec![v85, v96]");
            let v104: Vec<leptos::prelude::AnyView> = vec![v85, v96];
            let v106: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v104);
            let v108: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v106);
            let v110: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v72))),
                                string(">move || { v108 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v112: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v70(()) + " " + &v68(()) + " " + &v66(())>move || { v108 }</dl> };
            let v114: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v112);
            let v116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v123: string = string("vec![v116, v114]");
            let v124: Vec<leptos::prelude::AnyView> = vec![v116, v114];
            let v126: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v124);
            let v128: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v126);
            let v131: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v128 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v133: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[11px] gap-[11px]">move || { v128 }</div> };
            let v135: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v133);
            let v139: string = string("vec![v135]");
            let v140: Vec<leptos::prelude::AnyView> = vec![v135];
            leptos::prelude::Fragment::new(v140)
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method237() -> Func0<string> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Global State");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method238() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure247((), ()))
        }
        pub fn closure250(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_0(v0_1)
        }
        pub fn method240() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure250((), v))
        }
        pub fn closure251(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_1(v0_1)
        }
        pub fn method241() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure251((), v))
        }
        pub fn closure249(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v5: LrcPtr<Dice_ui::Heap2> = v0_1.clone();
            let v7: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v5).map_err(|x| x.to_string());
            let v8 = Dice_ui::method240();
            let v9 = Dice_ui::method241();
            let v11: Dice_ui::US70 = match &v7 {
                Err(v7_1_0) => v9(v7_1_0.clone()),
                Ok(v7_0_0) => v8(v7_0_0.clone()),
            };
            match &v11 {
                Dice_ui::US70::US70_0(v11_0_0) => {
                    fable_library_rust::String_::fromString(v11_0_0.clone())
                }
                Dice_ui::US70::US70_1(v11_1_0) => append(
                    (append(string("Error: "), (toString(v11_1_0.clone())))),
                    string(""),
                ),
            }
        }
        pub fn closure252(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure248(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9: leptos::prelude::ArcMemo<string> = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure249(v6.clone(), ())
                })()
            });
            let v11: string = leptos::prelude::ArcMemo::get(&v9);
            let v14 = {
                let clo = Func0::new(move || Dice_ui::closure252((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v15: string = string(
                "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v14(())",
            );
            let v17: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v26: &str = &*v11;
            let v62: std::string::String = String::from(v26);
            let v91: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v62));
            let v95: string = string("vec![v91]");
            let v96: Vec<leptos::prelude::AnyView> = vec![v91];
            let v98: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v96);
            let v100: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v98);
            let v103: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v17))),
                                string(">move || { v100 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v105: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v14(())>move || { v100 }</pre> };
            let v107: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v105);
            let v111: string = string("vec![v107]");
            let v112: Vec<leptos::prelude::AnyView> = vec![v107];
            leptos::prelude::Fragment::new(v112)
        }
        pub fn method239() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure248((), ()))
        }
        pub fn closure253(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1 = Dice_ui::method238();
            let v1 = Dice_ui::method239();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())",
            );
            let v13: string = append(
                (append((append(string(" "), (v11))), string(""))),
                string(""),
            );
            let v16 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v18: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v19: leptos::prelude::Fragment = v0_1();
            let v21: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v19);
            let v24: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v18))),
                                string(">move || { v21 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v21 }</dt> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())",
            );
            let v31: leptos::prelude::Fragment = v1();
            let v33: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v31);
            let v36: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v30))),
                                string(">move || { v33 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v38: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v16(())>move || { v33 }</dd> };
            let v40: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v38);
            let v48: string = string("vec![v28, v40]");
            let v49: Vec<leptos::prelude::AnyView> = vec![v28, v40];
            let v51: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v49);
            let v53: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v51);
            let v56: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v13))),
                                string(">move || { v53 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v58: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())>move || { v53 }</dl> };
            let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
            let v64: string = string("vec![v60]");
            let v65: Vec<leptos::prelude::AnyView> = vec![v60];
            leptos::prelude::Fragment::new(v65)
        }
        pub fn closure254(v0_1: leptos::prelude::WriteSignal<bool>, unitVar: ()) {
            let v2: bool = true;
            leptos::prelude::WriteSignal::update(
                &v0_1,
                |x: &mut /*;
                 let v4: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v9: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure255(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method242(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure256(
            v0_1: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> std::string::String {
            let v10: &'static str =
                Dice_ui::method242(if leptos::prelude::ReadSignal::get(&v0_1) {
                    let v4: string = string("r#\"\"#");
                    r#""#
                } else {
                    let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                    r#"bg-gray-300 hover:bg-gray-200"#
                });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure257(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure258(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure259(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method243(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure259((), ()))
        }
        pub fn closure261(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Settings");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Table View");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method244() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure262((), ()))
        }
        pub fn closure265(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure264(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l3.clone(),
                |x: &mut /*;
                 let v11: */
                 LrcPtr<Dice_ui::Heap0> /* = fable_library_rust::Native_::getZero();
                                        let v16: bool =
                                            */| {
                    *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure265((), v))(
                        x.clone(),
                    )
                },
            ); //;
            ()
        }
        pub fn closure266(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            if let Dice_ui::US1::US1_1 = &(leptos::prelude::ArcRwSignal::get(&v5.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method246(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure266(v0_1.clone(), ())
            })
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("table-view");
            String::from(v9)
        }
        pub fn method247() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure267((), ()))
        }
        pub fn closure263(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("table-view");
                let v49: std::string::String = String::from(v13);
                let v78: bool = true;
                v49 /*;
                let v80: bool = */
            }); //;
            let v82: Func0<std::string::String> = _func0_from_v1;
            let v132: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v143: &str = &*v132;
            let v179: std::string::String = String::from(v143);
            let v208: std::string::String = v179;
            let v213: string = string(" class=v208 for=move || v82()");
            let v216: bool = true;
            let v214 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure264(v0_1.clone(), v)
            }); //;
            let v217 = Dice_ui::method246(v0_1.clone());
            let v218 = Dice_ui::method247();
            let v219: string = string(
                "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"",
            );
            let v231: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v217()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v214(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v218()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v219))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v233: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v217() on:change=move |event| v214(event) id=move || v218() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v235: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v233);
            let v236: string = string(
                "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"",
            );
            let v237: string = append(
                (append((append(string(" "), (v236))), string(""))),
                string(""),
            );
            let v247: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon",
            );
            let v249: string = string(
                "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"",
            );
            let v253: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v249))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v254: string = string("vec![]");
            let v255: Vec<leptos::prelude::AnyView> = vec![];
            let v257: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v255);
            let v259: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v257);
            let v262: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v253))),
                                string(">move || { v259 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v264: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v259 }</path> };
            let v266: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v264);
            let v270: string = string("vec![v266]");
            let v271: Vec<leptos::prelude::AnyView> = vec![v266];
            let v273: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v271);
            let v275: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v273);
            let v278: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v247))),
                                string(">move || { v275 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v280: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v275 }</svg> };
            let v290: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon",
            );
            let v292: string = string(
                "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"",
            );
            let v296: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v292))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v297: string = string("vec![]");
            let v298: Vec<leptos::prelude::AnyView> = vec![];
            let v300: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v298);
            let v302: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v300);
            let v304: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v296))),
                                string(">move || { v302 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v306: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v302 }</path> };
            let v308: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v306);
            let v312: string = string("vec![v308]");
            let v313: Vec<leptos::prelude::AnyView> = vec![v308];
            let v315: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v313);
            let v317: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v315);
            let v319: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v290))),
                                string(">move || { v317 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v321: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v317 }</svg> };
            let v323: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v321);
            let v325: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v280);
            let v333: string = string("vec![v325, v323]");
            let v334: Vec<leptos::prelude::AnyView> = vec![v325, v323];
            let v336: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v334);
            let v338: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v336);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v237))),
                                string(">move || { v338 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v338 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v346: string = string(
                "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"",
            );
            let v347: string = append(
                (append((append(string(" "), (v346))), string(""))),
                string(""),
            );
            let v348: string = string("vec![]");
            let v349: Vec<leptos::prelude::AnyView> = vec![];
            let v351: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v349);
            let v353: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v351);
            let v355: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v347))),
                                string(">move || { v353 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v357: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v353 }</span> };
            let v359: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v357);
            let v369: string = string("vec![v235, v345, v359]");
            let v370: Vec<leptos::prelude::AnyView> = vec![v235, v345, v359];
            let v372: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v370);
            let v374: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v372);
            let v377: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v213))),
                                string(">move || { v374 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v379: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v208 for=move || v82()>move || { v374 }</label> };
            let v381: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v379);
            let v385: string = string("vec![v381]");
            let v386: Vec<leptos::prelude::AnyView> = vec![v381];
            leptos::prelude::Fragment::new(v386)
        }
        pub fn method245(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure263(v0_1.clone(), ())
            })
        }
        pub fn closure268(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure269(v0_1: i64, unitVar: ()) -> leptos::prelude::Fragment {
            let v1: string = append(
                (append(string("Transaction "), (toString((v0_1) + 1_i64)))),
                string(""),
            );
            let v10: &str = &*v1;
            let v46: std::string::String = String::from(v10);
            let v75: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v46));
            let v80: string = string("vec![v75]");
            let v81: Vec<leptos::prelude::AnyView> = vec![v75];
            leptos::prelude::Fragment::new(v81)
        }
        pub fn closure270(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Account");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method248() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure270((), ()))
        }
        pub fn closure271(v0_1: string, unitVar: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*v0_1;
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method249(v0_1: string) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure271(v0_1.clone(), ())
            })
        }
        pub fn closure272(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure273(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure274(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Timestamp");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method250() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure274((), ()))
        }
        pub fn closure275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v20: i64 =
                (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v5))))
                    / 1000_i64;
            let v22: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v20);
            let v47: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method205(), v22));
            let v66: Dice_ui::US31 = match &v47 {
                Dice_ui::US68::US68_0(v47_0_0) => {
                    let v53: chrono::NaiveDateTime = match &v47 {
                        Dice_ui::US68::US68_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v55: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v53);
                    let v57: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v58: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v60: std::string::String = v55.format(v58).to_string();
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v60))
                }
                _ => Dice_ui::US31::US31_1,
            };
            let v72: Dice_ui::US69 = match &v66 {
                Dice_ui::US31::US31_0(v66_0_0) => Dice_ui::US69::US69_0(
                    match &v66 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => Dice_ui::US69::US69_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v77: string = match &v72 {
                Dice_ui::US69::US69_0(v72_0_0) => v72_0_0.clone(),
                Dice_ui::US69::US69_1(v72_1_0) => append(
                    (append(string("sm\'.to_string result / Error: "), (v72_1_0.clone()))),
                    string(""),
                ),
            };
            let v86: &str = &*v77;
            let v122: std::string::String = String::from(v86);
            let v151: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v122));
            let v156: string = string("vec![v151]");
            let v157: Vec<leptos::prelude::AnyView> = vec![v151];
            leptos::prelude::Fragment::new(v157)
        }
        pub fn method251(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure275(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure276(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure277(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure278(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Predecessor");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method252() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure278((), ()))
        }
        pub fn closure279(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v22: &str = &*v13;
            let v58: std::string::String = String::from(v22);
            let v87: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v92: string = string("vec![v87]");
            let v93: Vec<leptos::prelude::AnyView> = vec![v87];
            leptos::prelude::Fragment::new(v93)
        }
        pub fn method253(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure279(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure280(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure281(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure282(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Receiver");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method254() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure282((), ()))
        }
        pub fn closure283(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v22: &str = &*v13;
            let v58: std::string::String = String::from(v22);
            let v87: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v92: string = string("vec![v87]");
            let v93: Vec<leptos::prelude::AnyView> = vec![v87];
            leptos::prelude::Fragment::new(v93)
        }
        pub fn method255(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure283(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure285(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure286(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Actions");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method256() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure286((), ()))
        }
        pub fn closure288(v0_1: std::string::String, unitVar: ()) -> leptos::prelude::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == (v2.clone()) {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == (v2.clone()) {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == (v2.clone()) {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v20: &str = &*v11;
            let v56: std::string::String = String::from(v20);
            let v85: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v56));
            let v90: string = string("vec![v85]");
            let v91: Vec<leptos::prelude::AnyView> = vec![v85];
            leptos::prelude::Fragment::new(v91)
        }
        pub fn method258(v0_1: std::string::String) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure288(v0_1.clone(), ())
            })
        }
        pub fn closure290(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Method");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method260() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure290((), ()))
        }
        pub fn closure291(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v25: Dice_ui::US14 =
                defaultValue(Dice_ui::US14::US14_1, map(Dice_ui::method39(), v0_1));
            match &v25 {
                Dice_ui::US14::US14_0(v25_0_0) => {
                    let v31: string = fable_library_rust::String_::fromString(
                        match &v25 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v40: &str = &*v31;
                    let v76: std::string::String = String::from(v40);
                    let v105: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v76),
                    );
                    let v110: string = string("vec![v105]");
                    let v111: Vec<leptos::prelude::AnyView> = vec![v105];
                    leptos::prelude::Fragment::new(v111)
                }
                _ => {
                    let v123: &str = &*string("None");
                    let v159: std::string::String = String::from(v123);
                    let v188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v159),
                    );
                    let v193: string = string("vec![v188]");
                    let v194: Vec<leptos::prelude::AnyView> = vec![v188];
                    leptos::prelude::Fragment::new(v194)
                }
            }
        }
        pub fn method261(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure291(v0_1.clone(), ())
            })
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure293(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure294(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure289(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col\"");
            let v4 = Dice_ui::method260();
            let v5 = Dice_ui::method261(v0_1);
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure292((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11 = {
                let clo_1 = Func0::new(move || Dice_ui::closure293((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())",
            );
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v19 = {
                let clo_3 = Func0::new(move || Dice_ui::closure294((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())",
            );
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v63: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v67: string = string("vec![v63]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v63];
            let v70: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
            let v75: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v72 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v77: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v72 }</div> };
            let v79: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v77);
            let v83: string = string("vec![v79]");
            let v84: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v84)
        }
        pub fn method259(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure289(v0_1.clone(), ())
            })
        }
        pub fn closure295(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure296(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure297(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure298(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure287(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v15: bool = true;
            let _vec_map : Vec<_> = v13.into_iter().map(|x| { //;
            let patternInput:
                    (std::string::String, Option<std::string::String>) = x;
            let v19 = Dice_ui::method258(patternInput.0.clone());
            let v20 = Dice_ui::method259(patternInput.1.clone());
            let v23 =
                {
                    let clo = Func0::new(move || Dice_ui::closure295((), ()));
                    Func1::new({
                                   let clo = clo.clone();
                                   move |arg: ()| clo()
                               })
                };
            let v26 =
                {
                    let clo_1 =
                        Func0::new(move || Dice_ui::closure296((), ()));
                    Func1::new({
                                   let clo_1 = clo_1.clone();
                                   move |arg_1: ()| clo_1()
                               })
                };
            let v29 =
                {
                    let clo_2 =
                        Func0::new(move || Dice_ui::closure297((), ()));
                    Func1::new({
                                   let clo_2 = clo_2.clone();
                                   move |arg_2: ()| clo_2()
                               })
                };
            let v30: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())");
            let v32: string =
                append((append((append(string(" "), (v30))), string(""))),
                       string(""));
            let v35 =
                {
                    let clo_3 =
                        Func0::new(move || Dice_ui::closure298((), ()));
                    Func1::new({
                                   let clo_3 = clo_3.clone();
                                   move |arg_3: ()| clo_3()
                               })
                };
            let v37: string =
                string(" class=\"[font-size:12px] text-gray-400\"");
            let v38: leptos::prelude::Fragment = v19();
            let v40: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v38);
            let v43: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dt "),
                                                               (v37))),
                                                       string(">move || { v40 }</"))),
                                               string("dt"))),
                                       string(">"))))), string(" }"));
            let v45:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v40 }</dt> };
            let v47: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v45);
            let v49: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())");
            let v50: leptos::prelude::Fragment = v20();
            let v52: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v50);
            let v55: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dd "),
                                                               (v49))),
                                                       string(">move || { v52 }</"))),
                                               string("dd"))),
                                       string(">"))))), string(" }"));
            let v57:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v35(())>move || { v52 }</dd> };
            let v59: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v57);
            let v67: string = string("vec![v47, v59]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v47, v59];
            let v70: leptos::prelude::Fragment =
                leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v70);
            let v75: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dl "),
                                                               (v32))),
                                                       string(">move || { v72 }</"))),
                                               string("dl"))),
                                       string(">"))))), string(" }"));
            let v77:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v29(()) + " " + &v26(()) + " " + &v23(())>move || { v72 }</dl> };
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v77);
            let v81: bool = true; v79 }).collect::<Vec<_>>();
            let v83: Vec<leptos::prelude::AnyView> = _vec_map;
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method257(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure287(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure299(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure301(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure302(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Deposit");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method262() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure302((), ()))
        }
        pub fn closure303(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v8);
            let v25: &str = &*v14;
            let v61: std::string::String = String::from(v25);
            let v90: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v61));
            let v95: string = string("vec![v90]");
            let v96: Vec<leptos::prelude::AnyView> = vec![v90];
            leptos::prelude::Fragment::new(v96)
        }
        pub fn method263(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure303(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure304(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure305(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Outcome Status");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method264() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure306((), ()))
        }
        pub fn closure307(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = ofBoolean(v9);
            let v25: &str = &*v14;
            let v61: std::string::String = String::from(v25);
            let v90: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v61));
            let v95: string = string("vec![v90]");
            let v96: Vec<leptos::prelude::AnyView> = vec![v90];
            leptos::prelude::Fragment::new(v96)
        }
        pub fn method265(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure307(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure308(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure309(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure310(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Fee");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method266() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure310((), ()))
        }
        pub fn closure311(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v10);
            let v25: &str = &*v14;
            let v61: std::string::String = String::from(v25);
            let v90: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v61));
            let v95: string = string("vec![v90]");
            let v96: Vec<leptos::prelude::AnyView> = vec![v90];
            leptos::prelude::Fragment::new(v96)
        }
        pub fn method267(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure311(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure312(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure313(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure314(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Height");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method268() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure314((), ()))
        }
        pub fn closure315(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v6);
            let v25: &str = &*v14;
            let v61: std::string::String = String::from(v25);
            let v90: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v61));
            let v95: string = string("vec![v90]");
            let v96: Vec<leptos::prelude::AnyView> = vec![v90];
            leptos::prelude::Fragment::new(v96)
        }
        pub fn method269(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure315(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure316(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure317(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure318(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Hash");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method270() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure318((), ()))
        }
        pub fn closure319(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v22: &str = &*v13;
            let v58: std::string::String = String::from(v22);
            let v87: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v92: string = string("vec![v87]");
            let v93: Vec<leptos::prelude::AnyView> = vec![v87];
            leptos::prelude::Fragment::new(v93)
        }
        pub fn method271(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure319(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure320(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure321(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure322(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Hash");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method272() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure323(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v22: &str = &*v13;
            let v58: std::string::String = String::from(v22);
            let v87: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v92: string = string("vec![v87]");
            let v93: Vec<leptos::prelude::AnyView> = vec![v87];
            leptos::prelude::Fragment::new(v93)
        }
        pub fn method273(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure323(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure324(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure325(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Receipt ID");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method274() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure326((), ()))
        }
        pub fn closure327(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v22: &str = &*v13;
            let v58: std::string::String = String::from(v22);
            let v87: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v92: string = string("vec![v87]");
            let v93: Vec<leptos::prelude::AnyView> = vec![v87];
            leptos::prelude::Fragment::new(v93)
        }
        pub fn method275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure327(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure328(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure329(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure330(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Logs");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method276() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure330((), ()))
        }
        pub fn method278(
            v0_1: Func1<std::string::String, string>,
        ) -> Func1<std::string::String, string> {
            v0_1
        }
        pub fn closure332(
            v0_1: Func1<std::string::String, string>,
            v1: std::string::String,
        ) -> string {
            let v2: Func1<std::string::String, string> = Dice_ui::method278(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method279() -> string {
            string("\n")
        }
        pub fn closure333(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure331(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: std::string::String = value;
                let v20: string = fable_library_rust::String_::fromString(v18);
                let v23: bool = true;
                v20 /*;
                let v25: bool = */
            }); //;
            let v27: Func1<std::string::String, string> = _func1_from_v14;
            let v30: Vec<string> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v27 = v27.clone();
                        move |v: std::string::String| Dice_ui::closure332(v27.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v34: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray(fable_library_rust::NativeArray_::array_from(v30.clone()));
            let v48: string = replace(
                join(Dice_ui::method279(), toArray(v34)),
                string("\\n"),
                string("\n"),
            );
            let v51 = {
                let clo = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v52: string = string(
                "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v51(())",
            );
            let v54: string = append(
                (append((append(string(" "), (v52))), string(""))),
                string(""),
            );
            let v63: &str = &*v48;
            let v99: std::string::String = String::from(v63);
            let v128: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v99));
            let v132: string = string("vec![v128]");
            let v133: Vec<leptos::prelude::AnyView> = vec![v128];
            let v135: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v133);
            let v137: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v135);
            let v140: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v54))),
                                string(">move || { v137 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v142: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v51(())>move || { v137 }</pre> };
            let v144: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v142);
            let v148: string = string("vec![v144]");
            let v149: Vec<leptos::prelude::AnyView> = vec![v144];
            leptos::prelude::Fragment::new(v149)
        }
        pub fn method277(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure331(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure334(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure335(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure336(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn method281(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method281: loop {
                break '_method281 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if (length(fable_library_rust::String_::fromString(v4))) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method281;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method280(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method280: loop {
                break '_method280 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    if Dice_ui::method281(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method280;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure260(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v144: leptos::prelude::AnyView = if leptos::prelude::ReadSignal::get(&v3) {
                let v8: string = string(" class=\"px-[12px] py-[10px]\"");
                let v10: string = string(" class=\"flex items-center pb-[6px]\"");
                let v12: string = string(" class=\"pr-[15px] [font-size:13px]\"");
                let v16: Func0<leptos::prelude::Fragment> =
                    Dice_ui::method195(Func0::new(move || {
                        Func0::new(move || Dice_ui::closure261((), ()))()
                    }));
                let v18: leptos::prelude::Fragment = (move || v16())();
                let v20: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v18);
                let v23: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v12))),
                                    string(">move || { v20 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v25: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v20 }</span> };
                let v27: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v25);
                let v29: string = string(" class=\"h-px flex-1 bg-gray-300\"");
                let v30: string = string("vec![]");
                let v31: Vec<leptos::prelude::AnyView> = vec![];
                let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
                let v35: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v33);
                let v37: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v29))),
                                    string(">move || { v35 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v35 }</span> };
                let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
                let v49: string = string("vec![v27, v41]");
                let v50: Vec<leptos::prelude::AnyView> = vec![v27, v41];
                let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
                let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
                let v56: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v10))),
                                    string(">move || { v54 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v58: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v54 }</span> };
                let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
                let v61 = Dice_ui::method244();
                let v62 = Dice_ui::method245(v0_1.clone());
                let v65 = {
                    let clo = Func0::new(move || Dice_ui::closure268((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v68 = {
                    let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v71 = {
                    let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                    Func1::new({
                        let clo_2 = clo_2.clone();
                        move |arg_2: ()| clo_2()
                    })
                };
                let v72: string = string(
                    "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v71(()) + \" \" + &v68(()) + \" \" + &v65(())",
                );
                let v73: string = append(
                    (append((append(string(" "), (v72))), string(""))),
                    string(""),
                );
                let v76 = {
                    let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                    Func1::new({
                        let clo_3 = clo_3.clone();
                        move |arg_3: ()| clo_3()
                    })
                };
                let v78: string = string(" class=\"[font-size:12px] text-gray-400\"");
                let v79: leptos::prelude::Fragment = v61();
                let v81: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v79);
                let v84: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dt "), (v78))),
                                    string(">move || { v81 }</"),
                                )),
                                string("dt"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v86: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v81 }</dt> };
                let v88: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v86);
                let v90: string = string(
                    " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v76(())",
                );
                let v91: leptos::prelude::Fragment = v62();
                let v93: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v91);
                let v96: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dd "), (v90))),
                                    string(">move || { v93 }</"),
                                )),
                                string("dd"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v98: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v76(())>move || { v93 }</dd> };
                let v100: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v98);
                let v107: string = string("vec![v88, v100]");
                let v108: Vec<leptos::prelude::AnyView> = vec![v88, v100];
                let v110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v108);
                let v112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v110);
                let v115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dl "), (v73))),
                                    string(">move || { v112 }</"),
                                )),
                                string("dl"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v117: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v71(()) + " " + &v68(()) + " " + &v65(())>move || { v112 }</dl> };
                let v119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v117);
                let v126: string = string("vec![v60, v119]");
                let v127: Vec<leptos::prelude::AnyView> = vec![v60, v119];
                let v129: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v127);
                let v131: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v129);
                let v134: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v8))),
                                    string(">move || { v131 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v136: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="px-[12px] py-[10px]">move || { v131 }</div> };
                leptos::prelude::IntoAny::into_any(v136)
            } else {
                let v140: string = string("vec![]");
                let v141: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v141)
            };
            let v146: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v4775: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v146.clone()),
            ) as u64)
                == 0_u64
            {
                let v153: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v155: string = string(" class=\"[height:17px]\"");
                let v169: string = string(
                    " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v175: string = string(
                    " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v176: string = string("vec![]");
                let v177: Vec<leptos::prelude::AnyView> = vec![];
                let v179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v177);
                let v181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v179);
                let v184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v175))),
                                    string(">move || { v181 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v181 }</path> };
                let v188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v186);
                let v192: string = string("vec![v188]");
                let v193: Vec<leptos::prelude::AnyView> = vec![v188];
                let v195: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v193);
                let v197: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v195);
                let v200: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v169))),
                                    string(">move || { v197 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v202: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v197 }</svg> };
                let v204: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v202);
                let v208: string = string("vec![v204]");
                let v209: Vec<leptos::prelude::AnyView> = vec![v204];
                let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
                let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
                let v216: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v155))),
                                    string(">move || { v213 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v218: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v213 }</span> };
                let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
                let v222: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v232: &str = &*string("No account selected");
                let v268: std::string::String = String::from(v232);
                let v297: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v268));
                let v301: string = string("vec![v297]");
                let v302: Vec<leptos::prelude::AnyView> = vec![v297];
                let v304: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v302);
                let v306: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v304);
                let v309: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v222))),
                                    string(">move || { v306 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v311: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v306 }</pre> };
                let v313: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v311);
                let v321: string = string("vec![v220, v313]");
                let v322: Vec<leptos::prelude::AnyView> = vec![v220, v313];
                let v324: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v322);
                let v326: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v324);
                let v329: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v153))),
                                    string(">move || { v326 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v331: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v326 }</div> };
                leptos::prelude::IntoAny::into_any(v331)
            } else {
                let v335: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v336 = Dice_ui::method138();
                let v337 = Dice_ui::method139();
                let v339: Dice_ui::US53 = match &v335 {
                    Err(v335_1_0) => v337(v335_1_0.clone()),
                    Ok(v335_0_0) => v336(v335_0_0.clone()),
                };
                let v375: Dice_ui::US46 = match &v339 {
                    Dice_ui::US53::US53_0(v339_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v339_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v339_1_0) => Dice_ui::US46::US46_1(v339_1_0.clone()),
                };
                match &v375 {
                    Dice_ui::US46::US46_0(v375_0_0) => {
                        let v376: Dice_ui::US47 = v375_0_0.clone();
                        if let Dice_ui::US47::US47_0(v376_0_0) = &v376 {
                            let v377: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v376_0_0.clone();
                            let v380: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v0_1.l0.clone());
                            let v382: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v380);
                            if if let Dice_ui::US1::US1_0 =
                                &(leptos::prelude::ArcRwSignal::get(&v382.l3.clone())).l4
                            {
                                true
                            } else {
                                false
                            } {
                                let v388: string = string(
                                    "class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"",
                                );
                                let v390: string = append(
                                    (append((append(string(" "), (v388))), string(""))),
                                    string(""),
                                );
                                let v392: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v377.clone().to_vec();
                                let v394: bool = true;
                                let _vec_map : Vec<_> = v392.into_iter().map(|x| { //;
                                    let patternInput:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v398: LrcPtr<Dice_ui::Heap5> =
                                        patternInput.2.clone();
                                    let v399: std::string::String =
                                        v398.l0.clone();
                                    let v400: std::string::String =
                                        v398.l1.clone();
                                    let v401: std::string::String =
                                        v398.l2.clone();
                                    let v402: std::string::String =
                                        v398.l3.clone();
                                    let v403: std::string::String =
                                        v398.l4.clone();
                                    let v404: std::string::String =
                                        v398.l5.clone();
                                    let v405: u32 = v398.l6;
                                    let v406:
                                            Array<(std::string::String,
                                                   Option<std::string::String>)> =
                                        v398.l7.clone();
                                    let v407: f64 = v398.l8;
                                    let v408: bool = v398.l9;
                                    let v409: f64 = v398.l10;
                                    let v410: Array<std::string::String> =
                                        v398.l11.clone();
                                    let v413: i64 =
                                        patternInput.1.clone() as i64;
                                    let v418: bool =
                                        true; leptos::logging::log!("{}", string("transaction.render (1)"));
                                    let v420: Option<LrcPtr<Dice_ui::Heap2>> =
                                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                                    let v422: LrcPtr<Dice_ui::Heap2> =
                                        v420.unwrap();
                                    let v424: string =
                                        string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
                                    let v426: string =
                                        string(" class=\"flex items-center pb-[6px]\"");
                                    let v428: string =
                                        string(" class=\"pr-[15px] [font-size:13px]\"");
                                    let v432:
                                            Func0<leptos::prelude::Fragment> =
                                        Dice_ui::method195(Func0::new(move || Func0::new({
                                                                                             let v413
                                                                                                 =
                                                                                                 v413.clone();
                                                                                             move
                                                                                                 ||
                                                                                                 Dice_ui::closure269(v413,
                                                                                                                     ())
                                                                                         })()));
                                    let v434: leptos::prelude::Fragment =
                                        (move || v432())();
                                    let v436: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v434);
                                    let v439: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v428))),
                                                                               string(">move || { v436 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v441:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v436 }</span> };
                                    let v443: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v441);
                                    let v445: string =
                                        string(" class=\"h-px flex-1 bg-gray-300\"");
                                    let v446: string = string("vec![]");
                                    let v447: Vec<leptos::prelude::AnyView> =
                                        vec![];
                                    let v449: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v447);
                                    let v451: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v449);
                                    let v453: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v445))),
                                                                               string(">move || { v451 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v455:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v451 }</span> };
                                    let v457: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v455);
                                    let v465: string =
                                        string("vec![v443, v457]");
                                    let v466: Vec<leptos::prelude::AnyView> =
                                        vec![v443, v457];
                                    let v468: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v466);
                                    let v470: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v468);
                                    let v472: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v426))),
                                                                               string(">move || { v470 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v474:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v470 }</span> };
                                    let v476: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v474);
                                    let v478: string =
                                        string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
                                    let v479 = Dice_ui::method248();
                                    let v480 =
                                        Dice_ui::method249(patternInput.0.clone());
                                    let v483 =
                                        {
                                            let clo_4 =
                                                Func0::new(move ||
                                                               Dice_ui::closure272((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_4 =
                                                               clo_4.clone();
                                                           move |arg_4: ()|
                                                               clo_4()
                                                       })
                                        };
                                    let v486 =
                                        {
                                            let clo_5 =
                                                Func0::new(move ||
                                                               Dice_ui::closure273((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_5 =
                                                               clo_5.clone();
                                                           move |arg_5: ()|
                                                               clo_5()
                                                       })
                                        };
                                    fn v488() -> string {
                                        Dice_ui::closure235((), ())
                                    }
                                    let v489 =
                                        {
                                            let clo_6 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_6 =
                                                               clo_6.clone();
                                                           move |arg_6: ()|
                                                               clo_6()
                                                       })
                                        };
                                    let v490: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v489(()) + \" \" + &v486(()) + \" \" + &v483(())");
                                    let v491: string =
                                        append((append((append(string(" "),
                                                               (v490))),
                                                       string(""))),
                                               string(""));
                                    fn v493() -> string {
                                        Dice_ui::closure236((), ())
                                    }
                                    let v494 =
                                        {
                                            let clo_7 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_7 =
                                                               clo_7.clone();
                                                           move |arg_7: ()|
                                                               clo_7()
                                                       })
                                        };
                                    let v496: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v497: leptos::prelude::Fragment =
                                        v479();
                                    let v499: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v497);
                                    let v502: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v496))),
                                                                               string(">move || { v499 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v504:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v499 }</dt> };
                                    let v506: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v504);
                                    let v508: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v494(())");
                                    let v509: leptos::prelude::Fragment =
                                        v480();
                                    let v511: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v509);
                                    let v514: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v508))),
                                                                               string(">move || { v511 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v516:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v494(())>move || { v511 }</dd> };
                                    let v518: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v516);
                                    let v525: string =
                                        string("vec![v506, v518]");
                                    let v526: Vec<leptos::prelude::AnyView> =
                                        vec![v506, v518];
                                    let v528: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v526);
                                    let v530: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v528);
                                    let v533: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v491))),
                                                                               string(">move || { v530 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v535:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v489(()) + " " + &v486(()) + " " + &v483(())>move || { v530 }</dl> };
                                    let v537: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v535);
                                    let v538 = Dice_ui::method250();
                                    let v539 =
                                        Dice_ui::method251(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v542 =
                                        {
                                            let clo_8 =
                                                Func0::new(move ||
                                                               Dice_ui::closure276((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_8 =
                                                               clo_8.clone();
                                                           move |arg_8: ()|
                                                               clo_8()
                                                       })
                                        };
                                    let v545 =
                                        {
                                            let clo_9 =
                                                Func0::new(move ||
                                                               Dice_ui::closure277((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_9 =
                                                               clo_9.clone();
                                                           move |arg_9: ()|
                                                               clo_9()
                                                       })
                                        };
                                    let v547 =
                                        {
                                            let clo_10 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_10 =
                                                               clo_10.clone();
                                                           move |arg_10: ()|
                                                               clo_10()
                                                       })
                                        };
                                    let v548: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v547(()) + \" \" + &v545(()) + \" \" + &v542(())");
                                    let v549: string =
                                        append((append((append(string(" "),
                                                               (v548))),
                                                       string(""))),
                                               string(""));
                                    let v551 =
                                        {
                                            let clo_11 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_11 =
                                                               clo_11.clone();
                                                           move |arg_11: ()|
                                                               clo_11()
                                                       })
                                        };
                                    let v553: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v554: leptos::prelude::Fragment =
                                        v538();
                                    let v556: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v554);
                                    let v558: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v553))),
                                                                               string(">move || { v556 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v560:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v556 }</dt> };
                                    let v562: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v560);
                                    let v564: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v551(())");
                                    let v565: leptos::prelude::Fragment =
                                        v539();
                                    let v567: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v565);
                                    let v569: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v564))),
                                                                               string(">move || { v567 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v571:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v551(())>move || { v567 }</dd> };
                                    let v573: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v571);
                                    let v580: string =
                                        string("vec![v562, v573]");
                                    let v581: Vec<leptos::prelude::AnyView> =
                                        vec![v562, v573];
                                    let v583: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v581);
                                    let v585: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v583);
                                    let v587: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v549))),
                                                                               string(">move || { v585 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v589:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v547(()) + " " + &v545(()) + " " + &v542(())>move || { v585 }</dl> };
                                    let v591: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v589);
                                    let v592 = Dice_ui::method252();
                                    let v593 =
                                        Dice_ui::method253(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v596 =
                                        {
                                            let clo_12 =
                                                Func0::new(move ||
                                                               Dice_ui::closure280((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_12 =
                                                               clo_12.clone();
                                                           move |arg_12: ()|
                                                               clo_12()
                                                       })
                                        };
                                    let v599 =
                                        {
                                            let clo_13 =
                                                Func0::new(move ||
                                                               Dice_ui::closure281((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_13 =
                                                               clo_13.clone();
                                                           move |arg_13: ()|
                                                               clo_13()
                                                       })
                                        };
                                    let v601 =
                                        {
                                            let clo_14 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_14 =
                                                               clo_14.clone();
                                                           move |arg_14: ()|
                                                               clo_14()
                                                       })
                                        };
                                    let v602: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v601(()) + \" \" + &v599(()) + \" \" + &v596(())");
                                    let v603: string =
                                        append((append((append(string(" "),
                                                               (v602))),
                                                       string(""))),
                                               string(""));
                                    let v605 =
                                        {
                                            let clo_15 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_15 =
                                                               clo_15.clone();
                                                           move |arg_15: ()|
                                                               clo_15()
                                                       })
                                        };
                                    let v607: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v608: leptos::prelude::Fragment =
                                        v592();
                                    let v610: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v608);
                                    let v612: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v607))),
                                                                               string(">move || { v610 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v614:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v610 }</dt> };
                                    let v616: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v614);
                                    let v618: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v605(())");
                                    let v619: leptos::prelude::Fragment =
                                        v593();
                                    let v621: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v619);
                                    let v623: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v618))),
                                                                               string(">move || { v621 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v625:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v605(())>move || { v621 }</dd> };
                                    let v627: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v625);
                                    let v634: string =
                                        string("vec![v616, v627]");
                                    let v635: Vec<leptos::prelude::AnyView> =
                                        vec![v616, v627];
                                    let v637: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v635);
                                    let v639: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v637);
                                    let v641: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v603))),
                                                                               string(">move || { v639 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v643:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v601(()) + " " + &v599(()) + " " + &v596(())>move || { v639 }</dl> };
                                    let v645: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v643);
                                    let v646 = Dice_ui::method254();
                                    let v647 =
                                        Dice_ui::method255(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v650 =
                                        {
                                            let clo_16 =
                                                Func0::new(move ||
                                                               Dice_ui::closure284((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_16 =
                                                               clo_16.clone();
                                                           move |arg_16: ()|
                                                               clo_16()
                                                       })
                                        };
                                    let v653 =
                                        {
                                            let clo_17 =
                                                Func0::new(move ||
                                                               Dice_ui::closure285((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_17 =
                                                               clo_17.clone();
                                                           move |arg_17: ()|
                                                               clo_17()
                                                       })
                                        };
                                    let v655 =
                                        {
                                            let clo_18 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_18 =
                                                               clo_18.clone();
                                                           move |arg_18: ()|
                                                               clo_18()
                                                       })
                                        };
                                    let v656: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v655(()) + \" \" + &v653(()) + \" \" + &v650(())");
                                    let v657: string =
                                        append((append((append(string(" "),
                                                               (v656))),
                                                       string(""))),
                                               string(""));
                                    let v659 =
                                        {
                                            let clo_19 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_19 =
                                                               clo_19.clone();
                                                           move |arg_19: ()|
                                                               clo_19()
                                                       })
                                        };
                                    let v661: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v662: leptos::prelude::Fragment =
                                        v646();
                                    let v664: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v662);
                                    let v666: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v661))),
                                                                               string(">move || { v664 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v668:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v664 }</dt> };
                                    let v670: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v668);
                                    let v672: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v659(())");
                                    let v673: leptos::prelude::Fragment =
                                        v647();
                                    let v675: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v673);
                                    let v677: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v672))),
                                                                               string(">move || { v675 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v679:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v659(())>move || { v675 }</dd> };
                                    let v681: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v679);
                                    let v688: string =
                                        string("vec![v670, v681]");
                                    let v689: Vec<leptos::prelude::AnyView> =
                                        vec![v670, v681];
                                    let v691: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v689);
                                    let v693: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v691);
                                    let v695: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v657))),
                                                                               string(">move || { v693 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v697:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v655(()) + " " + &v653(()) + " " + &v650(())>move || { v693 }</dl> };
                                    let v699: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v697);
                                    let v700 = Dice_ui::method256();
                                    let v701 =
                                        Dice_ui::method257(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v704 =
                                        {
                                            let clo_20 =
                                                Func0::new(move ||
                                                               Dice_ui::closure299((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_20 =
                                                               clo_20.clone();
                                                           move |arg_20: ()|
                                                               clo_20()
                                                       })
                                        };
                                    let v707 =
                                        {
                                            let clo_21 =
                                                Func0::new(move ||
                                                               Dice_ui::closure300((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_21 =
                                                               clo_21.clone();
                                                           move |arg_21: ()|
                                                               clo_21()
                                                       })
                                        };
                                    let v709 =
                                        {
                                            let clo_22 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_22 =
                                                               clo_22.clone();
                                                           move |arg_22: ()|
                                                               clo_22()
                                                       })
                                        };
                                    let v710: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v709(()) + \" \" + &v707(()) + \" \" + &v704(())");
                                    let v711: string =
                                        append((append((append(string(" "),
                                                               (v710))),
                                                       string(""))),
                                               string(""));
                                    let v714 =
                                        {
                                            let clo_23 =
                                                Func0::new(move ||
                                                               Dice_ui::closure301((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_23 =
                                                               clo_23.clone();
                                                           move |arg_23: ()|
                                                               clo_23()
                                                       })
                                        };
                                    let v716: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v717: leptos::prelude::Fragment =
                                        v700();
                                    let v719: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v717);
                                    let v721: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v716))),
                                                                               string(">move || { v719 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v723:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v719 }</dt> };
                                    let v725: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v723);
                                    let v727: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v714(())");
                                    let v728: leptos::prelude::Fragment =
                                        v701();
                                    let v730: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v728);
                                    let v732: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v727))),
                                                                               string(">move || { v730 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v734:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v714(())>move || { v730 }</dd> };
                                    let v736: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v734);
                                    let v743: string =
                                        string("vec![v725, v736]");
                                    let v744: Vec<leptos::prelude::AnyView> =
                                        vec![v725, v736];
                                    let v746: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v744);
                                    let v748: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v746);
                                    let v750: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v711))),
                                                                               string(">move || { v748 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v752:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v709(()) + " " + &v707(()) + " " + &v704(())>move || { v748 }</dl> };
                                    let v754: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v752);
                                    let v755 = Dice_ui::method262();
                                    let v756 =
                                        Dice_ui::method263(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v759 =
                                        {
                                            let clo_24 =
                                                Func0::new(move ||
                                                               Dice_ui::closure304((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_24 =
                                                               clo_24.clone();
                                                           move |arg_24: ()|
                                                               clo_24()
                                                       })
                                        };
                                    let v762 =
                                        {
                                            let clo_25 =
                                                Func0::new(move ||
                                                               Dice_ui::closure305((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_25 =
                                                               clo_25.clone();
                                                           move |arg_25: ()|
                                                               clo_25()
                                                       })
                                        };
                                    let v764 =
                                        {
                                            let clo_26 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_26 =
                                                               clo_26.clone();
                                                           move |arg_26: ()|
                                                               clo_26()
                                                       })
                                        };
                                    let v765: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v764(()) + \" \" + &v762(()) + \" \" + &v759(())");
                                    let v766: string =
                                        append((append((append(string(" "),
                                                               (v765))),
                                                       string(""))),
                                               string(""));
                                    let v768 =
                                        {
                                            let clo_27 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_27 =
                                                               clo_27.clone();
                                                           move |arg_27: ()|
                                                               clo_27()
                                                       })
                                        };
                                    let v770: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v771: leptos::prelude::Fragment =
                                        v755();
                                    let v773: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v771);
                                    let v775: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v770))),
                                                                               string(">move || { v773 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v777:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v773 }</dt> };
                                    let v779: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v777);
                                    let v781: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v768(())");
                                    let v782: leptos::prelude::Fragment =
                                        v756();
                                    let v784: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v782);
                                    let v786: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v781))),
                                                                               string(">move || { v784 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v788:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v768(())>move || { v784 }</dd> };
                                    let v790: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v788);
                                    let v797: string =
                                        string("vec![v779, v790]");
                                    let v798: Vec<leptos::prelude::AnyView> =
                                        vec![v779, v790];
                                    let v800: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v798);
                                    let v802: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v800);
                                    let v804: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v766))),
                                                                               string(">move || { v802 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v806:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v764(()) + " " + &v762(()) + " " + &v759(())>move || { v802 }</dl> };
                                    let v808: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v806);
                                    let v809 = Dice_ui::method264();
                                    let v810 =
                                        Dice_ui::method265(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v813 =
                                        {
                                            let clo_28 =
                                                Func0::new(move ||
                                                               Dice_ui::closure308((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_28 =
                                                               clo_28.clone();
                                                           move |arg_28: ()|
                                                               clo_28()
                                                       })
                                        };
                                    let v816 =
                                        {
                                            let clo_29 =
                                                Func0::new(move ||
                                                               Dice_ui::closure309((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_29 =
                                                               clo_29.clone();
                                                           move |arg_29: ()|
                                                               clo_29()
                                                       })
                                        };
                                    let v818 =
                                        {
                                            let clo_30 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_30 =
                                                               clo_30.clone();
                                                           move |arg_30: ()|
                                                               clo_30()
                                                       })
                                        };
                                    let v819: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v818(()) + \" \" + &v816(()) + \" \" + &v813(())");
                                    let v820: string =
                                        append((append((append(string(" "),
                                                               (v819))),
                                                       string(""))),
                                               string(""));
                                    let v822 =
                                        {
                                            let clo_31 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_31 =
                                                               clo_31.clone();
                                                           move |arg_31: ()|
                                                               clo_31()
                                                       })
                                        };
                                    let v824: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v825: leptos::prelude::Fragment =
                                        v809();
                                    let v827: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v825);
                                    let v829: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v824))),
                                                                               string(">move || { v827 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v831:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v827 }</dt> };
                                    let v833: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v831);
                                    let v835: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v822(())");
                                    let v836: leptos::prelude::Fragment =
                                        v810();
                                    let v838: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v836);
                                    let v840: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v835))),
                                                                               string(">move || { v838 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v842:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v822(())>move || { v838 }</dd> };
                                    let v844: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v842);
                                    let v851: string =
                                        string("vec![v833, v844]");
                                    let v852: Vec<leptos::prelude::AnyView> =
                                        vec![v833, v844];
                                    let v854: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v852);
                                    let v856: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v854);
                                    let v858: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v820))),
                                                                               string(">move || { v856 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v860:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v818(()) + " " + &v816(()) + " " + &v813(())>move || { v856 }</dl> };
                                    let v862: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v860);
                                    let v863 = Dice_ui::method266();
                                    let v864 =
                                        Dice_ui::method267(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v867 =
                                        {
                                            let clo_32 =
                                                Func0::new(move ||
                                                               Dice_ui::closure312((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_32 =
                                                               clo_32.clone();
                                                           move |arg_32: ()|
                                                               clo_32()
                                                       })
                                        };
                                    let v870 =
                                        {
                                            let clo_33 =
                                                Func0::new(move ||
                                                               Dice_ui::closure313((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_33 =
                                                               clo_33.clone();
                                                           move |arg_33: ()|
                                                               clo_33()
                                                       })
                                        };
                                    let v872 =
                                        {
                                            let clo_34 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_34 =
                                                               clo_34.clone();
                                                           move |arg_34: ()|
                                                               clo_34()
                                                       })
                                        };
                                    let v873: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v872(()) + \" \" + &v870(()) + \" \" + &v867(())");
                                    let v874: string =
                                        append((append((append(string(" "),
                                                               (v873))),
                                                       string(""))),
                                               string(""));
                                    let v876 =
                                        {
                                            let clo_35 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_35 =
                                                               clo_35.clone();
                                                           move |arg_35: ()|
                                                               clo_35()
                                                       })
                                        };
                                    let v878: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v879: leptos::prelude::Fragment =
                                        v863();
                                    let v881: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v879);
                                    let v883: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v878))),
                                                                               string(">move || { v881 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v885:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v881 }</dt> };
                                    let v887: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v885);
                                    let v889: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v876(())");
                                    let v890: leptos::prelude::Fragment =
                                        v864();
                                    let v892: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v890);
                                    let v894: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v889))),
                                                                               string(">move || { v892 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v896:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v876(())>move || { v892 }</dd> };
                                    let v898: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v896);
                                    let v905: string =
                                        string("vec![v887, v898]");
                                    let v906: Vec<leptos::prelude::AnyView> =
                                        vec![v887, v898];
                                    let v908: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v906);
                                    let v910: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v908);
                                    let v912: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v874))),
                                                                               string(">move || { v910 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v914:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v872(()) + " " + &v870(()) + " " + &v867(())>move || { v910 }</dl> };
                                    let v916: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v914);
                                    let v917 = Dice_ui::method268();
                                    let v918 =
                                        Dice_ui::method269(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v921 =
                                        {
                                            let clo_36 =
                                                Func0::new(move ||
                                                               Dice_ui::closure316((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_36 =
                                                               clo_36.clone();
                                                           move |arg_36: ()|
                                                               clo_36()
                                                       })
                                        };
                                    let v924 =
                                        {
                                            let clo_37 =
                                                Func0::new(move ||
                                                               Dice_ui::closure317((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_37 =
                                                               clo_37.clone();
                                                           move |arg_37: ()|
                                                               clo_37()
                                                       })
                                        };
                                    let v926 =
                                        {
                                            let clo_38 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_38 =
                                                               clo_38.clone();
                                                           move |arg_38: ()|
                                                               clo_38()
                                                       })
                                        };
                                    let v927: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v926(()) + \" \" + &v924(()) + \" \" + &v921(())");
                                    let v928: string =
                                        append((append((append(string(" "),
                                                               (v927))),
                                                       string(""))),
                                               string(""));
                                    let v930 =
                                        {
                                            let clo_39 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_39 =
                                                               clo_39.clone();
                                                           move |arg_39: ()|
                                                               clo_39()
                                                       })
                                        };
                                    let v932: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v933: leptos::prelude::Fragment =
                                        v917();
                                    let v935: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v933);
                                    let v937: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v932))),
                                                                               string(">move || { v935 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v939:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v935 }</dt> };
                                    let v941: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v939);
                                    let v943: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v930(())");
                                    let v944: leptos::prelude::Fragment =
                                        v918();
                                    let v946: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v944);
                                    let v948: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v943))),
                                                                               string(">move || { v946 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v950:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v930(())>move || { v946 }</dd> };
                                    let v952: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v950);
                                    let v959: string =
                                        string("vec![v941, v952]");
                                    let v960: Vec<leptos::prelude::AnyView> =
                                        vec![v941, v952];
                                    let v962: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v960);
                                    let v964: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v962);
                                    let v966: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v928))),
                                                                               string(">move || { v964 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v968:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v926(()) + " " + &v924(()) + " " + &v921(())>move || { v964 }</dl> };
                                    let v970: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v968);
                                    let v971 = Dice_ui::method270();
                                    let v972 =
                                        Dice_ui::method271(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v975 =
                                        {
                                            let clo_40 =
                                                Func0::new(move ||
                                                               Dice_ui::closure320((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_40 =
                                                               clo_40.clone();
                                                           move |arg_40: ()|
                                                               clo_40()
                                                       })
                                        };
                                    let v978 =
                                        {
                                            let clo_41 =
                                                Func0::new(move ||
                                                               Dice_ui::closure321((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_41 =
                                                               clo_41.clone();
                                                           move |arg_41: ()|
                                                               clo_41()
                                                       })
                                        };
                                    let v980 =
                                        {
                                            let clo_42 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_42 =
                                                               clo_42.clone();
                                                           move |arg_42: ()|
                                                               clo_42()
                                                       })
                                        };
                                    let v981: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v980(()) + \" \" + &v978(()) + \" \" + &v975(())");
                                    let v982: string =
                                        append((append((append(string(" "),
                                                               (v981))),
                                                       string(""))),
                                               string(""));
                                    let v984 =
                                        {
                                            let clo_43 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_43 =
                                                               clo_43.clone();
                                                           move |arg_43: ()|
                                                               clo_43()
                                                       })
                                        };
                                    let v986: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v987: leptos::prelude::Fragment =
                                        v971();
                                    let v989: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v987);
                                    let v991: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v986))),
                                                                               string(">move || { v989 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v993:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v989 }</dt> };
                                    let v995: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v993);
                                    let v997: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v984(())");
                                    let v998: leptos::prelude::Fragment =
                                        v972();
                                    let v1000: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v998);
                                    let v1002: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v997))),
                                                                               string(">move || { v1000 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1004:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v984(())>move || { v1000 }</dd> };
                                    let v1006: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1004);
                                    let v1013: string =
                                        string("vec![v995, v1006]");
                                    let v1014: Vec<leptos::prelude::AnyView> =
                                        vec![v995, v1006];
                                    let v1016: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1014);
                                    let v1018: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1016);
                                    let v1020: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v982))),
                                                                               string(">move || { v1018 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1022:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v980(()) + " " + &v978(()) + " " + &v975(())>move || { v1018 }</dl> };
                                    let v1024: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1022);
                                    let v1025 = Dice_ui::method272();
                                    let v1026 =
                                        Dice_ui::method273(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v1029 =
                                        {
                                            let clo_44 =
                                                Func0::new(move ||
                                                               Dice_ui::closure324((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_44 =
                                                               clo_44.clone();
                                                           move |arg_44: ()|
                                                               clo_44()
                                                       })
                                        };
                                    let v1032 =
                                        {
                                            let clo_45 =
                                                Func0::new(move ||
                                                               Dice_ui::closure325((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_45 =
                                                               clo_45.clone();
                                                           move |arg_45: ()|
                                                               clo_45()
                                                       })
                                        };
                                    let v1034 =
                                        {
                                            let clo_46 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_46 =
                                                               clo_46.clone();
                                                           move |arg_46: ()|
                                                               clo_46()
                                                       })
                                        };
                                    let v1035: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1034(()) + \" \" + &v1032(()) + \" \" + &v1029(())");
                                    let v1036: string =
                                        append((append((append(string(" "),
                                                               (v1035))),
                                                       string(""))),
                                               string(""));
                                    let v1038 =
                                        {
                                            let clo_47 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_47 =
                                                               clo_47.clone();
                                                           move |arg_47: ()|
                                                               clo_47()
                                                       })
                                        };
                                    let v1040: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1041: leptos::prelude::Fragment =
                                        v1025();
                                    let v1043: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1041);
                                    let v1045: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1040))),
                                                                               string(">move || { v1043 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1047:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1043 }</dt> };
                                    let v1049: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1047);
                                    let v1051: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1038(())");
                                    let v1052: leptos::prelude::Fragment =
                                        v1026();
                                    let v1054: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1052);
                                    let v1056: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1051))),
                                                                               string(">move || { v1054 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1058:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1038(())>move || { v1054 }</dd> };
                                    let v1060: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1058);
                                    let v1067: string =
                                        string("vec![v1049, v1060]");
                                    let v1068: Vec<leptos::prelude::AnyView> =
                                        vec![v1049, v1060];
                                    let v1070: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1068);
                                    let v1072: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1070);
                                    let v1074: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1036))),
                                                                               string(">move || { v1072 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1076:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1034(()) + " " + &v1032(()) + " " + &v1029(())>move || { v1072 }</dl> };
                                    let v1078: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1076);
                                    let v1079 = Dice_ui::method274();
                                    let v1080 =
                                        Dice_ui::method275(v399.clone(),
                                                           v400.clone(),
                                                           v401.clone(),
                                                           v402.clone(),
                                                           v403.clone(),
                                                           v404.clone(), v405,
                                                           v406.clone(), v407,
                                                           v408, v409,
                                                           v410.clone());
                                    let v1083 =
                                        {
                                            let clo_48 =
                                                Func0::new(move ||
                                                               Dice_ui::closure328((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_48 =
                                                               clo_48.clone();
                                                           move |arg_48: ()|
                                                               clo_48()
                                                       })
                                        };
                                    let v1086 =
                                        {
                                            let clo_49 =
                                                Func0::new(move ||
                                                               Dice_ui::closure329((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_49 =
                                                               clo_49.clone();
                                                           move |arg_49: ()|
                                                               clo_49()
                                                       })
                                        };
                                    let v1088 =
                                        {
                                            let clo_50 = Func0::from(v488);
                                            Func1::new({
                                                           let clo_50 =
                                                               clo_50.clone();
                                                           move |arg_50: ()|
                                                               clo_50()
                                                       })
                                        };
                                    let v1089: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1088(()) + \" \" + &v1086(()) + \" \" + &v1083(())");
                                    let v1090: string =
                                        append((append((append(string(" "),
                                                               (v1089))),
                                                       string(""))),
                                               string(""));
                                    let v1092 =
                                        {
                                            let clo_51 = Func0::from(v493);
                                            Func1::new({
                                                           let clo_51 =
                                                               clo_51.clone();
                                                           move |arg_51: ()|
                                                               clo_51()
                                                       })
                                        };
                                    let v1094: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1095: leptos::prelude::Fragment =
                                        v1079();
                                    let v1097: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1095);
                                    let v1099: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1094))),
                                                                               string(">move || { v1097 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1101:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1097 }</dt> };
                                    let v1103: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1101);
                                    let v1105: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1092(())");
                                    let v1106: leptos::prelude::Fragment =
                                        v1080();
                                    let v1108: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1106);
                                    let v1110: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1105))),
                                                                               string(">move || { v1108 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1112:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1092(())>move || { v1108 }</dd> };
                                    let v1114: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1112);
                                    let v1121: string =
                                        string("vec![v1103, v1114]");
                                    let v1122: Vec<leptos::prelude::AnyView> =
                                        vec![v1103, v1114];
                                    let v1124: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1122);
                                    let v1126: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1124);
                                    let v1128: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1090))),
                                                                               string(">move || { v1126 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1130:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1088(()) + " " + &v1086(()) + " " + &v1083(())>move || { v1126 }</dl> };
                                    let v1132: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1130);
                                    let v1193: leptos::prelude::AnyView =
                                        if (get_Count(v410.clone()) as u64) ==
                                               0_u64 {
                                            let v1135: string =
                                                string("vec![]");
                                            let v1136:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![];
                                            leptos::prelude::IntoAny::into_any(v1136)
                                        } else {
                                            let v1139 = Dice_ui::method276();
                                            let v1140 =
                                                Dice_ui::method277(v399, v400,
                                                                   v401, v402,
                                                                   v403, v404,
                                                                   v405, v406,
                                                                   v407, v408,
                                                                   v409,
                                                                   v410);
                                            let v1143 =
                                                {
                                                    let clo_52 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure334((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_52
                                                                       =
                                                                       clo_52.clone();
                                                                   move
                                                                       |arg_52:
                                                                            ()|
                                                                       clo_52()
                                                               })
                                                };
                                            let v1146 =
                                                {
                                                    let clo_53 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure335((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_53
                                                                       =
                                                                       clo_53.clone();
                                                                   move
                                                                       |arg_53:
                                                                            ()|
                                                                       clo_53()
                                                               })
                                                };
                                            let v1148 =
                                                {
                                                    let clo_54 =
                                                        Func0::from(v488);
                                                    Func1::new({
                                                                   let clo_54
                                                                       =
                                                                       clo_54.clone();
                                                                   move
                                                                       |arg_54:
                                                                            ()|
                                                                       clo_54()
                                                               })
                                                };
                                            let v1149: string =
                                                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1148(()) + \" \" + &v1146(()) + \" \" + &v1143(())");
                                            let v1150: string =
                                                append((append((append(string(" "),
                                                                       (v1149))),
                                                               string(""))),
                                                       string(""));
                                            let v1152 =
                                                {
                                                    let clo_55 =
                                                        Func0::from(v493);
                                                    Func1::new({
                                                                   let clo_55
                                                                       =
                                                                       clo_55.clone();
                                                                   move
                                                                       |arg_55:
                                                                            ()|
                                                                       clo_55()
                                                               })
                                                };
                                            let v1154: string =
                                                string(" class=\"[font-size:12px] text-gray-400\"");
                                            let v1155:
                                                    leptos::prelude::Fragment =
                                                v1139();
                                            let v1157:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1155);
                                            let v1159: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dt "),
                                                                                               (v1154))),
                                                                                       string(">move || { v1157 }</"))),
                                                                               string("dt"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1161:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1157 }</dt> };
                                            let v1163:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1161);
                                            let v1165: string =
                                                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1152(())");
                                            let v1166:
                                                    leptos::prelude::Fragment =
                                                v1140();
                                            let v1168:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1166);
                                            let v1170: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dd "),
                                                                                               (v1165))),
                                                                                       string(">move || { v1168 }</"))),
                                                                               string("dd"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1172:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1152(())>move || { v1168 }</dd> };
                                            let v1174:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1172);
                                            let v1181: string =
                                                string("vec![v1163, v1174]");
                                            let v1182:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1163, v1174];
                                            let v1184:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v1182);
                                            let v1186:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1184);
                                            let v1188: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dl "),
                                                                                               (v1150))),
                                                                                       string(">move || { v1186 }</"))),
                                                                               string("dl"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1190:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1148(()) + " " + &v1146(()) + " " + &v1143(())>move || { v1186 }</dl> };
                                            leptos::prelude::IntoAny::into_any(v1190)
                                        };
                                    let v1233: string =
                                        string("vec![v537, v591, v645, v699, v754, v808, v862, v916, v970, v1024, v1078, v1132, v1193]");
                                    let v1234: Vec<leptos::prelude::AnyView> =
                                        vec![v537, v591, v645, v699, v754, v808, v862, v916, v970, v1024, v1078, v1132, v1193];
                                    let v1236: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1234);
                                    let v1238: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1236);
                                    let v1241: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v478))),
                                                                               string(">move || { v1238 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1243:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">move || { v1238 }</div> };
                                    let v1245: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1243);
                                    let v1252: string =
                                        string("vec![v476, v1245]");
                                    let v1253: Vec<leptos::prelude::AnyView> =
                                        vec![v476, v1245];
                                    let v1255: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1253);
                                    let v1257: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1255);
                                    let v1259: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v424))),
                                                                               string(">move || { v1257 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1261:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="flex flex-1 flex-col overflow-x-auto">move || { v1257 }</div> };
                                    let v1263: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1261);
                                    let v1265: bool =
                                        true; v1263 }).collect::<Vec<_>>();
                                let v1267: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v1269: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1267);
                                let v1273: string = string("vec![v1269]");
                                let v1274: Vec<leptos::prelude::AnyView> = vec![v1269];
                                let v1276: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1274);
                                let v1278: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1276);
                                let v1280: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v390))),
                                                    string(">move || { v1278 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1282: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">move || { v1278 }</div> };
                                leptos::prelude::IntoAny::into_any(v1282)
                            } else {
                                let v1286: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v377.clone().to_vec();
                                let v1288: bool = true;
                                let _vec_map : Vec<_> = v1286.into_iter().map(|x| { //;
                                    let patternInput_1:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v1292: LrcPtr<Dice_ui::Heap5> =
                                        patternInput_1.2.clone();
                                    let v1295: bool =
                                        true; leptos::logging::log!("{}", string("transaction.tr_render (1)"));
                                    let v1298: string =
                                        string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                    let v1300: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1309: &str =
                                        &*patternInput_1.0.clone();
                                    let v1345: std::string::String =
                                        String::from(v1309);
                                    let v1374: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1345));
                                    let v1378: string = string("vec![v1374]");
                                    let v1379: Vec<leptos::prelude::AnyView> =
                                        vec![v1374];
                                    let v1381: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1379);
                                    let v1383: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1381);
                                    let v1386: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1300))),
                                                                               string(">move || { v1383 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1388:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1383 }</td> };
                                    let v1390: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1388);
                                    let v1392: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1402: i64 =
                                        (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v1292.l5.clone()))))
                                            / 1000_i64;
                                    let v1404:
                                            Option<chrono::DateTime<chrono::Utc>> =
                                        chrono::DateTime::from_timestamp_micros(v1402);
                                    let v1429: Dice_ui::US68 =
                                        defaultValue(Dice_ui::US68::US68_1,
                                                     map(Dice_ui::method205(),
                                                         v1404));
                                    let v1448: Dice_ui::US31 =
                                        match &v1429 {
                                            Dice_ui::US68::US68_0(v1429_0_0)
                                            => {
                                                let v1435:
                                                        chrono::NaiveDateTime =
                                                    match &v1429 {
                                                        Dice_ui::US68::US68_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone().naive_utc();
                                                let v1437:
                                                        chrono::DateTime<chrono::Local> =
                                                    chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v1435);
                                                let v1439: string =
                                                    string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                                let v1440: &str =
                                                    r#"%Y-%m-%d %H:%M:%S"#;
                                                let v1442:
                                                        std::string::String =
                                                    v1437.format(v1440).to_string();
                                                Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v1442))
                                            }
                                            _ => Dice_ui::US31::US31_1,
                                        };
                                    let v1454: Dice_ui::US69 =
                                        match &v1448 {
                                            Dice_ui::US31::US31_0(v1448_0_0)
                                            =>
                                            Dice_ui::US69::US69_0(match &v1448
                                                                      {
                                                                      Dice_ui::US31::US31_0(x)
                                                                      =>
                                                                      x.clone(),
                                                                      _ =>
                                                                      unreachable!(),
                                                                  }.clone()),
                                            _ =>
                                            Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                        };
                                    let v1459: string =
                                        match &v1454 {
                                            Dice_ui::US69::US69_0(v1454_0_0)
                                            => v1454_0_0.clone(),
                                            Dice_ui::US69::US69_1(v1454_1_0)
                                            =>
                                            append((append(string("sm\'.to_string result / Error: "),
                                                           (v1454_1_0.clone()))),
                                                   string("")),
                                        };
                                    let v1468: &str = &*v1459;
                                    let v1504: std::string::String =
                                        String::from(v1468);
                                    let v1533: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1504));
                                    let v1537: string = string("vec![v1533]");
                                    let v1538: Vec<leptos::prelude::AnyView> =
                                        vec![v1533];
                                    let v1540: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1538);
                                    let v1542: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1540);
                                    let v1544: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1392))),
                                                                               string(">move || { v1542 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1546:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1542 }</td> };
                                    let v1548: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1546);
                                    let v1550: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1553: string =
                                        fable_library_rust::String_::fromString(v1292.l1.clone());
                                    let v1562: &str = &*v1553;
                                    let v1598: std::string::String =
                                        String::from(v1562);
                                    let v1627: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1598));
                                    let v1631: string = string("vec![v1627]");
                                    let v1632: Vec<leptos::prelude::AnyView> =
                                        vec![v1627];
                                    let v1634: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1632);
                                    let v1636: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1634);
                                    let v1638: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1550))),
                                                                               string(">move || { v1636 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1640:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1636 }</td> };
                                    let v1642: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1640);
                                    let v1644: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1647: string =
                                        fable_library_rust::String_::fromString(v1292.l2.clone());
                                    let v1656: &str = &*v1647;
                                    let v1692: std::string::String =
                                        String::from(v1656);
                                    let v1721: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1692));
                                    let v1725: string = string("vec![v1721]");
                                    let v1726: Vec<leptos::prelude::AnyView> =
                                        vec![v1721];
                                    let v1728: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1726);
                                    let v1730: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1728);
                                    let v1732: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1644))),
                                                                               string(">move || { v1730 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1734:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1730 }</td> };
                                    let v1736: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1734);
                                    let v1738: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1741:
                                            Vec<(std::string::String,
                                                 Option<std::string::String>)> =
                                        v1292.l7.clone().to_vec();
                                    let v1743: bool =
                                        true; let _vec_map : Vec<_> = v1741.into_iter().map(|x| { //;
                                    let patternInput_2:
                                            (std::string::String,
                                             Option<std::string::String>) = x;
                                    let v1747 =
                                        Dice_ui::method258(patternInput_2.0.clone());
                                    let v1748 =
                                        Dice_ui::method259(patternInput_2.1.clone());
                                    let v1751 =
                                        {
                                            let clo_56 =
                                                Func0::new(move ||
                                                               Dice_ui::closure295((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_56 =
                                                               clo_56.clone();
                                                           move |arg_56: ()|
                                                               clo_56()
                                                       })
                                        };
                                    let v1754 =
                                        {
                                            let clo_57 =
                                                Func0::new(move ||
                                                               Dice_ui::closure296((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_57 =
                                                               clo_57.clone();
                                                           move |arg_57: ()|
                                                               clo_57()
                                                       })
                                        };
                                    let v1757 =
                                        {
                                            let clo_58 =
                                                Func0::new(move ||
                                                               Dice_ui::closure297((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_58 =
                                                               clo_58.clone();
                                                           move |arg_58: ()|
                                                               clo_58()
                                                       })
                                        };
                                    let v1758: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1757(()) + \" \" + &v1754(()) + \" \" + &v1751(())");
                                    let v1759: string =
                                        append((append((append(string(" "),
                                                               (v1758))),
                                                       string(""))),
                                               string(""));
                                    let v1762 =
                                        {
                                            let clo_59 =
                                                Func0::new(move ||
                                                               Dice_ui::closure298((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_59 =
                                                               clo_59.clone();
                                                           move |arg_59: ()|
                                                               clo_59()
                                                       })
                                        };
                                    let v1764: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1765: leptos::prelude::Fragment =
                                        v1747();
                                    let v1767: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1765);
                                    let v1770: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1764))),
                                                                               string(">move || { v1767 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1772:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1767 }</dt> };
                                    let v1774: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1772);
                                    let v1776: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1762(())");
                                    let v1777: leptos::prelude::Fragment =
                                        v1748();
                                    let v1779: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1777);
                                    let v1782: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1776))),
                                                                               string(">move || { v1779 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1784:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1762(())>move || { v1779 }</dd> };
                                    let v1786: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1784);
                                    let v1794: string =
                                        string("vec![v1774, v1786]");
                                    let v1795: Vec<leptos::prelude::AnyView> =
                                        vec![v1774, v1786];
                                    let v1797: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1795);
                                    let v1799: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1797);
                                    let v1802: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1759))),
                                                                               string(">move || { v1799 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1804:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1757(()) + " " + &v1754(()) + " " + &v1751(())>move || { v1799 }</dl> };
                                    let v1806: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1804);
                                    let v1808: bool =
                                        true; v1806 }).collect::<Vec<_>>();
                                    let v1810: Vec<leptos::prelude::AnyView> =
                                        _vec_map;
                                    let v1812: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1810);
                                    let v1816: string = string("vec![v1812]");
                                    let v1817: Vec<leptos::prelude::AnyView> =
                                        vec![v1812];
                                    let v1819: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1817);
                                    let v1821: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1819);
                                    let v1823: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1738))),
                                                                               string(">move || { v1821 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1825:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1821 }</td> };
                                    let v1827: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1825);
                                    let v1829: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1833: string = toString(v1292.l8);
                                    let v1844: &str = &*v1833;
                                    let v1880: std::string::String =
                                        String::from(v1844);
                                    let v1909: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1880));
                                    let v1913: string = string("vec![v1909]");
                                    let v1914: Vec<leptos::prelude::AnyView> =
                                        vec![v1909];
                                    let v1916: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1914);
                                    let v1918: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1916);
                                    let v1920: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1829))),
                                                                               string(">move || { v1918 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1922:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1918 }</td> };
                                    let v1924: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1922);
                                    let v1926: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1930: string = toString(v1292.l10);
                                    let v1941: &str = &*v1930;
                                    let v1977: std::string::String =
                                        String::from(v1941);
                                    let v2006: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1977));
                                    let v2010: string = string("vec![v2006]");
                                    let v2011: Vec<leptos::prelude::AnyView> =
                                        vec![v2006];
                                    let v2013: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2011);
                                    let v2015: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2013);
                                    let v2017: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1926))),
                                                                               string(">move || { v2015 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2019:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2015 }</td> };
                                    let v2021: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2019);
                                    let v2023: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2027: string = toString(v1292.l6);
                                    let v2038: &str = &*v2027;
                                    let v2074: std::string::String =
                                        String::from(v2038);
                                    let v2103: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2074));
                                    let v2107: string = string("vec![v2103]");
                                    let v2108: Vec<leptos::prelude::AnyView> =
                                        vec![v2103];
                                    let v2110: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2108);
                                    let v2112: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2110);
                                    let v2114: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2023))),
                                                                               string(">move || { v2112 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2116:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2112 }</td> };
                                    let v2118: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2116);
                                    let v2120: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
                                    let v2345: leptos::prelude::Fragment =
                                        if (get_Count(v1292.l11.clone()) as
                                                u64) == 0_u64 {
                                            let v2132: &str = &*string("");
                                            let v2168: std::string::String =
                                                String::from(v2132);
                                            let v2197:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2168));
                                            let v2201: string =
                                                string("vec![v2197]");
                                            let v2202:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2197];
                                            leptos::prelude::Fragment::new(v2202)
                                        } else {
                                            let v2207:
                                                    Vec<std::string::String> =
                                                v1292.l11.clone().to_vec();
                                            let v2210: bool =
                                                true; let _func1_from_v2208 = Func1::from(move |value| { //;
                                            let v2212: std::string::String =
                                                value;
                                            let v2214: string =
                                                fable_library_rust::String_::fromString(v2212);
                                            let v2217: bool = true; v2214 /*;
                                            let v2219: bool = */ }); //;
                                            let v2221:
                                                    Func1<std::string::String, string> =
                                                _func1_from_v2208;
                                            let v2224: Vec<string> =
                                                v2207.into_iter().map(|x| Func1::new({
                                                                                         let v2221
                                                                                             =
                                                                                             v2221.clone();
                                                                                         move
                                                                                             |v:
                                                                                                  std::string::String|
                                                                                             Dice_ui::closure332(v2221.clone(),
                                                                                                                 v)
                                                                                     })(x.clone())).collect::<Vec<_>>();
                                            let v2228:
                                                    LrcPtr<dyn IEnumerable_1<string>> =
                                                ofArray(fable_library_rust::NativeArray_::array_from(v2224.clone()));
                                            let v2242: string =
                                                replace(join(Dice_ui::method279(),
                                                             toArray(v2228)),
                                                        string("\\n"),
                                                        string("\n"));
                                            let v2245 =
                                                {
                                                    let clo_60 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure336((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_60
                                                                       =
                                                                       clo_60.clone();
                                                                   move
                                                                       |arg_60:
                                                                            ()|
                                                                       clo_60()
                                                               })
                                                };
                                            let v2246: string =
                                                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v2245(())");
                                            let v2247: string =
                                                append((append((append(string(" "),
                                                                       (v2246))),
                                                               string(""))),
                                                       string(""));
                                            let v2256: &str = &*v2242;
                                            let v2292: std::string::String =
                                                String::from(v2256);
                                            let v2321:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2292));
                                            let v2325: string =
                                                string("vec![v2321]");
                                            let v2326:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2321];
                                            let v2328:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v2326);
                                            let v2330:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v2328);
                                            let v2333: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<pre "),
                                                                                               (v2247))),
                                                                                       string(">move || { v2330 }</"))),
                                                                               string("pre"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v2335:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> =
                                                leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v2245(())>move || { v2330 }</pre> };
                                            let v2337:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v2335);
                                            let v2341: string =
                                                string("vec![v2337]");
                                            let v2342:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2337];
                                            leptos::prelude::Fragment::new(v2342)
                                        };
                                    let v2347: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2345);
                                    let v2349: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2120))),
                                                                               string(">move || { v2347 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2351:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">move || { v2347 }</td> };
                                    let v2353: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2351);
                                    let v2355: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2359: string = ofBoolean(v1292.l9);
                                    let v2370: &str = &*v2359;
                                    let v2406: std::string::String =
                                        String::from(v2370);
                                    let v2435: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2406));
                                    let v2439: string = string("vec![v2435]");
                                    let v2440: Vec<leptos::prelude::AnyView> =
                                        vec![v2435];
                                    let v2442: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2440);
                                    let v2444: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2442);
                                    let v2446: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2355))),
                                                                               string(">move || { v2444 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2448:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2444 }</td> };
                                    let v2450: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2448);
                                    let v2452: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2455: string =
                                        fable_library_rust::String_::fromString(v1292.l3.clone());
                                    let v2464: &str = &*v2455;
                                    let v2500: std::string::String =
                                        String::from(v2464);
                                    let v2529: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2500));
                                    let v2533: string = string("vec![v2529]");
                                    let v2534: Vec<leptos::prelude::AnyView> =
                                        vec![v2529];
                                    let v2536: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2534);
                                    let v2538: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2536);
                                    let v2540: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2452))),
                                                                               string(">move || { v2538 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2542:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2538 }</td> };
                                    let v2544: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2542);
                                    let v2546: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2549: string =
                                        fable_library_rust::String_::fromString(v1292.l4.clone());
                                    let v2558: &str = &*v2549;
                                    let v2594: std::string::String =
                                        String::from(v2558);
                                    let v2623: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2594));
                                    let v2627: string = string("vec![v2623]");
                                    let v2628: Vec<leptos::prelude::AnyView> =
                                        vec![v2623];
                                    let v2630: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2628);
                                    let v2632: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2630);
                                    let v2634: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2546))),
                                                                               string(">move || { v2632 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2636:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2632 }</td> };
                                    let v2638: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2636);
                                    let v2640: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2643: string =
                                        fable_library_rust::String_::fromString(v1292.l0.clone());
                                    let v2652: &str = &*v2643;
                                    let v2688: std::string::String =
                                        String::from(v2652);
                                    let v2717: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2688));
                                    let v2721: string = string("vec![v2717]");
                                    let v2722: Vec<leptos::prelude::AnyView> =
                                        vec![v2717];
                                    let v2724: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2722);
                                    let v2726: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2724);
                                    let v2728: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2640))),
                                                                               string(">move || { v2726 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2730:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2726 }</td> };
                                    let v2732: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2730);
                                    let v2772: string =
                                        string("vec![v1390, v1548, v1642, v1736, v1827, v1924, v2021, v2118, v2353, v2450, v2544, v2638, v2732]");
                                    let v2773: Vec<leptos::prelude::AnyView> =
                                        vec![v1390, v1548, v1642, v1736, v1827, v1924, v2021, v2118, v2353, v2450, v2544, v2638, v2732];
                                    let v2775: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2773);
                                    let v2777: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2775);
                                    let v2780: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<tr "),
                                                                                       (v1298))),
                                                                               string(">move || { v2777 }</"))),
                                                                       string("tr"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2782:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                        leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v2777 }</tr> };
                                    let v2784: bool =
                                        true; v2782 }).collect::<Vec<_>>();
                                let v2786: Vec<
                                    leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                    >,
                                > = _vec_map;
                                let v2788: bool = true;
                                let _vec_map: Vec<_> = v2786
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v2790: leptos::prelude::View<
                                            leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                        > = x;
                                        let v2792: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(v2790);
                                        let v2794: bool = true;
                                        v2792
                                    })
                                    .collect::<Vec<_>>();
                                let v2796: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v2798: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2796);
                                let v2802: string = string("vec![v2798]");
                                let v2803: Vec<leptos::prelude::AnyView> = vec![v2798];
                                let v2805: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2803);
                                let v2808: bool = true;
                                leptos::logging::log!(
                                    "{}",
                                    string("transaction.tr_head_render (1)")
                                );
                                let v2810: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v2820: &str = &*string("Account");
                                let v2856: std::string::String = String::from(v2820);
                                let v2885: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2856),
                                    );
                                let v2889: string = string("vec![v2885]");
                                let v2890: Vec<leptos::prelude::AnyView> = vec![v2885];
                                let v2892: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2890);
                                let v2894: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2892);
                                let v2897: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2810))),
                                                    string(">move || { v2894 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2899: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2894 }</th> };
                                let v2901: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2899);
                                let v2903: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v2913: &str = &*string("Block Timestamp");
                                let v2949: std::string::String = String::from(v2913);
                                let v2978: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2949),
                                    );
                                let v2982: string = string("vec![v2978]");
                                let v2983: Vec<leptos::prelude::AnyView> = vec![v2978];
                                let v2985: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2983);
                                let v2987: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2985);
                                let v2989: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2903))),
                                                    string(">move || { v2987 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2991: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2987 }</th> };
                                let v2993: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2991);
                                let v2995: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3005: &str = &*string("Predecessor");
                                let v3041: std::string::String = String::from(v3005);
                                let v3070: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3041),
                                    );
                                let v3074: string = string("vec![v3070]");
                                let v3075: Vec<leptos::prelude::AnyView> = vec![v3070];
                                let v3077: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3075);
                                let v3079: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3077);
                                let v3081: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2995))),
                                                    string(">move || { v3079 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3083: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3079 }</th> };
                                let v3085: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3083);
                                let v3087: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3097: &str = &*string("Receiver");
                                let v3133: std::string::String = String::from(v3097);
                                let v3162: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3133),
                                    );
                                let v3166: string = string("vec![v3162]");
                                let v3167: Vec<leptos::prelude::AnyView> = vec![v3162];
                                let v3169: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3167);
                                let v3171: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3169);
                                let v3173: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3087))),
                                                    string(">move || { v3171 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3175: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3171 }</th> };
                                let v3177: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3175);
                                let v3179: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3189: &str = &*string("Action");
                                let v3225: std::string::String = String::from(v3189);
                                let v3254: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3225),
                                    );
                                let v3258: string = string("vec![v3254]");
                                let v3259: Vec<leptos::prelude::AnyView> = vec![v3254];
                                let v3261: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3259);
                                let v3263: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3261);
                                let v3265: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3179))),
                                                    string(">move || { v3263 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3267: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3263 }</th> };
                                let v3269: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3267);
                                let v3271: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3281: &str = &*string("Deposit");
                                let v3317: std::string::String = String::from(v3281);
                                let v3346: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3317),
                                    );
                                let v3350: string = string("vec![v3346]");
                                let v3351: Vec<leptos::prelude::AnyView> = vec![v3346];
                                let v3353: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3351);
                                let v3355: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3353);
                                let v3357: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3271))),
                                                    string(">move || { v3355 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3359: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3355 }</th> };
                                let v3361: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3359);
                                let v3363: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3373: &str = &*string("Fee");
                                let v3409: std::string::String = String::from(v3373);
                                let v3438: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3409),
                                    );
                                let v3442: string = string("vec![v3438]");
                                let v3443: Vec<leptos::prelude::AnyView> = vec![v3438];
                                let v3445: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3443);
                                let v3447: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3445);
                                let v3449: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3363))),
                                                    string(">move || { v3447 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3451: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3447 }</th> };
                                let v3453: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3451);
                                let v3455: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3465: &str = &*string("Block Height");
                                let v3501: std::string::String = String::from(v3465);
                                let v3530: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3501),
                                    );
                                let v3534: string = string("vec![v3530]");
                                let v3535: Vec<leptos::prelude::AnyView> = vec![v3530];
                                let v3537: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3535);
                                let v3539: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3537);
                                let v3541: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3455))),
                                                    string(">move || { v3539 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3543: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3539 }</th> };
                                let v3545: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3543);
                                let v3547: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3552: string = if false == (Dice_ui::method280(v377, 0_i32)) {
                                    string("")
                                } else {
                                    string("Logs")
                                };
                                let v3561: &str = &*v3552;
                                let v3597: std::string::String = String::from(v3561);
                                let v3626: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3597),
                                    );
                                let v3630: string = string("vec![v3626]");
                                let v3631: Vec<leptos::prelude::AnyView> = vec![v3626];
                                let v3633: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3631);
                                let v3635: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3633);
                                let v3637: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3547))),
                                                    string(">move || { v3635 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3639: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3635 }</th> };
                                let v3641: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3639);
                                let v3643: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3653: &str = &*string("Outcome Status");
                                let v3689: std::string::String = String::from(v3653);
                                let v3718: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3689),
                                    );
                                let v3722: string = string("vec![v3718]");
                                let v3723: Vec<leptos::prelude::AnyView> = vec![v3718];
                                let v3725: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3723);
                                let v3727: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3725);
                                let v3729: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3643))),
                                                    string(">move || { v3727 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3731: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3727 }</th> };
                                let v3733: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3731);
                                let v3735: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3745: &str = &*string("Hash");
                                let v3781: std::string::String = String::from(v3745);
                                let v3810: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3781),
                                    );
                                let v3814: string = string("vec![v3810]");
                                let v3815: Vec<leptos::prelude::AnyView> = vec![v3810];
                                let v3817: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3815);
                                let v3819: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3817);
                                let v3821: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3735))),
                                                    string(">move || { v3819 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3823: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3819 }</th> };
                                let v3825: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3823);
                                let v3827: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3837: &str = &*string("Block Hash");
                                let v3873: std::string::String = String::from(v3837);
                                let v3902: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3873),
                                    );
                                let v3906: string = string("vec![v3902]");
                                let v3907: Vec<leptos::prelude::AnyView> = vec![v3902];
                                let v3909: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3907);
                                let v3911: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3909);
                                let v3913: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3827))),
                                                    string(">move || { v3911 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3915: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3911 }</th> };
                                let v3917: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3915);
                                let v3919: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3929: &str = &*string("Receipt ID");
                                let v3965: std::string::String = String::from(v3929);
                                let v3994: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3965),
                                    );
                                let v3998: string = string("vec![v3994]");
                                let v3999: Vec<leptos::prelude::AnyView> = vec![v3994];
                                let v4001: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3999);
                                let v4003: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v4001);
                                let v4005: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3919))),
                                                    string(">move || { v4003 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v4007: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v4003 }</th> };
                                let v4009: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v4007);
                                let v4049: string = string(
                                    "vec![v2901, v2993, v3085, v3177, v3269, v3361, v3453, v3545, v3641, v3733, v3825, v3917, v4009]",
                                );
                                let v4050: Vec<leptos::prelude::AnyView> = vec![
                                    v2901, v2993, v3085, v3177, v3269, v3361, v3453, v3545, v3641,
                                    v3733, v3825, v3917, v4009,
                                ];
                                let v4052: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v4050);
                                let v4054: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v4052);
                                let v4056: string = string(
                                    "leptos::prelude::view! { <tr >move || { v4054 }</tr> }",
                                );
                                let v4058: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                > = leptos::prelude::view! { <tr >move || { v4054 }</tr> };
                                let v4060: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v4058);
                                let v4064: string = string("vec![v4060]");
                                let v4065: Vec<leptos::prelude::AnyView> = vec![v4060];
                                let v4067: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v4065);
                                let v4069: string = string(
                                    " class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"",
                                );
                                let v4071: string =
                                    string(" class=\"ltr:text-left rtl:text-right\"");
                                let v4073: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v4067);
                                let v4076: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<thead "), (v4071))),
                                                    string(">move || { v4073 }</"),
                                                )),
                                                string("thead"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v4078: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                                > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v4073 }</thead> };
                                let v4080: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v4078);
                                let v4082: string = string(
                                    " class=\"divide-y divide-gray-200 dark:divide-gray-700\"",
                                );
                                let v4084: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2805);
                                let v4087: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<tbody "), (v4082))),
                                                    string(">move || { v4084 }</"),
                                                )),
                                                string("tbody"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v4089: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                                > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v4084 }</tbody> };
                                let v4091: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v4089);
                                let v4098: string = string("vec![v4080, v4091]");
                                let v4099: Vec<leptos::prelude::AnyView> = vec![v4080, v4091];
                                let v4101: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v4099);
                                let v4103: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v4101);
                                let v4106: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<table "), (v4069))),
                                                    string(">move || { v4103 }</"),
                                                )),
                                                string("table"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v4108: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v4103 }</table> };
                                leptos::prelude::IntoAny::into_any(v4108)
                            }
                        } else {
                            let v4114: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v4116: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v4119 = {
                                let clo_61 = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo_61 = clo_61.clone();
                                    move |arg_61: ()| clo_61()
                                })
                            };
                            let v4137: string = string(
                                " class=move || \" \".to_owned() + &v4119(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"",
                            );
                            let v4149: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                            );
                            let v4161: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v4162: string = string("vec![]");
                            let v4163: Vec<leptos::prelude::AnyView> = vec![];
                            let v4165: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4163);
                            let v4167: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4165);
                            let v4170: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4161))),
                                                string(">move || { v4167 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4172: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4167 }</animate> };
                            let v4174: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4172);
                            let v4186: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                            );
                            let v4187: string = string("vec![]");
                            let v4188: Vec<leptos::prelude::AnyView> = vec![];
                            let v4190: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4188);
                            let v4192: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4190);
                            let v4194: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4186))),
                                                string(">move || { v4192 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4196: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v4192 }</animate> };
                            let v4198: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4196);
                            let v4210: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v4211: string = string("vec![]");
                            let v4212: Vec<leptos::prelude::AnyView> = vec![];
                            let v4214: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4212);
                            let v4216: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4214);
                            let v4218: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4210))),
                                                string(">move || { v4216 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4220: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4216 }</animate> };
                            let v4222: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4220);
                            let v4233: string = string("vec![v4174, v4198, v4222]");
                            let v4234: Vec<leptos::prelude::AnyView> = vec![v4174, v4198, v4222];
                            let v4236: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4234);
                            let v4238: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4236);
                            let v4241: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4149))),
                                                string(">move || { v4238 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4243: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v4238 }</rect> };
                            let v4255: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                            );
                            let v4267: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v4268: string = string("vec![]");
                            let v4269: Vec<leptos::prelude::AnyView> = vec![];
                            let v4271: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4269);
                            let v4273: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4271);
                            let v4275: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4267))),
                                                string(">move || { v4273 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4277: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4273 }</animate> };
                            let v4279: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4277);
                            let v4291: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v4292: string = string("vec![]");
                            let v4293: Vec<leptos::prelude::AnyView> = vec![];
                            let v4295: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4293);
                            let v4297: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4295);
                            let v4299: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4291))),
                                                string(">move || { v4297 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4301: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v4297 }</animate> };
                            let v4303: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4301);
                            let v4315: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v4316: string = string("vec![]");
                            let v4317: Vec<leptos::prelude::AnyView> = vec![];
                            let v4319: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4317);
                            let v4321: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4319);
                            let v4323: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4315))),
                                                string(">move || { v4321 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4325: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4321 }</animate> };
                            let v4327: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4325);
                            let v4337: string = string("vec![v4279, v4303, v4327]");
                            let v4338: Vec<leptos::prelude::AnyView> = vec![v4279, v4303, v4327];
                            let v4340: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4338);
                            let v4342: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4340);
                            let v4344: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4255))),
                                                string(">move || { v4342 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4346: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v4342 }</rect> };
                            let v4358: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                            );
                            let v4370: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v4371: string = string("vec![]");
                            let v4372: Vec<leptos::prelude::AnyView> = vec![];
                            let v4374: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4372);
                            let v4376: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4374);
                            let v4378: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4370))),
                                                string(">move || { v4376 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4380: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4376 }</animate> };
                            let v4382: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4380);
                            let v4394: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                            );
                            let v4395: string = string("vec![]");
                            let v4396: Vec<leptos::prelude::AnyView> = vec![];
                            let v4398: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4396);
                            let v4400: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4398);
                            let v4402: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4394))),
                                                string(">move || { v4400 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4404: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v4400 }</animate> };
                            let v4406: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4404);
                            let v4418: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v4419: string = string("vec![]");
                            let v4420: Vec<leptos::prelude::AnyView> = vec![];
                            let v4422: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4420);
                            let v4424: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4422);
                            let v4426: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4418))),
                                                string(">move || { v4424 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4428: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4424 }</animate> };
                            let v4430: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4428);
                            let v4440: string = string("vec![v4382, v4406, v4430]");
                            let v4441: Vec<leptos::prelude::AnyView> = vec![v4382, v4406, v4430];
                            let v4443: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4441);
                            let v4445: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4443);
                            let v4447: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4358))),
                                                string(">move || { v4445 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4449: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v4445 }</rect> };
                            let v4451: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4449);
                            let v4453: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4346);
                            let v4455: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4243);
                            let v4465: string = string("vec![v4455, v4453, v4451]");
                            let v4466: Vec<leptos::prelude::AnyView> = vec![v4455, v4453, v4451];
                            let v4468: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4466);
                            let v4470: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4468);
                            let v4473: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v4137))),
                                                string(">move || { v4470 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4475: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4119(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v4470 }</svg> };
                            let v4477: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4475);
                            let v4487: &str = &*string("Loading...");
                            let v4523: std::string::String = String::from(v4487);
                            let v4552: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v4523),
                                );
                            let v4559: string = string("vec![v4477, v4552]");
                            let v4560: Vec<leptos::prelude::AnyView> = vec![v4477, v4552];
                            let v4562: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4560);
                            let v4564: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4562);
                            let v4567: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4116))),
                                                string(">move || { v4564 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4569: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v4564 }</div> };
                            let v4571: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4569);
                            let v4575: string = string("vec![v4571]");
                            let v4576: Vec<leptos::prelude::AnyView> = vec![v4571];
                            let v4578: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4576);
                            let v4580: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4578);
                            let v4582: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4114))),
                                                string(">move || { v4580 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4584: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v4580 }</div> };
                            leptos::prelude::IntoAny::into_any(v4584)
                        }
                    }
                    Dice_ui::US46::US46_1(v375_1_0) => {
                        let v4590: string =
                            fable_library_rust::String_::fromString(v375_1_0.clone());
                        let v4593: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v4595: string = string(" class=\"[height:17px]\"");
                        let v4609: string = string(
                            " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v4615: string = string(
                            " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                        );
                        let v4616: string = string("vec![]");
                        let v4617: Vec<leptos::prelude::AnyView> = vec![];
                        let v4619: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4617);
                        let v4621: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4619);
                        let v4624: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4615))),
                                            string(">move || { v4621 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4626: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v4621 }</path> };
                        let v4628: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4626);
                        let v4632: string = string("vec![v4628]");
                        let v4633: Vec<leptos::prelude::AnyView> = vec![v4628];
                        let v4635: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4633);
                        let v4637: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4635);
                        let v4640: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4609))),
                                            string(">move || { v4637 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4642: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4637 }</svg> };
                        let v4644: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4642);
                        let v4648: string = string("vec![v4644]");
                        let v4649: Vec<leptos::prelude::AnyView> = vec![v4644];
                        let v4651: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4649);
                        let v4653: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4651);
                        let v4656: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4595))),
                                            string(">move || { v4653 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4658: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v4653 }</span> };
                        let v4660: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4658);
                        let v4662: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v4671: &str = &*v4590;
                        let v4707: std::string::String = String::from(v4671);
                        let v4736: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v4707),
                        );
                        let v4740: string = string("vec![v4736]");
                        let v4741: Vec<leptos::prelude::AnyView> = vec![v4736];
                        let v4743: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4741);
                        let v4745: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4743);
                        let v4748: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v4662))),
                                            string(">move || { v4745 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4750: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v4745 }</pre> };
                        let v4752: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4750);
                        let v4760: string = string("vec![v4660, v4752]");
                        let v4761: Vec<leptos::prelude::AnyView> = vec![v4660, v4752];
                        let v4763: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4761);
                        let v4765: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4763);
                        let v4768: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4593))),
                                            string(">move || { v4765 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4770: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v4765 }</div> };
                        leptos::prelude::IntoAny::into_any(v4770)
                    }
                }
            };
            let v4784: string = string("vec![v144, v4775]");
            let v4785: Vec<leptos::prelude::AnyView> = vec![v144, v4775];
            leptos::prelude::Fragment::new(v4785)
        }
        pub fn closure337(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure338(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure339(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method282() -> Func0<string> {
            Func0::new(move || Dice_ui::closure339((), ()))
        }
        pub fn closure341(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Transactions");
            let v45: std::string::String = String::from(v9);
            let v74: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v45));
            let v79: string = string("vec![v74]");
            let v80: Vec<leptos::prelude::AnyView> = vec![v74];
            leptos::prelude::Fragment::new(v80)
        }
        pub fn method283() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure341((), ()))
        }
        pub fn closure343(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure342(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v13: std::string::String = format!("{:#?}", v2);
            let v15: string = fable_library_rust::String_::fromString(v13);
            let v47 = {
                let clo = Func0::new(move || Dice_ui::closure343((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v48: string = string(
                "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v47(())",
            );
            let v50: string = append(
                (append((append(string(" "), (v48))), string(""))),
                string(""),
            );
            let v59: &str = &*v15;
            let v95: std::string::String = String::from(v59);
            let v124: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v95));
            let v128: string = string("vec![v124]");
            let v129: Vec<leptos::prelude::AnyView> = vec![v124];
            let v131: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v129);
            let v133: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v131);
            let v136: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v50))),
                                string(">move || { v133 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v138: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v47(())>move || { v133 }</pre> };
            let v140: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v138);
            let v144: string = string("vec![v140]");
            let v145: Vec<leptos::prelude::AnyView> = vec![v140];
            leptos::prelude::Fragment::new(v145)
        }
        pub fn method284(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure342(v0_1.clone(), ())
            })
        }
        pub fn closure340(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method283();
            let v2 = Dice_ui::method284(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())",
            );
            let v14: string = append(
                (append((append(string(" "), (v12))), string(""))),
                string(""),
            );
            let v17 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v19: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v20: leptos::prelude::Fragment = v1();
            let v22: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v20);
            let v25: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v19))),
                                string(">move || { v22 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v22 }</dt> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v31: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())",
            );
            let v32: leptos::prelude::Fragment = v2();
            let v34: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v32);
            let v37: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v31))),
                                string(">move || { v34 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v39: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v17(())>move || { v34 }</dd> };
            let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
            let v49: string = string("vec![v29, v41]");
            let v50: Vec<leptos::prelude::AnyView> = vec![v29, v41];
            let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
            let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
            let v57: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v14))),
                                string(">move || { v54 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v59: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v54 }</dl> };
            let v61: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v59);
            let v65: string = string("vec![v61]");
            let v66: Vec<leptos::prelude::AnyView> = vec![v61];
            leptos::prelude::Fragment::new(v66)
        }
        pub fn closure344(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method285(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure344(v0_1.clone(), ())
            })
        }
        pub fn closure345(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method286(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure345(v0_1.clone(), ())
            })
        }
        pub fn closure346(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method287(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure346(v0_1.clone(), ())
            })
        }
        pub fn closure347(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method288(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure347(v0_1.clone(), ())
            })
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure349(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("settings"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure350(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure351(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string = string(
                    "r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#",
                );
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure352(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("transactions"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure353(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure354(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string = string(
                    "r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#",
                );
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure355(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("lists"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure356(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure357(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string = string(
                    "r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#",
                );
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure358(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("dice"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure359(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure360(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v7: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v10: string = string(
                    "r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#",
                );
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure5(
            unitVar: (),
            v0_1: i32,
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> {
            let v1: string = append(
                (append(string("home.render () / router: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v13: bool = true;
            let _func0_from_v11 = Func0::from(move || {
                //;
                let v15: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v17: bool = */
                    async move {
                        /*;
                        let v19: bool = */
                        ();
                        let v22: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v25: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v27: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v29: bool = */
                            async {
                                /*;
                                let v31: bool = */
                                ();
                                let v32: string = string(
                                    "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())",
                                );
                                let v33: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<rexie::Rexie, rexie::Error>,
                                            >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v35: Result<rexie::Rexie, rexie::Error> = v33.await;
                                let v36 = Dice_ui::method6();
                                let v42: Result<rexie::Rexie, std::string::String> =
                                    v35.map_err(|x| v36(x));
                                let v54: string = string("}");
                                let v61: bool = true;
                                let _fix_closure_v56 = v42;
                                let v65: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v56 "), (v54))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v66: bool = true;
                                _fix_closure_v56
                            },
                        ); // rust.fix_closure';
                        let v68 = __future_init;
                        let v70: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                            >,
                        > = v68;
                        let v72: Result<rexie::Rexie, std::string::String> = v70.await;
                        let v78: rexie::Rexie = v72.unwrap();
                        let v89: rexie::Rexie = (Dice_ui::method7())(v78);
                        let v91: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v89);
                        let v98: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_database (3) / database new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v91.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v100: bool = true;
                        leptos::logging::log!("{}", v98);
                        let v101: string = string("}");
                        let v108: bool = true;
                        let _fix_closure_v103 = v91;
                        let v112: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v103 "), (v101))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v113: bool = true;
                        _fix_closure_v103
                    },
                ); // rust.fix_closure';
                let v115 = __future_init;
                let v117: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v115;
                let v119: bool = true;
                v117 /*;
                let v121: bool = */
            }); //;
            let v123: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v11;
            let v125: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v123().await });
            let v128: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v131: bool = true;
            let _func0_from_v129 = Func0::from(move || {
                //;
                let v133: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v125.clone()), |x| {
                        x.clone()
                    });
                let v135: bool = true;
                let _optionm_map_ = v133.map(|x| {
                    //;
                    let v137: std::sync::Arc<rexie::Rexie> = x;
                    let v140: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v137);
                    let v142: bool = true;
                    v140
                });
                let v144: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v146: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v148: bool = */
                    async move {
                        /*;
                        let v150: bool = */
                        ();
                        let v155: string = append(
                            (append(
                                string(
                                    "state_core.use_core_database (2) / core_state_heap new_local_resource / database: ",
                                ),
                                sprintf!("{:?}", v144.clone()),
                            )),
                            string(""),
                        );
                        let v157: bool = true;
                        leptos::logging::log!("{}", v155);
                        let v159: bool = true;
                        let _optionm_map_ = v144.map(|x| {
                            //;
                            let v161: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v163: std::sync::Arc<rexie::Rexie> = v161.0;
                            let v165: bool = true;
                            v163
                        });
                        let v167: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v192: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v167));
                        let v654: Dice_ui::US3 = match &v192 {
                            Dice_ui::US2::US2_0(v192_0_0) => {
                                let v198: string =
                                    string("state_core.get_data () / id: core-state-heap");
                                let v200: bool = true;
                                leptos::logging::log!("{}", v198);
                                let v202: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v204: bool = */
                                    async {
                                        /*;
                                        let v206: bool = */
                                        ();
                                        let v208: Array<string> = new_array(&[string("store")]);
                                        let v210: Vec<string> = v208.to_vec();
                                        let v213: bool = true;
                                        let _func1_from_v211 = Func1::from(move |value| {
                                            //;
                                            let v215: string = value;
                                            let v224: &str = &*v215;
                                            let v260: std::string::String = String::from(v224);
                                            let v290: bool = true;
                                            v260 /*;
                                            let v292: bool = */
                                        }); //;
                                        let v294: Func1<string, std::string::String> =
                                            _func1_from_v211;
                                        let v297: Vec<std::string::String> = v210
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v294 = v294.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v294.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v298: std::sync::Arc<rexie::Rexie> = Dice_ui::method11(
                                            match &v192 {
                                                Dice_ui::US2::US2_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v300: Result<rexie::Transaction, rexie::Error> = v298
                                            .transaction(&v297, rexie::TransactionMode::ReadOnly);
                                        let v301 = Dice_ui::method12();
                                        let v307: Result<rexie::Transaction, std::string::String> =
                                            v300.map_err(|x| v301(x));
                                        let v318: rexie::Transaction = v307?;
                                        let v319: string = Dice_ui::method13();
                                        let v328: &str = &*v319;
                                        let v357: Result<rexie::Store, rexie::Error> =
                                            v318.store(v328);
                                        let v358 = Dice_ui::method14();
                                        let v364: Result<rexie::Store, std::string::String> =
                                            v357.map_err(|x| v358(x));
                                        let v375: rexie::Store = v364?;
                                        let v376: string = Dice_ui::method15();
                                        let v385: &str = &*v376;
                                        let v414: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v385);
                                        let v416: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<
                                                            Option<wasm_bindgen::JsValue>,
                                                            rexie::Error,
                                                        >,
                                                    >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v375, v414));
                                        let v418: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v416.await;
                                        let v419 = Dice_ui::method16();
                                        let v425: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v418.map_err(|x| v419(x));
                                        let v436: Option<wasm_bindgen::JsValue> = v425?;
                                        let v461: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v436),
                                        );
                                        let v575: Dice_ui::US3 = match &v461 {
                                            Dice_ui::US4::US4_0(v461_0_0) => {
                                                let v466: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v461 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v468: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v466);
                                                let v469 = Dice_ui::method19();
                                                let v475: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v468.map_err(|x| v469(x));
                                                let v486: Option<serde_json::Value> = v475?;
                                                let v511: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v486),
                                                );
                                                match &v511 {
                                                    Dice_ui::US5::US5_0(v511_0_0) => {
                                                        let v516: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v511 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v518: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v516);
                                                        let v519 = Dice_ui::method22();
                                                        let v525: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v518.map_err(|x| v519(x));
                                                        let v536: Vec<u8> = v525?;
                                                        let v538: Array<u8> =
                                                fable_library_rust::NativeArray_::array_from(v536.clone());
                                                        let v540: string = append(
                                                            (append(
                                                                string(
                                                                    "state_core.get_data () / data_len: ",
                                                                ),
                                                                (toString(get_Count(v538.clone()))),
                                                            )),
                                                            string(""),
                                                        );
                                                        let v542: bool = true;
                                                        leptos::logging::log!("{}", v540);
                                                        let v544: Vec<u8> = v538.to_vec();
                                                        let v546: &[u8] = v544.as_slice();
                                                        let v548: bool = true;
                                                        let mut v546 = v546;
                                                        let v550: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v546,
                                                        );
                                                        let v551 = Dice_ui::method23();
                                                        let v557: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v550.map_err(|x| v551(x));
                                                        Dice_ui::US3::US3_0(v557?)
                                                    }
                                                    _ => Dice_ui::US3::US3_1,
                                                }
                                            }
                                            _ => Dice_ui::US3::US3_1,
                                        };
                                        let v586: Option<Option<LrcPtr<Dice_ui::Heap3>>> =
                                            match &v575 {
                                                Dice_ui::US3::US3_0(v575_0_0) => Some(
                                                    match &v575 {
                                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            };
                                        let v591: string = string("}");
                                        let v598: bool = true;
                                        let _fix_closure_v593 =
                                            Ok::<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >(v586);
                                        let v602: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v593 "),
                                                        (v591),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v603: bool = true;
                                        _fix_closure_v593
                                    },
                                ); // rust.fix_closure';
                                let v605 = __future_init;
                                let v607: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                > = v605;
                                let v609: Result<
                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                    std::string::String,
                                > = v607.await;
                                let v610 = Dice_ui::method24();
                                let v611 = Dice_ui::method25();
                                let v613: Dice_ui::US6 = match &v609 {
                                    Err(v609_1_0) => v611(v609_1_0.clone()),
                                    Ok(v609_0_0) => v610(v609_0_0.clone()),
                                };
                                match &v613 {
                                    Dice_ui::US6::US6_0(v613_0_0) => defaultValue(
                                        Dice_ui::US3::US3_1,
                                        map(Dice_ui::method26(), v613_0_0.clone()),
                                    ),
                                    Dice_ui::US6::US6_1(v613_1_0) => {
                                        let v646: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_core_database (3) / error: ",
                                                ),
                                                (toString(v613_1_0.clone())),
                                            )),
                                            string(""),
                                        );
                                        let v648: bool = true;
                                        leptos::logging::log!("{}", v646);
                                        Dice_ui::US3::US3_1
                                    }
                                }
                            }
                            _ => Dice_ui::US3::US3_1,
                        };
                        let v687: Dice_ui::US7 = match &v654 {
                            Dice_ui::US3::US3_0(v654_0_0) => Dice_ui::US7::US7_0(defaultValue(
                                Dice_ui::US8::US8_1,
                                map(
                                    Dice_ui::method27(),
                                    match &v654 {
                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                            )),
                            _ => Dice_ui::US7::US7_1,
                        };
                        let v694: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v687_0_0) = &v687 {
                            let v688: Dice_ui::US8 = v687_0_0.clone();
                            if let Dice_ui::US8::US8_0(v688_0_0) = &v688 {
                                Dice_ui::US8::US8_0(v688_0_0.clone())
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        } else {
                            Dice_ui::US8::US8_1
                        };
                        let v695: string = string("}");
                        let v702: bool = true;
                        let _fix_closure_v697 = v694;
                        let v706: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v697 "), (v695))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v707: bool = true;
                        _fix_closure_v697
                    },
                ); // rust.fix_closure';
                let v709 = __future_init;
                let v711: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>> = v709;
                let v713: bool = true;
                v711 /*;
                let v715: bool = */
            }); //;
            let v717: Func0<std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>>> =
                _func0_from_v129;
            let v719: leptos::prelude::ArcLocalResource<Dice_ui::US8> =
                leptos::prelude::ArcLocalResource::new(|| async move { v717().await });
            let v722: bool = true;
            let _func0_from_v720 = Func0::from(move || {
                //;
                let v725: bool = true;
                leptos::logging::log!(
                    "{}",
                    string("state_core.use_core_database (4) / effect core_state_heap / #1")
                );
                let v727: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method29(Dice_ui::method28());
                let v728 = Dice_ui::method30();
                let v729 = Dice_ui::method31();
                let v731: Dice_ui::US9 = match &v727 {
                    Err(v727_1_0) => v729(v727_1_0.clone()),
                    Ok(v727_0_0) => v728(v727_0_0.clone()),
                };
                let v767: Dice_ui::US10 = match &v731 {
                    Dice_ui::US9::US9_0(v731_0_0) => Dice_ui::US10::US10_0(defaultValue(
                        Dice_ui::US11::US11_1,
                        map(Dice_ui::method32(), v731_0_0.clone()),
                    )),
                    Dice_ui::US9::US9_1(v731_1_0) => Dice_ui::US10::US10_1(v731_1_0.clone()),
                };
                let v1406: bool = if let Dice_ui::US10::US10_0(v767_0_0) = &v767 {
                    let v768: Dice_ui::US11 = v767_0_0.clone();
                    if let Dice_ui::US11::US11_0(v768_0_0) = &v768 {
                        let v769: web_sys::Storage = v768_0_0.clone();
                        let v771: Option<Dice_ui::US8> =
                            Option::map(leptos::prelude::ArcLocalResource::get(&v719), |x| {
                                x.clone()
                            });
                        let v796: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v771));
                        let v804: string = append(
                            (append(
                                string(
                                    "state_core.use_core_database (5) / effect core_state_heap / #2 / core_state_heap: ",
                                ),
                                sprintf!("{:?}", v796.clone()),
                            )),
                            string(""),
                        );
                        let v806: bool = true;
                        leptos::logging::log!("{}", v804);
                        let v1335: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v796_0_0) = &v796 {
                            let v807: Dice_ui::US8 = v796_0_0.clone();
                            if let Dice_ui::US8::US8_0(v807_0_0) = &v807 {
                                Dice_ui::US8::US8_0(v807_0_0.clone())
                            } else {
                                let v810: web_sys::Storage = Dice_ui::method34(v769.clone());
                                let v811: string = Dice_ui::method35();
                                let v820: &str = &*v811;
                                let v849: Result<
                                    Option<std::string::String>,
                                    wasm_bindgen::JsValue,
                                > = web_sys::Storage::get_item(&v810, v820);
                                let v850 = Dice_ui::method36();
                                let v851 = Dice_ui::method37();
                                let v853: Dice_ui::US12 = match &v849 {
                                    Err(v849_1_0) => v851(v849_1_0.clone()),
                                    Ok(v849_0_0) => v850(v849_0_0.clone()),
                                };
                                let v892: Dice_ui::US13 = match &v853 {
                                    Dice_ui::US12::US12_0(v853_0_0) => {
                                        let v857: Option<std::string::String> =
                                            Dice_ui::method38(v853_0_0.clone());
                                        let v859: Option<std::string::String> =
                                            serde_json::from_value(v857.into()).unwrap();
                                        Dice_ui::US13::US13_0(defaultValue(
                                            Dice_ui::US14::US14_1,
                                            map(Dice_ui::method39(), v859),
                                        ))
                                    }
                                    Dice_ui::US12::US12_1(v853_1_0) => {
                                        Dice_ui::US13::US13_1(v853_1_0.clone())
                                    }
                                };
                                let v898: Dice_ui::US15 = match &v892 {
                                    Dice_ui::US13::US13_0(v892_0_0) => {
                                        Dice_ui::US15::US15_0(v892_0_0.clone())
                                    }
                                    _ => Dice_ui::US15::US15_1,
                                };
                                let v905: Dice_ui::US14 =
                                    if let Dice_ui::US15::US15_0(v898_0_0) = &v898 {
                                        let v899: Dice_ui::US14 = v898_0_0.clone();
                                        if let Dice_ui::US14::US14_0(v899_0_0) = &v899 {
                                            Dice_ui::US14::US14_0(v899_0_0.clone())
                                        } else {
                                            Dice_ui::US14::US14_1
                                        }
                                    } else {
                                        Dice_ui::US14::US14_1
                                    };
                                let v916: Option<std::string::String> = match &v905 {
                                    Dice_ui::US14::US14_0(v905_0_0) => Some(
                                        match &v905 {
                                            Dice_ui::US14::US14_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => None::<std::string::String>,
                                };
                                let v920: Option<Dice_ui::US8> = map(Dice_ui::method40(), v916);
                                let v1061: Dice_ui::US7 = defaultValue(
                                    Dice_ui::US7::US7_1,
                                    map(Dice_ui::method33(), v920),
                                );
                                if let Dice_ui::US7::US7_0(v1061_0_0) = &v1061 {
                                    let v1065: Dice_ui::US8 = v1061_0_0.clone();
                                    if let Dice_ui::US8::US8_0(v1065_0_0) = &v1065 {
                                        Dice_ui::US8::US8_0(v1065_0_0.clone())
                                    } else {
                                        Dice_ui::US8::US8_1
                                    }
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            }
                        } else {
                            let v1073: web_sys::Storage = Dice_ui::method34(v769);
                            let v1074: string = Dice_ui::method35();
                            let v1083: &str = &*v1074;
                            let v1112: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v1073, v1083);
                            let v1113 = Dice_ui::method36();
                            let v1114 = Dice_ui::method37();
                            let v1116: Dice_ui::US12 = match &v1112 {
                                Err(v1112_1_0) => v1114(v1112_1_0.clone()),
                                Ok(v1112_0_0) => v1113(v1112_0_0.clone()),
                            };
                            let v1155: Dice_ui::US13 = match &v1116 {
                                Dice_ui::US12::US12_0(v1116_0_0) => {
                                    let v1120: Option<std::string::String> =
                                        Dice_ui::method38(v1116_0_0.clone());
                                    let v1122: Option<std::string::String> =
                                        serde_json::from_value(v1120.into()).unwrap();
                                    Dice_ui::US13::US13_0(defaultValue(
                                        Dice_ui::US14::US14_1,
                                        map(Dice_ui::method39(), v1122),
                                    ))
                                }
                                Dice_ui::US12::US12_1(v1116_1_0) => {
                                    Dice_ui::US13::US13_1(v1116_1_0.clone())
                                }
                            };
                            let v1161: Dice_ui::US15 = match &v1155 {
                                Dice_ui::US13::US13_0(v1155_0_0) => {
                                    Dice_ui::US15::US15_0(v1155_0_0.clone())
                                }
                                _ => Dice_ui::US15::US15_1,
                            };
                            let v1168: Dice_ui::US14 =
                                if let Dice_ui::US15::US15_0(v1161_0_0) = &v1161 {
                                    let v1162: Dice_ui::US14 = v1161_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v1162_0_0) = &v1162 {
                                        Dice_ui::US14::US14_0(v1162_0_0.clone())
                                    } else {
                                        Dice_ui::US14::US14_1
                                    }
                                } else {
                                    Dice_ui::US14::US14_1
                                };
                            let v1179: Option<std::string::String> = match &v1168 {
                                Dice_ui::US14::US14_0(v1168_0_0) => Some(
                                    match &v1168 {
                                        Dice_ui::US14::US14_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<std::string::String>,
                            };
                            let v1183: Option<Dice_ui::US8> = map(Dice_ui::method40(), v1179);
                            let v1324: Dice_ui::US7 =
                                defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v1183));
                            if let Dice_ui::US7::US7_0(v1324_0_0) = &v1324 {
                                let v1328: Dice_ui::US8 = v1324_0_0.clone();
                                if let Dice_ui::US8::US8_0(v1328_0_0) = &v1328 {
                                    Dice_ui::US8::US8_0(v1328_0_0.clone())
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        };
                        let v1340: string = append(
                            (append(
                                string(
                                    "state_core.use_core_database (6) / effect core_state_heap / #3 / core_state_heap: ",
                                ),
                                sprintf!("{:?}", v1335.clone()),
                            )),
                            string(""),
                        );
                        let v1342: bool = true;
                        leptos::logging::log!("{}", v1340);
                        if let Dice_ui::US8::US8_0(v1335_0_0) = &v1335 {
                            let v1343: LrcPtr<Dice_ui::Heap3> = v1335_0_0.clone();
                            let v1346: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1348: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1346);
                            let v1351: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1348.l0.clone(),
                                |x: &mut /*;
                                 let v1353: */
                                 bool /* = fable_library_rust::Native_::getZero();
                                      let v1358: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1343 = v1343.clone();
                                        move |v_1: bool| Dice_ui::closure32(v1343.clone(), v_1)
                                    })(x.clone())
                                },
                            ); //;
                            let v1361: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1363: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1361);
                            let v1366: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1363.l1.clone(),
                                |x: &mut /*;
                                 let v1368: */
                                 bool /* = fable_library_rust::Native_::getZero();
                                      let v1373: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1343 = v1343.clone();
                                        move |v_2: bool| Dice_ui::closure33(v1343.clone(), v_2)
                                    })(x.clone())
                                },
                            ); //;
                            let v1376: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1378: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1376);
                            let v1381: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1378.l2.clone(),
                                |x: &mut /*;
                                 let v1383: */
                                 std::string::String /* =
                                                         fable_library_rust::Native_::getZero::<()>();
                                                     let v1388: bool =
                                                         */| {
                                    *x = Func1::new({
                                        let v1343 = v1343.clone();
                                        move |v_3: std::string::String| {
                                            Dice_ui::closure34(v1343.clone(), v_3)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            let v1391: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1393: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1391);
                            let v1396: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1393.l3.clone(),
                                |x: &mut /*;
                                 let v1398: */
                                 LrcPtr<Dice_ui::Heap0> /* =
                                                            fable_library_rust::Native_::getZero::<()>();
                                                        let v1403: bool =
                                                            */| {
                                    *x = Func1::new({
                                        let v1343 = v1343.clone();
                                        move |v_4: LrcPtr<Dice_ui::Heap0>| {
                                            Dice_ui::closure35(v1343.clone(), v_4)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            true
                        } else {
                            false
                        }
                    } else {
                        false
                    }
                } else {
                    false
                };
                let v1408: bool = true; /*;
                let v1410: bool = */
            }); //;
            let v1412: Func0<()> = _func0_from_v720;
            let v1414: bool = true;
            leptos::prelude::Effect::new(move |_| v1412());
            let v1417: leptos::prelude::ArcMemo<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure36(v7.clone(), ())
                })()
            });
            let patternInput: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1423: bool = true;
            let _func1_from_v1421 = Func1::from(move |value| {
                //;
                let v1425: LrcPtr<Dice_ui::Heap3> = value;
                let v1427: string = sprintf!("{:?}", v1425.clone());
                let v1431: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v125), |x| x.clone());
                let v1456: Dice_ui::US2 =
                    defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v1431));
                let v1461: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v1463: bool = */
                    async move {
                        /*;
                        let v1465: bool = */
                        ();
                        let v1568: bool = match &v1456 {
                            Dice_ui::US2::US2_0(v1456_0_0) => {
                                let v1467: string = append(
                                    (append(
                                        string(
                                            "state_core.use_core_database (12) / set_core_state_heap_action / value: ",
                                        ),
                                        (v1427.clone()),
                                    )),
                                    string(""),
                                );
                                let v1469: bool = true;
                                leptos::logging::log!("{}", v1467);
                                let v1475: string = append(
                                    (append(
                                        string("state_core.set_data () / data_len: "),
                                        (toString(length(sprintf!("{:?}", v1425.clone())) as i64)),
                                    )),
                                    string(""),
                                );
                                let v1477: bool = true;
                                leptos::logging::log!("{}", v1475);
                                let v1479: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v1481: bool = */
                                    async move {
                                        /*;
                                        let v1483: bool = */
                                        ();
                                        let v1485: bool = true;
                                        let mut data = Vec::new();
                                        let v1487: bool = true;
                                        borsh::BorshSerialize::serialize(&v1425.clone(), &mut data)
                                            .unwrap();
                                        let v1489: Vec<u8> = data;
                                        let v1491: wasm_bindgen::JsValue =
                                            serde_wasm_bindgen::to_value(&v1489).unwrap();
                                        let v1492: string = Dice_ui::method43();
                                        let v1501: &str = &*v1492;
                                        let v1530: rexie::Transaction = match &v1456 {
                                            Dice_ui::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone()
                                        .transaction(
                                            &["store"],
                                            rexie::TransactionMode::ReadWrite,
                                        )?;
                                        let v1532: rexie::Store = v1530.store("store")?;
                                        let v1534: bool = true;
                                        v1532.put(&v1491, Some(&v1501.into())).await?;
                                        let v1536: bool = true;
                                        v1530.done().await?;
                                        let v1541: string = string("}");
                                        let v1548: bool = true;
                                        let _fix_closure_v1543 = Ok::<(), rexie::Error>(());
                                        let v1552: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1543 "),
                                                        (v1541),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1553: bool = true;
                                        _fix_closure_v1543
                                    },
                                ); // rust.fix_closure';
                                let v1555 = __future_init;
                                let v1557: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = v1555;
                                let v1559: Result<(), rexie::Error> = v1557.await;
                                v1559.unwrap();
                                true
                            }
                            _ => {
                                let v1566: bool = true;
                                leptos::logging::log!(
                                    "{}",
                                    string(
                                        "state_core.use_core_database (13) / set_core_state_heap_action / database=None"
                                    )
                                );
                                false
                            }
                        };
                        let v1574: string =
                            string("true; _fix_closure_v1571 });  // rust.fix_closure\'");
                        let v1575: bool = true;
                        _fix_closure_v1571
                    },
                ); // rust.fix_closure';
                let v1577 = __future_init;
                let v1579: std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> = v1577;
                let v1582: bool = true;
                v1579 /*;
                let v1584: bool = */
            }); //;
            let v1586: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = _func1_from_v1421;
            let v1589: leptos::prelude::ArcAction<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap3>| {
                    Func1::new({
                        let v1586 = v1586.clone();
                        move |v_5: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure37(v1586.clone(), v_5)
                    })(value.clone())
                });
            let v1592: bool = true;
            let _func0_from_v1590 = Func0::from(move || {
                //;
                let v1594: bool = leptos::prelude::ReadSignal::get(&patternInput.0.clone());
                let v1595: string = append(
                    (append(
                        string(
                            "state_core.use_core_database (14) / effect new_core_state_heap / #1 / loaded: ",
                        ),
                        (ofBoolean(v1594)),
                    )),
                    string(""),
                );
                let v1597: bool = true;
                leptos::logging::log!("{}", v1595);
                let v1600: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1602: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1600);
                let v1605: bool = leptos::prelude::ArcRwSignal::get(&v1602.l0.clone());
                let v1608: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1610: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1608);
                let v1613: bool = leptos::prelude::ArcRwSignal::get(&v1610.l1.clone());
                let v1616: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1618: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1616);
                let v1621: std::string::String =
                    leptos::prelude::ArcRwSignal::get(&v1618.l2.clone());
                let v1624: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1626: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1624);
                let v1630: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                    l0: v1605,
                    l1: v1613,
                    l2: v1621,
                    l3: leptos::prelude::ArcRwSignal::get(&v1626.l3.clone()),
                });
                let v1635: string = append(
                    (append(
                        string(
                            "state_core.use_core_database (15) / effect new_core_state_heap / #2 / new_core_state_heap: ",
                        ),
                        sprintf!("{:?}", v1630.clone()),
                    )),
                    string(""),
                );
                let v1637: bool = true;
                leptos::logging::log!("{}", v1635);
                let v1639: std::collections::HashMap<
                    std::string::String,
                    leptos::prelude::ArcRwSignal<bool>,
                > = leptos::prelude::ArcMemo::get(&v1417);
                let v1649: &str = &*string("dark_mode_key");
                let v1713: std::string::String = Dice_ui::method45(String::from(v1649));
                let v1715: Option<leptos::prelude::ArcRwSignal<bool>> =
                    std::collections::HashMap::get(&v1639, &v1713)
                        .map(|x| x)
                        .cloned();
                let v1740: Dice_ui::US16 =
                    defaultValue(Dice_ui::US16::US16_1, map(Dice_ui::method46(), v1715));
                let v1750: Dice_ui::US17 = match &v1740 {
                    Dice_ui::US16::US16_0(v1740_0_0) => {
                        Dice_ui::US17::US17_0(leptos::prelude::ArcRwSignal::get(
                            &match &v1740 {
                                Dice_ui::US16::US16_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US17::US17_1,
                };
                let v1753: bool = match &v1750 {
                    Dice_ui::US17::US17_0(v1750_0_0) => match &v1750 {
                        Dice_ui::US17::US17_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => false,
                };
                let v1754: string = append(
                    (append(
                        string(
                            "state_core.use_core_database (16) / effect new_core_state_heap / #3 / dark_mode_loading: ",
                        ),
                        (ofBoolean(v1753)),
                    )),
                    string(""),
                );
                let v1756: bool = true;
                leptos::logging::log!("{}", v1754);
                let v1865: bool = if (v1753) == false {
                    if (v1594) == false {
                        let v1760: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &patternInput.1.clone(),
                            |x: &mut /*;
                             let v1762: */
                             bool /* = fable_library_rust::Native_::getZero();
                                  let v1767: bool =
                                      */| {
                                *x = Func1::new(move |v_6: bool| Dice_ui::closure39((), v_6))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        true
                    } else {
                        let v1770: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string(
                                "state_core.use_core_database (18) / effect new_core_state_heap / #4"
                            )
                        );
                        let v1772: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                            Dice_ui::method29(Dice_ui::method28());
                        let v1773 = Dice_ui::method30();
                        let v1774 = Dice_ui::method31();
                        let v1776: Dice_ui::US9 = match &v1772 {
                            Err(v1772_1_0) => v1774(v1772_1_0.clone()),
                            Ok(v1772_0_0) => v1773(v1772_0_0.clone()),
                        };
                        let v1812: Dice_ui::US10 = match &v1776 {
                            Dice_ui::US9::US9_0(v1776_0_0) => Dice_ui::US10::US10_0(defaultValue(
                                Dice_ui::US11::US11_1,
                                map(Dice_ui::method32(), v1776_0_0.clone()),
                            )),
                            Dice_ui::US9::US9_1(v1776_1_0) => {
                                Dice_ui::US10::US10_1(v1776_1_0.clone())
                            }
                        };
                        if let Dice_ui::US10::US10_0(v1812_0_0) = &v1812 {
                            let v1813: Dice_ui::US11 = v1812_0_0.clone();
                            if let Dice_ui::US11::US11_0(v1813_0_0) = &v1813 {
                                let v1816: bool = true;
                                leptos::prelude::ArcAction::dispatch(&v1589, v1630.clone().clone());
                                let v1817: web_sys::Storage = Dice_ui::method47(v1813_0_0.clone());
                                let v1818: string = Dice_ui::method48();
                                let v1827: &str = &*v1818;
                                let v1855: LrcPtr<Dice_ui::Heap3> = Dice_ui::method49(v1630);
                                let v1857: std::string::String =
                                    serde_json::json!(v1855).to_string();
                                let v1859: &str = v1857.as_str();
                                let v1861: bool = true;
                                web_sys::Storage::set(&v1817, v1827, v1859).unwrap();
                                true
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                } else {
                    false
                };
                let v1867: bool = true; /*;
                let v1869: bool = */
            }); //;
            let v1871: Func0<()> = _func0_from_v1590;
            let v1873: bool = true;
            leptos::prelude::Effect::new(move |_| v1871());
            let v1875 = Dice_ui::method50(v7.clone());
            let v1879: string = string(" class:dark={move || v1875()} class=\"flex flex-1\"");
            let v1882: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v1884: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1886: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::hooks::use_navigate());
            let v1888: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1891: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v1888 = v1888.clone();
                        move || Dice_ui::closure41(v1888.clone(), ())
                    })()
                });
            let v1893: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v1895: LrcPtr<Dice_ui::Heap2> = v1893.unwrap();
            let patternInput_1: (
                leptos::prelude::ReadSignal<Dice_ui::US18>,
                leptos::prelude::WriteSignal<Dice_ui::US18>,
            ) = leptos::prelude::signal(Dice_ui::US18::US18_0);
            let v1898: leptos::prelude::ReadSignal<Dice_ui::US18> = patternInput_1.0.clone();
            let patternInput_2: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1905: bool = true;
            let _func0_from_v1903 = Func0::from(move || {
                //;
                let v1907: bool = leptos::prelude::ReadSignal::get(&patternInput_2.0.clone());
                let v1909: leptos::prelude::Memo<std::string::String> = v1884.clone().hash;
                let v1911: std::string::String = leptos::prelude::Memo::get(&v1909);
                let v1914: string =
                    sprintf!("{}{}", leptos::prelude::ArcMemo::get(&v1891), v1911.clone());
                let v1915: string = append(
                    (append(
                        (append(
                            (append(
                                string("content.render () / effect 1 / new_url_hash: "),
                                (v1914.clone()),
                            )),
                            string(" / loaded: "),
                        )),
                        (ofBoolean(v1907)),
                    )),
                    string(""),
                );
                let v1917: bool = true;
                leptos::logging::log!("{}", v1915);
                let v2060: bool = if (v1907) == false {
                    let v1919: std::string::String = Dice_ui::method51(v1911);
                    if v1919 == "" {
                        let v1924: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v1895.l0.clone());
                        let v1926: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v1924);
                        let v1929: std::string::String =
                            leptos::prelude::ArcRwSignal::get(&v1926.l2.clone());
                        let v1931: string = fable_library_rust::String_::fromString(v1929);
                        let v1932: string = append(
                            (append(
                                string("content.render () / effect 1 / url_hash: "),
                                (v1931.clone()),
                            )),
                            string(""),
                        );
                        let v1934: bool = true;
                        leptos::logging::log!("{}", v1932);
                        if contains(v1931.clone(), string("#")) {
                            let v1949: &str = &*v1931;
                            v1886(v1949, Default::default());
                            ()
                        }
                    }
                    {
                        let v1979: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_2.1.clone(), true); //;
                        true
                    }
                } else {
                    let v1982: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v1895.l0.clone());
                    let v1984: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v1982);
                    let v1994: &str = &*v1914;
                    let v2030: std::string::String = String::from(v1994);
                    let v2059: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v1984.l2.clone(), v2030); //;
                    false
                };
                let v2062: bool = true; /*;
                let v2064: bool = */
            }); //;
            let v2066: Func0<()> = _func0_from_v1903;
            let v2068: bool = true;
            leptos::prelude::Effect::new(move |_| v2066());
            let v2071: bool = true;
            let _func0_from_v2069 = Func0::from(move || {
                //;
                let v2073: leptos::prelude::Memo<std::string::String> = v1884.hash;
                let v2076: std::string::String =
                    Dice_ui::method52(leptos::prelude::Memo::get(&v2073));
                let v2078: Option<&str> = v2076.strip_prefix('#');
                let v2079: string = string("r#\"\"#");
                let v2080: &str = r#""#;
                let v2082: &str = v2078.unwrap_or(v2080);
                let v2084: Result<leptos_router::location::Url, std::string::String> =
                    leptos_router::location::Url::try_from(v2082);
                let v2085 = Dice_ui::method53();
                let v2086 = Dice_ui::method54();
                let v2088: Dice_ui::US20 = match &v2084 {
                    Err(v2084_1_0) => v2086(v2084_1_0.clone()),
                    Ok(v2084_0_0) => v2085(v2084_0_0.clone()),
                };
                let v2101: std::string::String = format!("{:#?}", v2088.clone());
                let v2133: string = append(
                    (append(
                        string("content.render () / effect 2 / hash_url: "),
                        (fable_library_rust::String_::fromString(v2101)),
                    )),
                    string(""),
                );
                let v2135: bool = true;
                leptos::logging::log!("{}", v2133);
                let v2263: bool = match &v2088 {
                    Dice_ui::US20::US20_0(v2088_0_0) => {
                        let v2136: leptos_router::location::Url = v2088_0_0.clone();
                        let v2138: std::string::String = v2136.clone().pathname;
                        let v2151: Dice_ui::US21 = if startsWith3(
                            fable_library_rust::String_::fromString(v2138),
                            string("/dice"),
                            false,
                        ) {
                            Dice_ui::US21::US21_0(Dice_ui::US18::US18_1(Dice_ui::US19::US19_0))
                        } else {
                            Dice_ui::US21::US21_1
                        };
                        let v2169: Dice_ui::US21 = match &v2151 {
                            Dice_ui::US21::US21_0(v2151_0_0) => Dice_ui::US21::US21_0(
                                match &v2151 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v2155: std::string::String = v2136.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v2155),
                                    string("/lists"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_2)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2187: Dice_ui::US21 = match &v2169 {
                            Dice_ui::US21::US21_0(v2169_0_0) => Dice_ui::US21::US21_0(
                                match &v2169 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v2173: std::string::String = v2136.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v2173),
                                    string("/transactions"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_3)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2205: Dice_ui::US21 = match &v2187 {
                            Dice_ui::US21::US21_0(v2187_0_0) => Dice_ui::US21::US21_0(
                                match &v2187 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v2191: std::string::String = v2136.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v2191),
                                    string("/settings"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_4)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2210: Dice_ui::US18 = match &v2205 {
                            Dice_ui::US21::US21_0(v2205_0_0) => match &v2205 {
                                Dice_ui::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            _ => Dice_ui::US18::US18_1(Dice_ui::US19::US19_0),
                        };
                        let v2221: std::string::String = format!("{:#?}", v2210.clone());
                        let v2253: string = append(
                            (append(
                                string("content.render () / effect 2 / new_tab: "),
                                (fable_library_rust::String_::fromString(v2221)),
                            )),
                            string(""),
                        );
                        let v2255: bool = true;
                        leptos::logging::log!("{}", v2253);
                        let v2257: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_1.1.clone(), v2210); //;
                        true
                    }
                    Dice_ui::US20::US20_1(v2088_1_0) => {
                        let v2259: string = append(
                            (append(
                                string("content.render () / effect 2 / hash_url error: "),
                                (toString(v2088_1_0.clone())),
                            )),
                            string(""),
                        );
                        let v2261: bool = true;
                        leptos::logging::log!("{}", v2259);
                        false
                    }
                };
                let v2265: bool = true; /*;
                let v2267: bool = */
            }); //;
            let v2269: Func0<()> = _func0_from_v2069;
            let v2271: bool = true;
            leptos::prelude::Effect::new(move |_| v2269());
            let v2273: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v2274: string = string(
                "class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"",
            );
            let v2275: string = append(
                (append((append(string(" "), (v2274))), string(""))),
                string(""),
            );
            let v2277: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v2279: Dice_ui::US18 = leptos::prelude::ReadSignal::get(&v1898.clone());
            let v5708: Dice_ui::US22 = match &v2279 {
                Dice_ui::US18::US18_1(v2279_1_0) => {
                    let v2283: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v2285: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v2287: LrcPtr<Dice_ui::Heap2> = v2285.unwrap();
                    let v2290: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v2293: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2287 = v2287.clone();
                                move || Dice_ui::closure44(v2287.clone(), ())
                            })()
                        });
                    let v2296: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2293 = v2293.clone();
                            move || Dice_ui::closure46(v2293.clone(), ())
                        })()
                    });
                    let v2299: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2287 = v2287.clone();
                            let v2293 = v2293.clone();
                            move || Dice_ui::closure48(v2287.clone(), v2293.clone(), ())
                        })()
                    });
                    let v2302: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2299 = v2299.clone();
                            move || Dice_ui::closure51(v2299.clone(), ())
                        })()
                    });
                    let v2305: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2299 = v2299.clone();
                                move || Dice_ui::closure55(v2299.clone(), ())
                            })()
                        });
                    let v2307: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v2302,
                        Func1::new(move |v_7: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_7)
                        }),
                    );
                    let v2314: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v2307.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v2316: bool = true;
                    leptos::logging::log!("{}", v2314);
                    let v2319: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2305 = v2305.clone();
                            let v2307 = v2307.clone();
                            move || Dice_ui::closure90(v2305.clone(), v2307.clone(), ())
                        })()
                    });
                    let v2322: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2319 = v2319.clone();
                            move || Dice_ui::closure107(v2319.clone(), ())
                        })()
                    });
                    let v2327: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method159(
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2322 = v2322.clone();
                                move || Dice_ui::closure115(v2322.clone(), ())
                            })()
                        }),
                        Func1::new(move |v_8: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure119((), v_8)
                        }),
                    );
                    let v2334: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v2327.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v2336: bool = true;
                    leptos::logging::log!("{}", v2334);
                    let v2339: bool = true;
                    let _func1_from_v2337 = Func1::from(move |value| {
                        //;
                        let v2346: string = append(
                            (append(
                                string("dice_view.render (2) / set_max_action / value: "),
                                sprintf!("{:?}", value),
                            )),
                            string(""),
                        );
                        let v2348: bool = true;
                        leptos::logging::log!("{}", v2346);
                        let v2350: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v2352: bool = */
                            async move {
                                /*;
                                let v2354: bool = */
                                ();
                                let v2364: &str = &*string("2.0");
                                let v2400: std::string::String = String::from(v2364);
                                let v2437: &str = &*string("dontcare");
                                let v2473: std::string::String = String::from(v2437);
                                let v2510: &str = &*string("EXPERIMENTAL_tx_status");
                                let v2546: std::string::String = String::from(v2510);
                                let v2583: &str =
                                    &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                                let v2619: std::string::String = String::from(v2583);
                                let v2656: &str = &*string("bowen");
                                let v2720: Array<std::string::String> =
                                    new_array(&[v2619, String::from(v2656)]);
                                let v2722: Vec<std::string::String> = v2720.to_vec();
                                let v2724: crate::model::near::rpc::RpcInput =
                                    crate::model::near::rpc::RpcInput {
                                        jsonrpc: v2400,
                                        id: v2473,
                                        method: v2546,
                                        params: v2722,
                                    };
                                let v2725: string = Dice_ui::method167();
                                let v2734: &str = &*v2725;
                                let v2798: std::string::String =
                                    Dice_ui::method92(String::from(v2734));
                                let v2800: reqwest_wasm::RequestBuilder =
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .post(v2798);
                                let v2803: reqwest_wasm::RequestBuilder = Dice_ui::method94(
                                    reqwest_wasm::RequestBuilder::json(v2800, &v2724),
                                );
                                let v2805: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    reqwest_wasm::Response,
                                                    reqwest_wasm::Error,
                                                >,
                                            >,
                                    >,
                                > = Box::pin(reqwest_wasm::RequestBuilder::send(v2803));
                                let v2807: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                    v2805.await;
                                let v2808 = Dice_ui::method95();
                                let v2814: Result<reqwest_wasm::Response, std::string::String> =
                                    v2807.map_err(|x| v2808(x));
                                let v2825: reqwest_wasm::Response = v2814?;
                                let v2827: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    std::string::String,
                                                    reqwest_wasm::Error,
                                                >,
                                            >,
                                    >,
                                > = Box::pin(reqwest_wasm::Response::text(v2825));
                                let v2829: Result<std::string::String, reqwest_wasm::Error> =
                                    v2827.await;
                                let v2830 = Dice_ui::method95();
                                let v2836: Result<std::string::String, std::string::String> =
                                    v2829.map_err(|x| v2830(x));
                                let v2851: Result<Dice_ui::US14, std::string::String> =
                                    Ok::<Dice_ui::US14, std::string::String>(
                                        Dice_ui::US14::US14_0(v2836?),
                                    );
                                let v2861: string = Dice_ui::method8(
                                    200_i64,
                                    append(
                                        (append(
                                            string(
                                                "dice_view.render (x) / roll_action new_arc_action / result1 / result: ",
                                            ),
                                            sprintf!("{:?}", v2851.clone()),
                                        )),
                                        string(""),
                                    ),
                                );
                                let v2863: bool = true;
                                leptos::logging::log!("{}", v2861);
                                let v2864 = Dice_ui::method168();
                                let v2865 = Dice_ui::method169();
                                let v2867: Dice_ui::US57 = match &v2851 {
                                    Err(v2851_1_0) => v2865(v2851_1_0.clone()),
                                    Ok(v2851_0_0) => v2864(v2851_0_0.clone()),
                                };
                                let v3225: Dice_ui::US58 = if let Dice_ui::US57::US57_0(v2867_0_0) =
                                    &v2867
                                {
                                    let v2870: Dice_ui::US14 = v2867_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v2870_0_0) = &v2870 {
                                        let v2874: string = Dice_ui::method41(
                                            fable_library_rust::String_::fromString(
                                                v2870_0_0.clone(),
                                            ),
                                        );
                                        let v2883: &str = &*v2874;
                                        let v2912: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            serde_json::Error,
                                        > = serde_json::from_str(&v2883);
                                        let v2913 = Dice_ui::method42();
                                        let v2926: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            std::string::String,
                                        > = v2912.map_err(|x| v2913(x));
                                        let v2929 = Dice_ui::method170();
                                        let v2930 = Dice_ui::method171();
                                        let v2932: Dice_ui::US60 = match &v2926 {
                                            Err(v2926_1_0) => v2930(v2926_1_0.clone()),
                                            Ok(v2926_0_0) => v2929(v2926_0_0.clone()),
                                        };
                                        let v3209: Dice_ui::US61 = match &v2932 {
                                            Dice_ui::US60::US60_0(v2932_0_0) => {
                                                let v2935: crate::model::near::rpc::RpcResponse =
                                                    v2932_0_0.clone();
                                                let v2937: std::string::String =
                                                    v2935.clone().jsonrpc;
                                                let v2939: Option<
                                                    crate::model::near::rpc::TransactionStatus,
                                                > = v2935.clone().result;
                                                let v2943: Option<(
                                                    Array<(
                                                        std::string::String,
                                                        Array<
                                                            std::collections::HashMap<
                                                                std::string::String,
                                                                (
                                                                    std::string::String,
                                                                    Option<std::string::String>,
                                                                    Option<f64>,
                                                                    Option<std::string::String>,
                                                                ),
                                                            >,
                                                        >,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        Array<std::string::String>,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        u64,
                                                        Array<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        u8,
                                                        Array<std::string::String>,
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            std::string::String,
                                                        >,
                                                        Option<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                    )>,
                                                )> = map(Dice_ui::method150(), v2939);
                                                let v3144: Option<
                                                    crate::model::near::rpc::RpcError,
                                                > = v2935.clone().error;
                                                Dice_ui::US61::US61_0(
                                                    v2937,
                                                    v2943,
                                                    map(Dice_ui::method157(), v3144),
                                                    v2935.id,
                                                )
                                            }
                                            Dice_ui::US60::US60_1(v2932_1_0) => {
                                                Dice_ui::US61::US61_1(v2932_1_0.clone())
                                            }
                                        };
                                        match &v3209 {
                                            Dice_ui::US61::US61_0(
                                                v3209_0_0,
                                                v3209_0_1,
                                                v3209_0_2,
                                                v3209_0_3,
                                            ) => Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                                v3209_0_0.clone(),
                                                v3209_0_1.clone(),
                                                v3209_0_2.clone(),
                                                v3209_0_3.clone(),
                                            )),
                                            Dice_ui::US61::US61_1(v3209_1_0) => {
                                                Dice_ui::US58::US58_1(v3209_1_0.clone())
                                            }
                                        }
                                    } else {
                                        Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                    }
                                } else {
                                    Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                };
                                let v3237: Result<Dice_ui::US59, std::string::String> = match &v3225
                                {
                                    Dice_ui::US58::US58_0(v3225_0_0) => {
                                        Ok::<Dice_ui::US59, std::string::String>(v3225_0_0.clone())
                                    }
                                    Dice_ui::US58::US58_1(v3225_1_0) => {
                                        Err::<Dice_ui::US59, std::string::String>(v3225_1_0.clone())
                                    }
                                };
                                let v3244: string = Dice_ui::method8(
                                    200_i64,
                                    append(
                                        (append(
                                            string(
                                                "dice_view.render (x) / roll_action new_arc_action / result2 / result: ",
                                            ),
                                            sprintf!("{:?}", v3237.clone()),
                                        )),
                                        string(""),
                                    ),
                                );
                                let v3246: bool = true;
                                leptos::logging::log!("{}", v3244);
                                let v3247: string = string("}");
                                let v3254: bool = true;
                                let _fix_closure_v3249 = v3237;
                                let v3258: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v3249 "), (v3247))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v3259: bool = true;
                                _fix_closure_v3249
                            },
                        ); // rust.fix_closure';
                        let v3261 = __future_init;
                        let v3263: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<Dice_ui::US59, std::string::String>,
                                    >,
                            >,
                        > = v3261;
                        let v3266: bool = true;
                        v3263 /*;
                        let v3268: bool = */
                    }); //;
                    let v3270: Func1<
                        LrcPtr<Dice_ui::Heap6>,
                        std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<Dice_ui::US59, std::string::String>,
                                    >,
                            >,
                        >,
                    > = _func1_from_v2337;
                    let v3273: leptos::prelude::ArcAction<
                        LrcPtr<Dice_ui::Heap6>,
                        Result<Dice_ui::US59, std::string::String>,
                    > = leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap6>| {
                        Func1::new({
                            let v3270 = v3270.clone();
                            move |v_9: LrcPtr<Dice_ui::Heap6>| {
                                Dice_ui::closure141(v3270.clone(), v_9)
                            }
                        })(value.clone())
                    });
                    let v3276: leptos::prelude::ArcMemo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3273 = v3273.clone();
                            move || Dice_ui::closure142(v3273.clone(), ())
                        })()
                    });
                    let v3279: leptos::prelude::ArcMemo<Option<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3276 = v3276.clone();
                                move || Dice_ui::closure147(v3276.clone(), ())
                            })()
                        });
                    let v3282: leptos::prelude::ArcMemo<Dice_ui::US31> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2287 = v2287.clone();
                                move || Dice_ui::closure152(v2287.clone(), ())
                            })()
                        });
                    let v3285: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<std::string::String>,
                                    leptos::prelude::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2287 = v2287.clone();
                            move || Dice_ui::closure153(v2287.clone(), ())
                        })()
                    });
                    let v3288: leptos::prelude::ArcMemo<
                        Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3285 = v3285.clone();
                            move || Dice_ui::closure158(v3285.clone(), ())
                        })()
                    });
                    let v3289: string = string("vec![]");
                    let v3290: Vec<leptos::prelude::AnyView> = vec![];
                    let v3292: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3290);
                    let v3294: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v3296() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v3297 = {
                        let clo = Func0::from(v3296);
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    fn v3299() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v3300 = {
                        let clo_1 = Func0::from(v3299);
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v3302: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v3306: string = string("vec![v3292]");
                    let v3307: Vec<leptos::prelude::AnyView> = vec![v3292];
                    let v3309: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3307);
                    let v3311: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3309);
                    let v3314: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3302))),
                                        string(">move || { v3311 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3316: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3311 }</div> };
                    let v3318: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3316);
                    let v3319: string = string(
                        "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3297(())",
                    );
                    let v3322: string = append(
                        (append(
                            string(" open=move || v3300(())"),
                            (append(
                                (append((append(string(" "), (v3319))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3325 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure163((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v3328 = {
                        let clo_3 = Func0::new(move || Dice_ui::closure164((), ()));
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v3329: string = string(
                        "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3328(()) + \" \" + &v3325(())",
                    );
                    let v3330: string = append(
                        (append((append(string(" "), (v3329))), string(""))),
                        string(""),
                    );
                    let v3332: string = string(" class=\"flex items-center gap-2\"");
                    let v3335: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v3336: string = (Dice_ui::method187())();
                    let v3345: &str = &*v3336;
                    let v3381: std::string::String = String::from(v3345);
                    let v3410: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3381),
                    );
                    let v3414: string = string("vec![v3410]");
                    let v3415: Vec<leptos::prelude::AnyView> = vec![v3410];
                    let v3417: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3415);
                    let v3419: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3417);
                    let v3422: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3335))),
                                        string(">move || { v3419 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3424: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3419 }</span> };
                    let v3426: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3424);
                    let v3430: string = string("vec![v3426]");
                    let v3431: Vec<leptos::prelude::AnyView> = vec![v3426];
                    let v3433: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3431);
                    let v3435: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3433);
                    let v3437: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3332))),
                                        string(">move || { v3435 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3439: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3435 }</div> };
                    let v3441: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3439);
                    let v3443: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v3445() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v3446 = {
                        let clo_4 = Func0::from(v3445);
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v3454: string = string(
                        " class=move || \" \".to_owned() + &v3446(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v3456: string = string(
                        "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                    );
                    let v3460: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3456))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3461: string = string("vec![]");
                    let v3462: Vec<leptos::prelude::AnyView> = vec![];
                    let v3464: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3462);
                    let v3466: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3464);
                    let v3469: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3460))),
                                        string(">move || { v3466 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3471: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3466 }</path> };
                    let v3473: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3471);
                    let v3477: string = string("vec![v3473]");
                    let v3478: Vec<leptos::prelude::AnyView> = vec![v3473];
                    let v3480: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3478);
                    let v3482: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3480);
                    let v3485: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3454))),
                                        string(">move || { v3482 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3487: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3446(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3482 }</svg> };
                    let v3489: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3487);
                    let v3493: string = string("vec![v3489]");
                    let v3494: Vec<leptos::prelude::AnyView> = vec![v3489];
                    let v3496: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3494);
                    let v3498: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3496);
                    let v3500: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3443))),
                                        string(">move || { v3498 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3502: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3498 }</span> };
                    let v3504: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3502);
                    let v3512: string = string("vec![v3441, v3504]");
                    let v3513: Vec<leptos::prelude::AnyView> = vec![v3441, v3504];
                    let v3515: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3513);
                    let v3517: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3515);
                    let v3520: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v3330))),
                                        string(">move || { v3517 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3522: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3328(()) + " " + &v3325(())>move || { v3517 }</summary> };
                    let v3524: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3522);
                    let v3526: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3530: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v2287 = v2287.clone();
                                let v3273 = v3273.clone();
                                let v3279 = v3279.clone();
                                let v3282 = v3282.clone();
                                let v3288 = v3288.clone();
                                move || {
                                    Dice_ui::closure167(
                                        v2287.clone(),
                                        v3273.clone(),
                                        v3279.clone(),
                                        v3282.clone(),
                                        v3288.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3532: leptos::prelude::Fragment = (move || v3530())();
                    let v3534: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3532);
                    let v3536: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3526))),
                                        string(">move || { v3534 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3538: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3534 }</div> };
                    let v3540: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3538);
                    let v3547: string = string("vec![v3524, v3540]");
                    let v3548: Vec<leptos::prelude::AnyView> = vec![v3524, v3540];
                    let v3550: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3548);
                    let v3552: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3550);
                    let v3555: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v3322))),
                                        string(">move || { v3552 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3557: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v3300(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3297(())>move || { v3552 }</details> };
                    let v3559: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3557);
                    let v3566: string = string("vec![v3318, v3559]");
                    let v3567: Vec<leptos::prelude::AnyView> = vec![v3318, v3559];
                    let v3569: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3567);
                    let v3571: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3569);
                    let v3573: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3294))),
                                        string(">move || { v3571 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3575: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3571 }</div> };
                    let v3577: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3575);
                    let v3578: string = string("vec![]");
                    let v3579: Vec<leptos::prelude::AnyView> = vec![];
                    let v3581: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3579);
                    let v3583: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v3585 = {
                        let clo_5 = Func0::from(v3296);
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v3587 = {
                        let clo_6 = Func0::from(v3299);
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v3589: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v3593: string = string("vec![v3581]");
                    let v3594: Vec<leptos::prelude::AnyView> = vec![v3581];
                    let v3596: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3594);
                    let v3598: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3596);
                    let v3600: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3589))),
                                        string(">move || { v3598 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3602: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3598 }</div> };
                    let v3604: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3602);
                    let v3605: string = string(
                        "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3585(())",
                    );
                    let v3608: string = append(
                        (append(
                            string(" open=move || v3587(())"),
                            (append(
                                (append((append(string(" "), (v3605))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3611 = {
                        let clo_7 = Func0::new(move || Dice_ui::closure183((), ()));
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v3614 = {
                        let clo_8 = Func0::new(move || Dice_ui::closure184((), ()));
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v3615: string = string(
                        "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3614(()) + \" \" + &v3611(())",
                    );
                    let v3616: string = append(
                        (append((append(string(" "), (v3615))), string(""))),
                        string(""),
                    );
                    let v3618: string = string(" class=\"flex items-center gap-2\"");
                    let v3621: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v3622: string = (Dice_ui::method198())();
                    let v3631: &str = &*v3622;
                    let v3667: std::string::String = String::from(v3631);
                    let v3696: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3667),
                    );
                    let v3700: string = string("vec![v3696]");
                    let v3701: Vec<leptos::prelude::AnyView> = vec![v3696];
                    let v3703: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3701);
                    let v3705: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3703);
                    let v3707: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3621))),
                                        string(">move || { v3705 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3709: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3705 }</span> };
                    let v3711: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3709);
                    let v3715: string = string("vec![v3711]");
                    let v3716: Vec<leptos::prelude::AnyView> = vec![v3711];
                    let v3718: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3716);
                    let v3720: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3718);
                    let v3722: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3618))),
                                        string(">move || { v3720 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3724: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3720 }</div> };
                    let v3726: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3724);
                    let v3728: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v3730 = {
                        let clo_9 = Func0::from(v3445);
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v3738: string = string(
                        " class=move || \" \".to_owned() + &v3730(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v3740: string = string(
                        "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                    );
                    let v3744: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3740))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3745: string = string("vec![]");
                    let v3746: Vec<leptos::prelude::AnyView> = vec![];
                    let v3748: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3746);
                    let v3750: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3748);
                    let v3752: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3744))),
                                        string(">move || { v3750 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3754: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3750 }</path> };
                    let v3756: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3754);
                    let v3760: string = string("vec![v3756]");
                    let v3761: Vec<leptos::prelude::AnyView> = vec![v3756];
                    let v3763: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3761);
                    let v3765: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3763);
                    let v3767: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3738))),
                                        string(">move || { v3765 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3769: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3730(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3765 }</svg> };
                    let v3771: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3769);
                    let v3775: string = string("vec![v3771]");
                    let v3776: Vec<leptos::prelude::AnyView> = vec![v3771];
                    let v3778: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3776);
                    let v3780: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3778);
                    let v3782: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3728))),
                                        string(">move || { v3780 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3784: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3780 }</span> };
                    let v3786: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3784);
                    let v3793: string = string("vec![v3726, v3786]");
                    let v3794: Vec<leptos::prelude::AnyView> = vec![v3726, v3786];
                    let v3796: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3794);
                    let v3798: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3796);
                    let v3800: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v3616))),
                                        string(">move || { v3798 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3802: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3614(()) + " " + &v3611(())>move || { v3798 }</summary> };
                    let v3804: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3802);
                    let v3806: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3810: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v2299 = v2299.clone();
                                let v2319 = v2319.clone();
                                let v2327 = v2327.clone();
                                move || {
                                    Dice_ui::closure186(
                                        v2327.clone(),
                                        v2319.clone(),
                                        v2299.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3812: leptos::prelude::Fragment = (move || v3810())();
                    let v3814: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3812);
                    let v3816: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3806))),
                                        string(">move || { v3814 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3818: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3814 }</div> };
                    let v3820: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3818);
                    let v3827: string = string("vec![v3804, v3820]");
                    let v3828: Vec<leptos::prelude::AnyView> = vec![v3804, v3820];
                    let v3830: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3828);
                    let v3832: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3830);
                    let v3834: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v3608))),
                                        string(">move || { v3832 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3836: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v3587(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3585(())>move || { v3832 }</details> };
                    let v3838: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3836);
                    let v3845: string = string("vec![v3604, v3838]");
                    let v3846: Vec<leptos::prelude::AnyView> = vec![v3604, v3838];
                    let v3848: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3846);
                    let v3850: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3848);
                    let v3852: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3583))),
                                        string(">move || { v3850 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3854: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3850 }</div> };
                    let v3856: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3854);
                    let v3863: string = string("vec![v3577, v3856]");
                    let v3864: Vec<leptos::prelude::AnyView> = vec![v3577, v3856];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3864))
                }
                Dice_ui::US18::US18_2 => {
                    let v3870: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v3872: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3874: LrcPtr<Dice_ui::Heap2> = v3872.unwrap();
                    let v3884: &str = &*string("???");
                    let v3920: std::string::String = String::from(v3884);
                    let v3949: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3920),
                    );
                    let v3953: string = string("vec![v3949]");
                    let v3954: Vec<leptos::prelude::AnyView> = vec![v3949];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3954))
                }
                Dice_ui::US18::US18_4 => {
                    let v4707: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v4709: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v4711: LrcPtr<Dice_ui::Heap2> = v4709.unwrap();
                    let v4714: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v4711 = v4711.clone();
                            move || Dice_ui::closure192(v4711.clone(), ())
                        })()
                    });
                    let patternInput_3: (
                        leptos::prelude::ReadSignal<i32>,
                        leptos::prelude::WriteSignal<i32>,
                    ) = leptos::prelude::signal(0_i32);
                    let v4717: leptos::prelude::WriteSignal<i32> = patternInput_3.1.clone();
                    let v4720: leptos::prelude::ArcMemo<
                        Vec<(
                            i32,
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let patternInput_3 = patternInput_3.clone();
                            let v4714 = v4714.clone();
                            move || Dice_ui::closure195(v4714.clone(), patternInput_3.0.clone(), ())
                        })()
                    });
                    let v4723: leptos::prelude::ArcMemo<i32> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v4720 = v4720.clone();
                                move || Dice_ui::closure198(v4720.clone(), ())
                            })()
                        });
                    let v4726: bool = true;
                    let _func0_from_v4724 = Func0::from(move || {
                        //;
                        let v4729: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v4711.l0.clone());
                        let v4731: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v4729);
                        let v4734: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v4731.l3.clone(),
                            |x: &mut /*;
                             let v4736: */
                             LrcPtr<Dice_ui::Heap0> /* =
                                                        fable_library_rust::Native_::getZero::<()>();
                                                    let v4741: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v4714 = v4714.clone();
                                    move |v_10: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure199(v4714.clone(), v_10)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v4743: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4717.clone(),
                            |x: &mut /*;
                             let v4745: */
                             i32 /* = fable_library_rust::Native_::getZero();
                                 let v4750: bool =
                                     */| {
                                *x = Func1::new(move |v_11: i32| Dice_ui::closure201((), v_11))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v4752: bool = true; /*;
                        let v4754: bool = */
                    }); //;
                    let v4756: Func0<()> = _func0_from_v4724;
                    let v4759 = {
                        let clo_10 = Func0::new(move || Dice_ui::closure202((), ()));
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v4771: string = string(
                        " class=move || \" \".to_owned() + &v4759(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v4777: string = string(
                        " d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v4778: string = string("vec![]");
                    let v4779: Vec<leptos::prelude::AnyView> = vec![];
                    let v4781: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4779);
                    let v4783: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4781);
                    let v4786: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4777))),
                                        string(">move || { v4783 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4788: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">move || { v4783 }</path> };
                    let v4790: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4788);
                    let v4794: string = string("vec![v4790]");
                    let v4795: Vec<leptos::prelude::AnyView> = vec![v4790];
                    let v4797: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4795);
                    let v4799: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4797);
                    let v4802: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4771))),
                                        string(">move || { v4799 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4804: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4759(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4799 }</svg> };
                    let v4809 = {
                        let clo_11 = Func0::new(move || Dice_ui::closure203((), ()));
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v4810: string = string(
                        "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v4809(())",
                    );
                    let v4813: string = append(
                        (append(
                            string(" aria-label=\"Add\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v4756()"),
                                    (append(
                                        (append((append(string(" "), (v4810))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4815: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4804);
                    let v4819: string = string("vec![v4815]");
                    let v4820: Vec<leptos::prelude::AnyView> = vec![v4815];
                    let v4822: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4820);
                    let v4824: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4822);
                    let v4827: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v4813))),
                                        string(">move || { v4824 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4829: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Add" on:click=move |_| v4756() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v4809(())>move || { v4824 }</button> };
                    let v4831: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4829);
                    let v4832: string = string("vec![]");
                    let v4833: Vec<leptos::prelude::AnyView> = vec![];
                    let v4835: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4833);
                    let v4837: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v4839() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v4840 = {
                        let clo_12 = Func0::from(v4839);
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    fn v4842() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v4843 = {
                        let clo_13 = Func0::from(v4842);
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v4845: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4849: string = string("vec![v4831]");
                    let v4850: Vec<leptos::prelude::AnyView> = vec![v4831];
                    let v4852: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4850);
                    let v4854: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4852);
                    let v4857: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4845))),
                                        string(">move || { v4854 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4859: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4854 }</div> };
                    let v4861: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4859);
                    let v4862: string = string(
                        "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4840(())",
                    );
                    let v4865: string = append(
                        (append(
                            string(" open=move || v4843(())"),
                            (append(
                                (append((append(string(" "), (v4862))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4868 = {
                        let clo_14 = Func0::new(move || Dice_ui::closure204((), ()));
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v4871 = {
                        let clo_15 = Func0::new({
                            let v4831 = v4831.clone();
                            move || Dice_ui::closure205(v4831.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v4872: string = string(
                        "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4871(()) + \" \" + &v4868(())",
                    );
                    let v4873: string = append(
                        (append((append(string(" "), (v4872))), string(""))),
                        string(""),
                    );
                    let v4875: string = string(" class=\"flex items-center gap-2\"");
                    let v4878: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4879: string = (Dice_ui::method214(v4831.clone()))();
                    let v4888: &str = &*v4879;
                    let v4924: std::string::String = String::from(v4888);
                    let v4953: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4924),
                    );
                    let v4957: string = string("vec![v4953]");
                    let v4958: Vec<leptos::prelude::AnyView> = vec![v4953];
                    let v4960: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4958);
                    let v4962: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4960);
                    let v4965: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4878))),
                                        string(">move || { v4962 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4967: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4962 }</span> };
                    let v4969: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4967);
                    let v4973: string = string("vec![v4969]");
                    let v4974: Vec<leptos::prelude::AnyView> = vec![v4969];
                    let v4976: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4974);
                    let v4978: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4976);
                    let v4980: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4875))),
                                        string(">move || { v4978 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4982: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4978 }</div> };
                    let v4984: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4982);
                    let v4986: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v4988() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v4989 = {
                        let clo_16 = Func0::from(v4988);
                        Func1::new({
                            let clo_16 = clo_16.clone();
                            move |arg_16: ()| clo_16()
                        })
                    };
                    let v4997: string = string(
                        " class=move || \" \".to_owned() + &v4989(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v4999: string = string(
                        "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                    );
                    let v5003: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4999))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v5004: string = string("vec![]");
                    let v5005: Vec<leptos::prelude::AnyView> = vec![];
                    let v5007: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5005);
                    let v5009: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5007);
                    let v5011: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v5003))),
                                        string(">move || { v5009 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5013: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v5009 }</path> };
                    let v5015: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5013);
                    let v5019: string = string("vec![v5015]");
                    let v5020: Vec<leptos::prelude::AnyView> = vec![v5015];
                    let v5022: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5020);
                    let v5024: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5022);
                    let v5026: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4997))),
                                        string(">move || { v5024 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5028: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4989(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v5024 }</svg> };
                    let v5030: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5028);
                    let v5034: string = string("vec![v5030]");
                    let v5035: Vec<leptos::prelude::AnyView> = vec![v5030];
                    let v5037: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5035);
                    let v5039: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5037);
                    let v5041: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4986))),
                                        string(">move || { v5039 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5043: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v5039 }</span> };
                    let v5045: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5043);
                    let v5053: string = string("vec![v4984, v5045]");
                    let v5054: Vec<leptos::prelude::AnyView> = vec![v4984, v5045];
                    let v5056: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5054);
                    let v5058: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5056);
                    let v5061: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4873))),
                                        string(">move || { v5058 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5063: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4871(()) + " " + &v4868(())>move || { v5058 }</summary> };
                    let v5065: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5063);
                    let v5067: string = string(" class=\"flex flex-1 flex-col\"");
                    let v5071: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v4711 = v4711.clone();
                                let v4714 = v4714.clone();
                                let v4717 = v4717.clone();
                                let v4720 = v4720.clone();
                                let v4723 = v4723.clone();
                                move || {
                                    Dice_ui::closure207(
                                        v4711.clone(),
                                        v4720.clone(),
                                        v4723.clone(),
                                        v4714.clone(),
                                        v4717.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v5073: leptos::prelude::Fragment = (move || v5071())();
                    let v5075: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5073);
                    let v5077: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5067))),
                                        string(">move || { v5075 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5079: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5075 }</div> };
                    let v5081: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5079);
                    let v5088: string = string("vec![v5065, v5081]");
                    let v5089: Vec<leptos::prelude::AnyView> = vec![v5065, v5081];
                    let v5091: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5089);
                    let v5093: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5091);
                    let v5096: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4865))),
                                        string(">move || { v5093 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5098: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4843(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4840(())>move || { v5093 }</details> };
                    let v5100: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5098);
                    let v5107: string = string("vec![v4861, v5100]");
                    let v5108: Vec<leptos::prelude::AnyView> = vec![v4861, v5100];
                    let v5110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5108);
                    let v5112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5110);
                    let v5114: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4837))),
                                        string(">move || { v5112 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5116: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5112 }</div> };
                    let v5118: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5116);
                    let v5119: string = string("vec![]");
                    let v5120: Vec<leptos::prelude::AnyView> = vec![];
                    let v5122: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5120);
                    let v5124: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v5126 = {
                        let clo_17 = Func0::from(v4839);
                        Func1::new({
                            let clo_17 = clo_17.clone();
                            move |arg_17: ()| clo_17()
                        })
                    };
                    let v5128 = {
                        let clo_18 = Func0::from(v4842);
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v5130: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v5134: string = string("vec![v5122]");
                    let v5135: Vec<leptos::prelude::AnyView> = vec![v5122];
                    let v5137: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5135);
                    let v5139: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5137);
                    let v5141: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5130))),
                                        string(">move || { v5139 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5143: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v5139 }</div> };
                    let v5145: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5143);
                    let v5146: string = string(
                        "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v5126(())",
                    );
                    let v5149: string = append(
                        (append(
                            string(" open=move || v5128(())"),
                            (append(
                                (append((append(string(" "), (v5146))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v5152 = {
                        let clo_19 = Func0::new(move || Dice_ui::closure223((), ()));
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    let v5155 = {
                        let clo_20 = Func0::new(move || Dice_ui::closure224((), ()));
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v5156: string = string(
                        "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v5155(()) + \" \" + &v5152(())",
                    );
                    let v5157: string = append(
                        (append((append(string(" "), (v5156))), string(""))),
                        string(""),
                    );
                    let v5159: string = string(" class=\"flex items-center gap-2\"");
                    let v5162: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v5163: string = (Dice_ui::method228())();
                    let v5172: &str = &*v5163;
                    let v5208: std::string::String = String::from(v5172);
                    let v5237: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v5208),
                    );
                    let v5241: string = string("vec![v5237]");
                    let v5242: Vec<leptos::prelude::AnyView> = vec![v5237];
                    let v5244: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5242);
                    let v5246: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5244);
                    let v5248: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v5162))),
                                        string(">move || { v5246 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5250: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v5246 }</span> };
                    let v5252: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5250);
                    let v5256: string = string("vec![v5252]");
                    let v5257: Vec<leptos::prelude::AnyView> = vec![v5252];
                    let v5259: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5257);
                    let v5261: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5259);
                    let v5263: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5159))),
                                        string(">move || { v5261 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5265: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v5261 }</div> };
                    let v5267: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5265);
                    let v5269: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v5271 = {
                        let clo_21 = Func0::from(v4988);
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v5279: string = string(
                        " class=move || \" \".to_owned() + &v5271(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v5281: string = string(
                        "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                    );
                    let v5285: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v5281))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v5286: string = string("vec![]");
                    let v5287: Vec<leptos::prelude::AnyView> = vec![];
                    let v5289: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5287);
                    let v5291: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5289);
                    let v5293: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v5285))),
                                        string(">move || { v5291 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5295: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v5291 }</path> };
                    let v5297: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5295);
                    let v5301: string = string("vec![v5297]");
                    let v5302: Vec<leptos::prelude::AnyView> = vec![v5297];
                    let v5304: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5302);
                    let v5306: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5304);
                    let v5308: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v5279))),
                                        string(">move || { v5306 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5310: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5271(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v5306 }</svg> };
                    let v5312: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5310);
                    let v5316: string = string("vec![v5312]");
                    let v5317: Vec<leptos::prelude::AnyView> = vec![v5312];
                    let v5319: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5317);
                    let v5321: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5319);
                    let v5323: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v5269))),
                                        string(">move || { v5321 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5325: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v5321 }</span> };
                    let v5327: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5325);
                    let v5334: string = string("vec![v5267, v5327]");
                    let v5335: Vec<leptos::prelude::AnyView> = vec![v5267, v5327];
                    let v5337: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5335);
                    let v5339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5337);
                    let v5341: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v5157))),
                                        string(">move || { v5339 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5343: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v5155(()) + " " + &v5152(())>move || { v5339 }</summary> };
                    let v5345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5343);
                    let v5347: string = string(" class=\"flex flex-1 flex-col\"");
                    let v5351: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v4711 = v4711.clone();
                                move || Dice_ui::closure226(v4711.clone(), ())
                            })()
                        }));
                    let v5353: leptos::prelude::Fragment = (move || v5351())();
                    let v5355: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5353);
                    let v5357: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5347))),
                                        string(">move || { v5355 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5359: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5355 }</div> };
                    let v5361: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5359);
                    let v5368: string = string("vec![v5345, v5361]");
                    let v5369: Vec<leptos::prelude::AnyView> = vec![v5345, v5361];
                    let v5371: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5369);
                    let v5373: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5371);
                    let v5375: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v5149))),
                                        string(">move || { v5373 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5377: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v5128(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v5126(())>move || { v5373 }</details> };
                    let v5379: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5377);
                    let v5386: string = string("vec![v5145, v5379]");
                    let v5387: Vec<leptos::prelude::AnyView> = vec![v5145, v5379];
                    let v5389: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5387);
                    let v5391: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5389);
                    let v5393: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5124))),
                                        string(">move || { v5391 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5395: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5391 }</div> };
                    let v5397: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5395);
                    let v5400: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v4711.l0.clone());
                    let v5402: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v5400);
                    let v5689: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                        &v5402.l1.clone(),
                    ) {
                        let v5406: string = string("vec![]");
                        let v5407: Vec<leptos::prelude::AnyView> = vec![];
                        let v5409: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5407);
                        let v5411: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v5413 = {
                            let clo_22 = Func0::from(v4839);
                            Func1::new({
                                let clo_22 = clo_22.clone();
                                move |arg_22: ()| clo_22()
                            })
                        };
                        let v5415 = {
                            let clo_23 = Func0::from(v4842);
                            Func1::new({
                                let clo_23 = clo_23.clone();
                                move |arg_23: ()| clo_23()
                            })
                        };
                        let v5417: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v5421: string = string("vec![v5409]");
                        let v5422: Vec<leptos::prelude::AnyView> = vec![v5409];
                        let v5424: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5422);
                        let v5426: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5424);
                        let v5428: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5417))),
                                            string(">move || { v5426 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5430: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v5426 }</div> };
                        let v5432: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5430);
                        let v5433: string = string(
                            "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v5413(())",
                        );
                        let v5436: string = append(
                            (append(
                                string(" open=move || v5415(())"),
                                (append(
                                    (append((append(string(" "), (v5433))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5439 = {
                            let clo_24 = Func0::new(move || Dice_ui::closure243((), ()));
                            Func1::new({
                                let clo_24 = clo_24.clone();
                                move |arg_24: ()| clo_24()
                            })
                        };
                        let v5442 = {
                            let clo_25 = Func0::new(move || Dice_ui::closure244((), ()));
                            Func1::new({
                                let clo_25 = clo_25.clone();
                                move |arg_25: ()| clo_25()
                            })
                        };
                        let v5443: string = string(
                            "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v5442(()) + \" \" + &v5439(())",
                        );
                        let v5444: string = append(
                            (append((append(string(" "), (v5443))), string(""))),
                            string(""),
                        );
                        let v5446: string = string(" class=\"flex items-center gap-2\"");
                        let v5449: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v5450: string = (Dice_ui::method237())();
                        let v5459: &str = &*v5450;
                        let v5495: std::string::String = String::from(v5459);
                        let v5524: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v5495),
                        );
                        let v5528: string = string("vec![v5524]");
                        let v5529: Vec<leptos::prelude::AnyView> = vec![v5524];
                        let v5531: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5529);
                        let v5533: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5531);
                        let v5535: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v5449))),
                                            string(">move || { v5533 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5537: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v5533 }</span> };
                        let v5539: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5537);
                        let v5543: string = string("vec![v5539]");
                        let v5544: Vec<leptos::prelude::AnyView> = vec![v5539];
                        let v5546: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5544);
                        let v5548: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5546);
                        let v5550: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5446))),
                                            string(">move || { v5548 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5552: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v5548 }</div> };
                        let v5554: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5552);
                        let v5556: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        let v5558 = {
                            let clo_26 = Func0::from(v4988);
                            Func1::new({
                                let clo_26 = clo_26.clone();
                                move |arg_26: ()| clo_26()
                            })
                        };
                        let v5566: string = string(
                            " class=move || \" \".to_owned() + &v5558(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v5568: string = string(
                            "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                        );
                        let v5572: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v5568))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5573: string = string("vec![]");
                        let v5574: Vec<leptos::prelude::AnyView> = vec![];
                        let v5576: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5574);
                        let v5578: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5576);
                        let v5580: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v5572))),
                                            string(">move || { v5578 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5582: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v5578 }</path> };
                        let v5584: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5582);
                        let v5588: string = string("vec![v5584]");
                        let v5589: Vec<leptos::prelude::AnyView> = vec![v5584];
                        let v5591: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5589);
                        let v5593: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5591);
                        let v5595: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v5566))),
                                            string(">move || { v5593 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5597: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5558(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v5593 }</svg> };
                        let v5599: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5597);
                        let v5603: string = string("vec![v5599]");
                        let v5604: Vec<leptos::prelude::AnyView> = vec![v5599];
                        let v5606: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5604);
                        let v5608: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5606);
                        let v5610: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v5556))),
                                            string(">move || { v5608 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5612: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v5608 }</span> };
                        let v5614: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5612);
                        let v5621: string = string("vec![v5554, v5614]");
                        let v5622: Vec<leptos::prelude::AnyView> = vec![v5554, v5614];
                        let v5624: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5622);
                        let v5626: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5624);
                        let v5628: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v5444))),
                                            string(">move || { v5626 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5630: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v5442(()) + " " + &v5439(())>move || { v5626 }</summary> };
                        let v5632: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5630);
                        let v5634: string = string(" class=\"flex flex-1 flex-col\"");
                        let v5638: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new(move || Dice_ui::closure246((), ()))()
                            }));
                        let v5640: leptos::prelude::Fragment = (move || v5638())();
                        let v5642: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5640);
                        let v5644: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5634))),
                                            string(">move || { v5642 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5646: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5642 }</div> };
                        let v5648: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5646);
                        let v5655: string = string("vec![v5632, v5648]");
                        let v5656: Vec<leptos::prelude::AnyView> = vec![v5632, v5648];
                        let v5658: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5656);
                        let v5660: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5658);
                        let v5662: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v5436))),
                                            string(">move || { v5660 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5664: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v5415(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v5413(())>move || { v5660 }</details> };
                        let v5666: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5664);
                        let v5673: string = string("vec![v5432, v5666]");
                        let v5674: Vec<leptos::prelude::AnyView> = vec![v5432, v5666];
                        let v5676: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5674);
                        let v5678: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5676);
                        let v5680: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5411))),
                                            string(">move || { v5678 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5682: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5678 }</div> };
                        leptos::prelude::IntoAny::into_any(v5682)
                    } else {
                        let v5685: string = string("vec![]");
                        let v5686: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::IntoAny::into_any(v5686)
                    };
                    let v5699: string = string("vec![v5118, v5397, v5689]");
                    let v5700: Vec<leptos::prelude::AnyView> = vec![v5118, v5397, v5689];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v5700))
                }
                Dice_ui::US18::US18_3 => {
                    let v3960: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v3962: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3964: LrcPtr<Dice_ui::Heap2> = v3962.unwrap();
                    let v3967: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v3970: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3964 = v3964.clone();
                                move || Dice_ui::closure44(v3964.clone(), ())
                            })()
                        });
                    let v3973: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3970 = v3970.clone();
                            move || Dice_ui::closure46(v3970.clone(), ())
                        })()
                    });
                    let v3976: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3964 = v3964.clone();
                            let v3970 = v3970.clone();
                            move || Dice_ui::closure48(v3964.clone(), v3970.clone(), ())
                        })()
                    });
                    let v3979: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3976 = v3976.clone();
                            move || Dice_ui::closure51(v3976.clone(), ())
                        })()
                    });
                    let v3982: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3976 = v3976.clone();
                                move || Dice_ui::closure55(v3976.clone(), ())
                            })()
                        });
                    let v3984: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v3979,
                        Func1::new(move |v_12: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_12)
                        }),
                    );
                    let v3991: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v3984.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v3993: bool = true;
                    leptos::logging::log!("{}", v3991);
                    let v3996: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3982 = v3982.clone();
                            let v3984 = v3984.clone();
                            move || Dice_ui::closure90(v3982.clone(), v3984.clone(), ())
                        })()
                    });
                    let v3999: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3996 = v3996.clone();
                            move || Dice_ui::closure107(v3996.clone(), ())
                        })()
                    });
                    let v4011: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method159(
                                        leptos::prelude::ArcMemo::new(move |_| {
                                            Func0::new({
                                                let v3999 = v3999.clone();
                                                move || Dice_ui::closure115(v3999.clone(), ())
                                            })()
                                        }),
                                        Func1::new(
                                            move |v_13: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure119((), v_13)
                                            }
                                        )
                                    )
                                ),
                            )),
                            string(""),
                        ),
                    );
                    let v4013: bool = true;
                    leptos::logging::log!("{}", v4011);
                    let patternInput_4: (
                        leptos::prelude::ReadSignal<bool>,
                        leptos::prelude::WriteSignal<bool>,
                    ) = leptos::prelude::signal(false);
                    let v4015: leptos::prelude::ReadSignal<bool> = patternInput_4.0.clone();
                    let v4017 = Func0::new({
                        let patternInput_4 = patternInput_4.clone();
                        move || Dice_ui::closure254(patternInput_4.1.clone(), ())
                    });
                    {
                        let v4021 = {
                            let clo_27 = Func0::new(move || Dice_ui::closure255((), ()));
                            Func1::new({
                                let clo_27 = clo_27.clone();
                                move |arg_27: ()| clo_27()
                            })
                        };
                        let v4033: string = string(
                            " class=move || \" \".to_owned() + &v4021(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v4036: string = string(
                            "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"",
                        );
                        let v4039: string = append(
                            (append(
                                (append(string(" "), (v4036))),
                                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                            )),
                            string(""),
                        );
                        let v4040: string = string("vec![]");
                        let v4041: Vec<leptos::prelude::AnyView> = vec![];
                        let v4043: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4041);
                        let v4045: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4043);
                        let v4048: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4039))),
                                            string(">move || { v4045 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4050: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v4045 }</path> };
                        let v4052: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4050);
                        let v4058: string = string(
                            " d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                        );
                        let v4059: string = string("vec![]");
                        let v4060: Vec<leptos::prelude::AnyView> = vec![];
                        let v4062: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4060);
                        let v4064: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4062);
                        let v4066: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4058))),
                                            string(">move || { v4064 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4068: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v4064 }</path> };
                        let v4070: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4068);
                        let v4078: string = string("vec![v4052, v4070]");
                        let v4079: Vec<leptos::prelude::AnyView> = vec![v4052, v4070];
                        let v4081: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4079);
                        let v4083: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4081);
                        let v4086: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4033))),
                                            string(">move || { v4083 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4088: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4021(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4083 }</svg> };
                        let v4093 = {
                            let clo_28 = Func0::new({
                                let v4015 = v4015.clone();
                                move || Dice_ui::closure256(v4015.clone(), ())
                            });
                            Func1::new({
                                let clo_28 = clo_28.clone();
                                move |arg_28: ()| clo_28()
                            })
                        };
                        let v4094: string = string(
                            "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v4093(())",
                        );
                        let v4097: string = append(
                            (append(
                                string(" aria-label=\"Settings\""),
                                (append(
                                    (append(
                                        string(" on:click=move |_| v4017()"),
                                        (append(
                                            (append((append(string(" "), (v4094))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4099: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4088);
                        let v4103: string = string("vec![v4099]");
                        let v4104: Vec<leptos::prelude::AnyView> = vec![v4099];
                        let v4106: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4104);
                        let v4108: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4106);
                        let v4111: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<button "), (v4097))),
                                            string(">move || { v4108 }</"),
                                        )),
                                        string("button"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4113: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Settings" on:click=move |_| v4017() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v4093(())>move || { v4108 }</button> };
                        let v4115: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4113);
                        let v4116: string = string("vec![]");
                        let v4117: Vec<leptos::prelude::AnyView> = vec![];
                        let v4119: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4117);
                        let v4121: string = string(" class=\"flex flex-col [position:relative]\"");
                        fn v4123() -> string {
                            Dice_ui::closure161((), ())
                        }
                        let v4124 = {
                            let clo_29 = Func0::from(v4123);
                            Func1::new({
                                let clo_29 = clo_29.clone();
                                move |arg_29: ()| clo_29()
                            })
                        };
                        fn v4126() -> bool {
                            Dice_ui::closure162((), ())
                        }
                        let v4127 = {
                            let clo_30 = Func0::from(v4126);
                            Func1::new({
                                let clo_30 = clo_30.clone();
                                move |arg_30: ()| clo_30()
                            })
                        };
                        let v4129: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v4133: string = string("vec![v4115]");
                        let v4134: Vec<leptos::prelude::AnyView> = vec![v4115];
                        let v4136: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4134);
                        let v4138: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4136);
                        let v4141: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4129))),
                                            string(">move || { v4138 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4143: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4138 }</div> };
                        let v4145: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4143);
                        let v4146: string = string(
                            "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4124(())",
                        );
                        let v4149: string = append(
                            (append(
                                string(" open=move || v4127(())"),
                                (append(
                                    (append((append(string(" "), (v4146))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4152 = {
                            let clo_31 = Func0::new(move || Dice_ui::closure257((), ()));
                            Func1::new({
                                let clo_31 = clo_31.clone();
                                move |arg_31: ()| clo_31()
                            })
                        };
                        let v4155 = {
                            let clo_32 = Func0::new({
                                let v4115 = v4115.clone();
                                move || Dice_ui::closure258(v4115.clone(), ())
                            });
                            Func1::new({
                                let clo_32 = clo_32.clone();
                                move |arg_32: ()| clo_32()
                            })
                        };
                        let v4156: string = string(
                            "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4155(()) + \" \" + &v4152(())",
                        );
                        let v4157: string = append(
                            (append((append(string(" "), (v4156))), string(""))),
                            string(""),
                        );
                        let v4159: string = string(" class=\"flex items-center gap-2\"");
                        let v4162: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v4163: string = (Dice_ui::method243(v4115.clone()))();
                        let v4172: &str = &*v4163;
                        let v4208: std::string::String = String::from(v4172);
                        let v4237: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v4208),
                        );
                        let v4241: string = string("vec![v4237]");
                        let v4242: Vec<leptos::prelude::AnyView> = vec![v4237];
                        let v4244: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4242);
                        let v4246: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4244);
                        let v4249: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4162))),
                                            string(">move || { v4246 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4251: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4246 }</span> };
                        let v4253: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4251);
                        let v4257: string = string("vec![v4253]");
                        let v4258: Vec<leptos::prelude::AnyView> = vec![v4253];
                        let v4260: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4258);
                        let v4262: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4260);
                        let v4264: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4159))),
                                            string(">move || { v4262 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4266: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4262 }</div> };
                        let v4268: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4266);
                        let v4270: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        fn v4272() -> string {
                            Dice_ui::closure166((), ())
                        }
                        let v4273 = {
                            let clo_33 = Func0::from(v4272);
                            Func1::new({
                                let clo_33 = clo_33.clone();
                                move |arg_33: ()| clo_33()
                            })
                        };
                        let v4281: string = string(
                            " class=move || \" \".to_owned() + &v4273(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v4283: string = string(
                            "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                        );
                        let v4287: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v4283))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4288: string = string("vec![]");
                        let v4289: Vec<leptos::prelude::AnyView> = vec![];
                        let v4291: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4289);
                        let v4293: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4291);
                        let v4295: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4287))),
                                            string(">move || { v4293 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4297: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4293 }</path> };
                        let v4299: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4297);
                        let v4303: string = string("vec![v4299]");
                        let v4304: Vec<leptos::prelude::AnyView> = vec![v4299];
                        let v4306: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4304);
                        let v4308: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4306);
                        let v4310: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4281))),
                                            string(">move || { v4308 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4312: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4273(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4308 }</svg> };
                        let v4314: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4312);
                        let v4318: string = string("vec![v4314]");
                        let v4319: Vec<leptos::prelude::AnyView> = vec![v4314];
                        let v4321: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4319);
                        let v4323: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4321);
                        let v4325: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4270))),
                                            string(">move || { v4323 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4327: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4323 }</span> };
                        let v4329: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4327);
                        let v4336: string = string("vec![v4268, v4329]");
                        let v4337: Vec<leptos::prelude::AnyView> = vec![v4268, v4329];
                        let v4339: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4337);
                        let v4341: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4339);
                        let v4344: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v4157))),
                                            string(">move || { v4341 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4346: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4155(()) + " " + &v4152(())>move || { v4341 }</summary> };
                        let v4348: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4346);
                        let v4350: string = string(" class=\"flex flex-1 flex-col\"");
                        let v4354: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new({
                                    let v3964 = v3964.clone();
                                    let v3976 = v3976.clone();
                                    let v3996 = v3996.clone();
                                    let v4015 = v4015.clone();
                                    move || {
                                        Dice_ui::closure260(
                                            v3964.clone(),
                                            v3996.clone(),
                                            v3976.clone(),
                                            v4015.clone(),
                                            (),
                                        )
                                    }
                                })()
                            }));
                        let v4356: leptos::prelude::Fragment = (move || v4354())();
                        let v4358: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4356);
                        let v4360: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4350))),
                                            string(">move || { v4358 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4362: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4358 }</div> };
                        let v4364: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4362);
                        let v4371: string = string("vec![v4348, v4364]");
                        let v4372: Vec<leptos::prelude::AnyView> = vec![v4348, v4364];
                        let v4374: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4372);
                        let v4376: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4374);
                        let v4379: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v4149))),
                                            string(">move || { v4376 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4381: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v4127(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4124(())>move || { v4376 }</details> };
                        let v4383: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4381);
                        let v4390: string = string("vec![v4145, v4383]");
                        let v4391: Vec<leptos::prelude::AnyView> = vec![v4145, v4383];
                        let v4393: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4391);
                        let v4395: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4393);
                        let v4397: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4121))),
                                            string(">move || { v4395 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4399: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4395 }</div> };
                        let v4401: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4399);
                        let v4404: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v3964.l0.clone());
                        let v4406: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v4404);
                        let v4693: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                            &v4406.l1.clone(),
                        ) {
                            let v4410: string = string("vec![]");
                            let v4411: Vec<leptos::prelude::AnyView> = vec![];
                            let v4413: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4411);
                            let v4415: string =
                                string(" class=\"flex flex-col [position:relative]\"");
                            let v4417 = {
                                let clo_34 = Func0::from(v4123);
                                Func1::new({
                                    let clo_34 = clo_34.clone();
                                    move |arg_34: ()| clo_34()
                                })
                            };
                            let v4419 = {
                                let clo_35 = Func0::from(v4126);
                                Func1::new({
                                    let clo_35 = clo_35.clone();
                                    move |arg_35: ()| clo_35()
                                })
                            };
                            let v4421: string =
                                string(" class=\"[position:absolute] [right:0] [top:0]\"");
                            let v4425: string = string("vec![v4413]");
                            let v4426: Vec<leptos::prelude::AnyView> = vec![v4413];
                            let v4428: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4426);
                            let v4430: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4428);
                            let v4432: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4421))),
                                                string(">move || { v4430 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4434: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4430 }</div> };
                            let v4436: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4434);
                            let v4437: string = string(
                                "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4417(())",
                            );
                            let v4440: string = append(
                                (append(
                                    string(" open=move || v4419(())"),
                                    (append(
                                        (append((append(string(" "), (v4437))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v4443 = {
                                let clo_36 = Func0::new(move || Dice_ui::closure337((), ()));
                                Func1::new({
                                    let clo_36 = clo_36.clone();
                                    move |arg_36: ()| clo_36()
                                })
                            };
                            let v4446 = {
                                let clo_37 = Func0::new(move || Dice_ui::closure338((), ()));
                                Func1::new({
                                    let clo_37 = clo_37.clone();
                                    move |arg_37: ()| clo_37()
                                })
                            };
                            let v4447: string = string(
                                "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4446(()) + \" \" + &v4443(())",
                            );
                            let v4448: string = append(
                                (append((append(string(" "), (v4447))), string(""))),
                                string(""),
                            );
                            let v4450: string = string(" class=\"flex items-center gap-2\"");
                            let v4453: string = string(
                                " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                            );
                            let v4454: string = (Dice_ui::method282())();
                            let v4463: &str = &*v4454;
                            let v4499: std::string::String = String::from(v4463);
                            let v4528: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v4499),
                                );
                            let v4532: string = string("vec![v4528]");
                            let v4533: Vec<leptos::prelude::AnyView> = vec![v4528];
                            let v4535: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4533);
                            let v4537: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4535);
                            let v4539: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v4453))),
                                                string(">move || { v4537 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4541: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4537 }</span> };
                            let v4543: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4541);
                            let v4547: string = string("vec![v4543]");
                            let v4548: Vec<leptos::prelude::AnyView> = vec![v4543];
                            let v4550: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4548);
                            let v4552: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4550);
                            let v4554: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4450))),
                                                string(">move || { v4552 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4556: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4552 }</div> };
                            let v4558: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4556);
                            let v4560: string =
                                string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                            let v4562 = {
                                let clo_38 = Func0::from(v4272);
                                Func1::new({
                                    let clo_38 = clo_38.clone();
                                    move |arg_38: ()| clo_38()
                                })
                            };
                            let v4570: string = string(
                                " class=move || \" \".to_owned() + &v4562(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                            );
                            let v4572: string = string(
                                "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                            );
                            let v4576: string = append(
                                (append(
                                    string(" clip-rule=\"evenodd\""),
                                    (append(
                                        (append(
                                            (append(string(" "), (v4572))),
                                            string(" fill-rule=\"evenodd\""),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v4577: string = string("vec![]");
                            let v4578: Vec<leptos::prelude::AnyView> = vec![];
                            let v4580: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4578);
                            let v4582: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4580);
                            let v4584: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<path "), (v4576))),
                                                string(">move || { v4582 }</"),
                                            )),
                                            string("path"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4586: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                            > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4582 }</path> };
                            let v4588: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4586);
                            let v4592: string = string("vec![v4588]");
                            let v4593: Vec<leptos::prelude::AnyView> = vec![v4588];
                            let v4595: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4593);
                            let v4597: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4595);
                            let v4599: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v4570))),
                                                string(">move || { v4597 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4601: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4562(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4597 }</svg> };
                            let v4603: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4601);
                            let v4607: string = string("vec![v4603]");
                            let v4608: Vec<leptos::prelude::AnyView> = vec![v4603];
                            let v4610: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4608);
                            let v4612: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4610);
                            let v4614: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v4560))),
                                                string(">move || { v4612 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4616: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4612 }</span> };
                            let v4618: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4616);
                            let v4625: string = string("vec![v4558, v4618]");
                            let v4626: Vec<leptos::prelude::AnyView> = vec![v4558, v4618];
                            let v4628: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4626);
                            let v4630: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4628);
                            let v4632: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<summary "), (v4448))),
                                                string(">move || { v4630 }</"),
                                            )),
                                            string("summary"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4634: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4446(()) + " " + &v4443(())>move || { v4630 }</summary> };
                            let v4636: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4634);
                            let v4638: string = string(" class=\"flex flex-1 flex-col\"");
                            let v4642: Func0<leptos::prelude::Fragment> =
                                Dice_ui::method195(Func0::new(move || {
                                    Func0::new({
                                        let v3996 = v3996.clone();
                                        move || Dice_ui::closure340(v3996.clone(), ())
                                    })()
                                }));
                            let v4644: leptos::prelude::Fragment = (move || v4642())();
                            let v4646: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4644);
                            let v4648: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4638))),
                                                string(">move || { v4646 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4650: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4646 }</div> };
                            let v4652: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4650);
                            let v4659: string = string("vec![v4636, v4652]");
                            let v4660: Vec<leptos::prelude::AnyView> = vec![v4636, v4652];
                            let v4662: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4660);
                            let v4664: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4662);
                            let v4666: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<details "), (v4440))),
                                                string(">move || { v4664 }</"),
                                            )),
                                            string("details"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4668: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Details, _, _>,
                            > = leptos::prelude::view! { <details  open=move || v4419(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4417(())>move || { v4664 }</details> };
                            let v4670: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4668);
                            let v4677: string = string("vec![v4436, v4670]");
                            let v4678: Vec<leptos::prelude::AnyView> = vec![v4436, v4670];
                            let v4680: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4678);
                            let v4682: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4680);
                            let v4684: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4415))),
                                                string(">move || { v4682 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4686: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4682 }</div> };
                            leptos::prelude::IntoAny::into_any(v4686)
                        } else {
                            let v4689: string = string("vec![]");
                            let v4690: Vec<leptos::prelude::AnyView> = vec![];
                            leptos::prelude::IntoAny::into_any(v4690)
                        };
                        let v4700: string = string("vec![v4401, v4693]");
                        let v4701: Vec<leptos::prelude::AnyView> = vec![v4401, v4693];
                        Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v4701))
                    }
                }
                _ => Dice_ui::US22::US22_1,
            };
            let v5726: leptos::prelude::AnyView = match &v5708 {
                Dice_ui::US22::US22_0(v5708_0_0) => {
                    let v5711: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v5713: leptos::prelude::AnyView = leptos::prelude::AnyView::from(
                        match &v5708 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v5716: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5711))),
                                        string(">move || { v5713 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5718: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [overflow-y:auto]">move || { v5713 }</div> };
                    leptos::prelude::IntoAny::into_any(v5718)
                }
                _ => {
                    let v5721: string = string("vec![]");
                    let v5722: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v5722)
                }
            };
            let v5730: string = string("vec![v5726]");
            let v5731: Vec<leptos::prelude::AnyView> = vec![v5726];
            let v5733: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5731);
            let v5735: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5733);
            let v5738: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<main "), (v2277))),
                                string(">move || { v5735 }</"),
                            )),
                            string("main"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5740: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Main, _, _>> = leptos::prelude::view! { <main  class="flex flex-1 flex-col [overflow:hidden]">move || { v5735 }</main> };
            let v5742: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5740);
            let v5744: string = string(" class=\"flex\"");
            let v5747: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v5749: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v5752: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v5749 = v5749.clone();
                        move || Dice_ui::closure41(v5749.clone(), ())
                    })()
                });
            let v5754: string = string(" class=\"hidden\"");
            let v5758: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v5768: &str = &*string("Tab");
            let v5804: std::string::String = String::from(v5768);
            let v5833: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5804));
            let v5837: string = string("vec![v5833]");
            let v5838: Vec<leptos::prelude::AnyView> = vec![v5833];
            let v5840: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5838);
            let v5842: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5840);
            let v5845: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v5758))),
                                string(">move || { v5842 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5847: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class="sr-only" for="Tab">move || { v5842 }</label> };
            let v5849: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5847);
            let v5853: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v5854 = Dice_ui::method285(v1898.clone());
            let v5856: string = string(" selected=v5854()");
            let v5866: &str = &*string("Settings");
            let v5902: std::string::String = String::from(v5866);
            let v5931: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5902));
            let v5935: string = string("vec![v5931]");
            let v5936: Vec<leptos::prelude::AnyView> = vec![v5931];
            let v5938: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5936);
            let v5940: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5938);
            let v5943: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5856))),
                                string(">move || { v5940 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5945: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5854()>move || { v5940 }</option> };
            let v5947: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5945);
            let v5948 = Dice_ui::method286(v1898.clone());
            let v5950: string = string(" selected=v5948()");
            let v5960: &str = &*string("Transactions");
            let v5996: std::string::String = String::from(v5960);
            let v6025: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5996));
            let v6029: string = string("vec![v6025]");
            let v6030: Vec<leptos::prelude::AnyView> = vec![v6025];
            let v6032: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6030);
            let v6034: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6032);
            let v6036: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5950))),
                                string(">move || { v6034 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6038: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5948()>move || { v6034 }</option> };
            let v6040: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6038);
            let v6041 = Dice_ui::method287(v1898.clone());
            let v6043: string = string(" selected=v6041()");
            let v6053: &str = &*string("Lists");
            let v6089: std::string::String = String::from(v6053);
            let v6118: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v6089));
            let v6122: string = string("vec![v6118]");
            let v6123: Vec<leptos::prelude::AnyView> = vec![v6118];
            let v6125: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6123);
            let v6127: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6125);
            let v6129: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v6043))),
                                string(">move || { v6127 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6131: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v6041()>move || { v6127 }</option> };
            let v6133: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6131);
            let v6134 = Dice_ui::method288(v1898.clone());
            let v6136: string = string(" selected=v6134()");
            let v6146: &str = &*string("Dice");
            let v6182: std::string::String = String::from(v6146);
            let v6211: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v6182));
            let v6215: string = string("vec![v6211]");
            let v6216: Vec<leptos::prelude::AnyView> = vec![v6211];
            let v6218: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6216);
            let v6220: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6218);
            let v6222: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v6136))),
                                string(">move || { v6220 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6224: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v6134()>move || { v6220 }</option> };
            let v6226: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6224);
            let v6240: string = string("vec![v6226, v6133, v6040, v5947]");
            let v6241: Vec<leptos::prelude::AnyView> = vec![v6226, v6133, v6040, v5947];
            let v6243: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6241);
            let v6245: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6243);
            let v6248: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<select "), (v5853))),
                                string(">move || { v6245 }</"),
                            )),
                            string("select"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6250: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Select, _, _>,
            > = leptos::prelude::view! { <select  class="w-full rounded-md border-gray-200" id="Tab">move || { v6245 }</select> };
            let v6252: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6250);
            let v6259: string = string("vec![v5849, v6252]");
            let v6260: Vec<leptos::prelude::AnyView> = vec![v5849, v6252];
            let v6262: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6260);
            let v6264: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6262);
            let v6267: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5754))),
                                string(">move || { v6264 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6269: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="hidden">move || { v6264 }</div> };
            let v6271: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v6273: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v6274: string = string(
                "class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"",
            );
            let v6277: string = append(
                (append(
                    string(" aria-label=\"Tabs\""),
                    (append(
                        (append((append(string(" "), (v6274))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            fn v6279() -> string {
                Dice_ui::closure348((), ())
            }
            let v6280 = {
                let clo_39 = Func0::from(v6279);
                Func1::new({
                    let clo_39 = clo_39.clone();
                    move |arg_39: ()| clo_39()
                })
            };
            let v6292: string = string(
                " class=move || \" \".to_owned() + &v6280(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
            );
            let v6295: string = string(
                "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"",
            );
            let v6298: string = append(
                (append(
                    (append(string(" "), (v6295))),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                )),
                string(""),
            );
            let v6299: string = string("vec![]");
            let v6300: Vec<leptos::prelude::AnyView> = vec![];
            let v6302: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6300);
            let v6304: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6302);
            let v6307: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v6298))),
                                string(">move || { v6304 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6309: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v6304 }</path> };
            let v6311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6309);
            let v6317: string = string(
                " d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v6318: string = string("vec![]");
            let v6319: Vec<leptos::prelude::AnyView> = vec![];
            let v6321: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6319);
            let v6323: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6321);
            let v6325: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v6317))),
                                string(">move || { v6323 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6327: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v6323 }</path> };
            let v6329: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6327);
            let v6336: string = string("vec![v6311, v6329]");
            let v6337: Vec<leptos::prelude::AnyView> = vec![v6311, v6329];
            let v6339: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6337);
            let v6341: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6339);
            let v6344: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v6292))),
                                string(">move || { v6341 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6346: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v6280(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6341 }</svg> };
            let v6348: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6346);
            let v6352: string = string("vec![v6348]");
            let v6353: Vec<leptos::prelude::AnyView> = vec![v6348];
            let v6355: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6353);
            let v6356 = Func0::new({
                let v5752 = v5752.clone();
                move || Dice_ui::closure349(v5752.clone(), ())
            });
            {
                let v6360 = {
                    let clo_40 = Func0::new({
                        let v1898 = v1898.clone();
                        move || Dice_ui::closure350(v1898.clone(), ())
                    });
                    Func1::new({
                        let clo_40 = clo_40.clone();
                        move |arg_40: ()| clo_40()
                    })
                };
                let v6363 = {
                    let clo_41 = Func0::new({
                        let v1898 = v1898.clone();
                        move || Dice_ui::closure351(v1898.clone(), ())
                    });
                    Func1::new({
                        let clo_41 = clo_41.clone();
                        move |arg_41: ()| clo_41()
                    })
                };
                let v6365: string = string(
                    "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6363(())",
                );
                let v6369: string = append(
                    (append(
                        string(" aria-current=move || if v6360(()) { \"page\" } else { \"\" }"),
                        (append(
                            (append(
                                (append(string(" "), (v6365))),
                                string(" href=move || v6356()"),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v6371: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6355);
                let v6380: &str = &*string("Settings");
                let v6416: std::string::String = String::from(v6380);
                let v6445: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v6416));
                let v6452: string = string("vec![v6371, v6445]");
                let v6453: Vec<leptos::prelude::AnyView> = vec![v6371, v6445];
                let v6455: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6453);
                let v6457: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6455);
                let v6460: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<a "), (v6369))),
                                    string(">move || { v6457 }</"),
                                )),
                                string("a"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6462: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::A, _, _>> = leptos::prelude::view! { <a  aria-current=move || if v6360(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6363(()) href=move || v6356()>move || { v6457 }</a> };
                let v6464: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6462);
                let v6466 = {
                    let clo_42 = Func0::from(v6279);
                    Func1::new({
                        let clo_42 = clo_42.clone();
                        move |arg_42: ()| clo_42()
                    })
                };
                let v6480: string = string(
                    " class=move || \"text-gray-700 \".to_owned() + &v6466(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v6486: string = string(
                    " d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v6487: string = string("vec![]");
                let v6488: Vec<leptos::prelude::AnyView> = vec![];
                let v6490: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6488);
                let v6492: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6490);
                let v6494: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v6486))),
                                    string(">move || { v6492 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6496: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7" stroke-linejoin="round" stroke-linecap="round">move || { v6492 }</path> };
                let v6498: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6496);
                let v6502: string = string("vec![v6498]");
                let v6503: Vec<leptos::prelude::AnyView> = vec![v6498];
                let v6505: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6503);
                let v6507: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6505);
                let v6509: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v6480))),
                                    string(">move || { v6507 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6511: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v6466(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6507 }</svg> };
                let v6513: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6511);
                let v6517: string = string("vec![v6513]");
                let v6518: Vec<leptos::prelude::AnyView> = vec![v6513];
                let v6520: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6518);
                let v6521 = Func0::new({
                    let v5752 = v5752.clone();
                    move || Dice_ui::closure352(v5752.clone(), ())
                });
                {
                    let v6525 = {
                        let clo_43 = Func0::new({
                            let v1898 = v1898.clone();
                            move || Dice_ui::closure353(v1898.clone(), ())
                        });
                        Func1::new({
                            let clo_43 = clo_43.clone();
                            move |arg_43: ()| clo_43()
                        })
                    };
                    let v6528 = {
                        let clo_44 = Func0::new({
                            let v1898 = v1898.clone();
                            move || Dice_ui::closure354(v1898.clone(), ())
                        });
                        Func1::new({
                            let clo_44 = clo_44.clone();
                            move |arg_44: ()| clo_44()
                        })
                    };
                    let v6530: string = string(
                        "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6528(())",
                    );
                    let v6534: string = append(
                        (append(
                            string(" aria-current=move || if v6525(()) { \"page\" } else { \"\" }"),
                            (append(
                                (append(
                                    (append(string(" "), (v6530))),
                                    string(" href=move || v6521()"),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v6536: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6520);
                    let v6545: &str = &*string("Transactions");
                    let v6581: std::string::String = String::from(v6545);
                    let v6610: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v6581),
                    );
                    let v6617: string = string("vec![v6536, v6610]");
                    let v6618: Vec<leptos::prelude::AnyView> = vec![v6536, v6610];
                    let v6620: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6618);
                    let v6622: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6620);
                    let v6624: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<a "), (v6534))),
                                        string(">move || { v6622 }</"),
                                    )),
                                    string("a"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6626: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::A, _, _>,
                    > = leptos::prelude::view! { <a  aria-current=move || if v6525(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6528(()) href=move || v6521()>move || { v6622 }</a> };
                    let v6628: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6626);
                    let v6630 = {
                        let clo_45 = Func0::from(v6279);
                        Func1::new({
                            let clo_45 = clo_45.clone();
                            move |arg_45: ()| clo_45()
                        })
                    };
                    let v6644: string = string(
                        " class=move || \"text-gray-700 \".to_owned() + &v6630(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v6650: string = string(
                        " d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v6651: string = string("vec![]");
                    let v6652: Vec<leptos::prelude::AnyView> = vec![];
                    let v6654: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6652);
                    let v6656: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6654);
                    let v6658: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v6650))),
                                        string(">move || { v6656 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6660: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5" stroke-linejoin="round" stroke-linecap="round">move || { v6656 }</path> };
                    let v6662: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6660);
                    let v6670: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
                    let v6671: string = string("vec![]");
                    let v6672: Vec<leptos::prelude::AnyView> = vec![];
                    let v6674: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6672);
                    let v6676: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6674);
                    let v6679: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6670))),
                                        string(">move || { v6676 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6681: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="6.75" cx="3">move || { v6676 }</circle> };
                    let v6683: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6681);
                    let v6691: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
                    let v6692: string = string("vec![]");
                    let v6693: Vec<leptos::prelude::AnyView> = vec![];
                    let v6695: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6693);
                    let v6697: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6695);
                    let v6699: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6691))),
                                        string(">move || { v6697 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6701: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="12" cx="3">move || { v6697 }</circle> };
                    let v6703: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6701);
                    let v6711: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
                    let v6712: string = string("vec![]");
                    let v6713: Vec<leptos::prelude::AnyView> = vec![];
                    let v6715: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6713);
                    let v6717: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6715);
                    let v6719: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6711))),
                                        string(">move || { v6717 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6721: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="17.25" cx="3">move || { v6717 }</circle> };
                    let v6723: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6721);
                    let v6736: string = string("vec![v6662, v6683, v6703, v6723]");
                    let v6737: Vec<leptos::prelude::AnyView> = vec![v6662, v6683, v6703, v6723];
                    let v6739: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6737);
                    let v6741: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6739);
                    let v6743: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v6644))),
                                        string(">move || { v6741 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6745: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v6630(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6741 }</svg> };
                    let v6747: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6745);
                    let v6751: string = string("vec![v6747]");
                    let v6752: Vec<leptos::prelude::AnyView> = vec![v6747];
                    let v6754: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6752);
                    let v6755 = Func0::new({
                        let v5752 = v5752.clone();
                        move || Dice_ui::closure355(v5752.clone(), ())
                    });
                    {
                        let v6759 = {
                            let clo_46 = Func0::new({
                                let v1898 = v1898.clone();
                                move || Dice_ui::closure356(v1898.clone(), ())
                            });
                            Func1::new({
                                let clo_46 = clo_46.clone();
                                move |arg_46: ()| clo_46()
                            })
                        };
                        let v6762 = {
                            let clo_47 = Func0::new({
                                let v1898 = v1898.clone();
                                move || Dice_ui::closure357(v1898.clone(), ())
                            });
                            Func1::new({
                                let clo_47 = clo_47.clone();
                                move |arg_47: ()| clo_47()
                            })
                        };
                        let v6764: string = string(
                            "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6762(())",
                        );
                        let v6768: string = append(
                            (append(
                                string(
                                    " aria-current=move || if v6759(()) { \"page\" } else { \"\" }",
                                ),
                                (append(
                                    (append(
                                        (append(string(" "), (v6764))),
                                        string(" href=move || v6755()"),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v6770: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6754);
                        let v6779: &str = &*string("Lists");
                        let v6815: std::string::String = String::from(v6779);
                        let v6844: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v6815),
                        );
                        let v6851: string = string("vec![v6770, v6844]");
                        let v6852: Vec<leptos::prelude::AnyView> = vec![v6770, v6844];
                        let v6854: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6852);
                        let v6856: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6854);
                        let v6858: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<a "), (v6768))),
                                            string(">move || { v6856 }</"),
                                        )),
                                        string("a"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6860: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::A, _, _>,
                        > = leptos::prelude::view! { <a  aria-current=move || if v6759(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6762(()) href=move || v6755()>move || { v6856 }</a> };
                        let v6862: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6860);
                        let v6864 = {
                            let clo_48 = Func0::from(v6279);
                            Func1::new({
                                let clo_48 = clo_48.clone();
                                move |arg_48: ()| clo_48()
                            })
                        };
                        let v6876: string = string(
                            " class=move || \" \".to_owned() + &v6864(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v6890: string = string(
                            " stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"",
                        );
                        let v6891: string = string("vec![]");
                        let v6892: Vec<leptos::prelude::AnyView> = vec![];
                        let v6894: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6892);
                        let v6896: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6894);
                        let v6899: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v6890))),
                                            string(">move || { v6896 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6901: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  stroke-linejoin="round" stroke-linecap="round" rx="2" height="18" width="18" y="3" x="3">move || { v6896 }</rect> };
                        let v6903: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6901);
                        let v6911: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
                        let v6912: string = string("vec![]");
                        let v6913: Vec<leptos::prelude::AnyView> = vec![];
                        let v6915: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6913);
                        let v6917: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6915);
                        let v6919: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6911))),
                                            string(">move || { v6917 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6921: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="7.5">move || { v6917 }</circle> };
                        let v6923: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6921);
                        let v6931: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
                        let v6932: string = string("vec![]");
                        let v6933: Vec<leptos::prelude::AnyView> = vec![];
                        let v6935: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6933);
                        let v6937: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6935);
                        let v6939: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6931))),
                                            string(">move || { v6937 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6941: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="16.5">move || { v6937 }</circle> };
                        let v6943: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6941);
                        let v6951: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
                        let v6952: string = string("vec![]");
                        let v6953: Vec<leptos::prelude::AnyView> = vec![];
                        let v6955: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6953);
                        let v6957: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6955);
                        let v6959: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6951))),
                                            string(">move || { v6957 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6961: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="12" cx="12">move || { v6957 }</circle> };
                        let v6963: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6961);
                        let v6971: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
                        let v6972: string = string("vec![]");
                        let v6973: Vec<leptos::prelude::AnyView> = vec![];
                        let v6975: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6973);
                        let v6977: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6975);
                        let v6979: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6971))),
                                            string(">move || { v6977 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6981: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="7.5">move || { v6977 }</circle> };
                        let v6983: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6981);
                        let v6991: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
                        let v6992: string = string("vec![]");
                        let v6993: Vec<leptos::prelude::AnyView> = vec![];
                        let v6995: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6993);
                        let v6997: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6995);
                        let v6999: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6991))),
                                            string(">move || { v6997 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v7001: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="16.5">move || { v6997 }</circle> };
                        let v7003: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v7001);
                        let v7022: string =
                            string("vec![v6903, v6923, v6943, v6963, v6983, v7003]");
                        let v7023: Vec<leptos::prelude::AnyView> =
                            vec![v6903, v6923, v6943, v6963, v6983, v7003];
                        let v7025: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v7023);
                        let v7027: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v7025);
                        let v7029: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v6876))),
                                            string(">move || { v7027 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v7031: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v6864(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v7027 }</svg> };
                        let v7033: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v7031);
                        let v7037: string = string("vec![v7033]");
                        let v7038: Vec<leptos::prelude::AnyView> = vec![v7033];
                        let v7040: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v7038);
                        let v7041 = Func0::new({
                            let v5752 = v5752.clone();
                            move || Dice_ui::closure358(v5752.clone(), ())
                        });
                        {
                            let v7045 = {
                                let clo_49 = Func0::new({
                                    let v1898 = v1898.clone();
                                    move || Dice_ui::closure359(v1898.clone(), ())
                                });
                                Func1::new({
                                    let clo_49 = clo_49.clone();
                                    move |arg_49: ()| clo_49()
                                })
                            };
                            let v7048 = {
                                let clo_50 = Func0::new({
                                    let v1898 = v1898.clone();
                                    move || Dice_ui::closure360(v1898.clone(), ())
                                });
                                Func1::new({
                                    let clo_50 = clo_50.clone();
                                    move |arg_50: ()| clo_50()
                                })
                            };
                            let v7050: string = string(
                                "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v7048(())",
                            );
                            let v7054: string = append(
                                (append(
                                    string(
                                        " aria-current=move || if v7045(()) { \"page\" } else { \"\" }",
                                    ),
                                    (append(
                                        (append(
                                            (append(string(" "), (v7050))),
                                            string(" href=move || v7041()"),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v7056: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7040);
                            let v7065: &str = &*string("Dice");
                            let v7101: std::string::String = String::from(v7065);
                            let v7130: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v7101),
                                );
                            let v7137: string = string("vec![v7056, v7130]");
                            let v7138: Vec<leptos::prelude::AnyView> = vec![v7056, v7130];
                            let v7140: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7138);
                            let v7142: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7140);
                            let v7144: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<a "), (v7054))),
                                                string(">move || { v7142 }</"),
                                            )),
                                            string("a"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7146: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::A, _, _>,
                            > = leptos::prelude::view! { <a  aria-current=move || if v7045(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v7048(()) href=move || v7041()>move || { v7142 }</a> };
                            let v7148: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7146);
                            let v7161: string = string("vec![v7148, v6862, v6628, v6464]");
                            let v7162: Vec<leptos::prelude::AnyView> =
                                vec![v7148, v6862, v6628, v6464];
                            let v7164: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7162);
                            let v7166: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7164);
                            let v7169: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<nav "), (v6277))),
                                                string(">move || { v7166 }</"),
                                            )),
                                            string("nav"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7171: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Nav, _, _>,
                            > = leptos::prelude::view! { <nav  aria-label="Tabs" class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]">move || { v7166 }</nav> };
                            let v7173: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7171);
                            let v7177: string = string("vec![v7173]");
                            let v7178: Vec<leptos::prelude::AnyView> = vec![v7173];
                            let v7180: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7178);
                            let v7182: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7180);
                            let v7184: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v6273))),
                                                string(">move || { v7182 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7186: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 border-t border-gray-200">move || { v7182 }</div> };
                            let v7188: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7186);
                            let v7192: string = string("vec![v7188]");
                            let v7193: Vec<leptos::prelude::AnyView> = vec![v7188];
                            let v7195: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7193);
                            let v7197: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7195);
                            let v7199: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v6271))),
                                                string(">move || { v7197 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7201: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">move || { v7197 }</div> };
                            let v7203: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7201);
                            let v7205: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6269);
                            let v7212: string = string("vec![v7205, v7203]");
                            let v7213: Vec<leptos::prelude::AnyView> = vec![v7205, v7203];
                            let v7215: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7213);
                            let v7217: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7215);
                            let v7219: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5744))),
                                                string(">move || { v7217 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7221: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex">move || { v7217 }</div> };
                            let v7223: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7221);
                            let v7230: string = string("vec![v5742, v7223]");
                            let v7231: Vec<leptos::prelude::AnyView> = vec![v5742, v7223];
                            let v7233: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7231);
                            let v7235: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7233);
                            let v7237: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2275))),
                                                string(">move || { v7235 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7239: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">move || { v7235 }</div> };
                            let v7241: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7239);
                            let v7245: string = string("vec![v7241]");
                            let v7246: Vec<leptos::prelude::AnyView> = vec![v7241];
                            let v7248: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7246);
                            let v7250: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7248);
                            let v7252: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2273))),
                                                string(">move || { v7250 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7254: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 max-[100px]:[overflow-x:auto]">move || { v7250 }</div> };
                            let v7256: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7254);
                            let v7260: string = string("vec![v7256]");
                            let v7261: Vec<leptos::prelude::AnyView> = vec![v7256];
                            let v7263: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7261);
                            let v7265: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7263);
                            let v7267: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1879))),
                                                string(">move || { v7265 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            leptos::prelude::view! { <div  class:dark={move || v1875()} class="flex flex-1">move || { v7265 }</div> }
                        }
                    }
                }
            }
        }
        pub fn method5()
        -> Func1<i32, leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>>
        {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method289(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure361(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(1_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method290(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure361(v0_1.clone(), ())
            })
        }
        pub fn closure362(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            leptos::prelude::Fragment::new(v2)
        }
        pub fn closure363(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(2_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method291(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure363(v0_1.clone(), ())
            })
        }
        pub fn closure364(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(3_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method292(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure364(v0_1.clone(), ())
            })
        }
        pub fn closure365(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(4_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method293(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure365(v0_1.clone(), ())
            })
        }
        pub fn closure4(
            unitVar: (),
            unitVar_1: (),
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v0_1 = Dice_ui::method5();
            let v10: &str = &*string("");
            let v74: std::string::String = Dice_ui::method289(String::from(v10));
            let v75 = Dice_ui::method290(v0_1.clone());
            let v85: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v78()) view= move || v75() path=leptos_router::path!(v74) /> })",
            );
            let v86: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v78()) view= move || v75() path=leptos_router::path!(v74) /> },
                );
            let v96: &str = &*string("/");
            let v160: std::string::String = Dice_ui::method289(String::from(v96));
            let v161 = Dice_ui::method291(v0_1.clone());
            let v169: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v78()) view= move || v161() path=leptos_router::path!(v160) /> })",
            );
            let v170: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v78()) view= move || v161() path=leptos_router::path!(v160) /> },
                );
            let v180: &str = &*string("/*");
            let v244: std::string::String = Dice_ui::method289(String::from(v180));
            let v245 = Dice_ui::method292(v0_1.clone());
            let v253: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v78()) view= move || v245() path=leptos_router::path!(v244) /> })",
            );
            let v254: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v78()) view= move || v245() path=leptos_router::path!(v244) /> },
                );
            let v264: &str = &*string("*");
            let v328: std::string::String = Dice_ui::method289(String::from(v264));
            let v329 = Dice_ui::method293(v0_1);
            let v337: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v78()) view= move || v329() path=leptos_router::path!(v328) /> })",
            );
            let v338: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v78()) view= move || v329() path=leptos_router::path!(v328) /> },
                );
            let v352: string = string("vec![v86, v170, v254, v338]");
            vec![v86, v170, v254, v338]
        }
        pub fn method4() -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>
        {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method294(
            v0_1: Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>,
        ) -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method294(Dice_ui::method4());
            let v11: &str = &*string("leptos.routes / fallback");
            let v47: std::string::String = String::from(v11);
            let v76: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v47));
            let v84: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v76 /> })",
            );
            let v85 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v76 /> },
            );
            let v87: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v85);
            let v91: string = string("vec![v87]");
            let v92: Vec<leptos::prelude::AnyView> = vec![v87];
            leptos::prelude::Fragment::new(v92)
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v8: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v18: &str = &*string("");
            let v54: std::string::String = String::from(v18);
            let v83: leptos::prelude::ArcRwSignal<std::string::String> =
                leptos::prelude::ArcRwSignal::new(v54);
            let v93: &str = &*string("i574n.near");
            let v129: std::string::String = String::from(v93);
            let v170: &str = &*string("luckier.near");
            let v238: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v129)),
                LrcPtr::new((true, String::from(v170))),
            ]);
            let v246: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v238.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v249: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v83,
                l3: leptos::prelude::ArcRwSignal::new(v246),
            });
            let v251: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>> =
                leptos::prelude::ArcRwSignal::new(v249);
            let v253: std::collections::HashMap<
                std::string::String,
                leptos::prelude::ArcRwSignal<bool>,
            > = std::collections::HashMap::new();
            let v256: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v251,
                l1: leptos::prelude::ArcRwSignal::new(v253),
            });
            let v258: bool = true;
            leptos::context::provide_context::<std::sync::Arc<Heap2>>(v256);
            let v264: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v259()) /> })",
            );
            let v265 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v259()) /> },
            );
            leptos::prelude::IntoAny::into_any(v265)
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::prelude::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))()); //;
            ()
        }
        pub fn closure366(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method295() -> Func0<()> {
            Func0::new(move || Dice_ui::closure366((), ()))
        }
        pub fn method296(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(
                (append(string("main / args: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::prelude::document().body();
                let v32: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v40: string = append(
                    (append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v32.clone()),
                    )),
                    string(""),
                );
                let v42: bool = true;
                leptos::logging::log!("{}", v40);
                if let Dice_ui::US0::US0_0(v32_0_0) = &v32 {
                    let v44: string = Dice_ui::method1();
                    let v53: &str = &*v44;
                    let v81: web_sys::HtmlElement = Dice_ui::method2(v32_0_0.clone());
                    v81.set_inner_html(v53);
                    Dice_ui::method3()
                } else {
                    let v83 = Dice_ui::method295();
                    let v86: Box<dyn Fn()> = Dice_ui::method296(Box::new(move || v83()));
                    let v88: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v86);
                    let v90: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v88);
                    let v92: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v90);
                    leptos::prelude::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v92)
                        .unwrap();
                    v88.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_9c940d83::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/async__wasm.rs"]
mod module_763b9e6c;
pub use module_763b9e6c::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/common_wasm.rs"]
mod module_18f1c018;
pub use module_18f1c018::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/crypto_wasm.rs"]
mod module_c0301e36;
pub use module_c0301e36::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/date_time_wasm.rs"]
mod module_e5abed0b;
pub use module_e5abed0b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/file_system_wasm.rs"]
mod module_336d1dc9;
pub use module_336d1dc9::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/lib_wasm.rs"]
mod module_12dde172;
pub use module_12dde172::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/networking_wasm.rs"]
mod module_7e35832b;
pub use module_7e35832b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/platform_wasm.rs"]
mod module_afd02cca;
pub use module_afd02cca::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/runtime_wasm.rs"]
mod module_a3c64389;
pub use module_a3c64389::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/sm_wasm.rs"]
mod module_8f227ecb;
pub use module_8f227ecb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/threading_wasm.rs"]
mod module_e08c16fb;
pub use module_e08c16fb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/trace_wasm.rs"]
mod module_702ddcb4;
pub use module_702ddcb4::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_eb7e4788;
pub use module_eb7e4788::*;
pub mod Polyglot {
    // pub use crate::module_eb7e4788::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
