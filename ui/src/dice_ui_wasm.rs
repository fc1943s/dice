#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_75bc3c80 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::item;
        use fable_library_rust::List_::length as length_1;
        use fable_library_rust::List_::ofArray as ofArray_1;
        use fable_library_rust::List_::List;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::getZero;
        use fable_library_rust::Native_::on_startup;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map as map_1;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        on_startup!();
        use leptos::prelude::*;
        //,);
        on_startup!();
        use leptos::prelude::ElementChild;
        //,);
        on_startup!();
        use leptos::prelude::ClassAttribute;
        //,);
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Hash,
            PartialEq,
            PartialOrd,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::prelude::ArcRwSignal<bool>,
            pub l1: leptos::prelude::ArcRwSignal<bool>,
            pub l2: leptos::prelude::ArcRwSignal<std::string::String>,
            pub l3: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::prelude::ArcRwSignal<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US2 {
            US2_0(std::sync::Arc<rexie::Rexie>),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US3_1,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(wasm_bindgen::JsValue),
            US4_1,
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(serde_json::Value),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US6_1(std::string::String),
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(LrcPtr<Dice_ui::Heap3>),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(Dice_ui::US8),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Option<web_sys::Storage>),
            US9_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(web_sys::Storage),
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Dice_ui::US11),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(Option<std::string::String>),
            US12_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(std::string::String),
            US14_1,
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Dice_ui::US14),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(Dice_ui::US14),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq)]
        pub struct Heap5 {
            pub l0: std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
        }
        impl core::fmt::Display for Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(leptos::prelude::ArcRwSignal<bool>),
            US16_1,
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US17 {
            US17_0(bool),
            US17_1,
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US19 {
            US19_0,
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US18 {
            US18_0,
            US18_1(Dice_ui::US19),
            US18_2,
            US18_3,
            US18_4,
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(leptos_router::location::Url),
            US20_1(std::string::String),
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US21 {
            US21_0(Dice_ui::US18),
            US21_1,
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(leptos::prelude::Fragment),
            US22_1,
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US23 {
            US23_0,
            US23_1,
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap6 {
            pub l0: string,
            pub l1: Dice_ui::US23,
            pub l2: string,
            pub l3: bool,
            pub l4: bool,
        }
        impl core::fmt::Display for Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap7 {
            pub l0: string,
            pub l1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        }
        impl core::fmt::Display for Heap7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap8 {
            pub l0: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        }
        impl core::fmt::Display for Heap8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH0 {
            UH0_0,
            UH0_1(
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
                LrcPtr<Dice_ui::UH0>,
            ),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap9 {
            pub l0: string,
        }
        impl core::fmt::Display for Heap9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap10 {
            pub l0: Vec<string>,
        }
        impl core::fmt::Display for Heap10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(Vec<string>, LrcPtr<Dice_ui::UH1>),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap11 {
            pub l0: std::string::String,
            pub l1: Option<std::string::String>,
        }
        impl core::fmt::Display for Heap11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap12 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Heap12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(LrcPtr<Dice_ui::Heap4>),
            US25_1,
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap13 {
            pub l0: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        }
        impl core::fmt::Display for Heap13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US26 {
            US26_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US26_1,
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Vec<Dice_ui::US25>),
            US28_1(std::string::String),
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Dice_ui::US28),
            US27_1,
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US31 {
            US31_0(string),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1(std::string::String),
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Dice_ui::US30),
            US29_1,
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(Dice_ui::US25),
            US32_1,
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Option<string>),
            US33_1(std::string::String),
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Vec<()>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap14 {
            pub l0: std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
            >,
        }
        impl core::fmt::Display for Heap14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap15 {
            pub l0: std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
            >,
        }
        impl core::fmt::Display for Heap15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Array<Dice_ui::US25>),
            US36_1(std::string::String),
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Dice_ui::US36),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Result<Vec<Option<string>>, std::string::String>),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Vec<Option<string>>),
            US39_1(std::string::String),
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US38 {
            US38_0(Dice_ui::US39),
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Vec<Dice_ui::US31>),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Dice_ui::US41),
            US40_1,
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0(Dice_ui::US31),
            US42_1,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap16 {
            pub l0: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        }
        impl core::fmt::Display for Heap16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap17 {
            pub l0: Dice_ui::US43,
        }
        impl core::fmt::Display for Heap17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US45_1,
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(Dice_ui::US45),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap18 {
            pub l0: Dice_ui::US44,
        }
        impl core::fmt::Display for Heap18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>),
            US47_1,
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(Dice_ui::US47),
            US46_1(std::string::String),
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>),
            US49_1,
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Dice_ui::US49),
            US48_1(std::string::String),
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap19 {
            pub l0: usize,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: std::string::String,
            pub l7: u32,
            pub l8: Array<(std::string::String, Option<std::string::String>)>,
            pub l9: f64,
            pub l10: bool,
            pub l11: f64,
            pub l12: Array<std::string::String>,
        }
        impl core::fmt::Display for Heap19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap20 {
            pub l0: string,
            pub l1: usize,
            pub l2: LrcPtr<Dice_ui::Heap12>,
        }
        impl core::fmt::Display for Heap20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>),
            US50_1(std::string::String),
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap21 {
            pub l0: Dice_ui::US50,
        }
        impl core::fmt::Display for Heap21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap22 {
            pub l0:
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>, std::string::String>,
        }
        impl core::fmt::Display for Heap22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>, std::string::String>,
                LrcPtr<Dice_ui::UH2>,
            ),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<LrcPtr<Dice_ui::UH2>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US55 {
            US55_0(Array<(string, Dice_ui::US23, string, bool, bool)>),
            US55_1,
        }
        impl core::fmt::Display for US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Dice_ui::US55),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap23 {
            pub l0: Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
        }
        impl core::fmt::Display for Heap23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US56 {
            US56_0(Option<Array<(string, Dice_ui::US23, string, bool, bool)>>),
            US56_1(std::string::String),
        }
        impl core::fmt::Display for US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap24 {
            pub l0: std::collections::HashMap<
                std::string::String,
                (
                    std::string::String,
                    Option<std::string::String>,
                    Option<f64>,
                    Option<std::string::String>,
                ),
            >,
        }
        impl core::fmt::Display for Heap24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap25 {
            pub l0: std::string::String,
            pub l1: Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            pub l2: std::string::String,
            pub l3: Array<std::string::String>,
            pub l4: Array<std::string::String>,
            pub l5: std::string::String,
            pub l6: std::string::String,
            pub l7: std::string::String,
            pub l8: std::string::String,
        }
        impl core::fmt::Display for Heap25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap26 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
        }
        impl core::fmt::Display for Heap26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap27 {
            pub l0: std::string::String,
            pub l1: std::string::String,
        }
        impl core::fmt::Display for Heap27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap28 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: u64,
            pub l4: Array<std::string::String>,
            pub l5: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            pub l6: u8,
            pub l7: Array<std::string::String>,
            pub l8: std::collections::HashMap<std::string::String, std::string::String>,
            pub l9: Option<std::string::String>,
            pub l10: Array<(std::string::String, std::string::String)>,
        }
        impl core::fmt::Display for Heap28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap29 {
            pub l0: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        }
        impl core::fmt::Display for Heap29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap30 {
            pub l0: i32,
        }
        impl core::fmt::Display for Heap30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Dice_ui::US14),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US59_1,
        }
        impl core::fmt::Display for US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(Dice_ui::US59),
            US58_1(std::string::String),
        }
        impl core::fmt::Display for US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(crate::model::near::rpc::RpcResponse),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap31 {
            pub l0: std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
            >,
        }
        impl core::fmt::Display for Heap31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(Dice_ui::US58),
            US62_1,
        }
        impl core::fmt::Display for US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US63_1(std::string::String),
        }
        impl core::fmt::Display for US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US64_1,
        }
        impl core::fmt::Display for US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap32 {
            pub l0: bool,
            pub l1: std::string::String,
        }
        impl core::fmt::Display for Heap32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap33 {
            pub l0: i32,
            pub l1: leptos::prelude::ReadSignal<std::string::String>,
            pub l2: leptos::prelude::WriteSignal<std::string::String>,
        }
        impl core::fmt::Display for Heap33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap34 {
            pub l0: i32,
            pub l1: leptos::prelude::ReadSignal<std::string::String>,
        }
        impl core::fmt::Display for Heap34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(leptos::prelude::ArcMemo<Dice_ui::US31>),
            US65_1,
        }
        impl core::fmt::Display for US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            ),
            US66_1,
        }
        impl core::fmt::Display for US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>),
            US67_1,
        }
        impl core::fmt::Display for US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap35 {
            pub l0: leptos::prelude::AnyView,
        }
        impl core::fmt::Display for Heap35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap36 {}
        impl Heap36 {
            pub fn _ctor() -> LrcPtr<Dice_ui::Heap36> {
                ();
                ();
                LrcPtr::new(Dice_ui::Heap36 {})
            }
        }
        impl core::fmt::Display for Heap36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap37 {
            pub l0: string,
            pub l1: Dice_ui::US31,
        }
        impl core::fmt::Display for Heap37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(chrono::DateTime<chrono::Utc>),
            US68_1,
        }
        impl core::fmt::Display for US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US69 {
            US69_0(string),
            US69_1(string),
        }
        impl core::fmt::Display for US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US31>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap38 {
            pub l0: i32,
            pub l1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            pub l2: leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        }
        impl core::fmt::Display for Heap38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap39 {
            pub l0: i32,
            pub l1: i32,
            pub l2: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        }
        impl core::fmt::Display for Heap39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Heap40 {
            pub l0: LrcPtr<(bool, std::string::String)>,
        }
        impl core::fmt::Display for Heap40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap41 {
            pub l0: LrcPtr<(i32, i32)>,
        }
        impl core::fmt::Display for Heap41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US70 {
            US70_0(std::string::String),
            US70_1(std::string::String),
        }
        impl core::fmt::Display for US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method6() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure6((), v))
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method7() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure7((), v))
        }
        pub fn method8(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if (v2) <= (v0_1) {
                v1.clone()
            } else {
                let v8: f64 = (v0_1 as f64) / 2.0_f64;
                let v12: i64 = v8.ceil() as i64;
                let v18: i64 = v8.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some(((v12) - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some(((v2) - (v18)) as i32), Some(((v2) - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn closure8(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
                                            */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v7: */
                std::sync::Arc<rexie::Rexie>, /* = getZero();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v13: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v15: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v17: &std::sync::Arc<rexie::Rexie> = &v15.0;
                    let v19: &std::sync::Arc<rexie::Rexie> = &v13.0;
                    let v21: bool = std::sync::Arc::ptr_eq(v19, v17);
                    v21 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US2 {
            Dice_ui::US2::US2_0(v0_1)
        }
        pub fn method9() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US2> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure9((), v))
        }
        pub fn method10(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure10(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method11() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure10((), v))
        }
        pub fn method12() -> string {
            string("store")
        }
        pub fn closure11(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method13() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure11((), v))
        }
        pub fn method14() -> string {
            string("core-state-heap")
        }
        pub fn closure12(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method15() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure12((), v))
        }
        pub fn closure13(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method16() -> Func1<wasm_bindgen::JsValue, Dice_ui::US4> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure13((), v))
        }
        pub fn method17(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure14(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method18() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure14((), v))
        }
        pub fn closure15(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method19() -> Func1<serde_json::Value, Dice_ui::US5> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure15((), v))
        }
        pub fn method20(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure16(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method21() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure16((), v))
        }
        pub fn closure17(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method22() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method23() -> Func1<Option<Option<LrcPtr<Dice_ui::Heap3>>>, Dice_ui::US6> {
            Func1::new(move |v: Option<Option<LrcPtr<Dice_ui::Heap3>>>| Dice_ui::closure18((), v))
        }
        pub fn closure19(unitVar: (), v0_1: std::string::String) -> Dice_ui::US6 {
            Dice_ui::US6::US6_1(v0_1)
        }
        pub fn method24() -> Func1<std::string::String, Dice_ui::US6> {
            Func1::new(move |v: std::string::String| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method25() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US3> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure20((), v))
        }
        pub fn closure21(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn method26() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US8> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure21((), v))
        }
        pub fn method27() -> web_sys::Window {
            leptos::prelude::window()
        }
        pub fn method28(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure22(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method29() -> Func1<Option<web_sys::Storage>, Dice_ui::US9> {
            Func1::new(move |v: Option<web_sys::Storage>| Dice_ui::closure22((), v))
        }
        pub fn closure23(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US9 {
            Dice_ui::US9::US9_1(v0_1)
        }
        pub fn method30() -> Func1<wasm_bindgen::JsValue, Dice_ui::US9> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US11 {
            Dice_ui::US11::US11_0(v0_1)
        }
        pub fn method31() -> Func1<web_sys::Storage, Dice_ui::US11> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure24((), v))
        }
        pub fn closure25(unitVar: (), v0_1: Dice_ui::US8) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method32() -> Func1<Dice_ui::US8, Dice_ui::US7> {
            Func1::new(move |v: Dice_ui::US8| Dice_ui::closure25((), v))
        }
        pub fn method33(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method34() -> string {
            string("core-state-heap")
        }
        pub fn closure26(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method35() -> Func1<Option<std::string::String>, Dice_ui::US12> {
            Func1::new(move |v: Option<std::string::String>| Dice_ui::closure26((), v))
        }
        pub fn closure27(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US12 {
            Dice_ui::US12::US12_1(v0_1)
        }
        pub fn method36() -> Func1<wasm_bindgen::JsValue, Dice_ui::US12> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure27((), v))
        }
        pub fn method37(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure28(unitVar: (), v0_1: std::string::String) -> Dice_ui::US14 {
            Dice_ui::US14::US14_0(v0_1)
        }
        pub fn method38() -> Func1<std::string::String, Dice_ui::US14> {
            Func1::new(move |v: std::string::String| Dice_ui::closure28((), v))
        }
        pub fn method40(v0_1: string) -> string {
            v0_1
        }
        pub fn closure30(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method41() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure30((), v))
        }
        pub fn closure29(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            let v3: string = Dice_ui::method40(fable_library_rust::String_::fromString(v0_1));
            let v8: &str = &*v3;
            let v29: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v8);
            let v30 = Dice_ui::method41();
            let v35: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v29.map_err(|x| v30(x));
            let v49: Option<LrcPtr<Dice_ui::Heap3>> = v35.ok();
            defaultValue(Dice_ui::US8::US8_1, map(Dice_ui::method26(), v49))
        }
        pub fn method39() -> Func1<std::string::String, Dice_ui::US8> {
            Func1::new(move |v: std::string::String| Dice_ui::closure29((), v))
        }
        pub fn closure31(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            v0_1.l0
        }
        pub fn closure32(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (8) / effect core_state_heap / debug signal_update"));
            v0_1.l1
        }
        pub fn closure33(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            v0_1.l2.clone()
        }
        pub fn closure34(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (10) / effect core_state_heap / data signal_update"));
            v0_1.l3.clone()
        }
        pub fn closure35(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>
        {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading new_arc_memo")
            );
            let v6: std::pin::Pin<
                Box<
                    leptos::prelude::ArcRwSignal<
                        std::collections::HashMap<
                            std::string::String,
                            leptos::prelude::ArcRwSignal<bool>,
                        >,
                    >,
                >,
            > = Box::pin(v0_1.l1.clone());
            leptos::prelude::ArcRwSignal::get_untracked(&v6)
        }
        pub fn method42() -> string {
            string("core-state-heap")
        }
        pub fn method43(
            v0_1: Func1<LrcPtr<Dice_ui::Heap3>, LrcPtr<Dice_ui::Heap5>>,
        ) -> Func1<LrcPtr<Dice_ui::Heap3>, LrcPtr<Dice_ui::Heap5>> {
            v0_1
        }
        pub fn closure36(
            v0_1: Func1<LrcPtr<Dice_ui::Heap3>, LrcPtr<Dice_ui::Heap5>>,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: Func1<LrcPtr<Dice_ui::Heap3>, LrcPtr<Dice_ui::Heap5>> = Dice_ui::method43(v0_1);
            ((move |x| v2(x))(v1)).l0.clone()
        }
        pub fn method44(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure37(unitVar: (), v0_1: leptos::prelude::ArcRwSignal<bool>) -> Dice_ui::US16 {
            Dice_ui::US16::US16_0(v0_1)
        }
        pub fn method45() -> Func1<leptos::prelude::ArcRwSignal<bool>, Dice_ui::US16> {
            Func1::new(move |v: leptos::prelude::ArcRwSignal<bool>| Dice_ui::closure37((), v))
        }
        pub fn closure38(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            true
        }
        pub fn method46(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method47() -> string {
            string("core-state-heap")
        }
        pub fn method48(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure39(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method49(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure39(v0_1.clone(), ())
            })
        }
        pub fn closure40(v0_1: leptos_router::location::Location, unitVar: ()) -> string {
            let v2: leptos::prelude::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = leptos::prelude::Memo::get(&v2);
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::prelude::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = leptos::prelude::Memo::get(&v8);
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                (v6),
                (if (v12.clone()) == string("") {
                    string("")
                } else {
                    concat(new_array(&[string("?"), v12]))
                }),
            )
        }
        pub fn method50(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method51(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure41(unitVar: (), v0_1: leptos_router::location::Url) -> Dice_ui::US20 {
            Dice_ui::US20::US20_0(v0_1)
        }
        pub fn method52() -> Func1<leptos_router::location::Url, Dice_ui::US20> {
            Func1::new(move |v: leptos_router::location::Url| Dice_ui::closure41((), v))
        }
        pub fn closure42(unitVar: (), v0_1: std::string::String) -> Dice_ui::US20 {
            Dice_ui::US20::US20_1(v0_1)
        }
        pub fn method53() -> Func1<std::string::String, Dice_ui::US20> {
            Func1::new(move |v: std::string::String| Dice_ui::closure42((), v))
        }
        pub fn closure44(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method54() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure44((), arg10_0040)
            })
        }
        pub fn method55(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure43(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v5.l3.clone());
            let v10: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v8);
            let v13: bool = true;
            let _vec_map: Vec<_> = v10
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    //;
                    let v15: LrcPtr<(bool, std::string::String)> = x;
                    let v23: bool = true;
                    v15.0.clone()
                })
                .collect::<Vec<_>>();
            let v25: Vec<(bool, std::string::String)> = _vec_map;
            let v26 = Dice_ui::method54();
            let v27: Vec<(bool, std::string::String)> = Dice_ui::method55(v25);
            let v29: Vec<(bool, std::string::String)> = v27
                .into_iter()
                .filter(|x| v26(x.clone().clone()))
                .collect::<Vec<_>>();
            let v31: bool = true;
            let _vec_map: Vec<_> = v29
                .into_iter()
                .map(|x| {
                    //;
                    let patternInput: (bool, std::string::String) = x;
                    let v36: bool = true;
                    patternInput.1.clone()
                })
                .collect::<Vec<_>>();
            let v38: Vec<std::string::String> = _vec_map;
            let v40: bool = true;
            let _vec_map: Vec<_> = v38
                .into_iter()
                .map(|x| {
                    //;
                    let v42: std::string::String = x;
                    let v44: string = fable_library_rust::String_::fromString(v42);
                    let v46: bool = true;
                    v44
                })
                .collect::<Vec<_>>();
            let v48: Vec<string> = _vec_map;
            let v54: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("use_transactions.render (2) / accounts new_arc_memo / result: "),
                        sprintf!("{:?}", v48.clone()),
                    )),
                    string(""),
                ),
            );
            let v56: bool = true;
            leptos::logging::log!("{}", v54);
            v48
        }
        pub fn closure45(
            v0_1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<string> = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v11: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                    l0: append(
                        (append(string("https://api3.nearblocks.io/v1/account/"), (()))),
                        string(""),
                    ),
                    l1: Dice_ui::US23::US23_0,
                    l2: string(""),
                    l3: false,
                    l4: true,
                });
                let v13: bool = true;
                v11 /*;
                    let v15: bool = */
            }); //;
            let v17: Func1<string, LrcPtr<Dice_ui::Heap6>> = _func1_from_v3;
            let v19: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                v2.into_iter().map(|x| v17(x.clone())).collect::<Vec<_>>();
            let v21: Array<(string, Dice_ui::US23, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v19.clone());
            let v27: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("use_transactions.render (3) / accounts_metadata new_arc_memo / result: "),
                                                sprintf!("{:?}",
                                                         v21.clone()))),
                                        string("")));
            let v29: bool = true;
            leptos::logging::log!("{}", v27);
            v21
        }
        pub fn method57(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn method56(v0_1: LrcPtr<Dice_ui::Heap0>) -> Vec<i32> {
            let v1: i32 = v0_1.l3;
            let v2: Array<i32> = new_init(&0_i32, v1);
            let v3: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method57(v1, v3.clone()) {
                let v5: i32 = v3.l0.get().clone();
                v2.get_mut()[v5 as usize] = v5;
                {
                    let v6: i32 = (v5) + 1_i32;
                    v3.l0.set(v6);
                    ()
                }
            }
            v2.clone().to_vec()
        }
        pub fn closure46(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v6.l3.clone());
            let v11: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v9);
            let v13: Vec<string> = leptos::prelude::ArcMemo::get(&v1);
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: string = ();
                let v19: Vec<i32> = Dice_ui::method56(v11);
                let v22: bool = true;
                let _func1_from_v20 = Func1::from(move |value| {
                    //;
                    let v29: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                        l0: append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                string("https://api3.nearblocks.io/v1/account/"),
                                                (v18.clone()),
                                            )),
                                            string("/txns?&order=desc&page="),
                                        )),
                                        (toString((()) + 1_i32)),
                                    )),
                                    string("&per_page="),
                                )),
                                (toString(25_i32)),
                            )),
                            string(""),
                        ),
                        l1: Dice_ui::US23::US23_0,
                        l2: string(""),
                        l3: false,
                        l4: true,
                    });
                    let v31: bool = true;
                    v29 /*;
                        let v33: bool = */
                }); //;
                let v35: Func1<i32, LrcPtr<Dice_ui::Heap6>> = _func1_from_v20;
                let v38: LrcPtr<Dice_ui::Heap7> = LrcPtr::new(Dice_ui::Heap7 {
                    l0: v18,
                    l1: v19.into_iter().map(|x| v35(x.clone())).collect::<Vec<_>>(),
                });
                let v40: bool = true;
                v38 /*;
                    let v42: bool = */
            }); //;
            let v44: Func1<string, LrcPtr<Dice_ui::Heap7>> = _func1_from_v14;
            let v46: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                v13.into_iter().map(|x| v44(x.clone())).collect::<Vec<_>>();
            let v52: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("use_transactions.render (4) / accounts_requests new_arc_memo / result: "),
                                                sprintf!("{:?}",
                                                         v46.clone()))),
                                        string("")));
            let v54: bool = true;
            leptos::logging::log!("{}", v52);
            v46
        }
        pub fn closure49(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
            v1: LrcPtr<Dice_ui::UH0>,
        ) -> LrcPtr<Dice_ui::UH0> {
            LrcPtr::new(Dice_ui::UH0::UH0_1(v0_1, v1))
        }
        pub fn closure48(
            unitVar: (),
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH0>| Dice_ui::closure49(v0_1.clone(), v)
            })
        }
        pub fn method58() -> Func1<
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
            Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>>,
        > {
            Func1::new(move |v: Vec<(string, Dice_ui::US23, string, bool, bool)>| {
                Dice_ui::closure48((), v)
            })
        }
        pub fn method60(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method61(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method59(
            v0_1: LrcPtr<Dice_ui::UH0>,
            v1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH0>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                MutCell::new(v1.clone());
            '_method59: loop {
                break '_method59 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH0::UH0_0 => v1.get().clone(),
                    Dice_ui::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method60(
                                match v0_1.get().clone().as_ref() {
                                    Dice_ui::UH0::UH0_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            );
                        let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method61(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH0> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH0::UH0_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<(string, Dice_ui::US23, string, bool, bool)> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method59;
                        }
                    }
                });
            }
        }
        pub fn closure47(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v9: LrcPtr<Dice_ui::Heap8> = LrcPtr::new(Dice_ui::Heap8 { l0: (()).1.clone() });
                let v11: bool = true;
                v9 /*;
                   let v13: bool = */
            }); //;
            let v15: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                LrcPtr<Dice_ui::Heap8>,
            > = _func1_from_v3;
            let v17: Vec<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                v2.into_iter().map(|x| v15(x.clone())).collect::<Vec<_>>();
            let v20: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US23, string, bool, bool)>().to_vec();
            let v23: List<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v17.clone()));
            let v53: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method59(
                foldBack(
                    Func2::new(
                        move |b0: Vec<(string, Dice_ui::US23, string, bool, bool)>,
                              b1: LrcPtr<Dice_ui::UH0>| {
                            (Dice_ui::method58())(b0)(b1)
                        },
                    ),
                    v23,
                    LrcPtr::new(Dice_ui::UH0::UH0_0),
                ),
                v20,
            );
            let v59: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (5) / txns_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v53.clone()),
                    )),
                    string(""),
                ),
            );
            let v61: bool = true;
            leptos::logging::log!("{}", v59);
            v53
        }
        pub fn closure52(v0_1: Vec<string>, v1: LrcPtr<Dice_ui::UH1>) -> LrcPtr<Dice_ui::UH1> {
            LrcPtr::new(Dice_ui::UH1::UH1_1(v0_1, v1))
        }
        pub fn closure51(
            unitVar: (),
            v0_1: Vec<string>,
        ) -> Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH1>| Dice_ui::closure52(v0_1.clone(), v)
            })
        }
        pub fn method62() -> Func1<Vec<string>, Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>>> {
            Func1::new(move |v: Vec<string>| Dice_ui::closure51((), v))
        }
        pub fn method64(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method65(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method63(v0_1: LrcPtr<Dice_ui::UH1>, v1: Vec<string>) -> Vec<string> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH1>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<string>> = MutCell::new(v1.clone());
            '_method63: loop {
                break '_method63 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH1::UH1_0 => v1.get().clone(),
                    Dice_ui::UH1::UH1_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<string> = Dice_ui::method64(
                            match v0_1.get().clone().as_ref() {
                                Dice_ui::UH1::UH1_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v5: Vec<string> = Dice_ui::method65(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH1> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH1::UH1_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<string> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method63;
                        }
                    }
                });
            }
        }
        pub fn closure50(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) = ();
                let v11: bool = true;
                let _func1_from_v9 = Func1::from(move |value| {
                    //;
                    let patternInput_1: (string, Dice_ui::US23, string, bool, bool) = ();
                    let v18: LrcPtr<Dice_ui::Heap9> = LrcPtr::new(Dice_ui::Heap9 {
                        l0: patternInput.0.clone(),
                    });
                    let v20: bool = true;
                    v18 /*;
                        let v22: bool = */
                }); //;
                let v24: Func1<
                    (string, Dice_ui::US23, string, bool, bool),
                    LrcPtr<Dice_ui::Heap9>,
                > = _func1_from_v9;
                let v27: LrcPtr<Dice_ui::Heap10> = LrcPtr::new(Dice_ui::Heap10 {
                    l0: patternInput
                        .1
                        .clone()
                        .into_iter()
                        .map(|x| v24(x.clone()))
                        .collect::<Vec<_>>(),
                });
                let v29: bool = true;
                v27 /*;
                    let v31: bool = */
            }); //;
            let v33: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                LrcPtr<Dice_ui::Heap10>,
            > = _func1_from_v3;
            let v35: Vec<Vec<string>> = v2.into_iter().map(|x| v33(x.clone())).collect::<Vec<_>>();
            let v38: Vec<string> = new_empty::<string>().to_vec();
            let v41: List<Vec<string>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v35.clone()));
            let v71: Vec<string> = Dice_ui::method63(
                foldBack(
                    Func2::new(move |b0: Vec<string>, b1: LrcPtr<Dice_ui::UH1>| {
                        (Dice_ui::method62())(b0)(b1)
                    }),
                    v41,
                    LrcPtr::new(Dice_ui::UH1::UH1_0),
                ),
                v38,
            );
            let v73: Array<string> = fable_library_rust::NativeArray_::array_from(v71.clone());
            let v79: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (6) / urls_accounts new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v73.clone()),
                    )),
                    string(""),
                ),
            );
            let v81: bool = true;
            leptos::logging::log!("{}", v79);
            v73
        }
        pub fn method66(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure54(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1.clone())
        }
        pub fn method67() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure54((), v))
        }
        pub fn method68(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure53(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::nearblocks::Txn = ();
                let v9: std::string::String = v7.clone().receipt_id;
                let v11: std::string::String = v7.clone().predecessor_account_id;
                let v13: std::string::String = v7.clone().receiver_account_id;
                let v15: std::string::String = v7.clone().transaction_hash;
                let v17: std::string::String = v7.clone().included_in_block_hash;
                let v19: std::string::String = v7.clone().block_timestamp;
                let v21: crate::model::near::nearblocks::Block = v7.clone().block;
                let v23: u32 = v21.block_height;
                let v25: Vec<crate::model::near::nearblocks::Action> = v7.clone().actions;
                let v28: bool = true;
                let _func1_from_v26 = Func1::from(move |value| {
                    //;
                    let v30: crate::model::near::nearblocks::Action = ();
                    let v35: LrcPtr<Dice_ui::Heap11> = LrcPtr::new(Dice_ui::Heap11 {
                        l0: v30.clone().action,
                        l1: v30.method,
                    });
                    let v37: bool = true;
                    v35 /*;
                        let v39: bool = */
                }); //;
                let v41: Func1<crate::model::near::nearblocks::Action, LrcPtr<Dice_ui::Heap11>> =
                    _func1_from_v26;
                let v43: Vec<(std::string::String, Option<std::string::String>)> =
                    v25.into_iter().map(|x| v41(x.clone())).collect::<Vec<_>>();
                let v46: Array<(std::string::String, Option<std::string::String>)> =
                    Dice_ui::method66(fable_library_rust::NativeArray_::array_from(v43.clone()));
                let v48: crate::model::near::nearblocks::ActionsAgg = v7.clone().actions_agg;
                let v50: f64 = v48.deposit;
                let v52: crate::model::near::nearblocks::Outcomes = v7.clone().outcomes;
                let v54: bool = v52.status;
                let v56: crate::model::near::nearblocks::OutcomesAgg = v7.clone().outcomes_agg;
                let v58: f64 = v56.transaction_fee;
                let v60: Option<Vec<std::string::String>> = v7.logs;
                let v78: LrcPtr<Dice_ui::Heap12> = LrcPtr::new(Dice_ui::Heap12 {
                    l0: v9,
                    l1: v11,
                    l2: v13,
                    l3: v15,
                    l4: v17,
                    l5: v19,
                    l6: v23,
                    l7: v46,
                    l8: v50,
                    l9: v54,
                    l10: v58,
                    l11: defaultValue(
                        new_empty::<std::string::String>(),
                        map(Dice_ui::method67(), v60),
                    ),
                });
                let v80: bool = true;
                v78 /*;
                    let v82: bool = */
            }); //;
            let v84: Func1<crate::model::near::nearblocks::Txn, LrcPtr<Dice_ui::Heap12>> =
                _func1_from_v3;
            let v86: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2.into_iter().map(|x| v84(x.clone())).collect::<Vec<_>>();
            Dice_ui::method68(fable_library_rust::NativeArray_::array_from(v86.clone()))
        }
        pub fn closure55(
            v0_1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::get(&v0_1);
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn method70(v0_1: string) -> string {
            v0_1
        }
        pub fn method71(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure56(
            v0_1: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method28(Dice_ui::method27());
            let v6 = Dice_ui::method29();
            let v7 = Dice_ui::method30();
            let v8: Dice_ui::US9 = match &v5 {
                Err(v5_1_0) => v7(v5_1_0.clone()),
                Ok(v5_0_0) => v6(v5_0_0.clone()),
            };
            let v31: Dice_ui::US10 = match &v8 {
                Dice_ui::US9::US9_0(v8_0_0) => Dice_ui::US10::US10_0(defaultValue(
                    Dice_ui::US11::US11_1,
                    map(Dice_ui::method31(), v8_0_0.clone()),
                )),
                Dice_ui::US9::US9_1(v8_1_0) => Dice_ui::US10::US10_1(v8_1_0.clone()),
            };
            let v39: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US10::US10_0(v31_0_0) = &v31 {
                    if let Dice_ui::US11::US11_0(v31_0_0) = &v31_0_0 {
                        leptos::prelude::ArcLocalResource::get(&v0_1)
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v45: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v39.clone()),
                    )),
                    string(""),
                ),
            );
            let v47: bool = true;
            leptos::logging::log!("{}", v45);
            v39
        }
        pub fn closure57(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method72(
        ) -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US26>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure57((), v)
                },
            )
        }
        pub fn closure58(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US24 {
            Dice_ui::US24::US24_0(v0_1)
        }
        pub fn method73() -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Dice_ui::US24> {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure58((), v))
        }
        pub fn closure59(unitVar: (), v0_1: std::string::String) -> Dice_ui::US24 {
            Dice_ui::US24::US24_1(v0_1)
        }
        pub fn method74() -> Func1<std::string::String, Dice_ui::US24> {
            Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))
        }
        pub fn closure60(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn method75() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US25> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure60((), v))
        }
        pub fn closure63(unitVar: (), v0_1: Dice_ui::US25) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method77() -> Func1<Dice_ui::US25, Dice_ui::US32> {
            Func1::new(move |v: Dice_ui::US25| Dice_ui::closure63((), v))
        }
        pub fn method78(v0_1: Dice_ui::US23) -> Dice_ui::US23 {
            v0_1
        }
        pub fn method79(v0_1: string) -> string {
            v0_1
        }
        pub fn method80(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method81(v0_1: string) -> string {
            v0_1
        }
        pub fn method82(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method83(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method84(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure64(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method85() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure64((), v))
        }
        pub fn closure62(
            v0_1: Dice_ui::US27,
            v1: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US23 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(
                /*;
                let v10: bool = */
                async move {
                    /*;
                    let v12: bool = */
 //;
                    let v58: Dice_ui::US29 = match &v0_1 {
                        Dice_ui::US27::US27_0(v0_1_0_0) => {
                            let v13: Dice_ui::US28 = match &v0_1 {
                                Dice_ui::US27::US27_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            Dice_ui::US29::US29_0(match &v13 {
                                Dice_ui::US28::US28_0(v13_0_0) => {
                                    let v17: Option<Dice_ui::US25> = tryItem(
                                        v1,
                                        fable_library_rust::NativeArray_::array_from(
                                            v13_0_0.clone().clone(),
                                        ),
                                    );
                                    let v31: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method77(), v17),
                                    );
                                    let v41: Dice_ui::US25 =
                                        if let Dice_ui::US32::US32_0(v31_0_0) = &v31 {
                                            let v35: Dice_ui::US25 = v31_0_0.clone();
                                            if let Dice_ui::US25::US25_0(v35_0_0) = &v35 {
                                                Dice_ui::US25::US25_0(v35_0_0.clone())
                                            } else {
                                                Dice_ui::US25::US25_1
                                            }
                                        } else {
                                            Dice_ui::US25::US25_1
                                        };
                                    Dice_ui::US30::US30_0(match &v41 {
                                        Dice_ui::US25::US25_0(v41_0_0) => Dice_ui::US31::US31_0(
                                            fable_library_rust::String_::fromString(
                                                (match &v41 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                                .l0
                                                .clone(),
                                            ),
                                        ),
                                        _ => Dice_ui::US31::US31_1,
                                    })
                                }
                                Dice_ui::US28::US28_1(v13_1_0) => {
                                    Dice_ui::US30::US30_1(v13_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US29::US29_1,
                    };
                    let v63: string =
                        Dice_ui::method8(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                    let v68: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v0_1.clone()));
                    let v73: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v58.clone()));
                    let v98: bool = if v6 {
                        true
                    } else {
                        if let Dice_ui::US27::US27_0(v0_1_0_0) = &v0_1 {
                            let v74: Dice_ui::US28 = v0_1_0_0.clone();
                            if let Dice_ui::US28::US28_0(v74_0_0) = &v74 {
                                if (get_Count(fable_library_rust::NativeArray_::array_from(
                                    v74_0_0.clone().clone(),
                                ))) == 0_i32
                                {
                                    false
                                } else {
                                    if let Dice_ui::US29::US29_0(v58_0_0) = &v58 {
                                        let v80: Dice_ui::US30 = v58_0_0.clone();
                                        if let Dice_ui::US30::US30_0(v80_0_0) = &v80 {
                                            if let Dice_ui::US31::US31_1 = &v80_0_0 {
                                                true
                                            } else {
                                                false
                                            }
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                }
                            } else {
                                if let Dice_ui::US29::US29_0(v58_0_0) = &v58 {
                                    let v86: Dice_ui::US30 = v58_0_0.clone();
                                    if let Dice_ui::US30::US30_0(v86_0_0) = &v86 {
                                        if let Dice_ui::US31::US31_1 = &v86_0_0 {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US29::US29_0(v58_0_0) = &v58 {
                                let v92: Dice_ui::US30 = v58_0_0.clone();
                                if let Dice_ui::US30::US30_0(v92_0_0) = &v92 {
                                    if let Dice_ui::US31::US31_1 = &v92_0_0 {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    };
                    let v99: string =
                append((append((append((append((append((append((append((append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                               (v68))),
                                                                       string(" / state_data\': "))),
                                                               (v73))),
                                                       string(" / request: "))),
                                               (v63))),
                                       string(" / should_fetch: "))),
                               (ofBoolean(v98)))), string(""));
                    let v101: bool = true;
                    leptos::logging::log!("{}", v99);
                    let v419: Dice_ui::US33 = if (v98) == false {
                        Dice_ui::US33::US33_0(None::<string>)
                    } else {
                        let v105: Dice_ui::US23 = Dice_ui::method78(v3);
                        let v211: reqwest_wasm::RequestBuilder = match &v105 {
                            Dice_ui::US23::US23_1 => {
                                let v158: string = Dice_ui::method81(v2.clone());
                                let v163: &str = &*v158;
                                let v207: std::string::String =
                                    Dice_ui::method82(String::from(v163));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .post(v207)
                            }
                            _ => {
                                let v106: string = Dice_ui::method79(v2.clone());
                                let v111: &str = &*v106;
                                let v155: std::string::String =
                                    Dice_ui::method80(String::from(v111));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .get(v155)
                            }
                        };
                        let v216: &str = &*_arg.2.clone();
                        let v240: std::string::String = String::from(v216);
                        let v261: reqwest_wasm::RequestBuilder =
                            reqwest_wasm::RequestBuilder::body(v211, v240);
                        let v370: reqwest_wasm::RequestBuilder =
                            Dice_ui::method84(if (v5) == false {
                                v261
                            } else {
                                let v266: std::string::String =
                                    reqwest_wasm::header::CONTENT_TYPE.to_string();
                                let v268: string = fable_library_rust::String_::fromString(v266);
                                let v269: reqwest_wasm::RequestBuilder = Dice_ui::method83(v261);
                                let v274: &str = &*v268;
                                let v298: std::string::String = String::from(v274);
                                let v323: &str = &*string("application/json");
                                let v347: std::string::String = String::from(v323);
                                reqwest_wasm::RequestBuilder::header(v269, v298, v347)
                            });
                        let v372: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                                >,
                            >,
                        > = Box::pin(reqwest_wasm::RequestBuilder::send(v370));
                        let v374: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v372.await;
                        let v375 = Dice_ui::method85();
                        let v380: Result<reqwest_wasm::Response, std::string::String> =
                            v374.map_err(|x| v375(x));
                        let v391: reqwest_wasm::Response = v380?;
                        let v393: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<std::string::String, reqwest_wasm::Error>,
                                >,
                            >,
                        > = Box::pin(reqwest_wasm::Response::text(v391));
                        let v395: Result<std::string::String, reqwest_wasm::Error> = v393.await;
                        let v396 = Dice_ui::method85();
                        let v401: Result<std::string::String, std::string::String> =
                            v395.map_err(|x| v396(x));
                        let v412: std::string::String = v401?;
                        Dice_ui::US33::US33_0(Some(fable_library_rust::String_::fromString(v412)))
                    };
                    let v425: Result<Option<string>, std::string::String> = match &v419 {
                        Dice_ui::US33::US33_0(v419_0_0) => {
                            Ok::<Option<string>, std::string::String>(v419_0_0.clone())
                        }
                        Dice_ui::US33::US33_1(v419_1_0) => {
                            Err::<Option<string>, std::string::String>(v419_1_0.clone())
                        }
                    };
                    let v428: string = string("}");
                    let v433: bool = true;
                    let v425 = v425;
                    let v438: string = append(
                        (append(
                            (append((append(string("true; v425 "), (v428))), string("); "))),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v439: bool = true;
                    v425
                },
            ); // rust.fix_closure';
            let v441 = __future_init;
            v441
        }
        pub fn closure61(
            v0_1: Dice_ui::US27,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure62(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method76(
            v0_1: Dice_ui::US27,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure61(v0_1.clone(), v)
            })
        }
        pub fn method86(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method87(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method88(v0_1: string) -> string {
            v0_1
        }
        pub fn closure65(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method89() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure65((), v))
        }
        pub fn method90(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method91(
            v0_1: Func1<LrcPtr<Dice_ui::Heap4>, LrcPtr<Dice_ui::Heap15>>,
        ) -> Func1<LrcPtr<Dice_ui::Heap4>, LrcPtr<Dice_ui::Heap15>> {
            v0_1
        }
        pub fn closure66(
            v0_1: Func1<LrcPtr<Dice_ui::Heap4>, LrcPtr<Dice_ui::Heap15>>,
            v1: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v2: Func1<LrcPtr<Dice_ui::Heap4>, LrcPtr<Dice_ui::Heap15>> =
                Dice_ui::method91(v0_1);
            ((move |x| v2(x))(v1)).l0.clone()
        }
        pub fn closure68(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US37 {
            Dice_ui::US37::US37_0(v0_1)
        }
        pub fn method92() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US37>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure68((), v)
            })
        }
        pub fn closure69(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US39 {
            Dice_ui::US39::US39_0(v0_1)
        }
        pub fn method93() -> Func1<Vec<Option<string>>, Dice_ui::US39> {
            Func1::new(move |v: Vec<Option<string>>| Dice_ui::closure69((), v))
        }
        pub fn closure70(unitVar: (), v0_1: std::string::String) -> Dice_ui::US39 {
            Dice_ui::US39::US39_1(v0_1)
        }
        pub fn method94() -> Func1<std::string::String, Dice_ui::US39> {
            Func1::new(move |v: std::string::String| Dice_ui::closure70((), v))
        }
        pub fn closure71(unitVar: (), v0_1: string) -> Dice_ui::US31 {
            Dice_ui::US31::US31_0(v0_1)
        }
        pub fn method95() -> Func1<string, Dice_ui::US31> {
            Func1::new(move |v: string| Dice_ui::closure71((), v))
        }
        pub fn closure74(unitVar: (), v0_1: Dice_ui::US31) -> Dice_ui::US42 {
            Dice_ui::US42::US42_0(v0_1)
        }
        pub fn method97() -> Func1<Dice_ui::US31, Dice_ui::US42> {
            Func1::new(move |v: Dice_ui::US31| Dice_ui::closure74((), v))
        }
        pub fn closure75(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method98(
        ) -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure75((), v))
        }
        pub fn method99(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure73(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v51: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method77(), v10));
                            let v34: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US25 = v24_0_0.clone();
                                if let Dice_ui::US25::US25_0(v28_0_0) = &v28 {
                                    Dice_ui::US25::US25_0(v28_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v34 {
                                Dice_ui::US25::US25_0(v34_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v62: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v51.clone()))),
                )),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v90: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method97(), v76));
                    if let Dice_ui::US42::US42_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US31 = v90_0_0.clone();
                        if let Dice_ui::US31::US31_0(v94_0_0) = &v94 {
                            Dice_ui::US31::US31_0(v94_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method40(v104_0_0.clone());
                let v111: &str = &*v106;
                let v132: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v133 = Dice_ui::method41();
                let v138: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v132.map_err(|x| v133(x));
                let v148 = Dice_ui::method98();
                let v149: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method99(v138);
                v149.map(|x| v148(x))
            } else {
                if let Dice_ui::US29::US29_0(v51_0_0) = &v51 {
                    let v152: Dice_ui::US30 = v51_0_0.clone();
                    if let Dice_ui::US30::US30_0(v152_0_0) = &v152 {
                        let v153: Dice_ui::US31 = v152_0_0.clone();
                        if let Dice_ui::US31::US31_0(v153_0_0) = &v153 {
                            let v155: string = Dice_ui::method40(v153_0_0.clone());
                            let v160: &str = &*v155;
                            let v181: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v160);
                            let v182 = Dice_ui::method41();
                            let v187: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v181.map_err(|x| v182(x));
                            let v197 = Dice_ui::method98();
                            let v198: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method99(v187);
                            v198.map(|x| v197(x))
                        } else {
                            let v204: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                )),
                                string(""),
                            );
                            let v206: bool = true;
                            leptos::logging::log!("{}", v204);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v213: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            )),
                            string(""),
                        );
                        let v215: bool = true;
                        leptos::logging::log!("{}", v213);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v222: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104.clone(), v51.clone())),
                        )),
                        string(""),
                    );
                    let v224: bool = true;
                    leptos::logging::log!("{}", v222);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure72(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure73(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method96(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure72(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure67(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v9: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v27: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method72(), v13));
            let v71: Dice_ui::US35 = match &v27 {
                Dice_ui::US26::US26_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v32 = Dice_ui::method73();
                    let v33 = Dice_ui::method74();
                    let v34: Dice_ui::US24 = match &v31 {
                        Err(v31_1_0) => v33(v31_1_0.clone()),
                        Ok(v31_0_0) => v32(v31_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v34 {
                        Dice_ui::US24::US24_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method75(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v60.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v34_1_0) => Dice_ui::US36::US36_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v77: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v71.clone()))),
                )),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                leptos::prelude::ArcLocalResource::get(&v2);
            let v95: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method92(), v81));
            let v106: Dice_ui::US38 = match &v95 {
                Dice_ui::US37::US37_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v100 = Dice_ui::method93();
                    let v101 = Dice_ui::method94();
                    Dice_ui::US38::US38_0(match &v99 {
                        Err(v99_1_0) => v101(v99_1_0.clone()),
                        Ok(v99_0_0) => v100(v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v142: Dice_ui::US40 = match &v106 {
                Dice_ui::US38::US38_0(v106_0_0) => {
                    let v107: Dice_ui::US39 = match &v106 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v107 {
                        Dice_ui::US39::US39_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method95(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v107_1_0) => Dice_ui::US41::US41_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v145: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v149: Dice_ui::US41 = match &v142 {
                Dice_ui::US40::US40_0(v142_0_0) => match &v142 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v145.clone()),
            };
            let v214: bool = match &v149 {
                Dice_ui::US41::US41_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US31 = x;
                        let v207: bool = if let Dice_ui::US31::US31_0(v154_0_0) = &v154 {
                            let v160: &str = &*v154_0_0.clone();
                            let v204: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v206: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v204.clone());
                            true
                        } else {
                            false
                        };
                        let v209: bool = true;
                        let v211: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v215 = Dice_ui::method96(v71, v149.clone());
            let v216: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method86(v5);
            let v218: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v216
                .iter()
                .enumerate()
                .map(|(i, x)| v215(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v220: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v218.clone());
            let v226: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v220.clone()),
                    )),
                    string(""),
                ),
            );
            let v228: bool = true;
            leptos::logging::log!("{}", v226);
            v220
        }
        pub fn method101(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure77(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method101(v0_1), v1)
        }
        pub fn method100(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure77(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method102(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn closure76(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> = leptos::prelude::pending(&v1.clone()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> = leptos::prelude::pending(&v2.clone()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::get(&v1);
            let v27: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcLocalResource::get(&v2);
            let v46: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method72(), v32));
            let v90: Dice_ui::US35 = match &v46 {
                Dice_ui::US26::US26_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v51 = Dice_ui::method73();
                    let v52 = Dice_ui::method74();
                    let v53: Dice_ui::US24 = match &v50 {
                        Err(v50_1_0) => v52(v50_1_0.clone()),
                        Ok(v50_0_0) => v51(v50_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v53 {
                        Dice_ui::US24::US24_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method75(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v79.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v53_1_0) => Dice_ui::US36::US36_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v95: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v95))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v100))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v107: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v105.to_vec();
            let v110: bool = true;
            let _func1_from_v108 = Func1::from(move |value| {
                //;
                let v112: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = ();
                let v113 = Dice_ui::method100(v0_1);
                let v114: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = Dice_ui::method102(v112);
                let v117: LrcPtr<Dice_ui::Heap16> = LrcPtr::new(Dice_ui::Heap16 {
                    l0: v114.map(|x| v113(x)),
                });
                let v119: bool = true;
                v117 /*;
                     let v121: bool = */
            }); //;
            let v123: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                LrcPtr<Dice_ui::Heap16>,
            > = _func1_from_v108;
            let v125: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| v123(x.clone()))
                .collect::<Vec<_>>();
            let v131: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v125.clone()),
                    )),
                    string(""),
                ),
            );
            let v133: bool = true;
            leptos::logging::log!("{}", v131);
            v125
        }
        pub fn method69(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
 //;
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
 //;
                                let v29: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v38: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v50: string = string("}");
                                let v55: bool = true;
                                let v45 = v38;
                                let v60: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; v45 "), (v50))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v61: bool = true;
                                v45
                            },
                        ); // rust.fix_closure';
                        let v63 = __future_init;
                        let v65: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v63;
                        let v67: Result<rexie::Rexie, std::string::String> = v65.await;
                        let v72: rexie::Rexie = v67.unwrap();
                        let v83: rexie::Rexie = (Dice_ui::method7())(v72);
                        let v85: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v83);
                        let v91: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v85.clone()))),
                                        string("")));
                        let v93: bool = true;
                        leptos::logging::log!("{}", v91);
                        let v94: string = string("}");
                        let v99: bool = true;
                        let v85 = v85;
                        let v104: string = append(
                            (append(
                                (append((append(string("true; v85 "), (v94))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v105: bool = true;
                        v85
                    },
                ); // rust.fix_closure';
                let v107 = __future_init;
                let v109: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v107;
                let v111: bool = true;
                v109 /*;
                     let v113: bool = */
            }); //;
            let v115: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v117: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|_| async move { v115().await });
            let v120: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v117 = v117.clone();
                    move || Dice_ui::closure55(v117.clone(), ())
                })()
            });
            let v123: bool = true;
            let _func0_from_v121 = Func0::from(move || {
                //;
                let v125: Option<std::sync::Arc<rexie::Rexie>> =
                    leptos::prelude::ArcLocalResource::get(&v117.clone());
                let v127: bool = true;
                let _optionm_map_ = v125.map(|x| {
                    //;
                    let v129: std::sync::Arc<rexie::Rexie> = x;
                    let v132: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v129);
                    let v134: bool = true;
                    v132
                });
                let v136: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v138: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v140: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v142: bool = */
                    async move {
                        /*;
                        let v144: bool = */
 //;
                        let v145: string = sprintf!("{:?}", v136.clone());
                        let v153: string =
                append((append((append((append(string("state_core.use_requests (3) / state_data_resource new_local_resource / request : "),
                                               (Dice_ui::method8(400_i64,
                                                                 sprintf!("{:?}",
                                                                          v138.clone()))))),
                                       string(" / database: "))), (v145))),
                       string(""));
                        let v155: bool = true;
                        leptos::logging::log!("{}", v153);
                        let v157: bool = true;
                        let _optionm_map_ = v136.map(|x| {
                            //;
                            let v159: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v161: std::sync::Arc<rexie::Rexie> = v159.0;
                            let v163: bool = true;
                            v161
                        });
                        let v165: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v179: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v165));
                        let v586: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v179_0_0) = &v179 {
                            let v186: bool = true;
                            let _func1_from_v184 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) = ();
                                let v193: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v194: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v193.clone()),
                                    )),
                                    string(""),
                                );
                                let v196: bool = true;
                                leptos::logging::log!("{}", v194);
                                let v198: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v200: bool = */
                                    async {
                                        /*;
                                        let v202: bool = */
 //;
                                        let v204: Array<string> = new_array(&[string("store")]);
                                        let v206: Vec<string> = v204.to_vec();
                                        let v209: bool = true;
                                        let _func1_from_v207 = Func1::from(move |value| {
                                            //;
                                            let v211: string = ();
                                            let v216: &str = &*v211;
                                            let v260: LrcPtr<Dice_ui::Heap4> =
                                                LrcPtr::new(Dice_ui::Heap4 {
                                                    l0: String::from(v216),
                                                });
                                            let v262: bool = true;
                                            v260 /*;
                                                 let v264: bool = */
                                        }); //;
                                        let v266: Func1<string, LrcPtr<Dice_ui::Heap4>> =
                                            _func1_from_v207;
                                        let v268: Vec<std::string::String> = v206
                                            .into_iter()
                                            .map(|x| v266(x.clone()))
                                            .collect::<Vec<_>>();
                                        let v269: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method10(v179_0_0.clone());
                                        let v271: Result<rexie::Transaction, rexie::Error> = v269
                                            .transaction(&v268, rexie::TransactionMode::ReadOnly);
                                        let v272 = Dice_ui::method11();
                                        let v277: Result<rexie::Transaction, std::string::String> =
                                            v271.map_err(|x| v272(x));
                                        let v288: rexie::Transaction = v277?;
                                        let v289: string = Dice_ui::method12();
                                        let v294: &str = &*v289;
                                        let v315: Result<rexie::Store, rexie::Error> =
                                            v288.store(v294);
                                        let v316 = Dice_ui::method13();
                                        let v321: Result<rexie::Store, std::string::String> =
                                            v315.map_err(|x| v316(x));
                                        let v332: rexie::Store = v321?;
                                        let v333: string = Dice_ui::method70(v193);
                                        let v338: &str = &*v333;
                                        let v359: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v338);
                                        let v361: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v332, v359));
                                        let v363: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v361.await;
                                        let v364 = Dice_ui::method15();
                                        let v369: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v363.map_err(|x| v364(x));
                                        let v380: Option<wasm_bindgen::JsValue> = v369?;
                                        let v394: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method16(), v380),
                                        );
                                        let v494: Dice_ui::US25 = match &v394 {
                                            Dice_ui::US4::US4_0(v394_0_0) => {
                                                let v399: wasm_bindgen::JsValue = Dice_ui::method17(
                                                    match &v394 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v401: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v399);
                                                let v402 = Dice_ui::method18();
                                                let v407: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v401.map_err(|x| v402(x));
                                                let v418: Option<serde_json::Value> = v407?;
                                                let v432: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method19(), v418),
                                                );
                                                match &v432 {
                                                    Dice_ui::US5::US5_0(v432_0_0) => {
                                                        let v437: serde_json::Value =
                                                            Dice_ui::method20(
                                                                match &v432 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v439: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v437);
                                                        let v440 = Dice_ui::method21();
                                                        let v445: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v439.map_err(|x| v440(x));
                                                        let v456: Vec<u8> = v445?;
                                                        let v458: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v456.clone());
                                                        let v460: string =
                                            append((append(string("state_core.get_data () / data_len: "),
                                                           (toString(get_Count(v458.clone()))))),
                                                   string(""));
                                                        let v462: bool = true;
                                                        leptos::logging::log!("{}", v460);
                                                        let v464: Vec<u8> = v458.to_vec();
                                                        let v466: &[u8] = v464.as_slice();
                                                        let v468: bool = true;
                                                        let mut v466 = v466;
                                                        let v470: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v466,
                                                        );
                                                        let v471 = Dice_ui::method22();
                                                        let v476: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v470.map_err(|x| v471(x));
                                                        Dice_ui::US25::US25_0(v476?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v501: Option<LrcPtr<Dice_ui::Heap4>> = match &v494 {
                                            Dice_ui::US25::US25_0(v494_0_0) => Some(
                                                match &v494 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v503: string = string("}");
                                        let v508: bool = true;
                                        let v502 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(v501);
                                        let v513: string = append(
                                            (append(
                                                (append(
                                                    (append(string("true; v502 "), (v503))),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v514: bool = true;
                                        v502
                                    },
                                ); // rust.fix_closure';
                                let v516 = __future_init;
                                let v519: LrcPtr<Dice_ui::Heap13> =
                                    LrcPtr::new(Dice_ui::Heap13 { l0: v516 });
                                let v521: bool = true;
                                v519 /*;
                                     let v523: bool = */
                            }); //;
                            let v525: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                LrcPtr<Dice_ui::Heap13>,
                            > = _func1_from_v184;
                            let v528: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method71(
                                v138.into_iter()
                                    .map(|x| v525(x.clone()))
                                    .collect::<Vec<_>>(),
                            );
                            let v530: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v528);
                            let v532: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v530.await;
                            Dice_ui::US24::US24_0(v532?)
                        } else {
                            let v541: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v541))
                        };
                        let v592: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v586 {
                                Dice_ui::US24::US24_0(v586_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v586_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v586_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v586_1_0.clone(),
                                    )
                                }
                            };
                        let v598: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_requests (4) / state_data_resource new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v592.clone()))),
                                        string("")));
                        let v600: bool = true;
                        leptos::logging::log!("{}", v598);
                        let v601: string = string("}");
                        let v606: bool = true;
                        let v592 = v592;
                        let v611: string = append(
                            (append(
                                (append((append(string("true; v592 "), (v601))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v612: bool = true;
                        v592
                    },
                ); // rust.fix_closure';
                let v614 = __future_init;
                let v616: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                > = v614;
                let v618: bool = true;
                v616 /*;
                     let v620: bool = */
            }); //;
            let v622: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                >,
            > = _func0_from_v121;
            let v624: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|_| async move { v622().await });
            let v627: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v624 = v624.clone();
                    move || Dice_ui::closure56(v624.clone(), ())
                })()
            });
            let v630: bool = true;
            let _func0_from_v628 = Func0::from(move || {
                //;
                let v632: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v634: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v627.clone());
                let v640: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v632.clone()))),
                    )),
                    string(""),
                );
                let v642: bool = true;
                leptos::logging::log!("{}", v640);
                let v644: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v646: bool = */
                    async move {
                        /*;
                        let v648: bool = */
 //;
                        let v662: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method72(), v634));
                        let v704: Dice_ui::US27 = match &v662 {
                            Dice_ui::US26::US26_0(v662_0_0) => {
                                let v666: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v662 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v667 = Dice_ui::method73();
                                let v668 = Dice_ui::method74();
                                let v669: Dice_ui::US24 = match &v666 {
                                    Err(v666_1_0) => v668(v666_1_0.clone()),
                                    Ok(v666_0_0) => v667(v666_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v669 {
                                    Dice_ui::US24::US24_0(v669_0_0) => {
                                        let v672: bool = true;
                                        let _vec_map: Vec<_> = v669_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v674: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v688: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method75(), v674),
                                                );
                                                let v693: bool = true;
                                                v688
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v669_1_0) => {
                                        Dice_ui::US28::US28_1(v669_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v710: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v704.clone()))),
                            )),
                            string(""),
                        );
                        let v712: bool = true;
                        leptos::logging::log!("{}", v710);
                        let v713 = Dice_ui::method76(v704);
                        let v714: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method86(v632);
                        let v717: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method87(
                            v714.iter()
                                .enumerate()
                                .map(|(i, x)| v713(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v719: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v717);
                        let v721: Result<Vec<Option<string>>, std::string::String> = v719.await;
                        let v723: Vec<Option<string>> = v721?;
                        let v725: string = string("}");
                        let v730: bool = true;
                        let v724 = Ok::<Vec<Option<string>>, std::string::String>(v723);
                        let v735: string = append(
                            (append(
                                (append((append(string("true; v724 "), (v725))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v736: bool = true;
                        v724
                    },
                ); // rust.fix_closure';
                let v738 = __future_init;
                let v740: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                > = v738;
                let v742: bool = true;
                v740 /*;
                     let v744: bool = */
            }); //;
            let v746: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                >,
            > = _func0_from_v628;
            let v748: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|_| async move { v746().await });
            let v751: bool = true;
            let _func1_from_v749 = Func1::from(move |value| {
                //;
                let v753: LrcPtr<Dice_ui::Heap4> = ();
                let v758: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v753.clone())) as i64)),
                    )),
                    string(""),
                );
                let v760: bool = true;
                leptos::logging::log!("{}", v758);
                let v762: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v764: bool = */
                    async move {
                        /*;
                        let v766: bool = */
 //;
                        let v768: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v770: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v768);
                        let v772: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v120);
                        let v774: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v772);
                        let v776: bool = true;
                        let _optionm_map_ = v774.map(|x| {
                            //;
                            let v778: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v780: std::sync::Arc<rexie::Rexie> = v778.0;
                            let v782: bool = true;
                            v780
                        });
                        let v784: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v798: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v784));
                        let v953: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v798_0_0) = &v798 {
                            let v805: bool = true;
                            let _func1_from_v803 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    ();
                                let v807: string = patternInput_1.0.clone();
                                let v813: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v815: bool = */
                                    async move {
                                        /*;
                                        let v817: bool = */
 //;
                                        let v818: string =
                        append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                       (v807.clone()))), string(""));
                                        let v820: bool = true;
                                        leptos::logging::log!("{}", v818);
                                        let v821: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v807))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v826: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v753.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v828: bool = true;
                                        leptos::logging::log!("{}", v826);
                                        let v830: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v832: bool = */
                                            async move {
                                                /*;
                                                let v834: bool = */
 //;
                                                let v836: bool = true;
                                                let mut data = Vec::new();
                                                let v838: bool = true;
                                                borsh::BorshSerialize::serialize(&v753, &mut data)
                                                    .unwrap();
                                                let v840: Vec<u8> = data;
                                                let v842: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v840).unwrap();
                                                let v843: string = Dice_ui::method88(v821);
                                                let v848: &str = &*v843;
                                                let v869: rexie::Transaction =
                                                    v798_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v871: rexie::Store = v869.store("store")?;
                                                let v873: bool = true;
                                                v871.put(&v842, Some(&v848.into())).await?;
                                                let v875: bool = true;
                                                v869.done().await?;
                                                let v877: string = string("}");
                                                let v882: bool = true;
                                                let v876 = Ok::<(), rexie::Error>(());
                                                let v887: string = append(
                                                    (append(
                                                        (append(
                                                            (append(string("true; v876 "), (v877))),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v888: bool = true;
                                                v876
                                            },
                                        ); // rust.fix_closure';
                                        let v890 = __future_init;
                                        let v892: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<(), rexie::Error>,
                                                >,
                                            >,
                                        > = v890;
                                        let v894: Result<(), rexie::Error> = v892.await;
                                        let v895 = Dice_ui::method89();
                                        let v900: Result<(), std::string::String> =
                                            v894.map_err(|x| v895(x));
                                        let v911: bool = true;
                                        v900?;
                                        let v913: string = string("}");
                                        let v918: bool = true;
                                        let v912 = Ok::<(), std::string::String>(());
                                        let v923: string = append(
                                            (append(
                                                (append(
                                                    (append(string("true; v912 "), (v913))),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v924: bool = true;
                                        v912
                                    },
                                ); // rust.fix_closure';
                                let v926 = __future_init;
                                let v929: LrcPtr<Dice_ui::Heap14> =
                                    LrcPtr::new(Dice_ui::Heap14 { l0: v926 });
                                let v931: bool = true;
                                v929 /*;
                                     let v933: bool = */
                            }); //;
                            let v935: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                LrcPtr<Dice_ui::Heap14>,
                            > = _func1_from_v803;
                            let v938: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method90(
                                v770.into_iter()
                                    .map(|x| v935(x.clone()))
                                    .collect::<Vec<_>>(),
                            );
                            let v940: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v938);
                            let v942: Result<Vec<()>, std::string::String> = v940.await;
                            Dice_ui::US34::US34_0(v942?)
                        } else {
                            let v948: bool = true;
                            leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v959: Result<Vec<()>, std::string::String> = match &v953 {
                            Dice_ui::US34::US34_0(v953_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v953_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v953_1_0) => {
                                Err::<Vec<()>, std::string::String>(v953_1_0.clone())
                            }
                        };
                        let v960: string = string("}");
                        let v965: bool = true;
                        let v959 = v959;
                        let v970: string = append(
                            (append(
                                (append((append(string("true; v959 "), (v960))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v971: bool = true;
                        v959
                    },
                ); // rust.fix_closure';
                let v973 = __future_init;
                let v976: LrcPtr<Dice_ui::Heap15> = LrcPtr::new(Dice_ui::Heap15 { l0: v973 });
                let v978: bool = true;
                v976 /*;
                     let v980: bool = */
            }); //;
            let v982: Func1<LrcPtr<Dice_ui::Heap4>, LrcPtr<Dice_ui::Heap15>> = _func1_from_v749;
            let v985: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v982 = v982.clone();
                    move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure66(v982.clone(), v)
                })(value.clone())
            });
            let v988: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v627 = v627.clone();
                    let v748 = v748.clone();
                    let v985 = v985.clone();
                    move || {
                        Dice_ui::closure67(
                            v0_1.clone(),
                            v627.clone(),
                            v748.clone(),
                            v985.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v117 = v117.clone();
                    let v624 = v624.clone();
                    let v988 = v988.clone();
                    move || {
                        Dice_ui::closure76(v1.clone(), v117.clone(), v624.clone(), v988.clone(), ())
                    }
                })()
            })
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method103() -> Func1<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            Dice_ui::US43,
        > {
            Func1::new(
                move |v: Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >| Dice_ui::closure79((), v),
            )
        }
        pub fn closure80(unitVar: (), v0_1: std::string::String) -> Dice_ui::US43 {
            Dice_ui::US43::US43_1(v0_1)
        }
        pub fn method104() -> Func1<std::string::String, Dice_ui::US43> {
            Func1::new(move |v: std::string::String| Dice_ui::closure80((), v))
        }
        pub fn closure81(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US45 {
            Dice_ui::US45::US45_0(v0_1)
        }
        pub fn method105() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US45,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure81((), v),
            )
        }
        pub fn closure82(unitVar: (), v0_1: Dice_ui::US44) -> bool {
            if let Dice_ui::US44::US44_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US45::US45_1 = &v0_1_0_0 {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method106() -> Func1<Dice_ui::US44, bool> {
            Func1::new(move |v: Dice_ui::US44| Dice_ui::closure82((), v))
        }
        pub fn method107(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn closure84(v0_1: Array<string>, v1: i32, v2: Dice_ui::US44) -> Dice_ui::US48 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US44::US44_0(v2_0_0) => {
                    let v4: Dice_ui::US45 = v2_0_0.clone();
                    Dice_ui::US48::US48_0(match &v4 {
                        Dice_ui::US45::US45_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US45::US45_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: bool = true;
                            let _func1_from_v14 = Func1::from(move |value| {
                                //;
                                let v18: LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )> = ();
                                let b: (
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = v18.1.clone();
                                let v58: LrcPtr<Dice_ui::Heap19> = LrcPtr::new(Dice_ui::Heap19 {
                                    l0: v18.0.clone(),
                                    l1: b.0.clone(),
                                    l2: b.1.clone(),
                                    l3: b.2.clone(),
                                    l4: b.3.clone(),
                                    l5: b.4.clone(),
                                    l6: b.5.clone(),
                                    l7: b.6.clone(),
                                    l8: b.7.clone(),
                                    l9: b.8.clone(),
                                    l10: b.9.clone(),
                                    l11: b.10.clone(),
                                    l12: b.11.clone(),
                                });
                                let v60: bool = true;
                                v58 /*;
                                    let v62: bool = */
                            }); //;
                            let v64: Func1<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                                LrcPtr<Dice_ui::Heap19>,
                            > = _func1_from_v14;
                            let v66: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13.into_iter().map(|x| v64(x.clone())).collect::<Vec<_>>();
                            let v68: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v66.clone());
                            let v70: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v68.to_vec();
                            let v73: bool = true;
                            let _func1_from_v71 = Func1::from(move |value| {
                                //;
                                let patternInput: (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = ();
                                let v92: LrcPtr<Dice_ui::Heap20> = LrcPtr::new(Dice_ui::Heap20 {
                                    l0: v3.clone(),
                                    l1: v1 as usize,
                                    l2: LrcPtr::new(Dice_ui::Heap12 {
                                        l0: patternInput.1.clone(),
                                        l1: patternInput.2.clone(),
                                        l2: patternInput.3.clone(),
                                        l3: patternInput.4.clone(),
                                        l4: patternInput.5.clone(),
                                        l5: patternInput.6.clone(),
                                        l6: patternInput.7.clone(),
                                        l7: patternInput.8.clone(),
                                        l8: patternInput.9.clone(),
                                        l9: patternInput.10.clone(),
                                        l10: patternInput.11.clone(),
                                        l11: patternInput.12.clone(),
                                    }),
                                });
                                let v94: bool = true;
                                v92 /*;
                                    let v96: bool = */
                            }); //;
                            let v98: Func1<
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                                LrcPtr<Dice_ui::Heap20>,
                            > = _func1_from_v71;
                            Dice_ui::US49::US49_0(
                                v70.into_iter().map(|x| v98(x.clone())).collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US49::US49_1,
                    })
                }
                Dice_ui::US44::US44_1(v2_1_0) => Dice_ui::US48::US48_1(v2_1_0.clone()),
            }
        }
        pub fn closure83(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US44, Dice_ui::US48> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US44| Dice_ui::closure84(v0_1.clone(), v1, v)
            })
        }
        pub fn method108(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US44, Dice_ui::US48>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v)
            })
        }
        pub fn method109(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method110(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure85(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method112(
        ) -> Func1<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>, Dice_ui::US50> {
            Func1::new(
                move |v: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>| {
                    Dice_ui::closure85((), v)
                },
            )
        }
        pub fn closure86(unitVar: (), v0_1: std::string::String) -> Dice_ui::US50 {
            Dice_ui::US50::US50_1(v0_1)
        }
        pub fn method113() -> Func1<std::string::String, Dice_ui::US50> {
            Func1::new(move |v: std::string::String| Dice_ui::closure86((), v))
        }
        pub fn closure87(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>,
        ) -> Dice_ui::US49 {
            Dice_ui::US49::US49_0(v0_1)
        }
        pub fn method114() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>, Dice_ui::US49> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>| {
                Dice_ui::closure87((), v)
            })
        }
        pub fn method115(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> {
            v0_1
        }
        pub fn method116(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> {
            v0_1
        }
        pub fn method111(v0_1: LrcPtr<Dice_ui::UH2>, v1: Dice_ui::US51) -> Dice_ui::US51 {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH2>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Dice_ui::US51> = MutCell::new(v1.clone());
            '_method111: loop {
                break '_method111 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH2::UH2_0 => v1.get().clone(),
                    Dice_ui::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v2: Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                            std::string::String,
                        > = match v0_1.get().clone().as_ref() {
                            Dice_ui::UH2::UH2_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v4 = Dice_ui::method112();
                        let v5 = Dice_ui::method113();
                        let v6: Dice_ui::US50 = match &v2 {
                            Err(v2_1_0) => v5(v2_1_0.clone()),
                            Ok(v2_0_0) => v4(v2_0_0.clone()),
                        };
                        let v29: Dice_ui::US48 = match &v6 {
                            Dice_ui::US50::US50_0(v6_0_0) => Dice_ui::US48::US48_0(defaultValue(
                                Dice_ui::US49::US49_1,
                                map(Dice_ui::method114(), v6_0_0.clone()),
                            )),
                            Dice_ui::US50::US50_1(v6_1_0) => Dice_ui::US48::US48_1(v6_1_0.clone()),
                        };
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH2> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Dice_ui::US51 = if let Dice_ui::US51::US51_0(v1_0_0) =
                                &v1.get().clone()
                            {
                                match &v29 {
                                    Dice_ui::US48::US48_0(v29_0_0) => {
                                        let v31: Dice_ui::US49 = v29_0_0.clone();
                                        if let Dice_ui::US49::US49_0(v31_0_0) = &v31 {
                                            let v33: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                                Dice_ui::method115(v31_0_0.clone());
                                            let v34: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                                Dice_ui::method116(v1_0_0.clone());
                                            let v36: bool = true;
                                            let mut v34 = v34;
                                            let v38: bool = true;
                                            v34.extend(v33);
                                            Dice_ui::US51::US51_0(v34)
                                        } else {
                                            v1.get().clone()
                                        }
                                    }
                                    Dice_ui::US48::US48_1(v29_1_0) => {
                                        Dice_ui::US51::US51_1(v29_1_0.clone())
                                    }
                                }
                            } else {
                                if let Dice_ui::US48::US48_1(v29_1_0) = &v29 {
                                    Dice_ui::US51::US51_1(v29_1_0.clone())
                                } else {
                                    v1.get().clone()
                                }
                            };
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method111;
                        }
                    }
                });
            }
        }
        pub fn method117(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> {
            v0_1
        }
        pub fn closure88(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap12>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method118() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap12>), std::string::String> {
            Func1::new(
                move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap12>)| {
                    Dice_ui::closure88((), arg10_0040)
                },
            )
        }
        pub fn method119(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> {
            v0_1
        }
        pub fn closure78(
            v0_1: leptos::prelude::ArcMemo<Array<string>>,
            v1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = leptos::prelude::ArcMemo::get(&v1);
            let v6: bool = true;
            let _func1_from_v4 = Func1::from(move |value| {
                //;
                let v8: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = ();
                let v9 = Dice_ui::method103();
                let v10 = Dice_ui::method104();
                let v12: LrcPtr<Dice_ui::Heap17> = LrcPtr::new(Dice_ui::Heap17 {
                    l0: match &v8 {
                        Err(v8_1_0) => v10(v8_1_0.clone()),
                        Ok(v8_0_0) => v9(v8_0_0.clone()),
                    },
                });
                let v14: bool = true;
                v12 /*;
                    let v16: bool = */
            }); //;
            let v18: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                LrcPtr<Dice_ui::Heap17>,
            > = _func1_from_v4;
            let v20: Vec<Dice_ui::US43> =
                v3.into_iter().map(|x| v18(x.clone())).collect::<Vec<_>>();
            let v23: bool = true;
            let _func1_from_v21 = Func1::from(move |value| {
                //;
                let v25: Dice_ui::US43 = ();
                let v49: LrcPtr<Dice_ui::Heap18> = LrcPtr::new(Dice_ui::Heap18 {
                    l0: match &v25 {
                        Dice_ui::US43::US43_0(v25_0_0) => Dice_ui::US44::US44_0(defaultValue(
                            Dice_ui::US45::US45_1,
                            map(Dice_ui::method105(), v25_0_0.clone()),
                        )),
                        Dice_ui::US43::US43_1(v25_1_0) => Dice_ui::US44::US44_1(v25_1_0.clone()),
                    },
                });
                let v51: bool = true;
                v49 /*;
                    let v53: bool = */
            }); //;
            let v55: Func1<Dice_ui::US43, LrcPtr<Dice_ui::Heap18>> = _func1_from_v21;
            let v57: Vec<Dice_ui::US44> =
                v20.into_iter().map(|x| v55(x.clone())).collect::<Vec<_>>();
            let v63: string = append(
                (append(
                    string("transactions.render (8) / txns move / root: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v57.clone()))),
                )),
                string(""),
            );
            let v65: bool = true;
            leptos::logging::log!("{}", v63);
            let v66 = Dice_ui::method106();
            let v67: Vec<Dice_ui::US44> = Dice_ui::method107(v57.clone());
            let v69: Vec<Dice_ui::US44> = v67
                .into_iter()
                .filter(|x| v66(x.clone().clone()))
                .collect::<Vec<_>>();
            let v76: bool = (get_Count(fable_library_rust::NativeArray_::array_from(v69.clone())))
                == (get_Count(fable_library_rust::NativeArray_::array_from(
                    v57.clone().clone(),
                )));
            let v188: Dice_ui::US46 = if v76 {
                Dice_ui::US46::US46_0(Dice_ui::US47::US47_1)
            } else {
                let v81 = Dice_ui::method108(leptos::prelude::ArcMemo::get(&v0_1));
                let v82: Vec<Dice_ui::US44> = Dice_ui::method109(v57);
                let v84: Vec<Dice_ui::US48> = v82
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v81(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v87: bool = true;
                let _func1_from_v85 = Func1::from(move |value| {
                    //;
                    let v89: Dice_ui::US48 = ();
                    let v103: LrcPtr<Dice_ui::Heap21> = LrcPtr::new(Dice_ui::Heap21 {
                        l0: match &v89 {
                            Dice_ui::US48::US48_0(v89_0_0) => {
                                let v90: Dice_ui::US49 = v89_0_0.clone();
                                Dice_ui::US50::US50_0(match &v90 {
                                    Dice_ui::US49::US49_0(v90_0_0) => Some(
                                        match &v90 {
                                            Dice_ui::US49::US49_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                                })
                            }
                            Dice_ui::US48::US48_1(v89_1_0) => {
                                Dice_ui::US50::US50_1(v89_1_0.clone())
                            }
                        },
                    });
                    let v105: bool = true;
                    v103 /*;
                         let v107: bool = */
                }); //;
                let v109: Func1<Dice_ui::US48, LrcPtr<Dice_ui::Heap21>> = _func1_from_v85;
                let v111: Vec<Dice_ui::US50> =
                    v84.into_iter().map(|x| v109(x.clone())).collect::<Vec<_>>();
                let v114: bool = true;
                let _func1_from_v112 = Func1::from(move |value| {
                    //;
                    let v116: Dice_ui::US50 = ();
                    let v123: LrcPtr<Dice_ui::Heap22> = LrcPtr::new(Dice_ui::Heap22 {
                        l0: match &v116 {
                            Dice_ui::US50::US50_0(v116_0_0) => {
                                Ok::<
                                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                                    std::string::String,
                                >(v116_0_0.clone())
                            }
                            Dice_ui::US50::US50_1(v116_1_0) => {
                                Err::<
                                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                                    std::string::String,
                                >(v116_1_0.clone())
                            }
                        },
                    });
                    let v125: bool = true;
                    v123 /*;
                         let v127: bool = */
                }); //;
                let v129: Func1<Dice_ui::US50, LrcPtr<Dice_ui::Heap22>> = _func1_from_v112;
                let v131: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                        std::string::String,
                    >,
                > = v111
                    .into_iter()
                    .map(|x| v129(x.clone()))
                    .collect::<Vec<_>>();
                let v134: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap12>)>().to_vec();
                let v136: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v131.clone());
                let v137: i32 = get_Count(v136.clone());
                let v139: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(LrcPtr::new(Dice_ui::UH2::UH2_0)),
                });
                while Dice_ui::method110(v137, v139.clone()) {
                    let v141: i32 = v139.l0.get().clone();
                    let v144: i32 = ((v141.wrapping_neg()) + (v137)) - 1_i32;
                    let v145: LrcPtr<Dice_ui::UH2> = v139.l1.get().clone();
                    let v146: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                        std::string::String,
                    > = v136[v144].clone();
                    let v147: i32 = (v141) + 1_i32;
                    v139.l0.set(v147);
                    v139.l1.set(LrcPtr::new(Dice_ui::UH2::UH2_1(v146, v145)));
                    ()
                }
                {
                    let v151: Dice_ui::US51 =
                        Dice_ui::method111(v139.l1.get().clone(), Dice_ui::US51::US51_0(v134));
                    let v165: Dice_ui::US51 = match &v151 {
                        Dice_ui::US51::US51_0(v151_0_0) => {
                            let v153: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                Dice_ui::method117(v151_0_0.clone());
                            let v154 = Dice_ui::method118();
                            let v156: bool = true;
                            let mut v153 = v153;
                            let v158: bool = true;
                            v153.sort_by_key(|x| v154(x.clone()));
                            Dice_ui::US51::US51_0(v153)
                        }
                        Dice_ui::US51::US51_1(v151_1_0) => Dice_ui::US51::US51_1(v151_1_0.clone()),
                    };
                    let v180: Dice_ui::US52 = match &v165 {
                        Dice_ui::US51::US51_0(v165_0_0) => {
                            let v167: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                Dice_ui::method119(v165_0_0.clone());
                            let v169: bool = true;
                            let mut v167 = v167;
                            let v171: bool = true;
                            v167.reverse();
                            let v173: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> = v167;
                            Dice_ui::US52::US52_0(fable_library_rust::NativeArray_::array_from(
                                v173.clone(),
                            ))
                        }
                        Dice_ui::US51::US51_1(v165_1_0) => Dice_ui::US52::US52_1(v165_1_0.clone()),
                    };
                    match &v180 {
                        Dice_ui::US52::US52_0(v180_0_0) => {
                            Dice_ui::US46::US46_0(Dice_ui::US47::US47_0(v180_0_0.clone()))
                        }
                        Dice_ui::US52::US52_1(v180_1_0) => Dice_ui::US46::US46_1(v180_1_0.clone()),
                    }
                }
            };
            let v201: Dice_ui::US53 = match &v188 {
                Dice_ui::US46::US46_0(v188_0_0) => {
                    let v189: Dice_ui::US47 = v188_0_0.clone();
                    Dice_ui::US53::US53_0(match &v189 {
                        Dice_ui::US47::US47_0(v189_0_0) => Some(
                            match &v189 {
                                Dice_ui::US47::US47_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    })
                }
                Dice_ui::US46::US46_1(v188_1_0) => Dice_ui::US53::US53_1(v188_1_0.clone()),
            };
            let v207: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                std::string::String,
            > = match &v201 {
                Dice_ui::US53::US53_0(v201_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                >(v201_0_0.clone()),
                Dice_ui::US53::US53_1(v201_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                >(v201_1_0.clone()),
            };
            let v213: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        (append(
                            (append(
                                string(
                                    "use_transactions.render (9) / txns new_arc_memo / result: ",
                                ),
                                sprintf!("{:?}", v207.clone()),
                            )),
                            string(" / loading: "),
                        )),
                        (ofBoolean(v76)),
                    )),
                    string(""),
                ),
            );
            let v215: bool = true;
            leptos::logging::log!("{}", v213);
            v207
        }
        pub fn closure90(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
        ) -> Dice_ui::US53 {
            Dice_ui::US53::US53_0(v0_1)
        }
        pub fn method120(
        ) -> Func1<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>, Dice_ui::US53> {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>| {
                    Dice_ui::closure90((), v)
                },
            )
        }
        pub fn closure91(unitVar: (), v0_1: std::string::String) -> Dice_ui::US53 {
            Dice_ui::US53::US53_1(v0_1)
        }
        pub fn method121() -> Func1<std::string::String, Dice_ui::US53> {
            Func1::new(move |v: std::string::String| Dice_ui::closure91((), v))
        }
        pub fn closure92(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>,
        ) -> Dice_ui::US47 {
            Dice_ui::US47::US47_0(v0_1)
        }
        pub fn method122() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>, Dice_ui::US47>
        {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>| {
                Dice_ui::closure92((), v)
            })
        }
        pub fn closure93(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method123() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure93((), v))
        }
        pub fn closure94(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn method124() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure94((), v))
        }
        pub fn method125(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure95(unitVar: (), v0_1: string) -> (string, Dice_ui::US23, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US23::US23_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method126() -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure95((), v))
        }
        pub fn method127(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn closure89(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method120();
            let v4 = Dice_ui::method121();
            let v5: Dice_ui::US53 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v28: Dice_ui::US46 = match &v5 {
                Dice_ui::US53::US53_0(v5_0_0) => Dice_ui::US46::US46_0(defaultValue(
                    Dice_ui::US47::US47_1,
                    map(Dice_ui::method122(), v5_0_0.clone()),
                )),
                Dice_ui::US53::US53_1(v5_1_0) => Dice_ui::US46::US46_1(v5_1_0.clone()),
            };
            let v290: Dice_ui::US54 = match &v28 {
                Dice_ui::US46::US46_0(v28_0_0) => {
                    let v29: Dice_ui::US47 = v28_0_0.clone();
                    if let Dice_ui::US47::US47_0(v29_0_0) = &v29 {
                        let v32: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                            v29_0_0.clone().to_vec();
                        let v35: bool = true;
                        let _func1_from_v33 = Func1::from(move |value| {
                            //;
                            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap12>) = ();
                            let v45: &str = &*string("2.0");
                            let v69: std::string::String = String::from(v45);
                            let v94: &str = &*string("dontcare");
                            let v118: std::string::String = String::from(v94);
                            let v143: &str = &*string("EXPERIMENTAL_tx_status");
                            let v167: std::string::String = String::from(v143);
                            let v193: &str = &*string("bowen");
                            let v237: Array<std::string::String> = new_array(&[
                                (patternInput.2.clone()).l3.clone(),
                                String::from(v193),
                            ]);
                            let v239: Vec<std::string::String> = v237.to_vec();
                            let v241: crate::model::near::rpc::RpcInput =
                                crate::model::near::rpc::RpcInput {
                                    jsonrpc: v69,
                                    id: v118,
                                    method: v167,
                                    params: v239,
                                };
                            let v243: Result<std::string::String, serde_json::Error> =
                                serde_json::to_string(&v241);
                            let v244 = Dice_ui::method123();
                            let v249: Result<std::string::String, std::string::String> =
                                v243.map_err(|x| v244(x));
                            let v259 = Dice_ui::method124();
                            let v260: Result<std::string::String, std::string::String> =
                                Dice_ui::method125(v249);
                            let v262: Result<string, std::string::String> = v260.map(|x| v259(x));
                            let v263 = Dice_ui::method126();
                            let v264: Result<string, std::string::String> =
                                Dice_ui::method127(v262);
                            let v267: LrcPtr<Dice_ui::Heap23> = LrcPtr::new(Dice_ui::Heap23 {
                                l0: v264.map(|x| v263(x)),
                            });
                            let v269: bool = true;
                            v267 /*;
                                 let v271: bool = */
                        }); //;
                        let v273: Func1<
                            (string, usize, LrcPtr<Dice_ui::Heap12>),
                            LrcPtr<Dice_ui::Heap23>,
                        > = _func1_from_v33;
                        let v275: Vec<
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = v32.into_iter().map(|x| v273(x.clone())).collect::<Vec<_>>();
                        let v277: Result<
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                            std::string::String,
                        > = v275.into_iter().collect();
                        let v279: Vec<(string, Dice_ui::US23, string, bool, bool)> = v277?;
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_0(
                            fable_library_rust::NativeArray_::array_from(v279.clone()),
                        ))
                    } else {
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_1)
                    }
                }
                Dice_ui::US46::US46_1(v28_1_0) => Dice_ui::US54::US54_1(v28_1_0.clone()),
            };
            let v303: Dice_ui::US56 = match &v290 {
                Dice_ui::US54::US54_0(v290_0_0) => {
                    let v291: Dice_ui::US55 = v290_0_0.clone();
                    Dice_ui::US56::US56_0(match &v291 {
                        Dice_ui::US55::US55_0(v291_0_0) => Some(
                            match &v291 {
                                Dice_ui::US55::US55_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    })
                }
                Dice_ui::US54::US54_1(v290_1_0) => Dice_ui::US56::US56_1(v290_1_0.clone()),
            };
            let v309: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = match &v303 {
                Dice_ui::US56::US56_0(v303_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v303_0_0.clone()),
                Dice_ui::US56::US56_1(v303_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v303_1_0.clone()),
            };
            let v315: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (10) / rpc_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v309.clone()),
                    )),
                    string(""),
                ),
            );
            let v317: bool = true;
            leptos::logging::log!("{}", v315);
            v309
        }
        pub fn closure97(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method128(
        ) -> Func1<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, Dice_ui::US56>
        {
            Func1::new(
                move |v: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>| {
                    Dice_ui::closure97((), v)
                },
            )
        }
        pub fn closure98(unitVar: (), v0_1: std::string::String) -> Dice_ui::US56 {
            Dice_ui::US56::US56_1(v0_1)
        }
        pub fn method129() -> Func1<std::string::String, Dice_ui::US56> {
            Func1::new(move |v: std::string::String| Dice_ui::closure98((), v))
        }
        pub fn closure99(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Dice_ui::US55 {
            Dice_ui::US55::US55_0(v0_1)
        }
        pub fn method130(
        ) -> Func1<Array<(string, Dice_ui::US23, string, bool, bool)>, Dice_ui::US55> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US23, string, bool, bool)>| {
                    Dice_ui::closure99((), v)
                },
            )
        }
        pub fn closure96(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method128();
            let v4 = Dice_ui::method129();
            let v5: Dice_ui::US56 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v28: Dice_ui::US54 = match &v5 {
                Dice_ui::US56::US56_0(v5_0_0) => Dice_ui::US54::US54_0(defaultValue(
                    Dice_ui::US55::US55_1,
                    map(Dice_ui::method130(), v5_0_0.clone()),
                )),
                Dice_ui::US56::US56_1(v5_1_0) => Dice_ui::US54::US54_1(v5_1_0.clone()),
            };
            let v34: Array<(string, Dice_ui::US23, string, bool, bool)> =
                if let Dice_ui::US54::US54_0(v28_0_0) = &v28 {
                    let v29: Dice_ui::US55 = v28_0_0.clone();
                    if let Dice_ui::US55::US55_0(v29_0_0) = &v29 {
                        v29_0_0.clone()
                    } else {
                        new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                };
            let v36: Vec<(string, Dice_ui::US23, string, bool, bool)> = v34.to_vec();
            let v42: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v36.clone()),
                    )),
                    string(""),
                ),
            );
            let v44: bool = true;
            leptos::logging::log!("{}", v42);
            v36
        }
        pub fn closure102(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: bool = true;
            let _func1_from_v1 = Func1::from(move |value| {
                //;
                let v5: crate::model::near::rpc::Proof = ();
                let v10: LrcPtr<Dice_ui::Heap27> = LrcPtr::new(Dice_ui::Heap27 {
                    l0: v5.clone().direction,
                    l1: v5.hash,
                });
                let v12: bool = true;
                v10 /*;
                    let v14: bool = */
            }); //;
            let v16: Func1<crate::model::near::rpc::Proof, LrcPtr<Dice_ui::Heap27>> =
                _func1_from_v1;
            let v18: Vec<(std::string::String, std::string::String)> =
                v0_1.into_iter().map(|x| v16(x.clone())).collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v18.clone())
        }
        pub fn method132() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure103((), v))
        }
        pub fn closure101(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::rpc::Receipt = ();
                let v9: std::string::String = v7.clone().predecessor_id;
                let v11: crate::model::near::rpc::ReceiptDetail = v7.clone().receipt;
                let v13: crate::model::near::rpc::ActionDetail = v11.action;
                let v15: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                > = v13.clone().actions;
                let v18: bool = true;
                let _func1_from_v16 = Func1::from(move |value| {
                    //;
                    let v20: std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    > = ();
                    let v24: LrcPtr<Dice_ui::Heap24> = LrcPtr::new(Dice_ui::Heap24 {
                        l0: v20
                            .into_iter()
                            .map(|(k, v)| {
                                (
                                    k,
                                    Func1::new(
                                        move |v: crate::model::near::rpc::TransferDetail| {
                                            Dice_ui::closure102((), v)
                                        },
                                    )(v),
                                )
                            })
                            .collect(),
                    });
                    let v26: bool = true;
                    v24 /*;
                        let v28: bool = */
                }); //;
                let v30: Func1<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                    LrcPtr<Dice_ui::Heap24>,
                > = _func1_from_v16;
                let v32: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = v15.into_iter().map(|x| v30(x.clone())).collect::<Vec<_>>();
                let v34: Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = fable_library_rust::NativeArray_::array_from(v32.clone());
                let v36: std::string::String = v13.clone().gas_price;
                let v38: Vec<std::string::String> = v13.clone().input_data_ids;
                let v40: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v38.clone());
                let v42: Vec<std::string::String> = v13.clone().output_data_receivers;
                let v53: LrcPtr<Dice_ui::Heap25> = LrcPtr::new(Dice_ui::Heap25 {
                    l0: v9,
                    l1: v34,
                    l2: v36,
                    l3: v40,
                    l4: fable_library_rust::NativeArray_::array_from(v42.clone()),
                    l5: v13.clone().signer_id,
                    l6: v13.signer_public_key,
                    l7: v7.clone().receipt_id,
                    l8: v7.receiver_id,
                });
                let v55: bool = true;
                v53 /*;
                    let v57: bool = */
            }); //;
            let v59: Func1<crate::model::near::rpc::Receipt, LrcPtr<Dice_ui::Heap25>> =
                _func1_from_v3;
            let v61: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2.into_iter().map(|x| v59(x.clone())).collect::<Vec<_>>();
            let v63: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v61.clone());
            let v65: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v68: bool = true;
            let _func1_from_v66 = Func1::from(move |value| {
                //;
                let v70: crate::model::near::rpc::ReceiptsOutcome = ();
                let v72: std::string::String = v70.clone().block_hash;
                let v74: std::string::String = v70.clone().id;
                let v76: crate::model::near::rpc::OutcomeDetail = v70.clone().outcome;
                let v78: std::string::String = v76.clone().executor_id;
                let v80: u64 = v76.clone().gas_burnt;
                let v82: Vec<std::string::String> = v76.clone().logs;
                let v84: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v82.clone());
                let v86: crate::model::near::rpc::Metadata = v76.clone().metadata;
                let v88: Vec<crate::model::near::rpc::GasProfile> = v86.clone().gas_profile;
                let v91: bool = true;
                let _func1_from_v89 = Func1::from(move |value| {
                    //;
                    let v93: crate::model::near::rpc::GasProfile = ();
                    let v100: LrcPtr<Dice_ui::Heap26> = LrcPtr::new(Dice_ui::Heap26 {
                        l0: v93.clone().cost,
                        l1: v93.clone().cost_category,
                        l2: v93.gas_used,
                    });
                    let v102: bool = true;
                    v100 /*;
                         let v104: bool = */
                }); //;
                let v106: Func1<crate::model::near::rpc::GasProfile, LrcPtr<Dice_ui::Heap26>> =
                    _func1_from_v89;
                let v108: Vec<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = v88.into_iter().map(|x| v106(x.clone())).collect::<Vec<_>>();
                let v110: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = fable_library_rust::NativeArray_::array_from(v108.clone());
                let v112: u8 = v86.version;
                let v114: Vec<std::string::String> = v76.clone().receipt_ids;
                let v116: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v114.clone());
                let v118: std::collections::HashMap<std::string::String, std::string::String> =
                    v76.clone().status;
                let v120: Option<std::string::String> = v76.tokens_burnt;
                let v122: Option<Vec<crate::model::near::rpc::Proof>> = v70.proof;
                let v158: LrcPtr<Dice_ui::Heap28> = LrcPtr::new(Dice_ui::Heap28 {
                    l0: v72,
                    l1: v74,
                    l2: v78,
                    l3: v80,
                    l4: v84,
                    l5: v110,
                    l6: v112,
                    l7: v116,
                    l8: v118,
                    l9: v120,
                    l10: defaultValue(
                        new_empty::<(std::string::String, std::string::String)>(),
                        map(Dice_ui::method132(), v122),
                    ),
                });
                let v160: bool = true;
                v158 /*;
                     let v162: bool = */
            }); //;
            let v164: Func1<crate::model::near::rpc::ReceiptsOutcome, LrcPtr<Dice_ui::Heap28>> =
                _func1_from_v66;
            let v166: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v65.into_iter().map(|x| v164(x.clone())).collect::<Vec<_>>();
            (
                v63,
                fable_library_rust::NativeArray_::array_from(v166.clone()),
            )
        }
        pub fn method131() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure101((), v)
            })
        }
        pub fn closure105(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method134() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure105((), v))
        }
        pub fn closure104(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method134(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method133() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure104((), v))
        }
        pub fn closure100(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v6: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method131(), v4);
            let v185: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v6, map(Dice_ui::method133(), v185), v0_1.id)
        }
        pub fn closure109(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method137(
        ) -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure109((), v))
        }
        pub fn method138(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure108(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v51: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method77(), v10));
                            let v34: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US25 = v24_0_0.clone();
                                if let Dice_ui::US25::US25_0(v28_0_0) = &v28 {
                                    Dice_ui::US25::US25_0(v28_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v34 {
                                Dice_ui::US25::US25_0(v34_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v62: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v51.clone()))),
                )),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v90: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method97(), v76));
                    if let Dice_ui::US42::US42_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US31 = v90_0_0.clone();
                        if let Dice_ui::US31::US31_0(v94_0_0) = &v94 {
                            Dice_ui::US31::US31_0(v94_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method40(v104_0_0.clone());
                let v111: &str = &*v106;
                let v132: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v133 = Dice_ui::method41();
                let v138: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v132.map_err(|x| v133(x));
                let v148 = Dice_ui::method137();
                let v149: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method138(v138);
                v149.map(|x| v148(x))
            } else {
                if let Dice_ui::US29::US29_0(v51_0_0) = &v51 {
                    let v152: Dice_ui::US30 = v51_0_0.clone();
                    if let Dice_ui::US30::US30_0(v152_0_0) = &v152 {
                        let v153: Dice_ui::US31 = v152_0_0.clone();
                        if let Dice_ui::US31::US31_0(v153_0_0) = &v153 {
                            let v155: string = Dice_ui::method40(v153_0_0.clone());
                            let v160: &str = &*v155;
                            let v181: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v160);
                            let v182 = Dice_ui::method41();
                            let v187: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v181.map_err(|x| v182(x));
                            let v197 = Dice_ui::method137();
                            let v198: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method138(v187);
                            v198.map(|x| v197(x))
                        } else {
                            let v204: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                )),
                                string(""),
                            );
                            let v206: bool = true;
                            leptos::logging::log!("{}", v204);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v213: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            )),
                            string(""),
                        );
                        let v215: bool = true;
                        leptos::logging::log!("{}", v213);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v222: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104.clone(), v51.clone())),
                        )),
                        string(""),
                    );
                    let v224: bool = true;
                    leptos::logging::log!("{}", v222);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure107(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure108(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method136(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure107(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure106(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v9: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v27: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method72(), v13));
            let v71: Dice_ui::US35 = match &v27 {
                Dice_ui::US26::US26_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v32 = Dice_ui::method73();
                    let v33 = Dice_ui::method74();
                    let v34: Dice_ui::US24 = match &v31 {
                        Err(v31_1_0) => v33(v31_1_0.clone()),
                        Ok(v31_0_0) => v32(v31_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v34 {
                        Dice_ui::US24::US24_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method75(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v60.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v34_1_0) => Dice_ui::US36::US36_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v77: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v71.clone()))),
                )),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                leptos::prelude::ArcLocalResource::get(&v2);
            let v95: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method92(), v81));
            let v106: Dice_ui::US38 = match &v95 {
                Dice_ui::US37::US37_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v100 = Dice_ui::method93();
                    let v101 = Dice_ui::method94();
                    Dice_ui::US38::US38_0(match &v99 {
                        Err(v99_1_0) => v101(v99_1_0.clone()),
                        Ok(v99_0_0) => v100(v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v142: Dice_ui::US40 = match &v106 {
                Dice_ui::US38::US38_0(v106_0_0) => {
                    let v107: Dice_ui::US39 = match &v106 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v107 {
                        Dice_ui::US39::US39_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method95(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v107_1_0) => Dice_ui::US41::US41_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v145: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v149: Dice_ui::US41 = match &v142 {
                Dice_ui::US40::US40_0(v142_0_0) => match &v142 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v145.clone()),
            };
            let v214: bool = match &v149 {
                Dice_ui::US41::US41_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US31 = x;
                        let v207: bool = if let Dice_ui::US31::US31_0(v154_0_0) = &v154 {
                            let v160: &str = &*v154_0_0.clone();
                            let v204: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v206: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v204.clone());
                            true
                        } else {
                            false
                        };
                        let v209: bool = true;
                        let v211: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v215 = Dice_ui::method136(v71, v149.clone());
            let v216: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method86(v5);
            let v218: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v216
                .iter()
                .enumerate()
                .map(|(i, x)| v215(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v220: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v218.clone());
            let v226: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v220.clone()),
                    )),
                    string(""),
                ),
            );
            let v228: bool = true;
            leptos::logging::log!("{}", v226);
            v220
        }
        pub fn method140(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure111(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method140(v0_1), v1)
        }
        pub fn method139(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure111(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method141(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn closure110(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> = leptos::prelude::pending(&v1.clone()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> = leptos::prelude::pending(&v2.clone()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::get(&v1);
            let v27: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcLocalResource::get(&v2);
            let v46: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method72(), v32));
            let v90: Dice_ui::US35 = match &v46 {
                Dice_ui::US26::US26_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v51 = Dice_ui::method73();
                    let v52 = Dice_ui::method74();
                    let v53: Dice_ui::US24 = match &v50 {
                        Err(v50_1_0) => v52(v50_1_0.clone()),
                        Ok(v50_0_0) => v51(v50_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v53 {
                        Dice_ui::US24::US24_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method75(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v79.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v53_1_0) => Dice_ui::US36::US36_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v95: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v95))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v100))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v107: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v105.to_vec();
            let v110: bool = true;
            let _func1_from_v108 = Func1::from(move |value| {
                //;
                let v112: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = ();
                let v113 = Dice_ui::method139(v0_1);
                let v114: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = Dice_ui::method141(v112);
                let v117: LrcPtr<Dice_ui::Heap29> = LrcPtr::new(Dice_ui::Heap29 {
                    l0: v114.map(|x| v113(x)),
                });
                let v119: bool = true;
                v117 /*;
                     let v121: bool = */
            }); //;
            let v123: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                LrcPtr<Dice_ui::Heap29>,
            > = _func1_from_v108;
            let v125: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| v123(x.clone()))
                .collect::<Vec<_>>();
            let v131: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v125.clone()),
                    )),
                    string(""),
                ),
            );
            let v133: bool = true;
            leptos::logging::log!("{}", v131);
            v125
        }
        pub fn method135(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
 //;
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
 //;
                                let v29: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v38: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v50: string = string("}");
                                let v55: bool = true;
                                let v45 = v38;
                                let v60: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; v45 "), (v50))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v61: bool = true;
                                v45
                            },
                        ); // rust.fix_closure';
                        let v63 = __future_init;
                        let v65: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v63;
                        let v67: Result<rexie::Rexie, std::string::String> = v65.await;
                        let v72: rexie::Rexie = v67.unwrap();
                        let v83: rexie::Rexie = (Dice_ui::method7())(v72);
                        let v85: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v83);
                        let v91: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v85.clone()))),
                                        string("")));
                        let v93: bool = true;
                        leptos::logging::log!("{}", v91);
                        let v94: string = string("}");
                        let v99: bool = true;
                        let v85 = v85;
                        let v104: string = append(
                            (append(
                                (append((append(string("true; v85 "), (v94))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v105: bool = true;
                        v85
                    },
                ); // rust.fix_closure';
                let v107 = __future_init;
                let v109: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v107;
                let v111: bool = true;
                v109 /*;
                     let v113: bool = */
            }); //;
            let v115: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v117: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|_| async move { v115().await });
            let v120: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v117 = v117.clone();
                    move || Dice_ui::closure55(v117.clone(), ())
                })()
            });
            let v123: bool = true;
            let _func0_from_v121 = Func0::from(move || {
                //;
                let v125: Option<std::sync::Arc<rexie::Rexie>> =
                    leptos::prelude::ArcLocalResource::get(&v117.clone());
                let v127: bool = true;
                let _optionm_map_ = v125.map(|x| {
                    //;
                    let v129: std::sync::Arc<rexie::Rexie> = x;
                    let v132: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v129);
                    let v134: bool = true;
                    v132
                });
                let v136: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v138: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v140: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v142: bool = */
                    async move {
                        /*;
                        let v144: bool = */
 //;
                        let v145: string = sprintf!("{:?}", v136.clone());
                        let v153: string =
                append((append((append((append(string("state_core.use_requests (3) / state_data_resource new_local_resource / request : "),
                                               (Dice_ui::method8(400_i64,
                                                                 sprintf!("{:?}",
                                                                          v138.clone()))))),
                                       string(" / database: "))), (v145))),
                       string(""));
                        let v155: bool = true;
                        leptos::logging::log!("{}", v153);
                        let v157: bool = true;
                        let _optionm_map_ = v136.map(|x| {
                            //;
                            let v159: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v161: std::sync::Arc<rexie::Rexie> = v159.0;
                            let v163: bool = true;
                            v161
                        });
                        let v165: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v179: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v165));
                        let v586: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v179_0_0) = &v179 {
                            let v186: bool = true;
                            let _func1_from_v184 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) = ();
                                let v193: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v194: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v193.clone()),
                                    )),
                                    string(""),
                                );
                                let v196: bool = true;
                                leptos::logging::log!("{}", v194);
                                let v198: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v200: bool = */
                                    async {
                                        /*;
                                        let v202: bool = */
 //;
                                        let v204: Array<string> = new_array(&[string("store")]);
                                        let v206: Vec<string> = v204.to_vec();
                                        let v209: bool = true;
                                        let _func1_from_v207 = Func1::from(move |value| {
                                            //;
                                            let v211: string = ();
                                            let v216: &str = &*v211;
                                            let v260: LrcPtr<Dice_ui::Heap4> =
                                                LrcPtr::new(Dice_ui::Heap4 {
                                                    l0: String::from(v216),
                                                });
                                            let v262: bool = true;
                                            v260 /*;
                                                 let v264: bool = */
                                        }); //;
                                        let v266: Func1<string, LrcPtr<Dice_ui::Heap4>> =
                                            _func1_from_v207;
                                        let v268: Vec<std::string::String> = v206
                                            .into_iter()
                                            .map(|x| v266(x.clone()))
                                            .collect::<Vec<_>>();
                                        let v269: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method10(v179_0_0.clone());
                                        let v271: Result<rexie::Transaction, rexie::Error> = v269
                                            .transaction(&v268, rexie::TransactionMode::ReadOnly);
                                        let v272 = Dice_ui::method11();
                                        let v277: Result<rexie::Transaction, std::string::String> =
                                            v271.map_err(|x| v272(x));
                                        let v288: rexie::Transaction = v277?;
                                        let v289: string = Dice_ui::method12();
                                        let v294: &str = &*v289;
                                        let v315: Result<rexie::Store, rexie::Error> =
                                            v288.store(v294);
                                        let v316 = Dice_ui::method13();
                                        let v321: Result<rexie::Store, std::string::String> =
                                            v315.map_err(|x| v316(x));
                                        let v332: rexie::Store = v321?;
                                        let v333: string = Dice_ui::method70(v193);
                                        let v338: &str = &*v333;
                                        let v359: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v338);
                                        let v361: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v332, v359));
                                        let v363: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v361.await;
                                        let v364 = Dice_ui::method15();
                                        let v369: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v363.map_err(|x| v364(x));
                                        let v380: Option<wasm_bindgen::JsValue> = v369?;
                                        let v394: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method16(), v380),
                                        );
                                        let v494: Dice_ui::US25 = match &v394 {
                                            Dice_ui::US4::US4_0(v394_0_0) => {
                                                let v399: wasm_bindgen::JsValue = Dice_ui::method17(
                                                    match &v394 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v401: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v399);
                                                let v402 = Dice_ui::method18();
                                                let v407: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v401.map_err(|x| v402(x));
                                                let v418: Option<serde_json::Value> = v407?;
                                                let v432: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method19(), v418),
                                                );
                                                match &v432 {
                                                    Dice_ui::US5::US5_0(v432_0_0) => {
                                                        let v437: serde_json::Value =
                                                            Dice_ui::method20(
                                                                match &v432 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v439: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v437);
                                                        let v440 = Dice_ui::method21();
                                                        let v445: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v439.map_err(|x| v440(x));
                                                        let v456: Vec<u8> = v445?;
                                                        let v458: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v456.clone());
                                                        let v460: string =
                                            append((append(string("state_core.get_data () / data_len: "),
                                                           (toString(get_Count(v458.clone()))))),
                                                   string(""));
                                                        let v462: bool = true;
                                                        leptos::logging::log!("{}", v460);
                                                        let v464: Vec<u8> = v458.to_vec();
                                                        let v466: &[u8] = v464.as_slice();
                                                        let v468: bool = true;
                                                        let mut v466 = v466;
                                                        let v470: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v466,
                                                        );
                                                        let v471 = Dice_ui::method22();
                                                        let v476: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v470.map_err(|x| v471(x));
                                                        Dice_ui::US25::US25_0(v476?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v501: Option<LrcPtr<Dice_ui::Heap4>> = match &v494 {
                                            Dice_ui::US25::US25_0(v494_0_0) => Some(
                                                match &v494 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v503: string = string("}");
                                        let v508: bool = true;
                                        let v502 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(v501);
                                        let v513: string = append(
                                            (append(
                                                (append(
                                                    (append(string("true; v502 "), (v503))),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v514: bool = true;
                                        v502
                                    },
                                ); // rust.fix_closure';
                                let v516 = __future_init;
                                let v519: LrcPtr<Dice_ui::Heap13> =
                                    LrcPtr::new(Dice_ui::Heap13 { l0: v516 });
                                let v521: bool = true;
                                v519 /*;
                                     let v523: bool = */
                            }); //;
                            let v525: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                LrcPtr<Dice_ui::Heap13>,
                            > = _func1_from_v184;
                            let v528: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method71(
                                v138.into_iter()
                                    .map(|x| v525(x.clone()))
                                    .collect::<Vec<_>>(),
                            );
                            let v530: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v528);
                            let v532: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v530.await;
                            Dice_ui::US24::US24_0(v532?)
                        } else {
                            let v541: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v541))
                        };
                        let v592: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v586 {
                                Dice_ui::US24::US24_0(v586_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v586_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v586_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v586_1_0.clone(),
                                    )
                                }
                            };
                        let v598: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_requests (4) / state_data_resource new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v592.clone()))),
                                        string("")));
                        let v600: bool = true;
                        leptos::logging::log!("{}", v598);
                        let v601: string = string("}");
                        let v606: bool = true;
                        let v592 = v592;
                        let v611: string = append(
                            (append(
                                (append((append(string("true; v592 "), (v601))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v612: bool = true;
                        v592
                    },
                ); // rust.fix_closure';
                let v614 = __future_init;
                let v616: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                > = v614;
                let v618: bool = true;
                v616 /*;
                     let v620: bool = */
            }); //;
            let v622: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                >,
            > = _func0_from_v121;
            let v624: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|_| async move { v622().await });
            let v627: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v624 = v624.clone();
                    move || Dice_ui::closure56(v624.clone(), ())
                })()
            });
            let v630: bool = true;
            let _func0_from_v628 = Func0::from(move || {
                //;
                let v632: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v634: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v627.clone());
                let v640: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v632.clone()))),
                    )),
                    string(""),
                );
                let v642: bool = true;
                leptos::logging::log!("{}", v640);
                let v644: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v646: bool = */
                    async move {
                        /*;
                        let v648: bool = */
 //;
                        let v662: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method72(), v634));
                        let v704: Dice_ui::US27 = match &v662 {
                            Dice_ui::US26::US26_0(v662_0_0) => {
                                let v666: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v662 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v667 = Dice_ui::method73();
                                let v668 = Dice_ui::method74();
                                let v669: Dice_ui::US24 = match &v666 {
                                    Err(v666_1_0) => v668(v666_1_0.clone()),
                                    Ok(v666_0_0) => v667(v666_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v669 {
                                    Dice_ui::US24::US24_0(v669_0_0) => {
                                        let v672: bool = true;
                                        let _vec_map: Vec<_> = v669_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v674: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v688: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method75(), v674),
                                                );
                                                let v693: bool = true;
                                                v688
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v669_1_0) => {
                                        Dice_ui::US28::US28_1(v669_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v710: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v704.clone()))),
                            )),
                            string(""),
                        );
                        let v712: bool = true;
                        leptos::logging::log!("{}", v710);
                        let v713 = Dice_ui::method76(v704);
                        let v714: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method86(v632);
                        let v717: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method87(
                            v714.iter()
                                .enumerate()
                                .map(|(i, x)| v713(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v719: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v717);
                        let v721: Result<Vec<Option<string>>, std::string::String> = v719.await;
                        let v723: Vec<Option<string>> = v721?;
                        let v725: string = string("}");
                        let v730: bool = true;
                        let v724 = Ok::<Vec<Option<string>>, std::string::String>(v723);
                        let v735: string = append(
                            (append(
                                (append((append(string("true; v724 "), (v725))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v736: bool = true;
                        v724
                    },
                ); // rust.fix_closure';
                let v738 = __future_init;
                let v740: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                > = v738;
                let v742: bool = true;
                v740 /*;
                     let v744: bool = */
            }); //;
            let v746: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                >,
            > = _func0_from_v628;
            let v748: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|_| async move { v746().await });
            let v751: bool = true;
            let _func1_from_v749 = Func1::from(move |value| {
                //;
                let v753: LrcPtr<Dice_ui::Heap4> = ();
                let v758: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v753.clone())) as i64)),
                    )),
                    string(""),
                );
                let v760: bool = true;
                leptos::logging::log!("{}", v758);
                let v762: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v764: bool = */
                    async move {
                        /*;
                        let v766: bool = */
 //;
                        let v768: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v770: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v768);
                        let v772: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v120);
                        let v774: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v772);
                        let v776: bool = true;
                        let _optionm_map_ = v774.map(|x| {
                            //;
                            let v778: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v780: std::sync::Arc<rexie::Rexie> = v778.0;
                            let v782: bool = true;
                            v780
                        });
                        let v784: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v798: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v784));
                        let v953: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v798_0_0) = &v798 {
                            let v805: bool = true;
                            let _func1_from_v803 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    ();
                                let v807: string = patternInput_1.0.clone();
                                let v813: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v815: bool = */
                                    async move {
                                        /*;
                                        let v817: bool = */
 //;
                                        let v818: string =
                        append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                       (v807.clone()))), string(""));
                                        let v820: bool = true;
                                        leptos::logging::log!("{}", v818);
                                        let v821: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v807))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v826: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v753.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v828: bool = true;
                                        leptos::logging::log!("{}", v826);
                                        let v830: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v832: bool = */
                                            async move {
                                                /*;
                                                let v834: bool = */
 //;
                                                let v836: bool = true;
                                                let mut data = Vec::new();
                                                let v838: bool = true;
                                                borsh::BorshSerialize::serialize(&v753, &mut data)
                                                    .unwrap();
                                                let v840: Vec<u8> = data;
                                                let v842: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v840).unwrap();
                                                let v843: string = Dice_ui::method88(v821);
                                                let v848: &str = &*v843;
                                                let v869: rexie::Transaction =
                                                    v798_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v871: rexie::Store = v869.store("store")?;
                                                let v873: bool = true;
                                                v871.put(&v842, Some(&v848.into())).await?;
                                                let v875: bool = true;
                                                v869.done().await?;
                                                let v877: string = string("}");
                                                let v882: bool = true;
                                                let v876 = Ok::<(), rexie::Error>(());
                                                let v887: string = append(
                                                    (append(
                                                        (append(
                                                            (append(string("true; v876 "), (v877))),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v888: bool = true;
                                                v876
                                            },
                                        ); // rust.fix_closure';
                                        let v890 = __future_init;
                                        let v892: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<(), rexie::Error>,
                                                >,
                                            >,
                                        > = v890;
                                        let v894: Result<(), rexie::Error> = v892.await;
                                        let v895 = Dice_ui::method89();
                                        let v900: Result<(), std::string::String> =
                                            v894.map_err(|x| v895(x));
                                        let v911: bool = true;
                                        v900?;
                                        let v913: string = string("}");
                                        let v918: bool = true;
                                        let v912 = Ok::<(), std::string::String>(());
                                        let v923: string = append(
                                            (append(
                                                (append(
                                                    (append(string("true; v912 "), (v913))),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v924: bool = true;
                                        v912
                                    },
                                ); // rust.fix_closure';
                                let v926 = __future_init;
                                let v929: LrcPtr<Dice_ui::Heap14> =
                                    LrcPtr::new(Dice_ui::Heap14 { l0: v926 });
                                let v931: bool = true;
                                v929 /*;
                                     let v933: bool = */
                            }); //;
                            let v935: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                LrcPtr<Dice_ui::Heap14>,
                            > = _func1_from_v803;
                            let v938: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method90(
                                v770.into_iter()
                                    .map(|x| v935(x.clone()))
                                    .collect::<Vec<_>>(),
                            );
                            let v940: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v938);
                            let v942: Result<Vec<()>, std::string::String> = v940.await;
                            Dice_ui::US34::US34_0(v942?)
                        } else {
                            let v948: bool = true;
                            leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v959: Result<Vec<()>, std::string::String> = match &v953 {
                            Dice_ui::US34::US34_0(v953_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v953_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v953_1_0) => {
                                Err::<Vec<()>, std::string::String>(v953_1_0.clone())
                            }
                        };
                        let v960: string = string("}");
                        let v965: bool = true;
                        let v959 = v959;
                        let v970: string = append(
                            (append(
                                (append((append(string("true; v959 "), (v960))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v971: bool = true;
                        v959
                    },
                ); // rust.fix_closure';
                let v973 = __future_init;
                let v976: LrcPtr<Dice_ui::Heap15> = LrcPtr::new(Dice_ui::Heap15 { l0: v973 });
                let v978: bool = true;
                v976 /*;
                     let v980: bool = */
            }); //;
            let v982: Func1<LrcPtr<Dice_ui::Heap4>, LrcPtr<Dice_ui::Heap15>> = _func1_from_v749;
            let v985: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v982 = v982.clone();
                    move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure66(v982.clone(), v)
                })(value.clone())
            });
            let v988: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v627 = v627.clone();
                    let v748 = v748.clone();
                    let v985 = v985.clone();
                    move || {
                        Dice_ui::closure106(
                            v0_1.clone(),
                            v627.clone(),
                            v748.clone(),
                            v985.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v117 = v117.clone();
                    let v624 = v624.clone();
                    let v988 = v988.clone();
                    move || {
                        Dice_ui::closure110(
                            v1.clone(),
                            v117.clone(),
                            v624.clone(),
                            v988.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn method142() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure112(unitVar: (), v0_1: Dice_ui::US14) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn method143() -> Func1<Dice_ui::US14, Dice_ui::US57> {
            Func1::new(move |v: Dice_ui::US14| Dice_ui::closure112((), v))
        }
        pub fn closure113(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn method144() -> Func1<std::string::String, Dice_ui::US57> {
            Func1::new(move |v: std::string::String| Dice_ui::closure113((), v))
        }
        pub fn closure114(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn method145() -> Func1<crate::model::near::rpc::RpcResponse, Dice_ui::US60> {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure114((), v))
        }
        pub fn closure115(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn method146() -> Func1<std::string::String, Dice_ui::US60> {
            Func1::new(move |v: std::string::String| Dice_ui::closure115((), v))
        }
        pub fn method147(
            v0_1: Func1<LrcPtr<Dice_ui::Heap30>, LrcPtr<Dice_ui::Heap31>>,
        ) -> Func1<LrcPtr<Dice_ui::Heap30>, LrcPtr<Dice_ui::Heap31>> {
            v0_1
        }
        pub fn closure116(
            v0_1: Func1<LrcPtr<Dice_ui::Heap30>, LrcPtr<Dice_ui::Heap31>>,
            v1: LrcPtr<Dice_ui::Heap30>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
        > {
            let v2: Func1<LrcPtr<Dice_ui::Heap30>, LrcPtr<Dice_ui::Heap31>> =
                Dice_ui::method147(v0_1);
            ((move |x| v2(x))(v1)).l0.clone()
        }
        pub fn closure119(unitVar: (), v0_1: Dice_ui::US59) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(v0_1)
        }
        pub fn method149() -> Func1<Dice_ui::US59, Dice_ui::US58> {
            Func1::new(move |v: Dice_ui::US59| Dice_ui::closure119((), v))
        }
        pub fn closure120(unitVar: (), v0_1: std::string::String) -> Dice_ui::US58 {
            Dice_ui::US58::US58_1(v0_1)
        }
        pub fn method150() -> Func1<std::string::String, Dice_ui::US58> {
            Func1::new(move |v: std::string::String| Dice_ui::closure120((), v))
        }
        pub fn closure118(
            unitVar: (),
            v0_1: Result<Dice_ui::US59, std::string::String>,
        ) -> Dice_ui::US58 {
            let v1 = Dice_ui::method149();
            let v2 = Dice_ui::method150();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn method148() -> Func1<Result<Dice_ui::US59, std::string::String>, Dice_ui::US58> {
            Func1::new(move |v: Result<Dice_ui::US59, std::string::String>| {
                Dice_ui::closure118((), v)
            })
        }
        pub fn closure121(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US62 {
            Dice_ui::US62::US62_0(v0_1)
        }
        pub fn method151() -> Func1<Dice_ui::US58, Dice_ui::US62> {
            Func1::new(move |v: Dice_ui::US58| Dice_ui::closure121((), v))
        }
        pub fn closure117(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap30>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::prelude::ArcRwSignal<
                Option<Result<Dice_ui::US59, std::string::String>>,
            > = leptos::prelude::ArcAction::value(&v0_1);
            let v4: Option<Result<Dice_ui::US59, std::string::String>> =
                leptos::prelude::ArcRwSignal::get(&v2);
            let v6: Option<Dice_ui::US58> = map(Dice_ui::method148(), v4);
            let v32: Dice_ui::US62 =
                defaultValue(Dice_ui::US62::US62_1, map(Dice_ui::method151(), v6));
            let v53: Dice_ui::US58 = if let Dice_ui::US62::US62_0(v32_0_0) = &v32 {
                let v36: Dice_ui::US58 = v32_0_0.clone();
                match &v36 {
                    Dice_ui::US58::US58_0(v36_0_0) => {
                        let v39: Dice_ui::US59 = v36_0_0.clone();
                        if let Dice_ui::US59::US59_0(v39_0_0, v39_0_1, v39_0_2, v39_0_3) = &v39 {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                v39_0_0.clone(),
                                v39_0_1.clone(),
                                v39_0_2.clone(),
                                v39_0_3.clone(),
                            ))
                        } else {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                        }
                    }
                    Dice_ui::US58::US58_1(v36_1_0) => Dice_ui::US58::US58_1(v36_1_0.clone()),
                }
            } else {
                Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
            };
            let v69: Dice_ui::US63 = match &v53 {
                Dice_ui::US58::US58_0(v53_0_0) => {
                    let v54: Dice_ui::US59 = v53_0_0.clone();
                    Dice_ui::US63::US63_0(match &v54 {
                        Dice_ui::US59::US59_0(v54_0_0, v54_0_1, v54_0_2, v54_0_3) => Some((
                            match &v54 {
                                Dice_ui::US59::US59_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US59::US59_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US59::US59_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US59::US59_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US58::US58_1(v53_1_0) => Dice_ui::US63::US63_1(v53_1_0.clone()),
            };
            let v75: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v69 {
                Dice_ui::US63::US63_0(v69_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_0_0.clone()),
                Dice_ui::US63::US63_1(v69_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_1_0.clone()),
            };
            let v81: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / roll new_arc_memo / result: "),
                        sprintf!("{:?}", v75.clone()),
                    )),
                    string(""),
                ),
            );
            let v83: bool = true;
            leptos::logging::log!("{}", v81);
            v75
        }
        pub fn closure123(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method152() -> Func1<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            Dice_ui::US63,
        > {
            Func1::new(
                move |v: Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>| Dice_ui::closure123((), v),
            )
        }
        pub fn closure124(unitVar: (), v0_1: std::string::String) -> Dice_ui::US63 {
            Dice_ui::US63::US63_1(v0_1)
        }
        pub fn method153() -> Func1<std::string::String, Dice_ui::US63> {
            Func1::new(move |v: std::string::String| Dice_ui::closure124((), v))
        }
        pub fn closure125(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method154() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US59,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure125((), arg10_0040),
            )
        }
        pub fn closure126(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method155() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US64,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure126((), arg10_0040),
            )
        }
        pub fn closure122(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method152();
            let v4 = Dice_ui::method153();
            let v5: Dice_ui::US63 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v31: Dice_ui::US58 = match &v5 {
                Dice_ui::US63::US63_0(v5_0_0) => Dice_ui::US58::US58_0(defaultValue(
                    Dice_ui::US59::US59_1,
                    map(Dice_ui::method154(), v5_0_0.clone()),
                )),
                Dice_ui::US63::US63_1(v5_1_0) => Dice_ui::US58::US58_1(v5_1_0.clone()),
            };
            let v72: Dice_ui::US31 = if let Dice_ui::US58::US58_0(v31_0_0) = &v31 {
                let v32: Dice_ui::US59 = v31_0_0.clone();
                if let Dice_ui::US59::US59_0(v32_0_0, v32_0_1, v32_0_2, v32_0_3) = &v32 {
                    let v55: Dice_ui::US64 = defaultValue(
                        Dice_ui::US64::US64_1,
                        map(Dice_ui::method155(), v32_0_2.clone()),
                    );
                    if let Dice_ui::US64::US64_0(
                        v55_0_0,
                        v55_0_1,
                        v55_0_2,
                        v55_0_3,
                        v55_0_4,
                        v55_0_5,
                    ) = &v55
                    {
                        Dice_ui::US31::US31_0(append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append((toString(v55_0_0.clone())), string(": "))),
                                                (toString(v55_0_4.clone())),
                                            )),
                                            string(" - "),
                                        )),
                                        (toString(v55_0_5.clone())),
                                    )),
                                    string(" ("),
                                )),
                                (toString(v55_0_1.clone())),
                            )),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US31::US31_1
                    }
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            let v79: Option<string> = match &v72 {
                Dice_ui::US31::US31_0(v72_0_0) => Some(
                    match &v72 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => None::<string>,
            };
            let v85: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / error_message new_arc_memo / result: "),
                        sprintf!("{:?}", v79.clone()),
                    )),
                    string(""),
                ),
            );
            let v87: bool = true;
            leptos::logging::log!("{}", v85);
            v79
        }
        pub fn closure127(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US31 {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v23: Dice_ui::US14 = defaultValue(
                Dice_ui::US14::US14_1,
                map(Dice_ui::method38(), v8.l1.clone()),
            );
            match &v23 {
                Dice_ui::US14::US14_0(v23_0_0) => {
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                        match &v23 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US31::US31_1,
            }
        }
        pub fn closure130(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = leptos::prelude::signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure129(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure130(v0_1, v)
            })
        }
        pub fn method156() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure129((), v))
        }
        pub fn method157(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure128(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let v14: LrcPtr<(bool, std::string::String)> = ();
                let v21: LrcPtr<Dice_ui::Heap32> = LrcPtr::new(Dice_ui::Heap32 {
                    l0: v14.0.clone(),
                    l1: v14.1.clone(),
                });
                let v23: bool = true;
                v21 /*;
                    let v25: bool = */
            }); //;
            let v27: Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<Dice_ui::Heap32>> =
                _func1_from_v10;
            let v29: Vec<(bool, std::string::String)> = v8
                .l0
                .clone()
                .into_iter()
                .map(|x| v27(x.clone()))
                .collect::<Vec<_>>();
            let v30 = Dice_ui::method54();
            let v31: Vec<(bool, std::string::String)> = Dice_ui::method55(v29);
            let v33: Vec<(bool, std::string::String)> = v31
                .into_iter()
                .filter(|x| v30(x.clone().clone()))
                .collect::<Vec<_>>();
            let v36: bool = true;
            let _func1_from_v34 = Func1::from(move |value| {
                //;
                let v40: LrcPtr<Dice_ui::Heap4> =
                    LrcPtr::new(Dice_ui::Heap4 { l0: (()).1.clone() });
                let v42: bool = true;
                v40 /*;
                    let v44: bool = */
            }); //;
            let v46: Func1<(bool, std::string::String), LrcPtr<Dice_ui::Heap4>> = _func1_from_v34;
            let v48: Vec<std::string::String> =
                v33.into_iter().map(|x| v46(x.clone())).collect::<Vec<_>>();
            let v49 = Dice_ui::method156();
            let v50: Vec<std::string::String> = Dice_ui::method157(v48);
            v50.iter()
                .enumerate()
                .map(|(i, x)| v49(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn closure131(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )> = ();
                let b: (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = v7.1.clone();
                let v17: LrcPtr<Dice_ui::Heap33> = LrcPtr::new(Dice_ui::Heap33 {
                    l0: v7.0.clone(),
                    l1: b.0.clone(),
                    l2: b.1.clone(),
                });
                let v19: bool = true;
                v17 /*;
                    let v21: bool = */
            }); //;
            let v23: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                LrcPtr<Dice_ui::Heap33>,
            > = _func1_from_v3;
            let v25: Vec<(
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            )> = v2.into_iter().map(|x| v23(x.clone())).collect::<Vec<_>>();
            let v28: bool = true;
            let _func1_from_v26 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = ();
                let v33: LrcPtr<Dice_ui::Heap34> = LrcPtr::new(Dice_ui::Heap34 {
                    l0: patternInput.0.clone(),
                    l1: patternInput.1.clone(),
                });
                let v35: bool = true;
                v33 /*;
                    let v37: bool = */
            }); //;
            let v39: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                LrcPtr<Dice_ui::Heap34>,
            > = _func1_from_v26;
            v25.into_iter().map(|x| v39(x.clone())).collect::<Vec<_>>()
        }
        pub fn closure132(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure133(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure134(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure135(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure136(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method158() -> Func0<string> {
            Func0::new(move || Dice_ui::closure136((), ()))
        }
        pub fn closure137(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure139(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure140(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure141(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure142(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure144(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<Dice_ui::US31>,
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(v0_1)
        }
        pub fn method160() -> Func1<leptos::prelude::ArcMemo<Dice_ui::US31>, Dice_ui::US65> {
            Func1::new(move |v: leptos::prelude::ArcMemo<Dice_ui::US31>| Dice_ui::closure144((), v))
        }
        pub fn closure143(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v16: Dice_ui::US65 =
                defaultValue(Dice_ui::US65::US65_1, map(Dice_ui::method160(), v1));
            let v26: Dice_ui::US42 = match &v16 {
                Dice_ui::US65::US65_0(v16_0_0) => {
                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                        &match &v16 {
                            Dice_ui::US65::US65_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US42::US42_1,
            };
            let v33: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v26_0_0) = &v26 {
                let v27: Dice_ui::US31 = v26_0_0.clone();
                if let Dice_ui::US31::US31_0(v27_0_0) = &v27 {
                    Dice_ui::US31::US31_0(v27_0_0.clone())
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            match &v33 {
                Dice_ui::US31::US31_0(v33_0_0) => match &v33 {
                    Dice_ui::US31::US31_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string("Select..."),
            }
        }
        pub fn method159(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure143(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure146(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method161() -> Func1<
            leptos::prelude::ArcMemo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            Dice_ui::US66,
        > {
            Func1::new(
                move |v: leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >| Dice_ui::closure146((), v),
            )
        }
        pub fn method162(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure147(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method163(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                LrcPtr<Dice_ui::Heap30>,
            >,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), LrcPtr<Dice_ui::Heap30>>
        {
            v0_1
        }
        pub fn closure148(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                LrcPtr<Dice_ui::Heap30>,
            >,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> i32 {
            let v3: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                LrcPtr<Dice_ui::Heap30>,
            > = Dice_ui::method163(v0_1);
            ((move |x| v3(x))(_arg.0.clone())).l0
        }
        pub fn method164(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                LrcPtr<Dice_ui::Heap35>,
            >,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), LrcPtr<Dice_ui::Heap35>>
        {
            v0_1
        }
        pub fn closure149(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                LrcPtr<Dice_ui::Heap35>,
            >,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> leptos::prelude::AnyView {
            let v3: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                LrcPtr<Dice_ui::Heap35>,
            > = Dice_ui::method164(v0_1);
            ((move |x| v3(x))(_arg.0.clone())).l0.clone()
        }
        pub fn closure145(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v5: string = append(
                (append((append(string(" "), (v3))), string(""))),
                string(""),
            );
            let v19: Dice_ui::US66 = defaultValue(
                Dice_ui::US66::US66_1,
                map(Dice_ui::method161(), v0_1.clone()),
            );
            let v29: Dice_ui::US67 = match &v19 {
                Dice_ui::US66::US66_0(v19_0_0) => {
                    Dice_ui::US67::US67_0(leptos::prelude::ArcMemo::get(
                        &match &v19 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US67::US67_1,
            };
            let v32: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::prelude::ReadSignal<std::string::String>)>().to_vec();
            let v35: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> = match &v29 {
                Dice_ui::US67::US67_0(v29_0_0) => match &v29 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => v32.clone(),
            };
            let v716: leptos::prelude::Fragment = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v35.clone()),
            ) as u64)
                == 0_u64
            {
                let v41: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v43: string = string(" class=\"[height:17px]\"");
                let v57: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v63: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v64: string = string("vec![]");
                let v65: Vec<leptos::prelude::AnyView> = vec![];
                let v67: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v65);
                let v69: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v67);
                let v72: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v63))),
                                    string(">move || { v69 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v74: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v69 }</path> };
                let v76: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v74);
                let v80: string = string("vec![v76]");
                let v81: Vec<leptos::prelude::AnyView> = vec![v76];
                let v83: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v81);
                let v85: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v83);
                let v88: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v57))),
                                    string(">move || { v85 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v90: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v85 }</svg> };
                let v92: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v90);
                let v96: string = string("vec![v92]");
                let v97: Vec<leptos::prelude::AnyView> = vec![v92];
                let v99: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v97);
                let v101: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v99);
                let v104: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v43))),
                                    string(">move || { v101 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v106: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v101 }</span> };
                let v108: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v106);
                let v110: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v116: &str = &*string("No data");
                let v140: std::string::String = String::from(v116);
                let v161: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v140));
                let v165: string = string("vec![v161]");
                let v166: Vec<leptos::prelude::AnyView> = vec![v161];
                let v168: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v166);
                let v170: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v168);
                let v173: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v110))),
                                    string(">move || { v170 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v175: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v170 }</pre> };
                let v177: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v175);
                let v185: string = string("vec![v108, v177]");
                let v186: Vec<leptos::prelude::AnyView> = vec![v108, v177];
                let v188: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v186);
                let v190: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v188);
                let v193: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v41))),
                                    string(">move || { v190 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v195: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v190 }</div> };
                let v197: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v195);
                let v201: string = string("vec![v197]");
                let v202: Vec<leptos::prelude::AnyView> = vec![v197];
                leptos::prelude::Fragment::new(v202)
            } else {
                let v218: Dice_ui::US66 =
                    defaultValue(Dice_ui::US66::US66_1, map(Dice_ui::method161(), v0_1));
                match &v218 {
                    Dice_ui::US66::US66_0(v218_0_0) => {
                        let v224: leptos::prelude::ArcMemo<
                            Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                        > = match &v218 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v227: bool = true;
                        let _func1_from_v225 = Func1::from(move |value| {
                            //;
                            let v231: LrcPtr<Dice_ui::Heap30> =
                                LrcPtr::new(Dice_ui::Heap30 { l0: (()).0.clone() });
                            let v233: bool = true;
                            v231 /*;
                                 let v235: bool = */
                        }); //;
                        let v237: Func1<
                            (i32, leptos::prelude::ReadSignal<std::string::String>),
                            LrcPtr<Dice_ui::Heap30>,
                        > = _func1_from_v225;
                        let v240: bool = true;
                        let _func1_from_v238 = Func1::from(move |value| {
                            //;
                            let patternInput_1: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = ();
                            let v245: std::string::String =
                                leptos::prelude::ReadSignal::get(&patternInput_1.1.clone());
                            let v246: std::string::String = Dice_ui::method162(v245.clone());
                            let v249: bool = true;
                            let _func0_from_v247 = Func0::from(move || {
                                //;
                                let v251: string =
                                    fable_library_rust::String_::fromString(v245.clone());
                                let v254: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v256: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v254);
                                let v259: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                                > = Box::pin(v256.l3.clone());
                                let v261: LrcPtr<Dice_ui::Heap0> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v259);
                                let v269: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v271: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v269);
                                let v277: &str = &*v251;
                                let v324: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                                    l0: v261.l0.clone(),
                                    l1: Some(String::from(v277)),
                                    l2: v261.l2,
                                    l3: v261.l3,
                                    l4: v261.l4.clone(),
                                });
                                let v326: bool = true;
                                leptos::prelude::ArcRwSignal::set(&v271.l3.clone(), v324); //;
                                let v328: bool = true; /*;
                                                       let v330: bool = */
                            }); //;
                            let v332: Func0<()> = _func0_from_v247;
                            let v407: List<string> = ofArray_1(new_array(&[
                                string("flex"),
                                string("flex-1"),
                                string("gap-[10px]"),
                                string("[align-items:center]"),
                                string("[justify-content:center]"),
                                string("inline-block"),
                                string("rounded"),
                                string("border"),
                                string("border-gray-400"),
                                string("hover:bg-gray-100"),
                                string("px-[22px]"),
                                string("py-1"),
                                string("text-sm"),
                                string("text-gray-900"),
                                string("bg-gray-200"),
                                string("hover:text-gray-600"),
                                string("focus:outline-none"),
                                string("focus:ring"),
                                string("active:text-gray-500"),
                            ]));
                            let v422: string = join(
                                string(" "),
                                toArray(delay(Func0::new({
                                    let v407 = v407.clone();
                                    move || {
                                        map_1(
                                            Func1::new({
                                                let v407 = v407.clone();
                                                move |i: i32| item(i, v407.clone())
                                            }),
                                            rangeNumeric(
                                                0_i32,
                                                1_i32,
                                                (length_1(v407.clone())) - 1_i32,
                                            ),
                                        )
                                    }
                                }))),
                            );
                            let v429: &str = &*v422;
                            let v453: std::string::String = String::from(v429);
                            let v474: std::string::String = v453;
                            let v480: string =
                                string(" aria-label=v246 on:click=move |_| v332() class=v474");
                            let v482: string = fable_library_rust::String_::fromString(v245);
                            let v496: Dice_ui::US65 = defaultValue(
                                Dice_ui::US65::US65_1,
                                map(Dice_ui::method160(), v1.clone()),
                            );
                            let v506: Dice_ui::US42 = match &v496 {
                                Dice_ui::US65::US65_0(v496_0_0) => {
                                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                                        &match &v496 {
                                            Dice_ui::US65::US65_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US42::US42_1,
                            };
                            let v513: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v506_0_0) = &v506
                            {
                                let v507: Dice_ui::US31 = v506_0_0.clone();
                                if let Dice_ui::US31::US31_0(v507_0_0) = &v507 {
                                    Dice_ui::US31::US31_0(v507_0_0.clone())
                                } else {
                                    Dice_ui::US31::US31_1
                                }
                            } else {
                                Dice_ui::US31::US31_1
                            };
                            let v602: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(
                                v513_0_0,
                            ) = &v513
                            {
                                if (v482.clone()) == (v513_0_0.clone()) {
                                    let v518 = {
                                        let clo = Func0::new(move || Dice_ui::closure147((), ()));
                                        Func1::new({
                                            let clo = clo.clone();
                                            move |arg: ()| clo()
                                        })
                                    };
                                    let v530: string =
                                            string(" class=move || \" \".to_owned() + &v518(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                                    let v540: string =
                                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"");
                                    let v541: string = string("vec![]");
                                    let v542: Vec<leptos::prelude::AnyView> = vec![];
                                    let v544: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v542);
                                    let v546: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v544);
                                    let v549: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<circle "), (v540))),
                                                        string(">move || { v546 }</"),
                                                    )),
                                                    string("circle"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v551: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                                    > = leptos::prelude::view! { <circle  stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">move || { v546 }</circle> };
                                    let v553: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v551);
                                    let v559: string =
                                            string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                                    let v560: string = string("vec![]");
                                    let v561: Vec<leptos::prelude::AnyView> = vec![];
                                    let v563: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v561);
                                    let v565: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v563);
                                    let v568: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<path "), (v559))),
                                                        string(">move || { v565 }</"),
                                                    )),
                                                    string("path"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v570: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                    > = leptos::prelude::view! { <path  d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">move || { v565 }</path> };
                                    let v572: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v570);
                                    let v580: string = string("vec![v553, v572]");
                                    let v581: Vec<leptos::prelude::AnyView> = vec![v553, v572];
                                    let v583: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v581);
                                    let v585: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v583);
                                    let v588: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<svg "), (v530))),
                                                        string(">move || { v585 }</"),
                                                    )),
                                                    string("svg"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v590: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v518(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v585 }</svg> };
                                    leptos::prelude::IntoAny::into_any(v590)
                                } else {
                                    let v593: string = string("vec![]");
                                    let v594: Vec<leptos::prelude::AnyView> = vec![];
                                    leptos::prelude::IntoAny::into_any(v594)
                                }
                            } else {
                                let v598: string = string("vec![]");
                                let v599: Vec<leptos::prelude::AnyView> = vec![];
                                leptos::prelude::IntoAny::into_any(v599)
                            };
                            let v607: &str = &*v482;
                            let v631: std::string::String = String::from(v607);
                            let v652: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v631),
                            );
                            let v660: string = string("vec![v602, v652]");
                            let v661: Vec<leptos::prelude::AnyView> = vec![v602, v652];
                            let v663: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v661);
                            let v665: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v663);
                            let v668: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<button "), (v480))),
                                                string(">move || { v665 }</"),
                                            )),
                                            string("button"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v670: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Button, _, _>,
                            > = leptos::prelude::view! { <button  aria-label=v246 on:click=move |_| v332() class=v474>move || { v665 }</button> };
                            let v672: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v670);
                            let v676: string = string("vec![v672]");
                            let v677: Vec<leptos::prelude::AnyView> = vec![v672];
                            let v679: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v677);
                            let v682: LrcPtr<Dice_ui::Heap35> = LrcPtr::new(Dice_ui::Heap35 {
                                l0: leptos::prelude::AnyView::from(v679),
                            });
                            let v684: bool = true;
                            v682 /*;
                                 let v686: bool = */
                        }); //;
                        let v688: Func1<
                            (i32, leptos::prelude::ReadSignal<std::string::String>),
                            LrcPtr<Dice_ui::Heap35>,
                        > = _func1_from_v238;
                        let v701: string =
                                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v693(x) let:x key=move |x| v690(x.to_owned()) each=v224 /> })");
                        let v702: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::view! { <leptos::prelude::For  children=move |x| v693(x) let:x key=move |x| v690(x.to_owned()) each=v224 /> },
                        );
                        let v706: string = string("vec![v702]");
                        let v707: Vec<leptos::prelude::AnyView> = vec![v702];
                        leptos::prelude::Fragment::new(v707)
                    }
                    _ => {
                        let v710: string = string("vec![]");
                        let v711: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::Fragment::new(v711)
                    }
                }
            };
            let v718: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v716);
            let v721: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5))),
                                string(">move || { v718 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v723: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">move || { v718 }</div> };
            let v725: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v723);
            let v729: string = string("vec![v725]");
            let v730: Vec<leptos::prelude::AnyView> = vec![v725];
            leptos::prelude::Fragment::new(v730)
        }
        pub fn method165(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            v0_1
        }
        pub fn closure150(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method166(
            v0_1: Func1<std::string::String, LrcPtr<Dice_ui::Heap36>>,
        ) -> Func1<std::string::String, LrcPtr<Dice_ui::Heap36>> {
            v0_1
        }
        pub fn closure151(
            v0_1: Func1<std::string::String, LrcPtr<Dice_ui::Heap36>>,
            v1: std::string::String,
        ) {
            let v2: Func1<std::string::String, LrcPtr<Dice_ui::Heap36>> = Dice_ui::method166(v0_1);
            let v4: LrcPtr<Dice_ui::Heap36> = (move |x| v2(x))(v1);
            ()
        }
        pub fn closure152(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap30>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::prelude::ArcMemo<bool> = leptos::prelude::ArcAction::pending(&v0_1);
            leptos::prelude::ArcMemo::get(&v2)
        }
        pub fn method167(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure153(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure138(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap30>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<Option<string>>,
            v3: leptos::prelude::ArcMemo<Dice_ui::US31>,
            v4: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v9: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v15: &str = &*string("Account");
            let v39: std::string::String = String::from(v15);
            let v60: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v39));
            let v63: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            > = Some(v4);
            let v66: Option<leptos::prelude::ArcMemo<Dice_ui::US31>> = Some(v3);
            let v69: string = string("vec![]");
            let v70: Vec<leptos::prelude::AnyView> = vec![];
            let v72: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v70);
            let v74: string = string(" class=\"flex flex-col [position:relative]\"");
            let v77 = {
                let clo = Func0::new(move || Dice_ui::closure139((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v80 = {
                let clo_1 = Func0::new(move || Dice_ui::closure140((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v82: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v86: string = string("vec![v72]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v72];
            let v89: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v87);
            let v91: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v89);
            let v94: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v82))),
                                string(">move || { v91 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v96: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v91 }</div> };
            let v98: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v96);
            let v99: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v77(())");
            let v102: string = append(
                (append(
                    string(" open=move || v80(())"),
                    (append(
                        (append((append(string(" "), (v99))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v105 = {
                let clo_2 = Func0::new(move || Dice_ui::closure141((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v108 = {
                let clo_3 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v63 = v63.clone();
                    let v66 = v66.clone();
                    move || Dice_ui::closure142(v63.clone(), v66.clone(), v0_1.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v109: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v108(()) + \" \" + &v105(())");
            let v110: string = append(
                (append((append(string(" "), (v109))), string(""))),
                string(""),
            );
            let v112: string = string(" class=\"flex items-center gap-2\"");
            let v115: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v116: string = (Dice_ui::method159(v63.clone(), v66.clone(), v0_1.clone()))();
            let v121: &str = &*v116;
            let v145: std::string::String = String::from(v121);
            let v166: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v145));
            let v170: string = string("vec![v166]");
            let v171: Vec<leptos::prelude::AnyView> = vec![v166];
            let v173: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v171);
            let v175: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v173);
            let v178: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v115))),
                                string(">move || { v175 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v180: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v175 }</span> };
            let v182: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v180);
            let v186: string = string("vec![v182]");
            let v187: Vec<leptos::prelude::AnyView> = vec![v182];
            let v189: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v187);
            let v191: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v189);
            let v193: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v112))),
                                string(">move || { v191 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v195: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v191 }</div> };
            let v197: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v195);
            let v199: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v202 = {
                let clo_4 = Func0::new(move || Dice_ui::closure137((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v210: string =
                string(" class=move || \" \".to_owned() + &v202(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v212: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v216: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v212))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v217: string = string("vec![]");
            let v218: Vec<leptos::prelude::AnyView> = vec![];
            let v220: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v218);
            let v222: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v220);
            let v225: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v216))),
                                string(">move || { v222 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v227: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v222 }</path> };
            let v229: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v227);
            let v233: string = string("vec![v229]");
            let v234: Vec<leptos::prelude::AnyView> = vec![v229];
            let v236: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v234);
            let v238: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v236);
            let v241: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v210))),
                                string(">move || { v238 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v243: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v202(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v238 }</svg> };
            let v245: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v243);
            let v249: string = string("vec![v245]");
            let v250: Vec<leptos::prelude::AnyView> = vec![v245];
            let v252: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v250);
            let v254: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v252);
            let v256: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v199))),
                                string(">move || { v254 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v258: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v254 }</span> };
            let v260: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v258);
            let v268: string = string("vec![v197, v260]");
            let v269: Vec<leptos::prelude::AnyView> = vec![v197, v260];
            let v271: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v269);
            let v273: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v271);
            let v276: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<summary "), (v110))),
                                string(">move || { v273 }</"),
                            )),
                            string("summary"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v278: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v108(()) + " " + &v105(())>move || { v273 }</summary> };
            let v280: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v278);
            let v282: string = string(" class=\"flex flex-1 flex-col\"");
            let v286: Func0<leptos::prelude::Fragment> =
                Dice_ui::method165(Func0::new(move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v63 = v63.clone();
                        let v66 = v66.clone();
                        move || Dice_ui::closure145(v63.clone(), v66.clone(), v0_1.clone(), ())
                    })()
                }));
            let v288: leptos::prelude::Fragment = (move || v286())();
            let v290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v288);
            let v292: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v282))),
                                string(">move || { v290 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v294: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v290 }</div> };
            let v296: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v294);
            let v303: string = string("vec![v280, v296]");
            let v304: Vec<leptos::prelude::AnyView> = vec![v280, v296];
            let v306: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v304);
            let v308: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v306);
            let v311: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<details "), (v102))),
                                string(">move || { v308 }</"),
                            )),
                            string("details"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v313: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Details, _, _>,
            > = leptos::prelude::view! { <details  open=move || v80(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v77(())>move || { v308 }</details> };
            let v315: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v313);
            let v322: string = string("vec![v98, v315]");
            let v323: Vec<leptos::prelude::AnyView> = vec![v98, v315];
            let v325: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v323);
            let v327: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v325);
            let v329: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v74))),
                                string(">move || { v327 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v331: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v327 }</div> };
            let v333: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v331);
            let v340: string = string("vec![v60, v333]");
            let v341: Vec<leptos::prelude::AnyView> = vec![v60, v333];
            let v343: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v341);
            let v345: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v343);
            let v347: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v9))),
                                string(">move || { v345 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v349: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v345 }</div> };
            let v351: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v349);
            let v353: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v359: &str = &*string("Max");
            let v383: std::string::String = String::from(v359);
            let v404: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v383));
            let v407: bool = true;
            let _func0_from_v405 = Func0::from(move || {
                //;
                let v410: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v412: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v410);
                let v415: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v412.l3.clone());
                let v417: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v415);
                let v420: bool = true;
                v417.l2 /*;
                        let v422: bool = */
            }); //;
            let v424: Func0<i32> = _func0_from_v405;
            let v427: bool = true;
            let _func1_from_v425 = Func0::from(move || {
                //;
                let v429: std::string::String = ();
                let v432: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v434: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v432);
                let v437: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v434.l3.clone());
                let v439: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v437);
                let v447: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v449: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v447);
                let v452: string = toString(v429);
                let v464: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                    l0: v439.l0.clone(),
                    l1: v439.l1.clone(),
                    l2: if string("") == (v452.clone()) {
                        1_i32
                    } else {
                        toInt32(v452)
                    },
                    l3: v439.l3,
                    l4: v439.l4.clone(),
                });
                let v466: bool = true;
                leptos::prelude::ArcRwSignal::set(&v449.l3.clone(), v464); //;
                let v467: LrcPtr<Dice_ui::Heap36> = Dice_ui::Heap36::_ctor();
                let v469: bool = true; /*;
                                       let v471: bool = */
            }); //;
            let v473: Func1<std::string::String, LrcPtr<Dice_ui::Heap36>> = _func1_from_v425;
            let v476 = {
                let clo_5 = Func0::new(move || Dice_ui::closure150((), ()));
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v486: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v479(leptos::prelude::event_target_value(&event)) prop:value=move || v424() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v476(()) /> }");
            let v488: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v479(leptos::prelude::event_target_value(&event)) prop:value=move || v424() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v476(()) /> };
            let v490: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v488);
            let v497: string = string("vec![v404, v490]");
            let v498: Vec<leptos::prelude::AnyView> = vec![v404, v490];
            let v500: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v498);
            let v502: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v500);
            let v504: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v353))),
                                string(">move || { v502 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v506: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v502 }</div> };
            let v508: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v506);
            let v510: string = string(" class=\"flex\"");
            let v513: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure152(v1.clone(), ())
                })()
            });
            let v514: Func0<bool> = Dice_ui::method167(v513.clone());
            let v517: bool = true;
            let _func0_from_v515 = Func0::from(move || {
                //;
                let v520: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v522: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v520);
                let v525: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v522.l3.clone());
                let v529: LrcPtr<Dice_ui::Heap30> = LrcPtr::new(Dice_ui::Heap30 {
                    l0: (leptos::prelude::ArcRwSignal::get_untracked(&v525)).l2,
                });
                let v531: bool = true;
                leptos::prelude::ArcAction::dispatch(&v1.clone(), v529.clone());
                let v533: bool = true; /*;
                                       let v535: bool = */
            }); //;
            let v537: Func0<()> = _func0_from_v515;
            let v608: List<string> = ofArray_1(new_array(&[
                string("flex"),
                string("gap-[10px]"),
                string("[align-items:center]"),
                string("inline-block"),
                string("rounded"),
                string("border"),
                string("border-gray-400"),
                string("hover:bg-gray-400"),
                string("px-4"),
                string("py-1"),
                string("text-sm"),
                string("font-medium"),
                string("text-gray-900"),
                string("bg-transparent"),
                string("hover:text-gray-600"),
                string("focus:outline-none"),
                string("focus:ring"),
                string("active:text-gray-500"),
            ]));
            let v623: string = join(
                string(" "),
                toArray(delay(Func0::new({
                    let v608 = v608.clone();
                    move || {
                        map_1(
                            Func1::new({
                                let v608 = v608.clone();
                                move |i: i32| item(i, v608.clone())
                            }),
                            rangeNumeric(0_i32, 1_i32, (length_1(v608.clone())) - 1_i32),
                        )
                    }
                }))),
            );
            let v630: &str = &*v623;
            let v654: std::string::String = String::from(v630);
            let v675: std::string::String = v654;
            let v681: string =
                string(" on:click=move |_| v537() prop:disabled=move || v514() class=v675");
            let v687: &str = &*string("Roll");
            let v711: std::string::String = String::from(v687);
            let v732: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v711));
            let v1098: leptos::prelude::AnyView = if v513() {
                let v737 = {
                    let clo_6 = Func0::new(move || Dice_ui::closure153((), ()));
                    Func1::new({
                        let clo_6 = clo_6.clone();
                        move |arg_6: ()| clo_6()
                    })
                };
                let v755: string =
                        string(" class=move || \" \".to_owned() + &v737(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                let v767: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                );
                let v779: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v780: string = string("vec![]");
                let v781: Vec<leptos::prelude::AnyView> = vec![];
                let v783: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v781);
                let v785: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v783);
                let v788: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v779))),
                                    string(">move || { v785 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v790: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v785 }</animate> };
                let v792: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v790);
                let v804: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                let v805: string = string("vec![]");
                let v806: Vec<leptos::prelude::AnyView> = vec![];
                let v808: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v806);
                let v810: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v808);
                let v812: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v804))),
                                    string(">move || { v810 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v814: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v810 }</animate> };
                let v816: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v814);
                let v828: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v829: string = string("vec![]");
                let v830: Vec<leptos::prelude::AnyView> = vec![];
                let v832: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v830);
                let v834: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v832);
                let v836: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v828))),
                                    string(">move || { v834 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v838: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v834 }</animate> };
                let v840: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v838);
                let v850: string = string("vec![v792, v816, v840]");
                let v851: Vec<leptos::prelude::AnyView> = vec![v792, v816, v840];
                let v853: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v851);
                let v855: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v853);
                let v858: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v767))),
                                    string(">move || { v855 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v860: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v855 }</rect> };
                let v872: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                );
                let v884: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v885: string = string("vec![]");
                let v886: Vec<leptos::prelude::AnyView> = vec![];
                let v888: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v886);
                let v890: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v888);
                let v892: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v884))),
                                    string(">move || { v890 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v894: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v890 }</animate> };
                let v896: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v894);
                let v908: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v909: string = string("vec![]");
                let v910: Vec<leptos::prelude::AnyView> = vec![];
                let v912: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v910);
                let v914: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v912);
                let v916: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v908))),
                                    string(">move || { v914 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v918: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v914 }</animate> };
                let v920: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v918);
                let v932: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v933: string = string("vec![]");
                let v934: Vec<leptos::prelude::AnyView> = vec![];
                let v936: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v934);
                let v938: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v936);
                let v940: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v932))),
                                    string(">move || { v938 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v942: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v938 }</animate> };
                let v944: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v942);
                let v954: string = string("vec![v896, v920, v944]");
                let v955: Vec<leptos::prelude::AnyView> = vec![v896, v920, v944];
                let v957: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v955);
                let v959: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v957);
                let v961: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v872))),
                                    string(">move || { v959 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v963: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v959 }</rect> };
                let v975: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                );
                let v987: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v988: string = string("vec![]");
                let v989: Vec<leptos::prelude::AnyView> = vec![];
                let v991: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v989);
                let v993: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v991);
                let v995: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v987))),
                                    string(">move || { v993 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v997: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v993 }</animate> };
                let v999: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v997);
                let v1011: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                let v1012: string = string("vec![]");
                let v1013: Vec<leptos::prelude::AnyView> = vec![];
                let v1015: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1013);
                let v1017: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1015);
                let v1019: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1011))),
                                    string(">move || { v1017 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1021: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1017 }</animate> };
                let v1023: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1021);
                let v1035: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v1036: string = string("vec![]");
                let v1037: Vec<leptos::prelude::AnyView> = vec![];
                let v1039: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1037);
                let v1041: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1039);
                let v1043: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1035))),
                                    string(">move || { v1041 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1045: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1041 }</animate> };
                let v1047: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1045);
                let v1057: string = string("vec![v999, v1023, v1047]");
                let v1058: Vec<leptos::prelude::AnyView> = vec![v999, v1023, v1047];
                let v1060: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1058);
                let v1062: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1060);
                let v1064: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v975))),
                                    string(">move || { v1062 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1066: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1062 }</rect> };
                let v1068: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1066);
                let v1070: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v963);
                let v1072: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v860);
                let v1082: string = string("vec![v1072, v1070, v1068]");
                let v1083: Vec<leptos::prelude::AnyView> = vec![v1072, v1070, v1068];
                let v1085: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1083);
                let v1087: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1085);
                let v1089: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v755))),
                                    string(">move || { v1087 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1091: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v737(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1087 }</svg> };
                leptos::prelude::IntoAny::into_any(v1091)
            } else {
                let v1094: string = string("vec![]");
                let v1095: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1095)
            };
            let v1105: string = string("vec![v732, v1098]");
            let v1106: Vec<leptos::prelude::AnyView> = vec![v732, v1098];
            let v1108: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1106);
            let v1110: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1108);
            let v1113: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<button "), (v681))),
                                string(">move || { v1110 }</"),
                            )),
                            string("button"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1115: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Button, _, _>,
            > = leptos::prelude::view! { <button  on:click=move |_| v537() prop:disabled=move || v514() class=v675>move || { v1110 }</button> };
            let v1117: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1115);
            let v1119: Option<string> = leptos::prelude::ArcMemo::get(&v2);
            let v1133: Dice_ui::US31 =
                defaultValue(Dice_ui::US31::US31_1, map(Dice_ui::method95(), v1119));
            let v1294: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(v1133_0_0) = &v1133 {
                let v1139: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v1141: string = string(" class=\"[height:17px]\"");
                let v1155: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v1161: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v1162: string = string("vec![]");
                let v1163: Vec<leptos::prelude::AnyView> = vec![];
                let v1165: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1163);
                let v1167: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1165);
                let v1169: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v1161))),
                                    string(">move || { v1167 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1171: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1167 }</path> };
                let v1173: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1171);
                let v1177: string = string("vec![v1173]");
                let v1178: Vec<leptos::prelude::AnyView> = vec![v1173];
                let v1180: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1178);
                let v1182: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1180);
                let v1184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v1155))),
                                    string(">move || { v1182 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1182 }</svg> };
                let v1188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1186);
                let v1192: string = string("vec![v1188]");
                let v1193: Vec<leptos::prelude::AnyView> = vec![v1188];
                let v1195: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1193);
                let v1197: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1195);
                let v1199: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v1141))),
                                    string(">move || { v1197 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1201: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1197 }</span> };
                let v1203: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1201);
                let v1205: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v1210: &str = &*v1133_0_0.clone();
                let v1234: std::string::String = String::from(v1210);
                let v1255: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1234));
                let v1259: string = string("vec![v1255]");
                let v1260: Vec<leptos::prelude::AnyView> = vec![v1255];
                let v1262: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1260);
                let v1264: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1262);
                let v1267: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v1205))),
                                    string(">move || { v1264 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1269: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v1264 }</pre> };
                let v1271: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1269);
                let v1278: string = string("vec![v1203, v1271]");
                let v1279: Vec<leptos::prelude::AnyView> = vec![v1203, v1271];
                let v1281: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1279);
                let v1283: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1281);
                let v1285: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v1139))),
                                    string(">move || { v1283 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1287: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v1283 }</div> };
                leptos::prelude::IntoAny::into_any(v1287)
            } else {
                let v1290: string = string("vec![]");
                let v1291: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1291)
            };
            let v1301: string = string("vec![v1117, v1294]");
            let v1302: Vec<leptos::prelude::AnyView> = vec![v1117, v1294];
            let v1304: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1302);
            let v1306: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1304);
            let v1308: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v510))),
                                string(">move || { v1306 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1310: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex">move || { v1306 }</div> };
            let v1312: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1310);
            let v1322: string = string("vec![v351, v508, v1312]");
            let v1323: Vec<leptos::prelude::AnyView> = vec![v351, v508, v1312];
            let v1325: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1323);
            let v1327: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1325);
            let v1329: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v1327 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1331: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col p-[10px] gap-[11px]">move || { v1327 }</div> };
            let v1333: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1331);
            let v1337: string = string("vec![v1333]");
            let v1338: Vec<leptos::prelude::AnyView> = vec![v1333];
            leptos::prelude::Fragment::new(v1338)
        }
        pub fn closure154(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure155(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure156(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method168() -> Func0<string> {
            Func0::new(move || Dice_ui::closure156((), ()))
        }
        pub fn closure159(unitVar: (), _arg: (string, Dice_ui::US31)) -> bool {
            let v1: Dice_ui::US31 = _arg.1.clone();
            if string("FUNCTION_CALL") == (_arg.0.clone()) {
                if let Dice_ui::US31::US31_0(v1_0_0) = &v1 {
                    string("generate_random_number") == (v1_0_0.clone())
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method170() -> Func1<(string, Dice_ui::US31), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US31)| {
                Dice_ui::closure159((), arg10_0040)
            })
        }
        pub fn method171(v0_1: Vec<(string, Dice_ui::US31)>) -> Vec<(string, Dice_ui::US31)> {
            v0_1
        }
        pub fn closure158(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap12>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap12> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let patternInput: (std::string::String, Option<std::string::String>) = ();
                let v13: string = fable_library_rust::String_::fromString(patternInput.0.clone());
                let v27: Dice_ui::US14 = defaultValue(
                    Dice_ui::US14::US14_1,
                    map(Dice_ui::method38(), patternInput.1.clone()),
                );
                let v38: LrcPtr<Dice_ui::Heap37> = LrcPtr::new(Dice_ui::Heap37 {
                    l0: v13,
                    l1: match &v27 {
                        Dice_ui::US14::US14_0(v27_0_0) => {
                            Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                match &v27 {
                                    Dice_ui::US14::US14_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ))
                        }
                        _ => Dice_ui::US31::US31_1,
                    },
                });
                let v40: bool = true;
                v38 /*;
                    let v42: bool = */
            }); //;
            let v44: Func1<
                (std::string::String, Option<std::string::String>),
                LrcPtr<Dice_ui::Heap37>,
            > = _func1_from_v6;
            let v46: Vec<(string, Dice_ui::US31)> =
                v5.into_iter().map(|x| v44(x.clone())).collect::<Vec<_>>();
            let v47 = Dice_ui::method170();
            let v48: Vec<(string, Dice_ui::US31)> = Dice_ui::method171(v46);
            let v50: Vec<(string, Dice_ui::US31)> = v48
                .into_iter()
                .filter(|x| v47(x.clone().clone()))
                .collect::<Vec<_>>();
            if (get_Count(fable_library_rust::NativeArray_::array_from(v50.clone()))) > 0_i32 {
                (_arg.0.clone()) == (fable_library_rust::String_::fromString(v2.l2.clone()))
            } else {
                false
            }
        }
        pub fn method169() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap12>), bool> {
            Func1::new(
                move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap12>)| {
                    Dice_ui::closure158((), arg10_0040)
                },
            )
        }
        pub fn method172(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> {
            v0_1
        }
        pub fn method173(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure160(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method174() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US68> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure160((), v))
        }
        pub fn method175(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure161(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure157(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                >,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v2077: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v4.clone()),
            ) as u64)
                == 0_u64
            {
                let v11: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v13: string = string(" class=\"[height:17px]\"");
                let v27: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v33: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v34: string = string("vec![]");
                let v35: Vec<leptos::prelude::AnyView> = vec![];
                let v37: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v35);
                let v39: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v37);
                let v42: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v33))),
                                    string(">move || { v39 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v44: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v39 }</path> };
                let v46: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v44);
                let v50: string = string("vec![v46]");
                let v51: Vec<leptos::prelude::AnyView> = vec![v46];
                let v53: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v51);
                let v55: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v53);
                let v58: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v27))),
                                    string(">move || { v55 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v60: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v55 }</svg> };
                let v62: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v60);
                let v66: string = string("vec![v62]");
                let v67: Vec<leptos::prelude::AnyView> = vec![v62];
                let v69: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v67);
                let v71: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v69);
                let v74: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v13))),
                                    string(">move || { v71 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v76: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v71 }</span> };
                let v78: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v76);
                let v80: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v86: &str = &*string("No account selected");
                let v110: std::string::String = String::from(v86);
                let v131: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v110));
                let v135: string = string("vec![v131]");
                let v136: Vec<leptos::prelude::AnyView> = vec![v131];
                let v138: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v136);
                let v140: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v138);
                let v143: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v80))),
                                    string(">move || { v140 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v145: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v140 }</pre> };
                let v147: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v145);
                let v155: string = string("vec![v78, v147]");
                let v156: Vec<leptos::prelude::AnyView> = vec![v78, v147];
                let v158: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v156);
                let v160: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v158);
                let v163: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v11))),
                                    string(">move || { v160 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v165: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v160 }</div> };
                leptos::prelude::IntoAny::into_any(v165)
            } else {
                let v169: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v170 = Dice_ui::method120();
                let v171 = Dice_ui::method121();
                let v172: Dice_ui::US53 = match &v169 {
                    Err(v169_1_0) => v171(v169_1_0.clone()),
                    Ok(v169_0_0) => v170(v169_0_0.clone()),
                };
                let v195: Dice_ui::US46 = match &v172 {
                    Dice_ui::US53::US53_0(v172_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method122(), v172_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v172_1_0) => Dice_ui::US46::US46_1(v172_1_0.clone()),
                };
                match &v195 {
                    Dice_ui::US46::US46_0(v195_0_0) => {
                        let v196: Dice_ui::US47 = v195_0_0.clone();
                        if let Dice_ui::US47::US47_0(v196_0_0) = &v196 {
                            let v199: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                v196_0_0.clone().to_vec();
                            let v200 = Dice_ui::method169();
                            let v201: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                Dice_ui::method172(v199);
                            let v203: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> = v201
                                .into_iter()
                                .filter(|x| v200(x.clone().clone()))
                                .collect::<Vec<_>>();
                            let v206: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v212: &str = &*string("Block Timestamp");
                            let v236: std::string::String = String::from(v212);
                            let v257: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v236),
                            );
                            let v261: string = string("vec![v257]");
                            let v262: Vec<leptos::prelude::AnyView> = vec![v257];
                            let v264: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v262);
                            let v266: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v264);
                            let v269: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v206))),
                                                string(">move || { v266 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v271: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v266 }</th> };
                            let v273: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v271);
                            let v275: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v281: &str = &*string("Predecessor");
                            let v305: std::string::String = String::from(v281);
                            let v326: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v305),
                            );
                            let v330: string = string("vec![v326]");
                            let v331: Vec<leptos::prelude::AnyView> = vec![v326];
                            let v333: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v331);
                            let v335: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v333);
                            let v337: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v275))),
                                                string(">move || { v335 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v339: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v335 }</th> };
                            let v341: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v339);
                            let v343: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v349: &str = &*string("Receiver");
                            let v373: std::string::String = String::from(v349);
                            let v394: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v373),
                            );
                            let v398: string = string("vec![v394]");
                            let v399: Vec<leptos::prelude::AnyView> = vec![v394];
                            let v401: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v399);
                            let v403: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v401);
                            let v405: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v343))),
                                                string(">move || { v403 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v407: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v403 }</th> };
                            let v409: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v407);
                            let v411: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v417: &str = &*string("Fee");
                            let v441: std::string::String = String::from(v417);
                            let v462: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v441),
                            );
                            let v466: string = string("vec![v462]");
                            let v467: Vec<leptos::prelude::AnyView> = vec![v462];
                            let v469: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v467);
                            let v471: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v469);
                            let v473: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v411))),
                                                string(">move || { v471 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v475: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v471 }</th> };
                            let v477: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v475);
                            let v479: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v485: &str = &*string("Result");
                            let v509: std::string::String = String::from(v485);
                            let v530: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v509),
                            );
                            let v534: string = string("vec![v530]");
                            let v535: Vec<leptos::prelude::AnyView> = vec![v530];
                            let v537: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v535);
                            let v539: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v537);
                            let v541: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v479))),
                                                string(">move || { v539 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v543: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v539 }</th> };
                            let v545: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v543);
                            let v547: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v553: &str = &*string("Status");
                            let v577: std::string::String = String::from(v553);
                            let v598: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v577),
                            );
                            let v602: string = string("vec![v598]");
                            let v603: Vec<leptos::prelude::AnyView> = vec![v598];
                            let v605: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v603);
                            let v607: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v605);
                            let v609: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v547))),
                                                string(">move || { v607 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v611: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v607 }</th> };
                            let v613: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v611);
                            let v633: string = string("vec![v273, v341, v409, v477, v545, v613]");
                            let v634: Vec<leptos::prelude::AnyView> =
                                vec![v273, v341, v409, v477, v545, v613];
                            let v636: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v634);
                            let v638: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v636);
                            let v641: string =
                                string("leptos::prelude::view! { <tr >move || { v638 }</tr> }");
                            let v643: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                            > = leptos::prelude::view! { <tr >move || { v638 }</tr> };
                            let v645: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v643);
                            let v649: string = string("vec![v645]");
                            let v650: Vec<leptos::prelude::AnyView> = vec![v645];
                            let v652: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v650);
                            let v654: Vec<
                                Result<
                                    Option<(
                                        std::string::String,
                                        Option<(
                                            Array<(
                                                std::string::String,
                                                Array<
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        (
                                                            std::string::String,
                                                            Option<std::string::String>,
                                                            Option<f64>,
                                                            Option<std::string::String>,
                                                        ),
                                                    >,
                                                >,
                                                std::string::String,
                                                Array<std::string::String>,
                                                Array<std::string::String>,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u64,
                                                Array<std::string::String>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                u8,
                                                Array<std::string::String>,
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    std::string::String,
                                                >,
                                                Option<std::string::String>,
                                                Array<(std::string::String, std::string::String)>,
                                            )>,
                                        )>,
                                        Option<(
                                            std::string::String,
                                            std::string::String,
                                            Option<(
                                                Option<std::string::String>,
                                                Option<std::string::String>,
                                            )>,
                                            i32,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                >,
                            > = leptos::prelude::ArcMemo::get(&v0_1.clone());
                            let v656: bool = true;
                            let _vec_map : Vec<_> = v203.into_iter().map(|x| { //;
                                let patternInput:
                                        (string, usize,
                                         LrcPtr<Dice_ui::Heap12>) = x;
                                let v660: LrcPtr<Dice_ui::Heap12> =
                                    patternInput.2.clone();
                                let v662:
                                        Array<Result<Option<(std::string::String,
                                                             Option<(Array<(std::string::String,
                                                                            Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                                  Option<std::string::String>,
                                                                                                                                  Option<f64>,
                                                                                                                                  Option<std::string::String>)>>,
                                                                            std::string::String,
                                                                            Array<std::string::String>,
                                                                            Array<std::string::String>,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String)>,
                                                                     Array<(std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            u64,
                                                                            Array<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String,
                                                                                   std::string::String)>,
                                                                            u8,
                                                                            Array<std::string::String>,
                                                                            std::collections::HashMap<std::string::String, std::string::String>,
                                                                            Option<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String)>)>)>,
                                                             Option<(std::string::String,
                                                                     std::string::String,
                                                                     Option<(Option<std::string::String>,
                                                                             Option<std::string::String>)>,
                                                                     i32,
                                                                     std::string::String,
                                                                     std::string::String)>,
                                                             Option<std::string::String>)>,
                                                     std::string::String>> =
                                    fable_library_rust::NativeArray_::array_from(v654.clone());
                                let v663: i32 = patternInput.1.clone() as i32;
                                let v670:
                                        Result<Option<(std::string::String,
                                                       Option<(Array<(std::string::String,
                                                                      Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                            Option<std::string::String>,
                                                                                                                            Option<f64>,
                                                                                                                            Option<std::string::String>)>>,
                                                                      std::string::String,
                                                                      Array<std::string::String>,
                                                                      Array<std::string::String>,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String)>,
                                                               Array<(std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      u64,
                                                                      Array<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String,
                                                                             std::string::String)>,
                                                                      u8,
                                                                      Array<std::string::String>,
                                                                      std::collections::HashMap<std::string::String, std::string::String>,
                                                                      Option<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String)>)>)>,
                                                       Option<(std::string::String,
                                                               std::string::String,
                                                               Option<(Option<std::string::String>,
                                                                       Option<std::string::String>)>,
                                                               i32,
                                                               std::string::String,
                                                               std::string::String)>,
                                                       Option<std::string::String>)>,
                                               std::string::String> =
                                    v662[v663].clone();
                                let v674: string =
                                    string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                let v676: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v685: i64 =
                                    (Dice_ui::method173(toInt64(fable_library_rust::String_::fromString(v660.l5.clone()))))
                                        / 1000_i64;
                                let v687:
                                        Option<chrono::DateTime<chrono::Utc>> =
                                    chrono::DateTime::from_timestamp_micros(v685);
                                let v701: Dice_ui::US68 =
                                    defaultValue(Dice_ui::US68::US68_1,
                                                 map(Dice_ui::method174(),
                                                     v687));
                                let v720: Dice_ui::US31 =
                                    match &v701 {
                                        Dice_ui::US68::US68_0(v701_0_0) => {
                                            let v707: chrono::NaiveDateTime =
                                                match &v701 {
                                                    Dice_ui::US68::US68_0(x)
                                                    => x.clone(),
                                                    _ => unreachable!(),
                                                }.clone().naive_utc();
                                            let v709:
                                                    chrono::DateTime<chrono::Local> =
                                                chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v707);
                                            let v711: string =
                                                string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                            let v712: &str =
                                                r#"%Y-%m-%d %H:%M:%S"#;
                                            let v714: std::string::String =
                                                v709.format(v712).to_string();
                                            Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v714))
                                        }
                                        _ => Dice_ui::US31::US31_1,
                                    };
                                let v726: Dice_ui::US69 =
                                    match &v720 {
                                        Dice_ui::US31::US31_0(v720_0_0) =>
                                        Dice_ui::US69::US69_0(match &v720 {
                                                                  Dice_ui::US31::US31_0(x)
                                                                  =>
                                                                  x.clone(),
                                                                  _ =>
                                                                  unreachable!(),
                                                              }.clone()),
                                        _ =>
                                        Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                    };
                                let v731: string =
                                    match &v726 {
                                        Dice_ui::US69::US69_0(v726_0_0) =>
                                        v726_0_0.clone(),
                                        Dice_ui::US69::US69_1(v726_1_0) =>
                                        append((append(string("sm\'.to_string result / Error: "),
                                                       (v726_1_0.clone()))),
                                               string("")),
                                    };
                                let v736: &str = &*v731;
                                let v760: std::string::String =
                                    String::from(v736);
                                let v781: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v760));
                                let v785: string = string("vec![v781]");
                                let v786: Vec<leptos::prelude::AnyView> =
                                    vec![v781];
                                let v788: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v786);
                                let v790: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v788);
                                let v793: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v676))),
                                                                           string(">move || { v790 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v795:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v790 }</td> };
                                let v797: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v795);
                                let v799: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v802: string =
                                    fable_library_rust::String_::fromString(v660.l1.clone());
                                let v807: &str = &*v802;
                                let v831: std::string::String =
                                    String::from(v807);
                                let v852: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v831));
                                let v856: string = string("vec![v852]");
                                let v857: Vec<leptos::prelude::AnyView> =
                                    vec![v852];
                                let v859: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v857);
                                let v861: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v859);
                                let v863: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v799))),
                                                                           string(">move || { v861 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v865:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v861 }</td> };
                                let v867: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v865);
                                let v869: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v872: string =
                                    fable_library_rust::String_::fromString(v660.l2.clone());
                                let v877: &str = &*v872;
                                let v901: std::string::String =
                                    String::from(v877);
                                let v922: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v901));
                                let v926: string = string("vec![v922]");
                                let v927: Vec<leptos::prelude::AnyView> =
                                    vec![v922];
                                let v929: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v927);
                                let v931: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v929);
                                let v933: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v869))),
                                                                           string(">move || { v931 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v935:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v931 }</td> };
                                let v937: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v935);
                                let v939: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v942: string = toString(v660.l10);
                                let v949: &str = &*v942;
                                let v973: std::string::String =
                                    String::from(v949);
                                let v994: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v973));
                                let v998: string = string("vec![v994]");
                                let v999: Vec<leptos::prelude::AnyView> =
                                    vec![v994];
                                let v1001: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v999);
                                let v1003: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1001);
                                let v1005: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v939))),
                                                                           string(">move || { v1003 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1007:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1003 }</td> };
                                let v1009: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1007);
                                let v1011: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1159: leptos::prelude::Fragment =
                                    if (get_Count(v660.l11.clone()) as u64) ==
                                           0_u64 {
                                        let v1019: &str = &*string("");
                                        let v1043: std::string::String =
                                            String::from(v1019);
                                        let v1064: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1043));
                                        let v1068: string =
                                            string("vec![v1064]");
                                        let v1069:
                                                Vec<leptos::prelude::AnyView> =
                                            vec![v1064];
                                        leptos::prelude::Fragment::new(v1069)
                                    } else {
                                        let v1072:
                                                Array<std::string::String> =
                                            v660.l11.clone();
                                        let v1073: i32 =
                                            get_Count(v1072.clone());
                                        let v1075: LrcPtr<Dice_ui::Mut2> =
                                            LrcPtr::new(Dice_ui::Mut2{l0:
                                                                          MutCell::new(0_i32),
                                                                      l1:
                                                                          MutCell::new(Dice_ui::US31::US31_1),});
                                        while Dice_ui::method175(v1073,
                                                                 v1075.clone())
                                              {
                                            let v1077: i32 =
                                                v1075.l0.get().clone();
                                            let v1080: i32 =
                                                ((v1077.wrapping_neg()) +
                                                     (v1073)) - 1_i32;
                                            let v1081: Dice_ui::US31 =
                                                v1075.l1.get().clone();
                                            let v1082: std::string::String =
                                                v1072[v1080].clone();
                                            let v1086: Array<string> =
                                                split(fable_library_rust::String_::fromString(v1082),
                                                      string(" / result: "),
                                                      -1_i32, 0_i32);
                                            let v1095: Dice_ui::US31 =
                                                if let Dice_ui::US31::US31_1 =
                                                       &v1081 {
                                                    if (get_Count(v1086.clone())
                                                            as u64) == 2_u64 {
                                                        let v1091: string =
                                                            v1086[0_i32].clone();
                                                        Dice_ui::US31::US31_0(v1086[1_i32].clone())
                                                    } else { v1081 }
                                                } else { v1081.clone() };
                                            let v1096: i32 = (v1077) + 1_i32;
                                            v1075.l0.set(v1096);
                                            v1075.l1.set(v1095);
                                            ()
                                        }
                                        {
                                            let v1097: Dice_ui::US31 =
                                                v1075.l1.get().clone();
                                            let v1101: string =
                                                match &v1097 {
                                                    Dice_ui::US31::US31_0(v1097_0_0)
                                                    =>
                                                    match &v1097 {
                                                        Dice_ui::US31::US31_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone(),
                                                    _ => string("?"),
                                                };
                                            let v1106: &str = &*v1101;
                                            let v1130: std::string::String =
                                                String::from(v1106);
                                            let v1151:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1130));
                                            let v1155: string =
                                                string("vec![v1151]");
                                            let v1156:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1151];
                                            leptos::prelude::Fragment::new(v1156)
                                        }
                                    };
                                let v1161: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1159);
                                let v1163: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1011))),
                                                                           string(">move || { v1161 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1165:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1161 }</td> };
                                let v1167: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1165);
                                let v1169: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1173: string =
                                    if v660.l9 {
                                        string("Ok")
                                    } else { string("Outcome Error") };
                                let v1174 = Dice_ui::method152();
                                let v1175 = Dice_ui::method153();
                                let v1176: Dice_ui::US63 =
                                    match &v670 {
                                        Err(v670_1_0) =>
                                        v1175(v670_1_0.clone()),
                                        Ok(v670_0_0) =>
                                        v1174(v670_0_0.clone()),
                                    };
                                let v1202: Dice_ui::US58 =
                                    match &v1176 {
                                        Dice_ui::US63::US63_0(v1176_0_0) =>
                                        Dice_ui::US58::US58_0(defaultValue(Dice_ui::US59::US59_1,
                                                                           map(Dice_ui::method154(),
                                                                               v1176_0_0.clone()))),
                                        Dice_ui::US63::US63_1(v1176_1_0) =>
                                        Dice_ui::US58::US58_1(v1176_1_0.clone()),
                                    };
                                let v1298: Dice_ui::US69 =
                                    match &v1202 {
                                        Dice_ui::US58::US58_0(v1202_0_0) => {
                                            let v1203: Dice_ui::US59 =
                                                v1202_0_0.clone();
                                            if let Dice_ui::US59::US59_0(v1203_0_0,
                                                                         v1203_0_1,
                                                                         v1203_0_2,
                                                                         v1203_0_3)
                                                   = &v1203 {
                                                let v1206:
                                                        Option<(std::string::String,
                                                                std::string::String,
                                                                Option<(Option<std::string::String>,
                                                                        Option<std::string::String>)>,
                                                                i32,
                                                                std::string::String,
                                                                std::string::String)> =
                                                    v1203_0_2.clone();
                                                let v1226: Dice_ui::US64 =
                                                    defaultValue(Dice_ui::US64::US64_1,
                                                                 map(Dice_ui::method155(),
                                                                     v1206.clone()));
                                                match &v1226 {
                                                    Dice_ui::US64::US64_0(v1226_0_0,
                                                                          v1226_0_1,
                                                                          v1226_0_2,
                                                                          v1226_0_3,
                                                                          v1226_0_4,
                                                                          v1226_0_5)
                                                    => {
                                                        let v1254:
                                                                Dice_ui::US64 =
                                                            defaultValue(Dice_ui::US64::US64_1,
                                                                         map(Dice_ui::method155(),
                                                                             v1206.clone()));
                                                        let v1267:
                                                                Dice_ui::US31 =
                                                            if let Dice_ui::US64::US64_0(v1254_0_0,
                                                                                         v1254_0_1,
                                                                                         v1254_0_2,
                                                                                         v1254_0_3,
                                                                                         v1254_0_4,
                                                                                         v1254_0_5)
                                                                   = &v1254 {
                                                                Dice_ui::US31::US31_0(append((append((append((append((append((append((append((toString(v1254_0_0.clone())),
                                                                                                                                             string(": "))),
                                                                                                                                     (toString(v1254_0_4.clone())))),
                                                                                                                             string(" - "))),
                                                                                                                     (toString(v1254_0_5.clone())))),
                                                                                                             string(" ("))),
                                                                                                     (toString(v1254_0_1.clone())))),
                                                                                             string(")")))
                                                            } else {
                                                                Dice_ui::US31::US31_1
                                                            };
                                                        Dice_ui::US69::US69_1(match &v1267
                                                                                  {
                                                                                  Dice_ui::US31::US31_0(v1267_0_0)
                                                                                  =>
                                                                                  match &v1267
                                                                                      {
                                                                                      Dice_ui::US31::US31_0(x)
                                                                                      =>
                                                                                      x.clone(),
                                                                                      _
                                                                                      =>
                                                                                      unreachable!(),
                                                                                  }.clone(),
                                                                                  _
                                                                                  =>
                                                                                  Dice_ui::method8(400_i64,
                                                                                                   sprintf!("{:?}",
                                                                                                            ())),
                                                                              })
                                                    }
                                                    _ =>
                                                    Dice_ui::US69::US69_0(Dice_ui::method8(400_i64,
                                                                                           sprintf!("{:?}",
                                                                                                    (v1203_0_0.clone(),
                                                                                                     v1203_0_1.clone(),
                                                                                                     v1206.clone(),
                                                                                                     v1203_0_3.clone())))),
                                                }
                                            } else {
                                                Dice_ui::US69::US69_1(concat(new_array(&[string("RPC Response: "),
                                                                                         Dice_ui::method8(400_i64,
                                                                                                          sprintf!("{:?}",
                                                                                                                   v1202.clone()))])))
                                            }
                                        }
                                        Dice_ui::US58::US58_1(v1202_1_0) =>
                                        Dice_ui::US69::US69_1(fable_library_rust::String_::fromString(v1202_1_0.clone())),
                                    };
                                let v1310: string =
                                    concat(new_array(&[v1173, string(" / "),
                                                       match &v1298 {
                                                           Dice_ui::US69::US69_0(v1298_0_0)
                                                           =>
                                                           concat(new_array(&[string("RPC Response: "),
                                                                              Dice_ui::method8(400_i64,
                                                                                               sprintf!("{:?}",
                                                                                                        v1298_0_0.clone()))])),
                                                           Dice_ui::US69::US69_1(v1298_1_0)
                                                           =>
                                                           concat(new_array(&[string("Error: "),
                                                                              v1298_1_0.clone()])),
                                                       }]));
                                let v1315: &str = &*v1310;
                                let v1339: std::string::String =
                                    String::from(v1315);
                                let v1360: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1339));
                                let v1364: string = string("vec![v1360]");
                                let v1365: Vec<leptos::prelude::AnyView> =
                                    vec![v1360];
                                let v1367: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1365);
                                let v1369: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1367);
                                let v1371: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1169))),
                                                                           string(">move || { v1369 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1373:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1369 }</td> };
                                let v1375: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1373);
                                let v1394: string =
                                    string("vec![v797, v867, v937, v1009, v1167, v1375]");
                                let v1395: Vec<leptos::prelude::AnyView> =
                                    vec![v797, v867, v937, v1009, v1167, v1375];
                                let v1397: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1395);
                                let v1399: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1397);
                                let v1401: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<tr "),
                                                                                   (v674))),
                                                                           string(">move || { v1399 }</"))),
                                                                   string("tr"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1403:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                    leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v1399 }</tr> };
                                let v1405: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1403);
                                let v1407: bool =
                                    true; v1405 }).collect::<Vec<_>>();
                            let v1409: Vec<leptos::prelude::AnyView> = _vec_map;
                            let v1411: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1409);
                            let v1415: string = string("vec![v1411]");
                            let v1416: Vec<leptos::prelude::AnyView> = vec![v1411];
                            let v1418: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1416);
                            let v1420: string =
                                    string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                            let v1422: string = string(" class=\"ltr:text-left rtl:text-right\"");
                            let v1424: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v652);
                            let v1427: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<thead "), (v1422))),
                                                string(">move || { v1424 }</"),
                                            )),
                                            string("thead"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1429: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                            > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v1424 }</thead> };
                            let v1431: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1429);
                            let v1433: string =
                                string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
                            let v1435: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1418);
                            let v1438: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<tbody "), (v1433))),
                                                string(">move || { v1435 }</"),
                                            )),
                                            string("tbody"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1440: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                            > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v1435 }</tbody> };
                            let v1442: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1440);
                            let v1449: string = string("vec![v1431, v1442]");
                            let v1450: Vec<leptos::prelude::AnyView> = vec![v1431, v1442];
                            let v1452: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1450);
                            let v1454: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1452);
                            let v1457: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<table "), (v1420))),
                                                string(">move || { v1454 }</"),
                                            )),
                                            string("table"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1459: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Table, _, _>,
                            > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v1454 }</table> };
                            leptos::prelude::IntoAny::into_any(v1459)
                        } else {
                            let v1464: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v1466: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v1469 = {
                                let clo = Func0::new(move || Dice_ui::closure161((), ()));
                                Func1::new({
                                    let clo = clo.clone();
                                    move |arg: ()| clo()
                                })
                            };
                            let v1487: string =
                                    string(" class=move || \" \".to_owned() + &v1469(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                            let v1499: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                            let v1511: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1512: string = string("vec![]");
                            let v1513: Vec<leptos::prelude::AnyView> = vec![];
                            let v1515: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1513);
                            let v1517: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1515);
                            let v1520: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1511))),
                                                string(">move || { v1517 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1522: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1517 }</animate> };
                            let v1524: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1522);
                            let v1536: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v1537: string = string("vec![]");
                            let v1538: Vec<leptos::prelude::AnyView> = vec![];
                            let v1540: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1538);
                            let v1542: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1540);
                            let v1544: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1536))),
                                                string(">move || { v1542 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1546: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1542 }</animate> };
                            let v1548: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1546);
                            let v1560: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1561: string = string("vec![]");
                            let v1562: Vec<leptos::prelude::AnyView> = vec![];
                            let v1564: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1562);
                            let v1566: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1564);
                            let v1568: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1560))),
                                                string(">move || { v1566 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1570: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1566 }</animate> };
                            let v1572: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1570);
                            let v1583: string = string("vec![v1524, v1548, v1572]");
                            let v1584: Vec<leptos::prelude::AnyView> = vec![v1524, v1548, v1572];
                            let v1586: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1584);
                            let v1588: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1586);
                            let v1591: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1499))),
                                                string(">move || { v1588 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1593: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v1588 }</rect> };
                            let v1605: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                            let v1617: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1618: string = string("vec![]");
                            let v1619: Vec<leptos::prelude::AnyView> = vec![];
                            let v1621: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1619);
                            let v1623: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1621);
                            let v1625: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1617))),
                                                string(">move || { v1623 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1627: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1623 }</animate> };
                            let v1629: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1627);
                            let v1641: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1642: string = string("vec![]");
                            let v1643: Vec<leptos::prelude::AnyView> = vec![];
                            let v1645: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1643);
                            let v1647: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1645);
                            let v1649: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1641))),
                                                string(">move || { v1647 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1651: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1647 }</animate> };
                            let v1653: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1651);
                            let v1665: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1666: string = string("vec![]");
                            let v1667: Vec<leptos::prelude::AnyView> = vec![];
                            let v1669: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1667);
                            let v1671: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1669);
                            let v1673: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1665))),
                                                string(">move || { v1671 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1675: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1671 }</animate> };
                            let v1677: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1675);
                            let v1687: string = string("vec![v1629, v1653, v1677]");
                            let v1688: Vec<leptos::prelude::AnyView> = vec![v1629, v1653, v1677];
                            let v1690: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1688);
                            let v1692: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1690);
                            let v1694: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1605))),
                                                string(">move || { v1692 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1696: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1692 }</rect> };
                            let v1708: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                            let v1720: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1721: string = string("vec![]");
                            let v1722: Vec<leptos::prelude::AnyView> = vec![];
                            let v1724: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1722);
                            let v1726: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1724);
                            let v1728: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1720))),
                                                string(">move || { v1726 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1730: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1726 }</animate> };
                            let v1732: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1730);
                            let v1744: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v1745: string = string("vec![]");
                            let v1746: Vec<leptos::prelude::AnyView> = vec![];
                            let v1748: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1746);
                            let v1750: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1748);
                            let v1752: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1744))),
                                                string(">move || { v1750 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1754: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1750 }</animate> };
                            let v1756: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1754);
                            let v1768: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1769: string = string("vec![]");
                            let v1770: Vec<leptos::prelude::AnyView> = vec![];
                            let v1772: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1770);
                            let v1774: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1772);
                            let v1776: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1768))),
                                                string(">move || { v1774 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1778: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1774 }</animate> };
                            let v1780: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1778);
                            let v1790: string = string("vec![v1732, v1756, v1780]");
                            let v1791: Vec<leptos::prelude::AnyView> = vec![v1732, v1756, v1780];
                            let v1793: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1791);
                            let v1795: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1793);
                            let v1797: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1708))),
                                                string(">move || { v1795 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1799: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1795 }</rect> };
                            let v1801: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1799);
                            let v1803: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1696);
                            let v1805: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1593);
                            let v1815: string = string("vec![v1805, v1803, v1801]");
                            let v1816: Vec<leptos::prelude::AnyView> = vec![v1805, v1803, v1801];
                            let v1818: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1816);
                            let v1820: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1818);
                            let v1823: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v1487))),
                                                string(">move || { v1820 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1825: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1469(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1820 }</svg> };
                            let v1827: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1825);
                            let v1833: &str = &*string("Loading...");
                            let v1857: std::string::String = String::from(v1833);
                            let v1878: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v1857),
                                );
                            let v1885: string = string("vec![v1827, v1878]");
                            let v1886: Vec<leptos::prelude::AnyView> = vec![v1827, v1878];
                            let v1888: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1886);
                            let v1890: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1888);
                            let v1893: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1466))),
                                                string(">move || { v1890 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1895: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v1890 }</div> };
                            let v1897: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1895);
                            let v1901: string = string("vec![v1897]");
                            let v1902: Vec<leptos::prelude::AnyView> = vec![v1897];
                            let v1904: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1902);
                            let v1906: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1904);
                            let v1908: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1464))),
                                                string(">move || { v1906 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1910: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v1906 }</div> };
                            leptos::prelude::IntoAny::into_any(v1910)
                        }
                    }
                    Dice_ui::US46::US46_1(v195_1_0) => {
                        let v1916: string =
                            fable_library_rust::String_::fromString(v195_1_0.clone());
                        let v1919: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v1921: string = string(" class=\"[height:17px]\"");
                        let v1935: string =
                                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v1941: string =
                                string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v1942: string = string("vec![]");
                        let v1943: Vec<leptos::prelude::AnyView> = vec![];
                        let v1945: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1943);
                        let v1947: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1945);
                        let v1950: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v1941))),
                                            string(">move || { v1947 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1952: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1947 }</path> };
                        let v1954: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1952);
                        let v1958: string = string("vec![v1954]");
                        let v1959: Vec<leptos::prelude::AnyView> = vec![v1954];
                        let v1961: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1959);
                        let v1963: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1961);
                        let v1966: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v1935))),
                                            string(">move || { v1963 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1968: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1963 }</svg> };
                        let v1970: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1968);
                        let v1974: string = string("vec![v1970]");
                        let v1975: Vec<leptos::prelude::AnyView> = vec![v1970];
                        let v1977: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1975);
                        let v1979: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1977);
                        let v1982: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v1921))),
                                            string(">move || { v1979 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1984: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1979 }</span> };
                        let v1986: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1984);
                        let v1988: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v1993: &str = &*v1916;
                        let v2017: std::string::String = String::from(v1993);
                        let v2038: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v2017),
                        );
                        let v2042: string = string("vec![v2038]");
                        let v2043: Vec<leptos::prelude::AnyView> = vec![v2038];
                        let v2045: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2043);
                        let v2047: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2045);
                        let v2050: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v1988))),
                                            string(">move || { v2047 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2052: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v2047 }</pre> };
                        let v2054: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2052);
                        let v2062: string = string("vec![v1986, v2054]");
                        let v2063: Vec<leptos::prelude::AnyView> = vec![v1986, v2054];
                        let v2065: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2063);
                        let v2067: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2065);
                        let v2070: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1919))),
                                            string(">move || { v2067 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2072: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v2067 }</div> };
                        leptos::prelude::IntoAny::into_any(v2072)
                    }
                }
            };
            let v2082: string = string("vec![v2077]");
            let v2083: Vec<leptos::prelude::AnyView> = vec![v2077];
            leptos::prelude::Fragment::new(v2083)
        }
        pub fn closure164(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure163(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure164(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method176() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure163((), v))
        }
        pub fn method177(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure162(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v10 = Dice_ui::method176();
            let v11: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method177(v8.l0.clone());
            v11.iter()
                .enumerate()
                .map(|(i, x)| v10(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn closure165(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::prelude::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::prelude::ReadSignal::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let v10: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = ();
                let b: (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = v10.1.clone();
                let v20: LrcPtr<Dice_ui::Heap38> = LrcPtr::new(Dice_ui::Heap38 {
                    l0: v10.0.clone(),
                    l1: b.0.clone(),
                    l2: b.1.clone(),
                });
                let v22: bool = true;
                v20 /*;
                    let v24: bool = */
            }); //;
            let v26: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<Dice_ui::Heap38>,
            > = _func1_from_v6;
            let v28: Vec<(
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5.into_iter().map(|x| v26(x.clone())).collect::<Vec<_>>();
            let v31: bool = true;
            let _func1_from_v29 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = ();
                let v36: LrcPtr<Dice_ui::Heap39> = LrcPtr::new(Dice_ui::Heap39 {
                    l0: v3,
                    l1: patternInput.0.clone(),
                    l2: patternInput.1.clone(),
                });
                let v38: bool = true;
                v36 /*;
                    let v40: bool = */
            }); //;
            let v42: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap39>,
            > = _func1_from_v29;
            v28.into_iter().map(|x| v42(x.clone())).collect::<Vec<_>>()
        }
        pub fn closure166(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = leptos::prelude::ArcMemo::get(&v0_1);
            get_Count(fable_library_rust::NativeArray_::array_from(v2.clone()))
        }
        pub fn method178(
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method179(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure167(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v11: i32 = get_Count(fable_library_rust::NativeArray_::array_from(
                v8.clone().clone(),
            ));
            let v17: &str = &*string("");
            let v41: std::string::String = String::from(v17);
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((false, v41)));
            let v65: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v66: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method178(v65.0.clone(), v65.1.clone());
            let v67: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method179(v8);
            let v69: bool = true;
            let mut v67 = v67;
            let v71: bool = true;
            v67.push(v66);
            let v73: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v67;
            let v76: bool = true;
            let _func1_from_v74 = Func1::from(move |value| {
                //;
                let v78: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = ();
                let v90: LrcPtr<Dice_ui::Heap40> = LrcPtr::new(Dice_ui::Heap40 {
                    l0: leptos::prelude::ReadSignal::get(&(v78.1.clone()).0.clone()),
                });
                let v92: bool = true;
                v90 /*;
                    let v94: bool = */
            }); //;
            let v96: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<Dice_ui::Heap40>,
            > = _func1_from_v74;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v73.into_iter().map(|x| v96(x.clone())).collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure168(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + (v0_1)
        }
        pub fn closure169(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure170(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v5)
        }
        pub fn closure171(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure172(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure173(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method180(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure173((), ()))
        }
        pub fn method181(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn method183(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure177(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method183((v1) == (v0_1)) {
                v2.clone()
            } else {
                LrcPtr::new(((v2.0.clone()) == false, v2.1.clone()))
            }
        }
        pub fn closure176(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure177(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method182(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure176(v0_1, v)
            })
        }
        pub fn closure175(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v5: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v5);
            let v10: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v7.l3.clone());
            let v12: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v10);
            let v20: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v20);
            let v24 = Dice_ui::method182(v1);
            let v25: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method177(v12.l0.clone());
            let v28: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v25
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v24(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v12.l1.clone(),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v30: bool = true;
            leptos::prelude::ArcRwSignal::set(&v22.l3.clone(), v28); //;
            ()
        }
        pub fn closure178(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::prelude::ReadSignal::get(&v0_1)).0.clone()
        }
        pub fn method184(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure178(v0_1.clone(), ())
            })
        }
        pub fn closure179(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append((append(string("account-"), (toString(v0_1)))), string(""));
            let v6: &str = &*v1;
            String::from(v6)
        }
        pub fn method185(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure179(v0_1, ())
            })
        }
        pub fn method187(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure181(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method187((v2) == (v0_1)) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure180(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure181(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method186(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure180(v0_1, v1.clone(), v)
            })
        }
        pub fn closure182(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method188(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure185(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn method190() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure185((), v))
        }
        pub fn closure184(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v11: bool = ((LrcPtr::new((v1_, v1__1))).0.clone()) == (v0_1);
            (Dice_ui::method190())(v11)
        }
        pub fn method189(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure184(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure183(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method188(leptos::prelude::ArcMemo::get(&v0_1));
            let v11 = Dice_ui::method189(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            let v20: bool = true;
            let _func1_from_v18 = Func1::from(move |value| {
                //;
                let v22: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = ();
                let v34: LrcPtr<Dice_ui::Heap40> = LrcPtr::new(Dice_ui::Heap40 {
                    l0: leptos::prelude::ReadSignal::get(&(v22.1.clone()).0.clone()),
                });
                let v36: bool = true;
                v34 /*;
                    let v38: bool = */
            }); //;
            let v40: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<Dice_ui::Heap40>,
            > = _func1_from_v18;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17.into_iter().map(|x| v40(x.clone())).collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure186(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure187(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v5)
        }
        pub fn method191(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap41>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<Dice_ui::Heap41>,
        > {
            v0_1
        }
        pub fn closure188(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap41>,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(i32, i32)> {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap41>,
            > = Dice_ui::method191(v0_1);
            ((move |x| v4(x))(_arg.0.clone())).l0.clone()
        }
        pub fn method192(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap35>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<Dice_ui::Heap35>,
        > {
            v0_1
        }
        pub fn closure189(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap35>,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::prelude::AnyView {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap35>,
            > = Dice_ui::method192(v0_1);
            ((move |x| v4(x))(_arg.0.clone())).l0.clone()
        }
        pub fn closure174(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::ArcMemo<i32>,
            v3: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v9: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = v1;
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = ();
                let v18: LrcPtr<Dice_ui::Heap41> = LrcPtr::new(Dice_ui::Heap41 {
                    l0: LrcPtr::new((patternInput.0.clone(), patternInput.1.clone())),
                });
                let v20: bool = true;
                v18 /*;
                    let v22: bool = */
            }); //;
            let v24: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap41>,
            > = _func1_from_v10;
            let v27: bool = true;
            let _func1_from_v25 = Func1::from(move |value| {
                //;
                let patternInput_1: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = ();
                let v31: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                    patternInput_1.2.clone();
                let v33: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
                let v34: i32 = Dice_ui::method181(patternInput_1.1.clone());
                let v37: bool = true;
                let _func0_from_v35 = Func0::from(move || {
                    //;
                    let v38: string =
                        append((append(string("account-"), (toString(v34)))), string(""));
                    let v43: &str = &*v38;
                    let v67: std::string::String = String::from(v43);
                    let v88: bool = true;
                    v67 /*;
                        let v90: bool = */
                }); //;
                let v92: Func0<std::string::String> = _func0_from_v35;
                let v115: List<string> = ofArray_1(new_array(&[
                    string("block"),
                    string("relative"),
                    string("h-8"),
                    string("w-14"),
                    string("cursor-pointer"),
                    string("[-webkit-tap-highlight-color:_transparent]"),
                ]));
                let v130: string = join(
                    string(" "),
                    toArray(delay(Func0::new({
                        let v115 = v115.clone();
                        move || {
                            map_1(
                                Func1::new({
                                    let v115 = v115.clone();
                                    move |i: i32| item(i, v115.clone())
                                }),
                                rangeNumeric(0_i32, 1_i32, (length_1(v115.clone())) - 1_i32),
                            )
                        }
                    }))),
                );
                let v137: &str = &*v130;
                let v161: std::string::String = String::from(v137);
                let v182: std::string::String = v161;
                let v186: string = string(" class=v182 for=move || v92()");
                let v189: bool = true;
                let v187 = Func1::new({
                    let v0_1 = v0_1.clone();
                    let v34 = v34.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure175(v0_1.clone(), v34, v)
                }); //;
                let v190 = Dice_ui::method184(v31.clone());
                let v191 = Dice_ui::method185(v34);
                let v192: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v204: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                string("<input "),
                                (append(
                                    (append(
                                        string(" prop:checked=move || v190()"),
                                        (append(
                                            (append(
                                                string(" on:change=move |event| v187(event)"),
                                                (append(
                                                    (append(
                                                        string(" id=move || v191()"),
                                                        (append(
                                                            (append(
                                                                string(" type=\"checkbox\""),
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            string(" "),
                                                                            (v192),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                    string(""),
                                                                )),
                                                            )),
                                                            string(""),
                                                        )),
                                                    )),
                                                    string(""),
                                                )),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(" />"),
                        )),
                    )),
                    string(" }"),
                );
                let v206: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v190() on:change=move |event| v187(event) id=move || v191() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v208: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v206);
                let v209: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v210: string = append(
                    (append((append(string(" "), (v209))), string(""))),
                    string(""),
                );
                let v220: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
                let v222: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
                let v226: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v222))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v227: string = string("vec![]");
                let v228: Vec<leptos::prelude::AnyView> = vec![];
                let v230: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v228);
                let v232: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v230);
                let v235: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v226))),
                                    string(">move || { v232 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v237: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v232 }</path> };
                let v239: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v237);
                let v243: string = string("vec![v239]");
                let v244: Vec<leptos::prelude::AnyView> = vec![v239];
                let v246: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v244);
                let v248: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v246);
                let v251: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v220))),
                                    string(">move || { v248 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v253: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v248 }</svg> };
                let v263: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
                let v265: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
                let v269: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v265))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v270: string = string("vec![]");
                let v271: Vec<leptos::prelude::AnyView> = vec![];
                let v273: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v271);
                let v275: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v273);
                let v277: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v269))),
                                    string(">move || { v275 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v279: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v275 }</path> };
                let v281: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v279);
                let v285: string = string("vec![v281]");
                let v286: Vec<leptos::prelude::AnyView> = vec![v281];
                let v288: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v286);
                let v290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v288);
                let v292: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v263))),
                                    string(">move || { v290 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v294: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v290 }</svg> };
                let v296: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v294);
                let v298: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v253);
                let v306: string = string("vec![v298, v296]");
                let v307: Vec<leptos::prelude::AnyView> = vec![v298, v296];
                let v309: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v307);
                let v311: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v309);
                let v314: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v210))),
                                    string(">move || { v311 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v316: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v311 }</span> };
                let v318: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v316);
                let v319: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v320: string = append(
                    (append((append(string(" "), (v319))), string(""))),
                    string(""),
                );
                let v321: string = string("vec![]");
                let v322: Vec<leptos::prelude::AnyView> = vec![];
                let v324: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v322);
                let v326: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v324);
                let v328: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v320))),
                                    string(">move || { v326 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v330: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v326 }</span> };
                let v332: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v330);
                let v342: string = string("vec![v208, v318, v332]");
                let v343: Vec<leptos::prelude::AnyView> = vec![v208, v318, v332];
                let v345: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v343);
                let v347: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v345);
                let v350: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<label "), (v186))),
                                    string(">move || { v347 }</"),
                                )),
                                string("label"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v352: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class=v182 for=move || v92()>move || { v347 }</label> };
                let v354: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v352);
                let v357: bool = true;
                let _func0_from_v355 = Func0::from(move || {
                    //;
                    let v359: LrcPtr<(bool, std::string::String)> =
                        leptos::prelude::ReadSignal::get(&v31);
                    let v367: bool = true;
                    v359.1.clone() /*;
                                   let v369: bool = */
                }); //;
                let v371: Func0<std::string::String> = _func0_from_v355;
                let v374: bool = true;
                let _func1_from_v372 = Func0::from(move || {
                    //;
                    let v376: std::string::String = ();
                    let v379: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v381: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v379);
                    let v384: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                    > = Box::pin(v381.l3.clone());
                    let v386: LrcPtr<Dice_ui::Heap0> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v384);
                    let v394: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v396: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v394);
                    let v398 = Dice_ui::method186(v34, v376);
                    let v399: Vec<LrcPtr<(bool, std::string::String)>> =
                        Dice_ui::method177(v386.l0.clone());
                    let v402: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                        l0: v399
                            .iter()
                            .enumerate()
                            .map(|(i, x)| v398(i.try_into().unwrap())(x.clone()))
                            .collect::<Vec<_>>(),
                        l1: v386.l1.clone(),
                        l2: v386.l2,
                        l3: v386.l3,
                        l4: v386.l4.clone(),
                    });
                    let v404: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v396.l3.clone(), v402); //;
                    let v405: LrcPtr<Dice_ui::Heap36> = Dice_ui::Heap36::_ctor();
                    let v407: bool = true; /*;
                                           let v409: bool = */
                }); //;
                let v411: Func1<std::string::String, LrcPtr<Dice_ui::Heap36>> = _func1_from_v372;
                let v414 = {
                    let clo = Func0::new(move || Dice_ui::closure182((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v423: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v417(leptos::prelude::event_target_value(&event)) prop:value=move || v371() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v414(()) /> }");
                let v425: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v417(leptos::prelude::event_target_value(&event)) prop:value=move || v371() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v414(()) /> };
                let v427: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v425);
                let v539: leptos::prelude::AnyView = if (leptos::prelude::ArcMemo::get(&v2))
                    == 1_i32
                {
                    let v431: string = string("vec![]");
                    let v432: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v432)
                } else {
                    let v437: bool = true;
                    let _func0_from_v435 = Func0::from(move || {
                        //;
                        let v440: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v0_1.l0.clone());
                        let v442: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v440);
                        let v445: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v442.l3.clone(),
                            |x: &mut /*;
                             let v446: */
                             LrcPtr<Dice_ui::Heap0> /* = getZero();
                                                    let v451: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v3 = v3.clone();
                                    let v34 = v34.clone();
                                    move |v_2: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure183(v3.clone(), v34, v_2)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v453: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4,
                            |x: &mut /*;
                             let v454: */
                             i32 /* = getZero();
                                 let v459: bool =
                                     */| {
                                *x = Func1::new(move |v_3: i32| Dice_ui::closure168((), v_3))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v461: bool = true; /*;
                                               let v463: bool = */
                    }); //;
                    let v465: Func0<()> = _func0_from_v435;
                    let v468 = {
                        let clo_1 = Func0::new(move || Dice_ui::closure186((), ()));
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v480: string =
                        string(" class=move || \" \".to_owned() + &v468(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v486: string =
                        string(" d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v487: string = string("vec![]");
                    let v488: Vec<leptos::prelude::AnyView> = vec![];
                    let v490: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v488);
                    let v492: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v490);
                    let v494: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v486))),
                                        string(">move || { v492 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v496: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">move || { v492 }</path> };
                    let v498: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v496);
                    let v502: string = string("vec![v498]");
                    let v503: Vec<leptos::prelude::AnyView> = vec![v498];
                    let v505: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v503);
                    let v507: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v505);
                    let v509: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v480))),
                                        string(">move || { v507 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v511: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v468(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v507 }</svg> };
                    let v516 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure187((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v517: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v516(())");
                    let v520: string = append(
                        (append(
                            string(" aria-label=\"Delete\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v465()"),
                                    (append(
                                        (append((append(string(" "), (v517))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v522: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v511);
                    let v526: string = string("vec![v522]");
                    let v527: Vec<leptos::prelude::AnyView> = vec![v522];
                    let v529: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v527);
                    let v531: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v529);
                    let v534: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v520))),
                                        string(">move || { v531 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v536: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Delete" on:click=move |_| v465() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v516(())>move || { v531 }</button> };
                    leptos::prelude::IntoAny::into_any(v536)
                };
                let v549: string = string("vec![v354, v427, v539]");
                let v550: Vec<leptos::prelude::AnyView> = vec![v354, v427, v539];
                let v552: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v550);
                let v554: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v552);
                let v557: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v33))),
                                    string(">move || { v554 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v559: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex gap-[8px] [align-items:center]">move || { v554 }</div> };
                let v561: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v559);
                let v565: string = string("vec![v561]");
                let v566: Vec<leptos::prelude::AnyView> = vec![v561];
                let v568: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v566);
                let v571: LrcPtr<Dice_ui::Heap35> = LrcPtr::new(Dice_ui::Heap35 {
                    l0: leptos::prelude::AnyView::from(v568),
                });
                let v573: bool = true;
                v571 /*;
                     let v575: bool = */
            }); //;
            let v577: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<Dice_ui::Heap35>,
            > = _func1_from_v25;
            let v590: string =
                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v582(x) let:x key=move |x| v579(x.to_owned()) each=v9 /> })");
            let v591: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                leptos::prelude::view! { <leptos::prelude::For  children=move |x| v582(x) let:x key=move |x| v579(x.to_owned()) each=v9 /> },
            );
            let v595: string = string("vec![v591]");
            let v596: Vec<leptos::prelude::AnyView> = vec![v591];
            let v598: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v596);
            let v600: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v598);
            let v602: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v600 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v604: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[8px] gap-[8px]">move || { v600 }</div> };
            let v606: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v604);
            let v610: string = string("vec![v606]");
            let v611: Vec<leptos::prelude::AnyView> = vec![v606];
            leptos::prelude::Fragment::new(v611)
        }
        pub fn closure190(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure192(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method193() -> Func0<string> {
            Func0::new(move || Dice_ui::closure192((), ()))
        }
        pub fn closure194(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Dark Mode");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method194() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure194((), ()))
        }
        pub fn closure197(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure196(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l0.clone(),
                |x: &mut /*;
                 let v10: */
                 bool /* = getZero();
                      let v15: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure197((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure198(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method196(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure198(v0_1.clone(), ())
            })
        }
        pub fn closure199(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("dark-mode");
            String::from(v5)
        }
        pub fn method197() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure199((), ()))
        }
        pub fn closure195(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v9: &str = &*string("dark-mode");
                let v33: std::string::String = String::from(v9);
                let v54: bool = true;
                v33 /*;
                    let v56: bool = */
            }); //;
            let v58: Func0<std::string::String> = _func0_from_v1;
            let v81: List<string> = ofArray_1(new_array(&[
                string("block"),
                string("relative"),
                string("h-8"),
                string("w-14"),
                string("cursor-pointer"),
                string("[-webkit-tap-highlight-color:_transparent]"),
            ]));
            let v96: string = join(
                string(" "),
                toArray(delay(Func0::new({
                    let v81 = v81.clone();
                    move || {
                        map_1(
                            Func1::new({
                                let v81 = v81.clone();
                                move |i: i32| item(i, v81.clone())
                            }),
                            rangeNumeric(0_i32, 1_i32, (length_1(v81.clone())) - 1_i32),
                        )
                    }
                }))),
            );
            let v103: &str = &*v96;
            let v127: std::string::String = String::from(v103);
            let v148: std::string::String = v127;
            let v153: string = string(" class=v148 for=move || v58()");
            let v156: bool = true;
            let v154 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure196(v0_1.clone(), v)
            }); //;
            let v157 = Dice_ui::method196(v0_1.clone());
            let v158 = Dice_ui::method197();
            let v159: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v171: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v157()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v154(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v158()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v159))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v173: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v157() on:change=move |event| v154(event) id=move || v158() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v175: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v173);
            let v176: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v177: string = append(
                (append((append(string(" "), (v176))), string(""))),
                string(""),
            );
            let v187: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v189: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v193: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v189))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v194: string = string("vec![]");
            let v195: Vec<leptos::prelude::AnyView> = vec![];
            let v197: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v195);
            let v199: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v197);
            let v202: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v193))),
                                string(">move || { v199 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v204: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v199 }</path> };
            let v206: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v204);
            let v210: string = string("vec![v206]");
            let v211: Vec<leptos::prelude::AnyView> = vec![v206];
            let v213: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v211);
            let v215: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v213);
            let v218: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v187))),
                                string(">move || { v215 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v220: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v215 }</svg> };
            let v230: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v232: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v236: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v232))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v237: string = string("vec![]");
            let v238: Vec<leptos::prelude::AnyView> = vec![];
            let v240: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v238);
            let v242: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v240);
            let v244: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v236))),
                                string(">move || { v242 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v246: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v242 }</path> };
            let v248: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v246);
            let v252: string = string("vec![v248]");
            let v253: Vec<leptos::prelude::AnyView> = vec![v248];
            let v255: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v253);
            let v257: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v255);
            let v259: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v230))),
                                string(">move || { v257 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v261: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v257 }</svg> };
            let v263: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v261);
            let v265: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v220);
            let v273: string = string("vec![v265, v263]");
            let v274: Vec<leptos::prelude::AnyView> = vec![v265, v263];
            let v276: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v274);
            let v278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v276);
            let v281: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v177))),
                                string(">move || { v278 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v283: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v278 }</span> };
            let v285: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v283);
            let v286: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v287: string = append(
                (append((append(string(" "), (v286))), string(""))),
                string(""),
            );
            let v288: string = string("vec![]");
            let v289: Vec<leptos::prelude::AnyView> = vec![];
            let v291: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v289);
            let v293: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v291);
            let v295: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v287))),
                                string(">move || { v293 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v297: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v293 }</span> };
            let v299: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v297);
            let v309: string = string("vec![v175, v285, v299]");
            let v310: Vec<leptos::prelude::AnyView> = vec![v175, v285, v299];
            let v312: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v310);
            let v314: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v312);
            let v317: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v153))),
                                string(">move || { v314 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v319: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v148 for=move || v58()>move || { v314 }</label> };
            let v321: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v319);
            let v325: string = string("vec![v321]");
            let v326: Vec<leptos::prelude::AnyView> = vec![v321];
            leptos::prelude::Fragment::new(v326)
        }
        pub fn method195(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure195(v0_1.clone(), ())
            })
        }
        pub fn closure200(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure201(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure202(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn closure204(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Debug");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method198() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure204((), ()))
        }
        pub fn closure206(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l1.clone(),
                |x: &mut /*;
                 let v10: */
                 bool /* = getZero();
                      let v15: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure197((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure207(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l1.clone())
        }
        pub fn method200(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure207(v0_1.clone(), ())
            })
        }
        pub fn closure208(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("debug");
            String::from(v5)
        }
        pub fn method201() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure208((), ()))
        }
        pub fn closure205(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v9: &str = &*string("debug");
                let v33: std::string::String = String::from(v9);
                let v54: bool = true;
                v33 /*;
                    let v56: bool = */
            }); //;
            let v58: Func0<std::string::String> = _func0_from_v1;
            let v81: List<string> = ofArray_1(new_array(&[
                string("block"),
                string("relative"),
                string("h-8"),
                string("w-14"),
                string("cursor-pointer"),
                string("[-webkit-tap-highlight-color:_transparent]"),
            ]));
            let v96: string = join(
                string(" "),
                toArray(delay(Func0::new({
                    let v81 = v81.clone();
                    move || {
                        map_1(
                            Func1::new({
                                let v81 = v81.clone();
                                move |i: i32| item(i, v81.clone())
                            }),
                            rangeNumeric(0_i32, 1_i32, (length_1(v81.clone())) - 1_i32),
                        )
                    }
                }))),
            );
            let v103: &str = &*v96;
            let v127: std::string::String = String::from(v103);
            let v148: std::string::String = v127;
            let v153: string = string(" class=v148 for=move || v58()");
            let v156: bool = true;
            let v154 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure206(v0_1.clone(), v)
            }); //;
            let v157 = Dice_ui::method200(v0_1.clone());
            let v158 = Dice_ui::method201();
            let v159: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v171: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v157()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v154(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v158()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v159))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v173: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v157() on:change=move |event| v154(event) id=move || v158() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v175: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v173);
            let v176: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v177: string = append(
                (append((append(string(" "), (v176))), string(""))),
                string(""),
            );
            let v187: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v189: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v193: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v189))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v194: string = string("vec![]");
            let v195: Vec<leptos::prelude::AnyView> = vec![];
            let v197: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v195);
            let v199: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v197);
            let v202: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v193))),
                                string(">move || { v199 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v204: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v199 }</path> };
            let v206: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v204);
            let v210: string = string("vec![v206]");
            let v211: Vec<leptos::prelude::AnyView> = vec![v206];
            let v213: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v211);
            let v215: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v213);
            let v218: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v187))),
                                string(">move || { v215 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v220: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v215 }</svg> };
            let v230: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v232: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v236: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v232))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v237: string = string("vec![]");
            let v238: Vec<leptos::prelude::AnyView> = vec![];
            let v240: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v238);
            let v242: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v240);
            let v244: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v236))),
                                string(">move || { v242 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v246: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v242 }</path> };
            let v248: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v246);
            let v252: string = string("vec![v248]");
            let v253: Vec<leptos::prelude::AnyView> = vec![v248];
            let v255: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v253);
            let v257: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v255);
            let v259: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v230))),
                                string(">move || { v257 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v261: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v257 }</svg> };
            let v263: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v261);
            let v265: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v220);
            let v273: string = string("vec![v265, v263]");
            let v274: Vec<leptos::prelude::AnyView> = vec![v265, v263];
            let v276: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v274);
            let v278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v276);
            let v281: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v177))),
                                string(">move || { v278 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v283: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v278 }</span> };
            let v285: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v283);
            let v286: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v287: string = append(
                (append((append(string(" "), (v286))), string(""))),
                string(""),
            );
            let v288: string = string("vec![]");
            let v289: Vec<leptos::prelude::AnyView> = vec![];
            let v291: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v289);
            let v293: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v291);
            let v295: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v287))),
                                string(">move || { v293 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v297: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v293 }</span> };
            let v299: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v297);
            let v309: string = string("vec![v175, v285, v299]");
            let v310: Vec<leptos::prelude::AnyView> = vec![v175, v285, v299];
            let v312: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v310);
            let v314: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v312);
            let v317: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v153))),
                                string(">move || { v314 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v319: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v148 for=move || v58()>move || { v314 }</label> };
            let v321: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v319);
            let v325: string = string("vec![v321]");
            let v326: Vec<leptos::prelude::AnyView> = vec![v321];
            leptos::prelude::Fragment::new(v326)
        }
        pub fn method199(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure205(v0_1.clone(), ())
            })
        }
        pub fn closure209(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure193(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v4 = Dice_ui::method194();
            let v5 = Dice_ui::method195(v0_1.clone());
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure200((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v10() -> string {
                Dice_ui::closure201((), ())
            }
            let v11 = {
                let clo_1 = Func0::from(v10);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v13() -> string {
                Dice_ui::closure202((), ())
            }
            let v14 = {
                let clo_2 = Func0::from(v13);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            fn v18() -> string {
                Dice_ui::closure203((), ())
            }
            let v19 = {
                let clo_3 = Func0::from(v18);
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v62 = Dice_ui::method198();
            let v63 = Dice_ui::method199(v0_1);
            let v66 = {
                let clo_4 = Func0::new(move || Dice_ui::closure209((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v68 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v70 = {
                let clo_6 = Func0::from(v13);
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v71: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v70(()) + \" \" + &v68(()) + \" \" + &v66(())");
            let v72: string = append(
                (append((append(string(" "), (v71))), string(""))),
                string(""),
            );
            let v74 = {
                let clo_7 = Func0::from(v18);
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v76: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v77: leptos::prelude::Fragment = v62();
            let v79: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v77);
            let v81: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v76))),
                                string(">move || { v79 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v83: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v79 }</dt> };
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v87: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v74(())");
            let v88: leptos::prelude::Fragment = v63();
            let v90: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v88);
            let v92: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v87))),
                                string(">move || { v90 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v94: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v74(())>move || { v90 }</dd> };
            let v96: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v94);
            let v103: string = string("vec![v85, v96]");
            let v104: Vec<leptos::prelude::AnyView> = vec![v85, v96];
            let v106: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v104);
            let v108: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v106);
            let v110: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v72))),
                                string(">move || { v108 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v112: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v70(()) + " " + &v68(()) + " " + &v66(())>move || { v108 }</dl> };
            let v114: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v112);
            let v116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v123: string = string("vec![v116, v114]");
            let v124: Vec<leptos::prelude::AnyView> = vec![v116, v114];
            let v126: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v124);
            let v128: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v126);
            let v131: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v128 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v133: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[11px] gap-[11px]">move || { v128 }</div> };
            let v135: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v133);
            let v139: string = string("vec![v135]");
            let v140: Vec<leptos::prelude::AnyView> = vec![v135];
            leptos::prelude::Fragment::new(v140)
        }
        pub fn closure210(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure211(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure212(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method202() -> Func0<string> {
            Func0::new(move || Dice_ui::closure212((), ()))
        }
        pub fn closure214(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Global State");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method203() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure214((), ()))
        }
        pub fn closure217(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_0(v0_1)
        }
        pub fn method205() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure217((), v))
        }
        pub fn closure218(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_1(v0_1)
        }
        pub fn method206() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure218((), v))
        }
        pub fn closure216(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v5: LrcPtr<Dice_ui::Heap2> = v0_1.clone();
            let v7: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v5).map_err(|x| x.to_string());
            let v8 = Dice_ui::method205();
            let v9 = Dice_ui::method206();
            let v10: Dice_ui::US70 = match &v7 {
                Err(v7_1_0) => v9(v7_1_0.clone()),
                Ok(v7_0_0) => v8(v7_0_0.clone()),
            };
            match &v10 {
                Dice_ui::US70::US70_0(v10_0_0) => {
                    fable_library_rust::String_::fromString(v10_0_0.clone())
                }
                Dice_ui::US70::US70_1(v10_1_0) => append(
                    (append(string("Error: "), (toString(v10_1_0.clone())))),
                    string(""),
                ),
            }
        }
        pub fn closure219(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure215(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9: leptos::prelude::ArcMemo<string> = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure216(v6.clone(), ())
                })()
            });
            let v11: string = leptos::prelude::ArcMemo::get(&v9);
            let v14 = {
                let clo = Func0::new(move || Dice_ui::closure219((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v15: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v14(())");
            let v17: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v22: &str = &*v11;
            let v46: std::string::String = String::from(v22);
            let v67: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v46));
            let v71: string = string("vec![v67]");
            let v72: Vec<leptos::prelude::AnyView> = vec![v67];
            let v74: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v72);
            let v76: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v74);
            let v79: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v17))),
                                string(">move || { v76 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v81: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v14(())>move || { v76 }</pre> };
            let v83: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v81);
            let v87: string = string("vec![v83]");
            let v88: Vec<leptos::prelude::AnyView> = vec![v83];
            leptos::prelude::Fragment::new(v88)
        }
        pub fn method204() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure215((), ()))
        }
        pub fn closure220(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure213(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1 = Dice_ui::method203();
            let v1 = Dice_ui::method204();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure220((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure201((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure202((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v13: string = append(
                (append((append(string(" "), (v11))), string(""))),
                string(""),
            );
            let v16 = {
                let clo_3 = Func0::new(move || Dice_ui::closure203((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v18: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v19: leptos::prelude::Fragment = v0_1();
            let v21: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v19);
            let v24: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v18))),
                                string(">move || { v21 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v21 }</dt> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())");
            let v31: leptos::prelude::Fragment = v1();
            let v33: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v31);
            let v36: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v30))),
                                string(">move || { v33 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v38: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v16(())>move || { v33 }</dd> };
            let v40: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v38);
            let v48: string = string("vec![v28, v40]");
            let v49: Vec<leptos::prelude::AnyView> = vec![v28, v40];
            let v51: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v49);
            let v53: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v51);
            let v56: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v13))),
                                string(">move || { v53 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v58: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())>move || { v53 }</dl> };
            let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
            let v64: string = string("vec![v60]");
            let v65: Vec<leptos::prelude::AnyView> = vec![v60];
            leptos::prelude::Fragment::new(v65)
        }
        pub fn closure221(v0_1: leptos::prelude::WriteSignal<bool>, unitVar: ()) {
            let v2: bool = true;
            leptos::prelude::WriteSignal::update(
                &v0_1,
                |x: &mut /*;
                 let v3: */
                 bool /* = getZero();
                      let v8: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure197((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure222(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method207(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure223(
            v0_1: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> std::string::String {
            let v10: &'static str =
                Dice_ui::method207(if leptos::prelude::ReadSignal::get(&v0_1) {
                    let v4: string = string("r#\"\"#");
                    r#""#
                } else {
                    let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                    r#"bg-gray-300 hover:bg-gray-200"#
                });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure224(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure225(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure226(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method208(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure226((), ()))
        }
        pub fn closure228(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Settings");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn closure229(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Table View");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method209() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure229((), ()))
        }
        pub fn closure232(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure231(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l3.clone(),
                |x: &mut /*;
                 let v10: */
                 LrcPtr<Dice_ui::Heap0> /* = getZero();
                                        let v15: bool =
                                            */| {
                    *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure232((), v))(
                        x.clone(),
                    )
                },
            ); //;
            ()
        }
        pub fn closure233(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            if let Dice_ui::US1::US1_1 = &(leptos::prelude::ArcRwSignal::get(&v5.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method211(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure233(v0_1.clone(), ())
            })
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("table-view");
            String::from(v5)
        }
        pub fn method212() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure234((), ()))
        }
        pub fn closure230(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v9: &str = &*string("table-view");
                let v33: std::string::String = String::from(v9);
                let v54: bool = true;
                v33 /*;
                    let v56: bool = */
            }); //;
            let v58: Func0<std::string::String> = _func0_from_v1;
            let v81: List<string> = ofArray_1(new_array(&[
                string("block"),
                string("relative"),
                string("h-8"),
                string("w-14"),
                string("cursor-pointer"),
                string("[-webkit-tap-highlight-color:_transparent]"),
            ]));
            let v96: string = join(
                string(" "),
                toArray(delay(Func0::new({
                    let v81 = v81.clone();
                    move || {
                        map_1(
                            Func1::new({
                                let v81 = v81.clone();
                                move |i: i32| item(i, v81.clone())
                            }),
                            rangeNumeric(0_i32, 1_i32, (length_1(v81.clone())) - 1_i32),
                        )
                    }
                }))),
            );
            let v103: &str = &*v96;
            let v127: std::string::String = String::from(v103);
            let v148: std::string::String = v127;
            let v153: string = string(" class=v148 for=move || v58()");
            let v156: bool = true;
            let v154 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure231(v0_1.clone(), v)
            }); //;
            let v157 = Dice_ui::method211(v0_1.clone());
            let v158 = Dice_ui::method212();
            let v159: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v171: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v157()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v154(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v158()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v159))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v173: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v157() on:change=move |event| v154(event) id=move || v158() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v175: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v173);
            let v176: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v177: string = append(
                (append((append(string(" "), (v176))), string(""))),
                string(""),
            );
            let v187: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v189: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v193: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v189))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v194: string = string("vec![]");
            let v195: Vec<leptos::prelude::AnyView> = vec![];
            let v197: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v195);
            let v199: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v197);
            let v202: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v193))),
                                string(">move || { v199 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v204: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v199 }</path> };
            let v206: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v204);
            let v210: string = string("vec![v206]");
            let v211: Vec<leptos::prelude::AnyView> = vec![v206];
            let v213: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v211);
            let v215: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v213);
            let v218: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v187))),
                                string(">move || { v215 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v220: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v215 }</svg> };
            let v230: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v232: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v236: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v232))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v237: string = string("vec![]");
            let v238: Vec<leptos::prelude::AnyView> = vec![];
            let v240: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v238);
            let v242: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v240);
            let v244: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v236))),
                                string(">move || { v242 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v246: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v242 }</path> };
            let v248: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v246);
            let v252: string = string("vec![v248]");
            let v253: Vec<leptos::prelude::AnyView> = vec![v248];
            let v255: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v253);
            let v257: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v255);
            let v259: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v230))),
                                string(">move || { v257 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v261: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v257 }</svg> };
            let v263: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v261);
            let v265: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v220);
            let v273: string = string("vec![v265, v263]");
            let v274: Vec<leptos::prelude::AnyView> = vec![v265, v263];
            let v276: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v274);
            let v278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v276);
            let v281: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v177))),
                                string(">move || { v278 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v283: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v278 }</span> };
            let v285: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v283);
            let v286: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v287: string = append(
                (append((append(string(" "), (v286))), string(""))),
                string(""),
            );
            let v288: string = string("vec![]");
            let v289: Vec<leptos::prelude::AnyView> = vec![];
            let v291: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v289);
            let v293: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v291);
            let v295: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v287))),
                                string(">move || { v293 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v297: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v293 }</span> };
            let v299: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v297);
            let v309: string = string("vec![v175, v285, v299]");
            let v310: Vec<leptos::prelude::AnyView> = vec![v175, v285, v299];
            let v312: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v310);
            let v314: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v312);
            let v317: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v153))),
                                string(">move || { v314 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v319: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v148 for=move || v58()>move || { v314 }</label> };
            let v321: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v319);
            let v325: string = string("vec![v321]");
            let v326: Vec<leptos::prelude::AnyView> = vec![v321];
            leptos::prelude::Fragment::new(v326)
        }
        pub fn method210(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure230(v0_1.clone(), ())
            })
        }
        pub fn closure235(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure236(v0_1: i64, unitVar: ()) -> leptos::prelude::Fragment {
            let v1: string = append(
                (append(string("Transaction "), (toString((v0_1) + 1_i64)))),
                string(""),
            );
            let v6: &str = &*v1;
            let v30: std::string::String = String::from(v6);
            let v51: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v30));
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Account");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method213() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure238(v0_1: string, unitVar: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*v0_1;
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method214(v0_1: string) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure238(v0_1.clone(), ())
            })
        }
        pub fn closure239(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure240(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Timestamp");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method215() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn closure242(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v19: i64 =
                (Dice_ui::method173(toInt64(fable_library_rust::String_::fromString(v5))))
                    / 1000_i64;
            let v21: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v19);
            let v35: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method174(), v21));
            let v54: Dice_ui::US31 = match &v35 {
                Dice_ui::US68::US68_0(v35_0_0) => {
                    let v41: chrono::NaiveDateTime = match &v35 {
                        Dice_ui::US68::US68_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v43: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v41);
                    let v45: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v46: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v48: std::string::String = v43.format(v46).to_string();
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v48))
                }
                _ => Dice_ui::US31::US31_1,
            };
            let v60: Dice_ui::US69 = match &v54 {
                Dice_ui::US31::US31_0(v54_0_0) => Dice_ui::US69::US69_0(
                    match &v54 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => Dice_ui::US69::US69_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v65: string = match &v60 {
                Dice_ui::US69::US69_0(v60_0_0) => v60_0_0.clone(),
                Dice_ui::US69::US69_1(v60_1_0) => append(
                    (append(string("sm\'.to_string result / Error: "), (v60_1_0.clone()))),
                    string(""),
                ),
            };
            let v70: &str = &*v65;
            let v94: std::string::String = String::from(v70);
            let v115: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v94));
            let v120: string = string("vec![v115]");
            let v121: Vec<leptos::prelude::AnyView> = vec![v115];
            leptos::prelude::Fragment::new(v121)
        }
        pub fn method216(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure242(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Predecessor");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method217() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn closure246(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method218(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure246(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure248(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure249(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Receiver");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method219() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure249((), ()))
        }
        pub fn closure250(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method220(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure250(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure251(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure252(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure253(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Actions");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method221() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure253((), ()))
        }
        pub fn closure255(v0_1: std::string::String, unitVar: ()) -> leptos::prelude::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == (v2.clone()) {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == (v2.clone()) {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == (v2.clone()) {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v16: &str = &*v11;
            let v40: std::string::String = String::from(v16);
            let v61: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v40));
            let v66: string = string("vec![v61]");
            let v67: Vec<leptos::prelude::AnyView> = vec![v61];
            leptos::prelude::Fragment::new(v67)
        }
        pub fn method223(v0_1: std::string::String) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure255(v0_1.clone(), ())
            })
        }
        pub fn closure257(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Method");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method225() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure257((), ()))
        }
        pub fn closure258(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: Dice_ui::US14 =
                defaultValue(Dice_ui::US14::US14_1, map(Dice_ui::method38(), v0_1));
            match &v14 {
                Dice_ui::US14::US14_0(v14_0_0) => {
                    let v20: string = fable_library_rust::String_::fromString(
                        match &v14 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v25: &str = &*v20;
                    let v49: std::string::String = String::from(v25);
                    let v70: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v49),
                    );
                    let v75: string = string("vec![v70]");
                    let v76: Vec<leptos::prelude::AnyView> = vec![v70];
                    leptos::prelude::Fragment::new(v76)
                }
                _ => {
                    let v84: &str = &*string("None");
                    let v108: std::string::String = String::from(v84);
                    let v129: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v108),
                    );
                    let v134: string = string("vec![v129]");
                    let v135: Vec<leptos::prelude::AnyView> = vec![v129];
                    leptos::prelude::Fragment::new(v135)
                }
            }
        }
        pub fn method226(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure258(v0_1.clone(), ())
            })
        }
        pub fn closure259(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure260(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure261(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure256(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col\"");
            let v4 = Dice_ui::method225();
            let v5 = Dice_ui::method226(v0_1);
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure259((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11 = {
                let clo_1 = Func0::new(move || Dice_ui::closure260((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14 = {
                let clo_2 = Func0::new(move || Dice_ui::closure202((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v19 = {
                let clo_3 = Func0::new(move || Dice_ui::closure261((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v63: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v67: string = string("vec![v63]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v63];
            let v70: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
            let v75: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v72 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v77: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v72 }</div> };
            let v79: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v77);
            let v83: string = string("vec![v79]");
            let v84: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v84)
        }
        pub fn method224(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure256(v0_1.clone(), ())
            })
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure263(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure264(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure265(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure254(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v15: bool = true;
            let _vec_map : Vec<_> = v13.into_iter().map(|x| { //;
            let patternInput:
                    (std::string::String, Option<std::string::String>) = x;
            let v19 = Dice_ui::method223(patternInput.0.clone());
            let v20 = Dice_ui::method224(patternInput.1.clone());
            let v23 =
                {
                    let clo = Func0::new(move || Dice_ui::closure262((), ()));
                    Func1::new({
                                   let clo = clo.clone();
                                   move |arg: ()| clo()
                               })
                };
            let v26 =
                {
                    let clo_1 =
                        Func0::new(move || Dice_ui::closure263((), ()));
                    Func1::new({
                                   let clo_1 = clo_1.clone();
                                   move |arg_1: ()| clo_1()
                               })
                };
            let v29 =
                {
                    let clo_2 =
                        Func0::new(move || Dice_ui::closure264((), ()));
                    Func1::new({
                                   let clo_2 = clo_2.clone();
                                   move |arg_2: ()| clo_2()
                               })
                };
            let v30: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())");
            let v32: string =
                append((append((append(string(" "), (v30))), string(""))),
                       string(""));
            let v35 =
                {
                    let clo_3 =
                        Func0::new(move || Dice_ui::closure265((), ()));
                    Func1::new({
                                   let clo_3 = clo_3.clone();
                                   move |arg_3: ()| clo_3()
                               })
                };
            let v37: string =
                string(" class=\"[font-size:12px] text-gray-400\"");
            let v38: leptos::prelude::Fragment = v19();
            let v40: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v38);
            let v43: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dt "),
                                                               (v37))),
                                                       string(">move || { v40 }</"))),
                                               string("dt"))),
                                       string(">"))))), string(" }"));
            let v45:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v40 }</dt> };
            let v47: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v45);
            let v49: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())");
            let v50: leptos::prelude::Fragment = v20();
            let v52: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v50);
            let v55: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dd "),
                                                               (v49))),
                                                       string(">move || { v52 }</"))),
                                               string("dd"))),
                                       string(">"))))), string(" }"));
            let v57:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v35(())>move || { v52 }</dd> };
            let v59: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v57);
            let v67: string = string("vec![v47, v59]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v47, v59];
            let v70: leptos::prelude::Fragment =
                leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v70);
            let v75: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dl "),
                                                               (v32))),
                                                       string(">move || { v72 }</"))),
                                               string("dl"))),
                                       string(">"))))), string(" }"));
            let v77:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v29(()) + " " + &v26(()) + " " + &v23(())>move || { v72 }</dl> };
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v77);
            let v81: bool = true; v79 }).collect::<Vec<_>>();
            let v83: Vec<leptos::prelude::AnyView> = _vec_map;
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method222(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure254(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure266(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure268(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure269(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Deposit");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method227() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure269((), ()))
        }
        pub fn closure270(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v8);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v65: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v70: string = string("vec![v65]");
            let v71: Vec<leptos::prelude::AnyView> = vec![v65];
            leptos::prelude::Fragment::new(v71)
        }
        pub fn method228(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure270(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure271(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure272(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure273(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Outcome Status");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method229() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure273((), ()))
        }
        pub fn closure274(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = ofBoolean(v9);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v65: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v70: string = string("vec![v65]");
            let v71: Vec<leptos::prelude::AnyView> = vec![v65];
            leptos::prelude::Fragment::new(v71)
        }
        pub fn method230(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure274(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure275(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure276(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure277(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Fee");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method231() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure277((), ()))
        }
        pub fn closure278(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v10);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v65: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v70: string = string("vec![v65]");
            let v71: Vec<leptos::prelude::AnyView> = vec![v65];
            leptos::prelude::Fragment::new(v71)
        }
        pub fn method232(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure278(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure279(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure280(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure281(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Height");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method233() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure281((), ()))
        }
        pub fn closure282(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v6);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v65: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v70: string = string("vec![v65]");
            let v71: Vec<leptos::prelude::AnyView> = vec![v65];
            leptos::prelude::Fragment::new(v71)
        }
        pub fn method234(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure282(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure283(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure285(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Hash");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method235() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure285((), ()))
        }
        pub fn closure286(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method236(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure286(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure287(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure288(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure289(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Hash");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method237() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure289((), ()))
        }
        pub fn closure290(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method238(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure290(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure291(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure293(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Receipt ID");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method239() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure293((), ()))
        }
        pub fn closure294(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method240(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure294(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure295(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure296(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure297(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Logs");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method241() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure297((), ()))
        }
        pub fn method243() -> string {
            string("\n")
        }
        pub fn closure299(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure298(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: std::string::String = ();
                let v21: LrcPtr<Dice_ui::Heap9> = LrcPtr::new(Dice_ui::Heap9 {
                    l0: fable_library_rust::String_::fromString(v18),
                });
                let v23: bool = true;
                v21 /*;
                    let v25: bool = */
            }); //;
            let v27: Func1<std::string::String, LrcPtr<Dice_ui::Heap9>> = _func1_from_v14;
            let v29: Vec<string> = v13.into_iter().map(|x| v27(x.clone())).collect::<Vec<_>>();
            let v32: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray(fable_library_rust::NativeArray_::array_from(v29.clone()));
            let v44: string = replace(
                join(Dice_ui::method243(), toArray(v32)),
                string("\\n"),
                string("\n"),
            );
            let v47 = {
                let clo = Func0::new(move || Dice_ui::closure299((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v48: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v47(())");
            let v50: string = append(
                (append((append(string(" "), (v48))), string(""))),
                string(""),
            );
            let v55: &str = &*v44;
            let v79: std::string::String = String::from(v55);
            let v100: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v79));
            let v104: string = string("vec![v100]");
            let v105: Vec<leptos::prelude::AnyView> = vec![v100];
            let v107: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v105);
            let v109: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v107);
            let v112: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v50))),
                                string(">move || { v109 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v114: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v47(())>move || { v109 }</pre> };
            let v116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v114);
            let v120: string = string("vec![v116]");
            let v121: Vec<leptos::prelude::AnyView> = vec![v116];
            leptos::prelude::Fragment::new(v121)
        }
        pub fn method242(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure298(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure301(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure302(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn method245(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method245: loop {
                break '_method245 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if (length(fable_library_rust::String_::fromString(v4))) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method245;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method244(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method244: loop {
                break '_method244 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    if Dice_ui::method245(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method244;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure227(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                >,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v144: leptos::prelude::AnyView = if leptos::prelude::ReadSignal::get(&v3) {
                let v8: string = string(" class=\"px-[12px] py-[10px]\"");
                let v10: string = string(" class=\"flex items-center pb-[6px]\"");
                let v12: string = string(" class=\"pr-[15px] [font-size:13px]\"");
                let v16: Func0<leptos::prelude::Fragment> =
                    Dice_ui::method165(Func0::new(move || {
                        Func0::new(move || Dice_ui::closure228((), ()))()
                    }));
                let v18: leptos::prelude::Fragment = (move || v16())();
                let v20: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v18);
                let v23: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v12))),
                                    string(">move || { v20 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v25: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v20 }</span> };
                let v27: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v25);
                let v29: string = string(" class=\"h-px flex-1 bg-gray-300\"");
                let v30: string = string("vec![]");
                let v31: Vec<leptos::prelude::AnyView> = vec![];
                let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
                let v35: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v33);
                let v37: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v29))),
                                    string(">move || { v35 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v35 }</span> };
                let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
                let v49: string = string("vec![v27, v41]");
                let v50: Vec<leptos::prelude::AnyView> = vec![v27, v41];
                let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
                let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
                let v56: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v10))),
                                    string(">move || { v54 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v58: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v54 }</span> };
                let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
                let v61 = Dice_ui::method209();
                let v62 = Dice_ui::method210(v0_1.clone());
                let v65 = {
                    let clo = Func0::new(move || Dice_ui::closure235((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v68 = {
                    let clo_1 = Func0::new(move || Dice_ui::closure201((), ()));
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v71 = {
                    let clo_2 = Func0::new(move || Dice_ui::closure202((), ()));
                    Func1::new({
                        let clo_2 = clo_2.clone();
                        move |arg_2: ()| clo_2()
                    })
                };
                let v72: string =
                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v71(()) + \" \" + &v68(()) + \" \" + &v65(())");
                let v73: string = append(
                    (append((append(string(" "), (v72))), string(""))),
                    string(""),
                );
                let v76 = {
                    let clo_3 = Func0::new(move || Dice_ui::closure203((), ()));
                    Func1::new({
                        let clo_3 = clo_3.clone();
                        move |arg_3: ()| clo_3()
                    })
                };
                let v78: string = string(" class=\"[font-size:12px] text-gray-400\"");
                let v79: leptos::prelude::Fragment = v61();
                let v81: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v79);
                let v84: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dt "), (v78))),
                                    string(">move || { v81 }</"),
                                )),
                                string("dt"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v86: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v81 }</dt> };
                let v88: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v86);
                let v90: string =
                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v76(())");
                let v91: leptos::prelude::Fragment = v62();
                let v93: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v91);
                let v96: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dd "), (v90))),
                                    string(">move || { v93 }</"),
                                )),
                                string("dd"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v98: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v76(())>move || { v93 }</dd> };
                let v100: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v98);
                let v107: string = string("vec![v88, v100]");
                let v108: Vec<leptos::prelude::AnyView> = vec![v88, v100];
                let v110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v108);
                let v112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v110);
                let v115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dl "), (v73))),
                                    string(">move || { v112 }</"),
                                )),
                                string("dl"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v117: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v71(()) + " " + &v68(()) + " " + &v65(())>move || { v112 }</dl> };
                let v119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v117);
                let v126: string = string("vec![v60, v119]");
                let v127: Vec<leptos::prelude::AnyView> = vec![v60, v119];
                let v129: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v127);
                let v131: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v129);
                let v134: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v8))),
                                    string(">move || { v131 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v136: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="px-[12px] py-[10px]">move || { v131 }</div> };
                leptos::prelude::IntoAny::into_any(v136)
            } else {
                let v140: string = string("vec![]");
                let v141: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v141)
            };
            let v146: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v4044: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v146.clone()),
            ) as u64)
                == 0_u64
            {
                let v153: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v155: string = string(" class=\"[height:17px]\"");
                let v169: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v175: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v176: string = string("vec![]");
                let v177: Vec<leptos::prelude::AnyView> = vec![];
                let v179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v177);
                let v181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v179);
                let v184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v175))),
                                    string(">move || { v181 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v181 }</path> };
                let v188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v186);
                let v192: string = string("vec![v188]");
                let v193: Vec<leptos::prelude::AnyView> = vec![v188];
                let v195: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v193);
                let v197: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v195);
                let v200: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v169))),
                                    string(">move || { v197 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v202: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v197 }</svg> };
                let v204: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v202);
                let v208: string = string("vec![v204]");
                let v209: Vec<leptos::prelude::AnyView> = vec![v204];
                let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
                let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
                let v216: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v155))),
                                    string(">move || { v213 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v218: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v213 }</span> };
                let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
                let v222: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v228: &str = &*string("No account selected");
                let v252: std::string::String = String::from(v228);
                let v273: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v252));
                let v277: string = string("vec![v273]");
                let v278: Vec<leptos::prelude::AnyView> = vec![v273];
                let v280: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v278);
                let v282: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v280);
                let v285: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v222))),
                                    string(">move || { v282 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v287: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v282 }</pre> };
                let v289: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v287);
                let v297: string = string("vec![v220, v289]");
                let v298: Vec<leptos::prelude::AnyView> = vec![v220, v289];
                let v300: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v298);
                let v302: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v300);
                let v305: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v153))),
                                    string(">move || { v302 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v307: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v302 }</div> };
                leptos::prelude::IntoAny::into_any(v307)
            } else {
                let v311: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v312 = Dice_ui::method120();
                let v313 = Dice_ui::method121();
                let v314: Dice_ui::US53 = match &v311 {
                    Err(v311_1_0) => v313(v311_1_0.clone()),
                    Ok(v311_0_0) => v312(v311_0_0.clone()),
                };
                let v337: Dice_ui::US46 = match &v314 {
                    Dice_ui::US53::US53_0(v314_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method122(), v314_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v314_1_0) => Dice_ui::US46::US46_1(v314_1_0.clone()),
                };
                match &v337 {
                    Dice_ui::US46::US46_0(v337_0_0) => {
                        let v338: Dice_ui::US47 = v337_0_0.clone();
                        if let Dice_ui::US47::US47_0(v338_0_0) = &v338 {
                            let v339: Array<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                v338_0_0.clone();
                            let v342: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v0_1.l0.clone());
                            let v344: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v342);
                            if if let Dice_ui::US1::US1_0 =
                                &(leptos::prelude::ArcRwSignal::get(&v344.l3.clone())).l4
                            {
                                true
                            } else {
                                false
                            } {
                                let v350: string =
                                        string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                let v352: string = append(
                                    (append((append(string(" "), (v350))), string(""))),
                                    string(""),
                                );
                                let v354: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                    v339.clone().to_vec();
                                let v356: bool = true;
                                let _vec_map : Vec<_> = v354.into_iter().map(|x| { //;
                                    let patternInput:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap12>) = x;
                                    let v360: LrcPtr<Dice_ui::Heap12> =
                                        patternInput.2.clone();
                                    let v361: std::string::String =
                                        v360.l0.clone();
                                    let v362: std::string::String =
                                        v360.l1.clone();
                                    let v363: std::string::String =
                                        v360.l2.clone();
                                    let v364: std::string::String =
                                        v360.l3.clone();
                                    let v365: std::string::String =
                                        v360.l4.clone();
                                    let v366: std::string::String =
                                        v360.l5.clone();
                                    let v367: u32 = v360.l6;
                                    let v368:
                                            Array<(std::string::String,
                                                   Option<std::string::String>)> =
                                        v360.l7.clone();
                                    let v369: f64 = v360.l8;
                                    let v370: bool = v360.l9;
                                    let v371: f64 = v360.l10;
                                    let v372: Array<std::string::String> =
                                        v360.l11.clone();
                                    let v374: i64 =
                                        patternInput.1.clone() as i64;
                                    let v379: bool =
                                        true; leptos::logging::log!("{}", string("transaction.render (1)"));
                                    let v381: Option<LrcPtr<Dice_ui::Heap2>> =
                                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                                    let v383: LrcPtr<Dice_ui::Heap2> =
                                        v381.unwrap();
                                    let v385: string =
                                        string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
                                    let v387: string =
                                        string(" class=\"flex items-center pb-[6px]\"");
                                    let v389: string =
                                        string(" class=\"pr-[15px] [font-size:13px]\"");
                                    let v393:
                                            Func0<leptos::prelude::Fragment> =
                                        Dice_ui::method165(Func0::new(move || Func0::new({
                                                                                             let v374
                                                                                                 =
                                                                                                 v374.clone();
                                                                                             move
                                                                                                 ||
                                                                                                 Dice_ui::closure236(v374,
                                                                                                                     ())
                                                                                         })()));
                                    let v395: leptos::prelude::Fragment =
                                        (move || v393())();
                                    let v397: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v395);
                                    let v400: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v389))),
                                                                               string(">move || { v397 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v402:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v397 }</span> };
                                    let v404: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v402);
                                    let v406: string =
                                        string(" class=\"h-px flex-1 bg-gray-300\"");
                                    let v407: string = string("vec![]");
                                    let v408: Vec<leptos::prelude::AnyView> =
                                        vec![];
                                    let v410: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v408);
                                    let v412: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v410);
                                    let v414: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v406))),
                                                                               string(">move || { v412 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v416:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v412 }</span> };
                                    let v418: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v416);
                                    let v426: string =
                                        string("vec![v404, v418]");
                                    let v427: Vec<leptos::prelude::AnyView> =
                                        vec![v404, v418];
                                    let v429: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v427);
                                    let v431: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v429);
                                    let v433: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v387))),
                                                                               string(">move || { v431 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v435:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v431 }</span> };
                                    let v437: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v435);
                                    let v439: string =
                                        string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
                                    let v440 = Dice_ui::method213();
                                    let v441 =
                                        Dice_ui::method214(patternInput.0.clone());
                                    let v444 =
                                        {
                                            let clo_4 =
                                                Func0::new(move ||
                                                               Dice_ui::closure239((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_4 =
                                                               clo_4.clone();
                                                           move |arg_4: ()|
                                                               clo_4()
                                                       })
                                        };
                                    let v447 =
                                        {
                                            let clo_5 =
                                                Func0::new(move ||
                                                               Dice_ui::closure240((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_5 =
                                                               clo_5.clone();
                                                           move |arg_5: ()|
                                                               clo_5()
                                                       })
                                        };
                                    fn v449() -> string {
                                        Dice_ui::closure202((), ())
                                    }
                                    let v450 =
                                        {
                                            let clo_6 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_6 =
                                                               clo_6.clone();
                                                           move |arg_6: ()|
                                                               clo_6()
                                                       })
                                        };
                                    let v451: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v450(()) + \" \" + &v447(()) + \" \" + &v444(())");
                                    let v452: string =
                                        append((append((append(string(" "),
                                                               (v451))),
                                                       string(""))),
                                               string(""));
                                    fn v454() -> string {
                                        Dice_ui::closure203((), ())
                                    }
                                    let v455 =
                                        {
                                            let clo_7 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_7 =
                                                               clo_7.clone();
                                                           move |arg_7: ()|
                                                               clo_7()
                                                       })
                                        };
                                    let v457: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v458: leptos::prelude::Fragment =
                                        v440();
                                    let v460: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v458);
                                    let v463: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v457))),
                                                                               string(">move || { v460 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v465:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v460 }</dt> };
                                    let v467: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v465);
                                    let v469: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v455(())");
                                    let v470: leptos::prelude::Fragment =
                                        v441();
                                    let v472: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v470);
                                    let v475: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v469))),
                                                                               string(">move || { v472 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v477:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v455(())>move || { v472 }</dd> };
                                    let v479: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v477);
                                    let v486: string =
                                        string("vec![v467, v479]");
                                    let v487: Vec<leptos::prelude::AnyView> =
                                        vec![v467, v479];
                                    let v489: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v487);
                                    let v491: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v489);
                                    let v494: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v452))),
                                                                               string(">move || { v491 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v496:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v450(()) + " " + &v447(()) + " " + &v444(())>move || { v491 }</dl> };
                                    let v498: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v496);
                                    let v499 = Dice_ui::method215();
                                    let v500 =
                                        Dice_ui::method216(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v503 =
                                        {
                                            let clo_8 =
                                                Func0::new(move ||
                                                               Dice_ui::closure243((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_8 =
                                                               clo_8.clone();
                                                           move |arg_8: ()|
                                                               clo_8()
                                                       })
                                        };
                                    let v506 =
                                        {
                                            let clo_9 =
                                                Func0::new(move ||
                                                               Dice_ui::closure244((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_9 =
                                                               clo_9.clone();
                                                           move |arg_9: ()|
                                                               clo_9()
                                                       })
                                        };
                                    let v508 =
                                        {
                                            let clo_10 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_10 =
                                                               clo_10.clone();
                                                           move |arg_10: ()|
                                                               clo_10()
                                                       })
                                        };
                                    let v509: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v508(()) + \" \" + &v506(()) + \" \" + &v503(())");
                                    let v510: string =
                                        append((append((append(string(" "),
                                                               (v509))),
                                                       string(""))),
                                               string(""));
                                    let v512 =
                                        {
                                            let clo_11 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_11 =
                                                               clo_11.clone();
                                                           move |arg_11: ()|
                                                               clo_11()
                                                       })
                                        };
                                    let v514: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v515: leptos::prelude::Fragment =
                                        v499();
                                    let v517: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v515);
                                    let v519: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v514))),
                                                                               string(">move || { v517 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v521:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v517 }</dt> };
                                    let v523: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v521);
                                    let v525: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v512(())");
                                    let v526: leptos::prelude::Fragment =
                                        v500();
                                    let v528: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v526);
                                    let v530: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v525))),
                                                                               string(">move || { v528 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v532:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v512(())>move || { v528 }</dd> };
                                    let v534: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v532);
                                    let v541: string =
                                        string("vec![v523, v534]");
                                    let v542: Vec<leptos::prelude::AnyView> =
                                        vec![v523, v534];
                                    let v544: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v542);
                                    let v546: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v544);
                                    let v548: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v510))),
                                                                               string(">move || { v546 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v550:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v508(()) + " " + &v506(()) + " " + &v503(())>move || { v546 }</dl> };
                                    let v552: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v550);
                                    let v553 = Dice_ui::method217();
                                    let v554 =
                                        Dice_ui::method218(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v557 =
                                        {
                                            let clo_12 =
                                                Func0::new(move ||
                                                               Dice_ui::closure247((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_12 =
                                                               clo_12.clone();
                                                           move |arg_12: ()|
                                                               clo_12()
                                                       })
                                        };
                                    let v560 =
                                        {
                                            let clo_13 =
                                                Func0::new(move ||
                                                               Dice_ui::closure248((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_13 =
                                                               clo_13.clone();
                                                           move |arg_13: ()|
                                                               clo_13()
                                                       })
                                        };
                                    let v562 =
                                        {
                                            let clo_14 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_14 =
                                                               clo_14.clone();
                                                           move |arg_14: ()|
                                                               clo_14()
                                                       })
                                        };
                                    let v563: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v562(()) + \" \" + &v560(()) + \" \" + &v557(())");
                                    let v564: string =
                                        append((append((append(string(" "),
                                                               (v563))),
                                                       string(""))),
                                               string(""));
                                    let v566 =
                                        {
                                            let clo_15 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_15 =
                                                               clo_15.clone();
                                                           move |arg_15: ()|
                                                               clo_15()
                                                       })
                                        };
                                    let v568: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v569: leptos::prelude::Fragment =
                                        v553();
                                    let v571: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v569);
                                    let v573: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v568))),
                                                                               string(">move || { v571 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v575:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v571 }</dt> };
                                    let v577: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v575);
                                    let v579: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v566(())");
                                    let v580: leptos::prelude::Fragment =
                                        v554();
                                    let v582: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v580);
                                    let v584: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v579))),
                                                                               string(">move || { v582 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v586:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v566(())>move || { v582 }</dd> };
                                    let v588: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v586);
                                    let v595: string =
                                        string("vec![v577, v588]");
                                    let v596: Vec<leptos::prelude::AnyView> =
                                        vec![v577, v588];
                                    let v598: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v596);
                                    let v600: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v598);
                                    let v602: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v564))),
                                                                               string(">move || { v600 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v604:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v562(()) + " " + &v560(()) + " " + &v557(())>move || { v600 }</dl> };
                                    let v606: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v604);
                                    let v607 = Dice_ui::method219();
                                    let v608 =
                                        Dice_ui::method220(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v611 =
                                        {
                                            let clo_16 =
                                                Func0::new(move ||
                                                               Dice_ui::closure251((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_16 =
                                                               clo_16.clone();
                                                           move |arg_16: ()|
                                                               clo_16()
                                                       })
                                        };
                                    let v614 =
                                        {
                                            let clo_17 =
                                                Func0::new(move ||
                                                               Dice_ui::closure252((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_17 =
                                                               clo_17.clone();
                                                           move |arg_17: ()|
                                                               clo_17()
                                                       })
                                        };
                                    let v616 =
                                        {
                                            let clo_18 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_18 =
                                                               clo_18.clone();
                                                           move |arg_18: ()|
                                                               clo_18()
                                                       })
                                        };
                                    let v617: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v616(()) + \" \" + &v614(()) + \" \" + &v611(())");
                                    let v618: string =
                                        append((append((append(string(" "),
                                                               (v617))),
                                                       string(""))),
                                               string(""));
                                    let v620 =
                                        {
                                            let clo_19 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_19 =
                                                               clo_19.clone();
                                                           move |arg_19: ()|
                                                               clo_19()
                                                       })
                                        };
                                    let v622: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v623: leptos::prelude::Fragment =
                                        v607();
                                    let v625: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v623);
                                    let v627: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v622))),
                                                                               string(">move || { v625 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v629:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v625 }</dt> };
                                    let v631: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v629);
                                    let v633: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v620(())");
                                    let v634: leptos::prelude::Fragment =
                                        v608();
                                    let v636: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v634);
                                    let v638: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v633))),
                                                                               string(">move || { v636 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v640:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v620(())>move || { v636 }</dd> };
                                    let v642: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v640);
                                    let v649: string =
                                        string("vec![v631, v642]");
                                    let v650: Vec<leptos::prelude::AnyView> =
                                        vec![v631, v642];
                                    let v652: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v650);
                                    let v654: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v652);
                                    let v656: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v618))),
                                                                               string(">move || { v654 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v658:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v616(()) + " " + &v614(()) + " " + &v611(())>move || { v654 }</dl> };
                                    let v660: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v658);
                                    let v661 = Dice_ui::method221();
                                    let v662 =
                                        Dice_ui::method222(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v665 =
                                        {
                                            let clo_20 =
                                                Func0::new(move ||
                                                               Dice_ui::closure266((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_20 =
                                                               clo_20.clone();
                                                           move |arg_20: ()|
                                                               clo_20()
                                                       })
                                        };
                                    let v668 =
                                        {
                                            let clo_21 =
                                                Func0::new(move ||
                                                               Dice_ui::closure267((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_21 =
                                                               clo_21.clone();
                                                           move |arg_21: ()|
                                                               clo_21()
                                                       })
                                        };
                                    let v670 =
                                        {
                                            let clo_22 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_22 =
                                                               clo_22.clone();
                                                           move |arg_22: ()|
                                                               clo_22()
                                                       })
                                        };
                                    let v671: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v670(()) + \" \" + &v668(()) + \" \" + &v665(())");
                                    let v672: string =
                                        append((append((append(string(" "),
                                                               (v671))),
                                                       string(""))),
                                               string(""));
                                    let v675 =
                                        {
                                            let clo_23 =
                                                Func0::new(move ||
                                                               Dice_ui::closure268((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_23 =
                                                               clo_23.clone();
                                                           move |arg_23: ()|
                                                               clo_23()
                                                       })
                                        };
                                    let v677: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v678: leptos::prelude::Fragment =
                                        v661();
                                    let v680: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v678);
                                    let v682: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v677))),
                                                                               string(">move || { v680 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v684:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v680 }</dt> };
                                    let v686: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v684);
                                    let v688: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v675(())");
                                    let v689: leptos::prelude::Fragment =
                                        v662();
                                    let v691: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v689);
                                    let v693: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v688))),
                                                                               string(">move || { v691 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v695:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v675(())>move || { v691 }</dd> };
                                    let v697: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v695);
                                    let v704: string =
                                        string("vec![v686, v697]");
                                    let v705: Vec<leptos::prelude::AnyView> =
                                        vec![v686, v697];
                                    let v707: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v705);
                                    let v709: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v707);
                                    let v711: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v672))),
                                                                               string(">move || { v709 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v713:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v670(()) + " " + &v668(()) + " " + &v665(())>move || { v709 }</dl> };
                                    let v715: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v713);
                                    let v716 = Dice_ui::method227();
                                    let v717 =
                                        Dice_ui::method228(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v720 =
                                        {
                                            let clo_24 =
                                                Func0::new(move ||
                                                               Dice_ui::closure271((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_24 =
                                                               clo_24.clone();
                                                           move |arg_24: ()|
                                                               clo_24()
                                                       })
                                        };
                                    let v723 =
                                        {
                                            let clo_25 =
                                                Func0::new(move ||
                                                               Dice_ui::closure272((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_25 =
                                                               clo_25.clone();
                                                           move |arg_25: ()|
                                                               clo_25()
                                                       })
                                        };
                                    let v725 =
                                        {
                                            let clo_26 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_26 =
                                                               clo_26.clone();
                                                           move |arg_26: ()|
                                                               clo_26()
                                                       })
                                        };
                                    let v726: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v725(()) + \" \" + &v723(()) + \" \" + &v720(())");
                                    let v727: string =
                                        append((append((append(string(" "),
                                                               (v726))),
                                                       string(""))),
                                               string(""));
                                    let v729 =
                                        {
                                            let clo_27 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_27 =
                                                               clo_27.clone();
                                                           move |arg_27: ()|
                                                               clo_27()
                                                       })
                                        };
                                    let v731: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v732: leptos::prelude::Fragment =
                                        v716();
                                    let v734: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v732);
                                    let v736: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v731))),
                                                                               string(">move || { v734 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v738:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v734 }</dt> };
                                    let v740: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v738);
                                    let v742: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v729(())");
                                    let v743: leptos::prelude::Fragment =
                                        v717();
                                    let v745: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v743);
                                    let v747: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v742))),
                                                                               string(">move || { v745 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v749:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v729(())>move || { v745 }</dd> };
                                    let v751: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v749);
                                    let v758: string =
                                        string("vec![v740, v751]");
                                    let v759: Vec<leptos::prelude::AnyView> =
                                        vec![v740, v751];
                                    let v761: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v759);
                                    let v763: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v761);
                                    let v765: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v727))),
                                                                               string(">move || { v763 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v767:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v725(()) + " " + &v723(()) + " " + &v720(())>move || { v763 }</dl> };
                                    let v769: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v767);
                                    let v770 = Dice_ui::method229();
                                    let v771 =
                                        Dice_ui::method230(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v774 =
                                        {
                                            let clo_28 =
                                                Func0::new(move ||
                                                               Dice_ui::closure275((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_28 =
                                                               clo_28.clone();
                                                           move |arg_28: ()|
                                                               clo_28()
                                                       })
                                        };
                                    let v777 =
                                        {
                                            let clo_29 =
                                                Func0::new(move ||
                                                               Dice_ui::closure276((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_29 =
                                                               clo_29.clone();
                                                           move |arg_29: ()|
                                                               clo_29()
                                                       })
                                        };
                                    let v779 =
                                        {
                                            let clo_30 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_30 =
                                                               clo_30.clone();
                                                           move |arg_30: ()|
                                                               clo_30()
                                                       })
                                        };
                                    let v780: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v779(()) + \" \" + &v777(()) + \" \" + &v774(())");
                                    let v781: string =
                                        append((append((append(string(" "),
                                                               (v780))),
                                                       string(""))),
                                               string(""));
                                    let v783 =
                                        {
                                            let clo_31 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_31 =
                                                               clo_31.clone();
                                                           move |arg_31: ()|
                                                               clo_31()
                                                       })
                                        };
                                    let v785: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v786: leptos::prelude::Fragment =
                                        v770();
                                    let v788: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v786);
                                    let v790: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v785))),
                                                                               string(">move || { v788 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v792:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v788 }</dt> };
                                    let v794: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v792);
                                    let v796: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v783(())");
                                    let v797: leptos::prelude::Fragment =
                                        v771();
                                    let v799: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v797);
                                    let v801: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v796))),
                                                                               string(">move || { v799 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v803:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v783(())>move || { v799 }</dd> };
                                    let v805: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v803);
                                    let v812: string =
                                        string("vec![v794, v805]");
                                    let v813: Vec<leptos::prelude::AnyView> =
                                        vec![v794, v805];
                                    let v815: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v813);
                                    let v817: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v815);
                                    let v819: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v781))),
                                                                               string(">move || { v817 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v821:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v779(()) + " " + &v777(()) + " " + &v774(())>move || { v817 }</dl> };
                                    let v823: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v821);
                                    let v824 = Dice_ui::method231();
                                    let v825 =
                                        Dice_ui::method232(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v828 =
                                        {
                                            let clo_32 =
                                                Func0::new(move ||
                                                               Dice_ui::closure279((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_32 =
                                                               clo_32.clone();
                                                           move |arg_32: ()|
                                                               clo_32()
                                                       })
                                        };
                                    let v831 =
                                        {
                                            let clo_33 =
                                                Func0::new(move ||
                                                               Dice_ui::closure280((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_33 =
                                                               clo_33.clone();
                                                           move |arg_33: ()|
                                                               clo_33()
                                                       })
                                        };
                                    let v833 =
                                        {
                                            let clo_34 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_34 =
                                                               clo_34.clone();
                                                           move |arg_34: ()|
                                                               clo_34()
                                                       })
                                        };
                                    let v834: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v833(()) + \" \" + &v831(()) + \" \" + &v828(())");
                                    let v835: string =
                                        append((append((append(string(" "),
                                                               (v834))),
                                                       string(""))),
                                               string(""));
                                    let v837 =
                                        {
                                            let clo_35 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_35 =
                                                               clo_35.clone();
                                                           move |arg_35: ()|
                                                               clo_35()
                                                       })
                                        };
                                    let v839: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v840: leptos::prelude::Fragment =
                                        v824();
                                    let v842: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v840);
                                    let v844: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v839))),
                                                                               string(">move || { v842 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v846:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v842 }</dt> };
                                    let v848: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v846);
                                    let v850: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v837(())");
                                    let v851: leptos::prelude::Fragment =
                                        v825();
                                    let v853: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v851);
                                    let v855: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v850))),
                                                                               string(">move || { v853 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v857:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v837(())>move || { v853 }</dd> };
                                    let v859: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v857);
                                    let v866: string =
                                        string("vec![v848, v859]");
                                    let v867: Vec<leptos::prelude::AnyView> =
                                        vec![v848, v859];
                                    let v869: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v867);
                                    let v871: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v869);
                                    let v873: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v835))),
                                                                               string(">move || { v871 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v875:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v833(()) + " " + &v831(()) + " " + &v828(())>move || { v871 }</dl> };
                                    let v877: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v875);
                                    let v878 = Dice_ui::method233();
                                    let v879 =
                                        Dice_ui::method234(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v882 =
                                        {
                                            let clo_36 =
                                                Func0::new(move ||
                                                               Dice_ui::closure283((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_36 =
                                                               clo_36.clone();
                                                           move |arg_36: ()|
                                                               clo_36()
                                                       })
                                        };
                                    let v885 =
                                        {
                                            let clo_37 =
                                                Func0::new(move ||
                                                               Dice_ui::closure284((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_37 =
                                                               clo_37.clone();
                                                           move |arg_37: ()|
                                                               clo_37()
                                                       })
                                        };
                                    let v887 =
                                        {
                                            let clo_38 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_38 =
                                                               clo_38.clone();
                                                           move |arg_38: ()|
                                                               clo_38()
                                                       })
                                        };
                                    let v888: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v887(()) + \" \" + &v885(()) + \" \" + &v882(())");
                                    let v889: string =
                                        append((append((append(string(" "),
                                                               (v888))),
                                                       string(""))),
                                               string(""));
                                    let v891 =
                                        {
                                            let clo_39 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_39 =
                                                               clo_39.clone();
                                                           move |arg_39: ()|
                                                               clo_39()
                                                       })
                                        };
                                    let v893: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v894: leptos::prelude::Fragment =
                                        v878();
                                    let v896: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v894);
                                    let v898: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v893))),
                                                                               string(">move || { v896 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v900:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v896 }</dt> };
                                    let v902: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v900);
                                    let v904: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v891(())");
                                    let v905: leptos::prelude::Fragment =
                                        v879();
                                    let v907: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v905);
                                    let v909: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v904))),
                                                                               string(">move || { v907 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v911:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v891(())>move || { v907 }</dd> };
                                    let v913: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v911);
                                    let v920: string =
                                        string("vec![v902, v913]");
                                    let v921: Vec<leptos::prelude::AnyView> =
                                        vec![v902, v913];
                                    let v923: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v921);
                                    let v925: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v923);
                                    let v927: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v889))),
                                                                               string(">move || { v925 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v929:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v887(()) + " " + &v885(()) + " " + &v882(())>move || { v925 }</dl> };
                                    let v931: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v929);
                                    let v932 = Dice_ui::method235();
                                    let v933 =
                                        Dice_ui::method236(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v936 =
                                        {
                                            let clo_40 =
                                                Func0::new(move ||
                                                               Dice_ui::closure287((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_40 =
                                                               clo_40.clone();
                                                           move |arg_40: ()|
                                                               clo_40()
                                                       })
                                        };
                                    let v939 =
                                        {
                                            let clo_41 =
                                                Func0::new(move ||
                                                               Dice_ui::closure288((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_41 =
                                                               clo_41.clone();
                                                           move |arg_41: ()|
                                                               clo_41()
                                                       })
                                        };
                                    let v941 =
                                        {
                                            let clo_42 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_42 =
                                                               clo_42.clone();
                                                           move |arg_42: ()|
                                                               clo_42()
                                                       })
                                        };
                                    let v942: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v941(()) + \" \" + &v939(()) + \" \" + &v936(())");
                                    let v943: string =
                                        append((append((append(string(" "),
                                                               (v942))),
                                                       string(""))),
                                               string(""));
                                    let v945 =
                                        {
                                            let clo_43 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_43 =
                                                               clo_43.clone();
                                                           move |arg_43: ()|
                                                               clo_43()
                                                       })
                                        };
                                    let v947: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v948: leptos::prelude::Fragment =
                                        v932();
                                    let v950: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v948);
                                    let v952: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v947))),
                                                                               string(">move || { v950 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v954:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v950 }</dt> };
                                    let v956: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v954);
                                    let v958: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v945(())");
                                    let v959: leptos::prelude::Fragment =
                                        v933();
                                    let v961: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v959);
                                    let v963: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v958))),
                                                                               string(">move || { v961 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v965:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v945(())>move || { v961 }</dd> };
                                    let v967: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v965);
                                    let v974: string =
                                        string("vec![v956, v967]");
                                    let v975: Vec<leptos::prelude::AnyView> =
                                        vec![v956, v967];
                                    let v977: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v975);
                                    let v979: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v977);
                                    let v981: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v943))),
                                                                               string(">move || { v979 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v983:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v941(()) + " " + &v939(()) + " " + &v936(())>move || { v979 }</dl> };
                                    let v985: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v983);
                                    let v986 = Dice_ui::method237();
                                    let v987 =
                                        Dice_ui::method238(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v990 =
                                        {
                                            let clo_44 =
                                                Func0::new(move ||
                                                               Dice_ui::closure291((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_44 =
                                                               clo_44.clone();
                                                           move |arg_44: ()|
                                                               clo_44()
                                                       })
                                        };
                                    let v993 =
                                        {
                                            let clo_45 =
                                                Func0::new(move ||
                                                               Dice_ui::closure292((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_45 =
                                                               clo_45.clone();
                                                           move |arg_45: ()|
                                                               clo_45()
                                                       })
                                        };
                                    let v995 =
                                        {
                                            let clo_46 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_46 =
                                                               clo_46.clone();
                                                           move |arg_46: ()|
                                                               clo_46()
                                                       })
                                        };
                                    let v996: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v995(()) + \" \" + &v993(()) + \" \" + &v990(())");
                                    let v997: string =
                                        append((append((append(string(" "),
                                                               (v996))),
                                                       string(""))),
                                               string(""));
                                    let v999 =
                                        {
                                            let clo_47 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_47 =
                                                               clo_47.clone();
                                                           move |arg_47: ()|
                                                               clo_47()
                                                       })
                                        };
                                    let v1001: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1002: leptos::prelude::Fragment =
                                        v986();
                                    let v1004: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1002);
                                    let v1006: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1001))),
                                                                               string(">move || { v1004 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1008:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1004 }</dt> };
                                    let v1010: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1008);
                                    let v1012: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v999(())");
                                    let v1013: leptos::prelude::Fragment =
                                        v987();
                                    let v1015: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1013);
                                    let v1017: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1012))),
                                                                               string(">move || { v1015 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1019:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v999(())>move || { v1015 }</dd> };
                                    let v1021: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1019);
                                    let v1028: string =
                                        string("vec![v1010, v1021]");
                                    let v1029: Vec<leptos::prelude::AnyView> =
                                        vec![v1010, v1021];
                                    let v1031: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1029);
                                    let v1033: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1031);
                                    let v1035: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v997))),
                                                                               string(">move || { v1033 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1037:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v995(()) + " " + &v993(()) + " " + &v990(())>move || { v1033 }</dl> };
                                    let v1039: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1037);
                                    let v1040 = Dice_ui::method239();
                                    let v1041 =
                                        Dice_ui::method240(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v1044 =
                                        {
                                            let clo_48 =
                                                Func0::new(move ||
                                                               Dice_ui::closure295((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_48 =
                                                               clo_48.clone();
                                                           move |arg_48: ()|
                                                               clo_48()
                                                       })
                                        };
                                    let v1047 =
                                        {
                                            let clo_49 =
                                                Func0::new(move ||
                                                               Dice_ui::closure296((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_49 =
                                                               clo_49.clone();
                                                           move |arg_49: ()|
                                                               clo_49()
                                                       })
                                        };
                                    let v1049 =
                                        {
                                            let clo_50 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_50 =
                                                               clo_50.clone();
                                                           move |arg_50: ()|
                                                               clo_50()
                                                       })
                                        };
                                    let v1050: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1049(()) + \" \" + &v1047(()) + \" \" + &v1044(())");
                                    let v1051: string =
                                        append((append((append(string(" "),
                                                               (v1050))),
                                                       string(""))),
                                               string(""));
                                    let v1053 =
                                        {
                                            let clo_51 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_51 =
                                                               clo_51.clone();
                                                           move |arg_51: ()|
                                                               clo_51()
                                                       })
                                        };
                                    let v1055: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1056: leptos::prelude::Fragment =
                                        v1040();
                                    let v1058: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1056);
                                    let v1060: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1055))),
                                                                               string(">move || { v1058 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1062:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1058 }</dt> };
                                    let v1064: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1062);
                                    let v1066: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1053(())");
                                    let v1067: leptos::prelude::Fragment =
                                        v1041();
                                    let v1069: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1067);
                                    let v1071: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1066))),
                                                                               string(">move || { v1069 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1073:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1053(())>move || { v1069 }</dd> };
                                    let v1075: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1073);
                                    let v1082: string =
                                        string("vec![v1064, v1075]");
                                    let v1083: Vec<leptos::prelude::AnyView> =
                                        vec![v1064, v1075];
                                    let v1085: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1083);
                                    let v1087: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1085);
                                    let v1089: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1051))),
                                                                               string(">move || { v1087 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1091:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1049(()) + " " + &v1047(()) + " " + &v1044(())>move || { v1087 }</dl> };
                                    let v1093: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1091);
                                    let v1154: leptos::prelude::AnyView =
                                        if (get_Count(v372.clone()) as u64) ==
                                               0_u64 {
                                            let v1096: string =
                                                string("vec![]");
                                            let v1097:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![];
                                            leptos::prelude::IntoAny::into_any(v1097)
                                        } else {
                                            let v1100 = Dice_ui::method241();
                                            let v1101 =
                                                Dice_ui::method242(v361, v362,
                                                                   v363, v364,
                                                                   v365, v366,
                                                                   v367, v368,
                                                                   v369, v370,
                                                                   v371,
                                                                   v372);
                                            let v1104 =
                                                {
                                                    let clo_52 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure300((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_52
                                                                       =
                                                                       clo_52.clone();
                                                                   move
                                                                       |arg_52:
                                                                            ()|
                                                                       clo_52()
                                                               })
                                                };
                                            let v1107 =
                                                {
                                                    let clo_53 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure301((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_53
                                                                       =
                                                                       clo_53.clone();
                                                                   move
                                                                       |arg_53:
                                                                            ()|
                                                                       clo_53()
                                                               })
                                                };
                                            let v1109 =
                                                {
                                                    let clo_54 =
                                                        Func0::from(v449);
                                                    Func1::new({
                                                                   let clo_54
                                                                       =
                                                                       clo_54.clone();
                                                                   move
                                                                       |arg_54:
                                                                            ()|
                                                                       clo_54()
                                                               })
                                                };
                                            let v1110: string =
                                                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1109(()) + \" \" + &v1107(()) + \" \" + &v1104(())");
                                            let v1111: string =
                                                append((append((append(string(" "),
                                                                       (v1110))),
                                                               string(""))),
                                                       string(""));
                                            let v1113 =
                                                {
                                                    let clo_55 =
                                                        Func0::from(v454);
                                                    Func1::new({
                                                                   let clo_55
                                                                       =
                                                                       clo_55.clone();
                                                                   move
                                                                       |arg_55:
                                                                            ()|
                                                                       clo_55()
                                                               })
                                                };
                                            let v1115: string =
                                                string(" class=\"[font-size:12px] text-gray-400\"");
                                            let v1116:
                                                    leptos::prelude::Fragment =
                                                v1100();
                                            let v1118:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1116);
                                            let v1120: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dt "),
                                                                                               (v1115))),
                                                                                       string(">move || { v1118 }</"))),
                                                                               string("dt"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1122:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1118 }</dt> };
                                            let v1124:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1122);
                                            let v1126: string =
                                                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1113(())");
                                            let v1127:
                                                    leptos::prelude::Fragment =
                                                v1101();
                                            let v1129:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1127);
                                            let v1131: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dd "),
                                                                                               (v1126))),
                                                                                       string(">move || { v1129 }</"))),
                                                                               string("dd"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1133:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1113(())>move || { v1129 }</dd> };
                                            let v1135:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1133);
                                            let v1142: string =
                                                string("vec![v1124, v1135]");
                                            let v1143:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1124, v1135];
                                            let v1145:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v1143);
                                            let v1147:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1145);
                                            let v1149: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dl "),
                                                                                               (v1111))),
                                                                                       string(">move || { v1147 }</"))),
                                                                               string("dl"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1151:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1109(()) + " " + &v1107(()) + " " + &v1104(())>move || { v1147 }</dl> };
                                            leptos::prelude::IntoAny::into_any(v1151)
                                        };
                                    let v1194: string =
                                        string("vec![v498, v552, v606, v660, v715, v769, v823, v877, v931, v985, v1039, v1093, v1154]");
                                    let v1195: Vec<leptos::prelude::AnyView> =
                                        vec![v498, v552, v606, v660, v715, v769, v823, v877, v931, v985, v1039, v1093, v1154];
                                    let v1197: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1195);
                                    let v1199: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1197);
                                    let v1202: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v439))),
                                                                               string(">move || { v1199 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1204:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">move || { v1199 }</div> };
                                    let v1206: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1204);
                                    let v1213: string =
                                        string("vec![v437, v1206]");
                                    let v1214: Vec<leptos::prelude::AnyView> =
                                        vec![v437, v1206];
                                    let v1216: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1214);
                                    let v1218: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1216);
                                    let v1220: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v385))),
                                                                               string(">move || { v1218 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1222:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="flex flex-1 flex-col overflow-x-auto">move || { v1218 }</div> };
                                    let v1224: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1222);
                                    let v1226: bool =
                                        true; v1224 }).collect::<Vec<_>>();
                                let v1228: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v1230: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1228);
                                let v1234: string = string("vec![v1230]");
                                let v1235: Vec<leptos::prelude::AnyView> = vec![v1230];
                                let v1237: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1235);
                                let v1239: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1237);
                                let v1241: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v352))),
                                                    string(">move || { v1239 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1243: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">move || { v1239 }</div> };
                                leptos::prelude::IntoAny::into_any(v1243)
                            } else {
                                let v1247: Vec<(string, usize, LrcPtr<Dice_ui::Heap12>)> =
                                    v339.clone().to_vec();
                                let v1249: bool = true;
                                let _vec_map : Vec<_> = v1247.into_iter().map(|x| { //;
                                    let patternInput_1:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap12>) = x;
                                    let v1253: LrcPtr<Dice_ui::Heap12> =
                                        patternInput_1.2.clone();
                                    let v1256: bool =
                                        true; leptos::logging::log!("{}", string("transaction.tr_render (1)"));
                                    let v1259: string =
                                        string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                    let v1261: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1266: &str =
                                        &*patternInput_1.0.clone();
                                    let v1290: std::string::String =
                                        String::from(v1266);
                                    let v1311: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1290));
                                    let v1315: string = string("vec![v1311]");
                                    let v1316: Vec<leptos::prelude::AnyView> =
                                        vec![v1311];
                                    let v1318: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1316);
                                    let v1320: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1318);
                                    let v1323: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1261))),
                                                                               string(">move || { v1320 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1325:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1320 }</td> };
                                    let v1327: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1325);
                                    let v1329: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1338: i64 =
                                        (Dice_ui::method173(toInt64(fable_library_rust::String_::fromString(v1253.l5.clone()))))
                                            / 1000_i64;
                                    let v1340:
                                            Option<chrono::DateTime<chrono::Utc>> =
                                        chrono::DateTime::from_timestamp_micros(v1338);
                                    let v1354: Dice_ui::US68 =
                                        defaultValue(Dice_ui::US68::US68_1,
                                                     map(Dice_ui::method174(),
                                                         v1340));
                                    let v1373: Dice_ui::US31 =
                                        match &v1354 {
                                            Dice_ui::US68::US68_0(v1354_0_0)
                                            => {
                                                let v1360:
                                                        chrono::NaiveDateTime =
                                                    match &v1354 {
                                                        Dice_ui::US68::US68_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone().naive_utc();
                                                let v1362:
                                                        chrono::DateTime<chrono::Local> =
                                                    chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v1360);
                                                let v1364: string =
                                                    string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                                let v1365: &str =
                                                    r#"%Y-%m-%d %H:%M:%S"#;
                                                let v1367:
                                                        std::string::String =
                                                    v1362.format(v1365).to_string();
                                                Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v1367))
                                            }
                                            _ => Dice_ui::US31::US31_1,
                                        };
                                    let v1379: Dice_ui::US69 =
                                        match &v1373 {
                                            Dice_ui::US31::US31_0(v1373_0_0)
                                            =>
                                            Dice_ui::US69::US69_0(match &v1373
                                                                      {
                                                                      Dice_ui::US31::US31_0(x)
                                                                      =>
                                                                      x.clone(),
                                                                      _ =>
                                                                      unreachable!(),
                                                                  }.clone()),
                                            _ =>
                                            Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                        };
                                    let v1384: string =
                                        match &v1379 {
                                            Dice_ui::US69::US69_0(v1379_0_0)
                                            => v1379_0_0.clone(),
                                            Dice_ui::US69::US69_1(v1379_1_0)
                                            =>
                                            append((append(string("sm\'.to_string result / Error: "),
                                                           (v1379_1_0.clone()))),
                                                   string("")),
                                        };
                                    let v1389: &str = &*v1384;
                                    let v1413: std::string::String =
                                        String::from(v1389);
                                    let v1434: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1413));
                                    let v1438: string = string("vec![v1434]");
                                    let v1439: Vec<leptos::prelude::AnyView> =
                                        vec![v1434];
                                    let v1441: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1439);
                                    let v1443: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1441);
                                    let v1445: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1329))),
                                                                               string(">move || { v1443 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1447:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1443 }</td> };
                                    let v1449: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1447);
                                    let v1451: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1454: string =
                                        fable_library_rust::String_::fromString(v1253.l1.clone());
                                    let v1459: &str = &*v1454;
                                    let v1483: std::string::String =
                                        String::from(v1459);
                                    let v1504: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1483));
                                    let v1508: string = string("vec![v1504]");
                                    let v1509: Vec<leptos::prelude::AnyView> =
                                        vec![v1504];
                                    let v1511: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1509);
                                    let v1513: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1511);
                                    let v1515: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1451))),
                                                                               string(">move || { v1513 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1517:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1513 }</td> };
                                    let v1519: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1517);
                                    let v1521: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1524: string =
                                        fable_library_rust::String_::fromString(v1253.l2.clone());
                                    let v1529: &str = &*v1524;
                                    let v1553: std::string::String =
                                        String::from(v1529);
                                    let v1574: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1553));
                                    let v1578: string = string("vec![v1574]");
                                    let v1579: Vec<leptos::prelude::AnyView> =
                                        vec![v1574];
                                    let v1581: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1579);
                                    let v1583: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1581);
                                    let v1585: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1521))),
                                                                               string(">move || { v1583 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1587:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1583 }</td> };
                                    let v1589: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1587);
                                    let v1591: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1594:
                                            Vec<(std::string::String,
                                                 Option<std::string::String>)> =
                                        v1253.l7.clone().to_vec();
                                    let v1596: bool =
                                        true; let _vec_map : Vec<_> = v1594.into_iter().map(|x| { //;
                                    let patternInput_2:
                                            (std::string::String,
                                             Option<std::string::String>) = x;
                                    let v1600 =
                                        Dice_ui::method223(patternInput_2.0.clone());
                                    let v1601 =
                                        Dice_ui::method224(patternInput_2.1.clone());
                                    let v1604 =
                                        {
                                            let clo_56 =
                                                Func0::new(move ||
                                                               Dice_ui::closure262((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_56 =
                                                               clo_56.clone();
                                                           move |arg_56: ()|
                                                               clo_56()
                                                       })
                                        };
                                    let v1607 =
                                        {
                                            let clo_57 =
                                                Func0::new(move ||
                                                               Dice_ui::closure263((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_57 =
                                                               clo_57.clone();
                                                           move |arg_57: ()|
                                                               clo_57()
                                                       })
                                        };
                                    let v1610 =
                                        {
                                            let clo_58 =
                                                Func0::new(move ||
                                                               Dice_ui::closure264((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_58 =
                                                               clo_58.clone();
                                                           move |arg_58: ()|
                                                               clo_58()
                                                       })
                                        };
                                    let v1611: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1610(()) + \" \" + &v1607(()) + \" \" + &v1604(())");
                                    let v1612: string =
                                        append((append((append(string(" "),
                                                               (v1611))),
                                                       string(""))),
                                               string(""));
                                    let v1615 =
                                        {
                                            let clo_59 =
                                                Func0::new(move ||
                                                               Dice_ui::closure265((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_59 =
                                                               clo_59.clone();
                                                           move |arg_59: ()|
                                                               clo_59()
                                                       })
                                        };
                                    let v1617: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1618: leptos::prelude::Fragment =
                                        v1600();
                                    let v1620: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1618);
                                    let v1623: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1617))),
                                                                               string(">move || { v1620 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1625:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1620 }</dt> };
                                    let v1627: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1625);
                                    let v1629: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1615(())");
                                    let v1630: leptos::prelude::Fragment =
                                        v1601();
                                    let v1632: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1630);
                                    let v1635: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1629))),
                                                                               string(">move || { v1632 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1637:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1615(())>move || { v1632 }</dd> };
                                    let v1639: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1637);
                                    let v1647: string =
                                        string("vec![v1627, v1639]");
                                    let v1648: Vec<leptos::prelude::AnyView> =
                                        vec![v1627, v1639];
                                    let v1650: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1648);
                                    let v1652: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1650);
                                    let v1655: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1612))),
                                                                               string(">move || { v1652 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1657:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1610(()) + " " + &v1607(()) + " " + &v1604(())>move || { v1652 }</dl> };
                                    let v1659: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1657);
                                    let v1661: bool =
                                        true; v1659 }).collect::<Vec<_>>();
                                    let v1663: Vec<leptos::prelude::AnyView> =
                                        _vec_map;
                                    let v1665: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1663);
                                    let v1669: string = string("vec![v1665]");
                                    let v1670: Vec<leptos::prelude::AnyView> =
                                        vec![v1665];
                                    let v1672: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1670);
                                    let v1674: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1672);
                                    let v1676: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1591))),
                                                                               string(">move || { v1674 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1678:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1674 }</td> };
                                    let v1680: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1678);
                                    let v1682: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1685: string = toString(v1253.l8);
                                    let v1692: &str = &*v1685;
                                    let v1716: std::string::String =
                                        String::from(v1692);
                                    let v1737: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1716));
                                    let v1741: string = string("vec![v1737]");
                                    let v1742: Vec<leptos::prelude::AnyView> =
                                        vec![v1737];
                                    let v1744: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1742);
                                    let v1746: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1744);
                                    let v1748: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1682))),
                                                                               string(">move || { v1746 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1750:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1746 }</td> };
                                    let v1752: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1750);
                                    let v1754: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1757: string = toString(v1253.l10);
                                    let v1764: &str = &*v1757;
                                    let v1788: std::string::String =
                                        String::from(v1764);
                                    let v1809: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1788));
                                    let v1813: string = string("vec![v1809]");
                                    let v1814: Vec<leptos::prelude::AnyView> =
                                        vec![v1809];
                                    let v1816: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1814);
                                    let v1818: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1816);
                                    let v1820: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1754))),
                                                                               string(">move || { v1818 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1822:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1818 }</td> };
                                    let v1824: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1822);
                                    let v1826: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1829: string = toString(v1253.l6);
                                    let v1836: &str = &*v1829;
                                    let v1860: std::string::String =
                                        String::from(v1836);
                                    let v1881: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1860));
                                    let v1885: string = string("vec![v1881]");
                                    let v1886: Vec<leptos::prelude::AnyView> =
                                        vec![v1881];
                                    let v1888: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1886);
                                    let v1890: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1888);
                                    let v1892: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1826))),
                                                                               string(">move || { v1890 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1894:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1890 }</td> };
                                    let v1896: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1894);
                                    let v1898: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
                                    let v2071: leptos::prelude::Fragment =
                                        if (get_Count(v1253.l11.clone()) as
                                                u64) == 0_u64 {
                                            let v1906: &str = &*string("");
                                            let v1930: std::string::String =
                                                String::from(v1906);
                                            let v1951:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1930));
                                            let v1955: string =
                                                string("vec![v1951]");
                                            let v1956:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1951];
                                            leptos::prelude::Fragment::new(v1956)
                                        } else {
                                            let v1961:
                                                    Vec<std::string::String> =
                                                v1253.l11.clone().to_vec();
                                            let v1964: bool =
                                                true; let _func1_from_v1962 = Func1::from(move |value| { //;
                                            let v1966: std::string::String =
                                                ();
                                            let v1969:
                                                    LrcPtr<Dice_ui::Heap9> =
                                                LrcPtr::new(Dice_ui::Heap9{l0:
                                                                               fable_library_rust::String_::fromString(v1966),});
                                            let v1971: bool = true; v1969 /*;
                                            let v1973: bool = */ }); //;
                                            let v1975:
                                                    Func1<std::string::String, LrcPtr<Dice_ui::Heap9>> =
                                                _func1_from_v1962;
                                            let v1977: Vec<string> =
                                                v1961.into_iter().map(|x| v1975(x.clone())).collect::<Vec<_>>();
                                            let v1980:
                                                    LrcPtr<dyn IEnumerable_1<string>> =
                                                ofArray(fable_library_rust::NativeArray_::array_from(v1977.clone()));
                                            let v1992: string =
                                                replace(join(Dice_ui::method243(),
                                                             toArray(v1980)),
                                                        string("\\n"),
                                                        string("\n"));
                                            let v1995 =
                                                {
                                                    let clo_60 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure302((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_60
                                                                       =
                                                                       clo_60.clone();
                                                                   move
                                                                       |arg_60:
                                                                            ()|
                                                                       clo_60()
                                                               })
                                                };
                                            let v1996: string =
                                                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v1995(())");
                                            let v1997: string =
                                                append((append((append(string(" "),
                                                                       (v1996))),
                                                               string(""))),
                                                       string(""));
                                            let v2002: &str = &*v1992;
                                            let v2026: std::string::String =
                                                String::from(v2002);
                                            let v2047:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2026));
                                            let v2051: string =
                                                string("vec![v2047]");
                                            let v2052:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2047];
                                            let v2054:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v2052);
                                            let v2056:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v2054);
                                            let v2059: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<pre "),
                                                                                               (v1997))),
                                                                                       string(">move || { v2056 }</"))),
                                                                               string("pre"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v2061:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> =
                                                leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v1995(())>move || { v2056 }</pre> };
                                            let v2063:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v2061);
                                            let v2067: string =
                                                string("vec![v2063]");
                                            let v2068:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2063];
                                            leptos::prelude::Fragment::new(v2068)
                                        };
                                    let v2073: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2071);
                                    let v2075: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1898))),
                                                                               string(">move || { v2073 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2077:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">move || { v2073 }</td> };
                                    let v2079: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2077);
                                    let v2081: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2084: string = ofBoolean(v1253.l9);
                                    let v2091: &str = &*v2084;
                                    let v2115: std::string::String =
                                        String::from(v2091);
                                    let v2136: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2115));
                                    let v2140: string = string("vec![v2136]");
                                    let v2141: Vec<leptos::prelude::AnyView> =
                                        vec![v2136];
                                    let v2143: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2141);
                                    let v2145: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2143);
                                    let v2147: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2081))),
                                                                               string(">move || { v2145 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2149:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2145 }</td> };
                                    let v2151: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2149);
                                    let v2153: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2156: string =
                                        fable_library_rust::String_::fromString(v1253.l3.clone());
                                    let v2161: &str = &*v2156;
                                    let v2185: std::string::String =
                                        String::from(v2161);
                                    let v2206: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2185));
                                    let v2210: string = string("vec![v2206]");
                                    let v2211: Vec<leptos::prelude::AnyView> =
                                        vec![v2206];
                                    let v2213: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2211);
                                    let v2215: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2213);
                                    let v2217: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2153))),
                                                                               string(">move || { v2215 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2219:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2215 }</td> };
                                    let v2221: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2219);
                                    let v2223: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2226: string =
                                        fable_library_rust::String_::fromString(v1253.l4.clone());
                                    let v2231: &str = &*v2226;
                                    let v2255: std::string::String =
                                        String::from(v2231);
                                    let v2276: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2255));
                                    let v2280: string = string("vec![v2276]");
                                    let v2281: Vec<leptos::prelude::AnyView> =
                                        vec![v2276];
                                    let v2283: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2281);
                                    let v2285: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2283);
                                    let v2287: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2223))),
                                                                               string(">move || { v2285 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2289:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2285 }</td> };
                                    let v2291: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2289);
                                    let v2293: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2296: string =
                                        fable_library_rust::String_::fromString(v1253.l0.clone());
                                    let v2301: &str = &*v2296;
                                    let v2325: std::string::String =
                                        String::from(v2301);
                                    let v2346: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2325));
                                    let v2350: string = string("vec![v2346]");
                                    let v2351: Vec<leptos::prelude::AnyView> =
                                        vec![v2346];
                                    let v2353: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2351);
                                    let v2355: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2353);
                                    let v2357: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2293))),
                                                                               string(">move || { v2355 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2359:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2355 }</td> };
                                    let v2361: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2359);
                                    let v2401: string =
                                        string("vec![v1327, v1449, v1519, v1589, v1680, v1752, v1824, v1896, v2079, v2151, v2221, v2291, v2361]");
                                    let v2402: Vec<leptos::prelude::AnyView> =
                                        vec![v1327, v1449, v1519, v1589, v1680, v1752, v1824, v1896, v2079, v2151, v2221, v2291, v2361];
                                    let v2404: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2402);
                                    let v2406: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2404);
                                    let v2409: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<tr "),
                                                                                       (v1259))),
                                                                               string(">move || { v2406 }</"))),
                                                                       string("tr"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2411:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                        leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v2406 }</tr> };
                                    let v2413: bool =
                                        true; v2411 }).collect::<Vec<_>>();
                                let v2415: Vec<
                                    leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                    >,
                                > = _vec_map;
                                let v2417: bool = true;
                                let _vec_map: Vec<_> = v2415
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v2419: leptos::prelude::View<
                                            leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                        > = x;
                                        let v2421: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(v2419);
                                        let v2423: bool = true;
                                        v2421
                                    })
                                    .collect::<Vec<_>>();
                                let v2425: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v2427: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2425);
                                let v2431: string = string("vec![v2427]");
                                let v2432: Vec<leptos::prelude::AnyView> = vec![v2427];
                                let v2434: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2432);
                                let v2437: bool = true;
                                leptos::logging::log!(
                                    "{}",
                                    string("transaction.tr_head_render (1)")
                                );
                                let v2439: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2445: &str = &*string("Account");
                                let v2469: std::string::String = String::from(v2445);
                                let v2490: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2469),
                                    );
                                let v2494: string = string("vec![v2490]");
                                let v2495: Vec<leptos::prelude::AnyView> = vec![v2490];
                                let v2497: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2495);
                                let v2499: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2497);
                                let v2502: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2439))),
                                                    string(">move || { v2499 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2504: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2499 }</th> };
                                let v2506: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2504);
                                let v2508: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2514: &str = &*string("Block Timestamp");
                                let v2538: std::string::String = String::from(v2514);
                                let v2559: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2538),
                                    );
                                let v2563: string = string("vec![v2559]");
                                let v2564: Vec<leptos::prelude::AnyView> = vec![v2559];
                                let v2566: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2564);
                                let v2568: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2566);
                                let v2570: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2508))),
                                                    string(">move || { v2568 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2572: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2568 }</th> };
                                let v2574: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2572);
                                let v2576: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2582: &str = &*string("Predecessor");
                                let v2606: std::string::String = String::from(v2582);
                                let v2627: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2606),
                                    );
                                let v2631: string = string("vec![v2627]");
                                let v2632: Vec<leptos::prelude::AnyView> = vec![v2627];
                                let v2634: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2632);
                                let v2636: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2634);
                                let v2638: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2576))),
                                                    string(">move || { v2636 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2640: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2636 }</th> };
                                let v2642: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2640);
                                let v2644: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2650: &str = &*string("Receiver");
                                let v2674: std::string::String = String::from(v2650);
                                let v2695: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2674),
                                    );
                                let v2699: string = string("vec![v2695]");
                                let v2700: Vec<leptos::prelude::AnyView> = vec![v2695];
                                let v2702: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2700);
                                let v2704: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2702);
                                let v2706: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2644))),
                                                    string(">move || { v2704 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2708: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2704 }</th> };
                                let v2710: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2708);
                                let v2712: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2718: &str = &*string("Action");
                                let v2742: std::string::String = String::from(v2718);
                                let v2763: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2742),
                                    );
                                let v2767: string = string("vec![v2763]");
                                let v2768: Vec<leptos::prelude::AnyView> = vec![v2763];
                                let v2770: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2768);
                                let v2772: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2770);
                                let v2774: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2712))),
                                                    string(">move || { v2772 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2776: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2772 }</th> };
                                let v2778: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2776);
                                let v2780: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2786: &str = &*string("Deposit");
                                let v2810: std::string::String = String::from(v2786);
                                let v2831: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2810),
                                    );
                                let v2835: string = string("vec![v2831]");
                                let v2836: Vec<leptos::prelude::AnyView> = vec![v2831];
                                let v2838: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2836);
                                let v2840: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2838);
                                let v2842: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2780))),
                                                    string(">move || { v2840 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2844: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2840 }</th> };
                                let v2846: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2844);
                                let v2848: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2854: &str = &*string("Fee");
                                let v2878: std::string::String = String::from(v2854);
                                let v2899: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2878),
                                    );
                                let v2903: string = string("vec![v2899]");
                                let v2904: Vec<leptos::prelude::AnyView> = vec![v2899];
                                let v2906: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2904);
                                let v2908: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2906);
                                let v2910: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2848))),
                                                    string(">move || { v2908 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2912: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2908 }</th> };
                                let v2914: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2912);
                                let v2916: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2922: &str = &*string("Block Height");
                                let v2946: std::string::String = String::from(v2922);
                                let v2967: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2946),
                                    );
                                let v2971: string = string("vec![v2967]");
                                let v2972: Vec<leptos::prelude::AnyView> = vec![v2967];
                                let v2974: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2972);
                                let v2976: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2974);
                                let v2978: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2916))),
                                                    string(">move || { v2976 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2980: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2976 }</th> };
                                let v2982: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2980);
                                let v2984: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2989: string = if false == (Dice_ui::method244(v339, 0_i32)) {
                                    string("")
                                } else {
                                    string("Logs")
                                };
                                let v2994: &str = &*v2989;
                                let v3018: std::string::String = String::from(v2994);
                                let v3039: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3018),
                                    );
                                let v3043: string = string("vec![v3039]");
                                let v3044: Vec<leptos::prelude::AnyView> = vec![v3039];
                                let v3046: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3044);
                                let v3048: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3046);
                                let v3050: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2984))),
                                                    string(">move || { v3048 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3052: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3048 }</th> };
                                let v3054: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3052);
                                let v3056: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3062: &str = &*string("Outcome Status");
                                let v3086: std::string::String = String::from(v3062);
                                let v3107: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3086),
                                    );
                                let v3111: string = string("vec![v3107]");
                                let v3112: Vec<leptos::prelude::AnyView> = vec![v3107];
                                let v3114: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3112);
                                let v3116: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3114);
                                let v3118: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3056))),
                                                    string(">move || { v3116 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3120: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3116 }</th> };
                                let v3122: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3120);
                                let v3124: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3130: &str = &*string("Hash");
                                let v3154: std::string::String = String::from(v3130);
                                let v3175: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3154),
                                    );
                                let v3179: string = string("vec![v3175]");
                                let v3180: Vec<leptos::prelude::AnyView> = vec![v3175];
                                let v3182: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3180);
                                let v3184: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3182);
                                let v3186: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3124))),
                                                    string(">move || { v3184 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3188: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3184 }</th> };
                                let v3190: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3188);
                                let v3192: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3198: &str = &*string("Block Hash");
                                let v3222: std::string::String = String::from(v3198);
                                let v3243: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3222),
                                    );
                                let v3247: string = string("vec![v3243]");
                                let v3248: Vec<leptos::prelude::AnyView> = vec![v3243];
                                let v3250: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3248);
                                let v3252: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3250);
                                let v3254: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3192))),
                                                    string(">move || { v3252 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3256: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3252 }</th> };
                                let v3258: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3256);
                                let v3260: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3266: &str = &*string("Receipt ID");
                                let v3290: std::string::String = String::from(v3266);
                                let v3311: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3290),
                                    );
                                let v3315: string = string("vec![v3311]");
                                let v3316: Vec<leptos::prelude::AnyView> = vec![v3311];
                                let v3318: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3316);
                                let v3320: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3318);
                                let v3322: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3260))),
                                                    string(">move || { v3320 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3324: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3320 }</th> };
                                let v3326: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3324);
                                let v3366: string =
                                        string("vec![v2506, v2574, v2642, v2710, v2778, v2846, v2914, v2982, v3054, v3122, v3190, v3258, v3326]");
                                let v3367: Vec<leptos::prelude::AnyView> = vec![
                                    v2506, v2574, v2642, v2710, v2778, v2846, v2914, v2982, v3054,
                                    v3122, v3190, v3258, v3326,
                                ];
                                let v3369: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3367);
                                let v3371: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3369);
                                let v3373: string = string(
                                    "leptos::prelude::view! { <tr >move || { v3371 }</tr> }",
                                );
                                let v3375: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                > = leptos::prelude::view! { <tr >move || { v3371 }</tr> };
                                let v3377: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3375);
                                let v3381: string = string("vec![v3377]");
                                let v3382: Vec<leptos::prelude::AnyView> = vec![v3377];
                                let v3384: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3382);
                                let v3386: string =
                                        string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v3388: string =
                                    string(" class=\"ltr:text-left rtl:text-right\"");
                                let v3390: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3384);
                                let v3393: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<thead "), (v3388))),
                                                    string(">move || { v3390 }</"),
                                                )),
                                                string("thead"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3395: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                                > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v3390 }</thead> };
                                let v3397: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3395);
                                let v3399: string = string(
                                    " class=\"divide-y divide-gray-200 dark:divide-gray-700\"",
                                );
                                let v3401: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2434);
                                let v3404: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<tbody "), (v3399))),
                                                    string(">move || { v3401 }</"),
                                                )),
                                                string("tbody"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3406: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                                > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v3401 }</tbody> };
                                let v3408: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3406);
                                let v3415: string = string("vec![v3397, v3408]");
                                let v3416: Vec<leptos::prelude::AnyView> = vec![v3397, v3408];
                                let v3418: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3416);
                                let v3420: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3418);
                                let v3423: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<table "), (v3386))),
                                                    string(">move || { v3420 }</"),
                                                )),
                                                string("table"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3425: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v3420 }</table> };
                                leptos::prelude::IntoAny::into_any(v3425)
                            }
                        } else {
                            let v3431: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v3433: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v3436 = {
                                let clo_61 = Func0::new(move || Dice_ui::closure161((), ()));
                                Func1::new({
                                    let clo_61 = clo_61.clone();
                                    move |arg_61: ()| clo_61()
                                })
                            };
                            let v3454: string =
                                    string(" class=move || \" \".to_owned() + &v3436(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                            let v3466: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                            let v3478: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3479: string = string("vec![]");
                            let v3480: Vec<leptos::prelude::AnyView> = vec![];
                            let v3482: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3480);
                            let v3484: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3482);
                            let v3487: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3478))),
                                                string(">move || { v3484 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3489: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3484 }</animate> };
                            let v3491: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3489);
                            let v3503: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v3504: string = string("vec![]");
                            let v3505: Vec<leptos::prelude::AnyView> = vec![];
                            let v3507: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3505);
                            let v3509: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3507);
                            let v3511: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3503))),
                                                string(">move || { v3509 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3513: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v3509 }</animate> };
                            let v3515: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3513);
                            let v3527: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v3528: string = string("vec![]");
                            let v3529: Vec<leptos::prelude::AnyView> = vec![];
                            let v3531: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3529);
                            let v3533: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3531);
                            let v3535: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3527))),
                                                string(">move || { v3533 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3537: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3533 }</animate> };
                            let v3539: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3537);
                            let v3550: string = string("vec![v3491, v3515, v3539]");
                            let v3551: Vec<leptos::prelude::AnyView> = vec![v3491, v3515, v3539];
                            let v3553: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3551);
                            let v3555: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3553);
                            let v3558: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3466))),
                                                string(">move || { v3555 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3560: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v3555 }</rect> };
                            let v3572: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                            let v3584: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3585: string = string("vec![]");
                            let v3586: Vec<leptos::prelude::AnyView> = vec![];
                            let v3588: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3586);
                            let v3590: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3588);
                            let v3592: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3584))),
                                                string(">move || { v3590 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3594: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3590 }</animate> };
                            let v3596: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3594);
                            let v3608: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3609: string = string("vec![]");
                            let v3610: Vec<leptos::prelude::AnyView> = vec![];
                            let v3612: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3610);
                            let v3614: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3612);
                            let v3616: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3608))),
                                                string(">move || { v3614 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3618: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v3614 }</animate> };
                            let v3620: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3618);
                            let v3632: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v3633: string = string("vec![]");
                            let v3634: Vec<leptos::prelude::AnyView> = vec![];
                            let v3636: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3634);
                            let v3638: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3636);
                            let v3640: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3632))),
                                                string(">move || { v3638 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3642: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3638 }</animate> };
                            let v3644: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3642);
                            let v3654: string = string("vec![v3596, v3620, v3644]");
                            let v3655: Vec<leptos::prelude::AnyView> = vec![v3596, v3620, v3644];
                            let v3657: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3655);
                            let v3659: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3657);
                            let v3661: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3572))),
                                                string(">move || { v3659 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3663: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v3659 }</rect> };
                            let v3675: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                            let v3687: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3688: string = string("vec![]");
                            let v3689: Vec<leptos::prelude::AnyView> = vec![];
                            let v3691: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3689);
                            let v3693: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3691);
                            let v3695: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3687))),
                                                string(">move || { v3693 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3697: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3693 }</animate> };
                            let v3699: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3697);
                            let v3711: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v3712: string = string("vec![]");
                            let v3713: Vec<leptos::prelude::AnyView> = vec![];
                            let v3715: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3713);
                            let v3717: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3715);
                            let v3719: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3711))),
                                                string(">move || { v3717 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3721: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v3717 }</animate> };
                            let v3723: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3721);
                            let v3735: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v3736: string = string("vec![]");
                            let v3737: Vec<leptos::prelude::AnyView> = vec![];
                            let v3739: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3737);
                            let v3741: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3739);
                            let v3743: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3735))),
                                                string(">move || { v3741 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3745: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3741 }</animate> };
                            let v3747: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3745);
                            let v3757: string = string("vec![v3699, v3723, v3747]");
                            let v3758: Vec<leptos::prelude::AnyView> = vec![v3699, v3723, v3747];
                            let v3760: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3758);
                            let v3762: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3760);
                            let v3764: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3675))),
                                                string(">move || { v3762 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3766: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v3762 }</rect> };
                            let v3768: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3766);
                            let v3770: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3663);
                            let v3772: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3560);
                            let v3782: string = string("vec![v3772, v3770, v3768]");
                            let v3783: Vec<leptos::prelude::AnyView> = vec![v3772, v3770, v3768];
                            let v3785: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3783);
                            let v3787: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3785);
                            let v3790: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v3454))),
                                                string(">move || { v3787 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3792: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3436(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v3787 }</svg> };
                            let v3794: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3792);
                            let v3800: &str = &*string("Loading...");
                            let v3824: std::string::String = String::from(v3800);
                            let v3845: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v3824),
                                );
                            let v3852: string = string("vec![v3794, v3845]");
                            let v3853: Vec<leptos::prelude::AnyView> = vec![v3794, v3845];
                            let v3855: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3853);
                            let v3857: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3855);
                            let v3860: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3433))),
                                                string(">move || { v3857 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3862: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v3857 }</div> };
                            let v3864: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3862);
                            let v3868: string = string("vec![v3864]");
                            let v3869: Vec<leptos::prelude::AnyView> = vec![v3864];
                            let v3871: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3869);
                            let v3873: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3871);
                            let v3875: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3431))),
                                                string(">move || { v3873 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3877: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v3873 }</div> };
                            leptos::prelude::IntoAny::into_any(v3877)
                        }
                    }
                    Dice_ui::US46::US46_1(v337_1_0) => {
                        let v3883: string =
                            fable_library_rust::String_::fromString(v337_1_0.clone());
                        let v3886: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v3888: string = string(" class=\"[height:17px]\"");
                        let v3902: string =
                                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3908: string =
                                string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v3909: string = string("vec![]");
                        let v3910: Vec<leptos::prelude::AnyView> = vec![];
                        let v3912: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3910);
                        let v3914: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3912);
                        let v3917: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3908))),
                                            string(">move || { v3914 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3919: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v3914 }</path> };
                        let v3921: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3919);
                        let v3925: string = string("vec![v3921]");
                        let v3926: Vec<leptos::prelude::AnyView> = vec![v3921];
                        let v3928: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3926);
                        let v3930: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3928);
                        let v3933: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3902))),
                                            string(">move || { v3930 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3935: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3930 }</svg> };
                        let v3937: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3935);
                        let v3941: string = string("vec![v3937]");
                        let v3942: Vec<leptos::prelude::AnyView> = vec![v3937];
                        let v3944: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3942);
                        let v3946: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3944);
                        let v3949: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3888))),
                                            string(">move || { v3946 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3951: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v3946 }</span> };
                        let v3953: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3951);
                        let v3955: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v3960: &str = &*v3883;
                        let v3984: std::string::String = String::from(v3960);
                        let v4005: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v3984),
                        );
                        let v4009: string = string("vec![v4005]");
                        let v4010: Vec<leptos::prelude::AnyView> = vec![v4005];
                        let v4012: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4010);
                        let v4014: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4012);
                        let v4017: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v3955))),
                                            string(">move || { v4014 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4019: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v4014 }</pre> };
                        let v4021: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4019);
                        let v4029: string = string("vec![v3953, v4021]");
                        let v4030: Vec<leptos::prelude::AnyView> = vec![v3953, v4021];
                        let v4032: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4030);
                        let v4034: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4032);
                        let v4037: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3886))),
                                            string(">move || { v4034 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4039: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v4034 }</div> };
                        leptos::prelude::IntoAny::into_any(v4039)
                    }
                }
            };
            let v4053: string = string("vec![v144, v4044]");
            let v4054: Vec<leptos::prelude::AnyView> = vec![v144, v4044];
            leptos::prelude::Fragment::new(v4054)
        }
        pub fn closure303(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure304(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure305(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method246() -> Func0<string> {
            Func0::new(move || Dice_ui::closure305((), ()))
        }
        pub fn closure307(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Transactions");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method247() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure307((), ()))
        }
        pub fn closure309(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure308(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v9: std::string::String = format!("{:#?}", v2);
            let v11: string = fable_library_rust::String_::fromString(v9);
            let v35 = {
                let clo = Func0::new(move || Dice_ui::closure309((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v36: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v35(())");
            let v38: string = append(
                (append((append(string(" "), (v36))), string(""))),
                string(""),
            );
            let v43: &str = &*v11;
            let v67: std::string::String = String::from(v43);
            let v88: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v67));
            let v92: string = string("vec![v88]");
            let v93: Vec<leptos::prelude::AnyView> = vec![v88];
            let v95: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v93);
            let v97: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v95);
            let v100: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v38))),
                                string(">move || { v97 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v102: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v35(())>move || { v97 }</pre> };
            let v104: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v102);
            let v108: string = string("vec![v104]");
            let v109: Vec<leptos::prelude::AnyView> = vec![v104];
            leptos::prelude::Fragment::new(v109)
        }
        pub fn method248(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                >,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure308(v0_1.clone(), ())
            })
        }
        pub fn closure306(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method247();
            let v2 = Dice_ui::method248(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure220((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure201((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure202((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v14: string = append(
                (append((append(string(" "), (v12))), string(""))),
                string(""),
            );
            let v17 = {
                let clo_3 = Func0::new(move || Dice_ui::closure203((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v19: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v20: leptos::prelude::Fragment = v1();
            let v22: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v20);
            let v25: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v19))),
                                string(">move || { v22 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v22 }</dt> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v31: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())");
            let v32: leptos::prelude::Fragment = v2();
            let v34: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v32);
            let v37: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v31))),
                                string(">move || { v34 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v39: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v17(())>move || { v34 }</dd> };
            let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
            let v49: string = string("vec![v29, v41]");
            let v50: Vec<leptos::prelude::AnyView> = vec![v29, v41];
            let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
            let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
            let v57: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v14))),
                                string(">move || { v54 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v59: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v54 }</dl> };
            let v61: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v59);
            let v65: string = string("vec![v61]");
            let v66: Vec<leptos::prelude::AnyView> = vec![v61];
            leptos::prelude::Fragment::new(v66)
        }
        pub fn closure310(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method249(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure310(v0_1.clone(), ())
            })
        }
        pub fn closure311(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method250(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure311(v0_1.clone(), ())
            })
        }
        pub fn closure312(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method251(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure312(v0_1.clone(), ())
            })
        }
        pub fn closure313(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method252(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure313(v0_1.clone(), ())
            })
        }
        pub fn closure314(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure315(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("settings"),
                )),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure316(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure317(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure318(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("transactions"),
                )),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure319(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure320(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure321(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("lists"),
                )),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure322(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure323(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure324(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("dice"),
                )),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure325(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure326(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v7: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v10: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure5(
            unitVar: (),
            v0_1: i32,
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> {
            let v1: string = append(
                (append(string("home.render () / router: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v13: bool = true;
            let _func0_from_v11 = Func0::from(move || {
                //;
                let v15: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v17: bool = */
                    async move {
                        /*;
                        let v19: bool = */
 //;
                        let v22: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v25: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v27: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v29: bool = */
                            async {
                                /*;
                                let v31: bool = */
 //;
                                let v32: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v33: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v35: Result<rexie::Rexie, rexie::Error> = v33.await;
                                let v36 = Dice_ui::method6();
                                let v41: Result<rexie::Rexie, std::string::String> =
                                    v35.map_err(|x| v36(x));
                                let v53: string = string("}");
                                let v58: bool = true;
                                let v48 = v41;
                                let v63: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; v48 "), (v53))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v64: bool = true;
                                v48
                            },
                        ); // rust.fix_closure';
                        let v66 = __future_init;
                        let v68: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v66;
                        let v70: Result<rexie::Rexie, std::string::String> = v68.await;
                        let v75: rexie::Rexie = v70.unwrap();
                        let v86: rexie::Rexie = (Dice_ui::method7())(v75);
                        let v88: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v86);
                        let v94: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v88.clone()))),
                                        string("")));
                        let v96: bool = true;
                        leptos::logging::log!("{}", v94);
                        let v97: string = string("}");
                        let v102: bool = true;
                        let v88 = v88;
                        let v107: string = append(
                            (append(
                                (append((append(string("true; v88 "), (v97))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v108: bool = true;
                        v88
                    },
                ); // rust.fix_closure';
                let v110 = __future_init;
                let v112: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v110;
                let v114: bool = true;
                v112 /*;
                     let v116: bool = */
            }); //;
            let v118: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v11;
            let v120: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|_| async move { v118().await });
            let v123: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v126: bool = true;
            let _func0_from_v124 = Func0::from(move || {
                //;
                let v128: Option<std::sync::Arc<rexie::Rexie>> =
                    leptos::prelude::ArcLocalResource::get(&v120.clone());
                let v130: bool = true;
                let _optionm_map_ = v128.map(|x| {
                    //;
                    let v132: std::sync::Arc<rexie::Rexie> = x;
                    let v135: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v132);
                    let v137: bool = true;
                    v135
                });
                let v139: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v141: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v143: bool = */
                    async move {
                        /*;
                        let v145: bool = */
 //;
                        let v149: string =
                append((append(string("state_core.use_core_database (2) / core_state_heap new_local_resource / database: "),
                               sprintf!("{:?}", v139.clone()))), string(""));
                        let v151: bool = true;
                        leptos::logging::log!("{}", v149);
                        let v153: bool = true;
                        let _optionm_map_ = v139.map(|x| {
                            //;
                            let v155: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v157: std::sync::Arc<rexie::Rexie> = v155.0;
                            let v159: bool = true;
                            v157
                        });
                        let v161: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v175: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v161));
                        let v538: Dice_ui::US3 = match &v175 {
                            Dice_ui::US2::US2_0(v175_0_0) => {
                                let v181: string =
                                    string("state_core.get_data () / id: core-state-heap");
                                let v183: bool = true;
                                leptos::logging::log!("{}", v181);
                                let v185: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v187: bool = */
                                    async {
                                        /*;
                                        let v189: bool = */
 //;
                                        let v191: Array<string> = new_array(&[string("store")]);
                                        let v193: Vec<string> = v191.to_vec();
                                        let v196: bool = true;
                                        let _func1_from_v194 = Func1::from(move |value| {
                                            //;
                                            let v198: string = ();
                                            let v203: &str = &*v198;
                                            let v247: LrcPtr<Dice_ui::Heap4> =
                                                LrcPtr::new(Dice_ui::Heap4 {
                                                    l0: String::from(v203),
                                                });
                                            let v249: bool = true;
                                            v247 /*;
                                                 let v251: bool = */
                                        }); //;
                                        let v253: Func1<string, LrcPtr<Dice_ui::Heap4>> =
                                            _func1_from_v194;
                                        let v255: Vec<std::string::String> = v193
                                            .into_iter()
                                            .map(|x| v253(x.clone()))
                                            .collect::<Vec<_>>();
                                        let v256: std::sync::Arc<rexie::Rexie> = Dice_ui::method10(
                                            match &v175 {
                                                Dice_ui::US2::US2_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v258: Result<rexie::Transaction, rexie::Error> = v256
                                            .transaction(&v255, rexie::TransactionMode::ReadOnly);
                                        let v259 = Dice_ui::method11();
                                        let v264: Result<rexie::Transaction, std::string::String> =
                                            v258.map_err(|x| v259(x));
                                        let v275: rexie::Transaction = v264?;
                                        let v276: string = Dice_ui::method12();
                                        let v281: &str = &*v276;
                                        let v302: Result<rexie::Store, rexie::Error> =
                                            v275.store(v281);
                                        let v303 = Dice_ui::method13();
                                        let v308: Result<rexie::Store, std::string::String> =
                                            v302.map_err(|x| v303(x));
                                        let v319: rexie::Store = v308?;
                                        let v320: string = Dice_ui::method14();
                                        let v325: &str = &*v320;
                                        let v346: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v325);
                                        let v348: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v319, v346));
                                        let v350: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v348.await;
                                        let v351 = Dice_ui::method15();
                                        let v356: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v350.map_err(|x| v351(x));
                                        let v367: Option<wasm_bindgen::JsValue> = v356?;
                                        let v381: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method16(), v367),
                                        );
                                        let v481: Dice_ui::US3 = match &v381 {
                                            Dice_ui::US4::US4_0(v381_0_0) => {
                                                let v386: wasm_bindgen::JsValue = Dice_ui::method17(
                                                    match &v381 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v388: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v386);
                                                let v389 = Dice_ui::method18();
                                                let v394: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v388.map_err(|x| v389(x));
                                                let v405: Option<serde_json::Value> = v394?;
                                                let v419: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method19(), v405),
                                                );
                                                match &v419 {
                                                    Dice_ui::US5::US5_0(v419_0_0) => {
                                                        let v424: serde_json::Value =
                                                            Dice_ui::method20(
                                                                match &v419 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v426: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v424);
                                                        let v427 = Dice_ui::method21();
                                                        let v432: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v426.map_err(|x| v427(x));
                                                        let v443: Vec<u8> = v432?;
                                                        let v445: Array<u8> =
                                                fable_library_rust::NativeArray_::array_from(v443.clone());
                                                        let v447: string =
                                                append((append(string("state_core.get_data () / data_len: "),
                                                               (toString(get_Count(v445.clone()))))),
                                                       string(""));
                                                        let v449: bool = true;
                                                        leptos::logging::log!("{}", v447);
                                                        let v451: Vec<u8> = v445.to_vec();
                                                        let v453: &[u8] = v451.as_slice();
                                                        let v455: bool = true;
                                                        let mut v453 = v453;
                                                        let v457: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v453,
                                                        );
                                                        let v458 = Dice_ui::method22();
                                                        let v463: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v457.map_err(|x| v458(x));
                                                        Dice_ui::US3::US3_0(v463?)
                                                    }
                                                    _ => Dice_ui::US3::US3_1,
                                                }
                                            }
                                            _ => Dice_ui::US3::US3_1,
                                        };
                                        let v488: Option<Option<LrcPtr<Dice_ui::Heap3>>> =
                                            match &v481 {
                                                Dice_ui::US3::US3_0(v481_0_0) => Some(
                                                    match &v481 {
                                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            };
                                        let v490: string = string("}");
                                        let v495: bool = true;
                                        let v489 = Ok::<
                                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            std::string::String,
                                        >(v488);
                                        let v500: string = append(
                                            (append(
                                                (append(
                                                    (append(string("true; v489 "), (v490))),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v501: bool = true;
                                        v489
                                    },
                                ); // rust.fix_closure';
                                let v503 = __future_init;
                                let v505: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v503;
                                let v507: Result<
                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                    std::string::String,
                                > = v505.await;
                                let v508 = Dice_ui::method23();
                                let v509 = Dice_ui::method24();
                                let v510: Dice_ui::US6 = match &v507 {
                                    Err(v507_1_0) => v509(v507_1_0.clone()),
                                    Ok(v507_0_0) => v508(v507_0_0.clone()),
                                };
                                match &v510 {
                                    Dice_ui::US6::US6_0(v510_0_0) => defaultValue(
                                        Dice_ui::US3::US3_1,
                                        map(Dice_ui::method25(), v510_0_0.clone()),
                                    ),
                                    Dice_ui::US6::US6_1(v510_1_0) => {
                                        let v530: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_core_database (3) / error: ",
                                                ),
                                                (toString(v510_1_0.clone())),
                                            )),
                                            string(""),
                                        );
                                        let v532: bool = true;
                                        leptos::logging::log!("{}", v530);
                                        Dice_ui::US3::US3_1
                                    }
                                }
                            }
                            _ => Dice_ui::US3::US3_1,
                        };
                        let v560: Dice_ui::US7 = match &v538 {
                            Dice_ui::US3::US3_0(v538_0_0) => Dice_ui::US7::US7_0(defaultValue(
                                Dice_ui::US8::US8_1,
                                map(
                                    Dice_ui::method26(),
                                    match &v538 {
                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                            )),
                            _ => Dice_ui::US7::US7_1,
                        };
                        let v567: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v560_0_0) = &v560 {
                            let v561: Dice_ui::US8 = v560_0_0.clone();
                            if let Dice_ui::US8::US8_0(v561_0_0) = &v561 {
                                Dice_ui::US8::US8_0(v561_0_0.clone())
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        } else {
                            Dice_ui::US8::US8_1
                        };
                        let v568: string = string("}");
                        let v573: bool = true;
                        let v567 = v567;
                        let v578: string = append(
                            (append(
                                (append((append(string("true; v567 "), (v568))), string("); "))),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v579: bool = true;
                        v567
                    },
                ); // rust.fix_closure';
                let v581 = __future_init;
                let v583: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>> = v581;
                let v585: bool = true;
                v583 /*;
                     let v587: bool = */
            }); //;
            let v589: Func0<std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>>> =
                _func0_from_v124;
            let v591: leptos::prelude::ArcLocalResource<Dice_ui::US8> =
                leptos::prelude::ArcLocalResource::new(|_| async move { v589().await });
            let v594: bool = true;
            let _func0_from_v592 = Func0::from(move || {
                //;
                let v597: bool = true;
                leptos::logging::log!(
                    "{}",
                    string("state_core.use_core_database (4) / effect core_state_heap / ##1")
                );
                let v599: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method28(Dice_ui::method27());
                let v600 = Dice_ui::method29();
                let v601 = Dice_ui::method30();
                let v602: Dice_ui::US9 = match &v599 {
                    Err(v599_1_0) => v601(v599_1_0.clone()),
                    Ok(v599_0_0) => v600(v599_0_0.clone()),
                };
                let v625: Dice_ui::US10 = match &v602 {
                    Dice_ui::US9::US9_0(v602_0_0) => Dice_ui::US10::US10_0(defaultValue(
                        Dice_ui::US11::US11_1,
                        map(Dice_ui::method31(), v602_0_0.clone()),
                    )),
                    Dice_ui::US9::US9_1(v602_1_0) => Dice_ui::US10::US10_1(v602_1_0.clone()),
                };
                let v1097: bool = if let Dice_ui::US10::US10_0(v625_0_0) = &v625 {
                    let v626: Dice_ui::US11 = v625_0_0.clone();
                    if let Dice_ui::US11::US11_0(v626_0_0) = &v626 {
                        let v627: web_sys::Storage = v626_0_0.clone();
                        let v629: Option<Dice_ui::US8> =
                            leptos::prelude::ArcLocalResource::get(&v591);
                        let v643: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method32(), v629));
                        let v650: string =
                            append((append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                           sprintf!("{:?}", v643.clone()))),
                                   string(""));
                        let v652: bool = true;
                        leptos::logging::log!("{}", v650);
                        let v1031: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v643_0_0) = &v643 {
                            let v653: Dice_ui::US8 = v643_0_0.clone();
                            if let Dice_ui::US8::US8_0(v653_0_0) = &v653 {
                                Dice_ui::US8::US8_0(v653_0_0.clone())
                            } else {
                                let v656: web_sys::Storage = Dice_ui::method33(v627.clone());
                                let v657: string = Dice_ui::method34();
                                let v662: &str = &*v657;
                                let v683: Result<
                                    Option<std::string::String>,
                                    wasm_bindgen::JsValue,
                                > = web_sys::Storage::get_item(&v656, v662);
                                let v684 = Dice_ui::method35();
                                let v685 = Dice_ui::method36();
                                let v686: Dice_ui::US12 = match &v683 {
                                    Err(v683_1_0) => v685(v683_1_0.clone()),
                                    Ok(v683_0_0) => v684(v683_0_0.clone()),
                                };
                                let v712: Dice_ui::US13 = match &v686 {
                                    Dice_ui::US12::US12_0(v686_0_0) => {
                                        let v688: Option<std::string::String> =
                                            Dice_ui::method37(v686_0_0.clone());
                                        let v690: Option<std::string::String> =
                                            serde_json::from_value(v688.into()).unwrap();
                                        Dice_ui::US13::US13_0(defaultValue(
                                            Dice_ui::US14::US14_1,
                                            map(Dice_ui::method38(), v690),
                                        ))
                                    }
                                    Dice_ui::US12::US12_1(v686_1_0) => {
                                        Dice_ui::US13::US13_1(v686_1_0.clone())
                                    }
                                };
                                let v718: Dice_ui::US15 = match &v712 {
                                    Dice_ui::US13::US13_0(v712_0_0) => {
                                        Dice_ui::US15::US15_0(v712_0_0.clone())
                                    }
                                    _ => Dice_ui::US15::US15_1,
                                };
                                let v725: Dice_ui::US14 =
                                    if let Dice_ui::US15::US15_0(v718_0_0) = &v718 {
                                        let v719: Dice_ui::US14 = v718_0_0.clone();
                                        if let Dice_ui::US14::US14_0(v719_0_0) = &v719 {
                                            Dice_ui::US14::US14_0(v719_0_0.clone())
                                        } else {
                                            Dice_ui::US14::US14_1
                                        }
                                    } else {
                                        Dice_ui::US14::US14_1
                                    };
                                let v732: Option<std::string::String> = match &v725 {
                                    Dice_ui::US14::US14_0(v725_0_0) => Some(
                                        match &v725 {
                                            Dice_ui::US14::US14_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => None::<std::string::String>,
                                };
                                let v734: Option<Dice_ui::US8> = map(Dice_ui::method39(), v732);
                                let v832: Dice_ui::US7 = defaultValue(
                                    Dice_ui::US7::US7_1,
                                    map(Dice_ui::method32(), v734),
                                );
                                if let Dice_ui::US7::US7_0(v832_0_0) = &v832 {
                                    let v836: Dice_ui::US8 = v832_0_0.clone();
                                    if let Dice_ui::US8::US8_0(v836_0_0) = &v836 {
                                        Dice_ui::US8::US8_0(v836_0_0.clone())
                                    } else {
                                        Dice_ui::US8::US8_1
                                    }
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            }
                        } else {
                            let v844: web_sys::Storage = Dice_ui::method33(v627);
                            let v845: string = Dice_ui::method34();
                            let v850: &str = &*v845;
                            let v871: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v844, v850);
                            let v872 = Dice_ui::method35();
                            let v873 = Dice_ui::method36();
                            let v874: Dice_ui::US12 = match &v871 {
                                Err(v871_1_0) => v873(v871_1_0.clone()),
                                Ok(v871_0_0) => v872(v871_0_0.clone()),
                            };
                            let v900: Dice_ui::US13 = match &v874 {
                                Dice_ui::US12::US12_0(v874_0_0) => {
                                    let v876: Option<std::string::String> =
                                        Dice_ui::method37(v874_0_0.clone());
                                    let v878: Option<std::string::String> =
                                        serde_json::from_value(v876.into()).unwrap();
                                    Dice_ui::US13::US13_0(defaultValue(
                                        Dice_ui::US14::US14_1,
                                        map(Dice_ui::method38(), v878),
                                    ))
                                }
                                Dice_ui::US12::US12_1(v874_1_0) => {
                                    Dice_ui::US13::US13_1(v874_1_0.clone())
                                }
                            };
                            let v906: Dice_ui::US15 = match &v900 {
                                Dice_ui::US13::US13_0(v900_0_0) => {
                                    Dice_ui::US15::US15_0(v900_0_0.clone())
                                }
                                _ => Dice_ui::US15::US15_1,
                            };
                            let v913: Dice_ui::US14 = if let Dice_ui::US15::US15_0(v906_0_0) = &v906
                            {
                                let v907: Dice_ui::US14 = v906_0_0.clone();
                                if let Dice_ui::US14::US14_0(v907_0_0) = &v907 {
                                    Dice_ui::US14::US14_0(v907_0_0.clone())
                                } else {
                                    Dice_ui::US14::US14_1
                                }
                            } else {
                                Dice_ui::US14::US14_1
                            };
                            let v920: Option<std::string::String> = match &v913 {
                                Dice_ui::US14::US14_0(v913_0_0) => Some(
                                    match &v913 {
                                        Dice_ui::US14::US14_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<std::string::String>,
                            };
                            let v922: Option<Dice_ui::US8> = map(Dice_ui::method39(), v920);
                            let v1020: Dice_ui::US7 =
                                defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method32(), v922));
                            if let Dice_ui::US7::US7_0(v1020_0_0) = &v1020 {
                                let v1024: Dice_ui::US8 = v1020_0_0.clone();
                                if let Dice_ui::US8::US8_0(v1024_0_0) = &v1024 {
                                    Dice_ui::US8::US8_0(v1024_0_0.clone())
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        };
                        let v1035: string =
                            append((append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                           sprintf!("{:?}", v1031.clone()))),
                                   string(""));
                        let v1037: bool = true;
                        leptos::logging::log!("{}", v1035);
                        if let Dice_ui::US8::US8_0(v1031_0_0) = &v1031 {
                            let v1038: LrcPtr<Dice_ui::Heap3> = v1031_0_0.clone();
                            let v1041: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1043: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1041);
                            let v1046: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1043.l0.clone(),
                                |x: &mut /*;
                                 let v1047: */
                                 bool /* = getZero();
                                      let v1052: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1038 = v1038.clone();
                                        move |v: bool| Dice_ui::closure31(v1038.clone(), v)
                                    })(x.clone())
                                },
                            ); //;
                            let v1055: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1057: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1055);
                            let v1060: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1057.l1.clone(),
                                |x: &mut /*;
                                 let v1061: */
                                 bool /* = getZero();
                                      let v1066: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1038 = v1038.clone();
                                        move |v_1: bool| Dice_ui::closure32(v1038.clone(), v_1)
                                    })(x.clone())
                                },
                            ); //;
                            let v1069: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1071: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1069);
                            let v1074: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1071.l2.clone(),
                                |x: &mut /*;
                                 let v1075: */
                                 std::string::String /* = getZero();
                                                     let v1080: bool =
                                                         */| {
                                    *x = Func1::new({
                                        let v1038 = v1038.clone();
                                        move |v_2: std::string::String| {
                                            Dice_ui::closure33(v1038.clone(), v_2)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            let v1083: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1085: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1083);
                            let v1088: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1085.l3.clone(),
                                |x: &mut /*;
                                 let v1089: */
                                 LrcPtr<Dice_ui::Heap0> /* =
                                                            getZero::<()>();
                                                        let v1094: bool =
                                                            */| {
                                    *x = Func1::new({
                                        let v1038 = v1038.clone();
                                        move |v_3: LrcPtr<Dice_ui::Heap0>| {
                                            Dice_ui::closure34(v1038.clone(), v_3)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            true
                        } else {
                            false
                        }
                    } else {
                        false
                    }
                } else {
                    false
                };
                let v1099: bool = true; /*;
                                        let v1101: bool = */
            }); //;
            let v1103: Func0<()> = _func0_from_v592;
            let v1105: bool = true;
            leptos::prelude::Effect::new(move |_| v1103());
            let v1108: leptos::prelude::ArcMemo<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure35(v7.clone(), ())
                })()
            });
            let patternInput: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1114: bool = true;
            let _func1_from_v1112 = Func1::from(move |value| {
                //;
                let v1116: LrcPtr<Dice_ui::Heap3> = ();
                let v1117: string = sprintf!("{:?}", v1116.clone());
                let v1121: Option<std::sync::Arc<rexie::Rexie>> =
                    leptos::prelude::ArcLocalResource::get(&v120);
                let v1135: Dice_ui::US2 =
                    defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v1121));
                let v1140: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v1142: bool = */
                    async move {
                        /*;
                        let v1144: bool = */
 //;
                        let v1230: bool = match &v1135 {
                            Dice_ui::US2::US2_0(v1135_0_0) => {
                                let v1146: string =
                            append((append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                           (v1117.clone()))), string(""));
                                let v1148: bool = true;
                                leptos::logging::log!("{}", v1146);
                                let v1153: string = append(
                                    (append(
                                        string("state_core.set_data () / data_len: "),
                                        (toString(length(sprintf!("{:?}", v1116.clone())) as i64)),
                                    )),
                                    string(""),
                                );
                                let v1155: bool = true;
                                leptos::logging::log!("{}", v1153);
                                let v1157: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v1159: bool = */
                                    async move {
                                        /*;
                                        let v1161: bool = */
 //;
                                        let v1163: bool = true;
                                        let mut data = Vec::new();
                                        let v1165: bool = true;
                                        borsh::BorshSerialize::serialize(&v1116.clone(), &mut data)
                                            .unwrap();
                                        let v1167: Vec<u8> = data;
                                        let v1169: wasm_bindgen::JsValue =
                                            serde_wasm_bindgen::to_value(&v1167).unwrap();
                                        let v1170: string = Dice_ui::method42();
                                        let v1175: &str = &*v1170;
                                        let v1196: rexie::Transaction = match &v1135 {
                                            Dice_ui::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone()
                                        .transaction(
                                            &["store"],
                                            rexie::TransactionMode::ReadWrite,
                                        )?;
                                        let v1198: rexie::Store = v1196.store("store")?;
                                        let v1200: bool = true;
                                        v1198.put(&v1169, Some(&v1175.into())).await?;
                                        let v1202: bool = true;
                                        v1196.done().await?;
                                        let v1204: string = string("}");
                                        let v1209: bool = true;
                                        let v1203 = Ok::<(), rexie::Error>(());
                                        let v1214: string = append(
                                            (append(
                                                (append(
                                                    (append(string("true; v1203 "), (v1204))),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1215: bool = true;
                                        v1203
                                    },
                                ); // rust.fix_closure';
                                let v1217 = __future_init;
                                let v1219: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = v1217;
                                let v1221: Result<(), rexie::Error> = v1219.await;
                                v1221.unwrap();
                                true
                            }
                            _ => {
                                let v1228: bool = true;
                                leptos::logging::log!("{}", string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                                false
                            }
                        };
                        let v1235: string = string("true; () });  // rust.fix_closure\'");
                        let v1236: bool = true;
                        ()
                    },
                ); // rust.fix_closure';
                let v1238 = __future_init;
                let v1241: LrcPtr<Dice_ui::Heap5> = LrcPtr::new(Dice_ui::Heap5 { l0: v1238 });
                let v1243: bool = true;
                v1241 /*;
                      let v1245: bool = */
            }); //;
            let v1247: Func1<LrcPtr<Dice_ui::Heap3>, LrcPtr<Dice_ui::Heap5>> = _func1_from_v1112;
            let v1250: leptos::prelude::ArcAction<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap3>| {
                    Func1::new({
                        let v1247 = v1247.clone();
                        move |v_4: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure36(v1247.clone(), v_4)
                    })(value.clone())
                });
            let v1253: bool = true;
            let _func0_from_v1251 = Func0::from(move || {
                //;
                let v1255: bool = leptos::prelude::ReadSignal::get(&patternInput.0.clone());
                let v1256: string =
                append((append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                               (ofBoolean(v1255)))), string(""));
                let v1258: bool = true;
                leptos::logging::log!("{}", v1256);
                let v1261: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1263: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1261);
                let v1266: bool = leptos::prelude::ArcRwSignal::get(&v1263.l0.clone());
                let v1269: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1271: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1269);
                let v1274: bool = leptos::prelude::ArcRwSignal::get(&v1271.l1.clone());
                let v1277: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1279: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1277);
                let v1282: std::string::String =
                    leptos::prelude::ArcRwSignal::get(&v1279.l2.clone());
                let v1285: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1287: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1285);
                let v1291: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                    l0: v1266,
                    l1: v1274,
                    l2: v1282,
                    l3: leptos::prelude::ArcRwSignal::get(&v1287.l3.clone()),
                });
                let v1295: string =
                append((append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                               sprintf!("{:?}", v1291.clone()))), string(""));
                let v1297: bool = true;
                leptos::logging::log!("{}", v1295);
                let v1299: std::collections::HashMap<
                    std::string::String,
                    leptos::prelude::ArcRwSignal<bool>,
                > = leptos::prelude::ArcMemo::get(&v1108);
                let v1305: &str = &*string("dark_mode_key");
                let v1349: std::string::String = Dice_ui::method44(String::from(v1305));
                let v1351: Option<leptos::prelude::ArcRwSignal<bool>> =
                    std::collections::HashMap::get(&v1299, &v1349)
                        .map(|x| x)
                        .cloned();
                let v1365: Dice_ui::US16 =
                    defaultValue(Dice_ui::US16::US16_1, map(Dice_ui::method45(), v1351));
                let v1375: Dice_ui::US17 = match &v1365 {
                    Dice_ui::US16::US16_0(v1365_0_0) => {
                        Dice_ui::US17::US17_0(leptos::prelude::ArcRwSignal::get(
                            &match &v1365 {
                                Dice_ui::US16::US16_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US17::US17_1,
                };
                let v1378: bool = match &v1375 {
                    Dice_ui::US17::US17_0(v1375_0_0) => match &v1375 {
                        Dice_ui::US17::US17_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => false,
                };
                let v1379: string =
                append((append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                               (ofBoolean(v1378)))), string(""));
                let v1381: bool = true;
                leptos::logging::log!("{}", v1379);
                let v1463: bool = if (v1378) == false {
                    if (v1255) == false {
                        let v1385: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &patternInput.1.clone(),
                            |x: &mut /*;
                             let v1386: */
                             bool /* = getZero();
                                  let v1391: bool =
                                      */| {
                                *x = Func1::new(move |v_5: bool| Dice_ui::closure38((), v_5))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        true
                    } else {
                        let v1394: bool = true;
                        leptos::logging::log!("{}", string("state_core.use_core_database (18) / effect new_core_state_heap / ##4"));
                        let v1396: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                            Dice_ui::method28(Dice_ui::method27());
                        let v1397 = Dice_ui::method29();
                        let v1398 = Dice_ui::method30();
                        let v1399: Dice_ui::US9 = match &v1396 {
                            Err(v1396_1_0) => v1398(v1396_1_0.clone()),
                            Ok(v1396_0_0) => v1397(v1396_0_0.clone()),
                        };
                        let v1422: Dice_ui::US10 = match &v1399 {
                            Dice_ui::US9::US9_0(v1399_0_0) => Dice_ui::US10::US10_0(defaultValue(
                                Dice_ui::US11::US11_1,
                                map(Dice_ui::method31(), v1399_0_0.clone()),
                            )),
                            Dice_ui::US9::US9_1(v1399_1_0) => {
                                Dice_ui::US10::US10_1(v1399_1_0.clone())
                            }
                        };
                        if let Dice_ui::US10::US10_0(v1422_0_0) = &v1422 {
                            let v1423: Dice_ui::US11 = v1422_0_0.clone();
                            if let Dice_ui::US11::US11_0(v1423_0_0) = &v1423 {
                                let v1426: bool = true;
                                leptos::prelude::ArcAction::dispatch(&v1250, v1291.clone().clone());
                                let v1427: web_sys::Storage = Dice_ui::method46(v1423_0_0.clone());
                                let v1428: string = Dice_ui::method47();
                                let v1433: &str = &*v1428;
                                let v1453: LrcPtr<Dice_ui::Heap3> = Dice_ui::method48(v1291);
                                let v1455: std::string::String =
                                    serde_json::json!(v1453).to_string();
                                let v1457: &str = v1455.as_str();
                                let v1459: bool = true;
                                web_sys::Storage::set(&v1427, v1433, v1457).unwrap();
                                true
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                } else {
                    false
                };
                let v1465: bool = true; /*;
                                        let v1467: bool = */
            }); //;
            let v1469: Func0<()> = _func0_from_v1251;
            let v1471: bool = true;
            leptos::prelude::Effect::new(move |_| v1469());
            let v1473 = Dice_ui::method49(v7.clone());
            let v1477: string = string(" class:dark={move || v1473()} class=\"flex flex-1\"");
            let v1480: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v1482: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1484: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::hooks::use_navigate());
            let v1486: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1489: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v1486 = v1486.clone();
                        move || Dice_ui::closure40(v1486.clone(), ())
                    })()
                });
            let v1491: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v1493: LrcPtr<Dice_ui::Heap2> = v1491.unwrap();
            let patternInput_1: (
                leptos::prelude::ReadSignal<Dice_ui::US18>,
                leptos::prelude::WriteSignal<Dice_ui::US18>,
            ) = leptos::prelude::signal(Dice_ui::US18::US18_0);
            let v1496: leptos::prelude::ReadSignal<Dice_ui::US18> = patternInput_1.0.clone();
            let patternInput_2: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1503: bool = true;
            let _func0_from_v1501 = Func0::from(move || {
                //;
                let v1505: bool = leptos::prelude::ReadSignal::get(&patternInput_2.0.clone());
                let v1507: leptos::prelude::Memo<std::string::String> = v1482.clone().hash;
                let v1509: std::string::String = leptos::prelude::Memo::get(&v1507);
                let v1512: string =
                    sprintf!("{}{}", leptos::prelude::ArcMemo::get(&v1489), v1509.clone());
                let v1513: string = append(
                    (append(
                        (append(
                            (append(
                                string("content.render () / effect 1 / new_url_hash: "),
                                (v1512.clone()),
                            )),
                            string(" / loaded: "),
                        )),
                        (ofBoolean(v1505)),
                    )),
                    string(""),
                );
                let v1515: bool = true;
                leptos::logging::log!("{}", v1513);
                let v1620: bool = if (v1505) == false {
                    let v1517: std::string::String = Dice_ui::method50(v1509);
                    if v1517 == "" {
                        let v1522: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v1493.l0.clone());
                        let v1524: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v1522);
                        let v1527: std::string::String =
                            leptos::prelude::ArcRwSignal::get(&v1524.l2.clone());
                        let v1529: string = fable_library_rust::String_::fromString(v1527);
                        let v1530: string = append(
                            (append(
                                string("content.render () / effect 1 / url_hash: "),
                                (v1529.clone()),
                            )),
                            string(""),
                        );
                        let v1532: bool = true;
                        leptos::logging::log!("{}", v1530);
                        if contains(v1529.clone(), string("#")) {
                            let v1541: &str = &*v1529;
                            v1484(v1541, Default::default());
                            ()
                        }
                    }
                    {
                        let v1563: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_2.1.clone(), true); //;
                        true
                    }
                } else {
                    let v1566: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v1493.l0.clone());
                    let v1568: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v1566);
                    let v1574: &str = &*v1512;
                    let v1598: std::string::String = String::from(v1574);
                    let v1619: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v1568.l2.clone(), v1598); //;
                    false
                };
                let v1622: bool = true; /*;
                                        let v1624: bool = */
            }); //;
            let v1626: Func0<()> = _func0_from_v1501;
            let v1628: bool = true;
            leptos::prelude::Effect::new(move |_| v1626());
            let v1631: bool = true;
            let _func0_from_v1629 = Func0::from(move || {
                //;
                let v1633: leptos::prelude::Memo<std::string::String> = v1482.hash;
                let v1636: std::string::String =
                    Dice_ui::method51(leptos::prelude::Memo::get(&v1633));
                let v1638: Option<&str> = v1636.strip_prefix('#');
                let v1639: string = string("r#\"\"#");
                let v1640: &str = r#""#;
                let v1642: &str = v1638.unwrap_or(v1640);
                let v1644: Result<leptos_router::location::Url, std::string::String> =
                    leptos_router::location::Url::try_from(v1642);
                let v1645 = Dice_ui::method52();
                let v1646 = Dice_ui::method53();
                let v1647: Dice_ui::US20 = match &v1644 {
                    Err(v1644_1_0) => v1646(v1644_1_0.clone()),
                    Ok(v1644_0_0) => v1645(v1644_0_0.clone()),
                };
                let v1654: std::string::String = format!("{:#?}", v1647.clone());
                let v1678: string = append(
                    (append(
                        string("content.render () / effect 2 / hash_url: "),
                        (fable_library_rust::String_::fromString(v1654)),
                    )),
                    string(""),
                );
                let v1680: bool = true;
                leptos::logging::log!("{}", v1678);
                let v1792: bool = match &v1647 {
                    Dice_ui::US20::US20_0(v1647_0_0) => {
                        let v1681: leptos_router::location::Url = v1647_0_0.clone();
                        let v1683: std::string::String = v1681.clone().pathname;
                        let v1695: Dice_ui::US21 = if startsWith3(
                            fable_library_rust::String_::fromString(v1683),
                            string("/dice"),
                            false,
                        ) {
                            Dice_ui::US21::US21_0(Dice_ui::US18::US18_1(Dice_ui::US19::US19_0))
                        } else {
                            Dice_ui::US21::US21_1
                        };
                        let v1712: Dice_ui::US21 = match &v1695 {
                            Dice_ui::US21::US21_0(v1695_0_0) => Dice_ui::US21::US21_0(
                                match &v1695 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1699: std::string::String = v1681.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1699),
                                    string("/lists"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_2)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1729: Dice_ui::US21 = match &v1712 {
                            Dice_ui::US21::US21_0(v1712_0_0) => Dice_ui::US21::US21_0(
                                match &v1712 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1716: std::string::String = v1681.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1716),
                                    string("/transactions"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_3)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1746: Dice_ui::US21 = match &v1729 {
                            Dice_ui::US21::US21_0(v1729_0_0) => Dice_ui::US21::US21_0(
                                match &v1729 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1733: std::string::String = v1681.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1733),
                                    string("/settings"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_4)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1751: Dice_ui::US18 = match &v1746 {
                            Dice_ui::US21::US21_0(v1746_0_0) => match &v1746 {
                                Dice_ui::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            _ => Dice_ui::US18::US18_1(Dice_ui::US19::US19_0),
                        };
                        let v1758: std::string::String = format!("{:#?}", v1751.clone());
                        let v1782: string = append(
                            (append(
                                string("content.render () / effect 2 / new_tab: "),
                                (fable_library_rust::String_::fromString(v1758)),
                            )),
                            string(""),
                        );
                        let v1784: bool = true;
                        leptos::logging::log!("{}", v1782);
                        let v1786: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_1.1.clone(), v1751); //;
                        true
                    }
                    Dice_ui::US20::US20_1(v1647_1_0) => {
                        let v1788: string = append(
                            (append(
                                string("content.render () / effect 2 / hash_url error: "),
                                (toString(v1647_1_0.clone())),
                            )),
                            string(""),
                        );
                        let v1790: bool = true;
                        leptos::logging::log!("{}", v1788);
                        false
                    }
                };
                let v1794: bool = true; /*;
                                        let v1796: bool = */
            }); //;
            let v1798: Func0<()> = _func0_from_v1629;
            let v1800: bool = true;
            leptos::prelude::Effect::new(move |_| v1798());
            let v1802: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v1803: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v1804: string = append(
                (append((append(string(" "), (v1803))), string(""))),
                string(""),
            );
            let v1806: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v1808: Dice_ui::US18 = leptos::prelude::ReadSignal::get(&v1496.clone());
            let v4817: Dice_ui::US22 = match &v1808 {
                Dice_ui::US18::US18_1(v1808_1_0) => {
                    let v1812: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v1814: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v1816: LrcPtr<Dice_ui::Heap2> = v1814.unwrap();
                    let v1819: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v1822: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v1816 = v1816.clone();
                                move || Dice_ui::closure43(v1816.clone(), ())
                            })()
                        });
                    let v1825: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1822 = v1822.clone();
                            move || Dice_ui::closure45(v1822.clone(), ())
                        })()
                    });
                    let v1828: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1816 = v1816.clone();
                            let v1822 = v1822.clone();
                            move || Dice_ui::closure46(v1816.clone(), v1822.clone(), ())
                        })()
                    });
                    let v1831: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1828 = v1828.clone();
                            move || Dice_ui::closure47(v1828.clone(), ())
                        })()
                    });
                    let v1834: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v1828 = v1828.clone();
                                move || Dice_ui::closure50(v1828.clone(), ())
                            })()
                        });
                    let v1836: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method69(
                        v1831,
                        Func1::new(move |v_6: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure53((), v_6)
                        }),
                    );
                    let v1842: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v1836.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v1844: bool = true;
                    leptos::logging::log!("{}", v1842);
                    let v1847: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1834 = v1834.clone();
                            let v1836 = v1836.clone();
                            move || Dice_ui::closure78(v1834.clone(), v1836.clone(), ())
                        })()
                    });
                    let v1850: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1847 = v1847.clone();
                            move || Dice_ui::closure89(v1847.clone(), ())
                        })()
                    });
                    let v1855: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method135(
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v1850 = v1850.clone();
                                move || Dice_ui::closure96(v1850.clone(), ())
                            })()
                        }),
                        Func1::new(move |v_7: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure100((), v_7)
                        }),
                    );
                    let v1861: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v1855.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v1863: bool = true;
                    leptos::logging::log!("{}", v1861);
                    let v1866: bool = true;
                    let _func1_from_v1864 = Func1::from(move |value| {
                        //;
                        let v1872: string = append(
                            (append(
                                string("dice_view.render (2) / set_max_action / value: "),
                                sprintf!("{:?}", ()),
                            )),
                            string(""),
                        );
                        let v1874: bool = true;
                        leptos::logging::log!("{}", v1872);
                        let v1876: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v1878: bool = */
                            async move {
                                /*;
                                let v1880: bool = */
 //;
                                let v1886: &str = &*string("2.0");
                                let v1910: std::string::String = String::from(v1886);
                                let v1935: &str = &*string("dontcare");
                                let v1959: std::string::String = String::from(v1935);
                                let v1984: &str = &*string("EXPERIMENTAL_tx_status");
                                let v2008: std::string::String = String::from(v1984);
                                let v2033: &str =
                                    &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                                let v2057: std::string::String = String::from(v2033);
                                let v2082: &str = &*string("bowen");
                                let v2126: Array<std::string::String> =
                                    new_array(&[v2057, String::from(v2082)]);
                                let v2128: Vec<std::string::String> = v2126.to_vec();
                                let v2130: crate::model::near::rpc::RpcInput =
                                    crate::model::near::rpc::RpcInput {
                                        jsonrpc: v1910,
                                        id: v1959,
                                        method: v2008,
                                        params: v2128,
                                    };
                                let v2131: string = Dice_ui::method142();
                                let v2136: &str = &*v2131;
                                let v2180: std::string::String =
                                    Dice_ui::method82(String::from(v2136));
                                let v2182: reqwest_wasm::RequestBuilder =
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .post(v2180);
                                let v2185: reqwest_wasm::RequestBuilder = Dice_ui::method84(
                                    reqwest_wasm::RequestBuilder::json(v2182, &v2130),
                                );
                                let v2187: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                reqwest_wasm::Response,
                                                reqwest_wasm::Error,
                                            >,
                                        >,
                                    >,
                                > = Box::pin(reqwest_wasm::RequestBuilder::send(v2185));
                                let v2189: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                    v2187.await;
                                let v2190 = Dice_ui::method85();
                                let v2195: Result<reqwest_wasm::Response, std::string::String> =
                                    v2189.map_err(|x| v2190(x));
                                let v2206: reqwest_wasm::Response = v2195?;
                                let v2208: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                std::string::String,
                                                reqwest_wasm::Error,
                                            >,
                                        >,
                                    >,
                                > = Box::pin(reqwest_wasm::Response::text(v2206));
                                let v2210: Result<std::string::String, reqwest_wasm::Error> =
                                    v2208.await;
                                let v2211 = Dice_ui::method85();
                                let v2216: Result<std::string::String, std::string::String> =
                                    v2210.map_err(|x| v2211(x));
                                let v2229: Result<Dice_ui::US14, std::string::String> =
                                    Ok::<Dice_ui::US14, std::string::String>(
                                        Dice_ui::US14::US14_0(v2216?),
                                    );
                                let v2235: string =
                            Dice_ui::method8(200_i64,
                                             append((append(string("dice_view.render (x) / roll_action new_arc_action / result1 / result: "),
                                                            sprintf!("{:?}",
                                                                     v2229.clone()))),
                                                    string("")));
                                let v2237: bool = true;
                                leptos::logging::log!("{}", v2235);
                                let v2238 = Dice_ui::method143();
                                let v2239 = Dice_ui::method144();
                                let v2240: Dice_ui::US57 = match &v2229 {
                                    Err(v2229_1_0) => v2239(v2229_1_0.clone()),
                                    Ok(v2229_0_0) => v2238(v2229_0_0.clone()),
                                };
                                let v2538: Dice_ui::US58 = if let Dice_ui::US57::US57_0(v2240_0_0) =
                                    &v2240
                                {
                                    let v2241: Dice_ui::US14 = v2240_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v2241_0_0) = &v2241 {
                                        let v2245: string = Dice_ui::method40(
                                            fable_library_rust::String_::fromString(
                                                v2241_0_0.clone(),
                                            ),
                                        );
                                        let v2250: &str = &*v2245;
                                        let v2271: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            serde_json::Error,
                                        > = serde_json::from_str(&v2250);
                                        let v2272 = Dice_ui::method41();
                                        let v2284: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            std::string::String,
                                        > = v2271.map_err(|x| v2272(x));
                                        let v2287 = Dice_ui::method145();
                                        let v2288 = Dice_ui::method146();
                                        let v2289: Dice_ui::US60 = match &v2284 {
                                            Err(v2284_1_0) => v2288(v2284_1_0.clone()),
                                            Ok(v2284_0_0) => v2287(v2284_0_0.clone()),
                                        };
                                        let v2522: Dice_ui::US61 = match &v2289 {
                                            Dice_ui::US60::US60_0(v2289_0_0) => {
                                                let v2290: crate::model::near::rpc::RpcResponse =
                                                    v2289_0_0.clone();
                                                let v2292: std::string::String =
                                                    v2290.clone().jsonrpc;
                                                let v2294: Option<
                                                    crate::model::near::rpc::TransactionStatus,
                                                > = v2290.clone().result;
                                                let v2296: Option<(
                                                    Array<(
                                                        std::string::String,
                                                        Array<
                                                            std::collections::HashMap<
                                                                std::string::String,
                                                                (
                                                                    std::string::String,
                                                                    Option<std::string::String>,
                                                                    Option<f64>,
                                                                    Option<std::string::String>,
                                                                ),
                                                            >,
                                                        >,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        Array<std::string::String>,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        u64,
                                                        Array<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        u8,
                                                        Array<std::string::String>,
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            std::string::String,
                                                        >,
                                                        Option<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                    )>,
                                                )> = map(Dice_ui::method131(), v2294);
                                                let v2475: Option<
                                                    crate::model::near::rpc::RpcError,
                                                > = v2290.clone().error;
                                                Dice_ui::US61::US61_0(
                                                    v2292,
                                                    v2296,
                                                    map(Dice_ui::method133(), v2475),
                                                    v2290.id,
                                                )
                                            }
                                            Dice_ui::US60::US60_1(v2289_1_0) => {
                                                Dice_ui::US61::US61_1(v2289_1_0.clone())
                                            }
                                        };
                                        match &v2522 {
                                            Dice_ui::US61::US61_0(
                                                v2522_0_0,
                                                v2522_0_1,
                                                v2522_0_2,
                                                v2522_0_3,
                                            ) => Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                                v2522_0_0.clone(),
                                                v2522_0_1.clone(),
                                                v2522_0_2.clone(),
                                                v2522_0_3.clone(),
                                            )),
                                            Dice_ui::US61::US61_1(v2522_1_0) => {
                                                Dice_ui::US58::US58_1(v2522_1_0.clone())
                                            }
                                        }
                                    } else {
                                        Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                    }
                                } else {
                                    Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                };
                                let v2544: Result<Dice_ui::US59, std::string::String> = match &v2538
                                {
                                    Dice_ui::US58::US58_0(v2538_0_0) => {
                                        Ok::<Dice_ui::US59, std::string::String>(v2538_0_0.clone())
                                    }
                                    Dice_ui::US58::US58_1(v2538_1_0) => {
                                        Err::<Dice_ui::US59, std::string::String>(v2538_1_0.clone())
                                    }
                                };
                                let v2550: string =
                            Dice_ui::method8(200_i64,
                                             append((append(string("dice_view.render (x) / roll_action new_arc_action / result2 / result: "),
                                                            sprintf!("{:?}",
                                                                     v2544.clone()))),
                                                    string("")));
                                let v2552: bool = true;
                                leptos::logging::log!("{}", v2550);
                                let v2553: string = string("}");
                                let v2558: bool = true;
                                let v2544 = v2544;
                                let v2563: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; v2544 "), (v2553))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v2564: bool = true;
                                v2544
                            },
                        ); // rust.fix_closure';
                        let v2566 = __future_init;
                        let v2569: LrcPtr<Dice_ui::Heap31> =
                            LrcPtr::new(Dice_ui::Heap31 { l0: v2566 });
                        let v2571: bool = true;
                        v2569 /*;
                              let v2573: bool = */
                    }); //;
                    let v2575: Func1<LrcPtr<Dice_ui::Heap30>, LrcPtr<Dice_ui::Heap31>> =
                        _func1_from_v1864;
                    let v2578: leptos::prelude::ArcAction<
                        LrcPtr<Dice_ui::Heap30>,
                        Result<Dice_ui::US59, std::string::String>,
                    > = leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap30>| {
                        Func1::new({
                            let v2575 = v2575.clone();
                            move |v_8: LrcPtr<Dice_ui::Heap30>| {
                                Dice_ui::closure116(v2575.clone(), v_8)
                            }
                        })(value.clone())
                    });
                    let v2581: leptos::prelude::ArcMemo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2578 = v2578.clone();
                            move || Dice_ui::closure117(v2578.clone(), ())
                        })()
                    });
                    let v2584: leptos::prelude::ArcMemo<Option<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2581 = v2581.clone();
                                move || Dice_ui::closure122(v2581.clone(), ())
                            })()
                        });
                    let v2587: leptos::prelude::ArcMemo<Dice_ui::US31> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v1816 = v1816.clone();
                                move || Dice_ui::closure127(v1816.clone(), ())
                            })()
                        });
                    let v2590: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<std::string::String>,
                                    leptos::prelude::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1816 = v1816.clone();
                            move || Dice_ui::closure128(v1816.clone(), ())
                        })()
                    });
                    let v2593: leptos::prelude::ArcMemo<
                        Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2590 = v2590.clone();
                            move || Dice_ui::closure131(v2590.clone(), ())
                        })()
                    });
                    let v2594: string = string("vec![]");
                    let v2595: Vec<leptos::prelude::AnyView> = vec![];
                    let v2597: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2595);
                    let v2599: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v2601() -> string {
                        Dice_ui::closure132((), ())
                    }
                    let v2602 = {
                        let clo = Func0::from(v2601);
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    fn v2604() -> bool {
                        Dice_ui::closure133((), ())
                    }
                    let v2605 = {
                        let clo_1 = Func0::from(v2604);
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v2607: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v2611: string = string("vec![v2597]");
                    let v2612: Vec<leptos::prelude::AnyView> = vec![v2597];
                    let v2614: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2612);
                    let v2616: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2614);
                    let v2619: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2607))),
                                        string(">move || { v2616 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2621: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v2616 }</div> };
                    let v2623: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2621);
                    let v2624: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2602(())");
                    let v2627: string = append(
                        (append(
                            string(" open=move || v2605(())"),
                            (append(
                                (append((append(string(" "), (v2624))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v2630 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure134((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v2633 = {
                        let clo_3 = Func0::new(move || Dice_ui::closure135((), ()));
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v2634: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v2633(()) + \" \" + &v2630(())");
                    let v2635: string = append(
                        (append((append(string(" "), (v2634))), string(""))),
                        string(""),
                    );
                    let v2637: string = string(" class=\"flex items-center gap-2\"");
                    let v2640: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v2641: string = (Dice_ui::method158())();
                    let v2646: &str = &*v2641;
                    let v2670: std::string::String = String::from(v2646);
                    let v2691: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v2670),
                    );
                    let v2695: string = string("vec![v2691]");
                    let v2696: Vec<leptos::prelude::AnyView> = vec![v2691];
                    let v2698: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2696);
                    let v2700: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2698);
                    let v2703: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v2640))),
                                        string(">move || { v2700 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2705: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v2700 }</span> };
                    let v2707: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2705);
                    let v2711: string = string("vec![v2707]");
                    let v2712: Vec<leptos::prelude::AnyView> = vec![v2707];
                    let v2714: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2712);
                    let v2716: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2714);
                    let v2718: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2637))),
                                        string(">move || { v2716 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2720: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v2716 }</div> };
                    let v2722: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2720);
                    let v2724: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v2726() -> string {
                        Dice_ui::closure137((), ())
                    }
                    let v2727 = {
                        let clo_4 = Func0::from(v2726);
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v2735: string =
                            string(" class=move || \" \".to_owned() + &v2727(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v2737: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v2741: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v2737))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v2742: string = string("vec![]");
                    let v2743: Vec<leptos::prelude::AnyView> = vec![];
                    let v2745: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2743);
                    let v2747: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2745);
                    let v2750: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v2741))),
                                        string(">move || { v2747 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2752: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v2747 }</path> };
                    let v2754: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2752);
                    let v2758: string = string("vec![v2754]");
                    let v2759: Vec<leptos::prelude::AnyView> = vec![v2754];
                    let v2761: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2759);
                    let v2763: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2761);
                    let v2766: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v2735))),
                                        string(">move || { v2763 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2768: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v2727(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v2763 }</svg> };
                    let v2770: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2768);
                    let v2774: string = string("vec![v2770]");
                    let v2775: Vec<leptos::prelude::AnyView> = vec![v2770];
                    let v2777: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2775);
                    let v2779: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2777);
                    let v2781: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v2724))),
                                        string(">move || { v2779 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2783: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v2779 }</span> };
                    let v2785: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2783);
                    let v2793: string = string("vec![v2722, v2785]");
                    let v2794: Vec<leptos::prelude::AnyView> = vec![v2722, v2785];
                    let v2796: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2794);
                    let v2798: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2796);
                    let v2801: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v2635))),
                                        string(">move || { v2798 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2803: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v2633(()) + " " + &v2630(())>move || { v2798 }</summary> };
                    let v2805: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2803);
                    let v2807: string = string(" class=\"flex flex-1 flex-col\"");
                    let v2811: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method165(Func0::new(move || {
                            Func0::new({
                                let v1816 = v1816.clone();
                                let v2578 = v2578.clone();
                                let v2584 = v2584.clone();
                                let v2587 = v2587.clone();
                                let v2593 = v2593.clone();
                                move || {
                                    Dice_ui::closure138(
                                        v1816.clone(),
                                        v2578.clone(),
                                        v2584.clone(),
                                        v2587.clone(),
                                        v2593.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v2813: leptos::prelude::Fragment = (move || v2811())();
                    let v2815: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2813);
                    let v2817: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2807))),
                                        string(">move || { v2815 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2819: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v2815 }</div> };
                    let v2821: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2819);
                    let v2828: string = string("vec![v2805, v2821]");
                    let v2829: Vec<leptos::prelude::AnyView> = vec![v2805, v2821];
                    let v2831: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2829);
                    let v2833: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2831);
                    let v2836: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v2627))),
                                        string(">move || { v2833 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2838: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v2605(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v2602(())>move || { v2833 }</details> };
                    let v2840: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2838);
                    let v2847: string = string("vec![v2623, v2840]");
                    let v2848: Vec<leptos::prelude::AnyView> = vec![v2623, v2840];
                    let v2850: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2848);
                    let v2852: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2850);
                    let v2854: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2599))),
                                        string(">move || { v2852 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2856: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v2852 }</div> };
                    let v2858: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2856);
                    let v2859: string = string("vec![]");
                    let v2860: Vec<leptos::prelude::AnyView> = vec![];
                    let v2862: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2860);
                    let v2864: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v2866 = {
                        let clo_5 = Func0::from(v2601);
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v2868 = {
                        let clo_6 = Func0::from(v2604);
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v2870: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v2874: string = string("vec![v2862]");
                    let v2875: Vec<leptos::prelude::AnyView> = vec![v2862];
                    let v2877: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2875);
                    let v2879: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2877);
                    let v2881: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2870))),
                                        string(">move || { v2879 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2883: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v2879 }</div> };
                    let v2885: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2883);
                    let v2886: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2866(())");
                    let v2889: string = append(
                        (append(
                            string(" open=move || v2868(())"),
                            (append(
                                (append((append(string(" "), (v2886))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v2892 = {
                        let clo_7 = Func0::new(move || Dice_ui::closure154((), ()));
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v2895 = {
                        let clo_8 = Func0::new(move || Dice_ui::closure155((), ()));
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v2896: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v2895(()) + \" \" + &v2892(())");
                    let v2897: string = append(
                        (append((append(string(" "), (v2896))), string(""))),
                        string(""),
                    );
                    let v2899: string = string(" class=\"flex items-center gap-2\"");
                    let v2902: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v2903: string = (Dice_ui::method168())();
                    let v2908: &str = &*v2903;
                    let v2932: std::string::String = String::from(v2908);
                    let v2953: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v2932),
                    );
                    let v2957: string = string("vec![v2953]");
                    let v2958: Vec<leptos::prelude::AnyView> = vec![v2953];
                    let v2960: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2958);
                    let v2962: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2960);
                    let v2964: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v2902))),
                                        string(">move || { v2962 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2966: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v2962 }</span> };
                    let v2968: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2966);
                    let v2972: string = string("vec![v2968]");
                    let v2973: Vec<leptos::prelude::AnyView> = vec![v2968];
                    let v2975: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2973);
                    let v2977: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2975);
                    let v2979: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2899))),
                                        string(">move || { v2977 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2981: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v2977 }</div> };
                    let v2983: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2981);
                    let v2985: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v2987 = {
                        let clo_9 = Func0::from(v2726);
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v2995: string =
                            string(" class=move || \" \".to_owned() + &v2987(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v2997: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v3001: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v2997))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3002: string = string("vec![]");
                    let v3003: Vec<leptos::prelude::AnyView> = vec![];
                    let v3005: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3003);
                    let v3007: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3005);
                    let v3009: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3001))),
                                        string(">move || { v3007 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3011: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3007 }</path> };
                    let v3013: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3011);
                    let v3017: string = string("vec![v3013]");
                    let v3018: Vec<leptos::prelude::AnyView> = vec![v3013];
                    let v3020: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3018);
                    let v3022: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3020);
                    let v3024: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v2995))),
                                        string(">move || { v3022 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3026: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v2987(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3022 }</svg> };
                    let v3028: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3026);
                    let v3032: string = string("vec![v3028]");
                    let v3033: Vec<leptos::prelude::AnyView> = vec![v3028];
                    let v3035: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3033);
                    let v3037: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3035);
                    let v3039: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v2985))),
                                        string(">move || { v3037 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3041: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3037 }</span> };
                    let v3043: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3041);
                    let v3050: string = string("vec![v2983, v3043]");
                    let v3051: Vec<leptos::prelude::AnyView> = vec![v2983, v3043];
                    let v3053: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3051);
                    let v3055: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3053);
                    let v3057: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v2897))),
                                        string(">move || { v3055 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3059: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v2895(()) + " " + &v2892(())>move || { v3055 }</summary> };
                    let v3061: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3059);
                    let v3063: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3067: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method165(Func0::new(move || {
                            Func0::new({
                                let v1828 = v1828.clone();
                                let v1847 = v1847.clone();
                                let v1855 = v1855.clone();
                                move || {
                                    Dice_ui::closure157(
                                        v1855.clone(),
                                        v1847.clone(),
                                        v1828.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3069: leptos::prelude::Fragment = (move || v3067())();
                    let v3071: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3069);
                    let v3073: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3063))),
                                        string(">move || { v3071 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3075: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3071 }</div> };
                    let v3077: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3075);
                    let v3084: string = string("vec![v3061, v3077]");
                    let v3085: Vec<leptos::prelude::AnyView> = vec![v3061, v3077];
                    let v3087: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3085);
                    let v3089: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3087);
                    let v3091: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v2889))),
                                        string(">move || { v3089 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3093: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v2868(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v2866(())>move || { v3089 }</details> };
                    let v3095: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3093);
                    let v3102: string = string("vec![v2885, v3095]");
                    let v3103: Vec<leptos::prelude::AnyView> = vec![v2885, v3095];
                    let v3105: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3103);
                    let v3107: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3105);
                    let v3109: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2864))),
                                        string(">move || { v3107 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3111: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3107 }</div> };
                    let v3113: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3111);
                    let v3120: string = string("vec![v2858, v3113]");
                    let v3121: Vec<leptos::prelude::AnyView> = vec![v2858, v3113];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3121))
                }
                Dice_ui::US18::US18_2 => {
                    let v3127: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v3129: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3131: LrcPtr<Dice_ui::Heap2> = v3129.unwrap();
                    let v3137: &str = &*string("???");
                    let v3161: std::string::String = String::from(v3137);
                    let v3182: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3161),
                    );
                    let v3186: string = string("vec![v3182]");
                    let v3187: Vec<leptos::prelude::AnyView> = vec![v3182];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3187))
                }
                Dice_ui::US18::US18_4 => {
                    let v3890: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v3892: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3894: LrcPtr<Dice_ui::Heap2> = v3892.unwrap();
                    let v3897: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3894 = v3894.clone();
                            move || Dice_ui::closure162(v3894.clone(), ())
                        })()
                    });
                    let patternInput_3: (
                        leptos::prelude::ReadSignal<i32>,
                        leptos::prelude::WriteSignal<i32>,
                    ) = leptos::prelude::signal(0_i32);
                    let v3900: leptos::prelude::WriteSignal<i32> = patternInput_3.1.clone();
                    let v3903: leptos::prelude::ArcMemo<
                        Vec<(
                            i32,
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let patternInput_3 = patternInput_3.clone();
                            let v3897 = v3897.clone();
                            move || Dice_ui::closure165(v3897.clone(), patternInput_3.0.clone(), ())
                        })()
                    });
                    let v3906: leptos::prelude::ArcMemo<i32> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3903 = v3903.clone();
                                move || Dice_ui::closure166(v3903.clone(), ())
                            })()
                        });
                    let v3909: bool = true;
                    let _func0_from_v3907 = Func0::from(move || {
                        //;
                        let v3912: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v3894.l0.clone());
                        let v3914: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v3912);
                        let v3917: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v3914.l3.clone(),
                            |x: &mut /*;
                             let v3918: */
                             LrcPtr<Dice_ui::Heap0> /* = getZero();
                                                    let v3923: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v3897 = v3897.clone();
                                    move |v_9: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure167(v3897.clone(), v_9)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v3925: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v3900.clone(),
                            |x: &mut /*;
                             let v3926: */
                             i32 /* = getZero();
                                 let v3931: bool =
                                     */| {
                                *x = Func1::new(move |v_10: i32| Dice_ui::closure168((), v_10))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v3933: bool = true; /*;
                                                let v3935: bool = */
                    }); //;
                    let v3937: Func0<()> = _func0_from_v3907;
                    let v3940 = {
                        let clo_10 = Func0::new(move || Dice_ui::closure169((), ()));
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v3952: string =
                            string(" class=move || \" \".to_owned() + &v3940(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v3958: string = string(
                        " d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v3959: string = string("vec![]");
                    let v3960: Vec<leptos::prelude::AnyView> = vec![];
                    let v3962: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3960);
                    let v3964: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3962);
                    let v3967: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3958))),
                                        string(">move || { v3964 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3969: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">move || { v3964 }</path> };
                    let v3971: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3969);
                    let v3975: string = string("vec![v3971]");
                    let v3976: Vec<leptos::prelude::AnyView> = vec![v3971];
                    let v3978: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3976);
                    let v3980: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3978);
                    let v3983: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3952))),
                                        string(">move || { v3980 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3985: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3940(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3980 }</svg> };
                    let v3990 = {
                        let clo_11 = Func0::new(move || Dice_ui::closure170((), ()));
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v3991: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v3990(())");
                    let v3994: string = append(
                        (append(
                            string(" aria-label=\"Add\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v3937()"),
                                    (append(
                                        (append((append(string(" "), (v3991))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3996: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3985);
                    let v4000: string = string("vec![v3996]");
                    let v4001: Vec<leptos::prelude::AnyView> = vec![v3996];
                    let v4003: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4001);
                    let v4005: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4003);
                    let v4008: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v3994))),
                                        string(">move || { v4005 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4010: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Add" on:click=move |_| v3937() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v3990(())>move || { v4005 }</button> };
                    let v4012: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4010);
                    let v4013: string = string("vec![]");
                    let v4014: Vec<leptos::prelude::AnyView> = vec![];
                    let v4016: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4014);
                    let v4018: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v4020() -> string {
                        Dice_ui::closure132((), ())
                    }
                    let v4021 = {
                        let clo_12 = Func0::from(v4020);
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    fn v4023() -> bool {
                        Dice_ui::closure133((), ())
                    }
                    let v4024 = {
                        let clo_13 = Func0::from(v4023);
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v4026: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4030: string = string("vec![v4012]");
                    let v4031: Vec<leptos::prelude::AnyView> = vec![v4012];
                    let v4033: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4031);
                    let v4035: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4033);
                    let v4038: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4026))),
                                        string(">move || { v4035 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4040: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4035 }</div> };
                    let v4042: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4040);
                    let v4043: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4021(())");
                    let v4046: string = append(
                        (append(
                            string(" open=move || v4024(())"),
                            (append(
                                (append((append(string(" "), (v4043))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4049 = {
                        let clo_14 = Func0::new(move || Dice_ui::closure171((), ()));
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v4052 = {
                        let clo_15 = Func0::new({
                            let v4012 = v4012.clone();
                            move || Dice_ui::closure172(v4012.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v4053: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4052(()) + \" \" + &v4049(())");
                    let v4054: string = append(
                        (append((append(string(" "), (v4053))), string(""))),
                        string(""),
                    );
                    let v4056: string = string(" class=\"flex items-center gap-2\"");
                    let v4059: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4060: string = (Dice_ui::method180(v4012.clone()))();
                    let v4065: &str = &*v4060;
                    let v4089: std::string::String = String::from(v4065);
                    let v4110: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4089),
                    );
                    let v4114: string = string("vec![v4110]");
                    let v4115: Vec<leptos::prelude::AnyView> = vec![v4110];
                    let v4117: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4115);
                    let v4119: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4117);
                    let v4122: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4059))),
                                        string(">move || { v4119 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4124: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4119 }</span> };
                    let v4126: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4124);
                    let v4130: string = string("vec![v4126]");
                    let v4131: Vec<leptos::prelude::AnyView> = vec![v4126];
                    let v4133: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4131);
                    let v4135: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4133);
                    let v4137: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4056))),
                                        string(">move || { v4135 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4139: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4135 }</div> };
                    let v4141: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4139);
                    let v4143: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v4145() -> string {
                        Dice_ui::closure137((), ())
                    }
                    let v4146 = {
                        let clo_16 = Func0::from(v4145);
                        Func1::new({
                            let clo_16 = clo_16.clone();
                            move |arg_16: ()| clo_16()
                        })
                    };
                    let v4154: string =
                            string(" class=move || \" \".to_owned() + &v4146(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4156: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v4160: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4156))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4161: string = string("vec![]");
                    let v4162: Vec<leptos::prelude::AnyView> = vec![];
                    let v4164: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4162);
                    let v4166: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4164);
                    let v4168: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4160))),
                                        string(">move || { v4166 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4170: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4166 }</path> };
                    let v4172: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4170);
                    let v4176: string = string("vec![v4172]");
                    let v4177: Vec<leptos::prelude::AnyView> = vec![v4172];
                    let v4179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4177);
                    let v4181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4179);
                    let v4183: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4154))),
                                        string(">move || { v4181 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4185: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4146(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4181 }</svg> };
                    let v4187: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4185);
                    let v4191: string = string("vec![v4187]");
                    let v4192: Vec<leptos::prelude::AnyView> = vec![v4187];
                    let v4194: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4192);
                    let v4196: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4194);
                    let v4198: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4143))),
                                        string(">move || { v4196 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4200: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4196 }</span> };
                    let v4202: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4200);
                    let v4210: string = string("vec![v4141, v4202]");
                    let v4211: Vec<leptos::prelude::AnyView> = vec![v4141, v4202];
                    let v4213: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4211);
                    let v4215: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4213);
                    let v4218: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4054))),
                                        string(">move || { v4215 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4220: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4052(()) + " " + &v4049(())>move || { v4215 }</summary> };
                    let v4222: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4220);
                    let v4224: string = string(" class=\"flex flex-1 flex-col\"");
                    let v4228: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method165(Func0::new(move || {
                            Func0::new({
                                let v3894 = v3894.clone();
                                let v3897 = v3897.clone();
                                let v3900 = v3900.clone();
                                let v3903 = v3903.clone();
                                let v3906 = v3906.clone();
                                move || {
                                    Dice_ui::closure174(
                                        v3894.clone(),
                                        v3903.clone(),
                                        v3906.clone(),
                                        v3897.clone(),
                                        v3900.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v4230: leptos::prelude::Fragment = (move || v4228())();
                    let v4232: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4230);
                    let v4234: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4224))),
                                        string(">move || { v4232 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4236: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4232 }</div> };
                    let v4238: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4236);
                    let v4245: string = string("vec![v4222, v4238]");
                    let v4246: Vec<leptos::prelude::AnyView> = vec![v4222, v4238];
                    let v4248: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4246);
                    let v4250: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4248);
                    let v4253: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4046))),
                                        string(">move || { v4250 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4255: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4024(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4021(())>move || { v4250 }</details> };
                    let v4257: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4255);
                    let v4264: string = string("vec![v4042, v4257]");
                    let v4265: Vec<leptos::prelude::AnyView> = vec![v4042, v4257];
                    let v4267: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4265);
                    let v4269: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4267);
                    let v4271: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4018))),
                                        string(">move || { v4269 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4273: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4269 }</div> };
                    let v4275: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4273);
                    let v4276: string = string("vec![]");
                    let v4277: Vec<leptos::prelude::AnyView> = vec![];
                    let v4279: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4277);
                    let v4281: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v4283 = {
                        let clo_17 = Func0::from(v4020);
                        Func1::new({
                            let clo_17 = clo_17.clone();
                            move |arg_17: ()| clo_17()
                        })
                    };
                    let v4285 = {
                        let clo_18 = Func0::from(v4023);
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v4287: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4291: string = string("vec![v4279]");
                    let v4292: Vec<leptos::prelude::AnyView> = vec![v4279];
                    let v4294: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4292);
                    let v4296: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4294);
                    let v4298: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4287))),
                                        string(">move || { v4296 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4300: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4296 }</div> };
                    let v4302: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4300);
                    let v4303: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4283(())");
                    let v4306: string = append(
                        (append(
                            string(" open=move || v4285(())"),
                            (append(
                                (append((append(string(" "), (v4303))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4309 = {
                        let clo_19 = Func0::new(move || Dice_ui::closure190((), ()));
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    let v4312 = {
                        let clo_20 = Func0::new(move || Dice_ui::closure191((), ()));
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v4313: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4312(()) + \" \" + &v4309(())");
                    let v4314: string = append(
                        (append((append(string(" "), (v4313))), string(""))),
                        string(""),
                    );
                    let v4316: string = string(" class=\"flex items-center gap-2\"");
                    let v4319: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4320: string = (Dice_ui::method193())();
                    let v4325: &str = &*v4320;
                    let v4349: std::string::String = String::from(v4325);
                    let v4370: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4349),
                    );
                    let v4374: string = string("vec![v4370]");
                    let v4375: Vec<leptos::prelude::AnyView> = vec![v4370];
                    let v4377: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4375);
                    let v4379: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4377);
                    let v4381: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4319))),
                                        string(">move || { v4379 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4383: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4379 }</span> };
                    let v4385: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4383);
                    let v4389: string = string("vec![v4385]");
                    let v4390: Vec<leptos::prelude::AnyView> = vec![v4385];
                    let v4392: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4390);
                    let v4394: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4392);
                    let v4396: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4316))),
                                        string(">move || { v4394 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4398: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4394 }</div> };
                    let v4400: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4398);
                    let v4402: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v4404 = {
                        let clo_21 = Func0::from(v4145);
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v4412: string =
                            string(" class=move || \" \".to_owned() + &v4404(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4414: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v4418: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4414))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4419: string = string("vec![]");
                    let v4420: Vec<leptos::prelude::AnyView> = vec![];
                    let v4422: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4420);
                    let v4424: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4422);
                    let v4426: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4418))),
                                        string(">move || { v4424 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4428: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4424 }</path> };
                    let v4430: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4428);
                    let v4434: string = string("vec![v4430]");
                    let v4435: Vec<leptos::prelude::AnyView> = vec![v4430];
                    let v4437: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4435);
                    let v4439: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4437);
                    let v4441: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4412))),
                                        string(">move || { v4439 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4443: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4404(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4439 }</svg> };
                    let v4445: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4443);
                    let v4449: string = string("vec![v4445]");
                    let v4450: Vec<leptos::prelude::AnyView> = vec![v4445];
                    let v4452: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4450);
                    let v4454: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4452);
                    let v4456: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4402))),
                                        string(">move || { v4454 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4458: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4454 }</span> };
                    let v4460: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4458);
                    let v4467: string = string("vec![v4400, v4460]");
                    let v4468: Vec<leptos::prelude::AnyView> = vec![v4400, v4460];
                    let v4470: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4468);
                    let v4472: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4470);
                    let v4474: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4314))),
                                        string(">move || { v4472 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4476: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4312(()) + " " + &v4309(())>move || { v4472 }</summary> };
                    let v4478: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4476);
                    let v4480: string = string(" class=\"flex flex-1 flex-col\"");
                    let v4484: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method165(Func0::new(move || {
                            Func0::new({
                                let v3894 = v3894.clone();
                                move || Dice_ui::closure193(v3894.clone(), ())
                            })()
                        }));
                    let v4486: leptos::prelude::Fragment = (move || v4484())();
                    let v4488: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4486);
                    let v4490: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4480))),
                                        string(">move || { v4488 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4492: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4488 }</div> };
                    let v4494: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4492);
                    let v4501: string = string("vec![v4478, v4494]");
                    let v4502: Vec<leptos::prelude::AnyView> = vec![v4478, v4494];
                    let v4504: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4502);
                    let v4506: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4504);
                    let v4508: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4306))),
                                        string(">move || { v4506 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4510: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4285(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4283(())>move || { v4506 }</details> };
                    let v4512: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4510);
                    let v4519: string = string("vec![v4302, v4512]");
                    let v4520: Vec<leptos::prelude::AnyView> = vec![v4302, v4512];
                    let v4522: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4520);
                    let v4524: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4522);
                    let v4526: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4281))),
                                        string(">move || { v4524 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4528: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4524 }</div> };
                    let v4530: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4528);
                    let v4533: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v3894.l0.clone());
                    let v4535: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v4533);
                    let v4798: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                        &v4535.l1.clone(),
                    ) {
                        let v4539: string = string("vec![]");
                        let v4540: Vec<leptos::prelude::AnyView> = vec![];
                        let v4542: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4540);
                        let v4544: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v4546 = {
                            let clo_22 = Func0::from(v4020);
                            Func1::new({
                                let clo_22 = clo_22.clone();
                                move |arg_22: ()| clo_22()
                            })
                        };
                        let v4548 = {
                            let clo_23 = Func0::from(v4023);
                            Func1::new({
                                let clo_23 = clo_23.clone();
                                move |arg_23: ()| clo_23()
                            })
                        };
                        let v4550: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v4554: string = string("vec![v4542]");
                        let v4555: Vec<leptos::prelude::AnyView> = vec![v4542];
                        let v4557: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4555);
                        let v4559: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4557);
                        let v4561: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4550))),
                                            string(">move || { v4559 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4563: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4559 }</div> };
                        let v4565: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4563);
                        let v4566: string =
                                    string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4546(())");
                        let v4569: string = append(
                            (append(
                                string(" open=move || v4548(())"),
                                (append(
                                    (append((append(string(" "), (v4566))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4572 = {
                            let clo_24 = Func0::new(move || Dice_ui::closure210((), ()));
                            Func1::new({
                                let clo_24 = clo_24.clone();
                                move |arg_24: ()| clo_24()
                            })
                        };
                        let v4575 = {
                            let clo_25 = Func0::new(move || Dice_ui::closure211((), ()));
                            Func1::new({
                                let clo_25 = clo_25.clone();
                                move |arg_25: ()| clo_25()
                            })
                        };
                        let v4576: string =
                                    string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4575(()) + \" \" + &v4572(())");
                        let v4577: string = append(
                            (append((append(string(" "), (v4576))), string(""))),
                            string(""),
                        );
                        let v4579: string = string(" class=\"flex items-center gap-2\"");
                        let v4582: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v4583: string = (Dice_ui::method202())();
                        let v4588: &str = &*v4583;
                        let v4612: std::string::String = String::from(v4588);
                        let v4633: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v4612),
                        );
                        let v4637: string = string("vec![v4633]");
                        let v4638: Vec<leptos::prelude::AnyView> = vec![v4633];
                        let v4640: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4638);
                        let v4642: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4640);
                        let v4644: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4582))),
                                            string(">move || { v4642 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4646: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4642 }</span> };
                        let v4648: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4646);
                        let v4652: string = string("vec![v4648]");
                        let v4653: Vec<leptos::prelude::AnyView> = vec![v4648];
                        let v4655: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4653);
                        let v4657: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4655);
                        let v4659: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4579))),
                                            string(">move || { v4657 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4661: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4657 }</div> };
                        let v4663: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4661);
                        let v4665: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        let v4667 = {
                            let clo_26 = Func0::from(v4145);
                            Func1::new({
                                let clo_26 = clo_26.clone();
                                move |arg_26: ()| clo_26()
                            })
                        };
                        let v4675: string =
                                    string(" class=move || \" \".to_owned() + &v4667(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v4677: string =
                                    string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v4681: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v4677))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4682: string = string("vec![]");
                        let v4683: Vec<leptos::prelude::AnyView> = vec![];
                        let v4685: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4683);
                        let v4687: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4685);
                        let v4689: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4681))),
                                            string(">move || { v4687 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4691: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4687 }</path> };
                        let v4693: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4691);
                        let v4697: string = string("vec![v4693]");
                        let v4698: Vec<leptos::prelude::AnyView> = vec![v4693];
                        let v4700: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4698);
                        let v4702: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4700);
                        let v4704: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4675))),
                                            string(">move || { v4702 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4706: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4667(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4702 }</svg> };
                        let v4708: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4706);
                        let v4712: string = string("vec![v4708]");
                        let v4713: Vec<leptos::prelude::AnyView> = vec![v4708];
                        let v4715: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4713);
                        let v4717: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4715);
                        let v4719: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4665))),
                                            string(">move || { v4717 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4721: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4717 }</span> };
                        let v4723: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4721);
                        let v4730: string = string("vec![v4663, v4723]");
                        let v4731: Vec<leptos::prelude::AnyView> = vec![v4663, v4723];
                        let v4733: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4731);
                        let v4735: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4733);
                        let v4737: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v4577))),
                                            string(">move || { v4735 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4739: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4575(()) + " " + &v4572(())>move || { v4735 }</summary> };
                        let v4741: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4739);
                        let v4743: string = string(" class=\"flex flex-1 flex-col\"");
                        let v4747: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method165(Func0::new(move || {
                                Func0::new(move || Dice_ui::closure213((), ()))()
                            }));
                        let v4749: leptos::prelude::Fragment = (move || v4747())();
                        let v4751: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4749);
                        let v4753: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4743))),
                                            string(">move || { v4751 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4755: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4751 }</div> };
                        let v4757: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4755);
                        let v4764: string = string("vec![v4741, v4757]");
                        let v4765: Vec<leptos::prelude::AnyView> = vec![v4741, v4757];
                        let v4767: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4765);
                        let v4769: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4767);
                        let v4771: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v4569))),
                                            string(">move || { v4769 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4773: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v4548(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4546(())>move || { v4769 }</details> };
                        let v4775: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4773);
                        let v4782: string = string("vec![v4565, v4775]");
                        let v4783: Vec<leptos::prelude::AnyView> = vec![v4565, v4775];
                        let v4785: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4783);
                        let v4787: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4785);
                        let v4789: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4544))),
                                            string(">move || { v4787 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4791: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4787 }</div> };
                        leptos::prelude::IntoAny::into_any(v4791)
                    } else {
                        let v4794: string = string("vec![]");
                        let v4795: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::IntoAny::into_any(v4795)
                    };
                    let v4808: string = string("vec![v4275, v4530, v4798]");
                    let v4809: Vec<leptos::prelude::AnyView> = vec![v4275, v4530, v4798];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v4809))
                }
                Dice_ui::US18::US18_3 => {
                    let v3193: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v3195: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3197: LrcPtr<Dice_ui::Heap2> = v3195.unwrap();
                    let v3200: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v3203: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3197 = v3197.clone();
                                move || Dice_ui::closure43(v3197.clone(), ())
                            })()
                        });
                    let v3206: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3203 = v3203.clone();
                            move || Dice_ui::closure45(v3203.clone(), ())
                        })()
                    });
                    let v3209: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3197 = v3197.clone();
                            let v3203 = v3203.clone();
                            move || Dice_ui::closure46(v3197.clone(), v3203.clone(), ())
                        })()
                    });
                    let v3212: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3209 = v3209.clone();
                            move || Dice_ui::closure47(v3209.clone(), ())
                        })()
                    });
                    let v3215: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3209 = v3209.clone();
                                move || Dice_ui::closure50(v3209.clone(), ())
                            })()
                        });
                    let v3217: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method69(
                        v3212,
                        Func1::new(move |v_11: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure53((), v_11)
                        }),
                    );
                    let v3223: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v3217.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v3225: bool = true;
                    leptos::logging::log!("{}", v3223);
                    let v3228: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap12>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3215 = v3215.clone();
                            let v3217 = v3217.clone();
                            move || Dice_ui::closure78(v3215.clone(), v3217.clone(), ())
                        })()
                    });
                    let v3231: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3228 = v3228.clone();
                            move || Dice_ui::closure89(v3228.clone(), ())
                        })()
                    });
                    let v3242: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method135(
                                        leptos::prelude::ArcMemo::new(move |_| {
                                            Func0::new({
                                                let v3231 = v3231.clone();
                                                move || Dice_ui::closure96(v3231.clone(), ())
                                            })()
                                        }),
                                        Func1::new(
                                            move |v_12: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure100((), v_12)
                                            }
                                        )
                                    )
                                ),
                            )),
                            string(""),
                        ),
                    );
                    let v3244: bool = true;
                    leptos::logging::log!("{}", v3242);
                    let patternInput_4: (
                        leptos::prelude::ReadSignal<bool>,
                        leptos::prelude::WriteSignal<bool>,
                    ) = leptos::prelude::signal(false);
                    let v3246: leptos::prelude::ReadSignal<bool> = patternInput_4.0.clone();
                    let v3248 = Func0::new({
                        let patternInput_4 = patternInput_4.clone();
                        move || Dice_ui::closure221(patternInput_4.1.clone(), ())
                    });
                    {
                        let v3252 = {
                            let clo_27 = Func0::new(move || Dice_ui::closure222((), ()));
                            Func1::new({
                                let clo_27 = clo_27.clone();
                                move |arg_27: ()| clo_27()
                            })
                        };
                        let v3264: string =
                                string(" class=move || \" \".to_owned() + &v3252(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3267: string =
                                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
                        let v3270: string = append(
                            (append(
                                (append(string(" "), (v3267))),
                                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                            )),
                            string(""),
                        );
                        let v3271: string = string("vec![]");
                        let v3272: Vec<leptos::prelude::AnyView> = vec![];
                        let v3274: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3272);
                        let v3276: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3274);
                        let v3279: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3270))),
                                            string(">move || { v3276 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3281: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v3276 }</path> };
                        let v3283: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3281);
                        let v3289: string =
                                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v3290: string = string("vec![]");
                        let v3291: Vec<leptos::prelude::AnyView> = vec![];
                        let v3293: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3291);
                        let v3295: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3293);
                        let v3297: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3289))),
                                            string(">move || { v3295 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3299: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v3295 }</path> };
                        let v3301: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3299);
                        let v3309: string = string("vec![v3283, v3301]");
                        let v3310: Vec<leptos::prelude::AnyView> = vec![v3283, v3301];
                        let v3312: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3310);
                        let v3314: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3312);
                        let v3317: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3264))),
                                            string(">move || { v3314 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3319: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3252(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3314 }</svg> };
                        let v3324 = {
                            let clo_28 = Func0::new({
                                let v3246 = v3246.clone();
                                move || Dice_ui::closure223(v3246.clone(), ())
                            });
                            Func1::new({
                                let clo_28 = clo_28.clone();
                                move |arg_28: ()| clo_28()
                            })
                        };
                        let v3325: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v3324(())");
                        let v3328: string = append(
                            (append(
                                string(" aria-label=\"Settings\""),
                                (append(
                                    (append(
                                        string(" on:click=move |_| v3248()"),
                                        (append(
                                            (append((append(string(" "), (v3325))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3330: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3319);
                        let v3334: string = string("vec![v3330]");
                        let v3335: Vec<leptos::prelude::AnyView> = vec![v3330];
                        let v3337: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3335);
                        let v3339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3337);
                        let v3342: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<button "), (v3328))),
                                            string(">move || { v3339 }</"),
                                        )),
                                        string("button"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3344: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Settings" on:click=move |_| v3248() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v3324(())>move || { v3339 }</button> };
                        let v3346: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3344);
                        let v3347: string = string("vec![]");
                        let v3348: Vec<leptos::prelude::AnyView> = vec![];
                        let v3350: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3348);
                        let v3352: string = string(" class=\"flex flex-col [position:relative]\"");
                        fn v3354() -> string {
                            Dice_ui::closure132((), ())
                        }
                        let v3355 = {
                            let clo_29 = Func0::from(v3354);
                            Func1::new({
                                let clo_29 = clo_29.clone();
                                move |arg_29: ()| clo_29()
                            })
                        };
                        fn v3357() -> bool {
                            Dice_ui::closure133((), ())
                        }
                        let v3358 = {
                            let clo_30 = Func0::from(v3357);
                            Func1::new({
                                let clo_30 = clo_30.clone();
                                move |arg_30: ()| clo_30()
                            })
                        };
                        let v3360: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v3364: string = string("vec![v3346]");
                        let v3365: Vec<leptos::prelude::AnyView> = vec![v3346];
                        let v3367: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3365);
                        let v3369: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3367);
                        let v3372: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3360))),
                                            string(">move || { v3369 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3374: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3369 }</div> };
                        let v3376: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3374);
                        let v3377: string =
                                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3355(())");
                        let v3380: string = append(
                            (append(
                                string(" open=move || v3358(())"),
                                (append(
                                    (append((append(string(" "), (v3377))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3383 = {
                            let clo_31 = Func0::new(move || Dice_ui::closure224((), ()));
                            Func1::new({
                                let clo_31 = clo_31.clone();
                                move |arg_31: ()| clo_31()
                            })
                        };
                        let v3386 = {
                            let clo_32 = Func0::new({
                                let v3346 = v3346.clone();
                                move || Dice_ui::closure225(v3346.clone(), ())
                            });
                            Func1::new({
                                let clo_32 = clo_32.clone();
                                move |arg_32: ()| clo_32()
                            })
                        };
                        let v3387: string =
                                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3386(()) + \" \" + &v3383(())");
                        let v3388: string = append(
                            (append((append(string(" "), (v3387))), string(""))),
                            string(""),
                        );
                        let v3390: string = string(" class=\"flex items-center gap-2\"");
                        let v3393: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v3394: string = (Dice_ui::method208(v3346.clone()))();
                        let v3399: &str = &*v3394;
                        let v3423: std::string::String = String::from(v3399);
                        let v3444: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v3423),
                        );
                        let v3448: string = string("vec![v3444]");
                        let v3449: Vec<leptos::prelude::AnyView> = vec![v3444];
                        let v3451: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3449);
                        let v3453: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3451);
                        let v3456: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3393))),
                                            string(">move || { v3453 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3458: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3453 }</span> };
                        let v3460: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3458);
                        let v3464: string = string("vec![v3460]");
                        let v3465: Vec<leptos::prelude::AnyView> = vec![v3460];
                        let v3467: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3465);
                        let v3469: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3467);
                        let v3471: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3390))),
                                            string(">move || { v3469 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3473: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3469 }</div> };
                        let v3475: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3473);
                        let v3477: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        fn v3479() -> string {
                            Dice_ui::closure137((), ())
                        }
                        let v3480 = {
                            let clo_33 = Func0::from(v3479);
                            Func1::new({
                                let clo_33 = clo_33.clone();
                                move |arg_33: ()| clo_33()
                            })
                        };
                        let v3488: string =
                                string(" class=move || \" \".to_owned() + &v3480(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3490: string =
                                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v3494: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v3490))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3495: string = string("vec![]");
                        let v3496: Vec<leptos::prelude::AnyView> = vec![];
                        let v3498: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3496);
                        let v3500: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3498);
                        let v3502: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3494))),
                                            string(">move || { v3500 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3504: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3500 }</path> };
                        let v3506: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3504);
                        let v3510: string = string("vec![v3506]");
                        let v3511: Vec<leptos::prelude::AnyView> = vec![v3506];
                        let v3513: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3511);
                        let v3515: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3513);
                        let v3517: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3488))),
                                            string(">move || { v3515 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3519: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3480(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3515 }</svg> };
                        let v3521: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3519);
                        let v3525: string = string("vec![v3521]");
                        let v3526: Vec<leptos::prelude::AnyView> = vec![v3521];
                        let v3528: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3526);
                        let v3530: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3528);
                        let v3532: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3477))),
                                            string(">move || { v3530 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3534: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3530 }</span> };
                        let v3536: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3534);
                        let v3543: string = string("vec![v3475, v3536]");
                        let v3544: Vec<leptos::prelude::AnyView> = vec![v3475, v3536];
                        let v3546: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3544);
                        let v3548: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3546);
                        let v3551: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v3388))),
                                            string(">move || { v3548 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3553: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3386(()) + " " + &v3383(())>move || { v3548 }</summary> };
                        let v3555: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3553);
                        let v3557: string = string(" class=\"flex flex-1 flex-col\"");
                        let v3561: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method165(Func0::new(move || {
                                Func0::new({
                                    let v3197 = v3197.clone();
                                    let v3209 = v3209.clone();
                                    let v3228 = v3228.clone();
                                    let v3246 = v3246.clone();
                                    move || {
                                        Dice_ui::closure227(
                                            v3197.clone(),
                                            v3228.clone(),
                                            v3209.clone(),
                                            v3246.clone(),
                                            (),
                                        )
                                    }
                                })()
                            }));
                        let v3563: leptos::prelude::Fragment = (move || v3561())();
                        let v3565: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3563);
                        let v3567: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3557))),
                                            string(">move || { v3565 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3569: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3565 }</div> };
                        let v3571: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3569);
                        let v3578: string = string("vec![v3555, v3571]");
                        let v3579: Vec<leptos::prelude::AnyView> = vec![v3555, v3571];
                        let v3581: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3579);
                        let v3583: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3581);
                        let v3586: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v3380))),
                                            string(">move || { v3583 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3588: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v3358(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3355(())>move || { v3583 }</details> };
                        let v3590: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3588);
                        let v3597: string = string("vec![v3376, v3590]");
                        let v3598: Vec<leptos::prelude::AnyView> = vec![v3376, v3590];
                        let v3600: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3598);
                        let v3602: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3600);
                        let v3604: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3352))),
                                            string(">move || { v3602 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3606: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3602 }</div> };
                        let v3608: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3606);
                        let v3611: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v3197.l0.clone());
                        let v3613: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v3611);
                        let v3876: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                            &v3613.l1.clone(),
                        ) {
                            let v3617: string = string("vec![]");
                            let v3618: Vec<leptos::prelude::AnyView> = vec![];
                            let v3620: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3618);
                            let v3622: string =
                                string(" class=\"flex flex-col [position:relative]\"");
                            let v3624 = {
                                let clo_34 = Func0::from(v3354);
                                Func1::new({
                                    let clo_34 = clo_34.clone();
                                    move |arg_34: ()| clo_34()
                                })
                            };
                            let v3626 = {
                                let clo_35 = Func0::from(v3357);
                                Func1::new({
                                    let clo_35 = clo_35.clone();
                                    move |arg_35: ()| clo_35()
                                })
                            };
                            let v3628: string =
                                string(" class=\"[position:absolute] [right:0] [top:0]\"");
                            let v3632: string = string("vec![v3620]");
                            let v3633: Vec<leptos::prelude::AnyView> = vec![v3620];
                            let v3635: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3633);
                            let v3637: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3635);
                            let v3639: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3628))),
                                                string(">move || { v3637 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3641: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3637 }</div> };
                            let v3643: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3641);
                            let v3644: string =
                                        string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3624(())");
                            let v3647: string = append(
                                (append(
                                    string(" open=move || v3626(())"),
                                    (append(
                                        (append((append(string(" "), (v3644))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v3650 = {
                                let clo_36 = Func0::new(move || Dice_ui::closure303((), ()));
                                Func1::new({
                                    let clo_36 = clo_36.clone();
                                    move |arg_36: ()| clo_36()
                                })
                            };
                            let v3653 = {
                                let clo_37 = Func0::new(move || Dice_ui::closure304((), ()));
                                Func1::new({
                                    let clo_37 = clo_37.clone();
                                    move |arg_37: ()| clo_37()
                                })
                            };
                            let v3654: string =
                                        string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3653(()) + \" \" + &v3650(())");
                            let v3655: string = append(
                                (append((append(string(" "), (v3654))), string(""))),
                                string(""),
                            );
                            let v3657: string = string(" class=\"flex items-center gap-2\"");
                            let v3660: string =
                                        string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
                            let v3661: string = (Dice_ui::method246())();
                            let v3666: &str = &*v3661;
                            let v3690: std::string::String = String::from(v3666);
                            let v3711: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v3690),
                                );
                            let v3715: string = string("vec![v3711]");
                            let v3716: Vec<leptos::prelude::AnyView> = vec![v3711];
                            let v3718: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3716);
                            let v3720: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3718);
                            let v3722: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v3660))),
                                                string(">move || { v3720 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3724: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3720 }</span> };
                            let v3726: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3724);
                            let v3730: string = string("vec![v3726]");
                            let v3731: Vec<leptos::prelude::AnyView> = vec![v3726];
                            let v3733: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3731);
                            let v3735: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3733);
                            let v3737: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3657))),
                                                string(">move || { v3735 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3739: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3735 }</div> };
                            let v3741: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3739);
                            let v3743: string =
                                string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                            let v3745 = {
                                let clo_38 = Func0::from(v3479);
                                Func1::new({
                                    let clo_38 = clo_38.clone();
                                    move |arg_38: ()| clo_38()
                                })
                            };
                            let v3753: string =
                                        string(" class=move || \" \".to_owned() + &v3745(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v3755: string =
                                        string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                            let v3759: string = append(
                                (append(
                                    string(" clip-rule=\"evenodd\""),
                                    (append(
                                        (append(
                                            (append(string(" "), (v3755))),
                                            string(" fill-rule=\"evenodd\""),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v3760: string = string("vec![]");
                            let v3761: Vec<leptos::prelude::AnyView> = vec![];
                            let v3763: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3761);
                            let v3765: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3763);
                            let v3767: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<path "), (v3759))),
                                                string(">move || { v3765 }</"),
                                            )),
                                            string("path"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3769: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                            > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3765 }</path> };
                            let v3771: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3769);
                            let v3775: string = string("vec![v3771]");
                            let v3776: Vec<leptos::prelude::AnyView> = vec![v3771];
                            let v3778: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3776);
                            let v3780: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3778);
                            let v3782: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v3753))),
                                                string(">move || { v3780 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3784: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3745(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3780 }</svg> };
                            let v3786: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3784);
                            let v3790: string = string("vec![v3786]");
                            let v3791: Vec<leptos::prelude::AnyView> = vec![v3786];
                            let v3793: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3791);
                            let v3795: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3793);
                            let v3797: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v3743))),
                                                string(">move || { v3795 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3799: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3795 }</span> };
                            let v3801: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3799);
                            let v3808: string = string("vec![v3741, v3801]");
                            let v3809: Vec<leptos::prelude::AnyView> = vec![v3741, v3801];
                            let v3811: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3809);
                            let v3813: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3811);
                            let v3815: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<summary "), (v3655))),
                                                string(">move || { v3813 }</"),
                                            )),
                                            string("summary"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3817: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3653(()) + " " + &v3650(())>move || { v3813 }</summary> };
                            let v3819: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3817);
                            let v3821: string = string(" class=\"flex flex-1 flex-col\"");
                            let v3825: Func0<leptos::prelude::Fragment> =
                                Dice_ui::method165(Func0::new(move || {
                                    Func0::new({
                                        let v3228 = v3228.clone();
                                        move || Dice_ui::closure306(v3228.clone(), ())
                                    })()
                                }));
                            let v3827: leptos::prelude::Fragment = (move || v3825())();
                            let v3829: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3827);
                            let v3831: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3821))),
                                                string(">move || { v3829 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3833: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3829 }</div> };
                            let v3835: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3833);
                            let v3842: string = string("vec![v3819, v3835]");
                            let v3843: Vec<leptos::prelude::AnyView> = vec![v3819, v3835];
                            let v3845: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3843);
                            let v3847: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3845);
                            let v3849: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<details "), (v3647))),
                                                string(">move || { v3847 }</"),
                                            )),
                                            string("details"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3851: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Details, _, _>,
                            > = leptos::prelude::view! { <details  open=move || v3626(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3624(())>move || { v3847 }</details> };
                            let v3853: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3851);
                            let v3860: string = string("vec![v3643, v3853]");
                            let v3861: Vec<leptos::prelude::AnyView> = vec![v3643, v3853];
                            let v3863: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3861);
                            let v3865: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3863);
                            let v3867: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3622))),
                                                string(">move || { v3865 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3869: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3865 }</div> };
                            leptos::prelude::IntoAny::into_any(v3869)
                        } else {
                            let v3872: string = string("vec![]");
                            let v3873: Vec<leptos::prelude::AnyView> = vec![];
                            leptos::prelude::IntoAny::into_any(v3873)
                        };
                        let v3883: string = string("vec![v3608, v3876]");
                        let v3884: Vec<leptos::prelude::AnyView> = vec![v3608, v3876];
                        Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3884))
                    }
                }
                _ => Dice_ui::US22::US22_1,
            };
            let v4835: leptos::prelude::AnyView = match &v4817 {
                Dice_ui::US22::US22_0(v4817_0_0) => {
                    let v4820: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v4822: leptos::prelude::AnyView = leptos::prelude::AnyView::from(
                        match &v4817 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v4825: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4820))),
                                        string(">move || { v4822 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4827: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [overflow-y:auto]">move || { v4822 }</div> };
                    leptos::prelude::IntoAny::into_any(v4827)
                }
                _ => {
                    let v4830: string = string("vec![]");
                    let v4831: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v4831)
                }
            };
            let v4839: string = string("vec![v4835]");
            let v4840: Vec<leptos::prelude::AnyView> = vec![v4835];
            let v4842: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4840);
            let v4844: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4842);
            let v4847: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<main "), (v1806))),
                                string(">move || { v4844 }</"),
                            )),
                            string("main"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v4849: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Main, _, _>> = leptos::prelude::view! { <main  class="flex flex-1 flex-col [overflow:hidden]">move || { v4844 }</main> };
            let v4851: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4849);
            let v4853: string = string(" class=\"flex\"");
            let v4856: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v4858: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v4861: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v4858 = v4858.clone();
                        move || Dice_ui::closure40(v4858.clone(), ())
                    })()
                });
            let v4863: string = string(" class=\"hidden\"");
            let v4867: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v4873: &str = &*string("Tab");
            let v4897: std::string::String = String::from(v4873);
            let v4918: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v4897));
            let v4922: string = string("vec![v4918]");
            let v4923: Vec<leptos::prelude::AnyView> = vec![v4918];
            let v4925: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4923);
            let v4927: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4925);
            let v4930: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v4867))),
                                string(">move || { v4927 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v4932: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class="sr-only" for="Tab">move || { v4927 }</label> };
            let v4934: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4932);
            let v4938: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v4939 = Dice_ui::method249(v1496.clone());
            let v4941: string = string(" selected=v4939()");
            let v4947: &str = &*string("Settings");
            let v4971: std::string::String = String::from(v4947);
            let v4992: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v4971));
            let v4996: string = string("vec![v4992]");
            let v4997: Vec<leptos::prelude::AnyView> = vec![v4992];
            let v4999: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4997);
            let v5001: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4999);
            let v5004: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v4941))),
                                string(">move || { v5001 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5006: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v4939()>move || { v5001 }</option> };
            let v5008: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5006);
            let v5009 = Dice_ui::method250(v1496.clone());
            let v5011: string = string(" selected=v5009()");
            let v5017: &str = &*string("Transactions");
            let v5041: std::string::String = String::from(v5017);
            let v5062: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5041));
            let v5066: string = string("vec![v5062]");
            let v5067: Vec<leptos::prelude::AnyView> = vec![v5062];
            let v5069: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5067);
            let v5071: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5069);
            let v5073: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5011))),
                                string(">move || { v5071 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5075: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5009()>move || { v5071 }</option> };
            let v5077: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5075);
            let v5078 = Dice_ui::method251(v1496.clone());
            let v5080: string = string(" selected=v5078()");
            let v5086: &str = &*string("Lists");
            let v5110: std::string::String = String::from(v5086);
            let v5131: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5110));
            let v5135: string = string("vec![v5131]");
            let v5136: Vec<leptos::prelude::AnyView> = vec![v5131];
            let v5138: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5136);
            let v5140: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5138);
            let v5142: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5080))),
                                string(">move || { v5140 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5144: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5078()>move || { v5140 }</option> };
            let v5146: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5144);
            let v5147 = Dice_ui::method252(v1496.clone());
            let v5149: string = string(" selected=v5147()");
            let v5155: &str = &*string("Dice");
            let v5179: std::string::String = String::from(v5155);
            let v5200: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5179));
            let v5204: string = string("vec![v5200]");
            let v5205: Vec<leptos::prelude::AnyView> = vec![v5200];
            let v5207: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5205);
            let v5209: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5207);
            let v5211: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5149))),
                                string(">move || { v5209 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5213: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5147()>move || { v5209 }</option> };
            let v5215: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5213);
            let v5229: string = string("vec![v5215, v5146, v5077, v5008]");
            let v5230: Vec<leptos::prelude::AnyView> = vec![v5215, v5146, v5077, v5008];
            let v5232: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5230);
            let v5234: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5232);
            let v5237: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<select "), (v4938))),
                                string(">move || { v5234 }</"),
                            )),
                            string("select"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5239: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Select, _, _>,
            > = leptos::prelude::view! { <select  class="w-full rounded-md border-gray-200" id="Tab">move || { v5234 }</select> };
            let v5241: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5239);
            let v5248: string = string("vec![v4934, v5241]");
            let v5249: Vec<leptos::prelude::AnyView> = vec![v4934, v5241];
            let v5251: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5249);
            let v5253: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5251);
            let v5256: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v4863))),
                                string(">move || { v5253 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5258: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="hidden">move || { v5253 }</div> };
            let v5260: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v5262: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v5263: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v5266: string = append(
                (append(
                    string(" aria-label=\"Tabs\""),
                    (append(
                        (append((append(string(" "), (v5263))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            fn v5268() -> string {
                Dice_ui::closure314((), ())
            }
            let v5269 = {
                let clo_39 = Func0::from(v5268);
                Func1::new({
                    let clo_39 = clo_39.clone();
                    move |arg_39: ()| clo_39()
                })
            };
            let v5281: string =
                string(" class=move || \" \".to_owned() + &v5269(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v5284: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v5287: string = append(
                (append(
                    (append(string(" "), (v5284))),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                )),
                string(""),
            );
            let v5288: string = string("vec![]");
            let v5289: Vec<leptos::prelude::AnyView> = vec![];
            let v5291: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5289);
            let v5293: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5291);
            let v5296: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v5287))),
                                string(">move || { v5293 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5298: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v5293 }</path> };
            let v5300: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5298);
            let v5306: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v5307: string = string("vec![]");
            let v5308: Vec<leptos::prelude::AnyView> = vec![];
            let v5310: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5308);
            let v5312: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5310);
            let v5314: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v5306))),
                                string(">move || { v5312 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5316: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v5312 }</path> };
            let v5318: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5316);
            let v5325: string = string("vec![v5300, v5318]");
            let v5326: Vec<leptos::prelude::AnyView> = vec![v5300, v5318];
            let v5328: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5326);
            let v5330: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5328);
            let v5333: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v5281))),
                                string(">move || { v5330 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5335: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5269(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5330 }</svg> };
            let v5337: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5335);
            let v5341: string = string("vec![v5337]");
            let v5342: Vec<leptos::prelude::AnyView> = vec![v5337];
            let v5344: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5342);
            let v5345 = Func0::new({
                let v4861 = v4861.clone();
                move || Dice_ui::closure315(v4861.clone(), ())
            });
            {
                let v5349 = {
                    let clo_40 = Func0::new({
                        let v1496 = v1496.clone();
                        move || Dice_ui::closure316(v1496.clone(), ())
                    });
                    Func1::new({
                        let clo_40 = clo_40.clone();
                        move |arg_40: ()| clo_40()
                    })
                };
                let v5352 = {
                    let clo_41 = Func0::new({
                        let v1496 = v1496.clone();
                        move || Dice_ui::closure317(v1496.clone(), ())
                    });
                    Func1::new({
                        let clo_41 = clo_41.clone();
                        move |arg_41: ()| clo_41()
                    })
                };
                let v5354: string =
                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5352(())");
                let v5358: string = append(
                    (append(
                        string(" aria-current=move || if v5349(()) { \"page\" } else { \"\" }"),
                        (append(
                            (append(
                                (append(string(" "), (v5354))),
                                string(" href=move || v5345()"),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v5360: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5344);
                let v5365: &str = &*string("Settings");
                let v5389: std::string::String = String::from(v5365);
                let v5410: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5389));
                let v5417: string = string("vec![v5360, v5410]");
                let v5418: Vec<leptos::prelude::AnyView> = vec![v5360, v5410];
                let v5420: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5418);
                let v5422: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5420);
                let v5425: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<a "), (v5358))),
                                    string(">move || { v5422 }</"),
                                )),
                                string("a"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v5427: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::A, _, _>> = leptos::prelude::view! { <a  aria-current=move || if v5349(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5352(()) href=move || v5345()>move || { v5422 }</a> };
                let v5429: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5427);
                let v5431 = {
                    let clo_42 = Func0::from(v5268);
                    Func1::new({
                        let clo_42 = clo_42.clone();
                        move |arg_42: ()| clo_42()
                    })
                };
                let v5445: string =
                    string(" class=move || \"text-gray-700 \".to_owned() + &v5431(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v5451: string =
                    string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v5452: string = string("vec![]");
                let v5453: Vec<leptos::prelude::AnyView> = vec![];
                let v5455: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5453);
                let v5457: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5455);
                let v5459: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v5451))),
                                    string(">move || { v5457 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v5461: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7" stroke-linejoin="round" stroke-linecap="round">move || { v5457 }</path> };
                let v5463: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5461);
                let v5467: string = string("vec![v5463]");
                let v5468: Vec<leptos::prelude::AnyView> = vec![v5463];
                let v5470: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5468);
                let v5472: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5470);
                let v5474: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v5445))),
                                    string(">move || { v5472 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v5476: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v5431(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5472 }</svg> };
                let v5478: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5476);
                let v5482: string = string("vec![v5478]");
                let v5483: Vec<leptos::prelude::AnyView> = vec![v5478];
                let v5485: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5483);
                let v5486 = Func0::new({
                    let v4861 = v4861.clone();
                    move || Dice_ui::closure318(v4861.clone(), ())
                });
                {
                    let v5490 = {
                        let clo_43 = Func0::new({
                            let v1496 = v1496.clone();
                            move || Dice_ui::closure319(v1496.clone(), ())
                        });
                        Func1::new({
                            let clo_43 = clo_43.clone();
                            move |arg_43: ()| clo_43()
                        })
                    };
                    let v5493 = {
                        let clo_44 = Func0::new({
                            let v1496 = v1496.clone();
                            move || Dice_ui::closure320(v1496.clone(), ())
                        });
                        Func1::new({
                            let clo_44 = clo_44.clone();
                            move |arg_44: ()| clo_44()
                        })
                    };
                    let v5495: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5493(())");
                    let v5499: string = append(
                        (append(
                            string(" aria-current=move || if v5490(()) { \"page\" } else { \"\" }"),
                            (append(
                                (append(
                                    (append(string(" "), (v5495))),
                                    string(" href=move || v5486()"),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v5501: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5485);
                    let v5506: &str = &*string("Transactions");
                    let v5530: std::string::String = String::from(v5506);
                    let v5551: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v5530),
                    );
                    let v5558: string = string("vec![v5501, v5551]");
                    let v5559: Vec<leptos::prelude::AnyView> = vec![v5501, v5551];
                    let v5561: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5559);
                    let v5563: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5561);
                    let v5565: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<a "), (v5499))),
                                        string(">move || { v5563 }</"),
                                    )),
                                    string("a"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5567: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::A, _, _>,
                    > = leptos::prelude::view! { <a  aria-current=move || if v5490(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5493(()) href=move || v5486()>move || { v5563 }</a> };
                    let v5569: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5567);
                    let v5571 = {
                        let clo_45 = Func0::from(v5268);
                        Func1::new({
                            let clo_45 = clo_45.clone();
                            move |arg_45: ()| clo_45()
                        })
                    };
                    let v5585: string =
                        string(" class=move || \"text-gray-700 \".to_owned() + &v5571(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v5591: string =
                        string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v5592: string = string("vec![]");
                    let v5593: Vec<leptos::prelude::AnyView> = vec![];
                    let v5595: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5593);
                    let v5597: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5595);
                    let v5599: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v5591))),
                                        string(">move || { v5597 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5601: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5" stroke-linejoin="round" stroke-linecap="round">move || { v5597 }</path> };
                    let v5603: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5601);
                    let v5611: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
                    let v5612: string = string("vec![]");
                    let v5613: Vec<leptos::prelude::AnyView> = vec![];
                    let v5615: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5613);
                    let v5617: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5615);
                    let v5620: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v5611))),
                                        string(">move || { v5617 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5622: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="6.75" cx="3">move || { v5617 }</circle> };
                    let v5624: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5622);
                    let v5632: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
                    let v5633: string = string("vec![]");
                    let v5634: Vec<leptos::prelude::AnyView> = vec![];
                    let v5636: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5634);
                    let v5638: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5636);
                    let v5640: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v5632))),
                                        string(">move || { v5638 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5642: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="12" cx="3">move || { v5638 }</circle> };
                    let v5644: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5642);
                    let v5652: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
                    let v5653: string = string("vec![]");
                    let v5654: Vec<leptos::prelude::AnyView> = vec![];
                    let v5656: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5654);
                    let v5658: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5656);
                    let v5660: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v5652))),
                                        string(">move || { v5658 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5662: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="17.25" cx="3">move || { v5658 }</circle> };
                    let v5664: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5662);
                    let v5677: string = string("vec![v5603, v5624, v5644, v5664]");
                    let v5678: Vec<leptos::prelude::AnyView> = vec![v5603, v5624, v5644, v5664];
                    let v5680: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5678);
                    let v5682: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5680);
                    let v5684: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v5585))),
                                        string(">move || { v5682 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5686: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v5571(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5682 }</svg> };
                    let v5688: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5686);
                    let v5692: string = string("vec![v5688]");
                    let v5693: Vec<leptos::prelude::AnyView> = vec![v5688];
                    let v5695: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5693);
                    let v5696 = Func0::new({
                        let v4861 = v4861.clone();
                        move || Dice_ui::closure321(v4861.clone(), ())
                    });
                    {
                        let v5700 = {
                            let clo_46 = Func0::new({
                                let v1496 = v1496.clone();
                                move || Dice_ui::closure322(v1496.clone(), ())
                            });
                            Func1::new({
                                let clo_46 = clo_46.clone();
                                move |arg_46: ()| clo_46()
                            })
                        };
                        let v5703 = {
                            let clo_47 = Func0::new({
                                let v1496 = v1496.clone();
                                move || Dice_ui::closure323(v1496.clone(), ())
                            });
                            Func1::new({
                                let clo_47 = clo_47.clone();
                                move |arg_47: ()| clo_47()
                            })
                        };
                        let v5705: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5703(())");
                        let v5709: string = append(
                            (append(
                                string(
                                    " aria-current=move || if v5700(()) { \"page\" } else { \"\" }",
                                ),
                                (append(
                                    (append(
                                        (append(string(" "), (v5705))),
                                        string(" href=move || v5696()"),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5711: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5695);
                        let v5716: &str = &*string("Lists");
                        let v5740: std::string::String = String::from(v5716);
                        let v5761: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v5740),
                        );
                        let v5768: string = string("vec![v5711, v5761]");
                        let v5769: Vec<leptos::prelude::AnyView> = vec![v5711, v5761];
                        let v5771: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5769);
                        let v5773: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5771);
                        let v5775: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<a "), (v5709))),
                                            string(">move || { v5773 }</"),
                                        )),
                                        string("a"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5777: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::A, _, _>,
                        > = leptos::prelude::view! { <a  aria-current=move || if v5700(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5703(()) href=move || v5696()>move || { v5773 }</a> };
                        let v5779: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5777);
                        let v5781 = {
                            let clo_48 = Func0::from(v5268);
                            Func1::new({
                                let clo_48 = clo_48.clone();
                                move |arg_48: ()| clo_48()
                            })
                        };
                        let v5793: string =
                            string(" class=move || \" \".to_owned() + &v5781(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v5807: string =
                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
                        let v5808: string = string("vec![]");
                        let v5809: Vec<leptos::prelude::AnyView> = vec![];
                        let v5811: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5809);
                        let v5813: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5811);
                        let v5816: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v5807))),
                                            string(">move || { v5813 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5818: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  stroke-linejoin="round" stroke-linecap="round" rx="2" height="18" width="18" y="3" x="3">move || { v5813 }</rect> };
                        let v5820: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5818);
                        let v5828: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
                        let v5829: string = string("vec![]");
                        let v5830: Vec<leptos::prelude::AnyView> = vec![];
                        let v5832: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5830);
                        let v5834: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5832);
                        let v5836: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5828))),
                                            string(">move || { v5834 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5838: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="7.5">move || { v5834 }</circle> };
                        let v5840: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5838);
                        let v5848: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
                        let v5849: string = string("vec![]");
                        let v5850: Vec<leptos::prelude::AnyView> = vec![];
                        let v5852: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5850);
                        let v5854: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5852);
                        let v5856: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5848))),
                                            string(">move || { v5854 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5858: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="16.5">move || { v5854 }</circle> };
                        let v5860: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5858);
                        let v5868: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
                        let v5869: string = string("vec![]");
                        let v5870: Vec<leptos::prelude::AnyView> = vec![];
                        let v5872: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5870);
                        let v5874: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5872);
                        let v5876: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5868))),
                                            string(">move || { v5874 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5878: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="12" cx="12">move || { v5874 }</circle> };
                        let v5880: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5878);
                        let v5888: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
                        let v5889: string = string("vec![]");
                        let v5890: Vec<leptos::prelude::AnyView> = vec![];
                        let v5892: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5890);
                        let v5894: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5892);
                        let v5896: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5888))),
                                            string(">move || { v5894 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5898: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="7.5">move || { v5894 }</circle> };
                        let v5900: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5898);
                        let v5908: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
                        let v5909: string = string("vec![]");
                        let v5910: Vec<leptos::prelude::AnyView> = vec![];
                        let v5912: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5910);
                        let v5914: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5912);
                        let v5916: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5908))),
                                            string(">move || { v5914 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5918: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="16.5">move || { v5914 }</circle> };
                        let v5920: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5918);
                        let v5939: string =
                            string("vec![v5820, v5840, v5860, v5880, v5900, v5920]");
                        let v5940: Vec<leptos::prelude::AnyView> =
                            vec![v5820, v5840, v5860, v5880, v5900, v5920];
                        let v5942: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5940);
                        let v5944: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5942);
                        let v5946: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v5793))),
                                            string(">move || { v5944 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5948: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5781(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5944 }</svg> };
                        let v5950: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5948);
                        let v5954: string = string("vec![v5950]");
                        let v5955: Vec<leptos::prelude::AnyView> = vec![v5950];
                        let v5957: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5955);
                        let v5958 = Func0::new({
                            let v4861 = v4861.clone();
                            move || Dice_ui::closure324(v4861.clone(), ())
                        });
                        {
                            let v5962 = {
                                let clo_49 = Func0::new({
                                    let v1496 = v1496.clone();
                                    move || Dice_ui::closure325(v1496.clone(), ())
                                });
                                Func1::new({
                                    let clo_49 = clo_49.clone();
                                    move |arg_49: ()| clo_49()
                                })
                            };
                            let v5965 = {
                                let clo_50 = Func0::new({
                                    let v1496 = v1496.clone();
                                    move || Dice_ui::closure326(v1496.clone(), ())
                                });
                                Func1::new({
                                    let clo_50 = clo_50.clone();
                                    move |arg_50: ()| clo_50()
                                })
                            };
                            let v5967: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5965(())");
                            let v5971: string =
                                append((append(string(" aria-current=move || if v5962(()) { \"page\" } else { \"\" }"),
                                               (append((append((append(string(" "),
                                                                       (v5967))),
                                                               string(" href=move || v5958()"))),
                                                       string(""))))),
                                       string(""));
                            let v5973: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v5957);
                            let v5978: &str = &*string("Dice");
                            let v6002: std::string::String = String::from(v5978);
                            let v6023: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v6002),
                                );
                            let v6030: string = string("vec![v5973, v6023]");
                            let v6031: Vec<leptos::prelude::AnyView> = vec![v5973, v6023];
                            let v6033: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6031);
                            let v6035: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6033);
                            let v6037: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<a "), (v5971))),
                                                string(">move || { v6035 }</"),
                                            )),
                                            string("a"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6039: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::A, _, _>,
                            > = leptos::prelude::view! { <a  aria-current=move || if v5962(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5965(()) href=move || v5958()>move || { v6035 }</a> };
                            let v6041: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6039);
                            let v6054: string = string("vec![v6041, v5779, v5569, v5429]");
                            let v6055: Vec<leptos::prelude::AnyView> =
                                vec![v6041, v5779, v5569, v5429];
                            let v6057: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6055);
                            let v6059: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6057);
                            let v6062: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<nav "), (v5266))),
                                                string(">move || { v6059 }</"),
                                            )),
                                            string("nav"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6064: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Nav, _, _>,
                            > = leptos::prelude::view! { <nav  aria-label="Tabs" class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]">move || { v6059 }</nav> };
                            let v6066: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6064);
                            let v6070: string = string("vec![v6066]");
                            let v6071: Vec<leptos::prelude::AnyView> = vec![v6066];
                            let v6073: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6071);
                            let v6075: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6073);
                            let v6077: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5262))),
                                                string(">move || { v6075 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6079: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 border-t border-gray-200">move || { v6075 }</div> };
                            let v6081: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6079);
                            let v6085: string = string("vec![v6081]");
                            let v6086: Vec<leptos::prelude::AnyView> = vec![v6081];
                            let v6088: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6086);
                            let v6090: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6088);
                            let v6092: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5260))),
                                                string(">move || { v6090 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6094: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">move || { v6090 }</div> };
                            let v6096: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6094);
                            let v6098: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v5258);
                            let v6105: string = string("vec![v6098, v6096]");
                            let v6106: Vec<leptos::prelude::AnyView> = vec![v6098, v6096];
                            let v6108: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6106);
                            let v6110: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6108);
                            let v6112: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4853))),
                                                string(">move || { v6110 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6114: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex">move || { v6110 }</div> };
                            let v6116: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6114);
                            let v6123: string = string("vec![v4851, v6116]");
                            let v6124: Vec<leptos::prelude::AnyView> = vec![v4851, v6116];
                            let v6126: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6124);
                            let v6128: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6126);
                            let v6130: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1804))),
                                                string(">move || { v6128 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6132: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">move || { v6128 }</div> };
                            let v6134: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6132);
                            let v6138: string = string("vec![v6134]");
                            let v6139: Vec<leptos::prelude::AnyView> = vec![v6134];
                            let v6141: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6139);
                            let v6143: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6141);
                            let v6145: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1802))),
                                                string(">move || { v6143 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6147: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 max-[100px]:[overflow-x:auto]">move || { v6143 }</div> };
                            let v6149: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6147);
                            let v6153: string = string("vec![v6149]");
                            let v6154: Vec<leptos::prelude::AnyView> = vec![v6149];
                            let v6156: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6154);
                            let v6158: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6156);
                            let v6160: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1477))),
                                                string(">move || { v6158 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            leptos::prelude::view! { <div  class:dark={move || v1473()} class="flex flex-1">move || { v6158 }</div> }
                        }
                    }
                }
            }
        }
        pub fn method5(
        ) -> Func1<i32, leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>>
        {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method253(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure327(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(1_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method254(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure327(v0_1.clone(), ())
            })
        }
        pub fn closure328(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            leptos::prelude::Fragment::new(v2)
        }
        pub fn closure329(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(2_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method255(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure329(v0_1.clone(), ())
            })
        }
        pub fn closure330(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(3_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method256(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure330(v0_1.clone(), ())
            })
        }
        pub fn closure331(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(4_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method257(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure331(v0_1.clone(), ())
            })
        }
        pub fn closure4(
            unitVar: (),
            unitVar_1: (),
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v0_1 = Dice_ui::method5();
            let v6: &str = &*string("");
            let v50: std::string::String = Dice_ui::method253(String::from(v6));
            let v51 = Dice_ui::method254(v0_1.clone());
            let v61: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v51() path=leptos_router::path!(v50) /> })");
            let v62: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v51() path=leptos_router::path!(v50) /> },
                );
            let v68: &str = &*string("/");
            let v112: std::string::String = Dice_ui::method253(String::from(v68));
            let v113 = Dice_ui::method255(v0_1.clone());
            let v121: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v113() path=leptos_router::path!(v112) /> })");
            let v122: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v113() path=leptos_router::path!(v112) /> },
                );
            let v128: &str = &*string("/*");
            let v172: std::string::String = Dice_ui::method253(String::from(v128));
            let v173 = Dice_ui::method256(v0_1.clone());
            let v181: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v173() path=leptos_router::path!(v172) /> })");
            let v182: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v173() path=leptos_router::path!(v172) /> },
                );
            let v188: &str = &*string("*");
            let v232: std::string::String = Dice_ui::method253(String::from(v188));
            let v233 = Dice_ui::method257(v0_1);
            let v241: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v233() path=leptos_router::path!(v232) /> })");
            let v242: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v233() path=leptos_router::path!(v232) /> },
                );
            let v256: string = string("vec![v62, v122, v182, v242]");
            vec![v62, v122, v182, v242]
        }
        pub fn method4() -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>
        {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method258(
            v0_1: Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>,
        ) -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method258(Dice_ui::method4());
            let v7: &str = &*string("leptos.routes / fallback");
            let v31: std::string::String = String::from(v7);
            let v52: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v31));
            let v60: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v52 /> })");
            let v61 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v52 /> },
            );
            let v63: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v67: string = string("vec![v63]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v68)
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v8: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v14: &str = &*string("");
            let v38: std::string::String = String::from(v14);
            let v59: leptos::prelude::ArcRwSignal<std::string::String> =
                leptos::prelude::ArcRwSignal::new(v38);
            let v65: &str = &*string("i574n.near");
            let v89: std::string::String = String::from(v65);
            let v115: &str = &*string("luckier.near");
            let v160: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v89)),
                LrcPtr::new((true, String::from(v115))),
            ]);
            let v165: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v160.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v168: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v59,
                l3: leptos::prelude::ArcRwSignal::new(v165),
            });
            let v170: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>> =
                leptos::prelude::ArcRwSignal::new(v168);
            let v172: std::collections::HashMap<
                std::string::String,
                leptos::prelude::ArcRwSignal<bool>,
            > = std::collections::HashMap::new();
            let v175: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v170,
                l1: leptos::prelude::ArcRwSignal::new(v172),
            });
            let v177: bool = true;
            leptos::context::provide_context::<std::sync::Arc<Heap2>>(v175);
            let v183: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v178()) /> })");
            let v184 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v178()) /> },
            );
            leptos::prelude::IntoAny::into_any(v184)
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::prelude::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))()); //;
            ()
        }
        pub fn closure332(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method259() -> Func0<()> {
            Func0::new(move || Dice_ui::closure332((), ()))
        }
        pub fn method260(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(
                (append(string("main / args: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::prelude::document().body();
                let v21: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v28: string = append(
                    (append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v21.clone()),
                    )),
                    string(""),
                );
                let v30: bool = true;
                leptos::logging::log!("{}", v28);
                if let Dice_ui::US0::US0_0(v21_0_0) = &v21 {
                    let v32: string = Dice_ui::method1();
                    let v37: &str = &*v32;
                    let v57: web_sys::HtmlElement = Dice_ui::method2(v21_0_0.clone());
                    v57.set_inner_html(v37);
                    Dice_ui::method3()
                } else {
                    let v59 = Dice_ui::method259();
                    let v62: Box<dyn Fn()> = Dice_ui::method260(Box::new(move || v59()));
                    let v64: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v62);
                    let v66: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v64);
                    let v68: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v66);
                    leptos::prelude::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v68)
                        .unwrap();
                    v64.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_75bc3c80::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_6140596b;
pub use module_6140596b::*;
#[path = "../../deps/polyglot/lib/spiral/async__wasm.rs"]
mod module_daedefb8;
pub use module_daedefb8::*;
#[path = "../../deps/polyglot/lib/spiral/common_wasm.rs"]
mod module_70286a4c;
pub use module_70286a4c::*;
#[path = "../../deps/polyglot/lib/spiral/crypto_wasm.rs"]
mod module_4a98a962;
pub use module_4a98a962::*;
#[path = "../../deps/polyglot/lib/spiral/date_time_wasm.rs"]
mod module_94ca555f;
pub use module_94ca555f::*;
#[path = "../../deps/polyglot/lib/spiral/file_system_wasm.rs"]
mod module_b697ea1d;
pub use module_b697ea1d::*;
#[path = "../../deps/polyglot/lib/spiral/lib_wasm.rs"]
mod module_ed8da8a6;
pub use module_ed8da8a6::*;
#[path = "../../deps/polyglot/lib/spiral/networking_wasm.rs"]
mod module_9dd8007f;
pub use module_9dd8007f::*;
#[path = "../../deps/polyglot/lib/spiral/platform_wasm.rs"]
mod module_4c4781e;
pub use module_4c4781e::*;
#[path = "../../deps/polyglot/lib/spiral/runtime_wasm.rs"]
mod module_c40559dd;
pub use module_c40559dd::*;
#[path = "../../deps/polyglot/lib/spiral/sm_wasm.rs"]
mod module_fc92da1f;
pub use module_fc92da1f::*;
#[path = "../../deps/polyglot/lib/spiral/threading_wasm.rs"]
mod module_af40e92f;
pub use module_af40e92f::*;
#[path = "../../deps/polyglot/lib/spiral/trace_wasm.rs"]
mod module_981750e0;
pub use module_981750e0::*;
pub mod Polyglot {
    // pub use crate::module_6140596b::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
