#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_9c940d83 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::List_::List;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::ofArray as ofArray_1;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Native_::getNull;
        use fable_library_rust::Native_::on_startup;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        on_startup!();
        use leptos::prelude::*;
        //,);
        on_startup!();
        use leptos::prelude::ElementChild;
        //,);
        on_startup!();
        use leptos::prelude::ClassAttribute;
        //,);
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Hash,
            PartialEq,
            PartialOrd,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::prelude::ArcRwSignal<bool>,
            pub l1: leptos::prelude::ArcRwSignal<bool>,
            pub l2: leptos::prelude::ArcRwSignal<std::string::String>,
            pub l3: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::prelude::ArcRwSignal<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US2 {
            US2_0(std::sync::Arc<rexie::Rexie>),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US3_1,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(wasm_bindgen::JsValue),
            US4_1,
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(serde_json::Value),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US6_1(std::string::String),
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(LrcPtr<Dice_ui::Heap3>),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(Dice_ui::US8),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Option<web_sys::Storage>),
            US9_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(web_sys::Storage),
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Dice_ui::US11),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(Option<std::string::String>),
            US12_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(std::string::String),
            US14_1,
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Dice_ui::US14),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(Dice_ui::US14),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(leptos::prelude::ArcRwSignal<bool>),
            US16_1,
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US17 {
            US17_0(bool),
            US17_1,
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US19 {
            US19_0,
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US18 {
            US18_0,
            US18_1(Dice_ui::US19),
            US18_2,
            US18_3,
            US18_4,
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(leptos_router::location::Url),
            US20_1(std::string::String),
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US21 {
            US21_0(Dice_ui::US18),
            US21_1,
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(leptos::prelude::Fragment),
            US22_1,
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US23 {
            US23_0,
            US23_1,
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH0 {
            UH0_0,
            UH0_1(
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
                LrcPtr<Dice_ui::UH0>,
            ),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(Vec<string>, LrcPtr<Dice_ui::UH1>),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(LrcPtr<Dice_ui::Heap4>),
            US25_1,
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US26 {
            US26_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US26_1,
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Vec<Dice_ui::US25>),
            US28_1(std::string::String),
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Dice_ui::US28),
            US27_1,
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US31 {
            US31_0(string),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1(std::string::String),
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Dice_ui::US30),
            US29_1,
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(Dice_ui::US25),
            US32_1,
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Option<string>),
            US33_1(std::string::String),
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Vec<()>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Array<Dice_ui::US25>),
            US36_1(std::string::String),
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Dice_ui::US36),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Result<Vec<Option<string>>, std::string::String>),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Vec<Option<string>>),
            US39_1(std::string::String),
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US38 {
            US38_0(Dice_ui::US39),
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Vec<Dice_ui::US31>),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Dice_ui::US41),
            US40_1,
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0(Dice_ui::US31),
            US42_1,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq)]
        pub struct Heap5 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US45_1,
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(Dice_ui::US45),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US47_1,
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(Dice_ui::US47),
            US46_1(std::string::String),
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US49_1,
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Dice_ui::US49),
            US48_1(std::string::String),
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US50_1(std::string::String),
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
                LrcPtr<Dice_ui::UH2>,
            ),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<LrcPtr<Dice_ui::UH2>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US55 {
            US55_0(Array<(string, Dice_ui::US23, string, bool, bool)>),
            US55_1,
        }
        impl core::fmt::Display for US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Dice_ui::US55),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US56 {
            US56_0(Option<Array<(string, Dice_ui::US23, string, bool, bool)>>),
            US56_1(std::string::String),
        }
        impl core::fmt::Display for US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Dice_ui::US14),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US59_1,
        }
        impl core::fmt::Display for US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(Dice_ui::US59),
            US58_1(std::string::String),
        }
        impl core::fmt::Display for US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(crate::model::near::rpc::RpcResponse),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(Dice_ui::US58),
            US62_1,
        }
        impl core::fmt::Display for US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US63_1(std::string::String),
        }
        impl core::fmt::Display for US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US64_1,
        }
        impl core::fmt::Display for US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(leptos::prelude::ArcMemo<Dice_ui::US31>),
            US65_1,
        }
        impl core::fmt::Display for US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            ),
            US66_1,
        }
        impl core::fmt::Display for US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>),
            US67_1,
        }
        impl core::fmt::Display for US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(chrono::DateTime<chrono::Utc>),
            US68_1,
        }
        impl core::fmt::Display for US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US69 {
            US69_0(string),
            US69_1(string),
        }
        impl core::fmt::Display for US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US31>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US70 {
            US70_0(std::string::String),
            US70_1(std::string::String),
        }
        impl core::fmt::Display for US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method6() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure6((), v))
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method7() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure7((), v))
        }
        pub fn method8(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if (v2) <= (v0_1) {
                v1.clone()
            } else {
                let v9: f64 = (v0_1 as f64) / 2.0_f64;
                let v14: i64 = v9.ceil() as i64;
                let v21: i64 = v9.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some(((v14) - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some(((v2) - (v21)) as i32), Some(((v2) - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn closure8(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
         */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v8: */
                std::sync::Arc<rexie::Rexie>, /* = fable_library_rust::Native_::getZero();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v14: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v16: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v18: &std::sync::Arc<rexie::Rexie> = &v16.0;
                    let v20: &std::sync::Arc<rexie::Rexie> = &v14.0;
                    let v22: bool = std::sync::Arc::ptr_eq(v20, v18);
                    v22 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US2 {
            Dice_ui::US2::US2_0(v0_1)
        }
        pub fn method9() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US2> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure9((), v))
        }
        pub fn method10(
            v0_1: Func1<string, std::string::String>,
        ) -> Func1<string, std::string::String> {
            v0_1
        }
        pub fn closure10(
            v0_1: Func1<string, std::string::String>,
            v1: string,
        ) -> std::string::String {
            let v2: Func1<string, std::string::String> = Dice_ui::method10(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method11(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure11(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method12() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure11((), v))
        }
        pub fn method13() -> string {
            string("store")
        }
        pub fn closure12(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method14() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure12((), v))
        }
        pub fn method15() -> string {
            string("core-state-heap")
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method16() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn closure14(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method17() -> Func1<wasm_bindgen::JsValue, Dice_ui::US4> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure14((), v))
        }
        pub fn method18(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure15(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method19() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure15((), v))
        }
        pub fn closure16(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method20() -> Func1<serde_json::Value, Dice_ui::US5> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure16((), v))
        }
        pub fn method21(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method22() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method23() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure18((), v))
        }
        pub fn closure19(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method24() -> Func1<Option<Option<LrcPtr<Dice_ui::Heap3>>>, Dice_ui::US6> {
            Func1::new(move |v: Option<Option<LrcPtr<Dice_ui::Heap3>>>| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: std::string::String) -> Dice_ui::US6 {
            Dice_ui::US6::US6_1(v0_1)
        }
        pub fn method25() -> Func1<std::string::String, Dice_ui::US6> {
            Func1::new(move |v: std::string::String| Dice_ui::closure20((), v))
        }
        pub fn closure21(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method26() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US3> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure21((), v))
        }
        pub fn closure22(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn method27() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US8> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure22((), v))
        }
        pub fn method28() -> web_sys::Window {
            leptos::prelude::window()
        }
        pub fn method29(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure23(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method30() -> Func1<Option<web_sys::Storage>, Dice_ui::US9> {
            Func1::new(move |v: Option<web_sys::Storage>| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US9 {
            Dice_ui::US9::US9_1(v0_1)
        }
        pub fn method31() -> Func1<wasm_bindgen::JsValue, Dice_ui::US9> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure24((), v))
        }
        pub fn closure25(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US11 {
            Dice_ui::US11::US11_0(v0_1)
        }
        pub fn method32() -> Func1<web_sys::Storage, Dice_ui::US11> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure25((), v))
        }
        pub fn closure26(unitVar: (), v0_1: Dice_ui::US8) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method33() -> Func1<Dice_ui::US8, Dice_ui::US7> {
            Func1::new(move |v: Dice_ui::US8| Dice_ui::closure26((), v))
        }
        pub fn method34(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method35() -> string {
            string("core-state-heap")
        }
        pub fn closure27(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method36() -> Func1<Option<std::string::String>, Dice_ui::US12> {
            Func1::new(move |v: Option<std::string::String>| Dice_ui::closure27((), v))
        }
        pub fn closure28(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US12 {
            Dice_ui::US12::US12_1(v0_1)
        }
        pub fn method37() -> Func1<wasm_bindgen::JsValue, Dice_ui::US12> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure28((), v))
        }
        pub fn method38(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure29(unitVar: (), v0_1: std::string::String) -> Dice_ui::US14 {
            Dice_ui::US14::US14_0(v0_1)
        }
        pub fn method39() -> Func1<std::string::String, Dice_ui::US14> {
            Func1::new(move |v: std::string::String| Dice_ui::closure29((), v))
        }
        pub fn method41(v0_1: string) -> string {
            v0_1
        }
        pub fn closure31(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method42() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure31((), v))
        }
        pub fn closure30(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            let v3: string = Dice_ui::method41(fable_library_rust::String_::fromString(v0_1));
            let v12: &str = &*v3;
            let v38: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v12);
            let v39 = Dice_ui::method42();
            let v45: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v38.map_err(|x| v39(x));
            let v60: Option<LrcPtr<Dice_ui::Heap3>> = v45.ok();
            defaultValue(Dice_ui::US8::US8_1, map(Dice_ui::method27(), v60))
        }
        pub fn method40() -> Func1<std::string::String, Dice_ui::US8> {
            Func1::new(move |v: std::string::String| Dice_ui::closure30((), v))
        }
        pub fn closure32(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"
                )
            );
            v0_1.l0
        }
        pub fn closure33(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (8) / effect core_state_heap / debug signal_update"
                )
            );
            v0_1.l1
        }
        pub fn closure34(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"
                )
            );
            v0_1.l2.clone()
        }
        pub fn closure35(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (10) / effect core_state_heap / data signal_update"
                )
            );
            v0_1.l3.clone()
        }
        pub fn closure36(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>
        {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading new_arc_memo")
            );
            let v6: std::pin::Pin<
                Box<
                    leptos::prelude::ArcRwSignal<
                        std::collections::HashMap<
                            std::string::String,
                            leptos::prelude::ArcRwSignal<bool>,
                        >,
                    >,
                >,
            > = Box::pin(v0_1.l1.clone());
            leptos::prelude::ArcRwSignal::get_untracked(&v6)
        }
        pub fn method43() -> string {
            string("core-state-heap")
        }
        pub fn method44(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
        ) -> Func1<LrcPtr<Dice_ui::Heap3>, std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>>
        {
            v0_1
        }
        pub fn closure37(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = Dice_ui::method44(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method45(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure38(unitVar: (), v0_1: leptos::prelude::ArcRwSignal<bool>) -> Dice_ui::US16 {
            Dice_ui::US16::US16_0(v0_1)
        }
        pub fn method46() -> Func1<leptos::prelude::ArcRwSignal<bool>, Dice_ui::US16> {
            Func1::new(move |v: leptos::prelude::ArcRwSignal<bool>| Dice_ui::closure38((), v))
        }
        pub fn closure39(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string(
                    "state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"
                )
            );
            true
        }
        pub fn method47(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method48() -> string {
            string("core-state-heap")
        }
        pub fn method49(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure40(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method50(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure40(v0_1.clone(), ())
            })
        }
        pub fn closure41(v0_1: leptos_router::location::Location, unitVar: ()) -> string {
            let v2: leptos::prelude::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = leptos::prelude::Memo::get(&v2);
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::prelude::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = leptos::prelude::Memo::get(&v8);
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                (v6),
                (if (v12.clone()) == string("") {
                    string("")
                } else {
                    concat(new_array(&[string("?"), v12]))
                }),
            )
        }
        pub fn method51(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method52(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure42(unitVar: (), v0_1: leptos_router::location::Url) -> Dice_ui::US20 {
            Dice_ui::US20::US20_0(v0_1)
        }
        pub fn method53() -> Func1<leptos_router::location::Url, Dice_ui::US20> {
            Func1::new(move |v: leptos_router::location::Url| Dice_ui::closure42((), v))
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Dice_ui::US20 {
            Dice_ui::US20::US20_1(v0_1)
        }
        pub fn method54() -> Func1<std::string::String, Dice_ui::US20> {
            Func1::new(move |v: std::string::String| Dice_ui::closure43((), v))
        }
        pub fn closure45(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method55() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure45((), arg10_0040)
            })
        }
        pub fn method56(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure44(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v5.l3.clone());
            let v10: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v8);
            let v13: bool = true;
            let _vec_map: Vec<_> = v10
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    //;
                    let v15: LrcPtr<(bool, std::string::String)> = x;
                    let v25: bool = true;
                    v15.0.clone()
                })
                .collect::<Vec<_>>();
            let v27: Vec<(bool, std::string::String)> = _vec_map;
            let v28 = Dice_ui::method55();
            let v29: Vec<(bool, std::string::String)> = Dice_ui::method56(v27);
            let v31: Vec<(bool, std::string::String)> = v29
                .into_iter()
                .filter(|x| v28(x.clone().clone()))
                .collect::<Vec<_>>();
            let v33: bool = true;
            let _vec_map: Vec<_> = v31
                .into_iter()
                .map(|x| {
                    //;
                    let patternInput: (bool, std::string::String) = x;
                    let v38: bool = true;
                    patternInput.1.clone()
                })
                .collect::<Vec<_>>();
            let v40: Vec<std::string::String> = _vec_map;
            let v42: bool = true;
            let _vec_map: Vec<_> = v40
                .into_iter()
                .map(|x| {
                    //;
                    let v44: std::string::String = x;
                    let v46: string = fable_library_rust::String_::fromString(v44);
                    let v48: bool = true;
                    v46
                })
                .collect::<Vec<_>>();
            let v50: Vec<string> = _vec_map;
            let v57: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("use_transactions.render (2) / accounts new_arc_memo / result: "),
                        sprintf!("{:?}", v50.clone()),
                    )),
                    string(""),
                ),
            );
            let v59: bool = true;
            leptos::logging::log!("{}", v57);
            v50
        }
        pub fn method57(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure47(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
            v1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<string, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method57(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn closure46(
            v0_1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<string> = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v8: string = append(
                    (append(string("https://api3.nearblocks.io/v1/account/"), (value))),
                    string(""),
                );
                let v13: bool = true;
                (v8, Dice_ui::US23::US23_0, string(""), false, true) /*;
                let v15: bool = */
            }); //;
            let v17: Func1<string, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v3;
            let v20: Vec<(string, Dice_ui::US23, string, bool, bool)> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v17 = v17.clone();
                        move |v: string| Dice_ui::closure47(v17.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<(string, Dice_ui::US23, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v20.clone());
            let v29: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (3) / accounts_metadata new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v22.clone()),
                    )),
                    string(""),
                ),
            );
            let v31: bool = true;
            leptos::logging::log!("{}", v29);
            v22
        }
        pub fn method59(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn method58(v0_1: LrcPtr<Dice_ui::Heap0>) -> Vec<i32> {
            let v1: i32 = v0_1.l3;
            let v2: Array<i32> = new_init(&0_i32, v1);
            let v3: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method59(v1, v3.clone()) {
                let v5: i32 = v3.l0.get().clone();
                v2.get_mut()[v5 as usize] = v5;
                {
                    let v6: i32 = (v5) + 1_i32;
                    v3.l0.set(v6);
                    ()
                }
            }
            v2.clone().to_vec()
        }
        pub fn method60(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<i32, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure49(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
            v1: i32,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method60(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn method61(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
        ) -> Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            v0_1
        }
        pub fn closure50(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            v1: string,
        ) -> (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) {
            let v2: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                Dice_ui::method61(v0_1);
            let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure48(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v6.l3.clone());
            let v11: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v9);
            let v13: Vec<string> = leptos::prelude::ArcMemo::get(&v1);
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: string = value;
                let v19: Vec<i32> = Dice_ui::method58(v11);
                let v22: bool = true;
                let _func1_from_v20 = Func1::from(move |value| {
                    //;
                    let v26: string = append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string("https://api3.nearblocks.io/v1/account/"),
                                            (v18.clone()),
                                        )),
                                        string("/txns?&order=desc&page="),
                                    )),
                                    (toString((value) + 1_i32)),
                                )),
                                string("&per_page="),
                            )),
                            (toString(25_i32)),
                        )),
                        string(""),
                    );
                    let v31: bool = true;
                    (v26, Dice_ui::US23::US23_0, string(""), false, true) /*;
                    let v33: bool = */
                }); //;
                let v35: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v20;
                let v38: Vec<(string, Dice_ui::US23, string, bool, bool)> = v19
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v35 = v35.clone();
                            move |v: i32| Dice_ui::closure49(v35.clone(), v)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v41: bool = true;
                (v18, v38) /*;
                let v43: bool = */
            }); //;
            let v45: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                _func1_from_v14;
            let v48: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v45 = v45.clone();
                        move |v_1: string| Dice_ui::closure50(v45.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v55: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (4) / accounts_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v48.clone()),
                    )),
                    string(""),
                ),
            );
            let v57: bool = true;
            leptos::logging::log!("{}", v55);
            v48
        }
        pub fn method62(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
        ) -> Func1<
            (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
        > {
            v0_1
        }
        pub fn closure52(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v3: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = Dice_ui::method62(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure54(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
            v1: LrcPtr<Dice_ui::UH0>,
        ) -> LrcPtr<Dice_ui::UH0> {
            LrcPtr::new(Dice_ui::UH0::UH0_1(v0_1, v1))
        }
        pub fn closure53(
            unitVar: (),
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH0>| Dice_ui::closure54(v0_1.clone(), v)
            })
        }
        pub fn method63() -> Func1<
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
            Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>>,
        > {
            Func1::new(move |v: Vec<(string, Dice_ui::US23, string, bool, bool)>| {
                Dice_ui::closure53((), v)
            })
        }
        pub fn method65(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method66(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method64(
            v0_1: LrcPtr<Dice_ui::UH0>,
            v1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH0>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                MutCell::new(v1.clone());
            '_method64: loop {
                break '_method64 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH0::UH0_0 => v1.get().clone(),
                    Dice_ui::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method65(
                                match v0_1.get().clone().as_ref() {
                                    Dice_ui::UH0::UH0_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            );
                        let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method66(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH0> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH0::UH0_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<(string, Dice_ui::US23, string, bool, bool)> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method64;
                        }
                    }
                });
            }
        }
        pub fn closure51(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                patternInput.1.clone() /*;
                let v13: bool = */
            }); //;
            let v15: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = _func1_from_v3;
            let v18: Vec<Vec<(string, Dice_ui::US23, string, bool, bool)>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v15 = v15.clone();
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure52(v15.clone(), arg10_0040)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v21: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US23, string, bool, bool)>().to_vec();
            let v25: List<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v18.clone()));
            let v67: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method64(
                foldBack(
                    Func2::new(
                        move |b0: Vec<(string, Dice_ui::US23, string, bool, bool)>,
                              b1: LrcPtr<Dice_ui::UH0>| {
                            (Dice_ui::method63())(b0)(b1)
                        },
                    ),
                    v25,
                    LrcPtr::new(Dice_ui::UH0::UH0_0),
                ),
                v21,
            );
            let v74: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (5) / txns_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v67.clone()),
                    )),
                    string(""),
                ),
            );
            let v76: bool = true;
            leptos::logging::log!("{}", v74);
            v67
        }
        pub fn method67(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
        ) -> Func1<(string, Dice_ui::US23, string, bool, bool), string> {
            v0_1
        }
        pub fn closure56(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> string {
            let v6: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                Dice_ui::method67(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method68(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
        ) -> Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>
        {
            v0_1
        }
        pub fn closure57(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<string> {
            let v3: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>> =
                Dice_ui::method68(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure59(v0_1: Vec<string>, v1: LrcPtr<Dice_ui::UH1>) -> LrcPtr<Dice_ui::UH1> {
            LrcPtr::new(Dice_ui::UH1::UH1_1(v0_1, v1))
        }
        pub fn closure58(
            unitVar: (),
            v0_1: Vec<string>,
        ) -> Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH1>| Dice_ui::closure59(v0_1.clone(), v)
            })
        }
        pub fn method69() -> Func1<Vec<string>, Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>>> {
            Func1::new(move |v: Vec<string>| Dice_ui::closure58((), v))
        }
        pub fn method71(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method72(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method70(v0_1: LrcPtr<Dice_ui::UH1>, v1: Vec<string>) -> Vec<string> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH1>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<string>> = MutCell::new(v1.clone());
            '_method70: loop {
                break '_method70 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH1::UH1_0 => v1.get().clone(),
                    Dice_ui::UH1::UH1_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<string> = Dice_ui::method71(
                            match v0_1.get().clone().as_ref() {
                                Dice_ui::UH1::UH1_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v5: Vec<string> = Dice_ui::method72(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH1> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH1::UH1_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<string> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method70;
                        }
                    }
                });
            }
        }
        pub fn closure55(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                let _func1_from_v9 = Func1::from(move |value| {
                    //;
                    let patternInput_1: (string, Dice_ui::US23, string, bool, bool) = value;
                    let v20: bool = true;
                    patternInput.0.clone() /*;
                    let v22: bool = */
                }); //;
                let v24: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                    _func1_from_v9;
                let v27: Vec<string> = patternInput
                    .1
                    .clone()
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v24 = v24.clone();
                            move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                                Dice_ui::closure56(v24.clone(), arg10_0040)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v30: bool = true;
                v27 /*;
                let v32: bool = */
            }); //;
            let v34: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<string>,
            > = _func1_from_v3;
            let v37: Vec<Vec<string>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v34 = v34.clone();
                        move |arg10_0040_1: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure57(v34.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v40: Vec<string> = new_empty::<string>().to_vec();
            let v44: List<Vec<string>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v37.clone()));
            let v86: Vec<string> = Dice_ui::method70(
                foldBack(
                    Func2::new(move |b0: Vec<string>, b1: LrcPtr<Dice_ui::UH1>| {
                        (Dice_ui::method69())(b0)(b1)
                    }),
                    v44,
                    LrcPtr::new(Dice_ui::UH1::UH1_0),
                ),
                v40,
            );
            let v88: Array<string> = fable_library_rust::NativeArray_::array_from(v86.clone());
            let v95: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (6) / urls_accounts new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v88.clone()),
                    )),
                    string(""),
                ),
            );
            let v97: bool = true;
            leptos::logging::log!("{}", v95);
            v88
        }
        pub fn method73(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Action,
            (std::string::String, Option<std::string::String>),
        > {
            v0_1
        }
        pub fn closure61(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
            v1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            let v2: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            > = Dice_ui::method73(v0_1);
            let patternInput: (std::string::String, Option<std::string::String>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method74(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure62(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1.clone())
        }
        pub fn method75() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure62((), v))
        }
        pub fn method76(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Txn,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure63(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1: crate::model::near::nearblocks::Txn,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method76(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
            )
        }
        pub fn method77(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure60(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::nearblocks::Txn = value;
                let v9: std::string::String = v7.clone().receipt_id;
                let v11: std::string::String = v7.clone().predecessor_account_id;
                let v13: std::string::String = v7.clone().receiver_account_id;
                let v15: std::string::String = v7.clone().transaction_hash;
                let v17: std::string::String = v7.clone().included_in_block_hash;
                let v19: std::string::String = v7.clone().block_timestamp;
                let v21: crate::model::near::nearblocks::Block = v7.clone().block;
                let v23: u32 = v21.block_height;
                let v25: Vec<crate::model::near::nearblocks::Action> = v7.clone().actions;
                let v28: bool = true;
                let _func1_from_v26 = Func1::from(move |value| {
                    //;
                    let v30: crate::model::near::nearblocks::Action = value;
                    let v32: std::string::String = v30.clone().action;
                    let v34: Option<std::string::String> = v30.method;
                    let v37: bool = true;
                    (v32, v34) /*;
                    let v39: bool = */
                }); //;
                let v41: Func1<
                    crate::model::near::nearblocks::Action,
                    (std::string::String, Option<std::string::String>),
                > = _func1_from_v26;
                let v44: Vec<(std::string::String, Option<std::string::String>)> = v25
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v41 = v41.clone();
                            move |v: crate::model::near::nearblocks::Action| {
                                Dice_ui::closure61(v41.clone(), v)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v47: Array<(std::string::String, Option<std::string::String>)> =
                    Dice_ui::method74(fable_library_rust::NativeArray_::array_from(v44.clone()));
                let v49: crate::model::near::nearblocks::ActionsAgg = v7.clone().actions_agg;
                let v51: f64 = v49.deposit;
                let v53: crate::model::near::nearblocks::Outcomes = v7.clone().outcomes;
                let v55: bool = v53.status;
                let v57: crate::model::near::nearblocks::OutcomesAgg = v7.clone().outcomes_agg;
                let v59: f64 = v57.transaction_fee;
                let v61: Option<Vec<std::string::String>> = v7.logs;
                let v86: Array<std::string::String> = defaultValue(
                    new_empty::<std::string::String>(),
                    map(Dice_ui::method75(), v61),
                );
                let v91: bool = true;
                (v9, v11, v13, v15, v17, v19, v23, v47, v51, v55, v59, v86) /*;
                let v93: bool = */
            }); //;
            let v95: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = _func1_from_v3;
            let v98: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v95 = v95.clone();
                        move |v_1: crate::model::near::nearblocks::Txn| {
                            Dice_ui::closure63(v95.clone(), v_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            Dice_ui::method77(fable_library_rust::NativeArray_::array_from(v98.clone()))
        }
        pub fn closure64(
            v0_1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone());
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn method79(v0_1: string) -> string {
            v0_1
        }
        pub fn method80(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure65(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
            >,
        > {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            > = Dice_ui::method80(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method81(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure66(
            v0_1: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method29(Dice_ui::method28());
            let v6 = Dice_ui::method30();
            let v7 = Dice_ui::method31();
            let v9: Dice_ui::US9 = match &v5 {
                Err(v5_1_0) => v7(v5_1_0.clone()),
                Ok(v5_0_0) => v6(v5_0_0.clone()),
            };
            let v45: Dice_ui::US10 = match &v9 {
                Dice_ui::US9::US9_0(v9_0_0) => Dice_ui::US10::US10_0(defaultValue(
                    Dice_ui::US11::US11_1,
                    map(Dice_ui::method32(), v9_0_0.clone()),
                )),
                Dice_ui::US9::US9_1(v9_1_0) => Dice_ui::US10::US10_1(v9_1_0.clone()),
            };
            let v59: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US10::US10_0(v45_0_0) = &v45 {
                    if let Dice_ui::US11::US11_0(v45_0_0) = &v45_0_0 {
                        Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone())
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v66: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v59.clone()),
                    )),
                    string(""),
                ),
            );
            let v68: bool = true;
            leptos::logging::log!("{}", v66);
            v59
        }
        pub fn closure67(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method82()
        -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US26>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure67((), v)
                },
            )
        }
        pub fn closure68(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US24 {
            Dice_ui::US24::US24_0(v0_1)
        }
        pub fn method83() -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Dice_ui::US24> {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure68((), v))
        }
        pub fn closure69(unitVar: (), v0_1: std::string::String) -> Dice_ui::US24 {
            Dice_ui::US24::US24_1(v0_1)
        }
        pub fn method84() -> Func1<std::string::String, Dice_ui::US24> {
            Func1::new(move |v: std::string::String| Dice_ui::closure69((), v))
        }
        pub fn closure70(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn method85() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US25> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure70((), v))
        }
        pub fn closure73(unitVar: (), v0_1: Dice_ui::US25) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method87() -> Func1<Dice_ui::US25, Dice_ui::US32> {
            Func1::new(move |v: Dice_ui::US25| Dice_ui::closure73((), v))
        }
        pub fn method88(v0_1: Dice_ui::US23) -> Dice_ui::US23 {
            v0_1
        }
        pub fn method89(v0_1: string) -> string {
            v0_1
        }
        pub fn method90(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method91(v0_1: string) -> string {
            v0_1
        }
        pub fn method92(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method93(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method94(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure74(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method95() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure74((), v))
        }
        pub fn closure72(
            v0_1: Dice_ui::US27,
            v1: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US23 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(
                /*;
                let v10: bool = */
                async move {
                    /*;
                    let v12: bool = */
                    ();
                    let v69: Dice_ui::US29 = match &v0_1 {
                        Dice_ui::US27::US27_0(v0_1_0_0) => {
                            let v13: Dice_ui::US28 = match &v0_1 {
                                Dice_ui::US27::US27_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            Dice_ui::US29::US29_0(match &v13 {
                                Dice_ui::US28::US28_0(v13_0_0) => {
                                    let v17: Option<Dice_ui::US25> = tryItem(
                                        v1,
                                        fable_library_rust::NativeArray_::array_from(
                                            v13_0_0.clone().clone(),
                                        ),
                                    );
                                    let v42: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method87(), v17),
                                    );
                                    let v52: Dice_ui::US25 =
                                        if let Dice_ui::US32::US32_0(v42_0_0) = &v42 {
                                            let v46: Dice_ui::US25 = v42_0_0.clone();
                                            if let Dice_ui::US25::US25_0(v46_0_0) = &v46 {
                                                Dice_ui::US25::US25_0(v46_0_0.clone())
                                            } else {
                                                Dice_ui::US25::US25_1
                                            }
                                        } else {
                                            Dice_ui::US25::US25_1
                                        };
                                    Dice_ui::US30::US30_0(match &v52 {
                                        Dice_ui::US25::US25_0(v52_0_0) => Dice_ui::US31::US31_0(
                                            fable_library_rust::String_::fromString(
                                                (match &v52 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                                .l0
                                                .clone(),
                                            ),
                                        ),
                                        _ => Dice_ui::US31::US31_1,
                                    })
                                }
                                Dice_ui::US28::US28_1(v13_1_0) => {
                                    Dice_ui::US30::US30_1(v13_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US29::US29_1,
                    };
                    let v75: string =
                        Dice_ui::method8(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                    let v81: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v0_1.clone()));
                    let v87: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v69.clone()));
                    let v112: bool = if v6 {
                        true
                    } else {
                        if let Dice_ui::US27::US27_0(v0_1_0_0) = &v0_1 {
                            let v88: Dice_ui::US28 = v0_1_0_0.clone();
                            if let Dice_ui::US28::US28_0(v88_0_0) = &v88 {
                                if (get_Count(fable_library_rust::NativeArray_::array_from(
                                    v88_0_0.clone().clone(),
                                ))) == 0_i32
                                {
                                    false
                                } else {
                                    if let Dice_ui::US29::US29_0(v69_0_0) = &v69 {
                                        let v94: Dice_ui::US30 = v69_0_0.clone();
                                        if let Dice_ui::US30::US30_0(v94_0_0) = &v94 {
                                            if let Dice_ui::US31::US31_1 = &v94_0_0 {
                                                true
                                            } else {
                                                false
                                            }
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                }
                            } else {
                                if let Dice_ui::US29::US29_0(v69_0_0) = &v69 {
                                    let v100: Dice_ui::US30 = v69_0_0.clone();
                                    if let Dice_ui::US30::US30_0(v100_0_0) = &v100 {
                                        if let Dice_ui::US31::US31_1 = &v100_0_0 {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US29::US29_0(v69_0_0) = &v69 {
                                let v106: Dice_ui::US30 = v69_0_0.clone();
                                if let Dice_ui::US30::US30_0(v106_0_0) = &v106 {
                                    if let Dice_ui::US31::US31_1 = &v106_0_0 {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    };
                    let v113: string = append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append(
                                                    string(
                                                        "state_core.use_requests (9) / result memo / state_data: ",
                                                    ),
                                                    (v81),
                                                )),
                                                string(" / state_data\': "),
                                            )),
                                            (v87),
                                        )),
                                        string(" / request: "),
                                    )),
                                    (v75),
                                )),
                                string(" / should_fetch: "),
                            )),
                            (ofBoolean(v112)),
                        )),
                        string(""),
                    );
                    let v115: bool = true;
                    leptos::logging::log!("{}", v113);
                    let v529: Dice_ui::US33 = if (v112) == false {
                        Dice_ui::US33::US33_0(None::<string>)
                    } else {
                        let v122: Dice_ui::US23 = Dice_ui::method88(v3);
                        let v264: reqwest_wasm::RequestBuilder = match &v122 {
                            Dice_ui::US23::US23_1 => {
                                let v193: string = Dice_ui::method91(v2.clone());
                                let v202: &str = &*v193;
                                let v260: std::string::String =
                                    Dice_ui::method92(String::from(v202));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .post(v260)
                            }
                            _ => {
                                let v123: string = Dice_ui::method89(v2.clone());
                                let v132: &str = &*v123;
                                let v190: std::string::String =
                                    Dice_ui::method90(String::from(v132));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .get(v190)
                            }
                        };
                        let v273: &str = &*_arg.2.clone();
                        let v306: std::string::String = String::from(v273);
                        let v332: reqwest_wasm::RequestBuilder =
                            reqwest_wasm::RequestBuilder::body(v264, v306);
                        let v477: reqwest_wasm::RequestBuilder =
                            Dice_ui::method94(if (v5) == false {
                                v332
                            } else {
                                let v337: std::string::String =
                                    reqwest_wasm::header::CONTENT_TYPE.to_string();
                                let v339: string = fable_library_rust::String_::fromString(v337);
                                let v340: reqwest_wasm::RequestBuilder = Dice_ui::method93(v332);
                                let v349: &str = &*v339;
                                let v382: std::string::String = String::from(v349);
                                let v416: &str = &*string("application/json");
                                let v449: std::string::String = String::from(v416);
                                reqwest_wasm::RequestBuilder::header(v340, v382, v449)
                            });
                        let v479: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<
                                            reqwest_wasm::Response,
                                            reqwest_wasm::Error,
                                        >,
                                    >,
                            >,
                        > = Box::pin(reqwest_wasm::RequestBuilder::send(v477));
                        let v481: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v479.await;
                        let v482 = Dice_ui::method95();
                        let v488: Result<reqwest_wasm::Response, std::string::String> =
                            v481.map_err(|x| v482(x));
                        let v499: reqwest_wasm::Response = v488?;
                        let v501: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<std::string::String, reqwest_wasm::Error>,
                                    >,
                            >,
                        > = Box::pin(reqwest_wasm::Response::text(v499));
                        let v503: Result<std::string::String, reqwest_wasm::Error> = v501.await;
                        let v504 = Dice_ui::method95();
                        let v510: Result<std::string::String, std::string::String> =
                            v503.map_err(|x| v504(x));
                        let v521: std::string::String = v510?;
                        Dice_ui::US33::US33_0(Some(fable_library_rust::String_::fromString(v521)))
                    };
                    let v541: Result<Option<string>, std::string::String> = match &v529 {
                        Dice_ui::US33::US33_0(v529_0_0) => {
                            Ok::<Option<string>, std::string::String>(v529_0_0.clone())
                        }
                        Dice_ui::US33::US33_1(v529_1_0) => {
                            Err::<Option<string>, std::string::String>(v529_1_0.clone())
                        }
                    };
                    let v544: string = string("}");
                    let v551: bool = true;
                    let _fix_closure_v546 = v541;
                    let v556: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v546 "), (v544))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v557: bool = true;
                    _fix_closure_v546
                },
            ); // rust.fix_closure';
            let v559 = __future_init;
            v559
        }
        pub fn closure71(
            v0_1: Dice_ui::US27,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure72(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method86(
            v0_1: Dice_ui::US27,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Option<string>, std::string::String>,
                            >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure71(v0_1.clone(), v)
            })
        }
        pub fn method96(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method97(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Option<string>, std::string::String>,
                            >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method98(v0_1: string) -> string {
            v0_1
        }
        pub fn closure75(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method99() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure75((), v))
        }
        pub fn method100(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn closure76(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            > = Dice_ui::method100(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method101(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method102(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap4>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure77(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = Dice_ui::method102(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US37 {
            Dice_ui::US37::US37_0(v0_1)
        }
        pub fn method103() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US37>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure79((), v)
            })
        }
        pub fn closure80(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US39 {
            Dice_ui::US39::US39_0(v0_1)
        }
        pub fn method104() -> Func1<Vec<Option<string>>, Dice_ui::US39> {
            Func1::new(move |v: Vec<Option<string>>| Dice_ui::closure80((), v))
        }
        pub fn closure81(unitVar: (), v0_1: std::string::String) -> Dice_ui::US39 {
            Dice_ui::US39::US39_1(v0_1)
        }
        pub fn method105() -> Func1<std::string::String, Dice_ui::US39> {
            Func1::new(move |v: std::string::String| Dice_ui::closure81((), v))
        }
        pub fn closure82(unitVar: (), v0_1: string) -> Dice_ui::US31 {
            Dice_ui::US31::US31_0(v0_1)
        }
        pub fn method106() -> Func1<string, Dice_ui::US31> {
            Func1::new(move |v: string| Dice_ui::closure82((), v))
        }
        pub fn closure85(unitVar: (), v0_1: Dice_ui::US31) -> Dice_ui::US42 {
            Dice_ui::US42::US42_0(v0_1)
        }
        pub fn method108() -> Func1<Dice_ui::US31, Dice_ui::US42> {
            Func1::new(move |v: Dice_ui::US31| Dice_ui::closure85((), v))
        }
        pub fn closure86(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method109()
        -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure86((), v))
        }
        pub fn method110(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure84(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v62: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v35: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v45: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v35_0_0) = &v35 {
                                let v39: Dice_ui::US25 = v35_0_0.clone();
                                if let Dice_ui::US25::US25_0(v39_0_0) = &v39 {
                                    Dice_ui::US25::US25_0(v39_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v45 {
                                Dice_ui::US25::US25_0(v45_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v45 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v75: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v62.clone()))),
                )),
                string(""),
            );
            let v77: bool = true;
            leptos::logging::log!("{}", v75);
            let v84: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v86: bool = true;
            leptos::logging::log!("{}", v84);
            let v129: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v90: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v115: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v90));
                    if let Dice_ui::US42::US42_0(v115_0_0) = &v115 {
                        let v119: Dice_ui::US31 = v115_0_0.clone();
                        if let Dice_ui::US31::US31_0(v119_0_0) = &v119 {
                            Dice_ui::US31::US31_0(v119_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v129_0_0) = &v129 {
                let v131: string = Dice_ui::method41(v129_0_0.clone());
                let v140: &str = &*v131;
                let v166: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v140);
                let v167 = Dice_ui::method42();
                let v173: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v166.map_err(|x| v167(x));
                let v183 = Dice_ui::method109();
                let v184: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method110(v173);
                v184.map(|x| v183(x))
            } else {
                if let Dice_ui::US29::US29_0(v62_0_0) = &v62 {
                    let v187: Dice_ui::US30 = v62_0_0.clone();
                    if let Dice_ui::US30::US30_0(v187_0_0) = &v187 {
                        let v188: Dice_ui::US31 = v187_0_0.clone();
                        if let Dice_ui::US31::US31_0(v188_0_0) = &v188 {
                            let v190: string = Dice_ui::method41(v188_0_0.clone());
                            let v199: &str = &*v190;
                            let v225: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v199);
                            let v226 = Dice_ui::method42();
                            let v232: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v225.map_err(|x| v226(x));
                            let v242 = Dice_ui::method109();
                            let v243: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method110(v232);
                            v243.map(|x| v242(x))
                        } else {
                            let v250: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v129.clone(), v62.clone())),
                                )),
                                string(""),
                            );
                            let v252: bool = true;
                            leptos::logging::log!("{}", v250);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v266: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v129.clone(), v62.clone())),
                            )),
                            string(""),
                        );
                        let v268: bool = true;
                        leptos::logging::log!("{}", v266);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v282: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v129.clone(), v62.clone())),
                        )),
                        string(""),
                    );
                    let v284: bool = true;
                    leptos::logging::log!("{}", v282);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure83(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure84(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method107(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v10: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v12: bool = true;
            leptos::logging::log!("{}", v10);
            let v14: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v39: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v14));
            let v97: Dice_ui::US35 = match &v39 {
                Dice_ui::US26::US26_0(v39_0_0) => {
                    let v43: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v39 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v44 = Dice_ui::method83();
                    let v45 = Dice_ui::method84();
                    let v47: Dice_ui::US24 = match &v43 {
                        Err(v43_1_0) => v45(v43_1_0.clone()),
                        Ok(v43_0_0) => v44(v43_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v47 {
                        Dice_ui::US24::US24_0(v47_0_0) => {
                            let v52: bool = true;
                            let _vec_map: Vec<_> = v47_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v54: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v79: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v54),
                                    );
                                    let v84: bool = true;
                                    v79
                                })
                                .collect::<Vec<_>>();
                            let v86: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v86.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v47_1_0) => Dice_ui::US36::US36_1(v47_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v104: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v97.clone()))),
                )),
                string(""),
            );
            let v106: bool = true;
            leptos::logging::log!("{}", v104);
            let v108: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v133: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v108));
            let v147: Dice_ui::US38 = match &v133 {
                Dice_ui::US37::US37_0(v133_0_0) => {
                    let v137: Result<Vec<Option<string>>, std::string::String> = match &v133 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v138 = Dice_ui::method104();
                    let v139 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v137 {
                        Err(v137_1_0) => v139(v137_1_0.clone()),
                        Ok(v137_0_0) => v138(v137_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v194: Dice_ui::US40 = match &v147 {
                Dice_ui::US38::US38_0(v147_0_0) => {
                    let v148: Dice_ui::US39 = match &v147 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v148 {
                        Dice_ui::US39::US39_0(v148_0_0) => {
                            let v151: bool = true;
                            let _vec_map: Vec<_> = v148_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v153: Option<string> = x;
                                    let v178: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v153),
                                    );
                                    let v183: bool = true;
                                    v178
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v148_1_0) => Dice_ui::US41::US41_1(v148_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v197: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v201: Dice_ui::US41 = match &v194 {
                Dice_ui::US40::US40_0(v194_0_0) => match &v194 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v197.clone()),
            };
            let v284: bool = match &v201 {
                Dice_ui::US41::US41_0(v201_0_0) => {
                    let v204: bool = true;
                    v201_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v206: Dice_ui::US31 = x;
                        let v277: bool = if let Dice_ui::US31::US31_0(v206_0_0) = &v206 {
                            let v216: &str = &*v206_0_0.clone();
                            let v274: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v216),
                            });
                            let v276: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v274.clone());
                            true
                        } else {
                            false
                        };
                        let v279: bool = true;
                        let v281: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v285 = Dice_ui::method107(v97, v201.clone());
            let v286: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v288: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v286
                .iter()
                .enumerate()
                .map(|(i, x)| v285(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v290: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v288.clone());
            let v297: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v290.clone()),
                    )),
                    string(""),
                ),
            );
            let v299: bool = true;
            leptos::logging::log!("{}", v297);
            v290
        }
        pub fn method112(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure88(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method112(v0_1), v1)
        }
        pub fn method111(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure88(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method113(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn method114(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure89(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = Dice_ui::method114(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure87(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v38: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v43: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v68: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v43));
            let v126: Dice_ui::US35 = match &v68 {
                Dice_ui::US26::US26_0(v68_0_0) => {
                    let v72: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v68 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v73 = Dice_ui::method83();
                    let v74 = Dice_ui::method84();
                    let v76: Dice_ui::US24 = match &v72 {
                        Err(v72_1_0) => v74(v72_1_0.clone()),
                        Ok(v72_0_0) => v73(v72_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v76 {
                        Dice_ui::US24::US24_0(v76_0_0) => {
                            let v81: bool = true;
                            let _vec_map: Vec<_> = v76_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v83: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v108: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v83),
                                    );
                                    let v113: bool = true;
                                    v108
                                })
                                .collect::<Vec<_>>();
                            let v115: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v115.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v76_1_0) => Dice_ui::US36::US36_1(v76_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v132: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v38));
            let v138: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v126));
            let v139: string = append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string(
                                                "state_core.use_request (19) / result move / database: ",
                                            ),
                                            (v132),
                                        )),
                                        string(" / database_loading: "),
                                    )),
                                    (ofBoolean(v7)),
                                )),
                                string(" / state_data: "),
                            )),
                            (v138),
                        )),
                        string(" / state_data_loading: "),
                    )),
                    (ofBoolean(v11)),
                )),
                string(""),
            );
            let v141: bool = true;
            leptos::logging::log!("{}", v139);
            let v143: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v145: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v143.to_vec();
            let v148: bool = true;
            let _func1_from_v146 = Func1::from(move |value| {
                //;
                let v150: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = value;
                let v151 = Dice_ui::method111(v0_1);
                let v152: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = Dice_ui::method113(v150);
                let v154: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = v152.map(|x| v151(x));
                let v157: bool = true;
                v154 /*;
                let v159: bool = */
            }); //;
            let v161: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = _func1_from_v146;
            let v164: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v145
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v161 = v161.clone();
                        move |v: Result<
                            Option<crate::model::near::nearblocks::Root>,
                            std::string::String,
                        >| Dice_ui::closure89(v161.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v171: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v164.clone()),
                    )),
                    string(""),
                ),
            );
            let v173: bool = true;
            leptos::logging::log!("{}", v171);
            v164
        }
        pub fn method78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
                        ();
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
                                ();
                                let v29: string = string(
                                    "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())",
                                );
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<rexie::Rexie, rexie::Error>,
                                            >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v39: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v51: string = string("}");
                                let v58: bool = true;
                                let _fix_closure_v53 = v39;
                                let v63: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v53 "), (v51))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v64: bool = true;
                                _fix_closure_v53
                            },
                        ); // rust.fix_closure';
                        let v66 = __future_init;
                        let v68: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                            >,
                        > = v66;
                        let v70: Result<rexie::Rexie, std::string::String> = v68.await;
                        let v76: rexie::Rexie = v70.unwrap();
                        let v87: rexie::Rexie = (Dice_ui::method7())(v76);
                        let v89: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v87);
                        let v96: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_database (3) / database new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v89.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v98: bool = true;
                        leptos::logging::log!("{}", v96);
                        let v99: string = string("}");
                        let v106: bool = true;
                        let _fix_closure_v101 = v89;
                        let v111: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v101 "), (v99))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v112: bool = true;
                        _fix_closure_v101
                    },
                ); // rust.fix_closure';
                let v114 = __future_init;
                let v116: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v114;
                let v118: bool = true;
                v116 /*;
                let v120: bool = */
            }); //;
            let v122: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v124: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v122().await });
            let v127: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v124 = v124.clone();
                    move || Dice_ui::closure64(v124.clone(), ())
                })()
            });
            let v130: bool = true;
            let _func0_from_v128 = Func0::from(move || {
                //;
                let v132: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v124.clone()), |x| {
                        x.clone()
                    });
                let v134: bool = true;
                let _optionm_map_ = v132.map(|x| {
                    //;
                    let v136: std::sync::Arc<rexie::Rexie> = x;
                    let v139: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v136);
                    let v141: bool = true;
                    v139
                });
                let v143: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v145: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v147: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v149: bool = */
                    async move {
                        /*;
                        let v151: bool = */
                        ();
                        let v153: string = sprintf!("{:?}", v143.clone());
                        let v162: string = append(
                            (append(
                                (append(
                                    (append(
                                        string(
                                            "state_core.use_requests (3) / state_data_resource new_local_resource / request : ",
                                        ),
                                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v145.clone()))),
                                    )),
                                    string(" / database: "),
                                )),
                                (v153),
                            )),
                            string(""),
                        );
                        let v164: bool = true;
                        leptos::logging::log!("{}", v162);
                        let v166: bool = true;
                        let _optionm_map_ = v143.map(|x| {
                            //;
                            let v168: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v170: std::sync::Arc<rexie::Rexie> = v168.0;
                            let v172: bool = true;
                            v170
                        });
                        let v174: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v199: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v174));
                        let v699: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v199_0_0) = &v199 {
                            let v206: bool = true;
                            let _func1_from_v204 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v213: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v214: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v213.clone()),
                                    )),
                                    string(""),
                                );
                                let v216: bool = true;
                                leptos::logging::log!("{}", v214);
                                let v218: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v220: bool = */
                                    async {
                                        /*;
                                        let v222: bool = */
                                        ();
                                        let v224: Array<string> = new_array(&[string("store")]);
                                        let v226: Vec<string> = v224.to_vec();
                                        let v229: bool = true;
                                        let _func1_from_v227 = Func1::from(move |value| {
                                            //;
                                            let v231: string = value;
                                            let v240: &str = &*v231;
                                            let v273: std::string::String = String::from(v240);
                                            let v300: bool = true;
                                            v273 /*;
                                            let v302: bool = */
                                        }); //;
                                        let v304: Func1<string, std::string::String> =
                                            _func1_from_v227;
                                        let v307: Vec<std::string::String> = v226
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v304 = v304.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v304.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v308: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v199_0_0.clone());
                                        let v310: Result<rexie::Transaction, rexie::Error> = v308
                                            .transaction(&v307, rexie::TransactionMode::ReadOnly);
                                        let v311 = Dice_ui::method12();
                                        let v317: Result<rexie::Transaction, std::string::String> =
                                            v310.map_err(|x| v311(x));
                                        let v328: rexie::Transaction = v317?;
                                        let v329: string = Dice_ui::method13();
                                        let v338: &str = &*v329;
                                        let v364: Result<rexie::Store, rexie::Error> =
                                            v328.store(v338);
                                        let v365 = Dice_ui::method14();
                                        let v371: Result<rexie::Store, std::string::String> =
                                            v364.map_err(|x| v365(x));
                                        let v382: rexie::Store = v371?;
                                        let v383: string = Dice_ui::method79(v213);
                                        let v392: &str = &*v383;
                                        let v418: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v392);
                                        let v420: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<
                                                            Option<wasm_bindgen::JsValue>,
                                                            rexie::Error,
                                                        >,
                                                    >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v382, v418));
                                        let v422: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v420.await;
                                        let v423 = Dice_ui::method16();
                                        let v429: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v422.map_err(|x| v423(x));
                                        let v440: Option<wasm_bindgen::JsValue> = v429?;
                                        let v465: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v440),
                                        );
                                        let v579: Dice_ui::US25 = match &v465 {
                                            Dice_ui::US4::US4_0(v465_0_0) => {
                                                let v470: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v465 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v472: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v470);
                                                let v473 = Dice_ui::method19();
                                                let v479: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v472.map_err(|x| v473(x));
                                                let v490: Option<serde_json::Value> = v479?;
                                                let v515: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v490),
                                                );
                                                match &v515 {
                                                    Dice_ui::US5::US5_0(v515_0_0) => {
                                                        let v520: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v515 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v522: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v520);
                                                        let v523 = Dice_ui::method22();
                                                        let v529: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v522.map_err(|x| v523(x));
                                                        let v540: Vec<u8> = v529?;
                                                        let v542: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v540.clone());
                                                        let v544: string = append(
                                                            (append(
                                                                string(
                                                                    "state_core.get_data () / data_len: ",
                                                                ),
                                                                (toString(get_Count(v542.clone()))),
                                                            )),
                                                            string(""),
                                                        );
                                                        let v546: bool = true;
                                                        leptos::logging::log!("{}", v544);
                                                        let v548: Vec<u8> = v542.to_vec();
                                                        let v550: &[u8] = v548.as_slice();
                                                        let v552: bool = true;
                                                        let mut v550 = v550;
                                                        let v554: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v550,
                                                        );
                                                        let v555 = Dice_ui::method23();
                                                        let v561: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v554.map_err(|x| v555(x));
                                                        Dice_ui::US25::US25_0(v561?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v590: Option<LrcPtr<Dice_ui::Heap4>> = match &v579 {
                                            Dice_ui::US25::US25_0(v579_0_0) => Some(
                                                match &v579 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v595: string = string("}");
                                        let v602: bool = true;
                                        let _fix_closure_v597 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v590
                                        );
                                        let v607: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v597 "),
                                                        (v595),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v608: bool = true;
                                        _fix_closure_v597
                                    },
                                ); // rust.fix_closure';
                                let v610 = __future_init;
                                let v612: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                > = v610;
                                let v615: bool = true;
                                v612 /*;
                                let v617: bool = */
                            }); //;
                            let v619: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = _func1_from_v204;
                            let v623: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v145.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v619 = v619.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v619.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v625: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v623);
                            let v627: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v625.await;
                            Dice_ui::US24::US24_0(v627?)
                        } else {
                            let v640: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v640))
                        };
                        let v711: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v699 {
                                Dice_ui::US24::US24_0(v699_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v699_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v699_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v699_1_0.clone(),
                                    )
                                }
                            };
                        let v718: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_requests (4) / state_data_resource new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v711.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v720: bool = true;
                        leptos::logging::log!("{}", v718);
                        let v721: string = string("}");
                        let v728: bool = true;
                        let _fix_closure_v723 = v711;
                        let v733: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v723 "), (v721))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v734: bool = true;
                        _fix_closure_v723
                    },
                ); // rust.fix_closure';
                let v736 = __future_init;
                let v738: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                > = v736;
                let v740: bool = true;
                v738 /*;
                let v742: bool = */
            }); //;
            let v744: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            > = _func0_from_v128;
            let v746: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v744().await });
            let v749: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v746 = v746.clone();
                    move || Dice_ui::closure66(v746.clone(), ())
                })()
            });
            let v752: bool = true;
            let _func0_from_v750 = Func0::from(move || {
                //;
                let v754: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v756: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v749.clone());
                let v763: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v754.clone()))),
                    )),
                    string(""),
                );
                let v765: bool = true;
                leptos::logging::log!("{}", v763);
                let v767: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v769: bool = */
                    async move {
                        /*;
                        let v771: bool = */
                        ();
                        let v796: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v756));
                        let v852: Dice_ui::US27 = match &v796 {
                            Dice_ui::US26::US26_0(v796_0_0) => {
                                let v800: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v796 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v801 = Dice_ui::method83();
                                let v802 = Dice_ui::method84();
                                let v804: Dice_ui::US24 = match &v800 {
                                    Err(v800_1_0) => v802(v800_1_0.clone()),
                                    Ok(v800_0_0) => v801(v800_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v804 {
                                    Dice_ui::US24::US24_0(v804_0_0) => {
                                        let v809: bool = true;
                                        let _vec_map: Vec<_> = v804_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v811: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v836: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v811),
                                                );
                                                let v841: bool = true;
                                                v836
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v804_1_0) => {
                                        Dice_ui::US28::US28_1(v804_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v859: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v852.clone()))),
                            )),
                            string(""),
                        );
                        let v861: bool = true;
                        leptos::logging::log!("{}", v859);
                        let v862 = Dice_ui::method86(v852);
                        let v863: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v754);
                        let v866: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v863.iter()
                                .enumerate()
                                .map(|(i, x)| v862(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v868: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                >,
                            >,
                        > = futures::future::try_join_all(v866);
                        let v870: Result<Vec<Option<string>>, std::string::String> = v868.await;
                        let v872: Vec<Option<string>> = v870?;
                        let v877: string = string("}");
                        let v884: bool = true;
                        let _fix_closure_v879 =
                            Ok::<Vec<Option<string>>, std::string::String>(v872);
                        let v889: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v879 "), (v877))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v890: bool = true;
                        _fix_closure_v879
                    },
                ); // rust.fix_closure';
                let v892 = __future_init;
                let v894: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Vec<Option<string>>, std::string::String>,
                            >,
                    >,
                > = v892;
                let v896: bool = true;
                v894 /*;
                let v898: bool = */
            }); //;
            let v900: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Vec<Option<string>>, std::string::String>,
                            >,
                    >,
                >,
            > = _func0_from_v750;
            let v902: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v900().await });
            let v905: bool = true;
            let _func1_from_v903 = Func1::from(move |value| {
                //;
                let v907: LrcPtr<Dice_ui::Heap4> = value;
                let v913: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v907.clone())) as i64)),
                    )),
                    string(""),
                );
                let v915: bool = true;
                leptos::logging::log!("{}", v913);
                let v917: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v919: bool = */
                    async move {
                        /*;
                        let v921: bool = */
                        ();
                        let v923: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v925: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v923);
                        let v927: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v127);
                        let v929: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v927);
                        let v931: bool = true;
                        let _optionm_map_ = v929.map(|x| {
                            //;
                            let v933: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v935: std::sync::Arc<rexie::Rexie> = v933.0;
                            let v937: bool = true;
                            v935
                        });
                        let v939: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v964: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v939));
                        let v1141: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v964_0_0) = &v964 {
                            let v971: bool = true;
                            let _func1_from_v969 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v973: string = patternInput_1.0.clone();
                                let v979: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v981: bool = */
                                    async move {
                                        /*;
                                        let v983: bool = */
                                        ();
                                        let v984: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: ",
                                                ),
                                                (v973.clone()),
                                            )),
                                            string(""),
                                        );
                                        let v986: bool = true;
                                        leptos::logging::log!("{}", v984);
                                        let v987: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v973))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v993: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v907.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v995: bool = true;
                                        leptos::logging::log!("{}", v993);
                                        let v997: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v999: bool = */
                                            async move {
                                                /*;
                                                let v1001: bool = */
                                                ();
                                                let v1003: bool = true;
                                                let mut data = Vec::new();
                                                let v1005: bool = true;
                                                borsh::BorshSerialize::serialize(&v907, &mut data)
                                                    .unwrap();
                                                let v1007: Vec<u8> = data;
                                                let v1009: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v1007).unwrap();
                                                let v1010: string = Dice_ui::method98(v987);
                                                let v1019: &str = &*v1010;
                                                let v1045: rexie::Transaction =
                                                    v964_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v1047: rexie::Store = v1045.store("store")?;
                                                let v1049: bool = true;
                                                v1047.put(&v1009, Some(&v1019.into())).await?;
                                                let v1051: bool = true;
                                                v1045.done().await?;
                                                let v1056: string = string("}");
                                                let v1063: bool = true;
                                                let _fix_closure_v1058 = Ok::<(), rexie::Error>(());
                                                let v1068: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v1058 "),
                                                                (v1056),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v1069: bool = true;
                                                _fix_closure_v1058
                                            },
                                        ); // rust.fix_closure';
                                        let v1071 = __future_init;
                                        let v1073: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<(), rexie::Error>,
                                                    >,
                                            >,
                                        > = v1071;
                                        let v1075: Result<(), rexie::Error> = v1073.await;
                                        let v1076 = Dice_ui::method99();
                                        let v1082: Result<(), std::string::String> =
                                            v1075.map_err(|x| v1076(x));
                                        let v1093: bool = true;
                                        v1082?;
                                        let v1098: string = string("}");
                                        let v1105: bool = true;
                                        let _fix_closure_v1100 = Ok::<(), std::string::String>(());
                                        let v1110: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1100 "),
                                                        (v1098),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1111: bool = true;
                                        _fix_closure_v1100
                                    },
                                ); // rust.fix_closure';
                                let v1113 = __future_init;
                                let v1115: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                > = v1113;
                                let v1118: bool = true;
                                v1115 /*;
                                let v1120: bool = */
                            }); //;
                            let v1122: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = _func1_from_v969;
                            let v1126: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v925.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1122 = v1122.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v1122.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v1128: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v1126);
                            let v1130: Result<Vec<()>, std::string::String> = v1128.await;
                            Dice_ui::US34::US34_0(v1130?)
                        } else {
                            let v1136: bool = true;
                            leptos::logging::log!(
                                "{}",
                                string(
                                    "state_core.use_requests (12) / set_state_data_action / database,request=None"
                                )
                            );
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v1153: Result<Vec<()>, std::string::String> = match &v1141 {
                            Dice_ui::US34::US34_0(v1141_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v1141_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v1141_1_0) => {
                                Err::<Vec<()>, std::string::String>(v1141_1_0.clone())
                            }
                        };
                        let v1154: string = string("}");
                        let v1161: bool = true;
                        let _fix_closure_v1156 = v1153;
                        let v1166: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v1156 "), (v1154))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v1167: bool = true;
                        _fix_closure_v1156
                    },
                ); // rust.fix_closure';
                let v1169 = __future_init;
                let v1171: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v1169;
                let v1174: bool = true;
                v1171 /*;
                let v1176: bool = */
            }); //;
            let v1178: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v903;
            let v1181: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1178 = v1178.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1178.clone(), v_1)
                })(value.clone())
            });
            let v1184: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1181 = v1181.clone();
                    let v749 = v749.clone();
                    let v902 = v902.clone();
                    move || {
                        Dice_ui::closure78(
                            v0_1.clone(),
                            v749.clone(),
                            v902.clone(),
                            v1181.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1184 = v1184.clone();
                    let v124 = v124.clone();
                    let v746 = v746.clone();
                    move || {
                        Dice_ui::closure87(
                            v1.clone(),
                            v124.clone(),
                            v746.clone(),
                            v1184.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method115() -> Func1<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            Dice_ui::US43,
        > {
            Func1::new(
                move |v: Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >| Dice_ui::closure91((), v),
            )
        }
        pub fn closure92(unitVar: (), v0_1: std::string::String) -> Dice_ui::US43 {
            Dice_ui::US43::US43_1(v0_1)
        }
        pub fn method116() -> Func1<std::string::String, Dice_ui::US43> {
            Func1::new(move |v: std::string::String| Dice_ui::closure92((), v))
        }
        pub fn method117(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
        ) -> Func1<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
            Dice_ui::US43,
        > {
            v0_1
        }
        pub fn closure93(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
            v1: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US43 {
            let v2: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = Dice_ui::method117(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure94(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US45 {
            Dice_ui::US45::US45_0(v0_1)
        }
        pub fn method118() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US45,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure94((), v),
            )
        }
        pub fn method119(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
        ) -> Func1<Dice_ui::US43, Dice_ui::US44> {
            v0_1
        }
        pub fn closure95(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
            v1: Dice_ui::US43,
        ) -> Dice_ui::US44 {
            let v2: Func1<Dice_ui::US43, Dice_ui::US44> = Dice_ui::method119(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure96(unitVar: (), v0_1: Dice_ui::US44) -> bool {
            if let Dice_ui::US44::US44_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US45::US45_1 = &v0_1_0_0 {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method120() -> Func1<Dice_ui::US44, bool> {
            Func1::new(move |v: Dice_ui::US44| Dice_ui::closure96((), v))
        }
        pub fn method121(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method123(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                usize,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            )>,
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure99(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1_: usize,
            v1__1: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (
            usize,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method123(v0_1);
            let patternInput: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
                patternInput.12.clone(),
            )
        }
        pub fn method124(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
        ) -> Func1<
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
            (string, usize, LrcPtr<Dice_ui::Heap5>),
        > {
            v0_1
        }
        pub fn closure100(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
            _arg: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            let v14: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            > = Dice_ui::method124(v0_1);
            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = (move |x| v14(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
                _arg.6.clone(),
                _arg.7.clone(),
                _arg.8.clone(),
                _arg.9.clone(),
                _arg.10.clone(),
                _arg.11.clone(),
                _arg.12.clone(),
            ));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure98(v0_1: Array<string>, v1: i32, v2: Dice_ui::US44) -> Dice_ui::US48 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US44::US44_0(v2_0_0) => {
                    let v4: Dice_ui::US45 = v2_0_0.clone();
                    Dice_ui::US48::US48_0(match &v4 {
                        Dice_ui::US45::US45_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US45::US45_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: bool = true;
                            let _func1_from_v14 = Func1::from(move |value| {
                                //;
                                let v18: LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )> = value;
                                let b: (
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = v18.1.clone();
                                let v73: bool = true;
                                (
                                    v18.0.clone(),
                                    b.0.clone(),
                                    b.1.clone(),
                                    b.2.clone(),
                                    b.3.clone(),
                                    b.4.clone(),
                                    b.5.clone(),
                                    b.6.clone(),
                                    b.7.clone(),
                                    b.8.clone(),
                                    b.9.clone(),
                                    b.10.clone(),
                                    b.11.clone(),
                                ) /*;
                                let v75: bool = */
                            }); //;
                            let v77: Func1<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                            > = _func1_from_v14;
                            let v80: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13
                                .into_iter()
                                .map(|x| {
                                    Func1::new({
                                        let v77 = v77.clone();
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            ),
                                        )>| {
                                            Dice_ui::closure99(
                                                v77.clone(),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        }
                                    })(x.clone())
                                })
                                .collect::<Vec<_>>();
                            let v82: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v80.clone());
                            let v84: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v82.to_vec();
                            let v87: bool = true;
                            let _func1_from_v85 = Func1::from(move |value| {
                                //;
                                let patternInput: (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = value;
                                let v103: usize = v1 as usize;
                                let v106: LrcPtr<Dice_ui::Heap5> = LrcPtr::new(Dice_ui::Heap5 {
                                    l0: patternInput.1.clone(),
                                    l1: patternInput.2.clone(),
                                    l2: patternInput.3.clone(),
                                    l3: patternInput.4.clone(),
                                    l4: patternInput.5.clone(),
                                    l5: patternInput.6.clone(),
                                    l6: patternInput.7.clone(),
                                    l7: patternInput.8.clone(),
                                    l8: patternInput.9.clone(),
                                    l9: patternInput.10.clone(),
                                    l10: patternInput.11.clone(),
                                    l11: patternInput.12.clone(),
                                });
                                let v109: bool = true;
                                (v3.clone(), v103, v106) /*;
                                let v111: bool = */
                            }); //;
                            let v113: Func1<
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                                (string, usize, LrcPtr<Dice_ui::Heap5>),
                            > = _func1_from_v85;
                            Dice_ui::US49::US49_0(
                                v84.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v113 = v113.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            )| {
                                                Dice_ui::closure100(v113.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US49::US49_1,
                    })
                }
                Dice_ui::US44::US44_1(v2_1_0) => Dice_ui::US48::US48_1(v2_1_0.clone()),
            }
        }
        pub fn closure97(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US44, Dice_ui::US48> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US44| Dice_ui::closure98(v0_1.clone(), v1, v)
            })
        }
        pub fn method122(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US44, Dice_ui::US48>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure97(v0_1.clone(), v)
            })
        }
        pub fn method125(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method126(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
        ) -> Func1<Dice_ui::US48, Dice_ui::US50> {
            v0_1
        }
        pub fn closure101(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
            v1: Dice_ui::US48,
        ) -> Dice_ui::US50 {
            let v2: Func1<Dice_ui::US48, Dice_ui::US50> = Dice_ui::method126(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method127(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func1<
            Dice_ui::US50,
            Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure102(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v1: Dice_ui::US50,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v2: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            > = Dice_ui::method127(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method128(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method130()
        -> Func1<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US50> {
            Func1::new(
                move |v: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure103((), v)
                },
            )
        }
        pub fn closure104(unitVar: (), v0_1: std::string::String) -> Dice_ui::US50 {
            Dice_ui::US50::US50_1(v0_1)
        }
        pub fn method131() -> Func1<std::string::String, Dice_ui::US50> {
            Func1::new(move |v: std::string::String| Dice_ui::closure104((), v))
        }
        pub fn closure105(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US49 {
            Dice_ui::US49::US49_0(v0_1)
        }
        pub fn method132() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US49> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure105((), v)
            })
        }
        pub fn method133(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method134(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method129(v0_1: LrcPtr<Dice_ui::UH2>, v1: Dice_ui::US51) -> Dice_ui::US51 {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH2>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Dice_ui::US51> = MutCell::new(v1.clone());
            '_method129: loop {
                break '_method129 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH2::UH2_0 => v1.get().clone(),
                    Dice_ui::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v2: Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        > = match v0_1.get().clone().as_ref() {
                            Dice_ui::UH2::UH2_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v4 = Dice_ui::method130();
                        let v5 = Dice_ui::method131();
                        let v7: Dice_ui::US50 = match &v2 {
                            Err(v2_1_0) => v5(v2_1_0.clone()),
                            Ok(v2_0_0) => v4(v2_0_0.clone()),
                        };
                        let v43: Dice_ui::US48 = match &v7 {
                            Dice_ui::US50::US50_0(v7_0_0) => Dice_ui::US48::US48_0(defaultValue(
                                Dice_ui::US49::US49_1,
                                map(Dice_ui::method132(), v7_0_0.clone()),
                            )),
                            Dice_ui::US50::US50_1(v7_1_0) => Dice_ui::US48::US48_1(v7_1_0.clone()),
                        };
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH2> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Dice_ui::US51 = if let Dice_ui::US51::US51_0(v1_0_0) =
                                &v1.get().clone()
                            {
                                match &v43 {
                                    Dice_ui::US48::US48_0(v43_0_0) => {
                                        let v45: Dice_ui::US49 = v43_0_0.clone();
                                        if let Dice_ui::US49::US49_0(v45_0_0) = &v45 {
                                            let v47: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method133(v45_0_0.clone());
                                            let v48: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method134(v1_0_0.clone());
                                            let v50: bool = true;
                                            let mut v48 = v48;
                                            let v52: bool = true;
                                            v48.extend(v47);
                                            Dice_ui::US51::US51_0(v48)
                                        } else {
                                            v1.get().clone()
                                        }
                                    }
                                    Dice_ui::US48::US48_1(v43_1_0) => {
                                        Dice_ui::US51::US51_1(v43_1_0.clone())
                                    }
                                }
                            } else {
                                if let Dice_ui::US48::US48_1(v43_1_0) = &v43 {
                                    Dice_ui::US51::US51_1(v43_1_0.clone())
                                } else {
                                    v1.get().clone()
                                }
                            };
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method129;
                        }
                    }
                });
            }
        }
        pub fn method135(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure106(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method136() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure106((), arg10_0040)
            })
        }
        pub fn method137(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure90(
            v0_1: leptos::prelude::ArcMemo<Array<string>>,
            v1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = leptos::prelude::ArcMemo::get(&v1);
            let v6: bool = true;
            let _func1_from_v4 = Func1::from(move |value| {
                //;
                let v8: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = value;
                let v9 = Dice_ui::method115();
                let v10 = Dice_ui::method116();
                let v12: Dice_ui::US43 = match &v8 {
                    Err(v8_1_0) => v10(v8_1_0.clone()),
                    Ok(v8_0_0) => v9(v8_0_0.clone()),
                };
                let v17: bool = true;
                v12 /*;
                let v19: bool = */
            }); //;
            let v21: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = _func1_from_v4;
            let v24: Vec<Dice_ui::US43> = v3
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v21 = v21.clone();
                        move |v: Result<
                            Option<
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure93(v21.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v27: bool = true;
            let _func1_from_v25 = Func1::from(move |value| {
                //;
                let v29: Dice_ui::US43 = value;
                let v63: Dice_ui::US44 = match &v29 {
                    Dice_ui::US43::US43_0(v29_0_0) => Dice_ui::US44::US44_0(defaultValue(
                        Dice_ui::US45::US45_1,
                        map(Dice_ui::method118(), v29_0_0.clone()),
                    )),
                    Dice_ui::US43::US43_1(v29_1_0) => Dice_ui::US44::US44_1(v29_1_0.clone()),
                };
                let v66: bool = true;
                v63 /*;
                let v68: bool = */
            }); //;
            let v70: Func1<Dice_ui::US43, Dice_ui::US44> = _func1_from_v25;
            let v73: Vec<Dice_ui::US44> = v24
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v70 = v70.clone();
                        move |v_1: Dice_ui::US43| Dice_ui::closure95(v70.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v80: string = append(
                (append(
                    string("transactions.render (8) / txns move / root: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v73.clone()))),
                )),
                string(""),
            );
            let v82: bool = true;
            leptos::logging::log!("{}", v80);
            let v83 = Dice_ui::method120();
            let v84: Vec<Dice_ui::US44> = Dice_ui::method121(v73.clone());
            let v86: Vec<Dice_ui::US44> = v84
                .into_iter()
                .filter(|x| v83(x.clone().clone()))
                .collect::<Vec<_>>();
            let v93: bool = (get_Count(fable_library_rust::NativeArray_::array_from(v86.clone())))
                == (get_Count(fable_library_rust::NativeArray_::array_from(
                    v73.clone().clone(),
                )));
            let v217: Dice_ui::US46 = if v93 {
                Dice_ui::US46::US46_0(Dice_ui::US47::US47_1)
            } else {
                let v98 = Dice_ui::method122(leptos::prelude::ArcMemo::get(&v0_1));
                let v99: Vec<Dice_ui::US44> = Dice_ui::method125(v73);
                let v101: Vec<Dice_ui::US48> = v99
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v98(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v104: bool = true;
                let _func1_from_v102 = Func1::from(move |value| {
                    //;
                    let v106: Dice_ui::US48 = value;
                    let v123: Dice_ui::US50 = match &v106 {
                        Dice_ui::US48::US48_0(v106_0_0) => {
                            let v107: Dice_ui::US49 = v106_0_0.clone();
                            Dice_ui::US50::US50_0(match &v107 {
                                Dice_ui::US49::US49_0(v107_0_0) => Some(
                                    match &v107 {
                                        Dice_ui::US49::US49_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            })
                        }
                        Dice_ui::US48::US48_1(v106_1_0) => Dice_ui::US50::US50_1(v106_1_0.clone()),
                    };
                    let v126: bool = true;
                    v123 /*;
                    let v128: bool = */
                }); //;
                let v130: Func1<Dice_ui::US48, Dice_ui::US50> = _func1_from_v102;
                let v133: Vec<Dice_ui::US50> = v101
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v130 = v130.clone();
                            move |v_2: Dice_ui::US48| Dice_ui::closure101(v130.clone(), v_2)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v136: bool = true;
                let _func1_from_v134 = Func1::from(move |value| {
                    //;
                    let v138: Dice_ui::US50 = value;
                    let v150: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = match &v138 {
                        Dice_ui::US50::US50_0(v138_0_0) => {
                            Ok::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v138_0_0.clone())
                        }
                        Dice_ui::US50::US50_1(v138_1_0) => {
                            Err::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v138_1_0.clone())
                        }
                    };
                    let v153: bool = true;
                    v150 /*;
                    let v155: bool = */
                }); //;
                let v157: Func1<
                    Dice_ui::US50,
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = _func1_from_v134;
                let v160: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = v133
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v157 = v157.clone();
                            move |v_3: Dice_ui::US50| Dice_ui::closure102(v157.clone(), v_3)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v163: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                let v165: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v160.clone());
                let v166: i32 = get_Count(v165.clone());
                let v168: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(LrcPtr::new(Dice_ui::UH2::UH2_0)),
                });
                while Dice_ui::method128(v166, v168.clone()) {
                    let v170: i32 = v168.l0.get().clone();
                    let v173: i32 = ((v170.wrapping_neg()) + (v166)) - 1_i32;
                    let v174: LrcPtr<Dice_ui::UH2> = v168.l1.get().clone();
                    let v175: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v165[v173].clone();
                    let v176: i32 = (v170) + 1_i32;
                    v168.l0.set(v176);
                    v168.l1.set(LrcPtr::new(Dice_ui::UH2::UH2_1(v175, v174)));
                    ()
                }
                {
                    let v180: Dice_ui::US51 =
                        Dice_ui::method129(v168.l1.get().clone(), Dice_ui::US51::US51_0(v163));
                    let v194: Dice_ui::US51 = match &v180 {
                        Dice_ui::US51::US51_0(v180_0_0) => {
                            let v182: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method135(v180_0_0.clone());
                            let v183 = Dice_ui::method136();
                            let v185: bool = true;
                            let mut v182 = v182;
                            let v187: bool = true;
                            v182.sort_by_key(|x| v183(x.clone()));
                            Dice_ui::US51::US51_0(v182)
                        }
                        Dice_ui::US51::US51_1(v180_1_0) => Dice_ui::US51::US51_1(v180_1_0.clone()),
                    };
                    let v209: Dice_ui::US52 = match &v194 {
                        Dice_ui::US51::US51_0(v194_0_0) => {
                            let v196: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method137(v194_0_0.clone());
                            let v198: bool = true;
                            let mut v196 = v196;
                            let v200: bool = true;
                            v196.reverse();
                            let v202: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v196;
                            Dice_ui::US52::US52_0(fable_library_rust::NativeArray_::array_from(
                                v202.clone(),
                            ))
                        }
                        Dice_ui::US51::US51_1(v194_1_0) => Dice_ui::US52::US52_1(v194_1_0.clone()),
                    };
                    match &v209 {
                        Dice_ui::US52::US52_0(v209_0_0) => {
                            Dice_ui::US46::US46_0(Dice_ui::US47::US47_0(v209_0_0.clone()))
                        }
                        Dice_ui::US52::US52_1(v209_1_0) => Dice_ui::US46::US46_1(v209_1_0.clone()),
                    }
                }
            };
            let v234: Dice_ui::US53 = match &v217 {
                Dice_ui::US46::US46_0(v217_0_0) => {
                    let v218: Dice_ui::US47 = v217_0_0.clone();
                    Dice_ui::US53::US53_0(match &v218 {
                        Dice_ui::US47::US47_0(v218_0_0) => Some(
                            match &v218 {
                                Dice_ui::US47::US47_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US46::US46_1(v217_1_0) => Dice_ui::US53::US53_1(v217_1_0.clone()),
            };
            let v246: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = match &v234 {
                Dice_ui::US53::US53_0(v234_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v234_0_0.clone()),
                Dice_ui::US53::US53_1(v234_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v234_1_0.clone()),
            };
            let v253: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        (append(
                            (append(
                                string(
                                    "use_transactions.render (9) / txns new_arc_memo / result: ",
                                ),
                                sprintf!("{:?}", v246.clone()),
                            )),
                            string(" / loading: "),
                        )),
                        (ofBoolean(v93)),
                    )),
                    string(""),
                ),
            );
            let v255: bool = true;
            leptos::logging::log!("{}", v253);
            v246
        }
        pub fn closure108(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US53 {
            Dice_ui::US53::US53_0(v0_1)
        }
        pub fn method138()
        -> Func1<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US53> {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure108((), v)
                },
            )
        }
        pub fn closure109(unitVar: (), v0_1: std::string::String) -> Dice_ui::US53 {
            Dice_ui::US53::US53_1(v0_1)
        }
        pub fn method139() -> Func1<std::string::String, Dice_ui::US53> {
            Func1::new(move |v: std::string::String| Dice_ui::closure109((), v))
        }
        pub fn closure110(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US47 {
            Dice_ui::US47::US47_0(v0_1)
        }
        pub fn method140() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US47> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure110((), v)
            })
        }
        pub fn closure111(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method141() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure111((), v))
        }
        pub fn closure112(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn method142() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure112((), v))
        }
        pub fn method143(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure113(
            unitVar: (),
            v0_1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US23::US23_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method144() -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure113((), v))
        }
        pub fn method145(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn method146(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
        ) -> Func1<
            (string, usize, LrcPtr<Dice_ui::Heap5>),
            Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
        > {
            v0_1
        }
        pub fn closure114(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(string, Dice_ui::US23, string, bool, bool), std::string::String> {
            let v4: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            > = Dice_ui::method146(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure107(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method138();
            let v4 = Dice_ui::method139();
            let v6: Dice_ui::US53 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v42: Dice_ui::US46 = match &v6 {
                Dice_ui::US53::US53_0(v6_0_0) => Dice_ui::US46::US46_0(defaultValue(
                    Dice_ui::US47::US47_1,
                    map(Dice_ui::method140(), v6_0_0.clone()),
                )),
                Dice_ui::US53::US53_1(v6_1_0) => Dice_ui::US46::US46_1(v6_1_0.clone()),
            };
            let v378: Dice_ui::US54 = match &v42 {
                Dice_ui::US46::US46_0(v42_0_0) => {
                    let v43: Dice_ui::US47 = v42_0_0.clone();
                    if let Dice_ui::US47::US47_0(v43_0_0) = &v43 {
                        let v46: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v43_0_0.clone().to_vec();
                        let v49: bool = true;
                        let _func1_from_v47 = Func1::from(move |value| {
                            //;
                            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = value;
                            let v63: &str = &*string("2.0");
                            let v96: std::string::String = String::from(v63);
                            let v130: &str = &*string("dontcare");
                            let v163: std::string::String = String::from(v130);
                            let v197: &str = &*string("EXPERIMENTAL_tx_status");
                            let v230: std::string::String = String::from(v197);
                            let v265: &str = &*string("bowen");
                            let v323: Array<std::string::String> = new_array(&[
                                (patternInput.2.clone()).l3.clone(),
                                String::from(v265),
                            ]);
                            let v325: Vec<std::string::String> = v323.to_vec();
                            let v327: crate::model::near::rpc::RpcInput =
                                crate::model::near::rpc::RpcInput {
                                    jsonrpc: v96,
                                    id: v163,
                                    method: v230,
                                    params: v325,
                                };
                            let v329: Result<std::string::String, serde_json::Error> =
                                serde_json::to_string(&v327);
                            let v330 = Dice_ui::method141();
                            let v336: Result<std::string::String, std::string::String> =
                                v329.map_err(|x| v330(x));
                            let v346 = Dice_ui::method142();
                            let v347: Result<std::string::String, std::string::String> =
                                Dice_ui::method143(v336);
                            let v349: Result<string, std::string::String> = v347.map(|x| v346(x));
                            let v350 = Dice_ui::method144();
                            let v351: Result<string, std::string::String> =
                                Dice_ui::method145(v349);
                            let v353: Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            > = v351.map(|x| v350(x));
                            let v356: bool = true;
                            v353 /*;
                            let v358: bool = */
                        }); //;
                        let v360: Func1<
                            (string, usize, LrcPtr<Dice_ui::Heap5>),
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = _func1_from_v47;
                        let v363: Vec<
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = v46
                            .into_iter()
                            .map(|x| {
                                Func1::new({
                                    let v360 = v360.clone();
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure114(v360.clone(), arg10_0040)
                                    }
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v365: Result<
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                            std::string::String,
                        > = v363.into_iter().collect();
                        let v367: Vec<(string, Dice_ui::US23, string, bool, bool)> = v365?;
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_0(
                            fable_library_rust::NativeArray_::array_from(v367.clone()),
                        ))
                    } else {
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_1)
                    }
                }
                Dice_ui::US46::US46_1(v42_1_0) => Dice_ui::US54::US54_1(v42_1_0.clone()),
            };
            let v395: Dice_ui::US56 = match &v378 {
                Dice_ui::US54::US54_0(v378_0_0) => {
                    let v379: Dice_ui::US55 = v378_0_0.clone();
                    Dice_ui::US56::US56_0(match &v379 {
                        Dice_ui::US55::US55_0(v379_0_0) => Some(
                            match &v379 {
                                Dice_ui::US55::US55_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    })
                }
                Dice_ui::US54::US54_1(v378_1_0) => Dice_ui::US56::US56_1(v378_1_0.clone()),
            };
            let v407: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = match &v395 {
                Dice_ui::US56::US56_0(v395_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v395_0_0.clone()),
                Dice_ui::US56::US56_1(v395_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v395_1_0.clone()),
            };
            let v414: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (10) / rpc_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v407.clone()),
                    )),
                    string(""),
                ),
            );
            let v416: bool = true;
            leptos::logging::log!("{}", v414);
            v407
        }
        pub fn closure116(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method147()
        -> Func1<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, Dice_ui::US56>
        {
            Func1::new(
                move |v: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>| {
                    Dice_ui::closure116((), v)
                },
            )
        }
        pub fn closure117(unitVar: (), v0_1: std::string::String) -> Dice_ui::US56 {
            Dice_ui::US56::US56_1(v0_1)
        }
        pub fn method148() -> Func1<std::string::String, Dice_ui::US56> {
            Func1::new(move |v: std::string::String| Dice_ui::closure117((), v))
        }
        pub fn closure118(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Dice_ui::US55 {
            Dice_ui::US55::US55_0(v0_1)
        }
        pub fn method149()
        -> Func1<Array<(string, Dice_ui::US23, string, bool, bool)>, Dice_ui::US55> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US23, string, bool, bool)>| {
                    Dice_ui::closure118((), v)
                },
            )
        }
        pub fn closure115(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method147();
            let v4 = Dice_ui::method148();
            let v6: Dice_ui::US56 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v42: Dice_ui::US54 = match &v6 {
                Dice_ui::US56::US56_0(v6_0_0) => Dice_ui::US54::US54_0(defaultValue(
                    Dice_ui::US55::US55_1,
                    map(Dice_ui::method149(), v6_0_0.clone()),
                )),
                Dice_ui::US56::US56_1(v6_1_0) => Dice_ui::US54::US54_1(v6_1_0.clone()),
            };
            let v48: Array<(string, Dice_ui::US23, string, bool, bool)> =
                if let Dice_ui::US54::US54_0(v42_0_0) = &v42 {
                    let v43: Dice_ui::US55 = v42_0_0.clone();
                    if let Dice_ui::US55::US55_0(v43_0_0) = &v43 {
                        v43_0_0.clone()
                    } else {
                        new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                };
            let v50: Vec<(string, Dice_ui::US23, string, bool, bool)> = v48.to_vec();
            let v57: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v50.clone()),
                    )),
                    string(""),
                ),
            );
            let v59: bool = true;
            leptos::logging::log!("{}", v57);
            v50
        }
        pub fn closure121(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn method151(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
        ) -> Func1<
            std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>,
            std::collections::HashMap<
                std::string::String,
                (
                    std::string::String,
                    Option<std::string::String>,
                    Option<f64>,
                    Option<std::string::String>,
                ),
            >,
        > {
            v0_1
        }
        pub fn closure122(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            v1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                std::string::String,
                Option<std::string::String>,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            let v2: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = Dice_ui::method151(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method152(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::Receipt,
            (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure123(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method152(v0_1);
            let patternInput: (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
            )
        }
        pub fn method153(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::GasProfile,
            (
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure124(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method153(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method155(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
        ) -> Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>
        {
            v0_1
        }
        pub fn closure126(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
            v1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            let v2: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = Dice_ui::method155(v0_1);
            let patternInput: (std::string::String, std::string::String) = (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure125(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: bool = true;
            let _func1_from_v1 = Func1::from(move |value| {
                //;
                let v5: crate::model::near::rpc::Proof = value;
                let v7: std::string::String = v5.clone().direction;
                let v9: std::string::String = v5.hash;
                let v12: bool = true;
                (v7, v9) /*;
                let v14: bool = */
            }); //;
            let v16: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = _func1_from_v1;
            let v19: Vec<(std::string::String, std::string::String)> = v0_1
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v16 = v16.clone();
                        move |v: crate::model::near::rpc::Proof| Dice_ui::closure126(v16.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v19.clone())
        }
        pub fn method154() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure125((), v))
        }
        pub fn method156(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::ReceiptsOutcome,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ),
        > {
            v0_1
        }
        pub fn closure127(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
            v1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Array<(std::string::String, std::string::String)>,
        ) {
            let v2: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = Dice_ui::method156(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
            )
        }
        pub fn closure120(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::rpc::Receipt = value;
                let v9: std::string::String = v7.clone().predecessor_id;
                let v11: crate::model::near::rpc::ReceiptDetail = v7.clone().receipt;
                let v13: crate::model::near::rpc::ActionDetail = v11.action;
                let v15: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                > = v13.clone().actions;
                let v18: bool = true;
                let _func1_from_v16 = Func1::from(move |value| {
                    //;
                    let v20: std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    > = value;
                    let v23: std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    > = v20
                        .into_iter()
                        .map(|(k, v)| {
                            (
                                k,
                                Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                                    Dice_ui::closure121((), v)
                                })(v),
                            )
                        })
                        .collect();
                    let v26: bool = true;
                    v23 /*;
                    let v28: bool = */
                }); //;
                let v30: Func1<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = _func1_from_v16;
                let v33: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = v15
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v30 = v30.clone();
                            move |v_1: std::collections::HashMap<
                                std::string::String,
                                crate::model::near::rpc::TransferDetail,
                            >| Dice_ui::closure122(v30.clone(), v_1)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v35: Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = fable_library_rust::NativeArray_::array_from(v33.clone());
                let v37: std::string::String = v13.clone().gas_price;
                let v39: Vec<std::string::String> = v13.clone().input_data_ids;
                let v41: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v39.clone());
                let v43: Vec<std::string::String> = v13.clone().output_data_receivers;
                let v45: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v43.clone());
                let v47: std::string::String = v13.clone().signer_id;
                let v49: std::string::String = v13.signer_public_key;
                let v51: std::string::String = v7.clone().receipt_id;
                let v53: std::string::String = v7.receiver_id;
                let v56: bool = true;
                (v9, v35, v37, v41, v45, v47, v49, v51, v53) /*;
                let v58: bool = */
            }); //;
            let v60: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = _func1_from_v3;
            let v63: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v60 = v60.clone();
                        move |v_2: crate::model::near::rpc::Receipt| {
                            Dice_ui::closure123(v60.clone(), v_2)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v65: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v63.clone());
            let v67: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v70: bool = true;
            let _func1_from_v68 = Func1::from(move |value| {
                //;
                let v72: crate::model::near::rpc::ReceiptsOutcome = value;
                let v74: std::string::String = v72.clone().block_hash;
                let v76: std::string::String = v72.clone().id;
                let v78: crate::model::near::rpc::OutcomeDetail = v72.clone().outcome;
                let v80: std::string::String = v78.clone().executor_id;
                let v82: u64 = v78.clone().gas_burnt;
                let v84: Vec<std::string::String> = v78.clone().logs;
                let v86: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v84.clone());
                let v88: crate::model::near::rpc::Metadata = v78.clone().metadata;
                let v90: Vec<crate::model::near::rpc::GasProfile> = v88.clone().gas_profile;
                let v93: bool = true;
                let _func1_from_v91 = Func1::from(move |value| {
                    //;
                    let v95: crate::model::near::rpc::GasProfile = value;
                    let v97: std::string::String = v95.clone().cost;
                    let v99: std::string::String = v95.clone().cost_category;
                    let v101: std::string::String = v95.gas_used;
                    let v104: bool = true;
                    (v97, v99, v101) /*;
                    let v106: bool = */
                }); //;
                let v108: Func1<
                    crate::model::near::rpc::GasProfile,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    ),
                > = _func1_from_v91;
                let v111: Vec<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = v90
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v108 = v108.clone();
                            move |v_3: crate::model::near::rpc::GasProfile| {
                                Dice_ui::closure124(v108.clone(), v_3)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v113: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = fable_library_rust::NativeArray_::array_from(v111.clone());
                let v115: u8 = v88.version;
                let v117: Vec<std::string::String> = v78.clone().receipt_ids;
                let v119: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v117.clone());
                let v121: std::collections::HashMap<std::string::String, std::string::String> =
                    v78.clone().status;
                let v123: Option<std::string::String> = v78.tokens_burnt;
                let v125: Option<Vec<crate::model::near::rpc::Proof>> = v72.proof;
                let v169: Array<(std::string::String, std::string::String)> = defaultValue(
                    new_empty::<(std::string::String, std::string::String)>(),
                    map(Dice_ui::method154(), v125),
                );
                let v174: bool = true;
                (v74, v76, v80, v82, v86, v113, v115, v119, v121, v123, v169) /*;
                let v176: bool = */
            }); //;
            let v178: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = _func1_from_v68;
            let v181: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v67
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v178 = v178.clone();
                        move |v_4: crate::model::near::rpc::ReceiptsOutcome| {
                            Dice_ui::closure127(v178.clone(), v_4)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            (
                v65,
                fable_library_rust::NativeArray_::array_from(v181.clone()),
            )
        }
        pub fn method150() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure120((), v)
            })
        }
        pub fn closure129(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method158() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure129((), v))
        }
        pub fn closure128(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method158(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method157() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure128((), v))
        }
        pub fn closure119(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v8: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method150(), v4);
            let v209: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v8, map(Dice_ui::method157(), v209), v0_1.id)
        }
        pub fn closure133(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method161()
        -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure133((), v))
        }
        pub fn method162(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure132(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v62: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v35: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v45: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v35_0_0) = &v35 {
                                let v39: Dice_ui::US25 = v35_0_0.clone();
                                if let Dice_ui::US25::US25_0(v39_0_0) = &v39 {
                                    Dice_ui::US25::US25_0(v39_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v45 {
                                Dice_ui::US25::US25_0(v45_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v45 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v75: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v62.clone()))),
                )),
                string(""),
            );
            let v77: bool = true;
            leptos::logging::log!("{}", v75);
            let v84: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v86: bool = true;
            leptos::logging::log!("{}", v84);
            let v129: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v90: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v115: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v90));
                    if let Dice_ui::US42::US42_0(v115_0_0) = &v115 {
                        let v119: Dice_ui::US31 = v115_0_0.clone();
                        if let Dice_ui::US31::US31_0(v119_0_0) = &v119 {
                            Dice_ui::US31::US31_0(v119_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v129_0_0) = &v129 {
                let v131: string = Dice_ui::method41(v129_0_0.clone());
                let v140: &str = &*v131;
                let v166: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v140);
                let v167 = Dice_ui::method42();
                let v173: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v166.map_err(|x| v167(x));
                let v183 = Dice_ui::method161();
                let v184: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method162(v173);
                v184.map(|x| v183(x))
            } else {
                if let Dice_ui::US29::US29_0(v62_0_0) = &v62 {
                    let v187: Dice_ui::US30 = v62_0_0.clone();
                    if let Dice_ui::US30::US30_0(v187_0_0) = &v187 {
                        let v188: Dice_ui::US31 = v187_0_0.clone();
                        if let Dice_ui::US31::US31_0(v188_0_0) = &v188 {
                            let v190: string = Dice_ui::method41(v188_0_0.clone());
                            let v199: &str = &*v190;
                            let v225: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v199);
                            let v226 = Dice_ui::method42();
                            let v232: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v225.map_err(|x| v226(x));
                            let v242 = Dice_ui::method161();
                            let v243: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method162(v232);
                            v243.map(|x| v242(x))
                        } else {
                            let v250: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v129.clone(), v62.clone())),
                                )),
                                string(""),
                            );
                            let v252: bool = true;
                            leptos::logging::log!("{}", v250);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v266: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v129.clone(), v62.clone())),
                            )),
                            string(""),
                        );
                        let v268: bool = true;
                        leptos::logging::log!("{}", v266);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v282: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v129.clone(), v62.clone())),
                        )),
                        string(""),
                    );
                    let v284: bool = true;
                    leptos::logging::log!("{}", v282);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure131(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure132(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method160(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure131(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure130(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v10: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v12: bool = true;
            leptos::logging::log!("{}", v10);
            let v14: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v39: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v14));
            let v97: Dice_ui::US35 = match &v39 {
                Dice_ui::US26::US26_0(v39_0_0) => {
                    let v43: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v39 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v44 = Dice_ui::method83();
                    let v45 = Dice_ui::method84();
                    let v47: Dice_ui::US24 = match &v43 {
                        Err(v43_1_0) => v45(v43_1_0.clone()),
                        Ok(v43_0_0) => v44(v43_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v47 {
                        Dice_ui::US24::US24_0(v47_0_0) => {
                            let v52: bool = true;
                            let _vec_map: Vec<_> = v47_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v54: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v79: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v54),
                                    );
                                    let v84: bool = true;
                                    v79
                                })
                                .collect::<Vec<_>>();
                            let v86: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v86.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v47_1_0) => Dice_ui::US36::US36_1(v47_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v104: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v97.clone()))),
                )),
                string(""),
            );
            let v106: bool = true;
            leptos::logging::log!("{}", v104);
            let v108: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v133: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v108));
            let v147: Dice_ui::US38 = match &v133 {
                Dice_ui::US37::US37_0(v133_0_0) => {
                    let v137: Result<Vec<Option<string>>, std::string::String> = match &v133 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v138 = Dice_ui::method104();
                    let v139 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v137 {
                        Err(v137_1_0) => v139(v137_1_0.clone()),
                        Ok(v137_0_0) => v138(v137_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v194: Dice_ui::US40 = match &v147 {
                Dice_ui::US38::US38_0(v147_0_0) => {
                    let v148: Dice_ui::US39 = match &v147 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v148 {
                        Dice_ui::US39::US39_0(v148_0_0) => {
                            let v151: bool = true;
                            let _vec_map: Vec<_> = v148_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v153: Option<string> = x;
                                    let v178: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v153),
                                    );
                                    let v183: bool = true;
                                    v178
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v148_1_0) => Dice_ui::US41::US41_1(v148_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v197: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v201: Dice_ui::US41 = match &v194 {
                Dice_ui::US40::US40_0(v194_0_0) => match &v194 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v197.clone()),
            };
            let v284: bool = match &v201 {
                Dice_ui::US41::US41_0(v201_0_0) => {
                    let v204: bool = true;
                    v201_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v206: Dice_ui::US31 = x;
                        let v277: bool = if let Dice_ui::US31::US31_0(v206_0_0) = &v206 {
                            let v216: &str = &*v206_0_0.clone();
                            let v274: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v216),
                            });
                            let v276: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v274.clone());
                            true
                        } else {
                            false
                        };
                        let v279: bool = true;
                        let v281: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v285 = Dice_ui::method160(v97, v201.clone());
            let v286: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v288: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v286
                .iter()
                .enumerate()
                .map(|(i, x)| v285(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v290: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v288.clone());
            let v297: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v290.clone()),
                    )),
                    string(""),
                ),
            );
            let v299: bool = true;
            leptos::logging::log!("{}", v297);
            v290
        }
        pub fn method164(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure135(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method164(v0_1), v1)
        }
        pub fn method163(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure135(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method165(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn method166(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure136(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = Dice_ui::method166(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure134(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v38: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v43: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v68: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v43));
            let v126: Dice_ui::US35 = match &v68 {
                Dice_ui::US26::US26_0(v68_0_0) => {
                    let v72: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v68 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v73 = Dice_ui::method83();
                    let v74 = Dice_ui::method84();
                    let v76: Dice_ui::US24 = match &v72 {
                        Err(v72_1_0) => v74(v72_1_0.clone()),
                        Ok(v72_0_0) => v73(v72_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v76 {
                        Dice_ui::US24::US24_0(v76_0_0) => {
                            let v81: bool = true;
                            let _vec_map: Vec<_> = v76_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v83: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v108: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v83),
                                    );
                                    let v113: bool = true;
                                    v108
                                })
                                .collect::<Vec<_>>();
                            let v115: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v115.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v76_1_0) => Dice_ui::US36::US36_1(v76_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v132: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v38));
            let v138: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v126));
            let v139: string = append(
                (append(
                    (append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string(
                                                "state_core.use_request (19) / result move / database: ",
                                            ),
                                            (v132),
                                        )),
                                        string(" / database_loading: "),
                                    )),
                                    (ofBoolean(v7)),
                                )),
                                string(" / state_data: "),
                            )),
                            (v138),
                        )),
                        string(" / state_data_loading: "),
                    )),
                    (ofBoolean(v11)),
                )),
                string(""),
            );
            let v141: bool = true;
            leptos::logging::log!("{}", v139);
            let v143: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v145: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v143.to_vec();
            let v148: bool = true;
            let _func1_from_v146 = Func1::from(move |value| {
                //;
                let v150: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = value;
                let v151 = Dice_ui::method163(v0_1);
                let v152: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = Dice_ui::method165(v150);
                let v154: Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                > = v152.map(|x| v151(x));
                let v157: bool = true;
                v154 /*;
                let v159: bool = */
            }); //;
            let v161: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = _func1_from_v146;
            let v164: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v145
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v161 = v161.clone();
                        move |v: Result<
                            Option<crate::model::near::rpc::RpcResponse>,
                            std::string::String,
                        >| Dice_ui::closure136(v161.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v171: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v164.clone()),
                    )),
                    string(""),
                ),
            );
            let v173: bool = true;
            leptos::logging::log!("{}", v171);
            v164
        }
        pub fn method159(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
                        ();
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
                                ();
                                let v29: string = string(
                                    "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())",
                                );
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<rexie::Rexie, rexie::Error>,
                                            >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v39: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v51: string = string("}");
                                let v58: bool = true;
                                let _fix_closure_v53 = v39;
                                let v63: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v53 "), (v51))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v64: bool = true;
                                _fix_closure_v53
                            },
                        ); // rust.fix_closure';
                        let v66 = __future_init;
                        let v68: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                            >,
                        > = v66;
                        let v70: Result<rexie::Rexie, std::string::String> = v68.await;
                        let v76: rexie::Rexie = v70.unwrap();
                        let v87: rexie::Rexie = (Dice_ui::method7())(v76);
                        let v89: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v87);
                        let v96: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_database (3) / database new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v89.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v98: bool = true;
                        leptos::logging::log!("{}", v96);
                        let v99: string = string("}");
                        let v106: bool = true;
                        let _fix_closure_v101 = v89;
                        let v111: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v101 "), (v99))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v112: bool = true;
                        _fix_closure_v101
                    },
                ); // rust.fix_closure';
                let v114 = __future_init;
                let v116: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v114;
                let v118: bool = true;
                v116 /*;
                let v120: bool = */
            }); //;
            let v122: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v124: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v122().await });
            let v127: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v124 = v124.clone();
                    move || Dice_ui::closure64(v124.clone(), ())
                })()
            });
            let v130: bool = true;
            let _func0_from_v128 = Func0::from(move || {
                //;
                let v132: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v124.clone()), |x| {
                        x.clone()
                    });
                let v134: bool = true;
                let _optionm_map_ = v132.map(|x| {
                    //;
                    let v136: std::sync::Arc<rexie::Rexie> = x;
                    let v139: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v136);
                    let v141: bool = true;
                    v139
                });
                let v143: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v145: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v147: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v149: bool = */
                    async move {
                        /*;
                        let v151: bool = */
                        ();
                        let v153: string = sprintf!("{:?}", v143.clone());
                        let v162: string = append(
                            (append(
                                (append(
                                    (append(
                                        string(
                                            "state_core.use_requests (3) / state_data_resource new_local_resource / request : ",
                                        ),
                                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v145.clone()))),
                                    )),
                                    string(" / database: "),
                                )),
                                (v153),
                            )),
                            string(""),
                        );
                        let v164: bool = true;
                        leptos::logging::log!("{}", v162);
                        let v166: bool = true;
                        let _optionm_map_ = v143.map(|x| {
                            //;
                            let v168: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v170: std::sync::Arc<rexie::Rexie> = v168.0;
                            let v172: bool = true;
                            v170
                        });
                        let v174: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v199: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v174));
                        let v699: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v199_0_0) = &v199 {
                            let v206: bool = true;
                            let _func1_from_v204 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v213: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v214: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v213.clone()),
                                    )),
                                    string(""),
                                );
                                let v216: bool = true;
                                leptos::logging::log!("{}", v214);
                                let v218: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v220: bool = */
                                    async {
                                        /*;
                                        let v222: bool = */
                                        ();
                                        let v224: Array<string> = new_array(&[string("store")]);
                                        let v226: Vec<string> = v224.to_vec();
                                        let v229: bool = true;
                                        let _func1_from_v227 = Func1::from(move |value| {
                                            //;
                                            let v231: string = value;
                                            let v240: &str = &*v231;
                                            let v273: std::string::String = String::from(v240);
                                            let v300: bool = true;
                                            v273 /*;
                                            let v302: bool = */
                                        }); //;
                                        let v304: Func1<string, std::string::String> =
                                            _func1_from_v227;
                                        let v307: Vec<std::string::String> = v226
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v304 = v304.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v304.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v308: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v199_0_0.clone());
                                        let v310: Result<rexie::Transaction, rexie::Error> = v308
                                            .transaction(&v307, rexie::TransactionMode::ReadOnly);
                                        let v311 = Dice_ui::method12();
                                        let v317: Result<rexie::Transaction, std::string::String> =
                                            v310.map_err(|x| v311(x));
                                        let v328: rexie::Transaction = v317?;
                                        let v329: string = Dice_ui::method13();
                                        let v338: &str = &*v329;
                                        let v364: Result<rexie::Store, rexie::Error> =
                                            v328.store(v338);
                                        let v365 = Dice_ui::method14();
                                        let v371: Result<rexie::Store, std::string::String> =
                                            v364.map_err(|x| v365(x));
                                        let v382: rexie::Store = v371?;
                                        let v383: string = Dice_ui::method79(v213);
                                        let v392: &str = &*v383;
                                        let v418: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v392);
                                        let v420: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<
                                                            Option<wasm_bindgen::JsValue>,
                                                            rexie::Error,
                                                        >,
                                                    >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v382, v418));
                                        let v422: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v420.await;
                                        let v423 = Dice_ui::method16();
                                        let v429: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v422.map_err(|x| v423(x));
                                        let v440: Option<wasm_bindgen::JsValue> = v429?;
                                        let v465: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v440),
                                        );
                                        let v579: Dice_ui::US25 = match &v465 {
                                            Dice_ui::US4::US4_0(v465_0_0) => {
                                                let v470: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v465 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v472: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v470);
                                                let v473 = Dice_ui::method19();
                                                let v479: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v472.map_err(|x| v473(x));
                                                let v490: Option<serde_json::Value> = v479?;
                                                let v515: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v490),
                                                );
                                                match &v515 {
                                                    Dice_ui::US5::US5_0(v515_0_0) => {
                                                        let v520: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v515 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v522: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v520);
                                                        let v523 = Dice_ui::method22();
                                                        let v529: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v522.map_err(|x| v523(x));
                                                        let v540: Vec<u8> = v529?;
                                                        let v542: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v540.clone());
                                                        let v544: string = append(
                                                            (append(
                                                                string(
                                                                    "state_core.get_data () / data_len: ",
                                                                ),
                                                                (toString(get_Count(v542.clone()))),
                                                            )),
                                                            string(""),
                                                        );
                                                        let v546: bool = true;
                                                        leptos::logging::log!("{}", v544);
                                                        let v548: Vec<u8> = v542.to_vec();
                                                        let v550: &[u8] = v548.as_slice();
                                                        let v552: bool = true;
                                                        let mut v550 = v550;
                                                        let v554: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v550,
                                                        );
                                                        let v555 = Dice_ui::method23();
                                                        let v561: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v554.map_err(|x| v555(x));
                                                        Dice_ui::US25::US25_0(v561?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v590: Option<LrcPtr<Dice_ui::Heap4>> = match &v579 {
                                            Dice_ui::US25::US25_0(v579_0_0) => Some(
                                                match &v579 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v595: string = string("}");
                                        let v602: bool = true;
                                        let _fix_closure_v597 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v590
                                        );
                                        let v607: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v597 "),
                                                        (v595),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v608: bool = true;
                                        _fix_closure_v597
                                    },
                                ); // rust.fix_closure';
                                let v610 = __future_init;
                                let v612: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                > = v610;
                                let v615: bool = true;
                                v612 /*;
                                let v617: bool = */
                            }); //;
                            let v619: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = _func1_from_v204;
                            let v623: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v145.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v619 = v619.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v619.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v625: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v623);
                            let v627: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v625.await;
                            Dice_ui::US24::US24_0(v627?)
                        } else {
                            let v640: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v640))
                        };
                        let v711: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v699 {
                                Dice_ui::US24::US24_0(v699_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v699_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v699_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v699_1_0.clone(),
                                    )
                                }
                            };
                        let v718: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_requests (4) / state_data_resource new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v711.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v720: bool = true;
                        leptos::logging::log!("{}", v718);
                        let v721: string = string("}");
                        let v728: bool = true;
                        let _fix_closure_v723 = v711;
                        let v733: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v723 "), (v721))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v734: bool = true;
                        _fix_closure_v723
                    },
                ); // rust.fix_closure';
                let v736 = __future_init;
                let v738: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                > = v736;
                let v740: bool = true;
                v738 /*;
                let v742: bool = */
            }); //;
            let v744: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                >,
                            >,
                    >,
                >,
            > = _func0_from_v128;
            let v746: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v744().await });
            let v749: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v746 = v746.clone();
                    move || Dice_ui::closure66(v746.clone(), ())
                })()
            });
            let v752: bool = true;
            let _func0_from_v750 = Func0::from(move || {
                //;
                let v754: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v756: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v749.clone());
                let v763: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v754.clone()))),
                    )),
                    string(""),
                );
                let v765: bool = true;
                leptos::logging::log!("{}", v763);
                let v767: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v769: bool = */
                    async move {
                        /*;
                        let v771: bool = */
                        ();
                        let v796: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v756));
                        let v852: Dice_ui::US27 = match &v796 {
                            Dice_ui::US26::US26_0(v796_0_0) => {
                                let v800: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v796 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v801 = Dice_ui::method83();
                                let v802 = Dice_ui::method84();
                                let v804: Dice_ui::US24 = match &v800 {
                                    Err(v800_1_0) => v802(v800_1_0.clone()),
                                    Ok(v800_0_0) => v801(v800_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v804 {
                                    Dice_ui::US24::US24_0(v804_0_0) => {
                                        let v809: bool = true;
                                        let _vec_map: Vec<_> = v804_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v811: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v836: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v811),
                                                );
                                                let v841: bool = true;
                                                v836
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v804_1_0) => {
                                        Dice_ui::US28::US28_1(v804_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v859: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v852.clone()))),
                            )),
                            string(""),
                        );
                        let v861: bool = true;
                        leptos::logging::log!("{}", v859);
                        let v862 = Dice_ui::method86(v852);
                        let v863: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v754);
                        let v866: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v863.iter()
                                .enumerate()
                                .map(|(i, x)| v862(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v868: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                >,
                            >,
                        > = futures::future::try_join_all(v866);
                        let v870: Result<Vec<Option<string>>, std::string::String> = v868.await;
                        let v872: Vec<Option<string>> = v870?;
                        let v877: string = string("}");
                        let v884: bool = true;
                        let _fix_closure_v879 =
                            Ok::<Vec<Option<string>>, std::string::String>(v872);
                        let v889: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v879 "), (v877))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v890: bool = true;
                        _fix_closure_v879
                    },
                ); // rust.fix_closure';
                let v892 = __future_init;
                let v894: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Vec<Option<string>>, std::string::String>,
                            >,
                    >,
                > = v892;
                let v896: bool = true;
                v894 /*;
                let v898: bool = */
            }); //;
            let v900: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                                Output = Result<Vec<Option<string>>, std::string::String>,
                            >,
                    >,
                >,
            > = _func0_from_v750;
            let v902: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v900().await });
            let v905: bool = true;
            let _func1_from_v903 = Func1::from(move |value| {
                //;
                let v907: LrcPtr<Dice_ui::Heap4> = value;
                let v913: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v907.clone())) as i64)),
                    )),
                    string(""),
                );
                let v915: bool = true;
                leptos::logging::log!("{}", v913);
                let v917: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v919: bool = */
                    async move {
                        /*;
                        let v921: bool = */
                        ();
                        let v923: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v925: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v923);
                        let v927: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v127);
                        let v929: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v927);
                        let v931: bool = true;
                        let _optionm_map_ = v929.map(|x| {
                            //;
                            let v933: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v935: std::sync::Arc<rexie::Rexie> = v933.0;
                            let v937: bool = true;
                            v935
                        });
                        let v939: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v964: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v939));
                        let v1141: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v964_0_0) = &v964 {
                            let v971: bool = true;
                            let _func1_from_v969 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v973: string = patternInput_1.0.clone();
                                let v979: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v981: bool = */
                                    async move {
                                        /*;
                                        let v983: bool = */
                                        ();
                                        let v984: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: ",
                                                ),
                                                (v973.clone()),
                                            )),
                                            string(""),
                                        );
                                        let v986: bool = true;
                                        leptos::logging::log!("{}", v984);
                                        let v987: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v973))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v993: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v907.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v995: bool = true;
                                        leptos::logging::log!("{}", v993);
                                        let v997: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v999: bool = */
                                            async move {
                                                /*;
                                                let v1001: bool = */
                                                ();
                                                let v1003: bool = true;
                                                let mut data = Vec::new();
                                                let v1005: bool = true;
                                                borsh::BorshSerialize::serialize(&v907, &mut data)
                                                    .unwrap();
                                                let v1007: Vec<u8> = data;
                                                let v1009: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v1007).unwrap();
                                                let v1010: string = Dice_ui::method98(v987);
                                                let v1019: &str = &*v1010;
                                                let v1045: rexie::Transaction =
                                                    v964_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v1047: rexie::Store = v1045.store("store")?;
                                                let v1049: bool = true;
                                                v1047.put(&v1009, Some(&v1019.into())).await?;
                                                let v1051: bool = true;
                                                v1045.done().await?;
                                                let v1056: string = string("}");
                                                let v1063: bool = true;
                                                let _fix_closure_v1058 = Ok::<(), rexie::Error>(());
                                                let v1068: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v1058 "),
                                                                (v1056),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v1069: bool = true;
                                                _fix_closure_v1058
                                            },
                                        ); // rust.fix_closure';
                                        let v1071 = __future_init;
                                        let v1073: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<(), rexie::Error>,
                                                    >,
                                            >,
                                        > = v1071;
                                        let v1075: Result<(), rexie::Error> = v1073.await;
                                        let v1076 = Dice_ui::method99();
                                        let v1082: Result<(), std::string::String> =
                                            v1075.map_err(|x| v1076(x));
                                        let v1093: bool = true;
                                        v1082?;
                                        let v1098: string = string("}");
                                        let v1105: bool = true;
                                        let _fix_closure_v1100 = Ok::<(), std::string::String>(());
                                        let v1110: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1100 "),
                                                        (v1098),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1111: bool = true;
                                        _fix_closure_v1100
                                    },
                                ); // rust.fix_closure';
                                let v1113 = __future_init;
                                let v1115: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                > = v1113;
                                let v1118: bool = true;
                                v1115 /*;
                                let v1120: bool = */
                            }); //;
                            let v1122: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = _func1_from_v969;
                            let v1126: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v925.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1122 = v1122.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v1122.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v1128: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<(), std::string::String>,
                                            >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v1126);
                            let v1130: Result<Vec<()>, std::string::String> = v1128.await;
                            Dice_ui::US34::US34_0(v1130?)
                        } else {
                            let v1136: bool = true;
                            leptos::logging::log!(
                                "{}",
                                string(
                                    "state_core.use_requests (12) / set_state_data_action / database,request=None"
                                )
                            );
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v1153: Result<Vec<()>, std::string::String> = match &v1141 {
                            Dice_ui::US34::US34_0(v1141_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v1141_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v1141_1_0) => {
                                Err::<Vec<()>, std::string::String>(v1141_1_0.clone())
                            }
                        };
                        let v1154: string = string("}");
                        let v1161: bool = true;
                        let _fix_closure_v1156 = v1153;
                        let v1166: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v1156 "), (v1154))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v1167: bool = true;
                        _fix_closure_v1156
                    },
                ); // rust.fix_closure';
                let v1169 = __future_init;
                let v1171: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v1169;
                let v1174: bool = true;
                v1171 /*;
                let v1176: bool = */
            }); //;
            let v1178: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v903;
            let v1181: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1178 = v1178.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1178.clone(), v_1)
                })(value.clone())
            });
            let v1184: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1181 = v1181.clone();
                    let v749 = v749.clone();
                    let v902 = v902.clone();
                    move || {
                        Dice_ui::closure130(
                            v0_1.clone(),
                            v749.clone(),
                            v902.clone(),
                            v1181.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1184 = v1184.clone();
                    let v124 = v124.clone();
                    let v746 = v746.clone();
                    move || {
                        Dice_ui::closure134(
                            v1.clone(),
                            v124.clone(),
                            v746.clone(),
                            v1184.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn method167() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure137(unitVar: (), v0_1: Dice_ui::US14) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn method168() -> Func1<Dice_ui::US14, Dice_ui::US57> {
            Func1::new(move |v: Dice_ui::US14| Dice_ui::closure137((), v))
        }
        pub fn closure138(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn method169() -> Func1<std::string::String, Dice_ui::US57> {
            Func1::new(move |v: std::string::String| Dice_ui::closure138((), v))
        }
        pub fn closure139(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn method170() -> Func1<crate::model::near::rpc::RpcResponse, Dice_ui::US60> {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure139((), v))
        }
        pub fn closure140(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn method171() -> Func1<std::string::String, Dice_ui::US60> {
            Func1::new(move |v: std::string::String| Dice_ui::closure140((), v))
        }
        pub fn method172(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>,
                    >,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap6>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure141(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>,
                    >,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>,
                    >,
                >,
            > = Dice_ui::method172(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure144(unitVar: (), v0_1: Dice_ui::US59) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(v0_1)
        }
        pub fn method174() -> Func1<Dice_ui::US59, Dice_ui::US58> {
            Func1::new(move |v: Dice_ui::US59| Dice_ui::closure144((), v))
        }
        pub fn closure145(unitVar: (), v0_1: std::string::String) -> Dice_ui::US58 {
            Dice_ui::US58::US58_1(v0_1)
        }
        pub fn method175() -> Func1<std::string::String, Dice_ui::US58> {
            Func1::new(move |v: std::string::String| Dice_ui::closure145((), v))
        }
        pub fn closure143(
            unitVar: (),
            v0_1: Result<Dice_ui::US59, std::string::String>,
        ) -> Dice_ui::US58 {
            let v1 = Dice_ui::method174();
            let v2 = Dice_ui::method175();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn method173() -> Func1<Result<Dice_ui::US59, std::string::String>, Dice_ui::US58> {
            Func1::new(move |v: Result<Dice_ui::US59, std::string::String>| {
                Dice_ui::closure143((), v)
            })
        }
        pub fn closure146(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US62 {
            Dice_ui::US62::US62_0(v0_1)
        }
        pub fn method176() -> Func1<Dice_ui::US58, Dice_ui::US62> {
            Func1::new(move |v: Dice_ui::US58| Dice_ui::closure146((), v))
        }
        pub fn closure142(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::prelude::ArcRwSignal<
                Option<Result<Dice_ui::US59, std::string::String>>,
            > = leptos::prelude::ArcAction::value(&v0_1);
            let v4: Option<Result<Dice_ui::US59, std::string::String>> =
                leptos::prelude::ArcRwSignal::get(&v2);
            let v8: Option<Dice_ui::US58> = map(Dice_ui::method173(), v4);
            let v55: Dice_ui::US62 =
                defaultValue(Dice_ui::US62::US62_1, map(Dice_ui::method176(), v8));
            let v76: Dice_ui::US58 = if let Dice_ui::US62::US62_0(v55_0_0) = &v55 {
                let v59: Dice_ui::US58 = v55_0_0.clone();
                match &v59 {
                    Dice_ui::US58::US58_0(v59_0_0) => {
                        let v62: Dice_ui::US59 = v59_0_0.clone();
                        if let Dice_ui::US59::US59_0(v62_0_0, v62_0_1, v62_0_2, v62_0_3) = &v62 {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                v62_0_0.clone(),
                                v62_0_1.clone(),
                                v62_0_2.clone(),
                                v62_0_3.clone(),
                            ))
                        } else {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                        }
                    }
                    Dice_ui::US58::US58_1(v59_1_0) => Dice_ui::US58::US58_1(v59_1_0.clone()),
                }
            } else {
                Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
            };
            let v96: Dice_ui::US63 = match &v76 {
                Dice_ui::US58::US58_0(v76_0_0) => {
                    let v77: Dice_ui::US59 = v76_0_0.clone();
                    Dice_ui::US63::US63_0(match &v77 {
                        Dice_ui::US59::US59_0(v77_0_0, v77_0_1, v77_0_2, v77_0_3) => Some((
                            match &v77 {
                                Dice_ui::US59::US59_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v77 {
                                Dice_ui::US59::US59_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v77 {
                                Dice_ui::US59::US59_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v77 {
                                Dice_ui::US59::US59_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US58::US58_1(v76_1_0) => Dice_ui::US63::US63_1(v76_1_0.clone()),
            };
            let v108: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v96 {
                Dice_ui::US63::US63_0(v96_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v96_0_0.clone()),
                Dice_ui::US63::US63_1(v96_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v96_1_0.clone()),
            };
            let v115: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / roll new_arc_memo / result: "),
                        sprintf!("{:?}", v108.clone()),
                    )),
                    string(""),
                ),
            );
            let v117: bool = true;
            leptos::logging::log!("{}", v115);
            v108
        }
        pub fn closure148(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method177() -> Func1<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            Dice_ui::US63,
        > {
            Func1::new(
                move |v: Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>| Dice_ui::closure148((), v),
            )
        }
        pub fn closure149(unitVar: (), v0_1: std::string::String) -> Dice_ui::US63 {
            Dice_ui::US63::US63_1(v0_1)
        }
        pub fn method178() -> Func1<std::string::String, Dice_ui::US63> {
            Func1::new(move |v: std::string::String| Dice_ui::closure149((), v))
        }
        pub fn closure150(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method179() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US59,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure150((), arg10_0040),
            )
        }
        pub fn closure151(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method180() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US64,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure151((), arg10_0040),
            )
        }
        pub fn closure147(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method177();
            let v4 = Dice_ui::method178();
            let v6: Dice_ui::US63 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v45: Dice_ui::US58 = match &v6 {
                Dice_ui::US63::US63_0(v6_0_0) => Dice_ui::US58::US58_0(defaultValue(
                    Dice_ui::US59::US59_1,
                    map(Dice_ui::method179(), v6_0_0.clone()),
                )),
                Dice_ui::US63::US63_1(v6_1_0) => Dice_ui::US58::US58_1(v6_1_0.clone()),
            };
            let v97: Dice_ui::US31 = if let Dice_ui::US58::US58_0(v45_0_0) = &v45 {
                let v46: Dice_ui::US59 = v45_0_0.clone();
                if let Dice_ui::US59::US59_0(v46_0_0, v46_0_1, v46_0_2, v46_0_3) = &v46 {
                    let v80: Dice_ui::US64 = defaultValue(
                        Dice_ui::US64::US64_1,
                        map(Dice_ui::method180(), v46_0_2.clone()),
                    );
                    if let Dice_ui::US64::US64_0(
                        v80_0_0,
                        v80_0_1,
                        v80_0_2,
                        v80_0_3,
                        v80_0_4,
                        v80_0_5,
                    ) = &v80
                    {
                        Dice_ui::US31::US31_0(append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append((toString(v80_0_0.clone())), string(": "))),
                                                (toString(v80_0_4.clone())),
                                            )),
                                            string(" - "),
                                        )),
                                        (toString(v80_0_5.clone())),
                                    )),
                                    string(" ("),
                                )),
                                (toString(v80_0_1.clone())),
                            )),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US31::US31_1
                    }
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            let v108: Option<string> = match &v97 {
                Dice_ui::US31::US31_0(v97_0_0) => Some(
                    match &v97 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => None::<string>,
            };
            let v115: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / error_message new_arc_memo / result: "),
                        sprintf!("{:?}", v108.clone()),
                    )),
                    string(""),
                ),
            );
            let v117: bool = true;
            leptos::logging::log!("{}", v115);
            v108
        }
        pub fn closure152(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US31 {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v34: Dice_ui::US14 = defaultValue(
                Dice_ui::US14::US14_1,
                map(Dice_ui::method39(), v8.l1.clone()),
            );
            match &v34 {
                Dice_ui::US14::US14_0(v34_0_0) => {
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                        match &v34 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US31::US31_1,
            }
        }
        pub fn method181(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> {
            v0_1
        }
        pub fn closure154(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
            v1_: bool,
            v1__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v2: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                Dice_ui::method181(v0_1);
            let patternInput: (bool, std::string::String) =
                (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method182(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
        ) -> Func1<(bool, std::string::String), std::string::String> {
            v0_1
        }
        pub fn closure155(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
            _arg: (bool, std::string::String),
        ) -> std::string::String {
            let v3: Func1<(bool, std::string::String), std::string::String> =
                Dice_ui::method182(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure157(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = leptos::prelude::signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure156(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure157(v0_1, v)
            })
        }
        pub fn method183() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure156((), v))
        }
        pub fn method184(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure153(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let v14: LrcPtr<(bool, std::string::String)> = value;
                let v25: bool = true;
                (v14.0.clone(), v14.1.clone()) /*;
                let v27: bool = */
            }); //;
            let v29: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                _func1_from_v10;
            let v32: Vec<(bool, std::string::String)> = v8
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v29 = v29.clone();
                        move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                            Dice_ui::closure154(
                                v29.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v33 = Dice_ui::method55();
            let v34: Vec<(bool, std::string::String)> = Dice_ui::method56(v32);
            let v36: Vec<(bool, std::string::String)> = v34
                .into_iter()
                .filter(|x| v33(x.clone().clone()))
                .collect::<Vec<_>>();
            let v39: bool = true;
            let _func1_from_v37 = Func1::from(move |value| {
                //;
                let patternInput: (bool, std::string::String) = value;
                let v45: bool = true;
                patternInput.1.clone() /*;
                let v47: bool = */
            }); //;
            let v49: Func1<(bool, std::string::String), std::string::String> = _func1_from_v37;
            let v52: Vec<std::string::String> = v36
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v49 = v49.clone();
                        move |arg10_0040_1: (bool, std::string::String)| {
                            Dice_ui::closure155(v49.clone(), arg10_0040_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v53 = Dice_ui::method183();
            let v54: Vec<std::string::String> = Dice_ui::method184(v52);
            v54.iter()
                .enumerate()
                .map(|(i, x)| v53(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method185(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure159(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<std::string::String>,
            leptos::prelude::WriteSignal<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = Dice_ui::method185(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method186(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
            (i32, leptos::prelude::ReadSignal<std::string::String>),
        > {
            v0_1
        }
        pub fn closure160(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::prelude::ReadSignal<std::string::String>) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = Dice_ui::method186(v0_1);
            let patternInput: (i32, leptos::prelude::ReadSignal<std::string::String>) =
                (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure158(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = v7.1.clone();
                let v22: bool = true;
                (v7.0.clone(), b.0.clone(), b.1.clone()) /*;
                let v24: bool = */
            }); //;
            let v26: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = _func1_from_v3;
            let v29: Vec<(
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v26 = v26.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<std::string::String>,
                                leptos::prelude::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure159(
                                v26.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v32: bool = true;
            let _func1_from_v30 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = value;
                let v39: bool = true;
                (patternInput.0.clone(), patternInput.1.clone()) /*;
                let v41: bool = */
            }); //;
            let v43: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = _func1_from_v30;
            v29.into_iter()
                .map(|x| {
                    Func1::new({
                        let v43 = v43.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        )| Dice_ui::closure160(v43.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure161(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure162(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure163(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure164(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure165(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method187() -> Func0<string> {
            Func0::new(move || Dice_ui::closure165((), ()))
        }
        pub fn closure166(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure168(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure169(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure170(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure171(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure173(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<Dice_ui::US31>,
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(v0_1)
        }
        pub fn method189() -> Func1<leptos::prelude::ArcMemo<Dice_ui::US31>, Dice_ui::US65> {
            Func1::new(move |v: leptos::prelude::ArcMemo<Dice_ui::US31>| Dice_ui::closure173((), v))
        }
        pub fn closure172(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v27: Dice_ui::US65 =
                defaultValue(Dice_ui::US65::US65_1, map(Dice_ui::method189(), v1));
            let v37: Dice_ui::US42 = match &v27 {
                Dice_ui::US65::US65_0(v27_0_0) => {
                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                        &match &v27 {
                            Dice_ui::US65::US65_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US42::US42_1,
            };
            let v44: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v37_0_0) = &v37 {
                let v38: Dice_ui::US31 = v37_0_0.clone();
                if let Dice_ui::US31::US31_0(v38_0_0) = &v38 {
                    Dice_ui::US31::US31_0(v38_0_0.clone())
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            match &v44 {
                Dice_ui::US31::US31_0(v44_0_0) => match &v44 {
                    Dice_ui::US31::US31_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string("Select..."),
            }
        }
        pub fn method188(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure172(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure175(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method190() -> Func1<
            leptos::prelude::ArcMemo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            Dice_ui::US66,
        > {
            Func1::new(
                move |v: leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >| Dice_ui::closure175((), v),
            )
        }
        pub fn method192(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            v0_1
        }
        pub fn closure176(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> i32 {
            let v3: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> =
                Dice_ui::method192(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn method191(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure176(v0_1.clone(), arg10_0040)
                }
            })
        }
        pub fn method193(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure177(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method194(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), leptos::prelude::AnyView>
        {
            v0_1
        }
        pub fn closure178(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> leptos::prelude::AnyView {
            let v3: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            > = Dice_ui::method194(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure174(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(
                "class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"",
            );
            let v5: string = append(
                (append((append(string(" "), (v3))), string(""))),
                string(""),
            );
            let v30: Dice_ui::US66 = defaultValue(
                Dice_ui::US66::US66_1,
                map(Dice_ui::method190(), v0_1.clone()),
            );
            let v40: Dice_ui::US67 = match &v30 {
                Dice_ui::US66::US66_0(v30_0_0) => {
                    Dice_ui::US67::US67_0(leptos::prelude::ArcMemo::get(
                        &match &v30 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US67::US67_1,
            };
            let v43: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::prelude::ReadSignal<std::string::String>)>().to_vec();
            let v46: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> = match &v40 {
                Dice_ui::US67::US67_0(v40_0_0) => match &v40 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => v43.clone(),
            };
            let v847: leptos::prelude::Fragment = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v46.clone()),
            ) as u64)
                == 0_u64
            {
                let v52: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v54: string = string(" class=\"[height:17px]\"");
                let v68: string = string(
                    " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v74: string = string(
                    " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v75: string = string("vec![]");
                let v76: Vec<leptos::prelude::AnyView> = vec![];
                let v78: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v76);
                let v80: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v78);
                let v83: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v74))),
                                    string(">move || { v80 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v85: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v80 }</path> };
                let v87: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v85);
                let v91: string = string("vec![v87]");
                let v92: Vec<leptos::prelude::AnyView> = vec![v87];
                let v94: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v92);
                let v96: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v94);
                let v99: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v68))),
                                    string(">move || { v96 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v101: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v96 }</svg> };
                let v103: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v101);
                let v107: string = string("vec![v103]");
                let v108: Vec<leptos::prelude::AnyView> = vec![v103];
                let v110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v108);
                let v112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v110);
                let v115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v54))),
                                    string(">move || { v112 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v117: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v112 }</span> };
                let v119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v117);
                let v121: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v131: &str = &*string("No data");
                let v164: std::string::String = String::from(v131);
                let v190: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v164));
                let v194: string = string("vec![v190]");
                let v195: Vec<leptos::prelude::AnyView> = vec![v190];
                let v197: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v195);
                let v199: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v197);
                let v202: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v121))),
                                    string(">move || { v199 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v204: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v199 }</pre> };
                let v206: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v204);
                let v214: string = string("vec![v119, v206]");
                let v215: Vec<leptos::prelude::AnyView> = vec![v119, v206];
                let v217: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v215);
                let v219: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v217);
                let v222: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v52))),
                                    string(">move || { v219 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v224: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v219 }</div> };
                let v226: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v224);
                let v230: string = string("vec![v226]");
                let v231: Vec<leptos::prelude::AnyView> = vec![v226];
                leptos::prelude::Fragment::new(v231)
            } else {
                let v258: Dice_ui::US66 =
                    defaultValue(Dice_ui::US66::US66_1, map(Dice_ui::method190(), v0_1));
                match &v258 {
                    Dice_ui::US66::US66_0(v258_0_0) => {
                        let v264: leptos::prelude::ArcMemo<
                            Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                        > = match &v258 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v267: bool = true;
                        let _func1_from_v265 = Func1::from(move |value| {
                            //;
                            let patternInput: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v273: bool = true;
                            patternInput.0.clone() /*;
                            let v275: bool = */
                        }); //;
                        let v278 = Dice_ui::method191(_func1_from_v265);
                        let v281: bool = true;
                        let _func1_from_v279 = Func1::from(move |value| {
                            //;
                            let patternInput_1: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v286: std::string::String =
                                leptos::prelude::ReadSignal::get(&patternInput_1.1.clone());
                            let v287: std::string::String = Dice_ui::method193(v286.clone());
                            let v290: bool = true;
                            let _func0_from_v288 = Func0::from(move || {
                                //;
                                let v292: string =
                                    fable_library_rust::String_::fromString(v286.clone());
                                let v295: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v297: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v295);
                                let v300: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                                > = Box::pin(v297.l3.clone());
                                let v302: LrcPtr<Dice_ui::Heap0> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v300);
                                let v310: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v312: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v310);
                                let v322: &str = &*v292;
                                let v384: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                                    l0: v302.l0.clone(),
                                    l1: Some(String::from(v322)),
                                    l2: v302.l2,
                                    l3: v302.l3,
                                    l4: v302.l4.clone(),
                                });
                                let v386: bool = true;
                                leptos::prelude::ArcRwSignal::set(&v312.l3.clone(), v384); //;
                                let v388: bool = true; /*;
                                let v390: bool = */
                            }); //;
                            let v392: Func0<()> = _func0_from_v288;
                            let v507: string = join(
                                string(" "),
                                toArray(delay(Func0::new(move || {
                                    ofList(ofArray_1(new_array(&[
                                        string("flex"),
                                        string("flex-1"),
                                        string("gap-[10px]"),
                                        string("[align-items:center]"),
                                        string("[justify-content:center]"),
                                        string("inline-block"),
                                        string("rounded"),
                                        string("border"),
                                        string("border-gray-400"),
                                        string("hover:bg-gray-100"),
                                        string("px-[22px]"),
                                        string("py-1"),
                                        string("text-sm"),
                                        string("text-gray-900"),
                                        string("bg-gray-200"),
                                        string("hover:text-gray-600"),
                                        string("focus:outline-none"),
                                        string("focus:ring"),
                                        string("active:text-gray-500"),
                                    ])))
                                }))),
                            );
                            let v518: &str = &*v507;
                            let v551: std::string::String = String::from(v518);
                            let v577: std::string::String = v551;
                            let v583: string =
                                string(" aria-label=v287 on:click=move |_| v392() class=v577");
                            let v585: string = fable_library_rust::String_::fromString(v286);
                            let v610: Dice_ui::US65 = defaultValue(
                                Dice_ui::US65::US65_1,
                                map(Dice_ui::method189(), v1.clone()),
                            );
                            let v620: Dice_ui::US42 = match &v610 {
                                Dice_ui::US65::US65_0(v610_0_0) => {
                                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                                        &match &v610 {
                                            Dice_ui::US65::US65_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US42::US42_1,
                            };
                            let v627: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v620_0_0) = &v620
                            {
                                let v621: Dice_ui::US31 = v620_0_0.clone();
                                if let Dice_ui::US31::US31_0(v621_0_0) = &v621 {
                                    Dice_ui::US31::US31_0(v621_0_0.clone())
                                } else {
                                    Dice_ui::US31::US31_1
                                }
                            } else {
                                Dice_ui::US31::US31_1
                            };
                            let v716: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(
                                v627_0_0,
                            ) = &v627
                            {
                                if (v585.clone()) == (v627_0_0.clone()) {
                                    let v632 = {
                                        let clo = Func0::new(move || Dice_ui::closure177((), ()));
                                        Func1::new({
                                            let clo = clo.clone();
                                            move |arg: ()| clo()
                                        })
                                    };
                                    let v644: string = string(
                                        " class=move || \" \".to_owned() + &v632(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                                    );
                                    let v654: string = string(
                                        " stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"",
                                    );
                                    let v655: string = string("vec![]");
                                    let v656: Vec<leptos::prelude::AnyView> = vec![];
                                    let v658: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v656);
                                    let v660: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v658);
                                    let v663: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<circle "), (v654))),
                                                        string(">move || { v660 }</"),
                                                    )),
                                                    string("circle"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v665: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                                    > = leptos::prelude::view! { <circle  stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">move || { v660 }</circle> };
                                    let v667: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v665);
                                    let v673: string = string(
                                        " d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                                    );
                                    let v674: string = string("vec![]");
                                    let v675: Vec<leptos::prelude::AnyView> = vec![];
                                    let v677: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v675);
                                    let v679: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v677);
                                    let v682: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<path "), (v673))),
                                                        string(">move || { v679 }</"),
                                                    )),
                                                    string("path"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v684: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                    > = leptos::prelude::view! { <path  d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">move || { v679 }</path> };
                                    let v686: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v684);
                                    let v694: string = string("vec![v667, v686]");
                                    let v695: Vec<leptos::prelude::AnyView> = vec![v667, v686];
                                    let v697: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v695);
                                    let v699: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v697);
                                    let v702: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<svg "), (v644))),
                                                        string(">move || { v699 }</"),
                                                    )),
                                                    string("svg"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v704: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v632(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v699 }</svg> };
                                    leptos::prelude::IntoAny::into_any(v704)
                                } else {
                                    let v707: string = string("vec![]");
                                    let v708: Vec<leptos::prelude::AnyView> = vec![];
                                    leptos::prelude::IntoAny::into_any(v708)
                                }
                            } else {
                                let v712: string = string("vec![]");
                                let v713: Vec<leptos::prelude::AnyView> = vec![];
                                leptos::prelude::IntoAny::into_any(v713)
                            };
                            let v725: &str = &*v585;
                            let v758: std::string::String = String::from(v725);
                            let v784: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v758),
                            );
                            let v792: string = string("vec![v716, v784]");
                            let v793: Vec<leptos::prelude::AnyView> = vec![v716, v784];
                            let v795: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v793);
                            let v797: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v795);
                            let v800: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<button "), (v583))),
                                                string(">move || { v797 }</"),
                                            )),
                                            string("button"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v802: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Button, _, _>,
                            > = leptos::prelude::view! { <button  aria-label=v287 on:click=move |_| v392() class=v577>move || { v797 }</button> };
                            let v804: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v802);
                            let v808: string = string("vec![v804]");
                            let v809: Vec<leptos::prelude::AnyView> = vec![v804];
                            let v811: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v809);
                            let v813: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v811);
                            let v816: bool = true;
                            v813 /*;
                            let v818: bool = */
                        }); //;
                        let v820: Func1<
                            (i32, leptos::prelude::ReadSignal<std::string::String>),
                            leptos::prelude::AnyView,
                        > = _func1_from_v279;
                        let v832: string = string(
                            "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v824(x) let:x key=move |x| v278(x.to_owned()) each=v264 /> })",
                        );
                        let v833: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::view! { <leptos::prelude::For  children=move |x| v824(x) let:x key=move |x| v278(x.to_owned()) each=v264 /> },
                        );
                        let v837: string = string("vec![v833]");
                        let v838: Vec<leptos::prelude::AnyView> = vec![v833];
                        leptos::prelude::Fragment::new(v838)
                    }
                    _ => {
                        let v841: string = string("vec![]");
                        let v842: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::Fragment::new(v842)
                    }
                }
            };
            let v849: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v847);
            let v852: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5))),
                                string(">move || { v849 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v854: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">move || { v849 }</div> };
            let v856: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v854);
            let v860: string = string("vec![v856]");
            let v861: Vec<leptos::prelude::AnyView> = vec![v856];
            leptos::prelude::Fragment::new(v861)
        }
        pub fn method195(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            v0_1
        }
        pub fn closure179(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method196(v0_1: Func1<std::string::String, ()>) -> Func1<std::string::String, ()> {
            v0_1
        }
        pub fn closure180(v0_1: Func1<std::string::String, ()>, v1: std::string::String) {
            let v2: Func1<std::string::String, ()> = Dice_ui::method196(v0_1);
            (move |x| v2(x))(v1);
            ()
        }
        pub fn closure181(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::prelude::ArcMemo<bool> = leptos::prelude::ArcAction::pending(&v0_1);
            leptos::prelude::ArcMemo::get(&v2)
        }
        pub fn method197(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure182(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure167(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<Option<string>>,
            v3: leptos::prelude::ArcMemo<Dice_ui::US31>,
            v4: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v9: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v19: &str = &*string("Account");
            let v52: std::string::String = String::from(v19);
            let v78: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v52));
            let v88: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            > = Some(v4);
            let v92: Option<leptos::prelude::ArcMemo<Dice_ui::US31>> = Some(v3);
            let v95: string = string("vec![]");
            let v96: Vec<leptos::prelude::AnyView> = vec![];
            let v98: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v96);
            let v100: string = string(" class=\"flex flex-col [position:relative]\"");
            let v103 = {
                let clo = Func0::new(move || Dice_ui::closure168((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v106 = {
                let clo_1 = Func0::new(move || Dice_ui::closure169((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v108: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v112: string = string("vec![v98]");
            let v113: Vec<leptos::prelude::AnyView> = vec![v98];
            let v115: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v113);
            let v117: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v115);
            let v120: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v108))),
                                string(">move || { v117 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v122: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v117 }</div> };
            let v124: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v122);
            let v125: string = string(
                "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v103(())",
            );
            let v128: string = append(
                (append(
                    string(" open=move || v106(())"),
                    (append(
                        (append((append(string(" "), (v125))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v131 = {
                let clo_2 = Func0::new(move || Dice_ui::closure170((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v134 = {
                let clo_3 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v88 = v88.clone();
                    let v92 = v92.clone();
                    move || Dice_ui::closure171(v88.clone(), v92.clone(), v0_1.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v135: string = string(
                "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v134(()) + \" \" + &v131(())",
            );
            let v136: string = append(
                (append((append(string(" "), (v135))), string(""))),
                string(""),
            );
            let v138: string = string(" class=\"flex items-center gap-2\"");
            let v141: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v142: string = (Dice_ui::method188(v88.clone(), v92.clone(), v0_1.clone()))();
            let v151: &str = &*v142;
            let v184: std::string::String = String::from(v151);
            let v210: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v184));
            let v214: string = string("vec![v210]");
            let v215: Vec<leptos::prelude::AnyView> = vec![v210];
            let v217: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v215);
            let v219: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v217);
            let v222: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v141))),
                                string(">move || { v219 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v224: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v219 }</span> };
            let v226: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v224);
            let v230: string = string("vec![v226]");
            let v231: Vec<leptos::prelude::AnyView> = vec![v226];
            let v233: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v231);
            let v235: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v233);
            let v237: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v138))),
                                string(">move || { v235 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v239: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v235 }</div> };
            let v241: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v239);
            let v243: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v246 = {
                let clo_4 = Func0::new(move || Dice_ui::closure166((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v254: string = string(
                " class=move || \" \".to_owned() + &v246(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
            );
            let v256: string = string(
                "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
            );
            let v260: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v256))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v261: string = string("vec![]");
            let v262: Vec<leptos::prelude::AnyView> = vec![];
            let v264: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v262);
            let v266: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v264);
            let v269: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v260))),
                                string(">move || { v266 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v271: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v266 }</path> };
            let v273: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v271);
            let v277: string = string("vec![v273]");
            let v278: Vec<leptos::prelude::AnyView> = vec![v273];
            let v280: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v278);
            let v282: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v280);
            let v285: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v254))),
                                string(">move || { v282 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v287: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v246(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v282 }</svg> };
            let v289: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v287);
            let v293: string = string("vec![v289]");
            let v294: Vec<leptos::prelude::AnyView> = vec![v289];
            let v296: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v294);
            let v298: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v296);
            let v300: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v243))),
                                string(">move || { v298 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v302: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v298 }</span> };
            let v304: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v302);
            let v312: string = string("vec![v241, v304]");
            let v313: Vec<leptos::prelude::AnyView> = vec![v241, v304];
            let v315: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v313);
            let v317: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v315);
            let v320: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<summary "), (v136))),
                                string(">move || { v317 }</"),
                            )),
                            string("summary"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v322: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v134(()) + " " + &v131(())>move || { v317 }</summary> };
            let v324: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v322);
            let v326: string = string(" class=\"flex flex-1 flex-col\"");
            let v330: Func0<leptos::prelude::Fragment> =
                Dice_ui::method195(Func0::new(move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v88 = v88.clone();
                        let v92 = v92.clone();
                        move || Dice_ui::closure174(v88.clone(), v92.clone(), v0_1.clone(), ())
                    })()
                }));
            let v332: leptos::prelude::Fragment = (move || v330())();
            let v334: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v332);
            let v336: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v326))),
                                string(">move || { v334 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v338: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v334 }</div> };
            let v340: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v338);
            let v347: string = string("vec![v324, v340]");
            let v348: Vec<leptos::prelude::AnyView> = vec![v324, v340];
            let v350: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v348);
            let v352: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v350);
            let v355: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<details "), (v128))),
                                string(">move || { v352 }</"),
                            )),
                            string("details"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v357: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Details, _, _>,
            > = leptos::prelude::view! { <details  open=move || v106(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v103(())>move || { v352 }</details> };
            let v359: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v357);
            let v366: string = string("vec![v124, v359]");
            let v367: Vec<leptos::prelude::AnyView> = vec![v124, v359];
            let v369: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v367);
            let v371: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v369);
            let v373: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v100))),
                                string(">move || { v371 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v375: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v371 }</div> };
            let v377: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v375);
            let v384: string = string("vec![v78, v377]");
            let v385: Vec<leptos::prelude::AnyView> = vec![v78, v377];
            let v387: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v385);
            let v389: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v387);
            let v391: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v9))),
                                string(">move || { v389 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v393: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v389 }</div> };
            let v395: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v393);
            let v397: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v407: &str = &*string("Max");
            let v440: std::string::String = String::from(v407);
            let v466: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v440));
            let v469: bool = true;
            let _func0_from_v467 = Func0::from(move || {
                //;
                let v472: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v474: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v472);
                let v477: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v474.l3.clone());
                let v479: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v477);
                let v482: bool = true;
                v479.l2 /*;
                let v484: bool = */
            }); //;
            let v486: Func0<i32> = _func0_from_v467;
            let v489: bool = true;
            let _func1_from_v487 = Func0::from(move || {
                //;
                let v491: std::string::String = value;
                let v494: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v496: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v494);
                let v499: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v496.l3.clone());
                let v501: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v499);
                let v509: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v511: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v509);
                let v515: string = toString(v491);
                let v533: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                    l0: v501.l0.clone(),
                    l1: v501.l1.clone(),
                    l2: if string("") == (v515.clone()) {
                        1_i32
                    } else {
                        toInt32(v515)
                    },
                    l3: v501.l3,
                    l4: v501.l4.clone(),
                });
                let v535: bool = true;
                leptos::prelude::ArcRwSignal::set(&v511.l3.clone(), v533); //;
                let v537: bool = true; /*;
                let v539: bool = */
            }); //;
            let v541: Func1<std::string::String, ()> = _func1_from_v487;
            let v544 = {
                let clo_5 = Func0::new(move || Dice_ui::closure179((), ()));
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v554: string = string(
                "leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v547(leptos::prelude::event_target_value(&event)) prop:value=move || v486() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v544(()) /> }",
            );
            let v556: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v547(leptos::prelude::event_target_value(&event)) prop:value=move || v486() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v544(()) /> };
            let v558: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v556);
            let v565: string = string("vec![v466, v558]");
            let v566: Vec<leptos::prelude::AnyView> = vec![v466, v558];
            let v568: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v566);
            let v570: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v568);
            let v572: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v397))),
                                string(">move || { v570 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v574: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v570 }</div> };
            let v576: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v574);
            let v578: string = string(" class=\"flex\"");
            let v581: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure181(v1.clone(), ())
                })()
            });
            let v582: Func0<bool> = Dice_ui::method197(v581.clone());
            let v585: bool = true;
            let _func0_from_v583 = Func0::from(move || {
                //;
                let v588: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v590: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v588);
                let v593: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v590.l3.clone());
                let v597: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                    l0: (leptos::prelude::ArcRwSignal::get_untracked(&v593)).l2,
                });
                let v599: bool = true;
                leptos::prelude::ArcAction::dispatch(&v1.clone(), v597.clone());
                let v601: bool = true; /*;
                let v603: bool = */
            }); //;
            let v605: Func0<()> = _func0_from_v583;
            let v715: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("flex"),
                        string("gap-[10px]"),
                        string("[align-items:center]"),
                        string("inline-block"),
                        string("rounded"),
                        string("border"),
                        string("border-gray-400"),
                        string("hover:bg-gray-400"),
                        string("px-4"),
                        string("py-1"),
                        string("text-sm"),
                        string("font-medium"),
                        string("text-gray-900"),
                        string("bg-transparent"),
                        string("hover:text-gray-600"),
                        string("focus:outline-none"),
                        string("focus:ring"),
                        string("active:text-gray-500"),
                    ])))
                }))),
            );
            let v726: &str = &*v715;
            let v759: std::string::String = String::from(v726);
            let v785: std::string::String = v759;
            let v791: string =
                string(" on:click=move |_| v605() prop:disabled=move || v582() class=v785");
            let v801: &str = &*string("Roll");
            let v834: std::string::String = String::from(v801);
            let v860: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v834));
            let v1226: leptos::prelude::AnyView = if v581() {
                let v865 = {
                    let clo_6 = Func0::new(move || Dice_ui::closure182((), ()));
                    Func1::new({
                        let clo_6 = clo_6.clone();
                        move |arg_6: ()| clo_6()
                    })
                };
                let v883: string = string(
                    " class=move || \" \".to_owned() + &v865(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"",
                );
                let v895: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                );
                let v907: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                );
                let v908: string = string("vec![]");
                let v909: Vec<leptos::prelude::AnyView> = vec![];
                let v911: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v909);
                let v913: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v911);
                let v916: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v907))),
                                    string(">move || { v913 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v918: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v913 }</animate> };
                let v920: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v918);
                let v932: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                );
                let v933: string = string("vec![]");
                let v934: Vec<leptos::prelude::AnyView> = vec![];
                let v936: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v934);
                let v938: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v936);
                let v940: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v932))),
                                    string(">move || { v938 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v942: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v938 }</animate> };
                let v944: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v942);
                let v956: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                );
                let v957: string = string("vec![]");
                let v958: Vec<leptos::prelude::AnyView> = vec![];
                let v960: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v958);
                let v962: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v960);
                let v964: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v956))),
                                    string(">move || { v962 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v966: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v962 }</animate> };
                let v968: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v966);
                let v978: string = string("vec![v920, v944, v968]");
                let v979: Vec<leptos::prelude::AnyView> = vec![v920, v944, v968];
                let v981: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v979);
                let v983: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v981);
                let v986: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v895))),
                                    string(">move || { v983 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v988: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v983 }</rect> };
                let v1000: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                );
                let v1012: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                );
                let v1013: string = string("vec![]");
                let v1014: Vec<leptos::prelude::AnyView> = vec![];
                let v1016: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1014);
                let v1018: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1016);
                let v1020: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1012))),
                                    string(">move || { v1018 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1022: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1018 }</animate> };
                let v1024: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1022);
                let v1036: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"",
                );
                let v1037: string = string("vec![]");
                let v1038: Vec<leptos::prelude::AnyView> = vec![];
                let v1040: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1038);
                let v1042: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1040);
                let v1044: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1036))),
                                    string(">move || { v1042 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1046: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1042 }</animate> };
                let v1048: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1046);
                let v1060: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                );
                let v1061: string = string("vec![]");
                let v1062: Vec<leptos::prelude::AnyView> = vec![];
                let v1064: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1062);
                let v1066: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1064);
                let v1068: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1060))),
                                    string(">move || { v1066 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1070: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1066 }</animate> };
                let v1072: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1070);
                let v1082: string = string("vec![v1024, v1048, v1072]");
                let v1083: Vec<leptos::prelude::AnyView> = vec![v1024, v1048, v1072];
                let v1085: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1083);
                let v1087: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1085);
                let v1089: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v1000))),
                                    string(">move || { v1087 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1091: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1087 }</rect> };
                let v1103: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                );
                let v1115: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                );
                let v1116: string = string("vec![]");
                let v1117: Vec<leptos::prelude::AnyView> = vec![];
                let v1119: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1117);
                let v1121: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1119);
                let v1123: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1115))),
                                    string(">move || { v1121 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1125: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1121 }</animate> };
                let v1127: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1125);
                let v1139: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                );
                let v1140: string = string("vec![]");
                let v1141: Vec<leptos::prelude::AnyView> = vec![];
                let v1143: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1141);
                let v1145: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1143);
                let v1147: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1139))),
                                    string(">move || { v1145 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1149: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1145 }</animate> };
                let v1151: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1149);
                let v1163: string = string(
                    " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                );
                let v1164: string = string("vec![]");
                let v1165: Vec<leptos::prelude::AnyView> = vec![];
                let v1167: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1165);
                let v1169: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1167);
                let v1171: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1163))),
                                    string(">move || { v1169 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1173: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1169 }</animate> };
                let v1175: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1173);
                let v1185: string = string("vec![v1127, v1151, v1175]");
                let v1186: Vec<leptos::prelude::AnyView> = vec![v1127, v1151, v1175];
                let v1188: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1186);
                let v1190: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1188);
                let v1192: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v1103))),
                                    string(">move || { v1190 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1194: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1190 }</rect> };
                let v1196: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1194);
                let v1198: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1091);
                let v1200: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v988);
                let v1210: string = string("vec![v1200, v1198, v1196]");
                let v1211: Vec<leptos::prelude::AnyView> = vec![v1200, v1198, v1196];
                let v1213: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1211);
                let v1215: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1213);
                let v1217: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v883))),
                                    string(">move || { v1215 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1219: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v865(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1215 }</svg> };
                leptos::prelude::IntoAny::into_any(v1219)
            } else {
                let v1222: string = string("vec![]");
                let v1223: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1223)
            };
            let v1233: string = string("vec![v860, v1226]");
            let v1234: Vec<leptos::prelude::AnyView> = vec![v860, v1226];
            let v1236: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1234);
            let v1238: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1236);
            let v1241: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<button "), (v791))),
                                string(">move || { v1238 }</"),
                            )),
                            string("button"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1243: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Button, _, _>,
            > = leptos::prelude::view! { <button  on:click=move |_| v605() prop:disabled=move || v582() class=v785>move || { v1238 }</button> };
            let v1245: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1243);
            let v1247: Option<string> = leptos::prelude::ArcMemo::get(&v2);
            let v1272: Dice_ui::US31 =
                defaultValue(Dice_ui::US31::US31_1, map(Dice_ui::method106(), v1247));
            let v1451: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(v1272_0_0) = &v1272 {
                let v1278: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v1280: string = string(" class=\"[height:17px]\"");
                let v1294: string = string(
                    " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v1300: string = string(
                    " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v1301: string = string("vec![]");
                let v1302: Vec<leptos::prelude::AnyView> = vec![];
                let v1304: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1302);
                let v1306: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1304);
                let v1308: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v1300))),
                                    string(">move || { v1306 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1310: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1306 }</path> };
                let v1312: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1310);
                let v1316: string = string("vec![v1312]");
                let v1317: Vec<leptos::prelude::AnyView> = vec![v1312];
                let v1319: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1317);
                let v1321: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1319);
                let v1323: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v1294))),
                                    string(">move || { v1321 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1325: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1321 }</svg> };
                let v1327: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1325);
                let v1331: string = string("vec![v1327]");
                let v1332: Vec<leptos::prelude::AnyView> = vec![v1327];
                let v1334: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1332);
                let v1336: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1334);
                let v1338: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v1280))),
                                    string(">move || { v1336 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1340: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1336 }</span> };
                let v1342: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1340);
                let v1344: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v1353: &str = &*v1272_0_0.clone();
                let v1386: std::string::String = String::from(v1353);
                let v1412: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1386));
                let v1416: string = string("vec![v1412]");
                let v1417: Vec<leptos::prelude::AnyView> = vec![v1412];
                let v1419: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1417);
                let v1421: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1419);
                let v1424: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v1344))),
                                    string(">move || { v1421 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1426: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v1421 }</pre> };
                let v1428: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1426);
                let v1435: string = string("vec![v1342, v1428]");
                let v1436: Vec<leptos::prelude::AnyView> = vec![v1342, v1428];
                let v1438: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1436);
                let v1440: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1438);
                let v1442: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v1278))),
                                    string(">move || { v1440 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1444: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v1440 }</div> };
                leptos::prelude::IntoAny::into_any(v1444)
            } else {
                let v1447: string = string("vec![]");
                let v1448: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1448)
            };
            let v1458: string = string("vec![v1245, v1451]");
            let v1459: Vec<leptos::prelude::AnyView> = vec![v1245, v1451];
            let v1461: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1459);
            let v1463: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1461);
            let v1465: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v578))),
                                string(">move || { v1463 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1467: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex">move || { v1463 }</div> };
            let v1469: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1467);
            let v1479: string = string("vec![v395, v576, v1469]");
            let v1480: Vec<leptos::prelude::AnyView> = vec![v395, v576, v1469];
            let v1482: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1480);
            let v1484: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1482);
            let v1486: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v1484 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1488: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col p-[10px] gap-[11px]">move || { v1484 }</div> };
            let v1490: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1488);
            let v1494: string = string("vec![v1490]");
            let v1495: Vec<leptos::prelude::AnyView> = vec![v1490];
            leptos::prelude::Fragment::new(v1495)
        }
        pub fn closure183(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure184(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure185(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method198() -> Func0<string> {
            Func0::new(move || Dice_ui::closure185((), ()))
        }
        pub fn method200(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
        ) -> Func1<(std::string::String, Option<std::string::String>), (string, Dice_ui::US31)>
        {
            v0_1
        }
        pub fn closure188(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US31) {
            let v3: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = Dice_ui::method200(v0_1);
            let patternInput: (string, Dice_ui::US31) =
                (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure189(unitVar: (), _arg: (string, Dice_ui::US31)) -> bool {
            let v1: Dice_ui::US31 = _arg.1.clone();
            if string("FUNCTION_CALL") == (_arg.0.clone()) {
                if let Dice_ui::US31::US31_0(v1_0_0) = &v1 {
                    string("generate_random_number") == (v1_0_0.clone())
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method201() -> Func1<(string, Dice_ui::US31), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US31)| {
                Dice_ui::closure189((), arg10_0040)
            })
        }
        pub fn method202(v0_1: Vec<(string, Dice_ui::US31)>) -> Vec<(string, Dice_ui::US31)> {
            v0_1
        }
        pub fn closure187(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let patternInput: (std::string::String, Option<std::string::String>) = value;
                let v13: string = fable_library_rust::String_::fromString(patternInput.0.clone());
                let v38: Dice_ui::US14 = defaultValue(
                    Dice_ui::US14::US14_1,
                    map(Dice_ui::method39(), patternInput.1.clone()),
                );
                let v48: Dice_ui::US31 = match &v38 {
                    Dice_ui::US14::US14_0(v38_0_0) => {
                        Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                            match &v38 {
                                Dice_ui::US14::US14_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US31::US31_1,
                };
                let v51: bool = true;
                (v13, v48) /*;
                let v53: bool = */
            }); //;
            let v55: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = _func1_from_v6;
            let v58: Vec<(string, Dice_ui::US31)> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v55 = v55.clone();
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure188(v55.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v59 = Dice_ui::method201();
            let v60: Vec<(string, Dice_ui::US31)> = Dice_ui::method202(v58);
            let v62: Vec<(string, Dice_ui::US31)> = v60
                .into_iter()
                .filter(|x| v59(x.clone().clone()))
                .collect::<Vec<_>>();
            if (get_Count(fable_library_rust::NativeArray_::array_from(v62.clone()))) > 0_i32 {
                (_arg.0.clone()) == (fable_library_rust::String_::fromString(v2.l2.clone()))
            } else {
                false
            }
        }
        pub fn method199() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure187((), arg10_0040)
            })
        }
        pub fn method203(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method204(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure190(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method205() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US68> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure190((), v))
        }
        pub fn method206(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure186(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v2446: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v4.clone()),
            ) as u64)
                == 0_u64
            {
                let v11: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v13: string = string(" class=\"[height:17px]\"");
                let v27: string = string(
                    " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v33: string = string(
                    " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v34: string = string("vec![]");
                let v35: Vec<leptos::prelude::AnyView> = vec![];
                let v37: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v35);
                let v39: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v37);
                let v42: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v33))),
                                    string(">move || { v39 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v44: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v39 }</path> };
                let v46: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v44);
                let v50: string = string("vec![v46]");
                let v51: Vec<leptos::prelude::AnyView> = vec![v46];
                let v53: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v51);
                let v55: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v53);
                let v58: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v27))),
                                    string(">move || { v55 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v60: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v55 }</svg> };
                let v62: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v60);
                let v66: string = string("vec![v62]");
                let v67: Vec<leptos::prelude::AnyView> = vec![v62];
                let v69: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v67);
                let v71: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v69);
                let v74: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v13))),
                                    string(">move || { v71 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v76: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v71 }</span> };
                let v78: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v76);
                let v80: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v90: &str = &*string("No account selected");
                let v123: std::string::String = String::from(v90);
                let v149: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v123));
                let v153: string = string("vec![v149]");
                let v154: Vec<leptos::prelude::AnyView> = vec![v149];
                let v156: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v154);
                let v158: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v156);
                let v161: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v80))),
                                    string(">move || { v158 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v163: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v158 }</pre> };
                let v165: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v163);
                let v173: string = string("vec![v78, v165]");
                let v174: Vec<leptos::prelude::AnyView> = vec![v78, v165];
                let v176: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v174);
                let v178: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v176);
                let v181: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v11))),
                                    string(">move || { v178 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v183: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v178 }</div> };
                leptos::prelude::IntoAny::into_any(v183)
            } else {
                let v187: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v188 = Dice_ui::method138();
                let v189 = Dice_ui::method139();
                let v191: Dice_ui::US53 = match &v187 {
                    Err(v187_1_0) => v189(v187_1_0.clone()),
                    Ok(v187_0_0) => v188(v187_0_0.clone()),
                };
                let v227: Dice_ui::US46 = match &v191 {
                    Dice_ui::US53::US53_0(v191_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v191_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v191_1_0) => Dice_ui::US46::US46_1(v191_1_0.clone()),
                };
                match &v227 {
                    Dice_ui::US46::US46_0(v227_0_0) => {
                        let v228: Dice_ui::US47 = v227_0_0.clone();
                        if let Dice_ui::US47::US47_0(v228_0_0) = &v228 {
                            let v231: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v228_0_0.clone().to_vec();
                            let v232 = Dice_ui::method199();
                            let v233: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method203(v231);
                            let v235: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v233
                                .into_iter()
                                .filter(|x| v232(x.clone().clone()))
                                .collect::<Vec<_>>();
                            let v238: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v248: &str = &*string("Block Timestamp");
                            let v281: std::string::String = String::from(v248);
                            let v307: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v281),
                            );
                            let v311: string = string("vec![v307]");
                            let v312: Vec<leptos::prelude::AnyView> = vec![v307];
                            let v314: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v312);
                            let v316: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v314);
                            let v319: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v238))),
                                                string(">move || { v316 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v321: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v316 }</th> };
                            let v323: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v321);
                            let v325: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v335: &str = &*string("Predecessor");
                            let v368: std::string::String = String::from(v335);
                            let v394: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v368),
                            );
                            let v398: string = string("vec![v394]");
                            let v399: Vec<leptos::prelude::AnyView> = vec![v394];
                            let v401: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v399);
                            let v403: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v401);
                            let v405: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v325))),
                                                string(">move || { v403 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v407: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v403 }</th> };
                            let v409: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v407);
                            let v411: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v421: &str = &*string("Receiver");
                            let v454: std::string::String = String::from(v421);
                            let v480: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v454),
                            );
                            let v484: string = string("vec![v480]");
                            let v485: Vec<leptos::prelude::AnyView> = vec![v480];
                            let v487: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v485);
                            let v489: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v487);
                            let v491: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v411))),
                                                string(">move || { v489 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v493: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v489 }</th> };
                            let v495: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v493);
                            let v497: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v507: &str = &*string("Fee");
                            let v540: std::string::String = String::from(v507);
                            let v566: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v540),
                            );
                            let v570: string = string("vec![v566]");
                            let v571: Vec<leptos::prelude::AnyView> = vec![v566];
                            let v573: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v571);
                            let v575: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v573);
                            let v577: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v497))),
                                                string(">move || { v575 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v579: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v575 }</th> };
                            let v581: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v579);
                            let v583: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v593: &str = &*string("Result");
                            let v626: std::string::String = String::from(v593);
                            let v652: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v626),
                            );
                            let v656: string = string("vec![v652]");
                            let v657: Vec<leptos::prelude::AnyView> = vec![v652];
                            let v659: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v657);
                            let v661: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v659);
                            let v663: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v583))),
                                                string(">move || { v661 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v665: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v661 }</th> };
                            let v667: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v665);
                            let v669: string = string(
                                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                            );
                            let v679: &str = &*string("Status");
                            let v712: std::string::String = String::from(v679);
                            let v738: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v712),
                            );
                            let v742: string = string("vec![v738]");
                            let v743: Vec<leptos::prelude::AnyView> = vec![v738];
                            let v745: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v743);
                            let v747: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v745);
                            let v749: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v669))),
                                                string(">move || { v747 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v751: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v747 }</th> };
                            let v753: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v751);
                            let v773: string = string("vec![v323, v409, v495, v581, v667, v753]");
                            let v774: Vec<leptos::prelude::AnyView> =
                                vec![v323, v409, v495, v581, v667, v753];
                            let v776: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v774);
                            let v778: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v776);
                            let v781: string =
                                string("leptos::prelude::view! { <tr >move || { v778 }</tr> }");
                            let v783: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                            > = leptos::prelude::view! { <tr >move || { v778 }</tr> };
                            let v785: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v783);
                            let v789: string = string("vec![v785]");
                            let v790: Vec<leptos::prelude::AnyView> = vec![v785];
                            let v792: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v790);
                            let v794: Vec<
                                Result<
                                    Option<(
                                        std::string::String,
                                        Option<(
                                            Array<(
                                                std::string::String,
                                                Array<
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        (
                                                            std::string::String,
                                                            Option<std::string::String>,
                                                            Option<f64>,
                                                            Option<std::string::String>,
                                                        ),
                                                    >,
                                                >,
                                                std::string::String,
                                                Array<std::string::String>,
                                                Array<std::string::String>,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u64,
                                                Array<std::string::String>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                u8,
                                                Array<std::string::String>,
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    std::string::String,
                                                >,
                                                Option<std::string::String>,
                                                Array<(std::string::String, std::string::String)>,
                                            )>,
                                        )>,
                                        Option<(
                                            std::string::String,
                                            std::string::String,
                                            Option<(
                                                Option<std::string::String>,
                                                Option<std::string::String>,
                                            )>,
                                            i32,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                >,
                            > = leptos::prelude::ArcMemo::get(&v0_1.clone());
                            let v796: bool = true;
                            let _vec_map : Vec<_> = v235.into_iter().map(|x| { //;
                                let patternInput:
                                        (string, usize,
                                         LrcPtr<Dice_ui::Heap5>) = x;
                                let v800: LrcPtr<Dice_ui::Heap5> =
                                    patternInput.2.clone();
                                let v802:
                                        Array<Result<Option<(std::string::String,
                                                             Option<(Array<(std::string::String,
                                                                            Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                                  Option<std::string::String>,
                                                                                                                                  Option<f64>,
                                                                                                                                  Option<std::string::String>)>>,
                                                                            std::string::String,
                                                                            Array<std::string::String>,
                                                                            Array<std::string::String>,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String)>,
                                                                     Array<(std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            u64,
                                                                            Array<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String,
                                                                                   std::string::String)>,
                                                                            u8,
                                                                            Array<std::string::String>,
                                                                            std::collections::HashMap<std::string::String, std::string::String>,
                                                                            Option<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String)>)>)>,
                                                             Option<(std::string::String,
                                                                     std::string::String,
                                                                     Option<(Option<std::string::String>,
                                                                             Option<std::string::String>)>,
                                                                     i32,
                                                                     std::string::String,
                                                                     std::string::String)>,
                                                             Option<std::string::String>)>,
                                                     std::string::String>> =
                                    fable_library_rust::NativeArray_::array_from(v794.clone());
                                let v808: i32 = patternInput.1.clone() as i32;
                                let v817:
                                        Result<Option<(std::string::String,
                                                       Option<(Array<(std::string::String,
                                                                      Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                            Option<std::string::String>,
                                                                                                                            Option<f64>,
                                                                                                                            Option<std::string::String>)>>,
                                                                      std::string::String,
                                                                      Array<std::string::String>,
                                                                      Array<std::string::String>,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String)>,
                                                               Array<(std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      u64,
                                                                      Array<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String,
                                                                             std::string::String)>,
                                                                      u8,
                                                                      Array<std::string::String>,
                                                                      std::collections::HashMap<std::string::String, std::string::String>,
                                                                      Option<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String)>)>)>,
                                                       Option<(std::string::String,
                                                               std::string::String,
                                                               Option<(Option<std::string::String>,
                                                                       Option<std::string::String>)>,
                                                               i32,
                                                               std::string::String,
                                                               std::string::String)>,
                                                       Option<std::string::String>)>,
                                               std::string::String> =
                                    v802[v808].clone();
                                let v821: string =
                                    string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                let v823: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v833: i64 =
                                    (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v800.l5.clone()))))
                                        / 1000_i64;
                                let v835:
                                        Option<chrono::DateTime<chrono::Utc>> =
                                    chrono::DateTime::from_timestamp_micros(v833);
                                let v860: Dice_ui::US68 =
                                    defaultValue(Dice_ui::US68::US68_1,
                                                 map(Dice_ui::method205(),
                                                     v835));
                                let v879: Dice_ui::US31 =
                                    match &v860 {
                                        Dice_ui::US68::US68_0(v860_0_0) => {
                                            let v866: chrono::NaiveDateTime =
                                                match &v860 {
                                                    Dice_ui::US68::US68_0(x)
                                                    => x.clone(),
                                                    _ => unreachable!(),
                                                }.clone().naive_utc();
                                            let v868:
                                                    chrono::DateTime<chrono::Local> =
                                                chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v866);
                                            let v870: string =
                                                string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                            let v871: &str =
                                                r#"%Y-%m-%d %H:%M:%S"#;
                                            let v873: std::string::String =
                                                v868.format(v871).to_string();
                                            Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v873))
                                        }
                                        _ => Dice_ui::US31::US31_1,
                                    };
                                let v885: Dice_ui::US69 =
                                    match &v879 {
                                        Dice_ui::US31::US31_0(v879_0_0) =>
                                        Dice_ui::US69::US69_0(match &v879 {
                                                                  Dice_ui::US31::US31_0(x)
                                                                  =>
                                                                  x.clone(),
                                                                  _ =>
                                                                  unreachable!(),
                                                              }.clone()),
                                        _ =>
                                        Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                    };
                                let v890: string =
                                    match &v885 {
                                        Dice_ui::US69::US69_0(v885_0_0) =>
                                        v885_0_0.clone(),
                                        Dice_ui::US69::US69_1(v885_1_0) =>
                                        append((append(string("sm\'.to_string result / Error: "),
                                                       (v885_1_0.clone()))),
                                               string("")),
                                    };
                                let v899: &str = &*v890;
                                let v932: std::string::String =
                                    String::from(v899);
                                let v958: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v932));
                                let v962: string = string("vec![v958]");
                                let v963: Vec<leptos::prelude::AnyView> =
                                    vec![v958];
                                let v965: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v963);
                                let v967: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v965);
                                let v970: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v823))),
                                                                           string(">move || { v967 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v972:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v967 }</td> };
                                let v974: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v972);
                                let v976: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v979: string =
                                    fable_library_rust::String_::fromString(v800.l1.clone());
                                let v988: &str = &*v979;
                                let v1021: std::string::String =
                                    String::from(v988);
                                let v1047: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1021));
                                let v1051: string = string("vec![v1047]");
                                let v1052: Vec<leptos::prelude::AnyView> =
                                    vec![v1047];
                                let v1054: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1052);
                                let v1056: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1054);
                                let v1058: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v976))),
                                                                           string(">move || { v1056 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1060:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1056 }</td> };
                                let v1062: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1060);
                                let v1064: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1067: string =
                                    fable_library_rust::String_::fromString(v800.l2.clone());
                                let v1076: &str = &*v1067;
                                let v1109: std::string::String =
                                    String::from(v1076);
                                let v1135: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1109));
                                let v1139: string = string("vec![v1135]");
                                let v1140: Vec<leptos::prelude::AnyView> =
                                    vec![v1135];
                                let v1142: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1140);
                                let v1144: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1142);
                                let v1146: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1064))),
                                                                           string(">move || { v1144 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1148:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1144 }</td> };
                                let v1150: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1148);
                                let v1152: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1156: string = toString(v800.l10);
                                let v1167: &str = &*v1156;
                                let v1200: std::string::String =
                                    String::from(v1167);
                                let v1226: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1200));
                                let v1230: string = string("vec![v1226]");
                                let v1231: Vec<leptos::prelude::AnyView> =
                                    vec![v1226];
                                let v1233: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1231);
                                let v1235: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1233);
                                let v1237: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1152))),
                                                                           string(">move || { v1235 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1239:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1235 }</td> };
                                let v1241: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1239);
                                let v1243: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1434: leptos::prelude::Fragment =
                                    if (get_Count(v800.l11.clone()) as u64) ==
                                           0_u64 {
                                        let v1255: &str = &*string("");
                                        let v1288: std::string::String =
                                            String::from(v1255);
                                        let v1314: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1288));
                                        let v1318: string =
                                            string("vec![v1314]");
                                        let v1319:
                                                Vec<leptos::prelude::AnyView> =
                                            vec![v1314];
                                        leptos::prelude::Fragment::new(v1319)
                                    } else {
                                        let v1322:
                                                Array<std::string::String> =
                                            v800.l11.clone();
                                        let v1323: i32 =
                                            get_Count(v1322.clone());
                                        let v1325: LrcPtr<Dice_ui::Mut2> =
                                            LrcPtr::new(Dice_ui::Mut2{l0:
                                                                          MutCell::new(0_i32),
                                                                      l1:
                                                                          MutCell::new(Dice_ui::US31::US31_1),});
                                        while Dice_ui::method206(v1323,
                                                                 v1325.clone())
                                              {
                                            let v1327: i32 =
                                                v1325.l0.get().clone();
                                            let v1330: i32 =
                                                ((v1327.wrapping_neg()) +
                                                     (v1323)) - 1_i32;
                                            let v1331: Dice_ui::US31 =
                                                v1325.l1.get().clone();
                                            let v1332: std::string::String =
                                                v1322[v1330].clone();
                                            let v1343: Array<string> =
                                                split(fable_library_rust::String_::fromString(v1332),
                                                      string(" / result: "),
                                                      -1_i32, 0_i32);
                                            let v1352: Dice_ui::US31 =
                                                if let Dice_ui::US31::US31_1 =
                                                       &v1331 {
                                                    if (get_Count(v1343.clone())
                                                            as u64) == 2_u64 {
                                                        let v1348: string =
                                                            v1343[0_i32].clone();
                                                        Dice_ui::US31::US31_0(v1343[1_i32].clone())
                                                    } else { v1331 }
                                                } else { v1331.clone() };
                                            let v1353: i32 = (v1327) + 1_i32;
                                            v1325.l0.set(v1353);
                                            v1325.l1.set(v1352);
                                            ()
                                        }
                                        {
                                            let v1354: Dice_ui::US31 =
                                                v1325.l1.get().clone();
                                            let v1358: string =
                                                match &v1354 {
                                                    Dice_ui::US31::US31_0(v1354_0_0)
                                                    =>
                                                    match &v1354 {
                                                        Dice_ui::US31::US31_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone(),
                                                    _ => string("?"),
                                                };
                                            let v1367: &str = &*v1358;
                                            let v1400: std::string::String =
                                                String::from(v1367);
                                            let v1426:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1400));
                                            let v1430: string =
                                                string("vec![v1426]");
                                            let v1431:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1426];
                                            leptos::prelude::Fragment::new(v1431)
                                        }
                                    };
                                let v1436: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1434);
                                let v1438: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1243))),
                                                                           string(">move || { v1436 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1440:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1436 }</td> };
                                let v1442: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1440);
                                let v1444: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1448: string =
                                    if v800.l9 {
                                        string("Ok")
                                    } else { string("Outcome Error") };
                                let v1449 = Dice_ui::method177();
                                let v1450 = Dice_ui::method178();
                                let v1452: Dice_ui::US63 =
                                    match &v817 {
                                        Err(v817_1_0) =>
                                        v1450(v817_1_0.clone()),
                                        Ok(v817_0_0) =>
                                        v1449(v817_0_0.clone()),
                                    };
                                let v1491: Dice_ui::US58 =
                                    match &v1452 {
                                        Dice_ui::US63::US63_0(v1452_0_0) =>
                                        Dice_ui::US58::US58_0(defaultValue(Dice_ui::US59::US59_1,
                                                                           map(Dice_ui::method179(),
                                                                               v1452_0_0.clone()))),
                                        Dice_ui::US63::US63_1(v1452_1_0) =>
                                        Dice_ui::US58::US58_1(v1452_1_0.clone()),
                                    };
                                let v1612: Dice_ui::US69 =
                                    match &v1491 {
                                        Dice_ui::US58::US58_0(v1491_0_0) => {
                                            let v1492: Dice_ui::US59 =
                                                v1491_0_0.clone();
                                            if let Dice_ui::US59::US59_0(v1492_0_0,
                                                                         v1492_0_1,
                                                                         v1492_0_2,
                                                                         v1492_0_3)
                                                   = &v1492 {
                                                let v1495:
                                                        Option<(std::string::String,
                                                                std::string::String,
                                                                Option<(Option<std::string::String>,
                                                                        Option<std::string::String>)>,
                                                                i32,
                                                                std::string::String,
                                                                std::string::String)> =
                                                    v1492_0_2.clone();
                                                let v1526: Dice_ui::US64 =
                                                    defaultValue(Dice_ui::US64::US64_1,
                                                                 map(Dice_ui::method180(),
                                                                     v1495.clone()));
                                                match &v1526 {
                                                    Dice_ui::US64::US64_0(v1526_0_0,
                                                                          v1526_0_1,
                                                                          v1526_0_2,
                                                                          v1526_0_3,
                                                                          v1526_0_4,
                                                                          v1526_0_5)
                                                    => {
                                                        let v1565:
                                                                Dice_ui::US64 =
                                                            defaultValue(Dice_ui::US64::US64_1,
                                                                         map(Dice_ui::method180(),
                                                                             v1495.clone()));
                                                        let v1578:
                                                                Dice_ui::US31 =
                                                            if let Dice_ui::US64::US64_0(v1565_0_0,
                                                                                         v1565_0_1,
                                                                                         v1565_0_2,
                                                                                         v1565_0_3,
                                                                                         v1565_0_4,
                                                                                         v1565_0_5)
                                                                   = &v1565 {
                                                                Dice_ui::US31::US31_0(append((append((append((append((append((append((append((toString(v1565_0_0.clone())),
                                                                                                                                             string(": "))),
                                                                                                                                     (toString(v1565_0_4.clone())))),
                                                                                                                             string(" - "))),
                                                                                                                     (toString(v1565_0_5.clone())))),
                                                                                                             string(" ("))),
                                                                                                     (toString(v1565_0_1.clone())))),
                                                                                             string(")")))
                                                            } else {
                                                                Dice_ui::US31::US31_1
                                                            };
                                                        Dice_ui::US69::US69_1(match &v1578
                                                                                  {
                                                                                  Dice_ui::US31::US31_0(v1578_0_0)
                                                                                  =>
                                                                                  match &v1578
                                                                                      {
                                                                                      Dice_ui::US31::US31_0(x)
                                                                                      =>
                                                                                      x.clone(),
                                                                                      _
                                                                                      =>
                                                                                      unreachable!(),
                                                                                  }.clone(),
                                                                                  _
                                                                                  =>
                                                                                  Dice_ui::method8(400_i64,
                                                                                                   sprintf!("{:?}",
                                                                                                            ())),
                                                                              })
                                                    }
                                                    _ =>
                                                    Dice_ui::US69::US69_0(Dice_ui::method8(400_i64,
                                                                                           sprintf!("{:?}",
                                                                                                    (v1492_0_0.clone(),
                                                                                                     v1492_0_1.clone(),
                                                                                                     v1495.clone(),
                                                                                                     v1492_0_3.clone())))),
                                                }
                                            } else {
                                                Dice_ui::US69::US69_1(concat(new_array(&[string("RPC Response: "),
                                                                                         Dice_ui::method8(400_i64,
                                                                                                          sprintf!("{:?}",
                                                                                                                   v1491.clone()))])))
                                            }
                                        }
                                        Dice_ui::US58::US58_1(v1491_1_0) =>
                                        Dice_ui::US69::US69_1(fable_library_rust::String_::fromString(v1491_1_0.clone())),
                                    };
                                let v1625: string =
                                    concat(new_array(&[v1448, string(" / "),
                                                       match &v1612 {
                                                           Dice_ui::US69::US69_0(v1612_0_0)
                                                           =>
                                                           concat(new_array(&[string("RPC Response: "),
                                                                              Dice_ui::method8(400_i64,
                                                                                               sprintf!("{:?}",
                                                                                                        v1612_0_0.clone()))])),
                                                           Dice_ui::US69::US69_1(v1612_1_0)
                                                           =>
                                                           concat(new_array(&[string("Error: "),
                                                                              v1612_1_0.clone()])),
                                                       }]));
                                let v1634: &str = &*v1625;
                                let v1667: std::string::String =
                                    String::from(v1634);
                                let v1693: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1667));
                                let v1697: string = string("vec![v1693]");
                                let v1698: Vec<leptos::prelude::AnyView> =
                                    vec![v1693];
                                let v1700: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1698);
                                let v1702: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1700);
                                let v1704: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1444))),
                                                                           string(">move || { v1702 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1706:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1702 }</td> };
                                let v1708: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1706);
                                let v1727: string =
                                    string("vec![v974, v1062, v1150, v1241, v1442, v1708]");
                                let v1728: Vec<leptos::prelude::AnyView> =
                                    vec![v974, v1062, v1150, v1241, v1442, v1708];
                                let v1730: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1728);
                                let v1732: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1730);
                                let v1734: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<tr "),
                                                                                   (v821))),
                                                                           string(">move || { v1732 }</"))),
                                                                   string("tr"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1736:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                    leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v1732 }</tr> };
                                let v1738: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1736);
                                let v1740: bool =
                                    true; v1738 }).collect::<Vec<_>>();
                            let v1742: Vec<leptos::prelude::AnyView> = _vec_map;
                            let v1744: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1742);
                            let v1748: string = string("vec![v1744]");
                            let v1749: Vec<leptos::prelude::AnyView> = vec![v1744];
                            let v1751: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1749);
                            let v1753: string = string(
                                " class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"",
                            );
                            let v1755: string = string(" class=\"ltr:text-left rtl:text-right\"");
                            let v1757: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v792);
                            let v1760: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<thead "), (v1755))),
                                                string(">move || { v1757 }</"),
                                            )),
                                            string("thead"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1762: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                            > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v1757 }</thead> };
                            let v1764: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1762);
                            let v1766: string =
                                string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
                            let v1768: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1751);
                            let v1771: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<tbody "), (v1766))),
                                                string(">move || { v1768 }</"),
                                            )),
                                            string("tbody"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1773: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                            > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v1768 }</tbody> };
                            let v1775: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1773);
                            let v1782: string = string("vec![v1764, v1775]");
                            let v1783: Vec<leptos::prelude::AnyView> = vec![v1764, v1775];
                            let v1785: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1783);
                            let v1787: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1785);
                            let v1790: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<table "), (v1753))),
                                                string(">move || { v1787 }</"),
                                            )),
                                            string("table"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1792: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Table, _, _>,
                            > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v1787 }</table> };
                            leptos::prelude::IntoAny::into_any(v1792)
                        } else {
                            let v1797: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v1799: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v1802 = {
                                let clo = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo = clo.clone();
                                    move |arg: ()| clo()
                                })
                            };
                            let v1820: string = string(
                                " class=move || \" \".to_owned() + &v1802(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"",
                            );
                            let v1832: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                            );
                            let v1844: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v1845: string = string("vec![]");
                            let v1846: Vec<leptos::prelude::AnyView> = vec![];
                            let v1848: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1846);
                            let v1850: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1848);
                            let v1853: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1844))),
                                                string(">move || { v1850 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1855: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1850 }</animate> };
                            let v1857: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1855);
                            let v1869: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                            );
                            let v1870: string = string("vec![]");
                            let v1871: Vec<leptos::prelude::AnyView> = vec![];
                            let v1873: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1871);
                            let v1875: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1873);
                            let v1877: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1869))),
                                                string(">move || { v1875 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1879: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1875 }</animate> };
                            let v1881: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1879);
                            let v1893: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v1894: string = string("vec![]");
                            let v1895: Vec<leptos::prelude::AnyView> = vec![];
                            let v1897: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1895);
                            let v1899: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1897);
                            let v1901: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1893))),
                                                string(">move || { v1899 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1903: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1899 }</animate> };
                            let v1905: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1903);
                            let v1916: string = string("vec![v1857, v1881, v1905]");
                            let v1917: Vec<leptos::prelude::AnyView> = vec![v1857, v1881, v1905];
                            let v1919: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1917);
                            let v1921: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1919);
                            let v1924: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1832))),
                                                string(">move || { v1921 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1926: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v1921 }</rect> };
                            let v1938: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                            );
                            let v1950: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v1951: string = string("vec![]");
                            let v1952: Vec<leptos::prelude::AnyView> = vec![];
                            let v1954: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1952);
                            let v1956: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1954);
                            let v1958: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1950))),
                                                string(">move || { v1956 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1960: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1956 }</animate> };
                            let v1962: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1960);
                            let v1974: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v1975: string = string("vec![]");
                            let v1976: Vec<leptos::prelude::AnyView> = vec![];
                            let v1978: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1976);
                            let v1980: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1978);
                            let v1982: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1974))),
                                                string(">move || { v1980 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1984: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1980 }</animate> };
                            let v1986: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1984);
                            let v1998: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v1999: string = string("vec![]");
                            let v2000: Vec<leptos::prelude::AnyView> = vec![];
                            let v2002: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2000);
                            let v2004: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2002);
                            let v2006: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1998))),
                                                string(">move || { v2004 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2008: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v2004 }</animate> };
                            let v2010: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2008);
                            let v2020: string = string("vec![v1962, v1986, v2010]");
                            let v2021: Vec<leptos::prelude::AnyView> = vec![v1962, v1986, v2010];
                            let v2023: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2021);
                            let v2025: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2023);
                            let v2027: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1938))),
                                                string(">move || { v2025 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2029: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v2025 }</rect> };
                            let v2041: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                            );
                            let v2053: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v2054: string = string("vec![]");
                            let v2055: Vec<leptos::prelude::AnyView> = vec![];
                            let v2057: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2055);
                            let v2059: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2057);
                            let v2061: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2053))),
                                                string(">move || { v2059 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2063: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v2059 }</animate> };
                            let v2065: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2063);
                            let v2077: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                            );
                            let v2078: string = string("vec![]");
                            let v2079: Vec<leptos::prelude::AnyView> = vec![];
                            let v2081: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2079);
                            let v2083: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2081);
                            let v2085: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2077))),
                                                string(">move || { v2083 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2087: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v2083 }</animate> };
                            let v2089: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2087);
                            let v2101: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v2102: string = string("vec![]");
                            let v2103: Vec<leptos::prelude::AnyView> = vec![];
                            let v2105: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2103);
                            let v2107: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2105);
                            let v2109: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2101))),
                                                string(">move || { v2107 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2111: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v2107 }</animate> };
                            let v2113: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2111);
                            let v2123: string = string("vec![v2065, v2089, v2113]");
                            let v2124: Vec<leptos::prelude::AnyView> = vec![v2065, v2089, v2113];
                            let v2126: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2124);
                            let v2128: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2126);
                            let v2130: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v2041))),
                                                string(">move || { v2128 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2132: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v2128 }</rect> };
                            let v2134: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2132);
                            let v2136: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2029);
                            let v2138: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1926);
                            let v2148: string = string("vec![v2138, v2136, v2134]");
                            let v2149: Vec<leptos::prelude::AnyView> = vec![v2138, v2136, v2134];
                            let v2151: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2149);
                            let v2153: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2151);
                            let v2156: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v1820))),
                                                string(">move || { v2153 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2158: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1802(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v2153 }</svg> };
                            let v2160: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2158);
                            let v2170: &str = &*string("Loading...");
                            let v2203: std::string::String = String::from(v2170);
                            let v2229: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v2203),
                                );
                            let v2236: string = string("vec![v2160, v2229]");
                            let v2237: Vec<leptos::prelude::AnyView> = vec![v2160, v2229];
                            let v2239: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2237);
                            let v2241: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2239);
                            let v2244: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1799))),
                                                string(">move || { v2241 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2246: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v2241 }</div> };
                            let v2248: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2246);
                            let v2252: string = string("vec![v2248]");
                            let v2253: Vec<leptos::prelude::AnyView> = vec![v2248];
                            let v2255: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2253);
                            let v2257: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2255);
                            let v2259: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1797))),
                                                string(">move || { v2257 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2261: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v2257 }</div> };
                            leptos::prelude::IntoAny::into_any(v2261)
                        }
                    }
                    Dice_ui::US46::US46_1(v227_1_0) => {
                        let v2267: string =
                            fable_library_rust::String_::fromString(v227_1_0.clone());
                        let v2270: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v2272: string = string(" class=\"[height:17px]\"");
                        let v2286: string = string(
                            " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v2292: string = string(
                            " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                        );
                        let v2293: string = string("vec![]");
                        let v2294: Vec<leptos::prelude::AnyView> = vec![];
                        let v2296: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2294);
                        let v2298: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2296);
                        let v2301: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v2292))),
                                            string(">move || { v2298 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2303: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v2298 }</path> };
                        let v2305: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2303);
                        let v2309: string = string("vec![v2305]");
                        let v2310: Vec<leptos::prelude::AnyView> = vec![v2305];
                        let v2312: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2310);
                        let v2314: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2312);
                        let v2317: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v2286))),
                                            string(">move || { v2314 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2319: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v2314 }</svg> };
                        let v2321: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2319);
                        let v2325: string = string("vec![v2321]");
                        let v2326: Vec<leptos::prelude::AnyView> = vec![v2321];
                        let v2328: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2326);
                        let v2330: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2328);
                        let v2333: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v2272))),
                                            string(">move || { v2330 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2335: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v2330 }</span> };
                        let v2337: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2335);
                        let v2339: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v2348: &str = &*v2267;
                        let v2381: std::string::String = String::from(v2348);
                        let v2407: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v2381),
                        );
                        let v2411: string = string("vec![v2407]");
                        let v2412: Vec<leptos::prelude::AnyView> = vec![v2407];
                        let v2414: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2412);
                        let v2416: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2414);
                        let v2419: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v2339))),
                                            string(">move || { v2416 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2421: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v2416 }</pre> };
                        let v2423: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2421);
                        let v2431: string = string("vec![v2337, v2423]");
                        let v2432: Vec<leptos::prelude::AnyView> = vec![v2337, v2423];
                        let v2434: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2432);
                        let v2436: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2434);
                        let v2439: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v2270))),
                                            string(">move || { v2436 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2441: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v2436 }</div> };
                        leptos::prelude::IntoAny::into_any(v2441)
                    }
                }
            };
            let v2451: string = string("vec![v2446]");
            let v2452: Vec<leptos::prelude::AnyView> = vec![v2446];
            leptos::prelude::Fragment::new(v2452)
        }
        pub fn closure194(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure193(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure194(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method207() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure193((), v))
        }
        pub fn method208(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure192(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v10 = Dice_ui::method207();
            let v11: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v8.l0.clone());
            v11.iter()
                .enumerate()
                .map(|(i, x)| v10(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method209(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure196(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method209(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method210(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure197(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method210(v0_1);
            let patternInput: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure195(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::prelude::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::prelude::ReadSignal::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let v10: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = v10.1.clone();
                let v25: bool = true;
                (v10.0.clone(), b.0.clone(), b.1.clone()) /*;
                let v27: bool = */
            }); //;
            let v29: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v6;
            let v32: Vec<(
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v29 = v29.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure196(
                                v29.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v35: bool = true;
            let _func1_from_v33 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v42: bool = true;
                (v3, patternInput.0.clone(), patternInput.1.clone()) /*;
                let v44: bool = */
            }); //;
            let v46: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v33;
            v32.into_iter()
                .map(|x| {
                    Func1::new({
                        let v46 = v46.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure197(v46.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure198(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = leptos::prelude::ArcMemo::get(&v0_1);
            get_Count(fable_library_rust::NativeArray_::array_from(v2.clone()))
        }
        pub fn method211(
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method212(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method213(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            LrcPtr<(bool, std::string::String)>,
        > {
            v0_1
        }
        pub fn closure200(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = Dice_ui::method213(v0_1);
            (move |x| v2(x))(LrcPtr::new((v1_, v1__1)))
        }
        pub fn closure199(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v11: i32 = get_Count(fable_library_rust::NativeArray_::array_from(
                v8.clone().clone(),
            ));
            let v21: &str = &*string("");
            let v54: std::string::String = String::from(v21);
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((false, v54)));
            let v87: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v90: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method211(v87.0.clone(), v87.1.clone());
            let v91: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method212(v8);
            let v93: bool = true;
            let mut v91 = v91;
            let v95: bool = true;
            v91.push(v90);
            let v97: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v91;
            let v100: bool = true;
            let _func1_from_v98 = Func1::from(move |value| {
                //;
                let v102: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v116: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v102.1.clone()).0.clone());
                let v119: bool = true;
                v116 /*;
                let v121: bool = */
            }); //;
            let v123: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v98;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v97
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v123 = v123.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v123.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure201(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + (v0_1)
        }
        pub fn closure202(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v9)
        }
        pub fn closure204(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure205(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure206(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method214(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure206((), ()))
        }
        pub fn method216(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            v0_1
        }
        pub fn closure208(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(i32, i32)> {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            > = Dice_ui::method216(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn method215(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure208(v0_1.clone(), arg10_0040)
            })
        }
        pub fn method217(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn method219(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure211(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method219((v1) == (v0_1)) {
                v2.clone()
            } else {
                LrcPtr::new(((v2.0.clone()) == false, v2.1.clone()))
            }
        }
        pub fn closure210(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure211(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method218(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure210(v0_1, v)
            })
        }
        pub fn closure209(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v5: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v5);
            let v10: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v7.l3.clone());
            let v12: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v10);
            let v20: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v20);
            let v24 = Dice_ui::method218(v1);
            let v25: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v12.l0.clone());
            let v28: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v25
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v24(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v12.l1.clone(),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v30: bool = true;
            leptos::prelude::ArcRwSignal::set(&v22.l3.clone(), v28); //;
            ()
        }
        pub fn closure212(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::prelude::ReadSignal::get(&v0_1)).0.clone()
        }
        pub fn method220(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure212(v0_1.clone(), ())
            })
        }
        pub fn closure213(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append((append(string("account-"), (toString(v0_1)))), string(""));
            let v10: &str = &*v1;
            String::from(v10)
        }
        pub fn method221(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure213(v0_1, ())
            })
        }
        pub fn method223(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure215(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method223((v2) == (v0_1)) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure214(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure215(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method222(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure214(v0_1, v1.clone(), v)
            })
        }
        pub fn closure216(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method224(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure219(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn method226() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure219((), v))
        }
        pub fn closure218(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v14: bool = ((LrcPtr::new((v1_, v1__1))).0.clone()) == (v0_1);
            (Dice_ui::method226())(v14)
        }
        pub fn method225(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure218(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure217(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method224(leptos::prelude::ArcMemo::get(&v0_1));
            let v11 = Dice_ui::method225(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            let v20: bool = true;
            let _func1_from_v18 = Func1::from(move |value| {
                //;
                let v22: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v36: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v22.1.clone()).0.clone());
                let v39: bool = true;
                v36 /*;
                let v41: bool = */
            }); //;
            let v43: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v18;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v43 = v43.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v43.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure220(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure221(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v9)
        }
        pub fn method227(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::prelude::AnyView,
        > {
            v0_1
        }
        pub fn closure222(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::prelude::AnyView {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = Dice_ui::method227(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure207(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::ArcMemo<i32>,
            v3: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v9: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = v1;
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v23: bool = true;
                LrcPtr::new((patternInput.0.clone(), patternInput.1.clone())) /*;
                let v25: bool = */
            }); //;
            let v28 = Dice_ui::method215(_func1_from_v10);
            let v31: bool = true;
            let _func1_from_v29 = Func1::from(move |value| {
                //;
                let patternInput_1: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v35: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                    patternInput_1.2.clone();
                let v37: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
                let v38: i32 = Dice_ui::method217(patternInput_1.1.clone());
                let v41: bool = true;
                let _func0_from_v39 = Func0::from(move || {
                    //;
                    let v42: string =
                        append((append(string("account-"), (toString(v38)))), string(""));
                    let v51: &str = &*v42;
                    let v84: std::string::String = String::from(v51);
                    let v110: bool = true;
                    v84 /*;
                    let v112: bool = */
                }); //;
                let v114: Func0<std::string::String> = _func0_from_v39;
                let v164: string = join(
                    string(" "),
                    toArray(delay(Func0::new(move || {
                        ofList(ofArray_1(new_array(&[
                            string("block"),
                            string("relative"),
                            string("h-8"),
                            string("w-14"),
                            string("cursor-pointer"),
                            string("[-webkit-tap-highlight-color:_transparent]"),
                        ])))
                    }))),
                );
                let v175: &str = &*v164;
                let v208: std::string::String = String::from(v175);
                let v234: std::string::String = v208;
                let v238: string = string(" class=v234 for=move || v114()");
                let v241: bool = true;
                let v239 = Func1::new({
                    let v0_1 = v0_1.clone();
                    let v38 = v38.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure209(v0_1.clone(), v38, v)
                }); //;
                let v242 = Dice_ui::method220(v35.clone());
                let v243 = Dice_ui::method221(v38);
                let v244: string = string(
                    "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"",
                );
                let v256: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                string("<input "),
                                (append(
                                    (append(
                                        string(" prop:checked=move || v242()"),
                                        (append(
                                            (append(
                                                string(" on:change=move |event| v239(event)"),
                                                (append(
                                                    (append(
                                                        string(" id=move || v243()"),
                                                        (append(
                                                            (append(
                                                                string(" type=\"checkbox\""),
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            string(" "),
                                                                            (v244),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                    string(""),
                                                                )),
                                                            )),
                                                            string(""),
                                                        )),
                                                    )),
                                                    string(""),
                                                )),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(" />"),
                        )),
                    )),
                    string(" }"),
                );
                let v258: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v242() on:change=move |event| v239(event) id=move || v243() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v260: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v258);
                let v261: string = string(
                    "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"",
                );
                let v262: string = append(
                    (append((append(string(" "), (v261))), string(""))),
                    string(""),
                );
                let v272: string = string(
                    " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon",
                );
                let v274: string = string(
                    "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"",
                );
                let v278: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v274))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v279: string = string("vec![]");
                let v280: Vec<leptos::prelude::AnyView> = vec![];
                let v282: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v280);
                let v284: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v282);
                let v287: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v278))),
                                    string(">move || { v284 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v289: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v284 }</path> };
                let v291: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v289);
                let v295: string = string("vec![v291]");
                let v296: Vec<leptos::prelude::AnyView> = vec![v291];
                let v298: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v296);
                let v300: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v298);
                let v303: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v272))),
                                    string(">move || { v300 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v305: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v300 }</svg> };
                let v315: string = string(
                    " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon",
                );
                let v317: string = string(
                    "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"",
                );
                let v321: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v317))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v322: string = string("vec![]");
                let v323: Vec<leptos::prelude::AnyView> = vec![];
                let v325: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v323);
                let v327: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v325);
                let v329: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v321))),
                                    string(">move || { v327 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v331: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v327 }</path> };
                let v333: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v331);
                let v337: string = string("vec![v333]");
                let v338: Vec<leptos::prelude::AnyView> = vec![v333];
                let v340: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v338);
                let v342: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v340);
                let v344: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v315))),
                                    string(">move || { v342 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v346: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v342 }</svg> };
                let v348: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v346);
                let v350: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v305);
                let v358: string = string("vec![v350, v348]");
                let v359: Vec<leptos::prelude::AnyView> = vec![v350, v348];
                let v361: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v359);
                let v363: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v361);
                let v366: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v262))),
                                    string(">move || { v363 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v368: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v363 }</span> };
                let v370: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v368);
                let v371: string = string(
                    "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"",
                );
                let v372: string = append(
                    (append((append(string(" "), (v371))), string(""))),
                    string(""),
                );
                let v373: string = string("vec![]");
                let v374: Vec<leptos::prelude::AnyView> = vec![];
                let v376: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v374);
                let v378: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v376);
                let v380: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v372))),
                                    string(">move || { v378 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v382: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v378 }</span> };
                let v384: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v382);
                let v394: string = string("vec![v260, v370, v384]");
                let v395: Vec<leptos::prelude::AnyView> = vec![v260, v370, v384];
                let v397: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v395);
                let v399: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v397);
                let v402: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<label "), (v238))),
                                    string(">move || { v399 }</"),
                                )),
                                string("label"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v404: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class=v234 for=move || v114()>move || { v399 }</label> };
                let v406: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v404);
                let v409: bool = true;
                let _func0_from_v407 = Func0::from(move || {
                    //;
                    let v411: LrcPtr<(bool, std::string::String)> =
                        leptos::prelude::ReadSignal::get(&v35);
                    let v421: bool = true;
                    v411.1.clone() /*;
                    let v423: bool = */
                }); //;
                let v425: Func0<std::string::String> = _func0_from_v407;
                let v428: bool = true;
                let _func1_from_v426 = Func0::from(move || {
                    //;
                    let v430: std::string::String = value;
                    let v433: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v435: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v433);
                    let v438: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                    > = Box::pin(v435.l3.clone());
                    let v440: LrcPtr<Dice_ui::Heap0> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v438);
                    let v448: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v450: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v448);
                    let v452 = Dice_ui::method222(v38, v430);
                    let v453: Vec<LrcPtr<(bool, std::string::String)>> =
                        Dice_ui::method208(v440.l0.clone());
                    let v456: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                        l0: v453
                            .iter()
                            .enumerate()
                            .map(|(i, x)| v452(i.try_into().unwrap())(x.clone()))
                            .collect::<Vec<_>>(),
                        l1: v440.l1.clone(),
                        l2: v440.l2,
                        l3: v440.l3,
                        l4: v440.l4.clone(),
                    });
                    let v458: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v450.l3.clone(), v456); //;
                    let v460: bool = true; /*;
                    let v462: bool = */
                }); //;
                let v464: Func1<std::string::String, ()> = _func1_from_v426;
                let v467 = {
                    let clo = Func0::new(move || Dice_ui::closure216((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v476: string = string(
                    "leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v470(leptos::prelude::event_target_value(&event)) prop:value=move || v425() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v467(()) /> }",
                );
                let v478: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v470(leptos::prelude::event_target_value(&event)) prop:value=move || v425() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v467(()) /> };
                let v480: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v478);
                let v594: leptos::prelude::AnyView = if (leptos::prelude::ArcMemo::get(&v2))
                    == 1_i32
                {
                    let v484: string = string("vec![]");
                    let v485: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v485)
                } else {
                    let v490: bool = true;
                    let _func0_from_v488 = Func0::from(move || {
                        //;
                        let v493: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v0_1.l0.clone());
                        let v495: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v493);
                        let v498: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v495.l3.clone(),
                            |x: &mut /*;
                             let v500: */
                             LrcPtr<Dice_ui::Heap0> /* = fable_library_rust::Native_::getZero();
                                                    let v505: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v3 = v3.clone();
                                    let v38 = v38.clone();
                                    move |v_2: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure217(v3.clone(), v38, v_2)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v507: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4,
                            |x: &mut /*;
                             let v509: */
                             i32 /* = fable_library_rust::Native_::getZero();
                                 let v514: bool =
                                     */| {
                                *x = Func1::new(move |v_3: i32| Dice_ui::closure201((), v_3))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v516: bool = true; /*;
                        let v518: bool = */
                    }); //;
                    let v520: Func0<()> = _func0_from_v488;
                    let v523 = {
                        let clo_1 = Func0::new(move || Dice_ui::closure220((), ()));
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v535: string = string(
                        " class=move || \" \".to_owned() + &v523(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v541: string = string(
                        " d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v542: string = string("vec![]");
                    let v543: Vec<leptos::prelude::AnyView> = vec![];
                    let v545: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v543);
                    let v547: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v545);
                    let v549: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v541))),
                                        string(">move || { v547 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v551: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">move || { v547 }</path> };
                    let v553: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v551);
                    let v557: string = string("vec![v553]");
                    let v558: Vec<leptos::prelude::AnyView> = vec![v553];
                    let v560: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v558);
                    let v562: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v560);
                    let v564: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v535))),
                                        string(">move || { v562 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v566: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v523(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v562 }</svg> };
                    let v571 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure221((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v572: string = string(
                        "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v571(())",
                    );
                    let v575: string = append(
                        (append(
                            string(" aria-label=\"Delete\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v520()"),
                                    (append(
                                        (append((append(string(" "), (v572))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v577: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v566);
                    let v581: string = string("vec![v577]");
                    let v582: Vec<leptos::prelude::AnyView> = vec![v577];
                    let v584: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v582);
                    let v586: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v584);
                    let v589: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v575))),
                                        string(">move || { v586 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v591: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Delete" on:click=move |_| v520() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v571(())>move || { v586 }</button> };
                    leptos::prelude::IntoAny::into_any(v591)
                };
                let v604: string = string("vec![v406, v480, v594]");
                let v605: Vec<leptos::prelude::AnyView> = vec![v406, v480, v594];
                let v607: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v605);
                let v609: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v607);
                let v612: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v37))),
                                    string(">move || { v609 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v614: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex gap-[8px] [align-items:center]">move || { v609 }</div> };
                let v616: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v614);
                let v620: string = string("vec![v616]");
                let v621: Vec<leptos::prelude::AnyView> = vec![v616];
                let v623: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v621);
                let v625: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v623);
                let v628: bool = true;
                v625 /*;
                let v630: bool = */
            }); //;
            let v632: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = _func1_from_v29;
            let v644: string = string(
                "leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v636(x) let:x key=move |x| v28(x.to_owned()) each=v9 /> })",
            );
            let v645: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                leptos::prelude::view! { <leptos::prelude::For  children=move |x| v636(x) let:x key=move |x| v28(x.to_owned()) each=v9 /> },
            );
            let v649: string = string("vec![v645]");
            let v650: Vec<leptos::prelude::AnyView> = vec![v645];
            let v652: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v650);
            let v654: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v652);
            let v656: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v654 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v658: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[8px] gap-[8px]">move || { v654 }</div> };
            let v660: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v658);
            let v664: string = string("vec![v660]");
            let v665: Vec<leptos::prelude::AnyView> = vec![v660];
            leptos::prelude::Fragment::new(v665)
        }
        pub fn closure223(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure224(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method228() -> Func0<string> {
            Func0::new(move || Dice_ui::closure225((), ()))
        }
        pub fn closure227(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Dark Mode");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method229() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure227((), ()))
        }
        pub fn closure230(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure229(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l0.clone(),
                |x: &mut /*;
                 let v11: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v16: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure231(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method231(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure231(v0_1.clone(), ())
            })
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("dark-mode");
            String::from(v9)
        }
        pub fn method232() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure228(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("dark-mode");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v126: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v137: &str = &*v126;
            let v170: std::string::String = String::from(v137);
            let v196: std::string::String = v170;
            let v201: string = string(" class=v196 for=move || v76()");
            let v204: bool = true;
            let v202 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure229(v0_1.clone(), v)
            }); //;
            let v205 = Dice_ui::method231(v0_1.clone());
            let v206 = Dice_ui::method232();
            let v207: string = string(
                "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"",
            );
            let v219: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v205()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v202(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v206()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v207))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v221: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v205() on:change=move |event| v202(event) id=move || v206() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v223: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v221);
            let v224: string = string(
                "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"",
            );
            let v225: string = append(
                (append((append(string(" "), (v224))), string(""))),
                string(""),
            );
            let v235: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon",
            );
            let v237: string = string(
                "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"",
            );
            let v241: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v237))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v242: string = string("vec![]");
            let v243: Vec<leptos::prelude::AnyView> = vec![];
            let v245: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v243);
            let v247: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v245);
            let v250: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v241))),
                                string(">move || { v247 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v252: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v247 }</path> };
            let v254: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v252);
            let v258: string = string("vec![v254]");
            let v259: Vec<leptos::prelude::AnyView> = vec![v254];
            let v261: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v259);
            let v263: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v261);
            let v266: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v235))),
                                string(">move || { v263 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v268: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v263 }</svg> };
            let v278: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon",
            );
            let v280: string = string(
                "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"",
            );
            let v284: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v280))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v285: string = string("vec![]");
            let v286: Vec<leptos::prelude::AnyView> = vec![];
            let v288: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v286);
            let v290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v288);
            let v292: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v284))),
                                string(">move || { v290 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v294: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v290 }</path> };
            let v296: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v294);
            let v300: string = string("vec![v296]");
            let v301: Vec<leptos::prelude::AnyView> = vec![v296];
            let v303: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v301);
            let v305: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v303);
            let v307: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v278))),
                                string(">move || { v305 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v309: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v305 }</svg> };
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v309);
            let v313: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v268);
            let v321: string = string("vec![v313, v311]");
            let v322: Vec<leptos::prelude::AnyView> = vec![v313, v311];
            let v324: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v322);
            let v326: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v324);
            let v329: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v225))),
                                string(">move || { v326 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v331: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v326 }</span> };
            let v333: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v331);
            let v334: string = string(
                "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"",
            );
            let v335: string = append(
                (append((append(string(" "), (v334))), string(""))),
                string(""),
            );
            let v336: string = string("vec![]");
            let v337: Vec<leptos::prelude::AnyView> = vec![];
            let v339: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v337);
            let v341: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v339);
            let v343: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v335))),
                                string(">move || { v341 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v345: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v341 }</span> };
            let v347: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v345);
            let v357: string = string("vec![v223, v333, v347]");
            let v358: Vec<leptos::prelude::AnyView> = vec![v223, v333, v347];
            let v360: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v358);
            let v362: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v360);
            let v365: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v201))),
                                string(">move || { v362 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v367: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v196 for=move || v76()>move || { v362 }</label> };
            let v369: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v367);
            let v373: string = string("vec![v369]");
            let v374: Vec<leptos::prelude::AnyView> = vec![v369];
            leptos::prelude::Fragment::new(v374)
        }
        pub fn method230(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure228(v0_1.clone(), ())
            })
        }
        pub fn closure233(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure235(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Debug");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method233() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure239(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l1.clone(),
                |x: &mut /*;
                 let v11: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v16: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure240(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l1.clone())
        }
        pub fn method235(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure240(v0_1.clone(), ())
            })
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("debug");
            String::from(v9)
        }
        pub fn method236() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn closure238(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("debug");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v126: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v137: &str = &*v126;
            let v170: std::string::String = String::from(v137);
            let v196: std::string::String = v170;
            let v201: string = string(" class=v196 for=move || v76()");
            let v204: bool = true;
            let v202 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure239(v0_1.clone(), v)
            }); //;
            let v205 = Dice_ui::method235(v0_1.clone());
            let v206 = Dice_ui::method236();
            let v207: string = string(
                "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"",
            );
            let v219: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v205()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v202(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v206()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v207))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v221: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v205() on:change=move |event| v202(event) id=move || v206() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v223: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v221);
            let v224: string = string(
                "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"",
            );
            let v225: string = append(
                (append((append(string(" "), (v224))), string(""))),
                string(""),
            );
            let v235: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon",
            );
            let v237: string = string(
                "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"",
            );
            let v241: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v237))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v242: string = string("vec![]");
            let v243: Vec<leptos::prelude::AnyView> = vec![];
            let v245: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v243);
            let v247: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v245);
            let v250: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v241))),
                                string(">move || { v247 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v252: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v247 }</path> };
            let v254: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v252);
            let v258: string = string("vec![v254]");
            let v259: Vec<leptos::prelude::AnyView> = vec![v254];
            let v261: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v259);
            let v263: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v261);
            let v266: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v235))),
                                string(">move || { v263 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v268: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v263 }</svg> };
            let v278: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon",
            );
            let v280: string = string(
                "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"",
            );
            let v284: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v280))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v285: string = string("vec![]");
            let v286: Vec<leptos::prelude::AnyView> = vec![];
            let v288: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v286);
            let v290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v288);
            let v292: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v284))),
                                string(">move || { v290 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v294: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v290 }</path> };
            let v296: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v294);
            let v300: string = string("vec![v296]");
            let v301: Vec<leptos::prelude::AnyView> = vec![v296];
            let v303: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v301);
            let v305: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v303);
            let v307: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v278))),
                                string(">move || { v305 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v309: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v305 }</svg> };
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v309);
            let v313: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v268);
            let v321: string = string("vec![v313, v311]");
            let v322: Vec<leptos::prelude::AnyView> = vec![v313, v311];
            let v324: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v322);
            let v326: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v324);
            let v329: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v225))),
                                string(">move || { v326 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v331: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v326 }</span> };
            let v333: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v331);
            let v334: string = string(
                "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"",
            );
            let v335: string = append(
                (append((append(string(" "), (v334))), string(""))),
                string(""),
            );
            let v336: string = string("vec![]");
            let v337: Vec<leptos::prelude::AnyView> = vec![];
            let v339: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v337);
            let v341: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v339);
            let v343: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v335))),
                                string(">move || { v341 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v345: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v341 }</span> };
            let v347: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v345);
            let v357: string = string("vec![v223, v333, v347]");
            let v358: Vec<leptos::prelude::AnyView> = vec![v223, v333, v347];
            let v360: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v358);
            let v362: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v360);
            let v365: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v201))),
                                string(">move || { v362 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v367: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v196 for=move || v76()>move || { v362 }</label> };
            let v369: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v367);
            let v373: string = string("vec![v369]");
            let v374: Vec<leptos::prelude::AnyView> = vec![v369];
            leptos::prelude::Fragment::new(v374)
        }
        pub fn method234(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure238(v0_1.clone(), ())
            })
        }
        pub fn closure242(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure226(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v4 = Dice_ui::method229();
            let v5 = Dice_ui::method230(v0_1.clone());
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure233((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v10() -> string {
                Dice_ui::closure234((), ())
            }
            let v11 = {
                let clo_1 = Func0::from(v10);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v13() -> string {
                Dice_ui::closure235((), ())
            }
            let v14 = {
                let clo_2 = Func0::from(v13);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())",
            );
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            fn v18() -> string {
                Dice_ui::closure236((), ())
            }
            let v19 = {
                let clo_3 = Func0::from(v18);
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())",
            );
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v62 = Dice_ui::method233();
            let v63 = Dice_ui::method234(v0_1);
            let v66 = {
                let clo_4 = Func0::new(move || Dice_ui::closure242((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v68 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v70 = {
                let clo_6 = Func0::from(v13);
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v71: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v70(()) + \" \" + &v68(()) + \" \" + &v66(())",
            );
            let v72: string = append(
                (append((append(string(" "), (v71))), string(""))),
                string(""),
            );
            let v74 = {
                let clo_7 = Func0::from(v18);
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v76: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v77: leptos::prelude::Fragment = v62();
            let v79: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v77);
            let v81: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v76))),
                                string(">move || { v79 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v83: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v79 }</dt> };
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v87: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v74(())",
            );
            let v88: leptos::prelude::Fragment = v63();
            let v90: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v88);
            let v92: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v87))),
                                string(">move || { v90 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v94: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v74(())>move || { v90 }</dd> };
            let v96: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v94);
            let v103: string = string("vec![v85, v96]");
            let v104: Vec<leptos::prelude::AnyView> = vec![v85, v96];
            let v106: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v104);
            let v108: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v106);
            let v110: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v72))),
                                string(">move || { v108 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v112: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v70(()) + " " + &v68(()) + " " + &v66(())>move || { v108 }</dl> };
            let v114: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v112);
            let v116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v123: string = string("vec![v116, v114]");
            let v124: Vec<leptos::prelude::AnyView> = vec![v116, v114];
            let v126: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v124);
            let v128: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v126);
            let v131: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v128 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v133: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[11px] gap-[11px]">move || { v128 }</div> };
            let v135: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v133);
            let v139: string = string("vec![v135]");
            let v140: Vec<leptos::prelude::AnyView> = vec![v135];
            leptos::prelude::Fragment::new(v140)
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method237() -> Func0<string> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Global State");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method238() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure247((), ()))
        }
        pub fn closure250(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_0(v0_1)
        }
        pub fn method240() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure250((), v))
        }
        pub fn closure251(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_1(v0_1)
        }
        pub fn method241() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure251((), v))
        }
        pub fn closure249(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v5: LrcPtr<Dice_ui::Heap2> = v0_1.clone();
            let v7: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v5).map_err(|x| x.to_string());
            let v8 = Dice_ui::method240();
            let v9 = Dice_ui::method241();
            let v11: Dice_ui::US70 = match &v7 {
                Err(v7_1_0) => v9(v7_1_0.clone()),
                Ok(v7_0_0) => v8(v7_0_0.clone()),
            };
            match &v11 {
                Dice_ui::US70::US70_0(v11_0_0) => {
                    fable_library_rust::String_::fromString(v11_0_0.clone())
                }
                Dice_ui::US70::US70_1(v11_1_0) => append(
                    (append(string("Error: "), (toString(v11_1_0.clone())))),
                    string(""),
                ),
            }
        }
        pub fn closure252(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure248(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9: leptos::prelude::ArcMemo<string> = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure249(v6.clone(), ())
                })()
            });
            let v11: string = leptos::prelude::ArcMemo::get(&v9);
            let v14 = {
                let clo = Func0::new(move || Dice_ui::closure252((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v15: string = string(
                "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v14(())",
            );
            let v17: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v26: &str = &*v11;
            let v59: std::string::String = String::from(v26);
            let v85: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v59));
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            let v92: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v90);
            let v94: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v92);
            let v97: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v17))),
                                string(">move || { v94 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v99: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v14(())>move || { v94 }</pre> };
            let v101: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v99);
            let v105: string = string("vec![v101]");
            let v106: Vec<leptos::prelude::AnyView> = vec![v101];
            leptos::prelude::Fragment::new(v106)
        }
        pub fn method239() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure248((), ()))
        }
        pub fn closure253(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1 = Dice_ui::method238();
            let v1 = Dice_ui::method239();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())",
            );
            let v13: string = append(
                (append((append(string(" "), (v11))), string(""))),
                string(""),
            );
            let v16 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v18: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v19: leptos::prelude::Fragment = v0_1();
            let v21: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v19);
            let v24: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v18))),
                                string(">move || { v21 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v21 }</dt> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())",
            );
            let v31: leptos::prelude::Fragment = v1();
            let v33: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v31);
            let v36: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v30))),
                                string(">move || { v33 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v38: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v16(())>move || { v33 }</dd> };
            let v40: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v38);
            let v48: string = string("vec![v28, v40]");
            let v49: Vec<leptos::prelude::AnyView> = vec![v28, v40];
            let v51: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v49);
            let v53: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v51);
            let v56: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v13))),
                                string(">move || { v53 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v58: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())>move || { v53 }</dl> };
            let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
            let v64: string = string("vec![v60]");
            let v65: Vec<leptos::prelude::AnyView> = vec![v60];
            leptos::prelude::Fragment::new(v65)
        }
        pub fn closure254(v0_1: leptos::prelude::WriteSignal<bool>, unitVar: ()) {
            let v2: bool = true;
            leptos::prelude::WriteSignal::update(
                &v0_1,
                |x: &mut /*;
                 let v4: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v9: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure255(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method242(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure256(
            v0_1: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> std::string::String {
            let v10: &'static str =
                Dice_ui::method242(if leptos::prelude::ReadSignal::get(&v0_1) {
                    let v4: string = string("r#\"\"#");
                    r#""#
                } else {
                    let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                    r#"bg-gray-300 hover:bg-gray-200"#
                });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure257(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure258(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure259(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method243(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure259((), ()))
        }
        pub fn closure261(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Settings");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Table View");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method244() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure262((), ()))
        }
        pub fn closure265(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure264(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l3.clone(),
                |x: &mut /*;
                 let v11: */
                 LrcPtr<Dice_ui::Heap0> /* = fable_library_rust::Native_::getZero();
                                        let v16: bool =
                                            */| {
                    *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure265((), v))(
                        x.clone(),
                    )
                },
            ); //;
            ()
        }
        pub fn closure266(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            if let Dice_ui::US1::US1_1 = &(leptos::prelude::ArcRwSignal::get(&v5.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method246(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure266(v0_1.clone(), ())
            })
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("table-view");
            String::from(v9)
        }
        pub fn method247() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure267((), ()))
        }
        pub fn closure263(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("table-view");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v126: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v137: &str = &*v126;
            let v170: std::string::String = String::from(v137);
            let v196: std::string::String = v170;
            let v201: string = string(" class=v196 for=move || v76()");
            let v204: bool = true;
            let v202 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure264(v0_1.clone(), v)
            }); //;
            let v205 = Dice_ui::method246(v0_1.clone());
            let v206 = Dice_ui::method247();
            let v207: string = string(
                "class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"",
            );
            let v219: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v205()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v202(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v206()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v207))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v221: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v205() on:change=move |event| v202(event) id=move || v206() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v223: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v221);
            let v224: string = string(
                "class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"",
            );
            let v225: string = append(
                (append((append(string(" "), (v224))), string(""))),
                string(""),
            );
            let v235: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon",
            );
            let v237: string = string(
                "d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"",
            );
            let v241: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v237))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v242: string = string("vec![]");
            let v243: Vec<leptos::prelude::AnyView> = vec![];
            let v245: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v243);
            let v247: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v245);
            let v250: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v241))),
                                string(">move || { v247 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v252: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v247 }</path> };
            let v254: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v252);
            let v258: string = string("vec![v254]");
            let v259: Vec<leptos::prelude::AnyView> = vec![v254];
            let v261: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v259);
            let v263: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v261);
            let v266: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v235))),
                                string(">move || { v263 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v268: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v263 }</svg> };
            let v278: string = string(
                " fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon",
            );
            let v280: string = string(
                "d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"",
            );
            let v284: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v280))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v285: string = string("vec![]");
            let v286: Vec<leptos::prelude::AnyView> = vec![];
            let v288: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v286);
            let v290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v288);
            let v292: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v284))),
                                string(">move || { v290 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v294: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v290 }</path> };
            let v296: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v294);
            let v300: string = string("vec![v296]");
            let v301: Vec<leptos::prelude::AnyView> = vec![v296];
            let v303: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v301);
            let v305: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v303);
            let v307: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v278))),
                                string(">move || { v305 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v309: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v305 }</svg> };
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v309);
            let v313: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v268);
            let v321: string = string("vec![v313, v311]");
            let v322: Vec<leptos::prelude::AnyView> = vec![v313, v311];
            let v324: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v322);
            let v326: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v324);
            let v329: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v225))),
                                string(">move || { v326 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v331: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v326 }</span> };
            let v333: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v331);
            let v334: string = string(
                "class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"",
            );
            let v335: string = append(
                (append((append(string(" "), (v334))), string(""))),
                string(""),
            );
            let v336: string = string("vec![]");
            let v337: Vec<leptos::prelude::AnyView> = vec![];
            let v339: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v337);
            let v341: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v339);
            let v343: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v335))),
                                string(">move || { v341 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v345: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v341 }</span> };
            let v347: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v345);
            let v357: string = string("vec![v223, v333, v347]");
            let v358: Vec<leptos::prelude::AnyView> = vec![v223, v333, v347];
            let v360: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v358);
            let v362: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v360);
            let v365: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v201))),
                                string(">move || { v362 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v367: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v196 for=move || v76()>move || { v362 }</label> };
            let v369: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v367);
            let v373: string = string("vec![v369]");
            let v374: Vec<leptos::prelude::AnyView> = vec![v369];
            leptos::prelude::Fragment::new(v374)
        }
        pub fn method245(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure263(v0_1.clone(), ())
            })
        }
        pub fn closure268(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure269(v0_1: i64, unitVar: ()) -> leptos::prelude::Fragment {
            let v1: string = append(
                (append(string("Transaction "), (toString((v0_1) + 1_i64)))),
                string(""),
            );
            let v10: &str = &*v1;
            let v43: std::string::String = String::from(v10);
            let v69: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v43));
            let v74: string = string("vec![v69]");
            let v75: Vec<leptos::prelude::AnyView> = vec![v69];
            leptos::prelude::Fragment::new(v75)
        }
        pub fn closure270(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Account");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method248() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure270((), ()))
        }
        pub fn closure271(v0_1: string, unitVar: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*v0_1;
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method249(v0_1: string) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure271(v0_1.clone(), ())
            })
        }
        pub fn closure272(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure273(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure274(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Timestamp");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method250() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure274((), ()))
        }
        pub fn closure275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v20: i64 =
                (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v5))))
                    / 1000_i64;
            let v22: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v20);
            let v47: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method205(), v22));
            let v66: Dice_ui::US31 = match &v47 {
                Dice_ui::US68::US68_0(v47_0_0) => {
                    let v53: chrono::NaiveDateTime = match &v47 {
                        Dice_ui::US68::US68_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v55: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v53);
                    let v57: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v58: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v60: std::string::String = v55.format(v58).to_string();
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v60))
                }
                _ => Dice_ui::US31::US31_1,
            };
            let v72: Dice_ui::US69 = match &v66 {
                Dice_ui::US31::US31_0(v66_0_0) => Dice_ui::US69::US69_0(
                    match &v66 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => Dice_ui::US69::US69_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v77: string = match &v72 {
                Dice_ui::US69::US69_0(v72_0_0) => v72_0_0.clone(),
                Dice_ui::US69::US69_1(v72_1_0) => append(
                    (append(string("sm\'.to_string result / Error: "), (v72_1_0.clone()))),
                    string(""),
                ),
            };
            let v86: &str = &*v77;
            let v119: std::string::String = String::from(v86);
            let v145: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v119));
            let v150: string = string("vec![v145]");
            let v151: Vec<leptos::prelude::AnyView> = vec![v145];
            leptos::prelude::Fragment::new(v151)
        }
        pub fn method251(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure275(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure276(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure277(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure278(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Predecessor");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method252() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure278((), ()))
        }
        pub fn closure279(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method253(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure279(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure280(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure281(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure282(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Receiver");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method254() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure282((), ()))
        }
        pub fn closure283(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method255(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure283(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure285(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure286(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Actions");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method256() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure286((), ()))
        }
        pub fn closure288(v0_1: std::string::String, unitVar: ()) -> leptos::prelude::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == (v2.clone()) {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == (v2.clone()) {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == (v2.clone()) {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v20: &str = &*v11;
            let v53: std::string::String = String::from(v20);
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v53));
            let v84: string = string("vec![v79]");
            let v85: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v85)
        }
        pub fn method258(v0_1: std::string::String) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure288(v0_1.clone(), ())
            })
        }
        pub fn closure290(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Method");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method260() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure290((), ()))
        }
        pub fn closure291(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v25: Dice_ui::US14 =
                defaultValue(Dice_ui::US14::US14_1, map(Dice_ui::method39(), v0_1));
            match &v25 {
                Dice_ui::US14::US14_0(v25_0_0) => {
                    let v31: string = fable_library_rust::String_::fromString(
                        match &v25 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v40: &str = &*v31;
                    let v73: std::string::String = String::from(v40);
                    let v99: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v73),
                    );
                    let v104: string = string("vec![v99]");
                    let v105: Vec<leptos::prelude::AnyView> = vec![v99];
                    leptos::prelude::Fragment::new(v105)
                }
                _ => {
                    let v117: &str = &*string("None");
                    let v150: std::string::String = String::from(v117);
                    let v176: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v150),
                    );
                    let v181: string = string("vec![v176]");
                    let v182: Vec<leptos::prelude::AnyView> = vec![v176];
                    leptos::prelude::Fragment::new(v182)
                }
            }
        }
        pub fn method261(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure291(v0_1.clone(), ())
            })
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure293(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure294(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure289(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col\"");
            let v4 = Dice_ui::method260();
            let v5 = Dice_ui::method261(v0_1);
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure292((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11 = {
                let clo_1 = Func0::new(move || Dice_ui::closure293((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())",
            );
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v19 = {
                let clo_3 = Func0::new(move || Dice_ui::closure294((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())",
            );
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v63: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v67: string = string("vec![v63]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v63];
            let v70: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
            let v75: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v72 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v77: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v72 }</div> };
            let v79: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v77);
            let v83: string = string("vec![v79]");
            let v84: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v84)
        }
        pub fn method259(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure289(v0_1.clone(), ())
            })
        }
        pub fn closure295(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure296(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure297(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure298(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure287(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v15: bool = true;
            let _vec_map : Vec<_> = v13.into_iter().map(|x| { //;
            let patternInput:
                    (std::string::String, Option<std::string::String>) = x;
            let v19 = Dice_ui::method258(patternInput.0.clone());
            let v20 = Dice_ui::method259(patternInput.1.clone());
            let v23 =
                {
                    let clo = Func0::new(move || Dice_ui::closure295((), ()));
                    Func1::new({
                                   let clo = clo.clone();
                                   move |arg: ()| clo()
                               })
                };
            let v26 =
                {
                    let clo_1 =
                        Func0::new(move || Dice_ui::closure296((), ()));
                    Func1::new({
                                   let clo_1 = clo_1.clone();
                                   move |arg_1: ()| clo_1()
                               })
                };
            let v29 =
                {
                    let clo_2 =
                        Func0::new(move || Dice_ui::closure297((), ()));
                    Func1::new({
                                   let clo_2 = clo_2.clone();
                                   move |arg_2: ()| clo_2()
                               })
                };
            let v30: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())");
            let v32: string =
                append((append((append(string(" "), (v30))), string(""))),
                       string(""));
            let v35 =
                {
                    let clo_3 =
                        Func0::new(move || Dice_ui::closure298((), ()));
                    Func1::new({
                                   let clo_3 = clo_3.clone();
                                   move |arg_3: ()| clo_3()
                               })
                };
            let v37: string =
                string(" class=\"[font-size:12px] text-gray-400\"");
            let v38: leptos::prelude::Fragment = v19();
            let v40: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v38);
            let v43: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dt "),
                                                               (v37))),
                                                       string(">move || { v40 }</"))),
                                               string("dt"))),
                                       string(">"))))), string(" }"));
            let v45:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v40 }</dt> };
            let v47: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v45);
            let v49: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())");
            let v50: leptos::prelude::Fragment = v20();
            let v52: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v50);
            let v55: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dd "),
                                                               (v49))),
                                                       string(">move || { v52 }</"))),
                                               string("dd"))),
                                       string(">"))))), string(" }"));
            let v57:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v35(())>move || { v52 }</dd> };
            let v59: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v57);
            let v67: string = string("vec![v47, v59]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v47, v59];
            let v70: leptos::prelude::Fragment =
                leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v70);
            let v75: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dl "),
                                                               (v32))),
                                                       string(">move || { v72 }</"))),
                                               string("dl"))),
                                       string(">"))))), string(" }"));
            let v77:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v29(()) + " " + &v26(()) + " " + &v23(())>move || { v72 }</dl> };
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v77);
            let v81: bool = true; v79 }).collect::<Vec<_>>();
            let v83: Vec<leptos::prelude::AnyView> = _vec_map;
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method257(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure287(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure299(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure301(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure302(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Deposit");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method262() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure302((), ()))
        }
        pub fn closure303(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v8);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method263(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure303(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure304(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure305(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Outcome Status");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method264() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure306((), ()))
        }
        pub fn closure307(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = ofBoolean(v9);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method265(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure307(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure308(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure309(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure310(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Fee");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method266() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure310((), ()))
        }
        pub fn closure311(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v10);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method267(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure311(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure312(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure313(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure314(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Height");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method268() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure314((), ()))
        }
        pub fn closure315(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v6);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method269(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure315(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure316(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure317(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure318(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Hash");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method270() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure318((), ()))
        }
        pub fn closure319(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method271(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure319(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure320(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure321(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure322(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Hash");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method272() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure323(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method273(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure323(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure324(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure325(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Receipt ID");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method274() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure326((), ()))
        }
        pub fn closure327(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure327(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure328(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure329(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure330(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Logs");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method276() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure330((), ()))
        }
        pub fn method278(
            v0_1: Func1<std::string::String, string>,
        ) -> Func1<std::string::String, string> {
            v0_1
        }
        pub fn closure332(
            v0_1: Func1<std::string::String, string>,
            v1: std::string::String,
        ) -> string {
            let v2: Func1<std::string::String, string> = Dice_ui::method278(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method279() -> string {
            string("\n")
        }
        pub fn closure333(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure331(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: std::string::String = value;
                let v20: string = fable_library_rust::String_::fromString(v18);
                let v23: bool = true;
                v20 /*;
                let v25: bool = */
            }); //;
            let v27: Func1<std::string::String, string> = _func1_from_v14;
            let v30: Vec<string> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v27 = v27.clone();
                        move |v: std::string::String| Dice_ui::closure332(v27.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v34: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray(fable_library_rust::NativeArray_::array_from(v30.clone()));
            let v48: string = replace(
                join(Dice_ui::method279(), toArray(v34)),
                string("\\n"),
                string("\n"),
            );
            let v51 = {
                let clo = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v52: string = string(
                "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v51(())",
            );
            let v54: string = append(
                (append((append(string(" "), (v52))), string(""))),
                string(""),
            );
            let v63: &str = &*v48;
            let v96: std::string::String = String::from(v63);
            let v122: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v96));
            let v126: string = string("vec![v122]");
            let v127: Vec<leptos::prelude::AnyView> = vec![v122];
            let v129: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v127);
            let v131: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v129);
            let v134: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v54))),
                                string(">move || { v131 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v136: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v51(())>move || { v131 }</pre> };
            let v138: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v136);
            let v142: string = string("vec![v138]");
            let v143: Vec<leptos::prelude::AnyView> = vec![v138];
            leptos::prelude::Fragment::new(v143)
        }
        pub fn method277(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure331(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure334(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure335(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure336(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn method281(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method281: loop {
                break '_method281 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if (length(fable_library_rust::String_::fromString(v4))) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method281;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method280(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method280: loop {
                break '_method280 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    if Dice_ui::method281(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method280;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure260(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v144: leptos::prelude::AnyView = if leptos::prelude::ReadSignal::get(&v3) {
                let v8: string = string(" class=\"px-[12px] py-[10px]\"");
                let v10: string = string(" class=\"flex items-center pb-[6px]\"");
                let v12: string = string(" class=\"pr-[15px] [font-size:13px]\"");
                let v16: Func0<leptos::prelude::Fragment> =
                    Dice_ui::method195(Func0::new(move || {
                        Func0::new(move || Dice_ui::closure261((), ()))()
                    }));
                let v18: leptos::prelude::Fragment = (move || v16())();
                let v20: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v18);
                let v23: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v12))),
                                    string(">move || { v20 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v25: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v20 }</span> };
                let v27: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v25);
                let v29: string = string(" class=\"h-px flex-1 bg-gray-300\"");
                let v30: string = string("vec![]");
                let v31: Vec<leptos::prelude::AnyView> = vec![];
                let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
                let v35: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v33);
                let v37: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v29))),
                                    string(">move || { v35 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v35 }</span> };
                let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
                let v49: string = string("vec![v27, v41]");
                let v50: Vec<leptos::prelude::AnyView> = vec![v27, v41];
                let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
                let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
                let v56: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v10))),
                                    string(">move || { v54 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v58: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v54 }</span> };
                let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
                let v61 = Dice_ui::method244();
                let v62 = Dice_ui::method245(v0_1.clone());
                let v65 = {
                    let clo = Func0::new(move || Dice_ui::closure268((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v68 = {
                    let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v71 = {
                    let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                    Func1::new({
                        let clo_2 = clo_2.clone();
                        move |arg_2: ()| clo_2()
                    })
                };
                let v72: string = string(
                    "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v71(()) + \" \" + &v68(()) + \" \" + &v65(())",
                );
                let v73: string = append(
                    (append((append(string(" "), (v72))), string(""))),
                    string(""),
                );
                let v76 = {
                    let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                    Func1::new({
                        let clo_3 = clo_3.clone();
                        move |arg_3: ()| clo_3()
                    })
                };
                let v78: string = string(" class=\"[font-size:12px] text-gray-400\"");
                let v79: leptos::prelude::Fragment = v61();
                let v81: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v79);
                let v84: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dt "), (v78))),
                                    string(">move || { v81 }</"),
                                )),
                                string("dt"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v86: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v81 }</dt> };
                let v88: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v86);
                let v90: string = string(
                    " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v76(())",
                );
                let v91: leptos::prelude::Fragment = v62();
                let v93: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v91);
                let v96: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dd "), (v90))),
                                    string(">move || { v93 }</"),
                                )),
                                string("dd"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v98: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v76(())>move || { v93 }</dd> };
                let v100: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v98);
                let v107: string = string("vec![v88, v100]");
                let v108: Vec<leptos::prelude::AnyView> = vec![v88, v100];
                let v110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v108);
                let v112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v110);
                let v115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dl "), (v73))),
                                    string(">move || { v112 }</"),
                                )),
                                string("dl"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v117: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v71(()) + " " + &v68(()) + " " + &v65(())>move || { v112 }</dl> };
                let v119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v117);
                let v126: string = string("vec![v60, v119]");
                let v127: Vec<leptos::prelude::AnyView> = vec![v60, v119];
                let v129: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v127);
                let v131: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v129);
                let v134: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v8))),
                                    string(">move || { v131 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v136: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="px-[12px] py-[10px]">move || { v131 }</div> };
                leptos::prelude::IntoAny::into_any(v136)
            } else {
                let v140: string = string("vec![]");
                let v141: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v141)
            };
            let v146: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v4601: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v146.clone()),
            ) as u64)
                == 0_u64
            {
                let v153: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v155: string = string(" class=\"[height:17px]\"");
                let v169: string = string(
                    " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v175: string = string(
                    " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v176: string = string("vec![]");
                let v177: Vec<leptos::prelude::AnyView> = vec![];
                let v179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v177);
                let v181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v179);
                let v184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v175))),
                                    string(">move || { v181 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v181 }</path> };
                let v188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v186);
                let v192: string = string("vec![v188]");
                let v193: Vec<leptos::prelude::AnyView> = vec![v188];
                let v195: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v193);
                let v197: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v195);
                let v200: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v169))),
                                    string(">move || { v197 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v202: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v197 }</svg> };
                let v204: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v202);
                let v208: string = string("vec![v204]");
                let v209: Vec<leptos::prelude::AnyView> = vec![v204];
                let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
                let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
                let v216: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v155))),
                                    string(">move || { v213 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v218: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v213 }</span> };
                let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
                let v222: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v232: &str = &*string("No account selected");
                let v265: std::string::String = String::from(v232);
                let v291: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v265));
                let v295: string = string("vec![v291]");
                let v296: Vec<leptos::prelude::AnyView> = vec![v291];
                let v298: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v296);
                let v300: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v298);
                let v303: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v222))),
                                    string(">move || { v300 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v305: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v300 }</pre> };
                let v307: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v305);
                let v315: string = string("vec![v220, v307]");
                let v316: Vec<leptos::prelude::AnyView> = vec![v220, v307];
                let v318: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v316);
                let v320: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v318);
                let v323: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v153))),
                                    string(">move || { v320 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v325: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v320 }</div> };
                leptos::prelude::IntoAny::into_any(v325)
            } else {
                let v329: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v330 = Dice_ui::method138();
                let v331 = Dice_ui::method139();
                let v333: Dice_ui::US53 = match &v329 {
                    Err(v329_1_0) => v331(v329_1_0.clone()),
                    Ok(v329_0_0) => v330(v329_0_0.clone()),
                };
                let v369: Dice_ui::US46 = match &v333 {
                    Dice_ui::US53::US53_0(v333_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v333_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v333_1_0) => Dice_ui::US46::US46_1(v333_1_0.clone()),
                };
                match &v369 {
                    Dice_ui::US46::US46_0(v369_0_0) => {
                        let v370: Dice_ui::US47 = v369_0_0.clone();
                        if let Dice_ui::US47::US47_0(v370_0_0) = &v370 {
                            let v371: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v370_0_0.clone();
                            let v374: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v0_1.l0.clone());
                            let v376: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v374);
                            if if let Dice_ui::US1::US1_0 =
                                &(leptos::prelude::ArcRwSignal::get(&v376.l3.clone())).l4
                            {
                                true
                            } else {
                                false
                            } {
                                let v382: string = string(
                                    "class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"",
                                );
                                let v384: string = append(
                                    (append((append(string(" "), (v382))), string(""))),
                                    string(""),
                                );
                                let v386: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v371.clone().to_vec();
                                let v388: bool = true;
                                let _vec_map : Vec<_> = v386.into_iter().map(|x| { //;
                                    let patternInput:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v392: LrcPtr<Dice_ui::Heap5> =
                                        patternInput.2.clone();
                                    let v393: std::string::String =
                                        v392.l0.clone();
                                    let v394: std::string::String =
                                        v392.l1.clone();
                                    let v395: std::string::String =
                                        v392.l2.clone();
                                    let v396: std::string::String =
                                        v392.l3.clone();
                                    let v397: std::string::String =
                                        v392.l4.clone();
                                    let v398: std::string::String =
                                        v392.l5.clone();
                                    let v399: u32 = v392.l6;
                                    let v400:
                                            Array<(std::string::String,
                                                   Option<std::string::String>)> =
                                        v392.l7.clone();
                                    let v401: f64 = v392.l8;
                                    let v402: bool = v392.l9;
                                    let v403: f64 = v392.l10;
                                    let v404: Array<std::string::String> =
                                        v392.l11.clone();
                                    let v407: i64 =
                                        patternInput.1.clone() as i64;
                                    let v412: bool =
                                        true; leptos::logging::log!("{}", string("transaction.render (1)"));
                                    let v414: Option<LrcPtr<Dice_ui::Heap2>> =
                                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                                    let v416: LrcPtr<Dice_ui::Heap2> =
                                        v414.unwrap();
                                    let v418: string =
                                        string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
                                    let v420: string =
                                        string(" class=\"flex items-center pb-[6px]\"");
                                    let v422: string =
                                        string(" class=\"pr-[15px] [font-size:13px]\"");
                                    let v426:
                                            Func0<leptos::prelude::Fragment> =
                                        Dice_ui::method195(Func0::new(move || Func0::new({
                                                                                             let v407
                                                                                                 =
                                                                                                 v407.clone();
                                                                                             move
                                                                                                 ||
                                                                                                 Dice_ui::closure269(v407,
                                                                                                                     ())
                                                                                         })()));
                                    let v428: leptos::prelude::Fragment =
                                        (move || v426())();
                                    let v430: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v428);
                                    let v433: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v422))),
                                                                               string(">move || { v430 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v435:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v430 }</span> };
                                    let v437: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v435);
                                    let v439: string =
                                        string(" class=\"h-px flex-1 bg-gray-300\"");
                                    let v440: string = string("vec![]");
                                    let v441: Vec<leptos::prelude::AnyView> =
                                        vec![];
                                    let v443: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v441);
                                    let v445: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v443);
                                    let v447: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v439))),
                                                                               string(">move || { v445 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v449:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v445 }</span> };
                                    let v451: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v449);
                                    let v459: string =
                                        string("vec![v437, v451]");
                                    let v460: Vec<leptos::prelude::AnyView> =
                                        vec![v437, v451];
                                    let v462: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v460);
                                    let v464: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v462);
                                    let v466: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v420))),
                                                                               string(">move || { v464 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v468:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v464 }</span> };
                                    let v470: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v468);
                                    let v472: string =
                                        string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
                                    let v473 = Dice_ui::method248();
                                    let v474 =
                                        Dice_ui::method249(patternInput.0.clone());
                                    let v477 =
                                        {
                                            let clo_4 =
                                                Func0::new(move ||
                                                               Dice_ui::closure272((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_4 =
                                                               clo_4.clone();
                                                           move |arg_4: ()|
                                                               clo_4()
                                                       })
                                        };
                                    let v480 =
                                        {
                                            let clo_5 =
                                                Func0::new(move ||
                                                               Dice_ui::closure273((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_5 =
                                                               clo_5.clone();
                                                           move |arg_5: ()|
                                                               clo_5()
                                                       })
                                        };
                                    fn v482() -> string {
                                        Dice_ui::closure235((), ())
                                    }
                                    let v483 =
                                        {
                                            let clo_6 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_6 =
                                                               clo_6.clone();
                                                           move |arg_6: ()|
                                                               clo_6()
                                                       })
                                        };
                                    let v484: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v483(()) + \" \" + &v480(()) + \" \" + &v477(())");
                                    let v485: string =
                                        append((append((append(string(" "),
                                                               (v484))),
                                                       string(""))),
                                               string(""));
                                    fn v487() -> string {
                                        Dice_ui::closure236((), ())
                                    }
                                    let v488 =
                                        {
                                            let clo_7 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_7 =
                                                               clo_7.clone();
                                                           move |arg_7: ()|
                                                               clo_7()
                                                       })
                                        };
                                    let v490: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v491: leptos::prelude::Fragment =
                                        v473();
                                    let v493: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v491);
                                    let v496: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v490))),
                                                                               string(">move || { v493 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v498:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v493 }</dt> };
                                    let v500: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v498);
                                    let v502: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v488(())");
                                    let v503: leptos::prelude::Fragment =
                                        v474();
                                    let v505: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v503);
                                    let v508: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v502))),
                                                                               string(">move || { v505 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v510:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v488(())>move || { v505 }</dd> };
                                    let v512: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v510);
                                    let v519: string =
                                        string("vec![v500, v512]");
                                    let v520: Vec<leptos::prelude::AnyView> =
                                        vec![v500, v512];
                                    let v522: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v520);
                                    let v524: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v522);
                                    let v527: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v485))),
                                                                               string(">move || { v524 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v529:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v483(()) + " " + &v480(()) + " " + &v477(())>move || { v524 }</dl> };
                                    let v531: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v529);
                                    let v532 = Dice_ui::method250();
                                    let v533 =
                                        Dice_ui::method251(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v536 =
                                        {
                                            let clo_8 =
                                                Func0::new(move ||
                                                               Dice_ui::closure276((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_8 =
                                                               clo_8.clone();
                                                           move |arg_8: ()|
                                                               clo_8()
                                                       })
                                        };
                                    let v539 =
                                        {
                                            let clo_9 =
                                                Func0::new(move ||
                                                               Dice_ui::closure277((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_9 =
                                                               clo_9.clone();
                                                           move |arg_9: ()|
                                                               clo_9()
                                                       })
                                        };
                                    let v541 =
                                        {
                                            let clo_10 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_10 =
                                                               clo_10.clone();
                                                           move |arg_10: ()|
                                                               clo_10()
                                                       })
                                        };
                                    let v542: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v541(()) + \" \" + &v539(()) + \" \" + &v536(())");
                                    let v543: string =
                                        append((append((append(string(" "),
                                                               (v542))),
                                                       string(""))),
                                               string(""));
                                    let v545 =
                                        {
                                            let clo_11 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_11 =
                                                               clo_11.clone();
                                                           move |arg_11: ()|
                                                               clo_11()
                                                       })
                                        };
                                    let v547: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v548: leptos::prelude::Fragment =
                                        v532();
                                    let v550: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v548);
                                    let v552: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v547))),
                                                                               string(">move || { v550 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v554:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v550 }</dt> };
                                    let v556: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v554);
                                    let v558: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v545(())");
                                    let v559: leptos::prelude::Fragment =
                                        v533();
                                    let v561: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v559);
                                    let v563: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v558))),
                                                                               string(">move || { v561 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v565:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v545(())>move || { v561 }</dd> };
                                    let v567: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v565);
                                    let v574: string =
                                        string("vec![v556, v567]");
                                    let v575: Vec<leptos::prelude::AnyView> =
                                        vec![v556, v567];
                                    let v577: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v575);
                                    let v579: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v577);
                                    let v581: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v543))),
                                                                               string(">move || { v579 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v583:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v541(()) + " " + &v539(()) + " " + &v536(())>move || { v579 }</dl> };
                                    let v585: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v583);
                                    let v586 = Dice_ui::method252();
                                    let v587 =
                                        Dice_ui::method253(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v590 =
                                        {
                                            let clo_12 =
                                                Func0::new(move ||
                                                               Dice_ui::closure280((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_12 =
                                                               clo_12.clone();
                                                           move |arg_12: ()|
                                                               clo_12()
                                                       })
                                        };
                                    let v593 =
                                        {
                                            let clo_13 =
                                                Func0::new(move ||
                                                               Dice_ui::closure281((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_13 =
                                                               clo_13.clone();
                                                           move |arg_13: ()|
                                                               clo_13()
                                                       })
                                        };
                                    let v595 =
                                        {
                                            let clo_14 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_14 =
                                                               clo_14.clone();
                                                           move |arg_14: ()|
                                                               clo_14()
                                                       })
                                        };
                                    let v596: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v595(()) + \" \" + &v593(()) + \" \" + &v590(())");
                                    let v597: string =
                                        append((append((append(string(" "),
                                                               (v596))),
                                                       string(""))),
                                               string(""));
                                    let v599 =
                                        {
                                            let clo_15 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_15 =
                                                               clo_15.clone();
                                                           move |arg_15: ()|
                                                               clo_15()
                                                       })
                                        };
                                    let v601: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v602: leptos::prelude::Fragment =
                                        v586();
                                    let v604: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v602);
                                    let v606: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v601))),
                                                                               string(">move || { v604 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v608:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v604 }</dt> };
                                    let v610: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v608);
                                    let v612: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v599(())");
                                    let v613: leptos::prelude::Fragment =
                                        v587();
                                    let v615: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v613);
                                    let v617: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v612))),
                                                                               string(">move || { v615 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v619:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v599(())>move || { v615 }</dd> };
                                    let v621: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v619);
                                    let v628: string =
                                        string("vec![v610, v621]");
                                    let v629: Vec<leptos::prelude::AnyView> =
                                        vec![v610, v621];
                                    let v631: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v629);
                                    let v633: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v631);
                                    let v635: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v597))),
                                                                               string(">move || { v633 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v637:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v595(()) + " " + &v593(()) + " " + &v590(())>move || { v633 }</dl> };
                                    let v639: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v637);
                                    let v640 = Dice_ui::method254();
                                    let v641 =
                                        Dice_ui::method255(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v644 =
                                        {
                                            let clo_16 =
                                                Func0::new(move ||
                                                               Dice_ui::closure284((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_16 =
                                                               clo_16.clone();
                                                           move |arg_16: ()|
                                                               clo_16()
                                                       })
                                        };
                                    let v647 =
                                        {
                                            let clo_17 =
                                                Func0::new(move ||
                                                               Dice_ui::closure285((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_17 =
                                                               clo_17.clone();
                                                           move |arg_17: ()|
                                                               clo_17()
                                                       })
                                        };
                                    let v649 =
                                        {
                                            let clo_18 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_18 =
                                                               clo_18.clone();
                                                           move |arg_18: ()|
                                                               clo_18()
                                                       })
                                        };
                                    let v650: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v649(()) + \" \" + &v647(()) + \" \" + &v644(())");
                                    let v651: string =
                                        append((append((append(string(" "),
                                                               (v650))),
                                                       string(""))),
                                               string(""));
                                    let v653 =
                                        {
                                            let clo_19 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_19 =
                                                               clo_19.clone();
                                                           move |arg_19: ()|
                                                               clo_19()
                                                       })
                                        };
                                    let v655: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v656: leptos::prelude::Fragment =
                                        v640();
                                    let v658: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v656);
                                    let v660: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v655))),
                                                                               string(">move || { v658 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v662:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v658 }</dt> };
                                    let v664: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v662);
                                    let v666: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v653(())");
                                    let v667: leptos::prelude::Fragment =
                                        v641();
                                    let v669: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v667);
                                    let v671: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v666))),
                                                                               string(">move || { v669 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v673:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v653(())>move || { v669 }</dd> };
                                    let v675: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v673);
                                    let v682: string =
                                        string("vec![v664, v675]");
                                    let v683: Vec<leptos::prelude::AnyView> =
                                        vec![v664, v675];
                                    let v685: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v683);
                                    let v687: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v685);
                                    let v689: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v651))),
                                                                               string(">move || { v687 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v691:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v649(()) + " " + &v647(()) + " " + &v644(())>move || { v687 }</dl> };
                                    let v693: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v691);
                                    let v694 = Dice_ui::method256();
                                    let v695 =
                                        Dice_ui::method257(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v698 =
                                        {
                                            let clo_20 =
                                                Func0::new(move ||
                                                               Dice_ui::closure299((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_20 =
                                                               clo_20.clone();
                                                           move |arg_20: ()|
                                                               clo_20()
                                                       })
                                        };
                                    let v701 =
                                        {
                                            let clo_21 =
                                                Func0::new(move ||
                                                               Dice_ui::closure300((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_21 =
                                                               clo_21.clone();
                                                           move |arg_21: ()|
                                                               clo_21()
                                                       })
                                        };
                                    let v703 =
                                        {
                                            let clo_22 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_22 =
                                                               clo_22.clone();
                                                           move |arg_22: ()|
                                                               clo_22()
                                                       })
                                        };
                                    let v704: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v703(()) + \" \" + &v701(()) + \" \" + &v698(())");
                                    let v705: string =
                                        append((append((append(string(" "),
                                                               (v704))),
                                                       string(""))),
                                               string(""));
                                    let v708 =
                                        {
                                            let clo_23 =
                                                Func0::new(move ||
                                                               Dice_ui::closure301((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_23 =
                                                               clo_23.clone();
                                                           move |arg_23: ()|
                                                               clo_23()
                                                       })
                                        };
                                    let v710: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v711: leptos::prelude::Fragment =
                                        v694();
                                    let v713: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v711);
                                    let v715: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v710))),
                                                                               string(">move || { v713 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v717:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v713 }</dt> };
                                    let v719: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v717);
                                    let v721: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v708(())");
                                    let v722: leptos::prelude::Fragment =
                                        v695();
                                    let v724: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v722);
                                    let v726: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v721))),
                                                                               string(">move || { v724 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v728:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v708(())>move || { v724 }</dd> };
                                    let v730: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v728);
                                    let v737: string =
                                        string("vec![v719, v730]");
                                    let v738: Vec<leptos::prelude::AnyView> =
                                        vec![v719, v730];
                                    let v740: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v738);
                                    let v742: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v740);
                                    let v744: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v705))),
                                                                               string(">move || { v742 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v746:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v703(()) + " " + &v701(()) + " " + &v698(())>move || { v742 }</dl> };
                                    let v748: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v746);
                                    let v749 = Dice_ui::method262();
                                    let v750 =
                                        Dice_ui::method263(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v753 =
                                        {
                                            let clo_24 =
                                                Func0::new(move ||
                                                               Dice_ui::closure304((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_24 =
                                                               clo_24.clone();
                                                           move |arg_24: ()|
                                                               clo_24()
                                                       })
                                        };
                                    let v756 =
                                        {
                                            let clo_25 =
                                                Func0::new(move ||
                                                               Dice_ui::closure305((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_25 =
                                                               clo_25.clone();
                                                           move |arg_25: ()|
                                                               clo_25()
                                                       })
                                        };
                                    let v758 =
                                        {
                                            let clo_26 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_26 =
                                                               clo_26.clone();
                                                           move |arg_26: ()|
                                                               clo_26()
                                                       })
                                        };
                                    let v759: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v758(()) + \" \" + &v756(()) + \" \" + &v753(())");
                                    let v760: string =
                                        append((append((append(string(" "),
                                                               (v759))),
                                                       string(""))),
                                               string(""));
                                    let v762 =
                                        {
                                            let clo_27 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_27 =
                                                               clo_27.clone();
                                                           move |arg_27: ()|
                                                               clo_27()
                                                       })
                                        };
                                    let v764: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v765: leptos::prelude::Fragment =
                                        v749();
                                    let v767: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v765);
                                    let v769: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v764))),
                                                                               string(">move || { v767 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v771:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v767 }</dt> };
                                    let v773: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v771);
                                    let v775: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v762(())");
                                    let v776: leptos::prelude::Fragment =
                                        v750();
                                    let v778: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v776);
                                    let v780: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v775))),
                                                                               string(">move || { v778 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v782:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v762(())>move || { v778 }</dd> };
                                    let v784: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v782);
                                    let v791: string =
                                        string("vec![v773, v784]");
                                    let v792: Vec<leptos::prelude::AnyView> =
                                        vec![v773, v784];
                                    let v794: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v792);
                                    let v796: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v794);
                                    let v798: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v760))),
                                                                               string(">move || { v796 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v800:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v758(()) + " " + &v756(()) + " " + &v753(())>move || { v796 }</dl> };
                                    let v802: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v800);
                                    let v803 = Dice_ui::method264();
                                    let v804 =
                                        Dice_ui::method265(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v807 =
                                        {
                                            let clo_28 =
                                                Func0::new(move ||
                                                               Dice_ui::closure308((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_28 =
                                                               clo_28.clone();
                                                           move |arg_28: ()|
                                                               clo_28()
                                                       })
                                        };
                                    let v810 =
                                        {
                                            let clo_29 =
                                                Func0::new(move ||
                                                               Dice_ui::closure309((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_29 =
                                                               clo_29.clone();
                                                           move |arg_29: ()|
                                                               clo_29()
                                                       })
                                        };
                                    let v812 =
                                        {
                                            let clo_30 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_30 =
                                                               clo_30.clone();
                                                           move |arg_30: ()|
                                                               clo_30()
                                                       })
                                        };
                                    let v813: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v812(()) + \" \" + &v810(()) + \" \" + &v807(())");
                                    let v814: string =
                                        append((append((append(string(" "),
                                                               (v813))),
                                                       string(""))),
                                               string(""));
                                    let v816 =
                                        {
                                            let clo_31 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_31 =
                                                               clo_31.clone();
                                                           move |arg_31: ()|
                                                               clo_31()
                                                       })
                                        };
                                    let v818: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v819: leptos::prelude::Fragment =
                                        v803();
                                    let v821: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v819);
                                    let v823: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v818))),
                                                                               string(">move || { v821 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v825:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v821 }</dt> };
                                    let v827: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v825);
                                    let v829: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v816(())");
                                    let v830: leptos::prelude::Fragment =
                                        v804();
                                    let v832: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v830);
                                    let v834: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v829))),
                                                                               string(">move || { v832 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v836:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v816(())>move || { v832 }</dd> };
                                    let v838: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v836);
                                    let v845: string =
                                        string("vec![v827, v838]");
                                    let v846: Vec<leptos::prelude::AnyView> =
                                        vec![v827, v838];
                                    let v848: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v846);
                                    let v850: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v848);
                                    let v852: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v814))),
                                                                               string(">move || { v850 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v854:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v812(()) + " " + &v810(()) + " " + &v807(())>move || { v850 }</dl> };
                                    let v856: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v854);
                                    let v857 = Dice_ui::method266();
                                    let v858 =
                                        Dice_ui::method267(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v861 =
                                        {
                                            let clo_32 =
                                                Func0::new(move ||
                                                               Dice_ui::closure312((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_32 =
                                                               clo_32.clone();
                                                           move |arg_32: ()|
                                                               clo_32()
                                                       })
                                        };
                                    let v864 =
                                        {
                                            let clo_33 =
                                                Func0::new(move ||
                                                               Dice_ui::closure313((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_33 =
                                                               clo_33.clone();
                                                           move |arg_33: ()|
                                                               clo_33()
                                                       })
                                        };
                                    let v866 =
                                        {
                                            let clo_34 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_34 =
                                                               clo_34.clone();
                                                           move |arg_34: ()|
                                                               clo_34()
                                                       })
                                        };
                                    let v867: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v866(()) + \" \" + &v864(()) + \" \" + &v861(())");
                                    let v868: string =
                                        append((append((append(string(" "),
                                                               (v867))),
                                                       string(""))),
                                               string(""));
                                    let v870 =
                                        {
                                            let clo_35 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_35 =
                                                               clo_35.clone();
                                                           move |arg_35: ()|
                                                               clo_35()
                                                       })
                                        };
                                    let v872: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v873: leptos::prelude::Fragment =
                                        v857();
                                    let v875: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v873);
                                    let v877: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v872))),
                                                                               string(">move || { v875 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v879:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v875 }</dt> };
                                    let v881: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v879);
                                    let v883: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v870(())");
                                    let v884: leptos::prelude::Fragment =
                                        v858();
                                    let v886: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v884);
                                    let v888: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v883))),
                                                                               string(">move || { v886 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v890:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v870(())>move || { v886 }</dd> };
                                    let v892: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v890);
                                    let v899: string =
                                        string("vec![v881, v892]");
                                    let v900: Vec<leptos::prelude::AnyView> =
                                        vec![v881, v892];
                                    let v902: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v900);
                                    let v904: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v902);
                                    let v906: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v868))),
                                                                               string(">move || { v904 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v908:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v866(()) + " " + &v864(()) + " " + &v861(())>move || { v904 }</dl> };
                                    let v910: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v908);
                                    let v911 = Dice_ui::method268();
                                    let v912 =
                                        Dice_ui::method269(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v915 =
                                        {
                                            let clo_36 =
                                                Func0::new(move ||
                                                               Dice_ui::closure316((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_36 =
                                                               clo_36.clone();
                                                           move |arg_36: ()|
                                                               clo_36()
                                                       })
                                        };
                                    let v918 =
                                        {
                                            let clo_37 =
                                                Func0::new(move ||
                                                               Dice_ui::closure317((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_37 =
                                                               clo_37.clone();
                                                           move |arg_37: ()|
                                                               clo_37()
                                                       })
                                        };
                                    let v920 =
                                        {
                                            let clo_38 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_38 =
                                                               clo_38.clone();
                                                           move |arg_38: ()|
                                                               clo_38()
                                                       })
                                        };
                                    let v921: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v920(()) + \" \" + &v918(()) + \" \" + &v915(())");
                                    let v922: string =
                                        append((append((append(string(" "),
                                                               (v921))),
                                                       string(""))),
                                               string(""));
                                    let v924 =
                                        {
                                            let clo_39 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_39 =
                                                               clo_39.clone();
                                                           move |arg_39: ()|
                                                               clo_39()
                                                       })
                                        };
                                    let v926: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v927: leptos::prelude::Fragment =
                                        v911();
                                    let v929: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v927);
                                    let v931: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v926))),
                                                                               string(">move || { v929 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v933:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v929 }</dt> };
                                    let v935: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v933);
                                    let v937: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v924(())");
                                    let v938: leptos::prelude::Fragment =
                                        v912();
                                    let v940: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v938);
                                    let v942: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v937))),
                                                                               string(">move || { v940 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v944:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v924(())>move || { v940 }</dd> };
                                    let v946: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v944);
                                    let v953: string =
                                        string("vec![v935, v946]");
                                    let v954: Vec<leptos::prelude::AnyView> =
                                        vec![v935, v946];
                                    let v956: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v954);
                                    let v958: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v956);
                                    let v960: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v922))),
                                                                               string(">move || { v958 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v962:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v920(()) + " " + &v918(()) + " " + &v915(())>move || { v958 }</dl> };
                                    let v964: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v962);
                                    let v965 = Dice_ui::method270();
                                    let v966 =
                                        Dice_ui::method271(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v969 =
                                        {
                                            let clo_40 =
                                                Func0::new(move ||
                                                               Dice_ui::closure320((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_40 =
                                                               clo_40.clone();
                                                           move |arg_40: ()|
                                                               clo_40()
                                                       })
                                        };
                                    let v972 =
                                        {
                                            let clo_41 =
                                                Func0::new(move ||
                                                               Dice_ui::closure321((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_41 =
                                                               clo_41.clone();
                                                           move |arg_41: ()|
                                                               clo_41()
                                                       })
                                        };
                                    let v974 =
                                        {
                                            let clo_42 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_42 =
                                                               clo_42.clone();
                                                           move |arg_42: ()|
                                                               clo_42()
                                                       })
                                        };
                                    let v975: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v974(()) + \" \" + &v972(()) + \" \" + &v969(())");
                                    let v976: string =
                                        append((append((append(string(" "),
                                                               (v975))),
                                                       string(""))),
                                               string(""));
                                    let v978 =
                                        {
                                            let clo_43 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_43 =
                                                               clo_43.clone();
                                                           move |arg_43: ()|
                                                               clo_43()
                                                       })
                                        };
                                    let v980: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v981: leptos::prelude::Fragment =
                                        v965();
                                    let v983: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v981);
                                    let v985: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v980))),
                                                                               string(">move || { v983 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v987:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v983 }</dt> };
                                    let v989: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v987);
                                    let v991: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v978(())");
                                    let v992: leptos::prelude::Fragment =
                                        v966();
                                    let v994: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v992);
                                    let v996: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v991))),
                                                                               string(">move || { v994 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v998:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v978(())>move || { v994 }</dd> };
                                    let v1000: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v998);
                                    let v1007: string =
                                        string("vec![v989, v1000]");
                                    let v1008: Vec<leptos::prelude::AnyView> =
                                        vec![v989, v1000];
                                    let v1010: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1008);
                                    let v1012: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1010);
                                    let v1014: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v976))),
                                                                               string(">move || { v1012 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1016:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v974(()) + " " + &v972(()) + " " + &v969(())>move || { v1012 }</dl> };
                                    let v1018: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1016);
                                    let v1019 = Dice_ui::method272();
                                    let v1020 =
                                        Dice_ui::method273(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v1023 =
                                        {
                                            let clo_44 =
                                                Func0::new(move ||
                                                               Dice_ui::closure324((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_44 =
                                                               clo_44.clone();
                                                           move |arg_44: ()|
                                                               clo_44()
                                                       })
                                        };
                                    let v1026 =
                                        {
                                            let clo_45 =
                                                Func0::new(move ||
                                                               Dice_ui::closure325((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_45 =
                                                               clo_45.clone();
                                                           move |arg_45: ()|
                                                               clo_45()
                                                       })
                                        };
                                    let v1028 =
                                        {
                                            let clo_46 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_46 =
                                                               clo_46.clone();
                                                           move |arg_46: ()|
                                                               clo_46()
                                                       })
                                        };
                                    let v1029: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1028(()) + \" \" + &v1026(()) + \" \" + &v1023(())");
                                    let v1030: string =
                                        append((append((append(string(" "),
                                                               (v1029))),
                                                       string(""))),
                                               string(""));
                                    let v1032 =
                                        {
                                            let clo_47 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_47 =
                                                               clo_47.clone();
                                                           move |arg_47: ()|
                                                               clo_47()
                                                       })
                                        };
                                    let v1034: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1035: leptos::prelude::Fragment =
                                        v1019();
                                    let v1037: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1035);
                                    let v1039: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1034))),
                                                                               string(">move || { v1037 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1041:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1037 }</dt> };
                                    let v1043: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1041);
                                    let v1045: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1032(())");
                                    let v1046: leptos::prelude::Fragment =
                                        v1020();
                                    let v1048: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1046);
                                    let v1050: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1045))),
                                                                               string(">move || { v1048 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1052:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1032(())>move || { v1048 }</dd> };
                                    let v1054: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1052);
                                    let v1061: string =
                                        string("vec![v1043, v1054]");
                                    let v1062: Vec<leptos::prelude::AnyView> =
                                        vec![v1043, v1054];
                                    let v1064: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1062);
                                    let v1066: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1064);
                                    let v1068: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1030))),
                                                                               string(">move || { v1066 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1070:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1028(()) + " " + &v1026(()) + " " + &v1023(())>move || { v1066 }</dl> };
                                    let v1072: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1070);
                                    let v1073 = Dice_ui::method274();
                                    let v1074 =
                                        Dice_ui::method275(v393.clone(),
                                                           v394.clone(),
                                                           v395.clone(),
                                                           v396.clone(),
                                                           v397.clone(),
                                                           v398.clone(), v399,
                                                           v400.clone(), v401,
                                                           v402, v403,
                                                           v404.clone());
                                    let v1077 =
                                        {
                                            let clo_48 =
                                                Func0::new(move ||
                                                               Dice_ui::closure328((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_48 =
                                                               clo_48.clone();
                                                           move |arg_48: ()|
                                                               clo_48()
                                                       })
                                        };
                                    let v1080 =
                                        {
                                            let clo_49 =
                                                Func0::new(move ||
                                                               Dice_ui::closure329((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_49 =
                                                               clo_49.clone();
                                                           move |arg_49: ()|
                                                               clo_49()
                                                       })
                                        };
                                    let v1082 =
                                        {
                                            let clo_50 = Func0::from(v482);
                                            Func1::new({
                                                           let clo_50 =
                                                               clo_50.clone();
                                                           move |arg_50: ()|
                                                               clo_50()
                                                       })
                                        };
                                    let v1083: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1082(()) + \" \" + &v1080(()) + \" \" + &v1077(())");
                                    let v1084: string =
                                        append((append((append(string(" "),
                                                               (v1083))),
                                                       string(""))),
                                               string(""));
                                    let v1086 =
                                        {
                                            let clo_51 = Func0::from(v487);
                                            Func1::new({
                                                           let clo_51 =
                                                               clo_51.clone();
                                                           move |arg_51: ()|
                                                               clo_51()
                                                       })
                                        };
                                    let v1088: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1089: leptos::prelude::Fragment =
                                        v1073();
                                    let v1091: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1089);
                                    let v1093: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1088))),
                                                                               string(">move || { v1091 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1095:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1091 }</dt> };
                                    let v1097: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1095);
                                    let v1099: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1086(())");
                                    let v1100: leptos::prelude::Fragment =
                                        v1074();
                                    let v1102: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1100);
                                    let v1104: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1099))),
                                                                               string(">move || { v1102 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1106:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1086(())>move || { v1102 }</dd> };
                                    let v1108: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1106);
                                    let v1115: string =
                                        string("vec![v1097, v1108]");
                                    let v1116: Vec<leptos::prelude::AnyView> =
                                        vec![v1097, v1108];
                                    let v1118: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1116);
                                    let v1120: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1118);
                                    let v1122: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1084))),
                                                                               string(">move || { v1120 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1124:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1082(()) + " " + &v1080(()) + " " + &v1077(())>move || { v1120 }</dl> };
                                    let v1126: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1124);
                                    let v1187: leptos::prelude::AnyView =
                                        if (get_Count(v404.clone()) as u64) ==
                                               0_u64 {
                                            let v1129: string =
                                                string("vec![]");
                                            let v1130:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![];
                                            leptos::prelude::IntoAny::into_any(v1130)
                                        } else {
                                            let v1133 = Dice_ui::method276();
                                            let v1134 =
                                                Dice_ui::method277(v393, v394,
                                                                   v395, v396,
                                                                   v397, v398,
                                                                   v399, v400,
                                                                   v401, v402,
                                                                   v403,
                                                                   v404);
                                            let v1137 =
                                                {
                                                    let clo_52 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure334((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_52
                                                                       =
                                                                       clo_52.clone();
                                                                   move
                                                                       |arg_52:
                                                                            ()|
                                                                       clo_52()
                                                               })
                                                };
                                            let v1140 =
                                                {
                                                    let clo_53 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure335((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_53
                                                                       =
                                                                       clo_53.clone();
                                                                   move
                                                                       |arg_53:
                                                                            ()|
                                                                       clo_53()
                                                               })
                                                };
                                            let v1142 =
                                                {
                                                    let clo_54 =
                                                        Func0::from(v482);
                                                    Func1::new({
                                                                   let clo_54
                                                                       =
                                                                       clo_54.clone();
                                                                   move
                                                                       |arg_54:
                                                                            ()|
                                                                       clo_54()
                                                               })
                                                };
                                            let v1143: string =
                                                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1142(()) + \" \" + &v1140(()) + \" \" + &v1137(())");
                                            let v1144: string =
                                                append((append((append(string(" "),
                                                                       (v1143))),
                                                               string(""))),
                                                       string(""));
                                            let v1146 =
                                                {
                                                    let clo_55 =
                                                        Func0::from(v487);
                                                    Func1::new({
                                                                   let clo_55
                                                                       =
                                                                       clo_55.clone();
                                                                   move
                                                                       |arg_55:
                                                                            ()|
                                                                       clo_55()
                                                               })
                                                };
                                            let v1148: string =
                                                string(" class=\"[font-size:12px] text-gray-400\"");
                                            let v1149:
                                                    leptos::prelude::Fragment =
                                                v1133();
                                            let v1151:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1149);
                                            let v1153: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dt "),
                                                                                               (v1148))),
                                                                                       string(">move || { v1151 }</"))),
                                                                               string("dt"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1155:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1151 }</dt> };
                                            let v1157:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1155);
                                            let v1159: string =
                                                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1146(())");
                                            let v1160:
                                                    leptos::prelude::Fragment =
                                                v1134();
                                            let v1162:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1160);
                                            let v1164: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dd "),
                                                                                               (v1159))),
                                                                                       string(">move || { v1162 }</"))),
                                                                               string("dd"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1166:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1146(())>move || { v1162 }</dd> };
                                            let v1168:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1166);
                                            let v1175: string =
                                                string("vec![v1157, v1168]");
                                            let v1176:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1157, v1168];
                                            let v1178:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v1176);
                                            let v1180:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1178);
                                            let v1182: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dl "),
                                                                                               (v1144))),
                                                                                       string(">move || { v1180 }</"))),
                                                                               string("dl"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1184:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1142(()) + " " + &v1140(()) + " " + &v1137(())>move || { v1180 }</dl> };
                                            leptos::prelude::IntoAny::into_any(v1184)
                                        };
                                    let v1227: string =
                                        string("vec![v531, v585, v639, v693, v748, v802, v856, v910, v964, v1018, v1072, v1126, v1187]");
                                    let v1228: Vec<leptos::prelude::AnyView> =
                                        vec![v531, v585, v639, v693, v748, v802, v856, v910, v964, v1018, v1072, v1126, v1187];
                                    let v1230: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1228);
                                    let v1232: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1230);
                                    let v1235: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v472))),
                                                                               string(">move || { v1232 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1237:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">move || { v1232 }</div> };
                                    let v1239: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1237);
                                    let v1246: string =
                                        string("vec![v470, v1239]");
                                    let v1247: Vec<leptos::prelude::AnyView> =
                                        vec![v470, v1239];
                                    let v1249: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1247);
                                    let v1251: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1249);
                                    let v1253: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v418))),
                                                                               string(">move || { v1251 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1255:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="flex flex-1 flex-col overflow-x-auto">move || { v1251 }</div> };
                                    let v1257: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1255);
                                    let v1259: bool =
                                        true; v1257 }).collect::<Vec<_>>();
                                let v1261: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v1263: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1261);
                                let v1267: string = string("vec![v1263]");
                                let v1268: Vec<leptos::prelude::AnyView> = vec![v1263];
                                let v1270: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1268);
                                let v1272: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1270);
                                let v1274: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v384))),
                                                    string(">move || { v1272 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1276: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">move || { v1272 }</div> };
                                leptos::prelude::IntoAny::into_any(v1276)
                            } else {
                                let v1280: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v371.clone().to_vec();
                                let v1282: bool = true;
                                let _vec_map : Vec<_> = v1280.into_iter().map(|x| { //;
                                    let patternInput_1:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v1286: LrcPtr<Dice_ui::Heap5> =
                                        patternInput_1.2.clone();
                                    let v1289: bool =
                                        true; leptos::logging::log!("{}", string("transaction.tr_render (1)"));
                                    let v1292: string =
                                        string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                    let v1294: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1303: &str =
                                        &*patternInput_1.0.clone();
                                    let v1336: std::string::String =
                                        String::from(v1303);
                                    let v1362: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1336));
                                    let v1366: string = string("vec![v1362]");
                                    let v1367: Vec<leptos::prelude::AnyView> =
                                        vec![v1362];
                                    let v1369: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1367);
                                    let v1371: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1369);
                                    let v1374: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1294))),
                                                                               string(">move || { v1371 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1376:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1371 }</td> };
                                    let v1378: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1376);
                                    let v1380: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1390: i64 =
                                        (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v1286.l5.clone()))))
                                            / 1000_i64;
                                    let v1392:
                                            Option<chrono::DateTime<chrono::Utc>> =
                                        chrono::DateTime::from_timestamp_micros(v1390);
                                    let v1417: Dice_ui::US68 =
                                        defaultValue(Dice_ui::US68::US68_1,
                                                     map(Dice_ui::method205(),
                                                         v1392));
                                    let v1436: Dice_ui::US31 =
                                        match &v1417 {
                                            Dice_ui::US68::US68_0(v1417_0_0)
                                            => {
                                                let v1423:
                                                        chrono::NaiveDateTime =
                                                    match &v1417 {
                                                        Dice_ui::US68::US68_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone().naive_utc();
                                                let v1425:
                                                        chrono::DateTime<chrono::Local> =
                                                    chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v1423);
                                                let v1427: string =
                                                    string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                                let v1428: &str =
                                                    r#"%Y-%m-%d %H:%M:%S"#;
                                                let v1430:
                                                        std::string::String =
                                                    v1425.format(v1428).to_string();
                                                Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v1430))
                                            }
                                            _ => Dice_ui::US31::US31_1,
                                        };
                                    let v1442: Dice_ui::US69 =
                                        match &v1436 {
                                            Dice_ui::US31::US31_0(v1436_0_0)
                                            =>
                                            Dice_ui::US69::US69_0(match &v1436
                                                                      {
                                                                      Dice_ui::US31::US31_0(x)
                                                                      =>
                                                                      x.clone(),
                                                                      _ =>
                                                                      unreachable!(),
                                                                  }.clone()),
                                            _ =>
                                            Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                        };
                                    let v1447: string =
                                        match &v1442 {
                                            Dice_ui::US69::US69_0(v1442_0_0)
                                            => v1442_0_0.clone(),
                                            Dice_ui::US69::US69_1(v1442_1_0)
                                            =>
                                            append((append(string("sm\'.to_string result / Error: "),
                                                           (v1442_1_0.clone()))),
                                                   string("")),
                                        };
                                    let v1456: &str = &*v1447;
                                    let v1489: std::string::String =
                                        String::from(v1456);
                                    let v1515: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1489));
                                    let v1519: string = string("vec![v1515]");
                                    let v1520: Vec<leptos::prelude::AnyView> =
                                        vec![v1515];
                                    let v1522: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1520);
                                    let v1524: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1522);
                                    let v1526: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1380))),
                                                                               string(">move || { v1524 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1528:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1524 }</td> };
                                    let v1530: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1528);
                                    let v1532: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1535: string =
                                        fable_library_rust::String_::fromString(v1286.l1.clone());
                                    let v1544: &str = &*v1535;
                                    let v1577: std::string::String =
                                        String::from(v1544);
                                    let v1603: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1577));
                                    let v1607: string = string("vec![v1603]");
                                    let v1608: Vec<leptos::prelude::AnyView> =
                                        vec![v1603];
                                    let v1610: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1608);
                                    let v1612: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1610);
                                    let v1614: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1532))),
                                                                               string(">move || { v1612 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1616:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1612 }</td> };
                                    let v1618: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1616);
                                    let v1620: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1623: string =
                                        fable_library_rust::String_::fromString(v1286.l2.clone());
                                    let v1632: &str = &*v1623;
                                    let v1665: std::string::String =
                                        String::from(v1632);
                                    let v1691: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1665));
                                    let v1695: string = string("vec![v1691]");
                                    let v1696: Vec<leptos::prelude::AnyView> =
                                        vec![v1691];
                                    let v1698: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1696);
                                    let v1700: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1698);
                                    let v1702: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1620))),
                                                                               string(">move || { v1700 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1704:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1700 }</td> };
                                    let v1706: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1704);
                                    let v1708: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1711:
                                            Vec<(std::string::String,
                                                 Option<std::string::String>)> =
                                        v1286.l7.clone().to_vec();
                                    let v1713: bool =
                                        true; let _vec_map : Vec<_> = v1711.into_iter().map(|x| { //;
                                    let patternInput_2:
                                            (std::string::String,
                                             Option<std::string::String>) = x;
                                    let v1717 =
                                        Dice_ui::method258(patternInput_2.0.clone());
                                    let v1718 =
                                        Dice_ui::method259(patternInput_2.1.clone());
                                    let v1721 =
                                        {
                                            let clo_56 =
                                                Func0::new(move ||
                                                               Dice_ui::closure295((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_56 =
                                                               clo_56.clone();
                                                           move |arg_56: ()|
                                                               clo_56()
                                                       })
                                        };
                                    let v1724 =
                                        {
                                            let clo_57 =
                                                Func0::new(move ||
                                                               Dice_ui::closure296((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_57 =
                                                               clo_57.clone();
                                                           move |arg_57: ()|
                                                               clo_57()
                                                       })
                                        };
                                    let v1727 =
                                        {
                                            let clo_58 =
                                                Func0::new(move ||
                                                               Dice_ui::closure297((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_58 =
                                                               clo_58.clone();
                                                           move |arg_58: ()|
                                                               clo_58()
                                                       })
                                        };
                                    let v1728: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1727(()) + \" \" + &v1724(()) + \" \" + &v1721(())");
                                    let v1729: string =
                                        append((append((append(string(" "),
                                                               (v1728))),
                                                       string(""))),
                                               string(""));
                                    let v1732 =
                                        {
                                            let clo_59 =
                                                Func0::new(move ||
                                                               Dice_ui::closure298((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_59 =
                                                               clo_59.clone();
                                                           move |arg_59: ()|
                                                               clo_59()
                                                       })
                                        };
                                    let v1734: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1735: leptos::prelude::Fragment =
                                        v1717();
                                    let v1737: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1735);
                                    let v1740: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1734))),
                                                                               string(">move || { v1737 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1742:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1737 }</dt> };
                                    let v1744: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1742);
                                    let v1746: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1732(())");
                                    let v1747: leptos::prelude::Fragment =
                                        v1718();
                                    let v1749: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1747);
                                    let v1752: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1746))),
                                                                               string(">move || { v1749 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1754:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1732(())>move || { v1749 }</dd> };
                                    let v1756: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1754);
                                    let v1764: string =
                                        string("vec![v1744, v1756]");
                                    let v1765: Vec<leptos::prelude::AnyView> =
                                        vec![v1744, v1756];
                                    let v1767: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1765);
                                    let v1769: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1767);
                                    let v1772: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1729))),
                                                                               string(">move || { v1769 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1774:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1727(()) + " " + &v1724(()) + " " + &v1721(())>move || { v1769 }</dl> };
                                    let v1776: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1774);
                                    let v1778: bool =
                                        true; v1776 }).collect::<Vec<_>>();
                                    let v1780: Vec<leptos::prelude::AnyView> =
                                        _vec_map;
                                    let v1782: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1780);
                                    let v1786: string = string("vec![v1782]");
                                    let v1787: Vec<leptos::prelude::AnyView> =
                                        vec![v1782];
                                    let v1789: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1787);
                                    let v1791: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1789);
                                    let v1793: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1708))),
                                                                               string(">move || { v1791 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1795:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1791 }</td> };
                                    let v1797: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1795);
                                    let v1799: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1803: string = toString(v1286.l8);
                                    let v1814: &str = &*v1803;
                                    let v1847: std::string::String =
                                        String::from(v1814);
                                    let v1873: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1847));
                                    let v1877: string = string("vec![v1873]");
                                    let v1878: Vec<leptos::prelude::AnyView> =
                                        vec![v1873];
                                    let v1880: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1878);
                                    let v1882: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1880);
                                    let v1884: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1799))),
                                                                               string(">move || { v1882 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1886:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1882 }</td> };
                                    let v1888: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1886);
                                    let v1890: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1894: string = toString(v1286.l10);
                                    let v1905: &str = &*v1894;
                                    let v1938: std::string::String =
                                        String::from(v1905);
                                    let v1964: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1938));
                                    let v1968: string = string("vec![v1964]");
                                    let v1969: Vec<leptos::prelude::AnyView> =
                                        vec![v1964];
                                    let v1971: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1969);
                                    let v1973: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1971);
                                    let v1975: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1890))),
                                                                               string(">move || { v1973 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1977:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1973 }</td> };
                                    let v1979: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1977);
                                    let v1981: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1985: string = toString(v1286.l6);
                                    let v1996: &str = &*v1985;
                                    let v2029: std::string::String =
                                        String::from(v1996);
                                    let v2055: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2029));
                                    let v2059: string = string("vec![v2055]");
                                    let v2060: Vec<leptos::prelude::AnyView> =
                                        vec![v2055];
                                    let v2062: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2060);
                                    let v2064: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2062);
                                    let v2066: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1981))),
                                                                               string(">move || { v2064 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2068:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2064 }</td> };
                                    let v2070: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2068);
                                    let v2072: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
                                    let v2285: leptos::prelude::Fragment =
                                        if (get_Count(v1286.l11.clone()) as
                                                u64) == 0_u64 {
                                            let v2084: &str = &*string("");
                                            let v2117: std::string::String =
                                                String::from(v2084);
                                            let v2143:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2117));
                                            let v2147: string =
                                                string("vec![v2143]");
                                            let v2148:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2143];
                                            leptos::prelude::Fragment::new(v2148)
                                        } else {
                                            let v2153:
                                                    Vec<std::string::String> =
                                                v1286.l11.clone().to_vec();
                                            let v2156: bool =
                                                true; let _func1_from_v2154 = Func1::from(move |value| { //;
                                            let v2158: std::string::String =
                                                value;
                                            let v2160: string =
                                                fable_library_rust::String_::fromString(v2158);
                                            let v2163: bool = true; v2160 /*;
                                            let v2165: bool = */ }); //;
                                            let v2167:
                                                    Func1<std::string::String, string> =
                                                _func1_from_v2154;
                                            let v2170: Vec<string> =
                                                v2153.into_iter().map(|x| Func1::new({
                                                                                         let v2167
                                                                                             =
                                                                                             v2167.clone();
                                                                                         move
                                                                                             |v:
                                                                                                  std::string::String|
                                                                                             Dice_ui::closure332(v2167.clone(),
                                                                                                                 v)
                                                                                     })(x.clone())).collect::<Vec<_>>();
                                            let v2174:
                                                    LrcPtr<dyn IEnumerable_1<string>> =
                                                ofArray(fable_library_rust::NativeArray_::array_from(v2170.clone()));
                                            let v2188: string =
                                                replace(join(Dice_ui::method279(),
                                                             toArray(v2174)),
                                                        string("\\n"),
                                                        string("\n"));
                                            let v2191 =
                                                {
                                                    let clo_60 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure336((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_60
                                                                       =
                                                                       clo_60.clone();
                                                                   move
                                                                       |arg_60:
                                                                            ()|
                                                                       clo_60()
                                                               })
                                                };
                                            let v2192: string =
                                                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v2191(())");
                                            let v2193: string =
                                                append((append((append(string(" "),
                                                                       (v2192))),
                                                               string(""))),
                                                       string(""));
                                            let v2202: &str = &*v2188;
                                            let v2235: std::string::String =
                                                String::from(v2202);
                                            let v2261:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2235));
                                            let v2265: string =
                                                string("vec![v2261]");
                                            let v2266:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2261];
                                            let v2268:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v2266);
                                            let v2270:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v2268);
                                            let v2273: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<pre "),
                                                                                               (v2193))),
                                                                                       string(">move || { v2270 }</"))),
                                                                               string("pre"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v2275:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> =
                                                leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v2191(())>move || { v2270 }</pre> };
                                            let v2277:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v2275);
                                            let v2281: string =
                                                string("vec![v2277]");
                                            let v2282:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2277];
                                            leptos::prelude::Fragment::new(v2282)
                                        };
                                    let v2287: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2285);
                                    let v2289: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2072))),
                                                                               string(">move || { v2287 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2291:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">move || { v2287 }</td> };
                                    let v2293: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2291);
                                    let v2295: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2299: string = ofBoolean(v1286.l9);
                                    let v2310: &str = &*v2299;
                                    let v2343: std::string::String =
                                        String::from(v2310);
                                    let v2369: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2343));
                                    let v2373: string = string("vec![v2369]");
                                    let v2374: Vec<leptos::prelude::AnyView> =
                                        vec![v2369];
                                    let v2376: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2374);
                                    let v2378: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2376);
                                    let v2380: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2295))),
                                                                               string(">move || { v2378 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2382:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2378 }</td> };
                                    let v2384: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2382);
                                    let v2386: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2389: string =
                                        fable_library_rust::String_::fromString(v1286.l3.clone());
                                    let v2398: &str = &*v2389;
                                    let v2431: std::string::String =
                                        String::from(v2398);
                                    let v2457: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2431));
                                    let v2461: string = string("vec![v2457]");
                                    let v2462: Vec<leptos::prelude::AnyView> =
                                        vec![v2457];
                                    let v2464: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2462);
                                    let v2466: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2464);
                                    let v2468: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2386))),
                                                                               string(">move || { v2466 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2470:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2466 }</td> };
                                    let v2472: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2470);
                                    let v2474: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2477: string =
                                        fable_library_rust::String_::fromString(v1286.l4.clone());
                                    let v2486: &str = &*v2477;
                                    let v2519: std::string::String =
                                        String::from(v2486);
                                    let v2545: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2519));
                                    let v2549: string = string("vec![v2545]");
                                    let v2550: Vec<leptos::prelude::AnyView> =
                                        vec![v2545];
                                    let v2552: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2550);
                                    let v2554: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2552);
                                    let v2556: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2474))),
                                                                               string(">move || { v2554 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2558:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2554 }</td> };
                                    let v2560: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2558);
                                    let v2562: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2565: string =
                                        fable_library_rust::String_::fromString(v1286.l0.clone());
                                    let v2574: &str = &*v2565;
                                    let v2607: std::string::String =
                                        String::from(v2574);
                                    let v2633: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2607));
                                    let v2637: string = string("vec![v2633]");
                                    let v2638: Vec<leptos::prelude::AnyView> =
                                        vec![v2633];
                                    let v2640: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2638);
                                    let v2642: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2640);
                                    let v2644: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2562))),
                                                                               string(">move || { v2642 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2646:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2642 }</td> };
                                    let v2648: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2646);
                                    let v2688: string =
                                        string("vec![v1378, v1530, v1618, v1706, v1797, v1888, v1979, v2070, v2293, v2384, v2472, v2560, v2648]");
                                    let v2689: Vec<leptos::prelude::AnyView> =
                                        vec![v1378, v1530, v1618, v1706, v1797, v1888, v1979, v2070, v2293, v2384, v2472, v2560, v2648];
                                    let v2691: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2689);
                                    let v2693: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2691);
                                    let v2696: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<tr "),
                                                                                       (v1292))),
                                                                               string(">move || { v2693 }</"))),
                                                                       string("tr"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2698:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                        leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v2693 }</tr> };
                                    let v2700: bool =
                                        true; v2698 }).collect::<Vec<_>>();
                                let v2702: Vec<
                                    leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                    >,
                                > = _vec_map;
                                let v2704: bool = true;
                                let _vec_map: Vec<_> = v2702
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v2706: leptos::prelude::View<
                                            leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                        > = x;
                                        let v2708: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(v2706);
                                        let v2710: bool = true;
                                        v2708
                                    })
                                    .collect::<Vec<_>>();
                                let v2712: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v2714: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2712);
                                let v2718: string = string("vec![v2714]");
                                let v2719: Vec<leptos::prelude::AnyView> = vec![v2714];
                                let v2721: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2719);
                                let v2724: bool = true;
                                leptos::logging::log!(
                                    "{}",
                                    string("transaction.tr_head_render (1)")
                                );
                                let v2726: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v2736: &str = &*string("Account");
                                let v2769: std::string::String = String::from(v2736);
                                let v2795: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2769),
                                    );
                                let v2799: string = string("vec![v2795]");
                                let v2800: Vec<leptos::prelude::AnyView> = vec![v2795];
                                let v2802: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2800);
                                let v2804: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2802);
                                let v2807: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2726))),
                                                    string(">move || { v2804 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2809: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2804 }</th> };
                                let v2811: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2809);
                                let v2813: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v2823: &str = &*string("Block Timestamp");
                                let v2856: std::string::String = String::from(v2823);
                                let v2882: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2856),
                                    );
                                let v2886: string = string("vec![v2882]");
                                let v2887: Vec<leptos::prelude::AnyView> = vec![v2882];
                                let v2889: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2887);
                                let v2891: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2889);
                                let v2893: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2813))),
                                                    string(">move || { v2891 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2895: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2891 }</th> };
                                let v2897: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2895);
                                let v2899: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v2909: &str = &*string("Predecessor");
                                let v2942: std::string::String = String::from(v2909);
                                let v2968: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2942),
                                    );
                                let v2972: string = string("vec![v2968]");
                                let v2973: Vec<leptos::prelude::AnyView> = vec![v2968];
                                let v2975: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2973);
                                let v2977: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2975);
                                let v2979: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2899))),
                                                    string(">move || { v2977 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2981: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2977 }</th> };
                                let v2983: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2981);
                                let v2985: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v2995: &str = &*string("Receiver");
                                let v3028: std::string::String = String::from(v2995);
                                let v3054: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3028),
                                    );
                                let v3058: string = string("vec![v3054]");
                                let v3059: Vec<leptos::prelude::AnyView> = vec![v3054];
                                let v3061: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3059);
                                let v3063: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3061);
                                let v3065: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2985))),
                                                    string(">move || { v3063 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3067: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3063 }</th> };
                                let v3069: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3067);
                                let v3071: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3081: &str = &*string("Action");
                                let v3114: std::string::String = String::from(v3081);
                                let v3140: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3114),
                                    );
                                let v3144: string = string("vec![v3140]");
                                let v3145: Vec<leptos::prelude::AnyView> = vec![v3140];
                                let v3147: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3145);
                                let v3149: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3147);
                                let v3151: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3071))),
                                                    string(">move || { v3149 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3153: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3149 }</th> };
                                let v3155: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3153);
                                let v3157: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3167: &str = &*string("Deposit");
                                let v3200: std::string::String = String::from(v3167);
                                let v3226: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3200),
                                    );
                                let v3230: string = string("vec![v3226]");
                                let v3231: Vec<leptos::prelude::AnyView> = vec![v3226];
                                let v3233: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3231);
                                let v3235: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3233);
                                let v3237: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3157))),
                                                    string(">move || { v3235 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3239: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3235 }</th> };
                                let v3241: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3239);
                                let v3243: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3253: &str = &*string("Fee");
                                let v3286: std::string::String = String::from(v3253);
                                let v3312: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3286),
                                    );
                                let v3316: string = string("vec![v3312]");
                                let v3317: Vec<leptos::prelude::AnyView> = vec![v3312];
                                let v3319: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3317);
                                let v3321: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3319);
                                let v3323: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3243))),
                                                    string(">move || { v3321 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3325: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3321 }</th> };
                                let v3327: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3325);
                                let v3329: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3339: &str = &*string("Block Height");
                                let v3372: std::string::String = String::from(v3339);
                                let v3398: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3372),
                                    );
                                let v3402: string = string("vec![v3398]");
                                let v3403: Vec<leptos::prelude::AnyView> = vec![v3398];
                                let v3405: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3403);
                                let v3407: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3405);
                                let v3409: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3329))),
                                                    string(">move || { v3407 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3411: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3407 }</th> };
                                let v3413: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3411);
                                let v3415: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3420: string = if false == (Dice_ui::method280(v371, 0_i32)) {
                                    string("")
                                } else {
                                    string("Logs")
                                };
                                let v3429: &str = &*v3420;
                                let v3462: std::string::String = String::from(v3429);
                                let v3488: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3462),
                                    );
                                let v3492: string = string("vec![v3488]");
                                let v3493: Vec<leptos::prelude::AnyView> = vec![v3488];
                                let v3495: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3493);
                                let v3497: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3495);
                                let v3499: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3415))),
                                                    string(">move || { v3497 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3501: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3497 }</th> };
                                let v3503: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3501);
                                let v3505: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3515: &str = &*string("Outcome Status");
                                let v3548: std::string::String = String::from(v3515);
                                let v3574: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3548),
                                    );
                                let v3578: string = string("vec![v3574]");
                                let v3579: Vec<leptos::prelude::AnyView> = vec![v3574];
                                let v3581: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3579);
                                let v3583: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3581);
                                let v3585: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3505))),
                                                    string(">move || { v3583 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3587: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3583 }</th> };
                                let v3589: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3587);
                                let v3591: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3601: &str = &*string("Hash");
                                let v3634: std::string::String = String::from(v3601);
                                let v3660: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3634),
                                    );
                                let v3664: string = string("vec![v3660]");
                                let v3665: Vec<leptos::prelude::AnyView> = vec![v3660];
                                let v3667: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3665);
                                let v3669: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3667);
                                let v3671: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3591))),
                                                    string(">move || { v3669 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3673: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3669 }</th> };
                                let v3675: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3673);
                                let v3677: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3687: &str = &*string("Block Hash");
                                let v3720: std::string::String = String::from(v3687);
                                let v3746: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3720),
                                    );
                                let v3750: string = string("vec![v3746]");
                                let v3751: Vec<leptos::prelude::AnyView> = vec![v3746];
                                let v3753: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3751);
                                let v3755: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3753);
                                let v3757: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3677))),
                                                    string(">move || { v3755 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3759: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3755 }</th> };
                                let v3761: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3759);
                                let v3763: string = string(
                                    " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
                                );
                                let v3773: &str = &*string("Receipt ID");
                                let v3806: std::string::String = String::from(v3773);
                                let v3832: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3806),
                                    );
                                let v3836: string = string("vec![v3832]");
                                let v3837: Vec<leptos::prelude::AnyView> = vec![v3832];
                                let v3839: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3837);
                                let v3841: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3839);
                                let v3843: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3763))),
                                                    string(">move || { v3841 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3845: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3841 }</th> };
                                let v3847: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3845);
                                let v3887: string = string(
                                    "vec![v2811, v2897, v2983, v3069, v3155, v3241, v3327, v3413, v3503, v3589, v3675, v3761, v3847]",
                                );
                                let v3888: Vec<leptos::prelude::AnyView> = vec![
                                    v2811, v2897, v2983, v3069, v3155, v3241, v3327, v3413, v3503,
                                    v3589, v3675, v3761, v3847,
                                ];
                                let v3890: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3888);
                                let v3892: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3890);
                                let v3894: string = string(
                                    "leptos::prelude::view! { <tr >move || { v3892 }</tr> }",
                                );
                                let v3896: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                > = leptos::prelude::view! { <tr >move || { v3892 }</tr> };
                                let v3898: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3896);
                                let v3902: string = string("vec![v3898]");
                                let v3903: Vec<leptos::prelude::AnyView> = vec![v3898];
                                let v3905: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3903);
                                let v3907: string = string(
                                    " class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"",
                                );
                                let v3909: string =
                                    string(" class=\"ltr:text-left rtl:text-right\"");
                                let v3911: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3905);
                                let v3914: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<thead "), (v3909))),
                                                    string(">move || { v3911 }</"),
                                                )),
                                                string("thead"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3916: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                                > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v3911 }</thead> };
                                let v3918: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3916);
                                let v3920: string = string(
                                    " class=\"divide-y divide-gray-200 dark:divide-gray-700\"",
                                );
                                let v3922: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2721);
                                let v3925: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<tbody "), (v3920))),
                                                    string(">move || { v3922 }</"),
                                                )),
                                                string("tbody"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3927: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                                > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v3922 }</tbody> };
                                let v3929: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3927);
                                let v3936: string = string("vec![v3918, v3929]");
                                let v3937: Vec<leptos::prelude::AnyView> = vec![v3918, v3929];
                                let v3939: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3937);
                                let v3941: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3939);
                                let v3944: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<table "), (v3907))),
                                                    string(">move || { v3941 }</"),
                                                )),
                                                string("table"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3946: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v3941 }</table> };
                                leptos::prelude::IntoAny::into_any(v3946)
                            }
                        } else {
                            let v3952: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v3954: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v3957 = {
                                let clo_61 = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo_61 = clo_61.clone();
                                    move |arg_61: ()| clo_61()
                                })
                            };
                            let v3975: string = string(
                                " class=move || \" \".to_owned() + &v3957(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"",
                            );
                            let v3987: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                            );
                            let v3999: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v4000: string = string("vec![]");
                            let v4001: Vec<leptos::prelude::AnyView> = vec![];
                            let v4003: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4001);
                            let v4005: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4003);
                            let v4008: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3999))),
                                                string(">move || { v4005 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4010: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4005 }</animate> };
                            let v4012: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4010);
                            let v4024: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                            );
                            let v4025: string = string("vec![]");
                            let v4026: Vec<leptos::prelude::AnyView> = vec![];
                            let v4028: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4026);
                            let v4030: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4028);
                            let v4032: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4024))),
                                                string(">move || { v4030 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4034: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v4030 }</animate> };
                            let v4036: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4034);
                            let v4048: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v4049: string = string("vec![]");
                            let v4050: Vec<leptos::prelude::AnyView> = vec![];
                            let v4052: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4050);
                            let v4054: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4052);
                            let v4056: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4048))),
                                                string(">move || { v4054 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4058: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4054 }</animate> };
                            let v4060: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4058);
                            let v4071: string = string("vec![v4012, v4036, v4060]");
                            let v4072: Vec<leptos::prelude::AnyView> = vec![v4012, v4036, v4060];
                            let v4074: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4072);
                            let v4076: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4074);
                            let v4079: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3987))),
                                                string(">move || { v4076 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4081: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v4076 }</rect> };
                            let v4093: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                            );
                            let v4105: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v4106: string = string("vec![]");
                            let v4107: Vec<leptos::prelude::AnyView> = vec![];
                            let v4109: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4107);
                            let v4111: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4109);
                            let v4113: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4105))),
                                                string(">move || { v4111 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4115: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4111 }</animate> };
                            let v4117: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4115);
                            let v4129: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v4130: string = string("vec![]");
                            let v4131: Vec<leptos::prelude::AnyView> = vec![];
                            let v4133: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4131);
                            let v4135: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4133);
                            let v4137: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4129))),
                                                string(">move || { v4135 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4139: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v4135 }</animate> };
                            let v4141: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4139);
                            let v4153: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v4154: string = string("vec![]");
                            let v4155: Vec<leptos::prelude::AnyView> = vec![];
                            let v4157: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4155);
                            let v4159: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4157);
                            let v4161: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4153))),
                                                string(">move || { v4159 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4163: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4159 }</animate> };
                            let v4165: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4163);
                            let v4175: string = string("vec![v4117, v4141, v4165]");
                            let v4176: Vec<leptos::prelude::AnyView> = vec![v4117, v4141, v4165];
                            let v4178: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4176);
                            let v4180: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4178);
                            let v4182: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4093))),
                                                string(">move || { v4180 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4184: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v4180 }</rect> };
                            let v4196: string = string(
                                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                            );
                            let v4208: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"",
                            );
                            let v4209: string = string("vec![]");
                            let v4210: Vec<leptos::prelude::AnyView> = vec![];
                            let v4212: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4210);
                            let v4214: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4212);
                            let v4216: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4208))),
                                                string(">move || { v4214 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4218: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4214 }</animate> };
                            let v4220: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4218);
                            let v4232: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"",
                            );
                            let v4233: string = string("vec![]");
                            let v4234: Vec<leptos::prelude::AnyView> = vec![];
                            let v4236: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4234);
                            let v4238: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4236);
                            let v4240: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4232))),
                                                string(">move || { v4238 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4242: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v4238 }</animate> };
                            let v4244: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4242);
                            let v4256: string = string(
                                " repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"",
                            );
                            let v4257: string = string("vec![]");
                            let v4258: Vec<leptos::prelude::AnyView> = vec![];
                            let v4260: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4258);
                            let v4262: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4260);
                            let v4264: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4256))),
                                                string(">move || { v4262 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4266: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4262 }</animate> };
                            let v4268: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4266);
                            let v4278: string = string("vec![v4220, v4244, v4268]");
                            let v4279: Vec<leptos::prelude::AnyView> = vec![v4220, v4244, v4268];
                            let v4281: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4279);
                            let v4283: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4281);
                            let v4285: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4196))),
                                                string(">move || { v4283 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4287: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v4283 }</rect> };
                            let v4289: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4287);
                            let v4291: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4184);
                            let v4293: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4081);
                            let v4303: string = string("vec![v4293, v4291, v4289]");
                            let v4304: Vec<leptos::prelude::AnyView> = vec![v4293, v4291, v4289];
                            let v4306: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4304);
                            let v4308: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4306);
                            let v4311: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v3975))),
                                                string(">move || { v4308 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4313: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3957(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v4308 }</svg> };
                            let v4315: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4313);
                            let v4325: &str = &*string("Loading...");
                            let v4358: std::string::String = String::from(v4325);
                            let v4384: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v4358),
                                );
                            let v4391: string = string("vec![v4315, v4384]");
                            let v4392: Vec<leptos::prelude::AnyView> = vec![v4315, v4384];
                            let v4394: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4392);
                            let v4396: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4394);
                            let v4399: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3954))),
                                                string(">move || { v4396 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4401: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v4396 }</div> };
                            let v4403: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4401);
                            let v4407: string = string("vec![v4403]");
                            let v4408: Vec<leptos::prelude::AnyView> = vec![v4403];
                            let v4410: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4408);
                            let v4412: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4410);
                            let v4414: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3952))),
                                                string(">move || { v4412 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4416: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v4412 }</div> };
                            leptos::prelude::IntoAny::into_any(v4416)
                        }
                    }
                    Dice_ui::US46::US46_1(v369_1_0) => {
                        let v4422: string =
                            fable_library_rust::String_::fromString(v369_1_0.clone());
                        let v4425: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v4427: string = string(" class=\"[height:17px]\"");
                        let v4441: string = string(
                            " class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v4447: string = string(
                            " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                        );
                        let v4448: string = string("vec![]");
                        let v4449: Vec<leptos::prelude::AnyView> = vec![];
                        let v4451: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4449);
                        let v4453: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4451);
                        let v4456: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4447))),
                                            string(">move || { v4453 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4458: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v4453 }</path> };
                        let v4460: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4458);
                        let v4464: string = string("vec![v4460]");
                        let v4465: Vec<leptos::prelude::AnyView> = vec![v4460];
                        let v4467: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4465);
                        let v4469: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4467);
                        let v4472: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4441))),
                                            string(">move || { v4469 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4474: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4469 }</svg> };
                        let v4476: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4474);
                        let v4480: string = string("vec![v4476]");
                        let v4481: Vec<leptos::prelude::AnyView> = vec![v4476];
                        let v4483: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4481);
                        let v4485: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4483);
                        let v4488: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4427))),
                                            string(">move || { v4485 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4490: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v4485 }</span> };
                        let v4492: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4490);
                        let v4494: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v4503: &str = &*v4422;
                        let v4536: std::string::String = String::from(v4503);
                        let v4562: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v4536),
                        );
                        let v4566: string = string("vec![v4562]");
                        let v4567: Vec<leptos::prelude::AnyView> = vec![v4562];
                        let v4569: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4567);
                        let v4571: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4569);
                        let v4574: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v4494))),
                                            string(">move || { v4571 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4576: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v4571 }</pre> };
                        let v4578: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4576);
                        let v4586: string = string("vec![v4492, v4578]");
                        let v4587: Vec<leptos::prelude::AnyView> = vec![v4492, v4578];
                        let v4589: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4587);
                        let v4591: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4589);
                        let v4594: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4425))),
                                            string(">move || { v4591 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4596: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v4591 }</div> };
                        leptos::prelude::IntoAny::into_any(v4596)
                    }
                }
            };
            let v4610: string = string("vec![v144, v4601]");
            let v4611: Vec<leptos::prelude::AnyView> = vec![v144, v4601];
            leptos::prelude::Fragment::new(v4611)
        }
        pub fn closure337(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure338(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure339(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method282() -> Func0<string> {
            Func0::new(move || Dice_ui::closure339((), ()))
        }
        pub fn closure341(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Transactions");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method283() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure341((), ()))
        }
        pub fn closure343(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure342(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v13: std::string::String = format!("{:#?}", v2);
            let v15: string = fable_library_rust::String_::fromString(v13);
            let v44 = {
                let clo = Func0::new(move || Dice_ui::closure343((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v45: string = string(
                "class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v44(())",
            );
            let v47: string = append(
                (append((append(string(" "), (v45))), string(""))),
                string(""),
            );
            let v56: &str = &*v15;
            let v89: std::string::String = String::from(v56);
            let v115: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v89));
            let v119: string = string("vec![v115]");
            let v120: Vec<leptos::prelude::AnyView> = vec![v115];
            let v122: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v120);
            let v124: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v122);
            let v127: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v47))),
                                string(">move || { v124 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v129: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v44(())>move || { v124 }</pre> };
            let v131: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v129);
            let v135: string = string("vec![v131]");
            let v136: Vec<leptos::prelude::AnyView> = vec![v131];
            leptos::prelude::Fragment::new(v136)
        }
        pub fn method284(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure342(v0_1.clone(), ())
            })
        }
        pub fn closure340(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method283();
            let v2 = Dice_ui::method284(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string = string(
                "class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())",
            );
            let v14: string = append(
                (append((append(string(" "), (v12))), string(""))),
                string(""),
            );
            let v17 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v19: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v20: leptos::prelude::Fragment = v1();
            let v22: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v20);
            let v25: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v19))),
                                string(">move || { v22 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v22 }</dt> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v31: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())",
            );
            let v32: leptos::prelude::Fragment = v2();
            let v34: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v32);
            let v37: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v31))),
                                string(">move || { v34 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v39: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v17(())>move || { v34 }</dd> };
            let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
            let v49: string = string("vec![v29, v41]");
            let v50: Vec<leptos::prelude::AnyView> = vec![v29, v41];
            let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
            let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
            let v57: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v14))),
                                string(">move || { v54 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v59: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v54 }</dl> };
            let v61: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v59);
            let v65: string = string("vec![v61]");
            let v66: Vec<leptos::prelude::AnyView> = vec![v61];
            leptos::prelude::Fragment::new(v66)
        }
        pub fn closure344(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method285(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure344(v0_1.clone(), ())
            })
        }
        pub fn closure345(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method286(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure345(v0_1.clone(), ())
            })
        }
        pub fn closure346(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method287(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure346(v0_1.clone(), ())
            })
        }
        pub fn closure347(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method288(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure347(v0_1.clone(), ())
            })
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure349(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("settings"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure350(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure351(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string = string(
                    "r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#",
                );
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure352(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("transactions"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure353(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure354(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string = string(
                    "r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#",
                );
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure355(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("lists"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure356(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure357(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string = string(
                    "r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#",
                );
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure358(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("dice"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure359(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure360(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v7: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v10: string = string(
                    "r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#",
                );
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure5(
            unitVar: (),
            v0_1: i32,
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> {
            let v1: string = append(
                (append(string("home.render () / router: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v13: bool = true;
            let _func0_from_v11 = Func0::from(move || {
                //;
                let v15: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v17: bool = */
                    async move {
                        /*;
                        let v19: bool = */
                        ();
                        let v22: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v25: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v27: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v29: bool = */
                            async {
                                /*;
                                let v31: bool = */
                                ();
                                let v32: string = string(
                                    "Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())",
                                );
                                let v33: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<rexie::Rexie, rexie::Error>,
                                            >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v35: Result<rexie::Rexie, rexie::Error> = v33.await;
                                let v36 = Dice_ui::method6();
                                let v42: Result<rexie::Rexie, std::string::String> =
                                    v35.map_err(|x| v36(x));
                                let v54: string = string("}");
                                let v61: bool = true;
                                let _fix_closure_v56 = v42;
                                let v66: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v56 "), (v54))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v67: bool = true;
                                _fix_closure_v56
                            },
                        ); // rust.fix_closure';
                        let v69 = __future_init;
                        let v71: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                            >,
                        > = v69;
                        let v73: Result<rexie::Rexie, std::string::String> = v71.await;
                        let v79: rexie::Rexie = v73.unwrap();
                        let v90: rexie::Rexie = (Dice_ui::method7())(v79);
                        let v92: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v90);
                        let v99: string = Dice_ui::method8(
                            200_i64,
                            append(
                                (append(
                                    string(
                                        "state_core.use_database (3) / database new_local_resource / result: ",
                                    ),
                                    sprintf!("{:?}", v92.clone()),
                                )),
                                string(""),
                            ),
                        );
                        let v101: bool = true;
                        leptos::logging::log!("{}", v99);
                        let v102: string = string("}");
                        let v109: bool = true;
                        let _fix_closure_v104 = v92;
                        let v114: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v104 "), (v102))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v115: bool = true;
                        _fix_closure_v104
                    },
                ); // rust.fix_closure';
                let v117 = __future_init;
                let v119: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v117;
                let v121: bool = true;
                v119 /*;
                let v123: bool = */
            }); //;
            let v125: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v11;
            let v127: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v125().await });
            let v130: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v133: bool = true;
            let _func0_from_v131 = Func0::from(move || {
                //;
                let v135: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v127.clone()), |x| {
                        x.clone()
                    });
                let v137: bool = true;
                let _optionm_map_ = v135.map(|x| {
                    //;
                    let v139: std::sync::Arc<rexie::Rexie> = x;
                    let v142: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v139);
                    let v144: bool = true;
                    v142
                });
                let v146: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v148: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v150: bool = */
                    async move {
                        /*;
                        let v152: bool = */
                        ();
                        let v157: string = append(
                            (append(
                                string(
                                    "state_core.use_core_database (2) / core_state_heap new_local_resource / database: ",
                                ),
                                sprintf!("{:?}", v146.clone()),
                            )),
                            string(""),
                        );
                        let v159: bool = true;
                        leptos::logging::log!("{}", v157);
                        let v161: bool = true;
                        let _optionm_map_ = v146.map(|x| {
                            //;
                            let v163: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v165: std::sync::Arc<rexie::Rexie> = v163.0;
                            let v167: bool = true;
                            v165
                        });
                        let v169: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v194: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v169));
                        let v645: Dice_ui::US3 = match &v194 {
                            Dice_ui::US2::US2_0(v194_0_0) => {
                                let v200: string =
                                    string("state_core.get_data () / id: core-state-heap");
                                let v202: bool = true;
                                leptos::logging::log!("{}", v200);
                                let v204: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v206: bool = */
                                    async {
                                        /*;
                                        let v208: bool = */
                                        ();
                                        let v210: Array<string> = new_array(&[string("store")]);
                                        let v212: Vec<string> = v210.to_vec();
                                        let v215: bool = true;
                                        let _func1_from_v213 = Func1::from(move |value| {
                                            //;
                                            let v217: string = value;
                                            let v226: &str = &*v217;
                                            let v259: std::string::String = String::from(v226);
                                            let v286: bool = true;
                                            v259 /*;
                                            let v288: bool = */
                                        }); //;
                                        let v290: Func1<string, std::string::String> =
                                            _func1_from_v213;
                                        let v293: Vec<std::string::String> = v212
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v290 = v290.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v290.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v294: std::sync::Arc<rexie::Rexie> = Dice_ui::method11(
                                            match &v194 {
                                                Dice_ui::US2::US2_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v296: Result<rexie::Transaction, rexie::Error> = v294
                                            .transaction(&v293, rexie::TransactionMode::ReadOnly);
                                        let v297 = Dice_ui::method12();
                                        let v303: Result<rexie::Transaction, std::string::String> =
                                            v296.map_err(|x| v297(x));
                                        let v314: rexie::Transaction = v303?;
                                        let v315: string = Dice_ui::method13();
                                        let v324: &str = &*v315;
                                        let v350: Result<rexie::Store, rexie::Error> =
                                            v314.store(v324);
                                        let v351 = Dice_ui::method14();
                                        let v357: Result<rexie::Store, std::string::String> =
                                            v350.map_err(|x| v351(x));
                                        let v368: rexie::Store = v357?;
                                        let v369: string = Dice_ui::method15();
                                        let v378: &str = &*v369;
                                        let v404: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v378);
                                        let v406: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                        Output = Result<
                                                            Option<wasm_bindgen::JsValue>,
                                                            rexie::Error,
                                                        >,
                                                    >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v368, v404));
                                        let v408: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v406.await;
                                        let v409 = Dice_ui::method16();
                                        let v415: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v408.map_err(|x| v409(x));
                                        let v426: Option<wasm_bindgen::JsValue> = v415?;
                                        let v451: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v426),
                                        );
                                        let v565: Dice_ui::US3 = match &v451 {
                                            Dice_ui::US4::US4_0(v451_0_0) => {
                                                let v456: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v451 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v458: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v456);
                                                let v459 = Dice_ui::method19();
                                                let v465: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v458.map_err(|x| v459(x));
                                                let v476: Option<serde_json::Value> = v465?;
                                                let v501: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v476),
                                                );
                                                match &v501 {
                                                    Dice_ui::US5::US5_0(v501_0_0) => {
                                                        let v506: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v501 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v508: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v506);
                                                        let v509 = Dice_ui::method22();
                                                        let v515: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v508.map_err(|x| v509(x));
                                                        let v526: Vec<u8> = v515?;
                                                        let v528: Array<u8> =
                                                fable_library_rust::NativeArray_::array_from(v526.clone());
                                                        let v530: string = append(
                                                            (append(
                                                                string(
                                                                    "state_core.get_data () / data_len: ",
                                                                ),
                                                                (toString(get_Count(v528.clone()))),
                                                            )),
                                                            string(""),
                                                        );
                                                        let v532: bool = true;
                                                        leptos::logging::log!("{}", v530);
                                                        let v534: Vec<u8> = v528.to_vec();
                                                        let v536: &[u8] = v534.as_slice();
                                                        let v538: bool = true;
                                                        let mut v536 = v536;
                                                        let v540: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v536,
                                                        );
                                                        let v541 = Dice_ui::method23();
                                                        let v547: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v540.map_err(|x| v541(x));
                                                        Dice_ui::US3::US3_0(v547?)
                                                    }
                                                    _ => Dice_ui::US3::US3_1,
                                                }
                                            }
                                            _ => Dice_ui::US3::US3_1,
                                        };
                                        let v576: Option<Option<LrcPtr<Dice_ui::Heap3>>> =
                                            match &v565 {
                                                Dice_ui::US3::US3_0(v565_0_0) => Some(
                                                    match &v565 {
                                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            };
                                        let v581: string = string("}");
                                        let v588: bool = true;
                                        let _fix_closure_v583 =
                                            Ok::<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >(v576);
                                        let v593: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v583 "),
                                                        (v581),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v594: bool = true;
                                        _fix_closure_v583
                                    },
                                ); // rust.fix_closure';
                                let v596 = __future_init;
                                let v598: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                    >,
                                > = v596;
                                let v600: Result<
                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                    std::string::String,
                                > = v598.await;
                                let v601 = Dice_ui::method24();
                                let v602 = Dice_ui::method25();
                                let v604: Dice_ui::US6 = match &v600 {
                                    Err(v600_1_0) => v602(v600_1_0.clone()),
                                    Ok(v600_0_0) => v601(v600_0_0.clone()),
                                };
                                match &v604 {
                                    Dice_ui::US6::US6_0(v604_0_0) => defaultValue(
                                        Dice_ui::US3::US3_1,
                                        map(Dice_ui::method26(), v604_0_0.clone()),
                                    ),
                                    Dice_ui::US6::US6_1(v604_1_0) => {
                                        let v637: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_core_database (3) / error: ",
                                                ),
                                                (toString(v604_1_0.clone())),
                                            )),
                                            string(""),
                                        );
                                        let v639: bool = true;
                                        leptos::logging::log!("{}", v637);
                                        Dice_ui::US3::US3_1
                                    }
                                }
                            }
                            _ => Dice_ui::US3::US3_1,
                        };
                        let v678: Dice_ui::US7 = match &v645 {
                            Dice_ui::US3::US3_0(v645_0_0) => Dice_ui::US7::US7_0(defaultValue(
                                Dice_ui::US8::US8_1,
                                map(
                                    Dice_ui::method27(),
                                    match &v645 {
                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                            )),
                            _ => Dice_ui::US7::US7_1,
                        };
                        let v685: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v678_0_0) = &v678 {
                            let v679: Dice_ui::US8 = v678_0_0.clone();
                            if let Dice_ui::US8::US8_0(v679_0_0) = &v679 {
                                Dice_ui::US8::US8_0(v679_0_0.clone())
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        } else {
                            Dice_ui::US8::US8_1
                        };
                        let v686: string = string("}");
                        let v693: bool = true;
                        let _fix_closure_v688 = v685;
                        let v698: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v688 "), (v686))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v699: bool = true;
                        _fix_closure_v688
                    },
                ); // rust.fix_closure';
                let v701 = __future_init;
                let v703: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>> = v701;
                let v705: bool = true;
                v703 /*;
                let v707: bool = */
            }); //;
            let v709: Func0<std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>>> =
                _func0_from_v131;
            let v711: leptos::prelude::ArcLocalResource<Dice_ui::US8> =
                leptos::prelude::ArcLocalResource::new(|| async move { v709().await });
            let v714: bool = true;
            let _func0_from_v712 = Func0::from(move || {
                //;
                let v717: bool = true;
                leptos::logging::log!(
                    "{}",
                    string("state_core.use_core_database (4) / effect core_state_heap / ##1")
                );
                let v719: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method29(Dice_ui::method28());
                let v720 = Dice_ui::method30();
                let v721 = Dice_ui::method31();
                let v723: Dice_ui::US9 = match &v719 {
                    Err(v719_1_0) => v721(v719_1_0.clone()),
                    Ok(v719_0_0) => v720(v719_0_0.clone()),
                };
                let v759: Dice_ui::US10 = match &v723 {
                    Dice_ui::US9::US9_0(v723_0_0) => Dice_ui::US10::US10_0(defaultValue(
                        Dice_ui::US11::US11_1,
                        map(Dice_ui::method32(), v723_0_0.clone()),
                    )),
                    Dice_ui::US9::US9_1(v723_1_0) => Dice_ui::US10::US10_1(v723_1_0.clone()),
                };
                let v1386: bool = if let Dice_ui::US10::US10_0(v759_0_0) = &v759 {
                    let v760: Dice_ui::US11 = v759_0_0.clone();
                    if let Dice_ui::US11::US11_0(v760_0_0) = &v760 {
                        let v761: web_sys::Storage = v760_0_0.clone();
                        let v763: Option<Dice_ui::US8> =
                            Option::map(leptos::prelude::ArcLocalResource::get(&v711), |x| {
                                x.clone()
                            });
                        let v788: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v763));
                        let v796: string = append(
                            (append(
                                string(
                                    "state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: ",
                                ),
                                sprintf!("{:?}", v788.clone()),
                            )),
                            string(""),
                        );
                        let v798: bool = true;
                        leptos::logging::log!("{}", v796);
                        let v1315: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v788_0_0) = &v788 {
                            let v799: Dice_ui::US8 = v788_0_0.clone();
                            if let Dice_ui::US8::US8_0(v799_0_0) = &v799 {
                                Dice_ui::US8::US8_0(v799_0_0.clone())
                            } else {
                                let v802: web_sys::Storage = Dice_ui::method34(v761.clone());
                                let v803: string = Dice_ui::method35();
                                let v812: &str = &*v803;
                                let v838: Result<
                                    Option<std::string::String>,
                                    wasm_bindgen::JsValue,
                                > = web_sys::Storage::get_item(&v802, v812);
                                let v839 = Dice_ui::method36();
                                let v840 = Dice_ui::method37();
                                let v842: Dice_ui::US12 = match &v838 {
                                    Err(v838_1_0) => v840(v838_1_0.clone()),
                                    Ok(v838_0_0) => v839(v838_0_0.clone()),
                                };
                                let v881: Dice_ui::US13 = match &v842 {
                                    Dice_ui::US12::US12_0(v842_0_0) => {
                                        let v846: Option<std::string::String> =
                                            Dice_ui::method38(v842_0_0.clone());
                                        let v848: Option<std::string::String> =
                                            serde_json::from_value(v846.into()).unwrap();
                                        Dice_ui::US13::US13_0(defaultValue(
                                            Dice_ui::US14::US14_1,
                                            map(Dice_ui::method39(), v848),
                                        ))
                                    }
                                    Dice_ui::US12::US12_1(v842_1_0) => {
                                        Dice_ui::US13::US13_1(v842_1_0.clone())
                                    }
                                };
                                let v887: Dice_ui::US15 = match &v881 {
                                    Dice_ui::US13::US13_0(v881_0_0) => {
                                        Dice_ui::US15::US15_0(v881_0_0.clone())
                                    }
                                    _ => Dice_ui::US15::US15_1,
                                };
                                let v894: Dice_ui::US14 =
                                    if let Dice_ui::US15::US15_0(v887_0_0) = &v887 {
                                        let v888: Dice_ui::US14 = v887_0_0.clone();
                                        if let Dice_ui::US14::US14_0(v888_0_0) = &v888 {
                                            Dice_ui::US14::US14_0(v888_0_0.clone())
                                        } else {
                                            Dice_ui::US14::US14_1
                                        }
                                    } else {
                                        Dice_ui::US14::US14_1
                                    };
                                let v905: Option<std::string::String> = match &v894 {
                                    Dice_ui::US14::US14_0(v894_0_0) => Some(
                                        match &v894 {
                                            Dice_ui::US14::US14_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => None::<std::string::String>,
                                };
                                let v909: Option<Dice_ui::US8> = map(Dice_ui::method40(), v905);
                                let v1047: Dice_ui::US7 = defaultValue(
                                    Dice_ui::US7::US7_1,
                                    map(Dice_ui::method33(), v909),
                                );
                                if let Dice_ui::US7::US7_0(v1047_0_0) = &v1047 {
                                    let v1051: Dice_ui::US8 = v1047_0_0.clone();
                                    if let Dice_ui::US8::US8_0(v1051_0_0) = &v1051 {
                                        Dice_ui::US8::US8_0(v1051_0_0.clone())
                                    } else {
                                        Dice_ui::US8::US8_1
                                    }
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            }
                        } else {
                            let v1059: web_sys::Storage = Dice_ui::method34(v761);
                            let v1060: string = Dice_ui::method35();
                            let v1069: &str = &*v1060;
                            let v1095: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v1059, v1069);
                            let v1096 = Dice_ui::method36();
                            let v1097 = Dice_ui::method37();
                            let v1099: Dice_ui::US12 = match &v1095 {
                                Err(v1095_1_0) => v1097(v1095_1_0.clone()),
                                Ok(v1095_0_0) => v1096(v1095_0_0.clone()),
                            };
                            let v1138: Dice_ui::US13 = match &v1099 {
                                Dice_ui::US12::US12_0(v1099_0_0) => {
                                    let v1103: Option<std::string::String> =
                                        Dice_ui::method38(v1099_0_0.clone());
                                    let v1105: Option<std::string::String> =
                                        serde_json::from_value(v1103.into()).unwrap();
                                    Dice_ui::US13::US13_0(defaultValue(
                                        Dice_ui::US14::US14_1,
                                        map(Dice_ui::method39(), v1105),
                                    ))
                                }
                                Dice_ui::US12::US12_1(v1099_1_0) => {
                                    Dice_ui::US13::US13_1(v1099_1_0.clone())
                                }
                            };
                            let v1144: Dice_ui::US15 = match &v1138 {
                                Dice_ui::US13::US13_0(v1138_0_0) => {
                                    Dice_ui::US15::US15_0(v1138_0_0.clone())
                                }
                                _ => Dice_ui::US15::US15_1,
                            };
                            let v1151: Dice_ui::US14 =
                                if let Dice_ui::US15::US15_0(v1144_0_0) = &v1144 {
                                    let v1145: Dice_ui::US14 = v1144_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v1145_0_0) = &v1145 {
                                        Dice_ui::US14::US14_0(v1145_0_0.clone())
                                    } else {
                                        Dice_ui::US14::US14_1
                                    }
                                } else {
                                    Dice_ui::US14::US14_1
                                };
                            let v1162: Option<std::string::String> = match &v1151 {
                                Dice_ui::US14::US14_0(v1151_0_0) => Some(
                                    match &v1151 {
                                        Dice_ui::US14::US14_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<std::string::String>,
                            };
                            let v1166: Option<Dice_ui::US8> = map(Dice_ui::method40(), v1162);
                            let v1304: Dice_ui::US7 =
                                defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v1166));
                            if let Dice_ui::US7::US7_0(v1304_0_0) = &v1304 {
                                let v1308: Dice_ui::US8 = v1304_0_0.clone();
                                if let Dice_ui::US8::US8_0(v1308_0_0) = &v1308 {
                                    Dice_ui::US8::US8_0(v1308_0_0.clone())
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        };
                        let v1320: string = append(
                            (append(
                                string(
                                    "state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: ",
                                ),
                                sprintf!("{:?}", v1315.clone()),
                            )),
                            string(""),
                        );
                        let v1322: bool = true;
                        leptos::logging::log!("{}", v1320);
                        if let Dice_ui::US8::US8_0(v1315_0_0) = &v1315 {
                            let v1323: LrcPtr<Dice_ui::Heap3> = v1315_0_0.clone();
                            let v1326: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1328: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1326);
                            let v1331: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1328.l0.clone(),
                                |x: &mut /*;
                                 let v1333: */
                                 bool /* = fable_library_rust::Native_::getZero();
                                      let v1338: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1323 = v1323.clone();
                                        move |v_1: bool| Dice_ui::closure32(v1323.clone(), v_1)
                                    })(x.clone())
                                },
                            ); //;
                            let v1341: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1343: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1341);
                            let v1346: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1343.l1.clone(),
                                |x: &mut /*;
                                 let v1348: */
                                 bool /* = fable_library_rust::Native_::getZero();
                                      let v1353: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1323 = v1323.clone();
                                        move |v_2: bool| Dice_ui::closure33(v1323.clone(), v_2)
                                    })(x.clone())
                                },
                            ); //;
                            let v1356: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1358: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1356);
                            let v1361: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1358.l2.clone(),
                                |x: &mut /*;
                                 let v1363: */
                                 std::string::String /* =
                                                         fable_library_rust::Native_::getZero::<()>();
                                                     let v1368: bool =
                                                         */| {
                                    *x = Func1::new({
                                        let v1323 = v1323.clone();
                                        move |v_3: std::string::String| {
                                            Dice_ui::closure34(v1323.clone(), v_3)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            let v1371: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1373: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1371);
                            let v1376: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1373.l3.clone(),
                                |x: &mut /*;
                                 let v1378: */
                                 LrcPtr<Dice_ui::Heap0> /* =
                                                            fable_library_rust::Native_::getZero::<()>();
                                                        let v1383: bool =
                                                            */| {
                                    *x = Func1::new({
                                        let v1323 = v1323.clone();
                                        move |v_4: LrcPtr<Dice_ui::Heap0>| {
                                            Dice_ui::closure35(v1323.clone(), v_4)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            true
                        } else {
                            false
                        }
                    } else {
                        false
                    }
                } else {
                    false
                };
                let v1388: bool = true; /*;
                let v1390: bool = */
            }); //;
            let v1392: Func0<()> = _func0_from_v712;
            let v1394: bool = true;
            leptos::prelude::Effect::new(move |_| v1392());
            let v1397: leptos::prelude::ArcMemo<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure36(v7.clone(), ())
                })()
            });
            let patternInput: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1403: bool = true;
            let _func1_from_v1401 = Func1::from(move |value| {
                //;
                let v1405: LrcPtr<Dice_ui::Heap3> = value;
                let v1407: string = sprintf!("{:?}", v1405.clone());
                let v1411: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v127), |x| x.clone());
                let v1436: Dice_ui::US2 =
                    defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v1411));
                let v1441: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v1443: bool = */
                    async move {
                        /*;
                        let v1445: bool = */
                        ();
                        let v1546: bool = match &v1436 {
                            Dice_ui::US2::US2_0(v1436_0_0) => {
                                let v1447: string = append(
                                    (append(
                                        string(
                                            "state_core.use_core_database (12) / set_core_state_heap_action / value: ",
                                        ),
                                        (v1407.clone()),
                                    )),
                                    string(""),
                                );
                                let v1449: bool = true;
                                leptos::logging::log!("{}", v1447);
                                let v1455: string = append(
                                    (append(
                                        string("state_core.set_data () / data_len: "),
                                        (toString(length(sprintf!("{:?}", v1405.clone())) as i64)),
                                    )),
                                    string(""),
                                );
                                let v1457: bool = true;
                                leptos::logging::log!("{}", v1455);
                                let v1459: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v1461: bool = */
                                    async move {
                                        /*;
                                        let v1463: bool = */
                                        ();
                                        let v1465: bool = true;
                                        let mut data = Vec::new();
                                        let v1467: bool = true;
                                        borsh::BorshSerialize::serialize(&v1405.clone(), &mut data)
                                            .unwrap();
                                        let v1469: Vec<u8> = data;
                                        let v1471: wasm_bindgen::JsValue =
                                            serde_wasm_bindgen::to_value(&v1469).unwrap();
                                        let v1472: string = Dice_ui::method43();
                                        let v1481: &str = &*v1472;
                                        let v1507: rexie::Transaction = match &v1436 {
                                            Dice_ui::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone()
                                        .transaction(
                                            &["store"],
                                            rexie::TransactionMode::ReadWrite,
                                        )?;
                                        let v1509: rexie::Store = v1507.store("store")?;
                                        let v1511: bool = true;
                                        v1509.put(&v1471, Some(&v1481.into())).await?;
                                        let v1513: bool = true;
                                        v1507.done().await?;
                                        let v1518: string = string("}");
                                        let v1525: bool = true;
                                        let _fix_closure_v1520 = Ok::<(), rexie::Error>(());
                                        let v1530: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1520 "),
                                                        (v1518),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1531: bool = true;
                                        _fix_closure_v1520
                                    },
                                ); // rust.fix_closure';
                                let v1533 = __future_init;
                                let v1535: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = v1533;
                                let v1537: Result<(), rexie::Error> = v1535.await;
                                v1537.unwrap();
                                true
                            }
                            _ => {
                                let v1544: bool = true;
                                leptos::logging::log!(
                                    "{}",
                                    string(
                                        "state_core.use_core_database (13) / set_core_state_heap_action / database=None"
                                    )
                                );
                                false
                            }
                        };
                        let v1553: string =
                            string("true; _fix_closure_v1549 });  // rust.fix_closure\'");
                        let v1554: bool = true;
                        _fix_closure_v1549
                    },
                ); // rust.fix_closure';
                let v1556 = __future_init;
                let v1558: std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> = v1556;
                let v1561: bool = true;
                v1558 /*;
                let v1563: bool = */
            }); //;
            let v1565: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = _func1_from_v1401;
            let v1568: leptos::prelude::ArcAction<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap3>| {
                    Func1::new({
                        let v1565 = v1565.clone();
                        move |v_5: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure37(v1565.clone(), v_5)
                    })(value.clone())
                });
            let v1571: bool = true;
            let _func0_from_v1569 = Func0::from(move || {
                //;
                let v1573: bool = leptos::prelude::ReadSignal::get(&patternInput.0.clone());
                let v1574: string = append(
                    (append(
                        string(
                            "state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: ",
                        ),
                        (ofBoolean(v1573)),
                    )),
                    string(""),
                );
                let v1576: bool = true;
                leptos::logging::log!("{}", v1574);
                let v1579: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1581: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1579);
                let v1584: bool = leptos::prelude::ArcRwSignal::get(&v1581.l0.clone());
                let v1587: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1589: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1587);
                let v1592: bool = leptos::prelude::ArcRwSignal::get(&v1589.l1.clone());
                let v1595: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1597: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1595);
                let v1600: std::string::String =
                    leptos::prelude::ArcRwSignal::get(&v1597.l2.clone());
                let v1603: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1605: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1603);
                let v1609: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                    l0: v1584,
                    l1: v1592,
                    l2: v1600,
                    l3: leptos::prelude::ArcRwSignal::get(&v1605.l3.clone()),
                });
                let v1614: string = append(
                    (append(
                        string(
                            "state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: ",
                        ),
                        sprintf!("{:?}", v1609.clone()),
                    )),
                    string(""),
                );
                let v1616: bool = true;
                leptos::logging::log!("{}", v1614);
                let v1618: std::collections::HashMap<
                    std::string::String,
                    leptos::prelude::ArcRwSignal<bool>,
                > = leptos::prelude::ArcMemo::get(&v1397);
                let v1628: &str = &*string("dark_mode_key");
                let v1686: std::string::String = Dice_ui::method45(String::from(v1628));
                let v1688: Option<leptos::prelude::ArcRwSignal<bool>> =
                    std::collections::HashMap::get(&v1618, &v1686)
                        .map(|x| x)
                        .cloned();
                let v1713: Dice_ui::US16 =
                    defaultValue(Dice_ui::US16::US16_1, map(Dice_ui::method46(), v1688));
                let v1723: Dice_ui::US17 = match &v1713 {
                    Dice_ui::US16::US16_0(v1713_0_0) => {
                        Dice_ui::US17::US17_0(leptos::prelude::ArcRwSignal::get(
                            &match &v1713 {
                                Dice_ui::US16::US16_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US17::US17_1,
                };
                let v1726: bool = match &v1723 {
                    Dice_ui::US17::US17_0(v1723_0_0) => match &v1723 {
                        Dice_ui::US17::US17_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => false,
                };
                let v1727: string = append(
                    (append(
                        string(
                            "state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: ",
                        ),
                        (ofBoolean(v1726)),
                    )),
                    string(""),
                );
                let v1729: bool = true;
                leptos::logging::log!("{}", v1727);
                let v1835: bool = if (v1726) == false {
                    if (v1573) == false {
                        let v1733: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &patternInput.1.clone(),
                            |x: &mut /*;
                             let v1735: */
                             bool /* = fable_library_rust::Native_::getZero();
                                  let v1740: bool =
                                      */| {
                                *x = Func1::new(move |v_6: bool| Dice_ui::closure39((), v_6))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        true
                    } else {
                        let v1743: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string(
                                "state_core.use_core_database (18) / effect new_core_state_heap / ##4"
                            )
                        );
                        let v1745: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                            Dice_ui::method29(Dice_ui::method28());
                        let v1746 = Dice_ui::method30();
                        let v1747 = Dice_ui::method31();
                        let v1749: Dice_ui::US9 = match &v1745 {
                            Err(v1745_1_0) => v1747(v1745_1_0.clone()),
                            Ok(v1745_0_0) => v1746(v1745_0_0.clone()),
                        };
                        let v1785: Dice_ui::US10 = match &v1749 {
                            Dice_ui::US9::US9_0(v1749_0_0) => Dice_ui::US10::US10_0(defaultValue(
                                Dice_ui::US11::US11_1,
                                map(Dice_ui::method32(), v1749_0_0.clone()),
                            )),
                            Dice_ui::US9::US9_1(v1749_1_0) => {
                                Dice_ui::US10::US10_1(v1749_1_0.clone())
                            }
                        };
                        if let Dice_ui::US10::US10_0(v1785_0_0) = &v1785 {
                            let v1786: Dice_ui::US11 = v1785_0_0.clone();
                            if let Dice_ui::US11::US11_0(v1786_0_0) = &v1786 {
                                let v1789: bool = true;
                                leptos::prelude::ArcAction::dispatch(&v1568, v1609.clone().clone());
                                let v1790: web_sys::Storage = Dice_ui::method47(v1786_0_0.clone());
                                let v1791: string = Dice_ui::method48();
                                let v1800: &str = &*v1791;
                                let v1825: LrcPtr<Dice_ui::Heap3> = Dice_ui::method49(v1609);
                                let v1827: std::string::String =
                                    serde_json::json!(v1825).to_string();
                                let v1829: &str = v1827.as_str();
                                let v1831: bool = true;
                                web_sys::Storage::set(&v1790, v1800, v1829).unwrap();
                                true
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                } else {
                    false
                };
                let v1837: bool = true; /*;
                let v1839: bool = */
            }); //;
            let v1841: Func0<()> = _func0_from_v1569;
            let v1843: bool = true;
            leptos::prelude::Effect::new(move |_| v1841());
            let v1845 = Dice_ui::method50(v7.clone());
            let v1849: string = string(" class:dark={move || v1845()} class=\"flex flex-1\"");
            let v1852: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v1854: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1856: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::hooks::use_navigate());
            let v1858: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1861: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v1858 = v1858.clone();
                        move || Dice_ui::closure41(v1858.clone(), ())
                    })()
                });
            let v1863: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v1865: LrcPtr<Dice_ui::Heap2> = v1863.unwrap();
            let patternInput_1: (
                leptos::prelude::ReadSignal<Dice_ui::US18>,
                leptos::prelude::WriteSignal<Dice_ui::US18>,
            ) = leptos::prelude::signal(Dice_ui::US18::US18_0);
            let v1868: leptos::prelude::ReadSignal<Dice_ui::US18> = patternInput_1.0.clone();
            let patternInput_2: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1875: bool = true;
            let _func0_from_v1873 = Func0::from(move || {
                //;
                let v1877: bool = leptos::prelude::ReadSignal::get(&patternInput_2.0.clone());
                let v1879: leptos::prelude::Memo<std::string::String> = v1854.clone().hash;
                let v1881: std::string::String = leptos::prelude::Memo::get(&v1879);
                let v1884: string =
                    sprintf!("{}{}", leptos::prelude::ArcMemo::get(&v1861), v1881.clone());
                let v1885: string = append(
                    (append(
                        (append(
                            (append(
                                string("content.render () / effect 1 / new_url_hash: "),
                                (v1884.clone()),
                            )),
                            string(" / loaded: "),
                        )),
                        (ofBoolean(v1877)),
                    )),
                    string(""),
                );
                let v1887: bool = true;
                leptos::logging::log!("{}", v1885);
                let v2021: bool = if (v1877) == false {
                    let v1889: std::string::String = Dice_ui::method51(v1881);
                    if v1889 == "" {
                        let v1894: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v1865.l0.clone());
                        let v1896: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v1894);
                        let v1899: std::string::String =
                            leptos::prelude::ArcRwSignal::get(&v1896.l2.clone());
                        let v1901: string = fable_library_rust::String_::fromString(v1899);
                        let v1902: string = append(
                            (append(
                                string("content.render () / effect 1 / url_hash: "),
                                (v1901.clone()),
                            )),
                            string(""),
                        );
                        let v1904: bool = true;
                        leptos::logging::log!("{}", v1902);
                        if contains(v1901.clone(), string("#")) {
                            let v1919: &str = &*v1901;
                            v1856(v1919, Default::default());
                            ()
                        }
                    }
                    {
                        let v1946: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_2.1.clone(), true); //;
                        true
                    }
                } else {
                    let v1949: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v1865.l0.clone());
                    let v1951: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v1949);
                    let v1961: &str = &*v1884;
                    let v1994: std::string::String = String::from(v1961);
                    let v2020: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v1951.l2.clone(), v1994); //;
                    false
                };
                let v2023: bool = true; /*;
                let v2025: bool = */
            }); //;
            let v2027: Func0<()> = _func0_from_v1873;
            let v2029: bool = true;
            leptos::prelude::Effect::new(move |_| v2027());
            let v2032: bool = true;
            let _func0_from_v2030 = Func0::from(move || {
                //;
                let v2034: leptos::prelude::Memo<std::string::String> = v1854.hash;
                let v2037: std::string::String =
                    Dice_ui::method52(leptos::prelude::Memo::get(&v2034));
                let v2039: Option<&str> = v2037.strip_prefix('#');
                let v2040: string = string("r#\"\"#");
                let v2041: &str = r#""#;
                let v2043: &str = v2039.unwrap_or(v2041);
                let v2045: Result<leptos_router::location::Url, std::string::String> =
                    leptos_router::location::Url::try_from(v2043);
                let v2046 = Dice_ui::method53();
                let v2047 = Dice_ui::method54();
                let v2049: Dice_ui::US20 = match &v2045 {
                    Err(v2045_1_0) => v2047(v2045_1_0.clone()),
                    Ok(v2045_0_0) => v2046(v2045_0_0.clone()),
                };
                let v2062: std::string::String = format!("{:#?}", v2049.clone());
                let v2091: string = append(
                    (append(
                        string("content.render () / effect 2 / hash_url: "),
                        (fable_library_rust::String_::fromString(v2062)),
                    )),
                    string(""),
                );
                let v2093: bool = true;
                leptos::logging::log!("{}", v2091);
                let v2218: bool = match &v2049 {
                    Dice_ui::US20::US20_0(v2049_0_0) => {
                        let v2094: leptos_router::location::Url = v2049_0_0.clone();
                        let v2096: std::string::String = v2094.clone().pathname;
                        let v2109: Dice_ui::US21 = if startsWith3(
                            fable_library_rust::String_::fromString(v2096),
                            string("/dice"),
                            false,
                        ) {
                            Dice_ui::US21::US21_0(Dice_ui::US18::US18_1(Dice_ui::US19::US19_0))
                        } else {
                            Dice_ui::US21::US21_1
                        };
                        let v2127: Dice_ui::US21 = match &v2109 {
                            Dice_ui::US21::US21_0(v2109_0_0) => Dice_ui::US21::US21_0(
                                match &v2109 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v2113: std::string::String = v2094.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v2113),
                                    string("/lists"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_2)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2145: Dice_ui::US21 = match &v2127 {
                            Dice_ui::US21::US21_0(v2127_0_0) => Dice_ui::US21::US21_0(
                                match &v2127 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v2131: std::string::String = v2094.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v2131),
                                    string("/transactions"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_3)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2163: Dice_ui::US21 = match &v2145 {
                            Dice_ui::US21::US21_0(v2145_0_0) => Dice_ui::US21::US21_0(
                                match &v2145 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v2149: std::string::String = v2094.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v2149),
                                    string("/settings"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_4)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2168: Dice_ui::US18 = match &v2163 {
                            Dice_ui::US21::US21_0(v2163_0_0) => match &v2163 {
                                Dice_ui::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            _ => Dice_ui::US18::US18_1(Dice_ui::US19::US19_0),
                        };
                        let v2179: std::string::String = format!("{:#?}", v2168.clone());
                        let v2208: string = append(
                            (append(
                                string("content.render () / effect 2 / new_tab: "),
                                (fable_library_rust::String_::fromString(v2179)),
                            )),
                            string(""),
                        );
                        let v2210: bool = true;
                        leptos::logging::log!("{}", v2208);
                        let v2212: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_1.1.clone(), v2168); //;
                        true
                    }
                    Dice_ui::US20::US20_1(v2049_1_0) => {
                        let v2214: string = append(
                            (append(
                                string("content.render () / effect 2 / hash_url error: "),
                                (toString(v2049_1_0.clone())),
                            )),
                            string(""),
                        );
                        let v2216: bool = true;
                        leptos::logging::log!("{}", v2214);
                        false
                    }
                };
                let v2220: bool = true; /*;
                let v2222: bool = */
            }); //;
            let v2224: Func0<()> = _func0_from_v2030;
            let v2226: bool = true;
            leptos::prelude::Effect::new(move |_| v2224());
            let v2228: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v2229: string = string(
                "class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"",
            );
            let v2230: string = append(
                (append((append(string(" "), (v2229))), string(""))),
                string(""),
            );
            let v2232: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v2234: Dice_ui::US18 = leptos::prelude::ReadSignal::get(&v1868.clone());
            let v5577: Dice_ui::US22 = match &v2234 {
                Dice_ui::US18::US18_1(v2234_1_0) => {
                    let v2238: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v2240: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v2242: LrcPtr<Dice_ui::Heap2> = v2240.unwrap();
                    let v2245: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v2248: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2242 = v2242.clone();
                                move || Dice_ui::closure44(v2242.clone(), ())
                            })()
                        });
                    let v2251: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2248 = v2248.clone();
                            move || Dice_ui::closure46(v2248.clone(), ())
                        })()
                    });
                    let v2254: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2242 = v2242.clone();
                            let v2248 = v2248.clone();
                            move || Dice_ui::closure48(v2242.clone(), v2248.clone(), ())
                        })()
                    });
                    let v2257: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2254 = v2254.clone();
                            move || Dice_ui::closure51(v2254.clone(), ())
                        })()
                    });
                    let v2260: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2254 = v2254.clone();
                                move || Dice_ui::closure55(v2254.clone(), ())
                            })()
                        });
                    let v2262: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v2257,
                        Func1::new(move |v_7: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_7)
                        }),
                    );
                    let v2269: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v2262.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v2271: bool = true;
                    leptos::logging::log!("{}", v2269);
                    let v2274: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2260 = v2260.clone();
                            let v2262 = v2262.clone();
                            move || Dice_ui::closure90(v2260.clone(), v2262.clone(), ())
                        })()
                    });
                    let v2277: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2274 = v2274.clone();
                            move || Dice_ui::closure107(v2274.clone(), ())
                        })()
                    });
                    let v2282: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method159(
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2277 = v2277.clone();
                                move || Dice_ui::closure115(v2277.clone(), ())
                            })()
                        }),
                        Func1::new(move |v_8: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure119((), v_8)
                        }),
                    );
                    let v2289: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v2282.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v2291: bool = true;
                    leptos::logging::log!("{}", v2289);
                    let v2294: bool = true;
                    let _func1_from_v2292 = Func1::from(move |value| {
                        //;
                        let v2301: string = append(
                            (append(
                                string("dice_view.render (2) / set_max_action / value: "),
                                sprintf!("{:?}", value),
                            )),
                            string(""),
                        );
                        let v2303: bool = true;
                        leptos::logging::log!("{}", v2301);
                        let v2305: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v2307: bool = */
                            async move {
                                /*;
                                let v2309: bool = */
                                ();
                                let v2319: &str = &*string("2.0");
                                let v2352: std::string::String = String::from(v2319);
                                let v2386: &str = &*string("dontcare");
                                let v2419: std::string::String = String::from(v2386);
                                let v2453: &str = &*string("EXPERIMENTAL_tx_status");
                                let v2486: std::string::String = String::from(v2453);
                                let v2520: &str =
                                    &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                                let v2553: std::string::String = String::from(v2520);
                                let v2587: &str = &*string("bowen");
                                let v2645: Array<std::string::String> =
                                    new_array(&[v2553, String::from(v2587)]);
                                let v2647: Vec<std::string::String> = v2645.to_vec();
                                let v2649: crate::model::near::rpc::RpcInput =
                                    crate::model::near::rpc::RpcInput {
                                        jsonrpc: v2352,
                                        id: v2419,
                                        method: v2486,
                                        params: v2647,
                                    };
                                let v2650: string = Dice_ui::method167();
                                let v2659: &str = &*v2650;
                                let v2717: std::string::String =
                                    Dice_ui::method92(String::from(v2659));
                                let v2719: reqwest_wasm::RequestBuilder =
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .post(v2717);
                                let v2722: reqwest_wasm::RequestBuilder = Dice_ui::method94(
                                    reqwest_wasm::RequestBuilder::json(v2719, &v2649),
                                );
                                let v2724: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    reqwest_wasm::Response,
                                                    reqwest_wasm::Error,
                                                >,
                                            >,
                                    >,
                                > = Box::pin(reqwest_wasm::RequestBuilder::send(v2722));
                                let v2726: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                    v2724.await;
                                let v2727 = Dice_ui::method95();
                                let v2733: Result<reqwest_wasm::Response, std::string::String> =
                                    v2726.map_err(|x| v2727(x));
                                let v2744: reqwest_wasm::Response = v2733?;
                                let v2746: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                                Output = Result<
                                                    std::string::String,
                                                    reqwest_wasm::Error,
                                                >,
                                            >,
                                    >,
                                > = Box::pin(reqwest_wasm::Response::text(v2744));
                                let v2748: Result<std::string::String, reqwest_wasm::Error> =
                                    v2746.await;
                                let v2749 = Dice_ui::method95();
                                let v2755: Result<std::string::String, std::string::String> =
                                    v2748.map_err(|x| v2749(x));
                                let v2770: Result<Dice_ui::US14, std::string::String> =
                                    Ok::<Dice_ui::US14, std::string::String>(
                                        Dice_ui::US14::US14_0(v2755?),
                                    );
                                let v2780: string = Dice_ui::method8(
                                    200_i64,
                                    append(
                                        (append(
                                            string(
                                                "dice_view.render (x) / roll_action new_arc_action / result1 / result: ",
                                            ),
                                            sprintf!("{:?}", v2770.clone()),
                                        )),
                                        string(""),
                                    ),
                                );
                                let v2782: bool = true;
                                leptos::logging::log!("{}", v2780);
                                let v2783 = Dice_ui::method168();
                                let v2784 = Dice_ui::method169();
                                let v2786: Dice_ui::US57 = match &v2770 {
                                    Err(v2770_1_0) => v2784(v2770_1_0.clone()),
                                    Ok(v2770_0_0) => v2783(v2770_0_0.clone()),
                                };
                                let v3141: Dice_ui::US58 = if let Dice_ui::US57::US57_0(v2786_0_0) =
                                    &v2786
                                {
                                    let v2789: Dice_ui::US14 = v2786_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v2789_0_0) = &v2789 {
                                        let v2793: string = Dice_ui::method41(
                                            fable_library_rust::String_::fromString(
                                                v2789_0_0.clone(),
                                            ),
                                        );
                                        let v2802: &str = &*v2793;
                                        let v2828: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            serde_json::Error,
                                        > = serde_json::from_str(&v2802);
                                        let v2829 = Dice_ui::method42();
                                        let v2842: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            std::string::String,
                                        > = v2828.map_err(|x| v2829(x));
                                        let v2845 = Dice_ui::method170();
                                        let v2846 = Dice_ui::method171();
                                        let v2848: Dice_ui::US60 = match &v2842 {
                                            Err(v2842_1_0) => v2846(v2842_1_0.clone()),
                                            Ok(v2842_0_0) => v2845(v2842_0_0.clone()),
                                        };
                                        let v3125: Dice_ui::US61 = match &v2848 {
                                            Dice_ui::US60::US60_0(v2848_0_0) => {
                                                let v2851: crate::model::near::rpc::RpcResponse =
                                                    v2848_0_0.clone();
                                                let v2853: std::string::String =
                                                    v2851.clone().jsonrpc;
                                                let v2855: Option<
                                                    crate::model::near::rpc::TransactionStatus,
                                                > = v2851.clone().result;
                                                let v2859: Option<(
                                                    Array<(
                                                        std::string::String,
                                                        Array<
                                                            std::collections::HashMap<
                                                                std::string::String,
                                                                (
                                                                    std::string::String,
                                                                    Option<std::string::String>,
                                                                    Option<f64>,
                                                                    Option<std::string::String>,
                                                                ),
                                                            >,
                                                        >,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        Array<std::string::String>,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        u64,
                                                        Array<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        u8,
                                                        Array<std::string::String>,
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            std::string::String,
                                                        >,
                                                        Option<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                    )>,
                                                )> = map(Dice_ui::method150(), v2855);
                                                let v3060: Option<
                                                    crate::model::near::rpc::RpcError,
                                                > = v2851.clone().error;
                                                Dice_ui::US61::US61_0(
                                                    v2853,
                                                    v2859,
                                                    map(Dice_ui::method157(), v3060),
                                                    v2851.id,
                                                )
                                            }
                                            Dice_ui::US60::US60_1(v2848_1_0) => {
                                                Dice_ui::US61::US61_1(v2848_1_0.clone())
                                            }
                                        };
                                        match &v3125 {
                                            Dice_ui::US61::US61_0(
                                                v3125_0_0,
                                                v3125_0_1,
                                                v3125_0_2,
                                                v3125_0_3,
                                            ) => Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                                v3125_0_0.clone(),
                                                v3125_0_1.clone(),
                                                v3125_0_2.clone(),
                                                v3125_0_3.clone(),
                                            )),
                                            Dice_ui::US61::US61_1(v3125_1_0) => {
                                                Dice_ui::US58::US58_1(v3125_1_0.clone())
                                            }
                                        }
                                    } else {
                                        Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                    }
                                } else {
                                    Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                };
                                let v3153: Result<Dice_ui::US59, std::string::String> = match &v3141
                                {
                                    Dice_ui::US58::US58_0(v3141_0_0) => {
                                        Ok::<Dice_ui::US59, std::string::String>(v3141_0_0.clone())
                                    }
                                    Dice_ui::US58::US58_1(v3141_1_0) => {
                                        Err::<Dice_ui::US59, std::string::String>(v3141_1_0.clone())
                                    }
                                };
                                let v3160: string = Dice_ui::method8(
                                    200_i64,
                                    append(
                                        (append(
                                            string(
                                                "dice_view.render (x) / roll_action new_arc_action / result2 / result: ",
                                            ),
                                            sprintf!("{:?}", v3153.clone()),
                                        )),
                                        string(""),
                                    ),
                                );
                                let v3162: bool = true;
                                leptos::logging::log!("{}", v3160);
                                let v3163: string = string("}");
                                let v3170: bool = true;
                                let _fix_closure_v3165 = v3153;
                                let v3175: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v3165 "), (v3163))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v3176: bool = true;
                                _fix_closure_v3165
                            },
                        ); // rust.fix_closure';
                        let v3178 = __future_init;
                        let v3180: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<Dice_ui::US59, std::string::String>,
                                    >,
                            >,
                        > = v3178;
                        let v3183: bool = true;
                        v3180 /*;
                        let v3185: bool = */
                    }); //;
                    let v3187: Func1<
                        LrcPtr<Dice_ui::Heap6>,
                        std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                        Output = Result<Dice_ui::US59, std::string::String>,
                                    >,
                            >,
                        >,
                    > = _func1_from_v2292;
                    let v3190: leptos::prelude::ArcAction<
                        LrcPtr<Dice_ui::Heap6>,
                        Result<Dice_ui::US59, std::string::String>,
                    > = leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap6>| {
                        Func1::new({
                            let v3187 = v3187.clone();
                            move |v_9: LrcPtr<Dice_ui::Heap6>| {
                                Dice_ui::closure141(v3187.clone(), v_9)
                            }
                        })(value.clone())
                    });
                    let v3193: leptos::prelude::ArcMemo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3190 = v3190.clone();
                            move || Dice_ui::closure142(v3190.clone(), ())
                        })()
                    });
                    let v3196: leptos::prelude::ArcMemo<Option<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3193 = v3193.clone();
                                move || Dice_ui::closure147(v3193.clone(), ())
                            })()
                        });
                    let v3199: leptos::prelude::ArcMemo<Dice_ui::US31> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2242 = v2242.clone();
                                move || Dice_ui::closure152(v2242.clone(), ())
                            })()
                        });
                    let v3202: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<std::string::String>,
                                    leptos::prelude::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2242 = v2242.clone();
                            move || Dice_ui::closure153(v2242.clone(), ())
                        })()
                    });
                    let v3205: leptos::prelude::ArcMemo<
                        Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3202 = v3202.clone();
                            move || Dice_ui::closure158(v3202.clone(), ())
                        })()
                    });
                    let v3206: string = string("vec![]");
                    let v3207: Vec<leptos::prelude::AnyView> = vec![];
                    let v3209: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3207);
                    let v3211: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v3213() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v3214 = {
                        let clo = Func0::from(v3213);
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    fn v3216() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v3217 = {
                        let clo_1 = Func0::from(v3216);
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v3219: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v3223: string = string("vec![v3209]");
                    let v3224: Vec<leptos::prelude::AnyView> = vec![v3209];
                    let v3226: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3224);
                    let v3228: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3226);
                    let v3231: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3219))),
                                        string(">move || { v3228 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3233: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3228 }</div> };
                    let v3235: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3233);
                    let v3236: string = string(
                        "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3214(())",
                    );
                    let v3239: string = append(
                        (append(
                            string(" open=move || v3217(())"),
                            (append(
                                (append((append(string(" "), (v3236))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3242 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure163((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v3245 = {
                        let clo_3 = Func0::new(move || Dice_ui::closure164((), ()));
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v3246: string = string(
                        "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3245(()) + \" \" + &v3242(())",
                    );
                    let v3247: string = append(
                        (append((append(string(" "), (v3246))), string(""))),
                        string(""),
                    );
                    let v3249: string = string(" class=\"flex items-center gap-2\"");
                    let v3252: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v3253: string = (Dice_ui::method187())();
                    let v3262: &str = &*v3253;
                    let v3295: std::string::String = String::from(v3262);
                    let v3321: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3295),
                    );
                    let v3325: string = string("vec![v3321]");
                    let v3326: Vec<leptos::prelude::AnyView> = vec![v3321];
                    let v3328: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3326);
                    let v3330: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3328);
                    let v3333: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3252))),
                                        string(">move || { v3330 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3335: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3330 }</span> };
                    let v3337: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3335);
                    let v3341: string = string("vec![v3337]");
                    let v3342: Vec<leptos::prelude::AnyView> = vec![v3337];
                    let v3344: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3342);
                    let v3346: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3344);
                    let v3348: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3249))),
                                        string(">move || { v3346 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3350: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3346 }</div> };
                    let v3352: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3350);
                    let v3354: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v3356() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v3357 = {
                        let clo_4 = Func0::from(v3356);
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v3365: string = string(
                        " class=move || \" \".to_owned() + &v3357(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v3367: string = string(
                        "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                    );
                    let v3371: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3367))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3372: string = string("vec![]");
                    let v3373: Vec<leptos::prelude::AnyView> = vec![];
                    let v3375: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3373);
                    let v3377: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3375);
                    let v3380: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3371))),
                                        string(">move || { v3377 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3382: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3377 }</path> };
                    let v3384: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3382);
                    let v3388: string = string("vec![v3384]");
                    let v3389: Vec<leptos::prelude::AnyView> = vec![v3384];
                    let v3391: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3389);
                    let v3393: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3391);
                    let v3396: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3365))),
                                        string(">move || { v3393 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3398: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3357(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3393 }</svg> };
                    let v3400: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3398);
                    let v3404: string = string("vec![v3400]");
                    let v3405: Vec<leptos::prelude::AnyView> = vec![v3400];
                    let v3407: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3405);
                    let v3409: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3407);
                    let v3411: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3354))),
                                        string(">move || { v3409 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3413: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3409 }</span> };
                    let v3415: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3413);
                    let v3423: string = string("vec![v3352, v3415]");
                    let v3424: Vec<leptos::prelude::AnyView> = vec![v3352, v3415];
                    let v3426: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3424);
                    let v3428: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3426);
                    let v3431: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v3247))),
                                        string(">move || { v3428 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3433: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3245(()) + " " + &v3242(())>move || { v3428 }</summary> };
                    let v3435: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3433);
                    let v3437: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3441: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v2242 = v2242.clone();
                                let v3190 = v3190.clone();
                                let v3196 = v3196.clone();
                                let v3199 = v3199.clone();
                                let v3205 = v3205.clone();
                                move || {
                                    Dice_ui::closure167(
                                        v2242.clone(),
                                        v3190.clone(),
                                        v3196.clone(),
                                        v3199.clone(),
                                        v3205.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3443: leptos::prelude::Fragment = (move || v3441())();
                    let v3445: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3443);
                    let v3447: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3437))),
                                        string(">move || { v3445 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3449: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3445 }</div> };
                    let v3451: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3449);
                    let v3458: string = string("vec![v3435, v3451]");
                    let v3459: Vec<leptos::prelude::AnyView> = vec![v3435, v3451];
                    let v3461: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3459);
                    let v3463: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3461);
                    let v3466: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v3239))),
                                        string(">move || { v3463 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3468: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v3217(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3214(())>move || { v3463 }</details> };
                    let v3470: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3468);
                    let v3477: string = string("vec![v3235, v3470]");
                    let v3478: Vec<leptos::prelude::AnyView> = vec![v3235, v3470];
                    let v3480: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3478);
                    let v3482: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3480);
                    let v3484: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3211))),
                                        string(">move || { v3482 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3486: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3482 }</div> };
                    let v3488: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3486);
                    let v3489: string = string("vec![]");
                    let v3490: Vec<leptos::prelude::AnyView> = vec![];
                    let v3492: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3490);
                    let v3494: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v3496 = {
                        let clo_5 = Func0::from(v3213);
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v3498 = {
                        let clo_6 = Func0::from(v3216);
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v3500: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v3504: string = string("vec![v3492]");
                    let v3505: Vec<leptos::prelude::AnyView> = vec![v3492];
                    let v3507: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3505);
                    let v3509: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3507);
                    let v3511: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3500))),
                                        string(">move || { v3509 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3513: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3509 }</div> };
                    let v3515: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3513);
                    let v3516: string = string(
                        "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3496(())",
                    );
                    let v3519: string = append(
                        (append(
                            string(" open=move || v3498(())"),
                            (append(
                                (append((append(string(" "), (v3516))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3522 = {
                        let clo_7 = Func0::new(move || Dice_ui::closure183((), ()));
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v3525 = {
                        let clo_8 = Func0::new(move || Dice_ui::closure184((), ()));
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v3526: string = string(
                        "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3525(()) + \" \" + &v3522(())",
                    );
                    let v3527: string = append(
                        (append((append(string(" "), (v3526))), string(""))),
                        string(""),
                    );
                    let v3529: string = string(" class=\"flex items-center gap-2\"");
                    let v3532: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v3533: string = (Dice_ui::method198())();
                    let v3542: &str = &*v3533;
                    let v3575: std::string::String = String::from(v3542);
                    let v3601: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3575),
                    );
                    let v3605: string = string("vec![v3601]");
                    let v3606: Vec<leptos::prelude::AnyView> = vec![v3601];
                    let v3608: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3606);
                    let v3610: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3608);
                    let v3612: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3532))),
                                        string(">move || { v3610 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3614: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3610 }</span> };
                    let v3616: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3614);
                    let v3620: string = string("vec![v3616]");
                    let v3621: Vec<leptos::prelude::AnyView> = vec![v3616];
                    let v3623: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3621);
                    let v3625: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3623);
                    let v3627: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3529))),
                                        string(">move || { v3625 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3629: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3625 }</div> };
                    let v3631: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3629);
                    let v3633: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v3635 = {
                        let clo_9 = Func0::from(v3356);
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v3643: string = string(
                        " class=move || \" \".to_owned() + &v3635(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v3645: string = string(
                        "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                    );
                    let v3649: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3645))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3650: string = string("vec![]");
                    let v3651: Vec<leptos::prelude::AnyView> = vec![];
                    let v3653: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3651);
                    let v3655: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3653);
                    let v3657: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3649))),
                                        string(">move || { v3655 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3659: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3655 }</path> };
                    let v3661: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3659);
                    let v3665: string = string("vec![v3661]");
                    let v3666: Vec<leptos::prelude::AnyView> = vec![v3661];
                    let v3668: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3666);
                    let v3670: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3668);
                    let v3672: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3643))),
                                        string(">move || { v3670 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3674: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3635(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3670 }</svg> };
                    let v3676: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3674);
                    let v3680: string = string("vec![v3676]");
                    let v3681: Vec<leptos::prelude::AnyView> = vec![v3676];
                    let v3683: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3681);
                    let v3685: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3683);
                    let v3687: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3633))),
                                        string(">move || { v3685 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3689: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3685 }</span> };
                    let v3691: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3689);
                    let v3698: string = string("vec![v3631, v3691]");
                    let v3699: Vec<leptos::prelude::AnyView> = vec![v3631, v3691];
                    let v3701: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3699);
                    let v3703: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3701);
                    let v3705: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v3527))),
                                        string(">move || { v3703 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3707: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3525(()) + " " + &v3522(())>move || { v3703 }</summary> };
                    let v3709: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3707);
                    let v3711: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3715: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v2254 = v2254.clone();
                                let v2274 = v2274.clone();
                                let v2282 = v2282.clone();
                                move || {
                                    Dice_ui::closure186(
                                        v2282.clone(),
                                        v2274.clone(),
                                        v2254.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3717: leptos::prelude::Fragment = (move || v3715())();
                    let v3719: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3717);
                    let v3721: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3711))),
                                        string(">move || { v3719 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3723: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3719 }</div> };
                    let v3725: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3723);
                    let v3732: string = string("vec![v3709, v3725]");
                    let v3733: Vec<leptos::prelude::AnyView> = vec![v3709, v3725];
                    let v3735: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3733);
                    let v3737: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3735);
                    let v3739: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v3519))),
                                        string(">move || { v3737 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3741: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v3498(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3496(())>move || { v3737 }</details> };
                    let v3743: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3741);
                    let v3750: string = string("vec![v3515, v3743]");
                    let v3751: Vec<leptos::prelude::AnyView> = vec![v3515, v3743];
                    let v3753: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3751);
                    let v3755: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3753);
                    let v3757: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3494))),
                                        string(">move || { v3755 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3759: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3755 }</div> };
                    let v3761: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3759);
                    let v3768: string = string("vec![v3488, v3761]");
                    let v3769: Vec<leptos::prelude::AnyView> = vec![v3488, v3761];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3769))
                }
                Dice_ui::US18::US18_2 => {
                    let v3775: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v3777: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3779: LrcPtr<Dice_ui::Heap2> = v3777.unwrap();
                    let v3789: &str = &*string("???");
                    let v3822: std::string::String = String::from(v3789);
                    let v3848: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3822),
                    );
                    let v3852: string = string("vec![v3848]");
                    let v3853: Vec<leptos::prelude::AnyView> = vec![v3848];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3853))
                }
                Dice_ui::US18::US18_4 => {
                    let v4594: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v4596: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v4598: LrcPtr<Dice_ui::Heap2> = v4596.unwrap();
                    let v4601: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v4598 = v4598.clone();
                            move || Dice_ui::closure192(v4598.clone(), ())
                        })()
                    });
                    let patternInput_3: (
                        leptos::prelude::ReadSignal<i32>,
                        leptos::prelude::WriteSignal<i32>,
                    ) = leptos::prelude::signal(0_i32);
                    let v4604: leptos::prelude::WriteSignal<i32> = patternInput_3.1.clone();
                    let v4607: leptos::prelude::ArcMemo<
                        Vec<(
                            i32,
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let patternInput_3 = patternInput_3.clone();
                            let v4601 = v4601.clone();
                            move || Dice_ui::closure195(v4601.clone(), patternInput_3.0.clone(), ())
                        })()
                    });
                    let v4610: leptos::prelude::ArcMemo<i32> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v4607 = v4607.clone();
                                move || Dice_ui::closure198(v4607.clone(), ())
                            })()
                        });
                    let v4613: bool = true;
                    let _func0_from_v4611 = Func0::from(move || {
                        //;
                        let v4616: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v4598.l0.clone());
                        let v4618: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v4616);
                        let v4621: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v4618.l3.clone(),
                            |x: &mut /*;
                             let v4623: */
                             LrcPtr<Dice_ui::Heap0> /* =
                                                        fable_library_rust::Native_::getZero::<()>();
                                                    let v4628: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v4601 = v4601.clone();
                                    move |v_10: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure199(v4601.clone(), v_10)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v4630: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4604.clone(),
                            |x: &mut /*;
                             let v4632: */
                             i32 /* = fable_library_rust::Native_::getZero();
                                 let v4637: bool =
                                     */| {
                                *x = Func1::new(move |v_11: i32| Dice_ui::closure201((), v_11))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v4639: bool = true; /*;
                        let v4641: bool = */
                    }); //;
                    let v4643: Func0<()> = _func0_from_v4611;
                    let v4646 = {
                        let clo_10 = Func0::new(move || Dice_ui::closure202((), ()));
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v4658: string = string(
                        " class=move || \" \".to_owned() + &v4646(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v4664: string = string(
                        " d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v4665: string = string("vec![]");
                    let v4666: Vec<leptos::prelude::AnyView> = vec![];
                    let v4668: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4666);
                    let v4670: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4668);
                    let v4673: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4664))),
                                        string(">move || { v4670 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4675: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">move || { v4670 }</path> };
                    let v4677: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4675);
                    let v4681: string = string("vec![v4677]");
                    let v4682: Vec<leptos::prelude::AnyView> = vec![v4677];
                    let v4684: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4682);
                    let v4686: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4684);
                    let v4689: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4658))),
                                        string(">move || { v4686 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4691: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4646(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4686 }</svg> };
                    let v4696 = {
                        let clo_11 = Func0::new(move || Dice_ui::closure203((), ()));
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v4697: string = string(
                        "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v4696(())",
                    );
                    let v4700: string = append(
                        (append(
                            string(" aria-label=\"Add\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v4643()"),
                                    (append(
                                        (append((append(string(" "), (v4697))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4702: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4691);
                    let v4706: string = string("vec![v4702]");
                    let v4707: Vec<leptos::prelude::AnyView> = vec![v4702];
                    let v4709: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4707);
                    let v4711: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4709);
                    let v4714: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v4700))),
                                        string(">move || { v4711 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4716: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Add" on:click=move |_| v4643() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v4696(())>move || { v4711 }</button> };
                    let v4718: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4716);
                    let v4719: string = string("vec![]");
                    let v4720: Vec<leptos::prelude::AnyView> = vec![];
                    let v4722: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4720);
                    let v4724: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v4726() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v4727 = {
                        let clo_12 = Func0::from(v4726);
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    fn v4729() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v4730 = {
                        let clo_13 = Func0::from(v4729);
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v4732: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4736: string = string("vec![v4718]");
                    let v4737: Vec<leptos::prelude::AnyView> = vec![v4718];
                    let v4739: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4737);
                    let v4741: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4739);
                    let v4744: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4732))),
                                        string(">move || { v4741 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4746: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4741 }</div> };
                    let v4748: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4746);
                    let v4749: string = string(
                        "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4727(())",
                    );
                    let v4752: string = append(
                        (append(
                            string(" open=move || v4730(())"),
                            (append(
                                (append((append(string(" "), (v4749))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4755 = {
                        let clo_14 = Func0::new(move || Dice_ui::closure204((), ()));
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v4758 = {
                        let clo_15 = Func0::new({
                            let v4718 = v4718.clone();
                            move || Dice_ui::closure205(v4718.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v4759: string = string(
                        "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4758(()) + \" \" + &v4755(())",
                    );
                    let v4760: string = append(
                        (append((append(string(" "), (v4759))), string(""))),
                        string(""),
                    );
                    let v4762: string = string(" class=\"flex items-center gap-2\"");
                    let v4765: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4766: string = (Dice_ui::method214(v4718.clone()))();
                    let v4775: &str = &*v4766;
                    let v4808: std::string::String = String::from(v4775);
                    let v4834: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4808),
                    );
                    let v4838: string = string("vec![v4834]");
                    let v4839: Vec<leptos::prelude::AnyView> = vec![v4834];
                    let v4841: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4839);
                    let v4843: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4841);
                    let v4846: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4765))),
                                        string(">move || { v4843 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4848: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4843 }</span> };
                    let v4850: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4848);
                    let v4854: string = string("vec![v4850]");
                    let v4855: Vec<leptos::prelude::AnyView> = vec![v4850];
                    let v4857: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4855);
                    let v4859: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4857);
                    let v4861: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4762))),
                                        string(">move || { v4859 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4863: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4859 }</div> };
                    let v4865: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4863);
                    let v4867: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v4869() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v4870 = {
                        let clo_16 = Func0::from(v4869);
                        Func1::new({
                            let clo_16 = clo_16.clone();
                            move |arg_16: ()| clo_16()
                        })
                    };
                    let v4878: string = string(
                        " class=move || \" \".to_owned() + &v4870(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v4880: string = string(
                        "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                    );
                    let v4884: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4880))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4885: string = string("vec![]");
                    let v4886: Vec<leptos::prelude::AnyView> = vec![];
                    let v4888: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4886);
                    let v4890: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4888);
                    let v4892: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4884))),
                                        string(">move || { v4890 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4894: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4890 }</path> };
                    let v4896: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4894);
                    let v4900: string = string("vec![v4896]");
                    let v4901: Vec<leptos::prelude::AnyView> = vec![v4896];
                    let v4903: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4901);
                    let v4905: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4903);
                    let v4907: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4878))),
                                        string(">move || { v4905 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4909: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4870(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4905 }</svg> };
                    let v4911: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4909);
                    let v4915: string = string("vec![v4911]");
                    let v4916: Vec<leptos::prelude::AnyView> = vec![v4911];
                    let v4918: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4916);
                    let v4920: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4918);
                    let v4922: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4867))),
                                        string(">move || { v4920 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4924: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4920 }</span> };
                    let v4926: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4924);
                    let v4934: string = string("vec![v4865, v4926]");
                    let v4935: Vec<leptos::prelude::AnyView> = vec![v4865, v4926];
                    let v4937: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4935);
                    let v4939: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4937);
                    let v4942: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4760))),
                                        string(">move || { v4939 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4944: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4758(()) + " " + &v4755(())>move || { v4939 }</summary> };
                    let v4946: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4944);
                    let v4948: string = string(" class=\"flex flex-1 flex-col\"");
                    let v4952: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v4598 = v4598.clone();
                                let v4601 = v4601.clone();
                                let v4604 = v4604.clone();
                                let v4607 = v4607.clone();
                                let v4610 = v4610.clone();
                                move || {
                                    Dice_ui::closure207(
                                        v4598.clone(),
                                        v4607.clone(),
                                        v4610.clone(),
                                        v4601.clone(),
                                        v4604.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v4954: leptos::prelude::Fragment = (move || v4952())();
                    let v4956: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4954);
                    let v4958: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4948))),
                                        string(">move || { v4956 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4960: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4956 }</div> };
                    let v4962: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4960);
                    let v4969: string = string("vec![v4946, v4962]");
                    let v4970: Vec<leptos::prelude::AnyView> = vec![v4946, v4962];
                    let v4972: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4970);
                    let v4974: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4972);
                    let v4977: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4752))),
                                        string(">move || { v4974 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4979: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4730(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4727(())>move || { v4974 }</details> };
                    let v4981: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4979);
                    let v4988: string = string("vec![v4748, v4981]");
                    let v4989: Vec<leptos::prelude::AnyView> = vec![v4748, v4981];
                    let v4991: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4989);
                    let v4993: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4991);
                    let v4995: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4724))),
                                        string(">move || { v4993 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4997: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4993 }</div> };
                    let v4999: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4997);
                    let v5000: string = string("vec![]");
                    let v5001: Vec<leptos::prelude::AnyView> = vec![];
                    let v5003: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5001);
                    let v5005: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v5007 = {
                        let clo_17 = Func0::from(v4726);
                        Func1::new({
                            let clo_17 = clo_17.clone();
                            move |arg_17: ()| clo_17()
                        })
                    };
                    let v5009 = {
                        let clo_18 = Func0::from(v4729);
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v5011: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v5015: string = string("vec![v5003]");
                    let v5016: Vec<leptos::prelude::AnyView> = vec![v5003];
                    let v5018: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5016);
                    let v5020: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5018);
                    let v5022: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5011))),
                                        string(">move || { v5020 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5024: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v5020 }</div> };
                    let v5026: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5024);
                    let v5027: string = string(
                        "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v5007(())",
                    );
                    let v5030: string = append(
                        (append(
                            string(" open=move || v5009(())"),
                            (append(
                                (append((append(string(" "), (v5027))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v5033 = {
                        let clo_19 = Func0::new(move || Dice_ui::closure223((), ()));
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    let v5036 = {
                        let clo_20 = Func0::new(move || Dice_ui::closure224((), ()));
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v5037: string = string(
                        "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v5036(()) + \" \" + &v5033(())",
                    );
                    let v5038: string = append(
                        (append((append(string(" "), (v5037))), string(""))),
                        string(""),
                    );
                    let v5040: string = string(" class=\"flex items-center gap-2\"");
                    let v5043: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v5044: string = (Dice_ui::method228())();
                    let v5053: &str = &*v5044;
                    let v5086: std::string::String = String::from(v5053);
                    let v5112: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v5086),
                    );
                    let v5116: string = string("vec![v5112]");
                    let v5117: Vec<leptos::prelude::AnyView> = vec![v5112];
                    let v5119: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5117);
                    let v5121: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5119);
                    let v5123: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v5043))),
                                        string(">move || { v5121 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5125: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v5121 }</span> };
                    let v5127: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5125);
                    let v5131: string = string("vec![v5127]");
                    let v5132: Vec<leptos::prelude::AnyView> = vec![v5127];
                    let v5134: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5132);
                    let v5136: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5134);
                    let v5138: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5040))),
                                        string(">move || { v5136 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5140: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v5136 }</div> };
                    let v5142: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5140);
                    let v5144: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v5146 = {
                        let clo_21 = Func0::from(v4869);
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v5154: string = string(
                        " class=move || \" \".to_owned() + &v5146(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v5156: string = string(
                        "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                    );
                    let v5160: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v5156))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v5161: string = string("vec![]");
                    let v5162: Vec<leptos::prelude::AnyView> = vec![];
                    let v5164: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5162);
                    let v5166: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5164);
                    let v5168: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v5160))),
                                        string(">move || { v5166 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5170: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v5166 }</path> };
                    let v5172: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5170);
                    let v5176: string = string("vec![v5172]");
                    let v5177: Vec<leptos::prelude::AnyView> = vec![v5172];
                    let v5179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5177);
                    let v5181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5179);
                    let v5183: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v5154))),
                                        string(">move || { v5181 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5185: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5146(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v5181 }</svg> };
                    let v5187: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5185);
                    let v5191: string = string("vec![v5187]");
                    let v5192: Vec<leptos::prelude::AnyView> = vec![v5187];
                    let v5194: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5192);
                    let v5196: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5194);
                    let v5198: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v5144))),
                                        string(">move || { v5196 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5200: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v5196 }</span> };
                    let v5202: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5200);
                    let v5209: string = string("vec![v5142, v5202]");
                    let v5210: Vec<leptos::prelude::AnyView> = vec![v5142, v5202];
                    let v5212: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5210);
                    let v5214: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5212);
                    let v5216: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v5038))),
                                        string(">move || { v5214 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5218: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v5036(()) + " " + &v5033(())>move || { v5214 }</summary> };
                    let v5220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5218);
                    let v5222: string = string(" class=\"flex flex-1 flex-col\"");
                    let v5226: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v4598 = v4598.clone();
                                move || Dice_ui::closure226(v4598.clone(), ())
                            })()
                        }));
                    let v5228: leptos::prelude::Fragment = (move || v5226())();
                    let v5230: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5228);
                    let v5232: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5222))),
                                        string(">move || { v5230 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5234: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5230 }</div> };
                    let v5236: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5234);
                    let v5243: string = string("vec![v5220, v5236]");
                    let v5244: Vec<leptos::prelude::AnyView> = vec![v5220, v5236];
                    let v5246: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5244);
                    let v5248: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5246);
                    let v5250: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v5030))),
                                        string(">move || { v5248 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5252: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v5009(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v5007(())>move || { v5248 }</details> };
                    let v5254: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5252);
                    let v5261: string = string("vec![v5026, v5254]");
                    let v5262: Vec<leptos::prelude::AnyView> = vec![v5026, v5254];
                    let v5264: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5262);
                    let v5266: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5264);
                    let v5268: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5005))),
                                        string(">move || { v5266 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5270: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5266 }</div> };
                    let v5272: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5270);
                    let v5275: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v4598.l0.clone());
                    let v5277: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v5275);
                    let v5558: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                        &v5277.l1.clone(),
                    ) {
                        let v5281: string = string("vec![]");
                        let v5282: Vec<leptos::prelude::AnyView> = vec![];
                        let v5284: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5282);
                        let v5286: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v5288 = {
                            let clo_22 = Func0::from(v4726);
                            Func1::new({
                                let clo_22 = clo_22.clone();
                                move |arg_22: ()| clo_22()
                            })
                        };
                        let v5290 = {
                            let clo_23 = Func0::from(v4729);
                            Func1::new({
                                let clo_23 = clo_23.clone();
                                move |arg_23: ()| clo_23()
                            })
                        };
                        let v5292: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v5296: string = string("vec![v5284]");
                        let v5297: Vec<leptos::prelude::AnyView> = vec![v5284];
                        let v5299: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5297);
                        let v5301: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5299);
                        let v5303: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5292))),
                                            string(">move || { v5301 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5305: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v5301 }</div> };
                        let v5307: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5305);
                        let v5308: string = string(
                            "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v5288(())",
                        );
                        let v5311: string = append(
                            (append(
                                string(" open=move || v5290(())"),
                                (append(
                                    (append((append(string(" "), (v5308))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5314 = {
                            let clo_24 = Func0::new(move || Dice_ui::closure243((), ()));
                            Func1::new({
                                let clo_24 = clo_24.clone();
                                move |arg_24: ()| clo_24()
                            })
                        };
                        let v5317 = {
                            let clo_25 = Func0::new(move || Dice_ui::closure244((), ()));
                            Func1::new({
                                let clo_25 = clo_25.clone();
                                move |arg_25: ()| clo_25()
                            })
                        };
                        let v5318: string = string(
                            "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v5317(()) + \" \" + &v5314(())",
                        );
                        let v5319: string = append(
                            (append((append(string(" "), (v5318))), string(""))),
                            string(""),
                        );
                        let v5321: string = string(" class=\"flex items-center gap-2\"");
                        let v5324: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v5325: string = (Dice_ui::method237())();
                        let v5334: &str = &*v5325;
                        let v5367: std::string::String = String::from(v5334);
                        let v5393: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v5367),
                        );
                        let v5397: string = string("vec![v5393]");
                        let v5398: Vec<leptos::prelude::AnyView> = vec![v5393];
                        let v5400: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5398);
                        let v5402: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5400);
                        let v5404: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v5324))),
                                            string(">move || { v5402 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5406: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v5402 }</span> };
                        let v5408: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5406);
                        let v5412: string = string("vec![v5408]");
                        let v5413: Vec<leptos::prelude::AnyView> = vec![v5408];
                        let v5415: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5413);
                        let v5417: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5415);
                        let v5419: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5321))),
                                            string(">move || { v5417 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5421: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v5417 }</div> };
                        let v5423: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5421);
                        let v5425: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        let v5427 = {
                            let clo_26 = Func0::from(v4869);
                            Func1::new({
                                let clo_26 = clo_26.clone();
                                move |arg_26: ()| clo_26()
                            })
                        };
                        let v5435: string = string(
                            " class=move || \" \".to_owned() + &v5427(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v5437: string = string(
                            "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                        );
                        let v5441: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v5437))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5442: string = string("vec![]");
                        let v5443: Vec<leptos::prelude::AnyView> = vec![];
                        let v5445: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5443);
                        let v5447: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5445);
                        let v5449: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v5441))),
                                            string(">move || { v5447 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5451: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v5447 }</path> };
                        let v5453: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5451);
                        let v5457: string = string("vec![v5453]");
                        let v5458: Vec<leptos::prelude::AnyView> = vec![v5453];
                        let v5460: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5458);
                        let v5462: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5460);
                        let v5464: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v5435))),
                                            string(">move || { v5462 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5466: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5427(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v5462 }</svg> };
                        let v5468: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5466);
                        let v5472: string = string("vec![v5468]");
                        let v5473: Vec<leptos::prelude::AnyView> = vec![v5468];
                        let v5475: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5473);
                        let v5477: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5475);
                        let v5479: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v5425))),
                                            string(">move || { v5477 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5481: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v5477 }</span> };
                        let v5483: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5481);
                        let v5490: string = string("vec![v5423, v5483]");
                        let v5491: Vec<leptos::prelude::AnyView> = vec![v5423, v5483];
                        let v5493: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5491);
                        let v5495: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5493);
                        let v5497: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v5319))),
                                            string(">move || { v5495 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5499: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v5317(()) + " " + &v5314(())>move || { v5495 }</summary> };
                        let v5501: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5499);
                        let v5503: string = string(" class=\"flex flex-1 flex-col\"");
                        let v5507: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new(move || Dice_ui::closure246((), ()))()
                            }));
                        let v5509: leptos::prelude::Fragment = (move || v5507())();
                        let v5511: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5509);
                        let v5513: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5503))),
                                            string(">move || { v5511 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5515: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5511 }</div> };
                        let v5517: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5515);
                        let v5524: string = string("vec![v5501, v5517]");
                        let v5525: Vec<leptos::prelude::AnyView> = vec![v5501, v5517];
                        let v5527: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5525);
                        let v5529: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5527);
                        let v5531: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v5311))),
                                            string(">move || { v5529 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5533: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v5290(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v5288(())>move || { v5529 }</details> };
                        let v5535: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5533);
                        let v5542: string = string("vec![v5307, v5535]");
                        let v5543: Vec<leptos::prelude::AnyView> = vec![v5307, v5535];
                        let v5545: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5543);
                        let v5547: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5545);
                        let v5549: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5286))),
                                            string(">move || { v5547 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5551: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5547 }</div> };
                        leptos::prelude::IntoAny::into_any(v5551)
                    } else {
                        let v5554: string = string("vec![]");
                        let v5555: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::IntoAny::into_any(v5555)
                    };
                    let v5568: string = string("vec![v4999, v5272, v5558]");
                    let v5569: Vec<leptos::prelude::AnyView> = vec![v4999, v5272, v5558];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v5569))
                }
                Dice_ui::US18::US18_3 => {
                    let v3859: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v3861: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3863: LrcPtr<Dice_ui::Heap2> = v3861.unwrap();
                    let v3866: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v3869: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3863 = v3863.clone();
                                move || Dice_ui::closure44(v3863.clone(), ())
                            })()
                        });
                    let v3872: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3869 = v3869.clone();
                            move || Dice_ui::closure46(v3869.clone(), ())
                        })()
                    });
                    let v3875: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3863 = v3863.clone();
                            let v3869 = v3869.clone();
                            move || Dice_ui::closure48(v3863.clone(), v3869.clone(), ())
                        })()
                    });
                    let v3878: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3875 = v3875.clone();
                            move || Dice_ui::closure51(v3875.clone(), ())
                        })()
                    });
                    let v3881: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3875 = v3875.clone();
                                move || Dice_ui::closure55(v3875.clone(), ())
                            })()
                        });
                    let v3883: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v3878,
                        Func1::new(move |v_12: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_12)
                        }),
                    );
                    let v3890: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v3883.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v3892: bool = true;
                    leptos::logging::log!("{}", v3890);
                    let v3895: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3881 = v3881.clone();
                            let v3883 = v3883.clone();
                            move || Dice_ui::closure90(v3881.clone(), v3883.clone(), ())
                        })()
                    });
                    let v3898: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3895 = v3895.clone();
                            move || Dice_ui::closure107(v3895.clone(), ())
                        })()
                    });
                    let v3910: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method159(
                                        leptos::prelude::ArcMemo::new(move |_| {
                                            Func0::new({
                                                let v3898 = v3898.clone();
                                                move || Dice_ui::closure115(v3898.clone(), ())
                                            })()
                                        }),
                                        Func1::new(
                                            move |v_13: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure119((), v_13)
                                            }
                                        )
                                    )
                                ),
                            )),
                            string(""),
                        ),
                    );
                    let v3912: bool = true;
                    leptos::logging::log!("{}", v3910);
                    let patternInput_4: (
                        leptos::prelude::ReadSignal<bool>,
                        leptos::prelude::WriteSignal<bool>,
                    ) = leptos::prelude::signal(false);
                    let v3914: leptos::prelude::ReadSignal<bool> = patternInput_4.0.clone();
                    let v3916 = Func0::new({
                        let patternInput_4 = patternInput_4.clone();
                        move || Dice_ui::closure254(patternInput_4.1.clone(), ())
                    });
                    {
                        let v3920 = {
                            let clo_27 = Func0::new(move || Dice_ui::closure255((), ()));
                            Func1::new({
                                let clo_27 = clo_27.clone();
                                move |arg_27: ()| clo_27()
                            })
                        };
                        let v3932: string = string(
                            " class=move || \" \".to_owned() + &v3920(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v3935: string = string(
                            "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"",
                        );
                        let v3938: string = append(
                            (append(
                                (append(string(" "), (v3935))),
                                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                            )),
                            string(""),
                        );
                        let v3939: string = string("vec![]");
                        let v3940: Vec<leptos::prelude::AnyView> = vec![];
                        let v3942: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3940);
                        let v3944: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3942);
                        let v3947: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3938))),
                                            string(">move || { v3944 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3949: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v3944 }</path> };
                        let v3951: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3949);
                        let v3957: string = string(
                            " d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                        );
                        let v3958: string = string("vec![]");
                        let v3959: Vec<leptos::prelude::AnyView> = vec![];
                        let v3961: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3959);
                        let v3963: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3961);
                        let v3965: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3957))),
                                            string(">move || { v3963 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3967: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v3963 }</path> };
                        let v3969: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3967);
                        let v3977: string = string("vec![v3951, v3969]");
                        let v3978: Vec<leptos::prelude::AnyView> = vec![v3951, v3969];
                        let v3980: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3978);
                        let v3982: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3980);
                        let v3985: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3932))),
                                            string(">move || { v3982 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3987: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3920(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3982 }</svg> };
                        let v3992 = {
                            let clo_28 = Func0::new({
                                let v3914 = v3914.clone();
                                move || Dice_ui::closure256(v3914.clone(), ())
                            });
                            Func1::new({
                                let clo_28 = clo_28.clone();
                                move |arg_28: ()| clo_28()
                            })
                        };
                        let v3993: string = string(
                            "class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v3992(())",
                        );
                        let v3996: string = append(
                            (append(
                                string(" aria-label=\"Settings\""),
                                (append(
                                    (append(
                                        string(" on:click=move |_| v3916()"),
                                        (append(
                                            (append((append(string(" "), (v3993))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3998: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3987);
                        let v4002: string = string("vec![v3998]");
                        let v4003: Vec<leptos::prelude::AnyView> = vec![v3998];
                        let v4005: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4003);
                        let v4007: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4005);
                        let v4010: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<button "), (v3996))),
                                            string(">move || { v4007 }</"),
                                        )),
                                        string("button"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4012: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Settings" on:click=move |_| v3916() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v3992(())>move || { v4007 }</button> };
                        let v4014: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4012);
                        let v4015: string = string("vec![]");
                        let v4016: Vec<leptos::prelude::AnyView> = vec![];
                        let v4018: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4016);
                        let v4020: string = string(" class=\"flex flex-col [position:relative]\"");
                        fn v4022() -> string {
                            Dice_ui::closure161((), ())
                        }
                        let v4023 = {
                            let clo_29 = Func0::from(v4022);
                            Func1::new({
                                let clo_29 = clo_29.clone();
                                move |arg_29: ()| clo_29()
                            })
                        };
                        fn v4025() -> bool {
                            Dice_ui::closure162((), ())
                        }
                        let v4026 = {
                            let clo_30 = Func0::from(v4025);
                            Func1::new({
                                let clo_30 = clo_30.clone();
                                move |arg_30: ()| clo_30()
                            })
                        };
                        let v4028: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v4032: string = string("vec![v4014]");
                        let v4033: Vec<leptos::prelude::AnyView> = vec![v4014];
                        let v4035: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4033);
                        let v4037: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4035);
                        let v4040: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4028))),
                                            string(">move || { v4037 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4042: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4037 }</div> };
                        let v4044: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4042);
                        let v4045: string = string(
                            "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4023(())",
                        );
                        let v4048: string = append(
                            (append(
                                string(" open=move || v4026(())"),
                                (append(
                                    (append((append(string(" "), (v4045))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4051 = {
                            let clo_31 = Func0::new(move || Dice_ui::closure257((), ()));
                            Func1::new({
                                let clo_31 = clo_31.clone();
                                move |arg_31: ()| clo_31()
                            })
                        };
                        let v4054 = {
                            let clo_32 = Func0::new({
                                let v4014 = v4014.clone();
                                move || Dice_ui::closure258(v4014.clone(), ())
                            });
                            Func1::new({
                                let clo_32 = clo_32.clone();
                                move |arg_32: ()| clo_32()
                            })
                        };
                        let v4055: string = string(
                            "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4054(()) + \" \" + &v4051(())",
                        );
                        let v4056: string = append(
                            (append((append(string(" "), (v4055))), string(""))),
                            string(""),
                        );
                        let v4058: string = string(" class=\"flex items-center gap-2\"");
                        let v4061: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v4062: string = (Dice_ui::method243(v4014.clone()))();
                        let v4071: &str = &*v4062;
                        let v4104: std::string::String = String::from(v4071);
                        let v4130: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v4104),
                        );
                        let v4134: string = string("vec![v4130]");
                        let v4135: Vec<leptos::prelude::AnyView> = vec![v4130];
                        let v4137: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4135);
                        let v4139: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4137);
                        let v4142: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4061))),
                                            string(">move || { v4139 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4144: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4139 }</span> };
                        let v4146: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4144);
                        let v4150: string = string("vec![v4146]");
                        let v4151: Vec<leptos::prelude::AnyView> = vec![v4146];
                        let v4153: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4151);
                        let v4155: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4153);
                        let v4157: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4058))),
                                            string(">move || { v4155 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4159: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4155 }</div> };
                        let v4161: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4159);
                        let v4163: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        fn v4165() -> string {
                            Dice_ui::closure166((), ())
                        }
                        let v4166 = {
                            let clo_33 = Func0::from(v4165);
                            Func1::new({
                                let clo_33 = clo_33.clone();
                                move |arg_33: ()| clo_33()
                            })
                        };
                        let v4174: string = string(
                            " class=move || \" \".to_owned() + &v4166(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v4176: string = string(
                            "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                        );
                        let v4180: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v4176))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4181: string = string("vec![]");
                        let v4182: Vec<leptos::prelude::AnyView> = vec![];
                        let v4184: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4182);
                        let v4186: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4184);
                        let v4188: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4180))),
                                            string(">move || { v4186 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4190: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4186 }</path> };
                        let v4192: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4190);
                        let v4196: string = string("vec![v4192]");
                        let v4197: Vec<leptos::prelude::AnyView> = vec![v4192];
                        let v4199: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4197);
                        let v4201: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4199);
                        let v4203: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4174))),
                                            string(">move || { v4201 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4205: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4166(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4201 }</svg> };
                        let v4207: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4205);
                        let v4211: string = string("vec![v4207]");
                        let v4212: Vec<leptos::prelude::AnyView> = vec![v4207];
                        let v4214: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4212);
                        let v4216: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4214);
                        let v4218: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4163))),
                                            string(">move || { v4216 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4220: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4216 }</span> };
                        let v4222: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4220);
                        let v4229: string = string("vec![v4161, v4222]");
                        let v4230: Vec<leptos::prelude::AnyView> = vec![v4161, v4222];
                        let v4232: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4230);
                        let v4234: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4232);
                        let v4237: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v4056))),
                                            string(">move || { v4234 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4239: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4054(()) + " " + &v4051(())>move || { v4234 }</summary> };
                        let v4241: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4239);
                        let v4243: string = string(" class=\"flex flex-1 flex-col\"");
                        let v4247: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new({
                                    let v3863 = v3863.clone();
                                    let v3875 = v3875.clone();
                                    let v3895 = v3895.clone();
                                    let v3914 = v3914.clone();
                                    move || {
                                        Dice_ui::closure260(
                                            v3863.clone(),
                                            v3895.clone(),
                                            v3875.clone(),
                                            v3914.clone(),
                                            (),
                                        )
                                    }
                                })()
                            }));
                        let v4249: leptos::prelude::Fragment = (move || v4247())();
                        let v4251: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4249);
                        let v4253: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4243))),
                                            string(">move || { v4251 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4255: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4251 }</div> };
                        let v4257: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4255);
                        let v4264: string = string("vec![v4241, v4257]");
                        let v4265: Vec<leptos::prelude::AnyView> = vec![v4241, v4257];
                        let v4267: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4265);
                        let v4269: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4267);
                        let v4272: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v4048))),
                                            string(">move || { v4269 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4274: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v4026(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4023(())>move || { v4269 }</details> };
                        let v4276: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4274);
                        let v4283: string = string("vec![v4044, v4276]");
                        let v4284: Vec<leptos::prelude::AnyView> = vec![v4044, v4276];
                        let v4286: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4284);
                        let v4288: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4286);
                        let v4290: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4020))),
                                            string(">move || { v4288 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4292: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4288 }</div> };
                        let v4294: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4292);
                        let v4297: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v3863.l0.clone());
                        let v4299: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v4297);
                        let v4580: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                            &v4299.l1.clone(),
                        ) {
                            let v4303: string = string("vec![]");
                            let v4304: Vec<leptos::prelude::AnyView> = vec![];
                            let v4306: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4304);
                            let v4308: string =
                                string(" class=\"flex flex-col [position:relative]\"");
                            let v4310 = {
                                let clo_34 = Func0::from(v4022);
                                Func1::new({
                                    let clo_34 = clo_34.clone();
                                    move |arg_34: ()| clo_34()
                                })
                            };
                            let v4312 = {
                                let clo_35 = Func0::from(v4025);
                                Func1::new({
                                    let clo_35 = clo_35.clone();
                                    move |arg_35: ()| clo_35()
                                })
                            };
                            let v4314: string =
                                string(" class=\"[position:absolute] [right:0] [top:0]\"");
                            let v4318: string = string("vec![v4306]");
                            let v4319: Vec<leptos::prelude::AnyView> = vec![v4306];
                            let v4321: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4319);
                            let v4323: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4321);
                            let v4325: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4314))),
                                                string(">move || { v4323 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4327: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4323 }</div> };
                            let v4329: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4327);
                            let v4330: string = string(
                                "class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4310(())",
                            );
                            let v4333: string = append(
                                (append(
                                    string(" open=move || v4312(())"),
                                    (append(
                                        (append((append(string(" "), (v4330))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v4336 = {
                                let clo_36 = Func0::new(move || Dice_ui::closure337((), ()));
                                Func1::new({
                                    let clo_36 = clo_36.clone();
                                    move |arg_36: ()| clo_36()
                                })
                            };
                            let v4339 = {
                                let clo_37 = Func0::new(move || Dice_ui::closure338((), ()));
                                Func1::new({
                                    let clo_37 = clo_37.clone();
                                    move |arg_37: ()| clo_37()
                                })
                            };
                            let v4340: string = string(
                                "class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4339(()) + \" \" + &v4336(())",
                            );
                            let v4341: string = append(
                                (append((append(string(" "), (v4340))), string(""))),
                                string(""),
                            );
                            let v4343: string = string(" class=\"flex items-center gap-2\"");
                            let v4346: string = string(
                                " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                            );
                            let v4347: string = (Dice_ui::method282())();
                            let v4356: &str = &*v4347;
                            let v4389: std::string::String = String::from(v4356);
                            let v4415: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v4389),
                                );
                            let v4419: string = string("vec![v4415]");
                            let v4420: Vec<leptos::prelude::AnyView> = vec![v4415];
                            let v4422: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4420);
                            let v4424: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4422);
                            let v4426: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v4346))),
                                                string(">move || { v4424 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4428: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4424 }</span> };
                            let v4430: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4428);
                            let v4434: string = string("vec![v4430]");
                            let v4435: Vec<leptos::prelude::AnyView> = vec![v4430];
                            let v4437: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4435);
                            let v4439: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4437);
                            let v4441: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4343))),
                                                string(">move || { v4439 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4443: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4439 }</div> };
                            let v4445: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4443);
                            let v4447: string =
                                string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                            let v4449 = {
                                let clo_38 = Func0::from(v4165);
                                Func1::new({
                                    let clo_38 = clo_38.clone();
                                    move |arg_38: ()| clo_38()
                                })
                            };
                            let v4457: string = string(
                                " class=move || \" \".to_owned() + &v4449(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"",
                            );
                            let v4459: string = string(
                                "d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"",
                            );
                            let v4463: string = append(
                                (append(
                                    string(" clip-rule=\"evenodd\""),
                                    (append(
                                        (append(
                                            (append(string(" "), (v4459))),
                                            string(" fill-rule=\"evenodd\""),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v4464: string = string("vec![]");
                            let v4465: Vec<leptos::prelude::AnyView> = vec![];
                            let v4467: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4465);
                            let v4469: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4467);
                            let v4471: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<path "), (v4463))),
                                                string(">move || { v4469 }</"),
                                            )),
                                            string("path"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4473: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                            > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4469 }</path> };
                            let v4475: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4473);
                            let v4479: string = string("vec![v4475]");
                            let v4480: Vec<leptos::prelude::AnyView> = vec![v4475];
                            let v4482: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4480);
                            let v4484: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4482);
                            let v4486: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v4457))),
                                                string(">move || { v4484 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4488: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4449(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4484 }</svg> };
                            let v4490: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4488);
                            let v4494: string = string("vec![v4490]");
                            let v4495: Vec<leptos::prelude::AnyView> = vec![v4490];
                            let v4497: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4495);
                            let v4499: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4497);
                            let v4501: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v4447))),
                                                string(">move || { v4499 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4503: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4499 }</span> };
                            let v4505: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4503);
                            let v4512: string = string("vec![v4445, v4505]");
                            let v4513: Vec<leptos::prelude::AnyView> = vec![v4445, v4505];
                            let v4515: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4513);
                            let v4517: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4515);
                            let v4519: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<summary "), (v4341))),
                                                string(">move || { v4517 }</"),
                                            )),
                                            string("summary"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4521: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4339(()) + " " + &v4336(())>move || { v4517 }</summary> };
                            let v4523: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4521);
                            let v4525: string = string(" class=\"flex flex-1 flex-col\"");
                            let v4529: Func0<leptos::prelude::Fragment> =
                                Dice_ui::method195(Func0::new(move || {
                                    Func0::new({
                                        let v3895 = v3895.clone();
                                        move || Dice_ui::closure340(v3895.clone(), ())
                                    })()
                                }));
                            let v4531: leptos::prelude::Fragment = (move || v4529())();
                            let v4533: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4531);
                            let v4535: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4525))),
                                                string(">move || { v4533 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4537: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4533 }</div> };
                            let v4539: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4537);
                            let v4546: string = string("vec![v4523, v4539]");
                            let v4547: Vec<leptos::prelude::AnyView> = vec![v4523, v4539];
                            let v4549: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4547);
                            let v4551: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4549);
                            let v4553: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<details "), (v4333))),
                                                string(">move || { v4551 }</"),
                                            )),
                                            string("details"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4555: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Details, _, _>,
                            > = leptos::prelude::view! { <details  open=move || v4312(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4310(())>move || { v4551 }</details> };
                            let v4557: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4555);
                            let v4564: string = string("vec![v4329, v4557]");
                            let v4565: Vec<leptos::prelude::AnyView> = vec![v4329, v4557];
                            let v4567: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4565);
                            let v4569: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4567);
                            let v4571: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4308))),
                                                string(">move || { v4569 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4573: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4569 }</div> };
                            leptos::prelude::IntoAny::into_any(v4573)
                        } else {
                            let v4576: string = string("vec![]");
                            let v4577: Vec<leptos::prelude::AnyView> = vec![];
                            leptos::prelude::IntoAny::into_any(v4577)
                        };
                        let v4587: string = string("vec![v4294, v4580]");
                        let v4588: Vec<leptos::prelude::AnyView> = vec![v4294, v4580];
                        Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v4588))
                    }
                }
                _ => Dice_ui::US22::US22_1,
            };
            let v5595: leptos::prelude::AnyView = match &v5577 {
                Dice_ui::US22::US22_0(v5577_0_0) => {
                    let v5580: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v5582: leptos::prelude::AnyView = leptos::prelude::AnyView::from(
                        match &v5577 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v5585: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5580))),
                                        string(">move || { v5582 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5587: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [overflow-y:auto]">move || { v5582 }</div> };
                    leptos::prelude::IntoAny::into_any(v5587)
                }
                _ => {
                    let v5590: string = string("vec![]");
                    let v5591: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v5591)
                }
            };
            let v5599: string = string("vec![v5595]");
            let v5600: Vec<leptos::prelude::AnyView> = vec![v5595];
            let v5602: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5600);
            let v5604: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5602);
            let v5607: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<main "), (v2232))),
                                string(">move || { v5604 }</"),
                            )),
                            string("main"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5609: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Main, _, _>> = leptos::prelude::view! { <main  class="flex flex-1 flex-col [overflow:hidden]">move || { v5604 }</main> };
            let v5611: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5609);
            let v5613: string = string(" class=\"flex\"");
            let v5616: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v5618: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v5621: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v5618 = v5618.clone();
                        move || Dice_ui::closure41(v5618.clone(), ())
                    })()
                });
            let v5623: string = string(" class=\"hidden\"");
            let v5627: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v5637: &str = &*string("Tab");
            let v5670: std::string::String = String::from(v5637);
            let v5696: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5670));
            let v5700: string = string("vec![v5696]");
            let v5701: Vec<leptos::prelude::AnyView> = vec![v5696];
            let v5703: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5701);
            let v5705: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5703);
            let v5708: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v5627))),
                                string(">move || { v5705 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5710: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class="sr-only" for="Tab">move || { v5705 }</label> };
            let v5712: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5710);
            let v5716: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v5717 = Dice_ui::method285(v1868.clone());
            let v5719: string = string(" selected=v5717()");
            let v5729: &str = &*string("Settings");
            let v5762: std::string::String = String::from(v5729);
            let v5788: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5762));
            let v5792: string = string("vec![v5788]");
            let v5793: Vec<leptos::prelude::AnyView> = vec![v5788];
            let v5795: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5793);
            let v5797: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5795);
            let v5800: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5719))),
                                string(">move || { v5797 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5802: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5717()>move || { v5797 }</option> };
            let v5804: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5802);
            let v5805 = Dice_ui::method286(v1868.clone());
            let v5807: string = string(" selected=v5805()");
            let v5817: &str = &*string("Transactions");
            let v5850: std::string::String = String::from(v5817);
            let v5876: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5850));
            let v5880: string = string("vec![v5876]");
            let v5881: Vec<leptos::prelude::AnyView> = vec![v5876];
            let v5883: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5881);
            let v5885: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5883);
            let v5887: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5807))),
                                string(">move || { v5885 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5889: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5805()>move || { v5885 }</option> };
            let v5891: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5889);
            let v5892 = Dice_ui::method287(v1868.clone());
            let v5894: string = string(" selected=v5892()");
            let v5904: &str = &*string("Lists");
            let v5937: std::string::String = String::from(v5904);
            let v5963: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5937));
            let v5967: string = string("vec![v5963]");
            let v5968: Vec<leptos::prelude::AnyView> = vec![v5963];
            let v5970: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5968);
            let v5972: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5970);
            let v5974: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5894))),
                                string(">move || { v5972 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5976: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5892()>move || { v5972 }</option> };
            let v5978: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5976);
            let v5979 = Dice_ui::method288(v1868.clone());
            let v5981: string = string(" selected=v5979()");
            let v5991: &str = &*string("Dice");
            let v6024: std::string::String = String::from(v5991);
            let v6050: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v6024));
            let v6054: string = string("vec![v6050]");
            let v6055: Vec<leptos::prelude::AnyView> = vec![v6050];
            let v6057: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6055);
            let v6059: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6057);
            let v6061: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5981))),
                                string(">move || { v6059 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6063: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5979()>move || { v6059 }</option> };
            let v6065: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6063);
            let v6079: string = string("vec![v6065, v5978, v5891, v5804]");
            let v6080: Vec<leptos::prelude::AnyView> = vec![v6065, v5978, v5891, v5804];
            let v6082: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6080);
            let v6084: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6082);
            let v6087: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<select "), (v5716))),
                                string(">move || { v6084 }</"),
                            )),
                            string("select"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6089: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Select, _, _>,
            > = leptos::prelude::view! { <select  class="w-full rounded-md border-gray-200" id="Tab">move || { v6084 }</select> };
            let v6091: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6089);
            let v6098: string = string("vec![v5712, v6091]");
            let v6099: Vec<leptos::prelude::AnyView> = vec![v5712, v6091];
            let v6101: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6099);
            let v6103: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6101);
            let v6106: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5623))),
                                string(">move || { v6103 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6108: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="hidden">move || { v6103 }</div> };
            let v6110: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v6112: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v6113: string = string(
                "class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"",
            );
            let v6116: string = append(
                (append(
                    string(" aria-label=\"Tabs\""),
                    (append(
                        (append((append(string(" "), (v6113))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            fn v6118() -> string {
                Dice_ui::closure348((), ())
            }
            let v6119 = {
                let clo_39 = Func0::from(v6118);
                Func1::new({
                    let clo_39 = clo_39.clone();
                    move |arg_39: ()| clo_39()
                })
            };
            let v6131: string = string(
                " class=move || \" \".to_owned() + &v6119(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
            );
            let v6134: string = string(
                "d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"",
            );
            let v6137: string = append(
                (append(
                    (append(string(" "), (v6134))),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                )),
                string(""),
            );
            let v6138: string = string("vec![]");
            let v6139: Vec<leptos::prelude::AnyView> = vec![];
            let v6141: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6139);
            let v6143: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6141);
            let v6146: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v6137))),
                                string(">move || { v6143 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6148: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v6143 }</path> };
            let v6150: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6148);
            let v6156: string = string(
                " d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v6157: string = string("vec![]");
            let v6158: Vec<leptos::prelude::AnyView> = vec![];
            let v6160: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6158);
            let v6162: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6160);
            let v6164: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v6156))),
                                string(">move || { v6162 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6166: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v6162 }</path> };
            let v6168: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6166);
            let v6175: string = string("vec![v6150, v6168]");
            let v6176: Vec<leptos::prelude::AnyView> = vec![v6150, v6168];
            let v6178: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6176);
            let v6180: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6178);
            let v6183: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v6131))),
                                string(">move || { v6180 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6185: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v6119(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6180 }</svg> };
            let v6187: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6185);
            let v6191: string = string("vec![v6187]");
            let v6192: Vec<leptos::prelude::AnyView> = vec![v6187];
            let v6194: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6192);
            let v6195 = Func0::new({
                let v5621 = v5621.clone();
                move || Dice_ui::closure349(v5621.clone(), ())
            });
            {
                let v6199 = {
                    let clo_40 = Func0::new({
                        let v1868 = v1868.clone();
                        move || Dice_ui::closure350(v1868.clone(), ())
                    });
                    Func1::new({
                        let clo_40 = clo_40.clone();
                        move |arg_40: ()| clo_40()
                    })
                };
                let v6202 = {
                    let clo_41 = Func0::new({
                        let v1868 = v1868.clone();
                        move || Dice_ui::closure351(v1868.clone(), ())
                    });
                    Func1::new({
                        let clo_41 = clo_41.clone();
                        move |arg_41: ()| clo_41()
                    })
                };
                let v6204: string = string(
                    "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6202(())",
                );
                let v6208: string = append(
                    (append(
                        string(" aria-current=move || if v6199(()) { \"page\" } else { \"\" }"),
                        (append(
                            (append(
                                (append(string(" "), (v6204))),
                                string(" href=move || v6195()"),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v6210: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6194);
                let v6219: &str = &*string("Settings");
                let v6252: std::string::String = String::from(v6219);
                let v6278: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v6252));
                let v6285: string = string("vec![v6210, v6278]");
                let v6286: Vec<leptos::prelude::AnyView> = vec![v6210, v6278];
                let v6288: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6286);
                let v6290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6288);
                let v6293: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<a "), (v6208))),
                                    string(">move || { v6290 }</"),
                                )),
                                string("a"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6295: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::A, _, _>> = leptos::prelude::view! { <a  aria-current=move || if v6199(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6202(()) href=move || v6195()>move || { v6290 }</a> };
                let v6297: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6295);
                let v6299 = {
                    let clo_42 = Func0::from(v6118);
                    Func1::new({
                        let clo_42 = clo_42.clone();
                        move |arg_42: ()| clo_42()
                    })
                };
                let v6313: string = string(
                    " class=move || \"text-gray-700 \".to_owned() + &v6299(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                );
                let v6319: string = string(
                    " d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                );
                let v6320: string = string("vec![]");
                let v6321: Vec<leptos::prelude::AnyView> = vec![];
                let v6323: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6321);
                let v6325: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6323);
                let v6327: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v6319))),
                                    string(">move || { v6325 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6329: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7" stroke-linejoin="round" stroke-linecap="round">move || { v6325 }</path> };
                let v6331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6329);
                let v6335: string = string("vec![v6331]");
                let v6336: Vec<leptos::prelude::AnyView> = vec![v6331];
                let v6338: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6336);
                let v6340: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6338);
                let v6342: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v6313))),
                                    string(">move || { v6340 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6344: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v6299(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6340 }</svg> };
                let v6346: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6344);
                let v6350: string = string("vec![v6346]");
                let v6351: Vec<leptos::prelude::AnyView> = vec![v6346];
                let v6353: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6351);
                let v6354 = Func0::new({
                    let v5621 = v5621.clone();
                    move || Dice_ui::closure352(v5621.clone(), ())
                });
                {
                    let v6358 = {
                        let clo_43 = Func0::new({
                            let v1868 = v1868.clone();
                            move || Dice_ui::closure353(v1868.clone(), ())
                        });
                        Func1::new({
                            let clo_43 = clo_43.clone();
                            move |arg_43: ()| clo_43()
                        })
                    };
                    let v6361 = {
                        let clo_44 = Func0::new({
                            let v1868 = v1868.clone();
                            move || Dice_ui::closure354(v1868.clone(), ())
                        });
                        Func1::new({
                            let clo_44 = clo_44.clone();
                            move |arg_44: ()| clo_44()
                        })
                    };
                    let v6363: string = string(
                        "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6361(())",
                    );
                    let v6367: string = append(
                        (append(
                            string(" aria-current=move || if v6358(()) { \"page\" } else { \"\" }"),
                            (append(
                                (append(
                                    (append(string(" "), (v6363))),
                                    string(" href=move || v6354()"),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v6369: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6353);
                    let v6378: &str = &*string("Transactions");
                    let v6411: std::string::String = String::from(v6378);
                    let v6437: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v6411),
                    );
                    let v6444: string = string("vec![v6369, v6437]");
                    let v6445: Vec<leptos::prelude::AnyView> = vec![v6369, v6437];
                    let v6447: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6445);
                    let v6449: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6447);
                    let v6451: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<a "), (v6367))),
                                        string(">move || { v6449 }</"),
                                    )),
                                    string("a"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6453: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::A, _, _>,
                    > = leptos::prelude::view! { <a  aria-current=move || if v6358(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6361(()) href=move || v6354()>move || { v6449 }</a> };
                    let v6455: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6453);
                    let v6457 = {
                        let clo_45 = Func0::from(v6118);
                        Func1::new({
                            let clo_45 = clo_45.clone();
                            move |arg_45: ()| clo_45()
                        })
                    };
                    let v6471: string = string(
                        " class=move || \"text-gray-700 \".to_owned() + &v6457(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                    );
                    let v6477: string = string(
                        " d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v6478: string = string("vec![]");
                    let v6479: Vec<leptos::prelude::AnyView> = vec![];
                    let v6481: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6479);
                    let v6483: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6481);
                    let v6485: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v6477))),
                                        string(">move || { v6483 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6487: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5" stroke-linejoin="round" stroke-linecap="round">move || { v6483 }</path> };
                    let v6489: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6487);
                    let v6497: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
                    let v6498: string = string("vec![]");
                    let v6499: Vec<leptos::prelude::AnyView> = vec![];
                    let v6501: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6499);
                    let v6503: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6501);
                    let v6506: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6497))),
                                        string(">move || { v6503 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6508: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="6.75" cx="3">move || { v6503 }</circle> };
                    let v6510: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6508);
                    let v6518: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
                    let v6519: string = string("vec![]");
                    let v6520: Vec<leptos::prelude::AnyView> = vec![];
                    let v6522: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6520);
                    let v6524: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6522);
                    let v6526: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6518))),
                                        string(">move || { v6524 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6528: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="12" cx="3">move || { v6524 }</circle> };
                    let v6530: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6528);
                    let v6538: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
                    let v6539: string = string("vec![]");
                    let v6540: Vec<leptos::prelude::AnyView> = vec![];
                    let v6542: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6540);
                    let v6544: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6542);
                    let v6546: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6538))),
                                        string(">move || { v6544 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6548: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="17.25" cx="3">move || { v6544 }</circle> };
                    let v6550: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6548);
                    let v6563: string = string("vec![v6489, v6510, v6530, v6550]");
                    let v6564: Vec<leptos::prelude::AnyView> = vec![v6489, v6510, v6530, v6550];
                    let v6566: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6564);
                    let v6568: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6566);
                    let v6570: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v6471))),
                                        string(">move || { v6568 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6572: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v6457(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6568 }</svg> };
                    let v6574: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6572);
                    let v6578: string = string("vec![v6574]");
                    let v6579: Vec<leptos::prelude::AnyView> = vec![v6574];
                    let v6581: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6579);
                    let v6582 = Func0::new({
                        let v5621 = v5621.clone();
                        move || Dice_ui::closure355(v5621.clone(), ())
                    });
                    {
                        let v6586 = {
                            let clo_46 = Func0::new({
                                let v1868 = v1868.clone();
                                move || Dice_ui::closure356(v1868.clone(), ())
                            });
                            Func1::new({
                                let clo_46 = clo_46.clone();
                                move |arg_46: ()| clo_46()
                            })
                        };
                        let v6589 = {
                            let clo_47 = Func0::new({
                                let v1868 = v1868.clone();
                                move || Dice_ui::closure357(v1868.clone(), ())
                            });
                            Func1::new({
                                let clo_47 = clo_47.clone();
                                move |arg_47: ()| clo_47()
                            })
                        };
                        let v6591: string = string(
                            "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6589(())",
                        );
                        let v6595: string = append(
                            (append(
                                string(
                                    " aria-current=move || if v6586(()) { \"page\" } else { \"\" }",
                                ),
                                (append(
                                    (append(
                                        (append(string(" "), (v6591))),
                                        string(" href=move || v6582()"),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v6597: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6581);
                        let v6606: &str = &*string("Lists");
                        let v6639: std::string::String = String::from(v6606);
                        let v6665: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v6639),
                        );
                        let v6672: string = string("vec![v6597, v6665]");
                        let v6673: Vec<leptos::prelude::AnyView> = vec![v6597, v6665];
                        let v6675: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6673);
                        let v6677: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6675);
                        let v6679: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<a "), (v6595))),
                                            string(">move || { v6677 }</"),
                                        )),
                                        string("a"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6681: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::A, _, _>,
                        > = leptos::prelude::view! { <a  aria-current=move || if v6586(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6589(()) href=move || v6582()>move || { v6677 }</a> };
                        let v6683: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6681);
                        let v6685 = {
                            let clo_48 = Func0::from(v6118);
                            Func1::new({
                                let clo_48 = clo_48.clone();
                                move |arg_48: ()| clo_48()
                            })
                        };
                        let v6697: string = string(
                            " class=move || \" \".to_owned() + &v6685(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"",
                        );
                        let v6711: string = string(
                            " stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"",
                        );
                        let v6712: string = string("vec![]");
                        let v6713: Vec<leptos::prelude::AnyView> = vec![];
                        let v6715: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6713);
                        let v6717: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6715);
                        let v6720: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v6711))),
                                            string(">move || { v6717 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6722: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  stroke-linejoin="round" stroke-linecap="round" rx="2" height="18" width="18" y="3" x="3">move || { v6717 }</rect> };
                        let v6724: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6722);
                        let v6732: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
                        let v6733: string = string("vec![]");
                        let v6734: Vec<leptos::prelude::AnyView> = vec![];
                        let v6736: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6734);
                        let v6738: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6736);
                        let v6740: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6732))),
                                            string(">move || { v6738 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6742: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="7.5">move || { v6738 }</circle> };
                        let v6744: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6742);
                        let v6752: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
                        let v6753: string = string("vec![]");
                        let v6754: Vec<leptos::prelude::AnyView> = vec![];
                        let v6756: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6754);
                        let v6758: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6756);
                        let v6760: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6752))),
                                            string(">move || { v6758 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6762: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="16.5">move || { v6758 }</circle> };
                        let v6764: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6762);
                        let v6772: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
                        let v6773: string = string("vec![]");
                        let v6774: Vec<leptos::prelude::AnyView> = vec![];
                        let v6776: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6774);
                        let v6778: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6776);
                        let v6780: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6772))),
                                            string(">move || { v6778 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6782: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="12" cx="12">move || { v6778 }</circle> };
                        let v6784: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6782);
                        let v6792: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
                        let v6793: string = string("vec![]");
                        let v6794: Vec<leptos::prelude::AnyView> = vec![];
                        let v6796: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6794);
                        let v6798: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6796);
                        let v6800: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6792))),
                                            string(">move || { v6798 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6802: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="7.5">move || { v6798 }</circle> };
                        let v6804: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6802);
                        let v6812: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
                        let v6813: string = string("vec![]");
                        let v6814: Vec<leptos::prelude::AnyView> = vec![];
                        let v6816: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6814);
                        let v6818: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6816);
                        let v6820: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6812))),
                                            string(">move || { v6818 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6822: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="16.5">move || { v6818 }</circle> };
                        let v6824: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6822);
                        let v6843: string =
                            string("vec![v6724, v6744, v6764, v6784, v6804, v6824]");
                        let v6844: Vec<leptos::prelude::AnyView> =
                            vec![v6724, v6744, v6764, v6784, v6804, v6824];
                        let v6846: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6844);
                        let v6848: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6846);
                        let v6850: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v6697))),
                                            string(">move || { v6848 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6852: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v6685(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6848 }</svg> };
                        let v6854: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6852);
                        let v6858: string = string("vec![v6854]");
                        let v6859: Vec<leptos::prelude::AnyView> = vec![v6854];
                        let v6861: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6859);
                        let v6862 = Func0::new({
                            let v5621 = v5621.clone();
                            move || Dice_ui::closure358(v5621.clone(), ())
                        });
                        {
                            let v6866 = {
                                let clo_49 = Func0::new({
                                    let v1868 = v1868.clone();
                                    move || Dice_ui::closure359(v1868.clone(), ())
                                });
                                Func1::new({
                                    let clo_49 = clo_49.clone();
                                    move |arg_49: ()| clo_49()
                                })
                            };
                            let v6869 = {
                                let clo_50 = Func0::new({
                                    let v1868 = v1868.clone();
                                    move || Dice_ui::closure360(v1868.clone(), ())
                                });
                                Func1::new({
                                    let clo_50 = clo_50.clone();
                                    move |arg_50: ()| clo_50()
                                })
                            };
                            let v6871: string = string(
                                "class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6869(())",
                            );
                            let v6875: string = append(
                                (append(
                                    string(
                                        " aria-current=move || if v6866(()) { \"page\" } else { \"\" }",
                                    ),
                                    (append(
                                        (append(
                                            (append(string(" "), (v6871))),
                                            string(" href=move || v6862()"),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v6877: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6861);
                            let v6886: &str = &*string("Dice");
                            let v6919: std::string::String = String::from(v6886);
                            let v6945: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v6919),
                                );
                            let v6952: string = string("vec![v6877, v6945]");
                            let v6953: Vec<leptos::prelude::AnyView> = vec![v6877, v6945];
                            let v6955: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6953);
                            let v6957: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6955);
                            let v6959: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<a "), (v6875))),
                                                string(">move || { v6957 }</"),
                                            )),
                                            string("a"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6961: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::A, _, _>,
                            > = leptos::prelude::view! { <a  aria-current=move || if v6866(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6869(()) href=move || v6862()>move || { v6957 }</a> };
                            let v6963: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6961);
                            let v6976: string = string("vec![v6963, v6683, v6455, v6297]");
                            let v6977: Vec<leptos::prelude::AnyView> =
                                vec![v6963, v6683, v6455, v6297];
                            let v6979: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6977);
                            let v6981: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6979);
                            let v6984: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<nav "), (v6116))),
                                                string(">move || { v6981 }</"),
                                            )),
                                            string("nav"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6986: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Nav, _, _>,
                            > = leptos::prelude::view! { <nav  aria-label="Tabs" class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]">move || { v6981 }</nav> };
                            let v6988: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6986);
                            let v6992: string = string("vec![v6988]");
                            let v6993: Vec<leptos::prelude::AnyView> = vec![v6988];
                            let v6995: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6993);
                            let v6997: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6995);
                            let v6999: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v6112))),
                                                string(">move || { v6997 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7001: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 border-t border-gray-200">move || { v6997 }</div> };
                            let v7003: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7001);
                            let v7007: string = string("vec![v7003]");
                            let v7008: Vec<leptos::prelude::AnyView> = vec![v7003];
                            let v7010: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7008);
                            let v7012: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7010);
                            let v7014: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v6110))),
                                                string(">move || { v7012 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7016: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">move || { v7012 }</div> };
                            let v7018: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7016);
                            let v7020: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6108);
                            let v7027: string = string("vec![v7020, v7018]");
                            let v7028: Vec<leptos::prelude::AnyView> = vec![v7020, v7018];
                            let v7030: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7028);
                            let v7032: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7030);
                            let v7034: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5613))),
                                                string(">move || { v7032 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7036: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex">move || { v7032 }</div> };
                            let v7038: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7036);
                            let v7045: string = string("vec![v5611, v7038]");
                            let v7046: Vec<leptos::prelude::AnyView> = vec![v5611, v7038];
                            let v7048: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7046);
                            let v7050: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7048);
                            let v7052: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2230))),
                                                string(">move || { v7050 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7054: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">move || { v7050 }</div> };
                            let v7056: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7054);
                            let v7060: string = string("vec![v7056]");
                            let v7061: Vec<leptos::prelude::AnyView> = vec![v7056];
                            let v7063: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7061);
                            let v7065: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7063);
                            let v7067: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2228))),
                                                string(">move || { v7065 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v7069: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 max-[100px]:[overflow-x:auto]">move || { v7065 }</div> };
                            let v7071: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v7069);
                            let v7075: string = string("vec![v7071]");
                            let v7076: Vec<leptos::prelude::AnyView> = vec![v7071];
                            let v7078: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v7076);
                            let v7080: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v7078);
                            let v7082: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1849))),
                                                string(">move || { v7080 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            leptos::prelude::view! { <div  class:dark={move || v1845()} class="flex flex-1">move || { v7080 }</div> }
                        }
                    }
                }
            }
        }
        pub fn method5()
        -> Func1<i32, leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>>
        {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method289(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure361(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(1_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method290(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure361(v0_1.clone(), ())
            })
        }
        pub fn closure362(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            leptos::prelude::Fragment::new(v2)
        }
        pub fn closure363(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(2_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method291(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure363(v0_1.clone(), ())
            })
        }
        pub fn closure364(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(3_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method292(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure364(v0_1.clone(), ())
            })
        }
        pub fn closure365(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(4_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method293(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure365(v0_1.clone(), ())
            })
        }
        pub fn closure4(
            unitVar: (),
            unitVar_1: (),
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v0_1 = Dice_ui::method5();
            let v10: &str = &*string("");
            let v68: std::string::String = Dice_ui::method289(String::from(v10));
            let v69 = Dice_ui::method290(v0_1.clone());
            let v79: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v69() path=leptos_router::path!(v68) /> })",
            );
            let v80: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v69() path=leptos_router::path!(v68) /> },
                );
            let v90: &str = &*string("/");
            let v148: std::string::String = Dice_ui::method289(String::from(v90));
            let v149 = Dice_ui::method291(v0_1.clone());
            let v157: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v149() path=leptos_router::path!(v148) /> })",
            );
            let v158: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v149() path=leptos_router::path!(v148) /> },
                );
            let v168: &str = &*string("/*");
            let v226: std::string::String = Dice_ui::method289(String::from(v168));
            let v227 = Dice_ui::method292(v0_1.clone());
            let v235: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v227() path=leptos_router::path!(v226) /> })",
            );
            let v236: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v227() path=leptos_router::path!(v226) /> },
                );
            let v246: &str = &*string("*");
            let v304: std::string::String = Dice_ui::method289(String::from(v246));
            let v305 = Dice_ui::method293(v0_1);
            let v313: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v305() path=leptos_router::path!(v304) /> })",
            );
            let v314: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v305() path=leptos_router::path!(v304) /> },
                );
            let v328: string = string("vec![v80, v158, v236, v314]");
            vec![v80, v158, v236, v314]
        }
        pub fn method4() -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>
        {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method294(
            v0_1: Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>,
        ) -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method294(Dice_ui::method4());
            let v11: &str = &*string("leptos.routes / fallback");
            let v44: std::string::String = String::from(v11);
            let v70: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v78: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v70 /> })",
            );
            let v79 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v70 /> },
            );
            let v81: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v79);
            let v85: string = string("vec![v81]");
            let v86: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v86)
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v8: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v18: &str = &*string("");
            let v51: std::string::String = String::from(v18);
            let v77: leptos::prelude::ArcRwSignal<std::string::String> =
                leptos::prelude::ArcRwSignal::new(v51);
            let v87: &str = &*string("i574n.near");
            let v120: std::string::String = String::from(v87);
            let v158: &str = &*string("luckier.near");
            let v220: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v120)),
                LrcPtr::new((true, String::from(v158))),
            ]);
            let v228: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v220.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v231: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v77,
                l3: leptos::prelude::ArcRwSignal::new(v228),
            });
            let v233: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>> =
                leptos::prelude::ArcRwSignal::new(v231);
            let v235: std::collections::HashMap<
                std::string::String,
                leptos::prelude::ArcRwSignal<bool>,
            > = std::collections::HashMap::new();
            let v238: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v233,
                l1: leptos::prelude::ArcRwSignal::new(v235),
            });
            let v240: bool = true;
            leptos::context::provide_context::<std::sync::Arc<Heap2>>(v238);
            let v246: string = string(
                "leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v241()) /> })",
            );
            let v247 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v241()) /> },
            );
            leptos::prelude::IntoAny::into_any(v247)
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::prelude::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))()); //;
            ()
        }
        pub fn closure366(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method295() -> Func0<()> {
            Func0::new(move || Dice_ui::closure366((), ()))
        }
        pub fn method296(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(
                (append(string("main / args: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::prelude::document().body();
                let v32: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v40: string = append(
                    (append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v32.clone()),
                    )),
                    string(""),
                );
                let v42: bool = true;
                leptos::logging::log!("{}", v40);
                if let Dice_ui::US0::US0_0(v32_0_0) = &v32 {
                    let v44: string = Dice_ui::method1();
                    let v53: &str = &*v44;
                    let v78: web_sys::HtmlElement = Dice_ui::method2(v32_0_0.clone());
                    v78.set_inner_html(v53);
                    Dice_ui::method3()
                } else {
                    let v80 = Dice_ui::method295();
                    let v83: Box<dyn Fn()> = Dice_ui::method296(Box::new(move || v80()));
                    let v85: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v83);
                    let v87: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v85);
                    let v89: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v87);
                    leptos::prelude::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v89)
                        .unwrap();
                    v85.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_9c940d83::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/async__wasm.rs"]
mod module_763b9e6c;
pub use module_763b9e6c::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/common_wasm.rs"]
mod module_18f1c018;
pub use module_18f1c018::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/crypto_wasm.rs"]
mod module_c0301e36;
pub use module_c0301e36::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/date_time_wasm.rs"]
mod module_e5abed0b;
pub use module_e5abed0b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/file_system_wasm.rs"]
mod module_336d1dc9;
pub use module_336d1dc9::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/lib_wasm.rs"]
mod module_12dde172;
pub use module_12dde172::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/networking_wasm.rs"]
mod module_7e35832b;
pub use module_7e35832b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/platform_wasm.rs"]
mod module_afd02cca;
pub use module_afd02cca::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/runtime_wasm.rs"]
mod module_a3c64389;
pub use module_a3c64389::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/sm_wasm.rs"]
mod module_8f227ecb;
pub use module_8f227ecb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/threading_wasm.rs"]
mod module_e08c16fb;
pub use module_e08c16fb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/trace_wasm.rs"]
mod module_702ddcb4;
pub use module_702ddcb4::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_eb7e4788;
pub use module_eb7e4788::*;
pub mod Polyglot {
    // pub use crate::module_eb7e4788::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
